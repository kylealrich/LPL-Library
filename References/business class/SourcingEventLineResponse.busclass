SourcingEventLineResponse is a BusinessClass	
	owned by ss
	prefix is ERL

	Ontology
		symbolic key is SourcingEventLineResponse

	Patterns
		implements TemplateDriven by SourcingEventLine
			create instance
				when (ResponseAmount.UnitPrice entered
					or ResponseAmount.NoCharge
					or ResponseAmount.NoBid)

		enable explicit context override
		implements CompoundDocument
			Document Components
				SourcingEventLineQuestionResponse set

	Persistent Fields
		Status							is Numeric size 2
			States
				Draft		value is 1
				Submitted	value is 2
				Withdrawn	value is 3
		ItemType						is a snapshot of SourcingEventLine.ItemType
		ItemNumber						is a snapshot of SourcingEventLine.ItemNumber
		VendorContext					is a snapshot of SourcingEventResponse.NotifiedSupplier.Supplier.Vendor
		VendorItem
		VendorItemDescription			is a Description
		Quantity						is an UnsignedQuantity
			precision is DerivedNumberOfDecimalsQuantity
		UOM 							is a snapshot of SourcingEventLine.UOM
			context of ItemNumber
		AlternateResponseArray			is an AlternateResponse
			context of ItemNumber
		PackagingString					is a Description
		CurrencyResponseUnitPrice		is like UnsignedUnitCost
			default label is "UnitPrice"
			precision is DerivedNumberOfDecimalsCost
		ResponseAmount
		BaseCurrencyUnitPrice			is like UnsignedUnitCost
			precision is DerivedNumberOfDecimalsCost
		AdvancedPricing
		MarkupDiscount					is AlphaUpper size 1
			States
				Markup		value is "M"
				Discount	value is "D"
		QuantityAmountBreakType			is AlphaUpper size 1
			States
				Quantity	value is "Q"
				Amount		value is "A"
		BasePercent						is Percent size 6.3
		DeliveryDate					is Date
		ResponseComments				is Alpha size 250
			default label is "AdditionalDescription"
		PurchaseOrder
		DeliveryDateOverride			is Date
		EffectiveDate					is Date
		ExpirationDate					is Date
		ScheduleFrequency
		MaxReleaseNumber				is Numeric size 4
		LifetimeMaxQuantity				is Numeric size 10
		AwardQtyToLifetimeMaxQty		is Boolean
		Participant
		LifetimeMaximumAmount			is an InternationalAmount
		ServiceCommitment				is Boolean
		AwardReason
		AwardQuantity					is an UnsignedQuantity
			precision is DerivedNumberOfDecimalsQuantity
		AwardForContract				is Boolean
		AwardDate						is TimeStamp
		AwardByUser						is Alpha size 30
		Contract
			delete ignored
		ContractType
		ContractSubtype
		ContractClassification
		ContractSubclassification 
		POCode
		ParticipantGroup
		NoBidReason
		NewContractCreation				is Boolean
		ContractLine
			delete ignored
		TermsHaveBeenNegotiated			is Boolean
		GlobalTradeItemNumber			is an ItemGTIN
			default label is "GTIN"
		ManufacturerInformation
		CurrencyResponseInitialAmount	is like UnsignedUnitCost
			precision is DerivedNumberOfDecimalsCost
		InitialResponseAmount   is an InternationalCost
			precision is DerivedNumberOfDecimalsCost
		UseItemFromVendorItem   is Boolean
		UOMConversion
			precision is 2
		LowUOMCode				is a UnitOfMeasure

	Local Fields
		LocalPoCode				is a POCode
		LocalContract			is Numeric size 15
		ParaPoCode				is a POCode
		LocalCompany			is like Company 
		LocalPartCompany		is like Company 
		LocalCurrencyExchange	is a CurrencyExchange
		LocalContractType		is AlphaUpper size 50
		LocalContractSubType	is a ContractSubtype
		LocalContractClass		is AlphaUpper size 50
		LocalContractSubClass	is a ContractSubclassification
		LocalCost               is like UnsignedUnitCost
		RoundedValue
		LocalEffectiveDate		is Date
		LocalExpirationDate		is Date
		LocalScheduleFrequency	is a ScheduleFrequency
		LocalMaxReleaseNumber	is Numeric size 4 
		LocalParticipant		is a Participant
		LocalAlphaGTIN 			is like ItemGTIN
		LocalBuyUomQuantity		is Decimal 15.4
		UOMCalculation
			context of ItemNumber

		LocalNotifiedSupplier	is a NotifiedSupplier
		LocalSourcingEvent		is a SourcingEvent
		LocalSourcingEventLine	is Numeric size 6
		GTINCheckDigit
			context of ItemNumber
		LocalValidCheckDigit	is Boolean
		LocalAddOnCharge		is an AddOnCharge
		LocalSourcingEventLineQuestion		is Numeric size 6

	Transient Fields
		SavedPurchaseOrder			is a PurchaseOrder
		TransientRequestingLocation	is a RequestingLocation
			derive value from first LineSourceRel.RequestingLocation
		SavedFromCurrency			is a FromCurrency
		SavedCurrencyTable			is a CurrencyTable
		SavedTransactionAmount		is a CurrencyAmount
		SavedExchangeDate			is a ExchangeDate
		SavedEnterpriseGroup		is a EnterpriseGroup
		OutputCurrency				is a Currency
			derive value from SourcingEventResponse.CurrencyCode
		VendorForSelect				is a Vendor
			derive value from SourcingEventResponse.NotifiedSupplier.Supplier.Vendor
		ItemForSelect				is an Item
			derive value from SourcingEventLine.ItemNumber

	Context Fields
		AwardDateRange					is a DateRange
		FromDeliveryDate
		ToDeliveryDate
		SupplyManagementReportContext	is a SupplyManagementReport

	Derived Fields
		AwardedAmount is a DerivedField
			type is like InternationalCost
				precision is DerivedNumberOfDecimalsCost
			return (AwardQuantity * ResponseAmount.UnitPrice)

		ContractLineCost is a DerivedField
			type is like UnitCost
				precision is DerivedNumberOfDecimalsCost
			restricted
    		return (first ContractSourcingEventLineSourceRel.ContractLineCost)
    	
    	ContractLineUsage is a DerivedField
    		type is like Quantity
			restricted
    		return (first ContractSourcingEventLineSourceRel.ContractLineUsage)
    	
    	CostSavings is a DerivedField
    		type is like InternationalAmount
    		if (ContractSourcingEventLineSourceRel exists)
    			return (ContractLineCost * ContractLineUsage - ResponseAmount.UnitPrice * ContractLineUsage)
    	
    	DerivedNumberOfDecimalsCost is a ConditionalField
			type is Numeric size 1
			restricted
			if (SourcingEventLine.ItemNumber exists)
				SourcingEventLine.ItemNumber.NumberOfDecimalsCost
			else
			if (SourcingEventLine.OutputType.PO)
				Company.InventoryCompanyRel.NumberOfDecimalsCost
			else
				Company.SourcingGroup.ItemGroupRel.DefaultNumberOfDecimalsCost
    	
    	DerivedNumberOfDecimalsQuantity is a ConditionalField
			type is Numeric size 1
			restricted
			if (SourcingEventLine.ItemNumber exists)
				SourcingEventLine.ItemNumber.NumberOfDecimalsQuantity
			else
				Company.InventoryCompanyRel.NumberOfDecimalsQuantity
    	
    	ExtendedPrice is a DerivedField
    		type is like InternationalAmount
    		return (Quantity * ResponseAmount.UnitPrice)
    		
    	CurrencyExtendedPrice is a DerivedField
    		type is like InternationalAmount
    		return (Quantity * CurrencyResponseUnitPrice)
    	
    	BaseExtendedPrice is a DerivedField
    		type is like InternationalAmount
    		return (Quantity * BaseCurrencyUnitPrice)
    	
    	AlternateExtendedPrice is a DerivedField
    		type is like InternationalAmount
			restricted
    		return (AlternateResponseArray.AlternateResponseOccurs.AlternateResponseDetails[1].Quantity * AlternateResponseArray.AlternateResponseOccurs.AlternateResponseDetails[1].ResponseAmount.UnitPrice
				+ AlternateResponseArray.AlternateResponseOccurs.AlternateResponseDetails[2].Quantity * AlternateResponseArray.AlternateResponseOccurs.AlternateResponseDetails[2].ResponseAmount.UnitPrice
			    + AlternateResponseArray.AlternateResponseOccurs.AlternateResponseDetails[3].Quantity * AlternateResponseArray.AlternateResponseOccurs.AlternateResponseDetails[3].ResponseAmount.UnitPrice
			 	+ AlternateResponseArray.AlternateResponseOccurs.AlternateResponseDetails[4].Quantity * AlternateResponseArray.AlternateResponseOccurs.AlternateResponseDetails[4].ResponseAmount.UnitPrice
			 	+ AlternateResponseArray.AlternateResponseOccurs.AlternateResponseDetails[5].Quantity * AlternateResponseArray.AlternateResponseOccurs.AlternateResponseDetails[5].ResponseAmount.UnitPrice)
    	
    	BaseAlternateExtendedPrice is a DerivedField
    		type is like InternationalAmount
			restricted
    		return (AlternateResponseArray.AlternateResponseOccurs.AlternateResponseDetails[1].Quantity * AlternateResponseArray.AlternateResponseOccurs.AlternateResponseDetails[1].BaseCurrencyUnitPrice
				+ AlternateResponseArray.AlternateResponseOccurs.AlternateResponseDetails[2].Quantity * AlternateResponseArray.AlternateResponseOccurs.AlternateResponseDetails[2].BaseCurrencyUnitPrice
			    + AlternateResponseArray.AlternateResponseOccurs.AlternateResponseDetails[3].Quantity * AlternateResponseArray.AlternateResponseOccurs.AlternateResponseDetails[3].BaseCurrencyUnitPrice
			 	+ AlternateResponseArray.AlternateResponseOccurs.AlternateResponseDetails[4].Quantity * AlternateResponseArray.AlternateResponseOccurs.AlternateResponseDetails[4].BaseCurrencyUnitPrice
			 	+ AlternateResponseArray.AlternateResponseOccurs.AlternateResponseDetails[5].Quantity * AlternateResponseArray.AlternateResponseOccurs.AlternateResponseDetails[5].BaseCurrencyUnitPrice)
    	
    	ExtendedInitialPrice is a DerivedField
    		type is like InternationalAmount
			restricted
    		return (Quantity * InitialResponseAmount)
    		
    	CurrencyExtendedInitialPrice is a DerivedField
    		type is like InternationalAmount
			restricted
    		return (Quantity * CurrencyResponseInitialAmount)
    	
    	AwardExtendedPrice is a DerivedField
    		type is like InternationalAmount
    		if (PoOutputOrNoOutput) 
    			return (AwardQuantity * ResponseAmount.UnitPrice)
    		else
    		if (AwardForContract)
				return (Quantity * ResponseAmount.UnitPrice)
    			
		BaseAwardExtendedPrice is a DerivedField
    		type is like InternationalAmount
    		if (PoOutputOrNoOutput)
    			return (AwardQuantity * BaseCurrencyUnitPrice)
			else
			if (AwardForContract)
				return (Quantity * BaseCurrencyUnitPrice)
		
		AlternateAwardExtendedPrice is a DerivedField
    		type is like InternationalAmount
			restricted
    		if (PoOutputOrNoOutput)
	    		return (AlternateResponseArray.AlternateResponseOccurs.AlternateResponseDetails[1].AwardQuantity * AlternateResponseArray.AlternateResponseOccurs.AlternateResponseDetails[1].ResponseAmount.UnitPrice
					+ AlternateResponseArray.AlternateResponseOccurs.AlternateResponseDetails[2].AwardQuantity * AlternateResponseArray.AlternateResponseOccurs.AlternateResponseDetails[2].ResponseAmount.UnitPrice
					+ AlternateResponseArray.AlternateResponseOccurs.AlternateResponseDetails[3].AwardQuantity * AlternateResponseArray.AlternateResponseOccurs.AlternateResponseDetails[3].ResponseAmount.UnitPrice
					+ AlternateResponseArray.AlternateResponseOccurs.AlternateResponseDetails[4].AwardQuantity * AlternateResponseArray.AlternateResponseOccurs.AlternateResponseDetails[4].ResponseAmount.UnitPrice
					+ AlternateResponseArray.AlternateResponseOccurs.AlternateResponseDetails[5].AwardQuantity * AlternateResponseArray.AlternateResponseOccurs.AlternateResponseDetails[5].ResponseAmount.UnitPrice)
			else
			if (AwardForContract)
				return (AlternateResponseArray.AlternateResponseOccurs.AlternateResponseDetails[1].Quantity * AlternateResponseArray.AlternateResponseOccurs.AlternateResponseDetails[1].ResponseAmount.UnitPrice
					+ AlternateResponseArray.AlternateResponseOccurs.AlternateResponseDetails[2].Quantity * AlternateResponseArray.AlternateResponseOccurs.AlternateResponseDetails[2].ResponseAmount.UnitPrice
					+ AlternateResponseArray.AlternateResponseOccurs.AlternateResponseDetails[3].Quantity * AlternateResponseArray.AlternateResponseOccurs.AlternateResponseDetails[3].ResponseAmount.UnitPrice
					+ AlternateResponseArray.AlternateResponseOccurs.AlternateResponseDetails[4].Quantity * AlternateResponseArray.AlternateResponseOccurs.AlternateResponseDetails[4].ResponseAmount.UnitPrice
					+ AlternateResponseArray.AlternateResponseOccurs.AlternateResponseDetails[5].Quantity * AlternateResponseArray.AlternateResponseOccurs.AlternateResponseDetails[5].ResponseAmount.UnitPrice)
		
		BaseAlternateAwardExtendedPrice is a DerivedField
    		type is like InternationalAmount
			restricted
    		if (PoOutputOrNoOutput)
	    		return (AlternateResponseArray.AlternateResponseOccurs.AlternateResponseDetails[1].AwardQuantity * AlternateResponseArray.AlternateResponseOccurs.AlternateResponseDetails[1].BaseCurrencyUnitPrice
				+ AlternateResponseArray.AlternateResponseOccurs.AlternateResponseDetails[2].AwardQuantity * AlternateResponseArray.AlternateResponseOccurs.AlternateResponseDetails[2].BaseCurrencyUnitPrice
				+ AlternateResponseArray.AlternateResponseOccurs.AlternateResponseDetails[3].AwardQuantity * AlternateResponseArray.AlternateResponseOccurs.AlternateResponseDetails[3].BaseCurrencyUnitPrice
				+ AlternateResponseArray.AlternateResponseOccurs.AlternateResponseDetails[4].AwardQuantity * AlternateResponseArray.AlternateResponseOccurs.AlternateResponseDetails[4].BaseCurrencyUnitPrice
				+ AlternateResponseArray.AlternateResponseOccurs.AlternateResponseDetails[5].AwardQuantity * AlternateResponseArray.AlternateResponseOccurs.AlternateResponseDetails[5].BaseCurrencyUnitPrice)
			else
			if (AwardForContract)
				return (AlternateResponseArray.AlternateResponseOccurs.AlternateResponseDetails[1].Quantity * AlternateResponseArray.AlternateResponseOccurs.AlternateResponseDetails[1].BaseCurrencyUnitPrice
				+ AlternateResponseArray.AlternateResponseOccurs.AlternateResponseDetails[2].Quantity * AlternateResponseArray.AlternateResponseOccurs.AlternateResponseDetails[2].BaseCurrencyUnitPrice
				+ AlternateResponseArray.AlternateResponseOccurs.AlternateResponseDetails[3].Quantity * AlternateResponseArray.AlternateResponseOccurs.AlternateResponseDetails[3].BaseCurrencyUnitPrice
				+ AlternateResponseArray.AlternateResponseOccurs.AlternateResponseDetails[4].Quantity * AlternateResponseArray.AlternateResponseOccurs.AlternateResponseDetails[4].BaseCurrencyUnitPrice
				+ AlternateResponseArray.AlternateResponseOccurs.AlternateResponseDetails[5].Quantity * AlternateResponseArray.AlternateResponseOccurs.AlternateResponseDetails[5].BaseCurrencyUnitPrice)
		
		ResponseTotalAOC is a DerivedField
			type is like InternationalAmount
			return(sum SourcingEventLineResponseAOC set.TotalAOCCost)
			
		ResponseUnitAOC is a DerivedField
			type is like InternationalCost
				precision is DerivedNumberOfDecimalsCost
			return (sum SourcingEventLineResponseAOC set.UnitAOCCost)
			
		ResponseTotalAOCInResponseCurrency is a DerivedField
			type is like InternationalAmount
			return(sum SourcingEventLineResponseAOC set.CurrencyTotalAOCCost)
			
		ResponseUnitAOCInResponseCurrency is a DerivedField
			type is like InternationalCost
			return (sum SourcingEventLineResponseAOC set.CurrencyAOCCost)
		
		NetUnitPrice is a DerivedField   
			type is like InternationalCost
				precision is DerivedNumberOfDecimalsCost
			return (ResponseAmount.UnitPrice + ResponseUnitAOC)
			
		NetUnitPriceInResponseCurrency is a DerivedField   
			type is like InternationalCost
				precision is DerivedNumberOfDecimalsCost
			return (CurrencyResponseUnitPrice + ResponseUnitAOCInResponseCurrency)
		
		TotalResponse is a DerivedField
			type is like InternationalAmount
			return (ExtendedPrice + ResponseTotalAOC)
			
		TotalResponseInResponseCurrency is a DerivedField
			type is like InternationalAmount
			return (CurrencyExtendedPrice + ResponseTotalAOCInResponseCurrency) 
		
		TotalInitialResponse is a DerivedField
			type is like InternationalAmount
			return (ExtendedInitialPrice + ResponseTotalAOC)
			
		TotalInitialResponseInResponseCurrency is a DerivedField
			type is like InternationalAmount
			return (CurrencyExtendedInitialPrice + ResponseTotalAOCInResponseCurrency) 
		
		AwardTotalResponse is a DerivedField
			type is like InternationalAmount
			return (AwardExtendedPrice + ResponseTotalAOC)
			
    	CreatedContract is a ConditionalField
    		type is AlphaUpper size 30
			restricted
    		if  ((IsAwarded
    		and	  SourcingEventLine.OutputCreated
    		and   SourcingEventLine.ContractOutput)
			or    Contract exists)
    			Contract
    		else
    			blank
    	
    	LineQuestionResponses is a ConditionalField
 			type is Alpha size 10
 			if (SELQuestionsExist)
 				ViewMessage
 			else
 				blank
    	
    	ViewLineQuestionResponses is a ConditionalField
 			type is Alpha size 10
 			if (SELQuestionResponseExists)
 				ViewMessage
 			else
 				blank
    	
    	ResponseAmountDisplay is a DerivedField
    		type is Alpha size 25
    		if (ResponseAmount.NoCharge)
    			return NoChargeMessage
    		else
    		if (ResponseAmount.NoBid)
    			return NoBidMessage
    		else
    			return DerivedUnitPrice
    	
		RoundedResponseQuantity is a DerivedField
			type is like Quantity
			if (Quantity != 0)
				RoundedValue.RoundInput			= Quantity
				RoundedValue.RoundingType		= RoundedValue.RoundingType.Normal
				RoundedValue.RoundTo			= DerivedRoundToQuantity
				RoundedValue.RoundingMethodFW	= RoundedValue.RoundingMethodFW.MultipleOf
				return RoundedValue.RoundResult
			else
				return 0	

		DerivedRoundToQuantity is a DerivedField
			type is like InternationalCost
			restricted
			if (DerivedNumberOfDecimalsQuantity = 8)
				return .00000001
			else
			if (DerivedNumberOfDecimalsQuantity = 7)
				return .0000001
			else
			if (DerivedNumberOfDecimalsQuantity = 6)
				return .000001
			else
			if (DerivedNumberOfDecimalsQuantity = 5)
				return .00001
			else
			if (DerivedNumberOfDecimalsQuantity = 4)
				return .0001
			else
			if (DerivedNumberOfDecimalsQuantity = 3)
				return .001
			else
			if (DerivedNumberOfDecimalsQuantity = 2)
				return .01
			else
			if (DerivedNumberOfDecimalsQuantity = 1)
				return .1
			else
			if (DerivedNumberOfDecimalsQuantity = 0)
				return 1
			else
				return 0

		RoundedResponseCost is a DerivedField
			type is like InternationalCost
			if (LocalCost != 0)
				RoundedValue.RoundInput			= LocalCost
				RoundedValue.RoundingType		= RoundedValue.RoundingType.Normal
				RoundedValue.RoundTo			= DerivedRoundToCost
				RoundedValue.RoundingMethodFW	= RoundedValue.RoundingMethodFW.MultipleOf
				return RoundedValue.RoundResult
			else
				return 0	

		DerivedRoundToCost is a DerivedField
			type is like InternationalCost
			restricted
			if (DerivedNumberOfDecimalsCost = 8)
				return .00000001
			else
			if (DerivedNumberOfDecimalsCost = 7)
				return .0000001
			else
			if (DerivedNumberOfDecimalsCost = 6)
				return .000001
			else
			if (DerivedNumberOfDecimalsCost = 5)
				return .00001
			else
			if (DerivedNumberOfDecimalsCost = 4)
				return .0001
			else
			if (DerivedNumberOfDecimalsCost = 3)
				return .001
			else
			if (DerivedNumberOfDecimalsCost = 2)
				return .01
			else
			if (DerivedNumberOfDecimalsCost = 1)
				return .1
			else
			if (DerivedNumberOfDecimalsCost = 0)
				return 1
			else
				return 0

    	CancelledMessage is a MessageField
			restricted
    		"Cancelled"
    		
    	SubmittedMessage is a MessageField
			restricted
    		"Submitted"
    		
    	EditResponseMessage is a MessageField
			restricted
    		"EditResponse"
    		
    	ViewResponseMessage is a MessageField
			restricted
    		"ViewResponse"
    	
    	NoResponseMessage is a MessageField
			restricted
    		"NoResponse"
    		
    	RespondMessage is a MessageField
			restricted
    		"Respond"
    	
    	SupplierLineResponse is a ConditionalField
    		type is Text
			restricted
			if (CancelledLine)
				CancelledMessage
			else
			if (Status.Submitted)
				ViewResponseMessage
			else
			if (SourcingEventLineResponse exists)
    			EditResponseMessage
     		else
     		if  (SourcingEventResponse.Status.Submitted
			and	 !SourcingEventLineResponse exists)
				NoResponseMessage
			else
    			RespondMessage
    			
    	AlternateResponsesAllowedMessage is a MessageField
			restricted
    		"AlternateResponsesAreAllowedForThisEventLine."
    	
    	ComparableText is a ConditionalField
    		type is Text
			restricted
    		if (SourcingEventLine.AllowAlternateResponses)
    			AlternateResponsesAllowedMessage	
    		else
				blank

   		LineAward is a StringField
			type is Alpha size 30
			AwardQuantity
			
		QuantityServiceContractMaxAmt is a DerivedField
			type is like InternationalAmount
			restricted
    		return (LifetimeMaxQuantity * ResponseAmount.UnitPrice)
    		
		OutPutTypePo is a ConditionalField
		   	type is Alpha size 30
		   	if (IsAwarded
		   	and SourcingEventLine.OutputType.PO)
				PoNumber
			else
				blank

		OutPutTypeCm is a ConditionalField
		   	type is Alpha size 30
		   	if (IsAwarded
		   	and SourcingEventLine.ContractOutput)
				CreatedContract
			else
				blank

		OutPutType is a ConditionalField
		   	type is Text
		   	if (IsAwarded
		   	and SourcingEventLine.OutputType.PO)
				PoNumber
		   	else
		   	if (IsAwarded
		   	and SourcingEventLine.ContractOutput)
				CreatedContract
    		else
    			blank

		PurchaseOrderMessage is a MessageField
			restricted
			"Purchase_Order"
			
		ContractMessage is a MessageField
			restricted
			"Contract"
			
		OutPutTypeLabel is a ConditionalField
		   	type is Text
		   	if (SourcingEventLine.OutputType.PO)
		   		PurchaseOrderMessage
		   	else
		   	if (SourcingEventLine.ContractOutput)
				ContractMessage
			else
				blank

		OutPutTypeHdr is a ConditionalField
		   	type is Alpha size 2
			restricted
		   	if (SourcingEventLine.OutputType.PO)
		   		"PO"
		   	else
		   	if (SourcingEventLine.ContractOutput)
				"CM"
			else
		   		blank

   		PoNumber is a StringField
			type is Alpha size 24
			restricted
   			PurchaseOrder
			
   		EventAndName is a StringField
			type is Alpha size 60
			restricted
			SourcingEventLine.SourcingEventLine
			"-"
			SourcingEventLine.Name
		
		YesMessage is a MessageField
			restricted
			"Yes"
			
		NoMessage is a MessageField
			restricted
			"No"
			
		NoBidText is a ConditionalField
			type is Text
			restricted
			if (ResponseAmount.NoBid)
				YesMessage
			else
				NoMessage
				
		NoBidResponseQuantity is a DerivedField		
			type is like Quantity
			restricted 			
			if (!ResponseAmount.NoBid)
				return Quantity
 			else
 				return blank
 						
		NoChargeText is a ConditionalField
			type is Text
			restricted
			if (ResponseAmount.NoCharge)
				YesMessage
			else
				NoMessage
		
		TotalLineScore is a DerivedField
			type is like InternationalAmount
			return (PriceScore + DiversityScore + DeliveryScore + TotalQuestionScore)
			
		PriceScore is a DerivedField 
    		type is like InternationalAmount
			restricted
    		if (ResponseAmount.NoCharge)
    			return (100 * SourcingEventLine.WeightingCriteria.PriceWeighting)	
    		else
    			return ((LowestBid / NetUnitPrice) * 100 * SourcingEventLine.WeightingCriteria.PriceWeighting)
    		
    	DiversityScore is a DerivedField
    		type is like InternationalAmount
			restricted
    		if (ResponseAmount.NoBid)
    			return 0
    		else
    		if (NotifiedSupplier.Supplier.DiversityRel exists)
    			return (100 * SourcingEventLine.WeightingCriteria.DiversityWeighting)
    		else
    			return (SourcingEventLine.DiversityScoreAllocation * SourcingEventLine.WeightingCriteria.DiversityWeighting)
    	
    	DeliveryScore is a DerivedField
    		type is like InternationalAmount
			restricted
    		if (ResponseAmount.NoBid)
    			return 0
    		else
    		if (SourcingEventLine.DeliveryScoringOption.AsSoonAsPossible)
    			return (((LatestDeliveryDate - DeliveryDateOverride) / (LatestDeliveryDate - EarliestDeliveryDate)) * 100 * SourcingEventLine.WeightingCriteria.DeliveryWeighting)
    		else
    		if (SourcingEventLine.DeliveryScoringOption.OnRequestedDeliveryDate
    		and DeliveryDateOverride = SourcingEventLine.RequestedDeliveryDate)
    			return (100 * SourcingEventLine.WeightingCriteria.DeliveryWeighting)
    		else
    		if (SourcingEventLine.DeliveryScoringOption.OnRequestedDeliveryDate
    		and DeliveryDateOverride != SourcingEventLine.RequestedDeliveryDate)
    			return (SourcingEventLine.DeliveryScoreAllocation * SourcingEventLine.WeightingCriteria.DeliveryWeighting)
    		else
    			return 0
    	
    	TotalQuestionScore is a DerivedField
    		type is like InternationalAmount
			if (!SourcingEvent.AllowsConditionalQuestions)
	    		return (sum WeightedQuestionResponseRel.QuestionScore)
			else
	    		return (sum WeightedSupplierQuestionResponseRel.QuestionScore)

    	EventPriceScore is a DerivedField 
    		type is like InternationalAmount
			restricted
    		if (ResponseAmount.NoCharge)
    			return (100 * SourcingEvent.WeightingCriteria.PriceWeighting * LineWeightingPrice)	
    		else
    			return (((LowestBid / NetUnitPrice) * 100 * SourcingEvent.WeightingCriteria.PriceWeighting) * LineWeightingPrice)
    		 	
    	EventDeliveryScore is a DerivedField 
    		type is like InternationalAmount
			restricted
    		if (ResponseAmount.NoBid)
    			return 0
    		else
    		if (SourcingEvent.DeliveryScoringOption.AsSoonAsPossible)
    			return (((LatestDeliveryDate - DeliveryDateOverride) / (LatestDeliveryDate - EarliestDeliveryDate)) * 100 * SourcingEvent.WeightingCriteria.DeliveryWeighting * LineWeightingDelivery)
    		else
    		if (SourcingEvent.DeliveryScoringOption.OnRequestedDeliveryDate
    		and DeliveryDateOverride = SourcingEventLine.RequestedDeliveryDate)
    			return (100 * SourcingEvent.WeightingCriteria.DeliveryWeighting * LineWeightingDelivery)
    		else
    		if (SourcingEvent.DeliveryScoringOption.OnRequestedDeliveryDate
    		and DeliveryDateOverride != SourcingEventLine.RequestedDeliveryDate)
    			return (SourcingEvent.DeliveryScoreAllocation * SourcingEvent.WeightingCriteria.DeliveryWeighting * LineWeightingDelivery)
    		else
    			return 0
    	
    	LineWeightingPrice is a ConditionalField
    		type is Percent size 6.3
			restricted
    		if (SourcingEventLine.LineWeighting entered
    		or  SourcingEvent.TotalLineWeighting > 0)
    			SourcingEventLine.LineWeighting
    		else
    			(1 / SourcingEventResponse.NumberOfActiveResponseLines)
    			
    	LineWeightingDelivery is a ConditionalField
    		type is Percent size 6.3
			restricted
    		if (SourcingEventLine.LineWeighting entered
    		or  SourcingEvent.TotalLineWeighting > 0)
    			SourcingEventLine.LineWeighting
    		else
    			(1 / SourcingEventResponse.NumberOfActiveResponsePoLines)

		ViewMessage is a MessageField
			restricted
			"View"
		
		NegotiateTerms is a ConditionalField
			type is Text
			if (SourcingEventResponse.RequestToNegotiateTerms
			and (SourcingEventResponse.NegotiateTermsBox entered
			or   SourcingEventResponse.NegotiatedTermsDocument entered))
				ViewMessage
 			else
 				blank
    	
    	LineTotalLineScore is a ConditionalField
			type is AlphaRight size 8
			if (TotalLineScore != 0)
				TotalLineScore
			else
				"0.00"
		
		TotalLineCalc is a ComputeField
			type is Decimal size 8.2
			restricted
			(SourcingEventLine.TotalWeightingByLine * 100)
			
		LineTotalLineWeighting is a ConditionalField
			type is AlphaRight size 8
			if (SourcingEventLine.TotalWeightingByLine != 0)
				TotalLineCalc
			else
				"0.00"
		
		LinePriceScore is a ConditionalField
			type is AlphaRight size 8
			if (PriceScore != 0)
				PriceScore
			else
				"0.00"
		
		LinePriceCalc is a ComputeField
			type is Decimal size 8.2
			restricted
			(SourcingEventLine.WeightingCriteria.PriceWeighting * 100)
				
		LinePriceWeighting is a ConditionalField
			type is AlphaRight size 8
			if (SourcingEventLine.WeightingCriteria.PriceWeighting != 0)
				LinePriceCalc
			else
				"0.00"
		
		LineDeliveryScore is a ConditionalField
			type is AlphaRight size 8
			if (DeliveryScore != 0)
				DeliveryScore
			else
				"0.00"
		
		LineDeliveryCalc is a ComputeField
			type is Decimal size 8.2
			restricted
			(SourcingEventLine.WeightingCriteria.DeliveryWeighting * 100)
					
		LineDeliveryWeighting is a ConditionalField
			type is AlphaRight size 8
			if (SourcingEventLine.WeightingCriteria.DeliveryWeighting != 0)
				LineDeliveryCalc
			else
				"0.00"
		
		LineDiversityScore is a ConditionalField
			type is AlphaRight size 8
			if (DiversityScore != 0)
				DiversityScore
			else
				"0.00"
		
		LineDiversityCalc is a ComputeField
			type is Decimal size 8.2
			restricted
			(SourcingEventLine.WeightingCriteria.DiversityWeighting * 100)
						
		LineDiversityWeighting is a ConditionalField
			type is AlphaRight size 8
			if (SourcingEventLine.WeightingCriteria.DiversityWeighting != 0)
				LineDiversityCalc
			else
				"0.00"
		
		LineTotalQuestionScore is a ConditionalField
			type is AlphaRight size 8 
			if (TotalQuestionScore != 0)
				TotalQuestionScore
			else
				"0.00"
		
		LineQuestionCalc is a ComputeField
			type is Decimal size 8.2
			restricted
			(SourcingEventLine.TotalLineQuestionWeighting * 100)
					
		LineTotalQuestionWeighting is a ConditionalField
			type is AlphaRight size 8
			if (SourcingEventLine.TotalLineQuestionWeighting != 0)
				LineQuestionCalc
			else
				"0.00"

    	NoBidCapMessage is a LabelField
			restricted
    		"NO_BID"
    		
    	NoChargeCapMessage is a LabelField
			restricted
    		"NO_CHARGE"
    	
    	DerivedUnitPrice is a DerivedField
    		type is like InternationalCost
    			precision is DerivedNumberOfDecimalsCost
    		LocalCost = ResponseAmount.UnitPrice
    		return RoundedResponseCost
    	
    	UnitPriceWithPrecision is a DerivedField
    		type is like UnitCost
    			precision is DerivedNumberOfDecimalsCost
    		return ResponseAmount.UnitPrice
    			
    	DisplayUnitPrice is a DerivedField
    		type is Alpha size 20
			if (ResponseAmount.UnitPrice entered)
				return DerivedUnitPrice
			else
    		if (ResponseAmount.NoBid)
    			return NoBidCapMessage
    		else
    		if (ResponseAmount.NoCharge)
    			return NoChargeCapMessage
    		else
    			return blank
				
		CurrencyUnitPriceWithPrecision is a DerivedField
    		type is like UnitCost
    			precision is DerivedNumberOfDecimalsCost
    		return CurrencyResponseUnitPrice
    			
    	ResponseCurrencyAmountDisplay is a DerivedField
    		type is Alpha size 20
			if (ResponseAmount.UnitPrice entered)
				return CurrencyUnitPriceWithPrecision
			else
    		if (ResponseAmount.NoBid)
    			return NoBidCapMessage
    		else
    		if (ResponseAmount.NoCharge)
    			return NoChargeCapMessage
    		else
    			return blank
		
		AddMessage is a MessageField
			restricted
			"Add"
		
		NumberOfAwardedAlternateResponses is a ComputeField
			type is Numeric size 6
			restricted
			(instance count of AwardedAlternateResponsesRel)
			
		TotalOfAlternateResponseAwards is a DerivedField
    		type is like InternationalCost
    			precision is DerivedNumberOfDecimalsCost
			restricted
    		return (sum AwardedAlternateResponsesRel.BaseAwardExtendedPrice)

		TotalOfSupplierResponseAwards is a DerivedField
    		type is like InternationalCost
    			precision is DerivedNumberOfDecimalsCost
    		return (BaseAwardExtendedPrice + (sum AwardedAlternateResponsesRel.BaseAwardExtendedPrice))

		ViewContractMessage is a MessageField
			restricted
			"ViewContract"
		
		ToCmC is a ConditionalField
			type is Text
			restricted
   			if (ToCm)
   				ViewContractMessage
   			else
   				blank
   				
   		ViewPoMessage is a MessageField
			restricted
   			"ViewPO"
   		
   		ToPoC is a ConditionalField
   			type is Text
			restricted
   			if (ExistingPo)
   				ViewPoMessage
   			else
   				blank
   				
   		
   		LowestBid is a DerivedField
    		type is like InternationalCost
    			precision is DerivedNumberOfDecimalsCost
    		LowestBid = first LowestBidRel.NetUnitPrice
    		for each LowestBidRel
    			if (each.NetUnitPrice < LowestBid)
    				LowestBid = each.NetUnitPrice
    	
    	LowestBidExtended is a DerivedField
    		type is like InternationalCost
    			precision is DerivedNumberOfDecimalsCost
			restricted
    		LowestBidExtended = first LowestBidRel.TotalResponse
    		for each LowestBidRel
    			if (each.TotalResponse < LowestBidExtended)
    				LowestBidExtended = each.TotalResponse
    	
    	EarliestDeliveryDate is a DerivedField
    		type is Date
			restricted
    		EarliestDeliveryDate = first DeliveryDateCalcRel.DeliveryDateOverride
    		for each DeliveryDateCalcRel
    			if (each.DeliveryDateOverride < EarliestDeliveryDate)
    				EarliestDeliveryDate = each.DeliveryDateOverride
    	
    	LatestDeliveryDate is a DerivedField
    		type is Date
			restricted
    		LatestDeliveryDate = first DeliveryDateCalcRel.DeliveryDateOverride
    		for each DeliveryDateCalcRel
    			if (each.DeliveryDateOverride > LatestDeliveryDate)
    				LatestDeliveryDate = each.DeliveryDateOverride
    				
    	LineQuantityToAward is a ComputeField
    		type is like UnsignedQuantity
    		(SourcingEventLine.Quantity - SourcingEventLine.TotalAwardQuantity)

		DerivedManufacturerCode is a ConditionalField
			type is AlphaUpper size 4
			if (ManufacturerInformation entered)
				ManufacturerInformation.Manufacturer.ManufacturerCode
			else
			if (SourcingEventLine.ManufacturerInformation entered)
				SourcingEventLine.ManufacturerInformation.Manufacturer.ManufacturerCode
			else
			if (GlobalTradeItemNumber.HasManufacturerInfo)
				GlobalTradeItemNumber.Manufacturer.ManufacturerCode
			else
			if (PovendoritemRel.Manufacturer.ManufacturerCode entered)
				first PovendoritemRel.Manufacturer.ManufacturerCode
			else
				blank

		DerivedManufacturerDivision is a ConditionalField
			type is AlphaUpper size 4
			if (ManufacturerInformation entered)
				ManufacturerInformation.Manufacturer.ManufacturerDivision
			else
			if (SourcingEventLine.ManufacturerInformation entered)
				SourcingEventLine.ManufacturerInformation.Manufacturer.ManufacturerDivision
			else
			if (GlobalTradeItemNumber.HasManufacturerInfo)
				GlobalTradeItemNumber.Manufacturer.ManufacturerDivision
			else
			if (PovendoritemRel.Manufacturer.ManufacturerDivision entered)
				first PovendoritemRel.Manufacturer.ManufacturerDivision
			else
				blank

		DerivedManufacturerNumber is a ConditionalField
			type is AlphaUpper size 35
			if (ManufacturerInformation entered)
				ManufacturerInformation.ManufacturerNumber
			else
			if (SourcingEventLine.ManufacturerInformation entered)
				SourcingEventLine.ManufacturerInformation.ManufacturerNumber
			else
			if (GlobalTradeItemNumber.HasManufacturerInfo)
				GlobalTradeItemNumber.ManufacturerNumber
			else
			if (PovendoritemRel.ManufacturerNumber entered)
				first PovendoritemRel.ManufacturerNumber
			else
				blank

		AlternateAlertLineText is a MessageField
			restricted
 			"AlternateResponsesExistForThisLine;OpenLineItemForDetails;AlternateAmountsNotIncludedInTotalBid"

		AlternateAlertLineText2 is a MessageField
			restricted
			"***SupplierSubmittedAlternateResponse-CannotViewHere***"
		
		DerivedAlternateResponse is a ConditionalField
			type is Text
			if (AlternatesExist)
				AlternateAlertLineText2
			else
				""
		
		DerivedGlobalTradeItemNumber is a ConditionalField
			type is Numeric size 14
			restricted
			if (SourcingEventLine.GlobalTradeItemNumber entered)
				SourcingEventLine.GlobalTradeItemNumber
			else
				GlobalTradeItemNumber

		DerivedGlobalTradeItemNumberManufCode is a ConditionalField
			type is Alpha 4
			restricted
			if (SourcingEventLine.GlobalTradeItemNumber entered)
				SourcingEventLine.GlobalTradeItemNumber.Manufacturer.ManufacturerCode
			else
				GlobalTradeItemNumber.Manufacturer.ManufacturerCode

		DerivedGlobalTradeItemNumberManufDivision is a ConditionalField
			type is Alpha 4
			restricted
			if (SourcingEventLine.GlobalTradeItemNumber entered)
				SourcingEventLine.GlobalTradeItemNumber.Manufacturer.ManufacturerDivision
			else
				GlobalTradeItemNumber.Manufacturer.ManufacturerDivision

		DerivedGlobalTradeItemNumberManufNbr is a ConditionalField
			type is Alpha 35
			restricted
			if (SourcingEventLine.GlobalTradeItemNumber entered)
				SourcingEventLine.GlobalTradeItemNumber.ManufacturerNumber
			else
				GlobalTradeItemNumber.ManufacturerNumber

		NoBidMessage is a MessageField
			restricted
			"NoBid"
		
		SupplierNameWithNoBidText is a StringField
			type is Text
			restricted
			NotifiedSupplier.Supplier.SupplierName
			" ("
			NoBidMessage
			")"

		NoChargeMessage is a MessageField
			restricted
			"NoCharge"
		
		SupplierNameWithNoChargeText is a StringField
			type is Text
			restricted
			NotifiedSupplier.Supplier.SupplierName
			" ("
			NoChargeMessage
			")"

		SupplierNameDerived is a ConditionalField
			type is Text
			if (ResponseAmount.NoBid)
				SupplierNameWithNoBidText
			else
			if (ResponseAmount.NoCharge)
				SupplierNameWithNoChargeText
			else
				NotifiedSupplier.Supplier.SupplierName
			
		EstimateMessage is a MessageField
			restricted
			"Estimate"
			
		UnitPriceMessage is a MessageField
			restricted
			"UnitPrice"
			
		ExtendedPriceMessage is a MessageField
			restricted
			"ExtendedPrice"
			
		AOCMessage is a LabelField
			restricted
			"AOC"
			
		NetUnitPriceMessage is a MessageField
			restricted
			"NetUnitPrice"
			
		TotalBidMessage is a MessageField
			restricted
			"TotalBid"
		
		DerivedUnitPriceLabel is a ConditionalField
			type is Text
			restricted
   			if (SourcingEventLine.PerUnitEstimate entered)
   				UnitPriceMessage + "    " + EstimateMessage + " " + SourcingEventLine.PerUnitEstimate
   			else
   				UnitPriceMessage
   				
		DerivedExtendedPriceLabel is a ConditionalField
			type is Text
			restricted
   			if (SourcingEventLine.PerUnitEstimate entered)
   				ExtendedPriceMessage + "    " + EstimateMessage + " " + SourcingEventLine.DerivedExtendedEstimate
   			else
   				ExtendedPriceMessage
   				
		DerivedAOCLabel is a ConditionalField
			type is Text
			restricted
   			if (SourcingEventLine.DerivedExtendedAOCEstimate entered)
   				AOCMessage + "    " + EstimateMessage + " " + SourcingEventLine.DerivedExtendedAOCEstimate
   			else
   				AOCMessage

		DerivedNetUnitPriceLabel is a ConditionalField
			type is Text
			restricted
   			if (SourcingEventLine.PerUnitEstimate entered)
   				NetUnitPriceMessage + "    " + EstimateMessage + " " + SourcingEventLine.DerivedNetUnitPriceEstimate
   			else
   				NetUnitPriceMessage

		DerivedTotalBidLabel is a ConditionalField
			type is Text
			restricted
   			if (SourcingEventLine.PerUnitEstimate entered)
   				TotalBidMessage + "    " + EstimateMessage + " " + SourcingEventLine.DerivedTotalEstimate
   			else
   				TotalBidMessage
   				
   		NewContractMessage is a MessageField
			restricted
   			"AwardForNewContract"
   			
   		UpdateNewContractMessage is a MessageField
			restricted
   			"UpdateAwardForNewContract"
   		
   		AwardNewContractTitle is a DerivedField
   			type is Text
			restricted
   			if (!SomeContractAwarded)
   				return NewContractMessage
   			else
   				return UpdateNewContractMessage
   		
   		ContractAwarded is a ConditionalField
			type is Alpha size 12
			if (SomeContractAwarded)
				YesMessage
			else 
			if (CmData)
				NoMessage
			else
				blank 

    	DerivedSupplierName is a DerivedField
    		type is Alpha size 60
    		return NotifiedSupplier.Supplier.SupplierName

    	DerivedContactName is a DerivedField
    		type is Alpha size 60
    		return NotifiedSupplier.SupplierSourceId.MainContact.FirstAndLastName

    	DerivedVendor is a DerivedField
    		type is Numeric size 9
    		return NotifiedSupplier.Supplier.Vendor

   		TotalAwardQuantity is a DerivedField
   			type is like Quantity
    			precision is DerivedNumberOfDecimalsQuantity
    		return (AwardQuantity + AlternateResponseArray.AlternateResponseOccurs.AlternateResponseDetails[1].AwardQuantity
					+ AlternateResponseArray.AlternateResponseOccurs.AlternateResponseDetails[2].AwardQuantity
					+ AlternateResponseArray.AlternateResponseOccurs.AlternateResponseDetails[3].AwardQuantity
					+ AlternateResponseArray.AlternateResponseOccurs.AlternateResponseDetails[4].AwardQuantity
					+ AlternateResponseArray.AlternateResponseOccurs.AlternateResponseDetails[5].AwardQuantity)


		SupplierResponsebyCommodityCode is a ComputeField
			type is Numeric size 6
			(instance count of NoBidEventResponseLineRel)
		
		EventAwardedResponseByCommodity is a ComputeField
			type is Numeric size 6
			(instance count of AwardedEventResponseLineRel)

		ResponseByCommodityPercent is a DerivedField
			type is Percent size 6.1
			return (SupplierResponsebyCommodityCode / EventAwardedResponseByCommodity)
		
		SupplierResponseLineBidByCommodity is a ComputeField
			type is Numeric size 6
			(instance count of SupplierResponseLineCommodityRel)
		
		EventAwardedResponseLineByCommodity is a ComputeField
			type is Numeric size 6
			(instance count of EventAwardedResponseLineCommodityRel)
		
		ResponseLineByCommodityPercent is a DerivedField
			type is Percent size 6.1
			return (SupplierResponseLineBidByCommodity / EventAwardedResponseLineByCommodity)
		
		BidTotalByCommodity is a DerivedField
			type is Decimal size 21.2
			return (sum EventResponsesGroupByCommoditySupplierDetailsRel.ExtendedPrice)
		
		AwardTotalByCommodity is a DerivedField
			type is Decimal size 21.2
			return (sum EventResponsesGroupByCommoditySupplierDetailsRel.AwardExtendedPrice)
			
		AmountBidSuccessByCommodity is a DerivedField
			type is Percent size 6.1
			return (AwardTotalByCommodity / BidTotalByCommodity)


		ResponseByCommodityWithDiversity is a ComputeField 	
			type is Numeric size 6
			(instance count of NoBidEventResponseLineWithDiversityRel)

		AwardedResponseByCommodityWithDiversity is a ComputeField 
			type is Numeric size 6
			(instance count of DiversityAwardedEventResponseLineRel)

		TotalAwardedResponseByCommodityWithDiversity is a ComputeField	
			type is Numeric size 6
			(instance count of AwardedResponseLineWithDiversityRel)
		
		PercentAwardedResponseByCommodityWithDiversity is a DerivedField
			type is Percent size 6.1
			return (AwardedResponseByCommodityWithDiversity / ResponseByCommodityWithDiversity)
		
		DiversityResponseLineCommodity is a ComputeField
			type is Numeric size 6
			(instance count of DiversityResponseLineCommodityRel)
		
		DiversityAwardedReponseLineByCommodity is a ComputeField
			type is Numeric size 6
			(instance count of DiversityAwardResponseLineCommodityRel)
		
		TotalDiversityAwardResponseLineByCommodity is a ComputeField
			type is Numeric size 6
			(instance count of TotalAwardResponseLineCommodityRel)
		
		DiversityPercentAwardedByCommodity is a DerivedField
			type is Percent size 6.1
			return (DiversityAwardedReponseLineByCommodity / DiversityResponseLineCommodity)
		
		AwardedTotalByDiversity is a DerivedField
			type is Decimal size 21.2
			return (sum DiversityAwardResponseLineCommodityRel.TotalOfSupplierResponseAwards)
		
		DiversityAmountBidByCommodity is a DerivedField
			type is like InternationalCost
				precision is DerivedNumberOfDecimalsCost
			return (sum DiversityResponseLineCommodityRel.ExtendedPrice)
		
		DiversityAwardAmountByCommodity is a DerivedField
			type is Decimal size 21.2
			return (sum DiversityAwardResponseLineCommodityRel.TotalOfSupplierResponseAwards)

		AmountAwardRatePercentByCommodity is a DerivedField
			type is Percent size 6.1
			return (DiversityAwardAmountByCommodity / DiversityAmountBidByCommodity)
		
		ReportDisplayExtendedPrice is a DerivedField
			type is Decimal size 21.2 
			return ExtendedPrice
		
		ReportDisplayTotalOfSupplierResponseAwards is a DerivedField
			type is Decimal size 21.2 
			return TotalOfSupplierResponseAwards
		
		ReportDisplayDiversityAmountBid is a DerivedField
			type is Decimal size 21.2 
			return SourcingEventResponse.DiversityAmountBid
		
		ReportDisplayAwardDate is a DerivedField
			type is Date
			return AwardDate
		
		DiversityCode	is a DerivedField
			type is Alpha size 10
			restricted
			return DiversityCodeRel.SupplierDiversityResponse.PayablesDiversityCode	

				
		DerivedCertified is a DerivedField
			type is like PayablesDiversityCode
			if (not SupplyManagementReportContext.RequireCurrentDiversityCertification 
			and not SupplyManagementReportContext.EditDiversityCertificationDates)
				return DiversityCodeRel.SupplierDiversityResponse.PayablesDiversityCode
			else
			if ((not SupplyManagementReportContext.RequireCurrentDiversityCertification 
			and SupplyManagementReportContext.EditDiversityCertificationDates)
			and SourcingEvent.FinalizedDate >= DiversityCodeRel.EffectiveDate
			and SourcingEvent.FinalizedDate <= DiversityCodeRel.ExpirationDate)
				return DiversityCodeRel.SupplierDiversityResponse.PayablesDiversityCode
			else
			if ((SupplyManagementReportContext.RequireCurrentDiversityCertification 
			and not SupplyManagementReportContext.EditDiversityCertificationDates)
			and DiversityCodeRel.CertificationComplete)
				return DiversityCodeRel.SupplierDiversityResponse.PayablesDiversityCode
			else
			if ((SupplyManagementReportContext.RequireCurrentDiversityCertification 
			and SupplyManagementReportContext.EditDiversityCertificationDates)
			and SourcingEvent.FinalizedDate >= DiversityCodeRel.EffectiveDate
			and SourcingEvent.FinalizedDate <= DiversityCodeRel.ExpirationDate
			and DiversityCodeRel.CertificationComplete)
				return DiversityCodeRel.SupplierDiversityResponse.PayablesDiversityCode
		

		DerivedDiversity is a DerivedField					
    		type is like Description
    		if (DiversityCode not entered)
    			return "Non-Diverse"
    		else
    			return DiversityCode
    	
    	DerivedTotalSupplierResponseAwardsByDiversity is a DerivedField				
    		type is like InternationalAmount
    		return sum SourcingEventLineResponsesWithSameDiversityRel.TotalOfSupplierResponseAwards
    	
    	DerivedTotalSupplierResponseAwardsPercent is a DerivedField					
			type is like Percent
			return (DerivedTotalSupplierResponseAwardsByDiversity / DerivedTotalSupplierResponseAwardsGrandTotal)
		
		DerivedTotalSupplierResponseAwardsGrandTotal is a DerivedField						
			type is like InternationalAmount
			restricted
    		return sum AllSourcingEventLineResponsesRel.TotalOfSupplierResponseAwards

		
    Conditions
		IsAwarded
			when (SomeAwardQuantity
			or    SomeContractAwarded) 
		
		IsAwardedUpdate
			restricted 
			when (AwardQuantity entered
			or    AwardForContract
			or   (SourcingEventLine.AllowAlternateResponses
			and  ((PoData
			and   AltIsAwardedForPO)
			or   (CmData
			and   AltIsAwardedForContract))))		
		
		IsAwardedNotAlternate
			restricted
			when (AwardQuantity entered
			or    AwardForContract)
		
		SupplierCanUpdate
			restricted
			when (SourcingEventResponse.HasCurrentModificationRequests
			or    SourcingEvent.SupplierCanRespond)

		DifferentResponseCurrency
			restricted
			when (SourcingEvent.CurrencyCode != SourcingEventResponse.EnteredCurrencyCode)
		
		HeaderOutputCurrencyEntered
			restricted
			when (SourcingEventResponse.CurrencyCode entered)
		
		SomeAwardQuantity
			restricted
			when (AwardQuantity entered
			or 	  AlternateResponseArray.AlternateResponseOccurs.AlternateResponseDetails[1].AwardQuantity entered
			or    AlternateResponseArray.AlternateResponseOccurs.AlternateResponseDetails[2].AwardQuantity entered
			or    AlternateResponseArray.AlternateResponseOccurs.AlternateResponseDetails[3].AwardQuantity entered
			or    AlternateResponseArray.AlternateResponseOccurs.AlternateResponseDetails[4].AwardQuantity entered
			or    AlternateResponseArray.AlternateResponseOccurs.AlternateResponseDetails[5].AwardQuantity entered)
		
		SomeContractAwarded
			restricted
			when (AwardForContract 
			or    AlternateResponseArray.AlternateResponseOccurs.AlternateResponseDetails[1].AwardForContract 
			or    AlternateResponseArray.AlternateResponseOccurs.AlternateResponseDetails[2].AwardForContract 
			or    AlternateResponseArray.AlternateResponseOccurs.AlternateResponseDetails[3].AwardForContract 
			or    AlternateResponseArray.AlternateResponseOccurs.AlternateResponseDetails[4].AwardForContract 
			or    AlternateResponseArray.AlternateResponseOccurs.AlternateResponseDetails[5].AwardForContract)

		AltIsAwardedForPO
			restricted
			when (AlternateResponseArray.AlternateResponseOccurs.AlternateResponseDetails[1].AwardQuantity entered
			or    AlternateResponseArray.AlternateResponseOccurs.AlternateResponseDetails[2].AwardQuantity entered
			or    AlternateResponseArray.AlternateResponseOccurs.AlternateResponseDetails[3].AwardQuantity entered
			or    AlternateResponseArray.AlternateResponseOccurs.AlternateResponseDetails[4].AwardQuantity entered
			or    AlternateResponseArray.AlternateResponseOccurs.AlternateResponseDetails[5].AwardQuantity entered)
		
		Alt1IsAwardedForPO
			restricted
			when (AlternateResponseArray.AlternateResponseOccurs.AlternateResponseDetails[1].AwardQuantity entered)
		Alt2IsAwardedForPO	
			restricted
			when (AlternateResponseArray.AlternateResponseOccurs.AlternateResponseDetails[2].AwardQuantity entered)
		Alt3IsAwardedForPO	
			restricted
			when (AlternateResponseArray.AlternateResponseOccurs.AlternateResponseDetails[3].AwardQuantity entered)
		Alt4IsAwardedForPO	
			restricted
			when (AlternateResponseArray.AlternateResponseOccurs.AlternateResponseDetails[4].AwardQuantity entered)
		Alt5IsAwardedForPO	
			restricted
			when (AlternateResponseArray.AlternateResponseOccurs.AlternateResponseDetails[5].AwardQuantity entered)
		
		AltIsAwardedForContract
			restricted
			when (AlternateResponseArray.AlternateResponseOccurs.AlternateResponseDetails[1].AwardForContract 
			or    AlternateResponseArray.AlternateResponseOccurs.AlternateResponseDetails[2].AwardForContract 
			or    AlternateResponseArray.AlternateResponseOccurs.AlternateResponseDetails[3].AwardForContract 
			or    AlternateResponseArray.AlternateResponseOccurs.AlternateResponseDetails[4].AwardForContract 
			or    AlternateResponseArray.AlternateResponseOccurs.AlternateResponseDetails[5].AwardForContract)
		
		AltIsAwarded
			restricted
			when (AltIsAwardedForPO
			or    AltIsAwardedForContract)
		
		ItemExistsForVendorItemSpecial
			restricted
			when (SourcingEventLine.OutputType.PO
			and   SourcingEventLine.ItemType.Special
			and   PovendoritemRel exists)
		AwardReasonEntered
			restricted
			when (AwardReason entered)
		DiversityAward
			when (IsAwarded
			and   DiversityCodeRel exists)
		IsDiversityCertified
			restricted
			when (DiversityCodeRel exists)
		AlternatesExist
			when (AlternateResponseArray entered)
		Alt1Exists
			restricted
			when (AlternateResponseArray.AlternateResponseOccurs.AlternateResponseDetails[1].Quantity entered)
		Alt2Exists
			restricted
			when (AlternateResponseArray.AlternateResponseOccurs.AlternateResponseDetails[2].Quantity entered)
		Alt3Exists
			restricted
			when (AlternateResponseArray.AlternateResponseOccurs.AlternateResponseDetails[3].Quantity entered)
		Alt4Exists
			restricted
			when (AlternateResponseArray.AlternateResponseOccurs.AlternateResponseDetails[4].Quantity entered)
		Alt5Exists
			restricted
			when (AlternateResponseArray.AlternateResponseOccurs.AlternateResponseDetails[5].Quantity entered)
		AlternatesAllowed
			restricted
			when (SourcingEventLine.AllowAlternateResponses)
		NonAwardReasonEntered
			when (!SomeAwardQuantity
			and   !SomeContractAwarded
			and   AwardReason entered
			and   SourcingEventLine.Status.Open)
		HasExistingContract
			restricted
			when (ContractRel exists)
		HasExistingPO
			restricted
			when (PurchaseOrderRel exists)
		ItemUOMVen
			restricted
			when (MatchItemVenItemRel exists)
		ContractMatchUOM
			restricted
			when (NonMatchItemVenItemRel exists)
		ExistingPo
			restricted
			when (PurchaseOrder exists)
		ResponseExists
			when (CurrencyResponseUnitPrice entered
			or   ResponseAmount.NoCharge 
			or   ResponseAmount.NoBid)
		NonNoBidResponseExists
			when (CurrencyResponseUnitPrice entered
			or   ResponseAmount.NoCharge) 
		CommentsExist
			restricted
			when (ResponseComments entered)
		SELQuestionsExist
			when (!ResponseAmount.NoBid
			and	  SourcingEventLine.SourcingEventLineQuestion set exists)
		SELQuestionResponseExists
			restricted
			when (SourcingEventLineQuestionResponse set exists)
		SELAttachmentsExist
			restricted
			when (SourcingEventLine.SourcingEventLineAttachment set exists)

 		SELQuestionsOldExist
    		restricted
 			when  (SELQuestionsExist
 			and	   !SourcingEvent.AllowsConditionalQuestions)
 		
 		SELQuestionsNewExist
    		restricted
 			when (SELQuestionsExist
 			and	  SourcingEvent.AllowsConditionalQuestions)

 		SELSupplierQuestionsExist
    		restricted
 			when (!NoBid
 			and	  SELSupplierQuestionPortalRel exists)
 		
		SourcingEventRequireBidBond
			restricted
			when (SourcingEvent.RequireBidBond
			and   ResponseExists)

		NeedToValidateForSourcingEventLineQuestion
			restricted
			when (SourcingEvent.AllowsConditionalQuestions
			and   SourcingEventLineQuestionRel.Question = 0)

		AllowQuantityPriceBreak
			restricted
			when (SourcingEventLine.AllowAdvancedPricing
			and   !ResponseAmount.NoBid
			and   !ResponseAmount.NoCharge)
		CancelledLine
			restricted
			when (SourcingEventLine.Status.Cancelled)
		SupplierLineAttachmentsExist
			restricted
			when (SourcingEventLineAttachmentsRel exists)
		SupplierLineCommentsExist
			restricted
			when (SourcingEventLineCommentsRel exists)
		SupplierLineResponseLink
			restricted
			when (!CancelledLine
			and	  (SourcingEventResponse.Status.Draft
			or    (SourcingEventResponse.Status.Submitted
			and	   SourcingEventLineResponse exists)))
		AwardLineValid
			restricted
			when ((!ResponseAmount.NoBid
			or    (ResponseAmount.NoBid
			and   AlternatesExist))
			and	  SourcingEventLine.Status.Open
			and  (!SourcingEvent.BestAndFinalOffer
			or   (SourcingEvent.BestAndFinalOffer
			and   SourcingEvent.BestAndFinalStarted
			and   SourcingEventResponse.BestAndFinalSupplier)))
		AwardLineValidForNoOutput
			restricted
			when (AwardLineValid
			and   !PoData
			and   !CmData)
		AwardLineValidForNewPO
			restricted
			when (PoData
			and   AwardLineValid
			and  ((SomeAwardQuantity
			and   PurchaseOrder !entered)
			or    !SomeAwardQuantity))
		AwardLineValidForExistingPO
			restricted
			when (PoData
			and   AwardLineValid)

		AwardLineValidForNewContract
			restricted
			when (CmData
			and   AwardLineValid
			and  ((SomeContractAwarded
			and   Contract !entered)
			or    !SomeContractAwarded))
		AwardLineValidForExistingContract
			restricted
			when (CmData
			and   AwardLineValid)

		DeleteAwardValid
			restricted
			when (AwardReasonEntered
			and   !NonAwardReasonEntered
			and	  SourcingEventLine.Status.Open)	
		NonAwardValid
			restricted
			when (!IsAwarded
			and   !NonAwardReasonEntered
			and	  SourcingEventLine.Status.Open
			and  (!SourcingEventResponse.TechnicalProposalAccepted
			or   ( SourcingEventResponse.TechnicalProposalAccepted  
			and    SourcingEvent.StepTwoStarted))
			and  (!SourcingEventResponse.BestAndFinalSupplier
			or   ( SourcingEventResponse.BestAndFinalSupplier
			and    SourcingEvent.BestAndFinalStarted)))
		ShowGreenAlert
			restricted
    		when (NetUnitPrice = LowestBid)
		ShowYellowAlert
			restricted
			when (ResponseAmount.NoCharge)
		ShowLowestBidAmount
			restricted
			when (SourcingEventLine.DisplayLowestBidAmount
			and   LowestBidRel exists)
		ShowLowestMessageText		
			restricted	
			when (SourcingEventLine.LowestBidCond
			and   LowestBidRel exists)
		ShowNoChargeMessageText		
			restricted	
			when (SourcingEventLine.DisplayLowestBidAmount
			and   SourcingEventLine.NoChargeBid exists)
		ShowFullQuantityMessage
			restricted
			when (SourcingEventLine.RequireFullQuantity)
		EventFinalized
			when 	(SourcingEvent.FinalizedDate entered)	
		AllNonRequiredLineQuestionsRespondedTo
			restricted
			when (all NonRequiredLineQuestions.SourcingEventLineQuestion = any LineQuestions.SourcingEventLineQuestion)
 		AllLineQuestionsAnswered
			restricted
			when (all RequiredLineQuestions.SourcingEventLineQuestion = any LineQuestions.SourcingEventLineQuestion)

 		AllLineQuestionsAnsweredNotAllowsConditional
			restricted
			when (all RequiredQuestions.SourcingEventLineQuestion = any LineQuestions.SourcingEventLineQuestion
			and   !SourcingEvent.AllowsConditionalQuestions)

		QuestionWithRequiredAttachmentNotifiedSupplier
 			when (all SupplierLineQuestionWithRequiredAttachmentsNotifiedRel.SELSupplierQuestion = any SupplierQuestionWithRequiredAttachmentEnteredRel.SELSupplierQuestion)

		QuestionWithRequiredAttachmentPortalSupplier
 			when (all SupplierLineQuestionWithRequiredAttachmentsPortalRel.SELSupplierQuestion = any SupplierQuestionWithRequiredAttachmentEnteredRel.SELSupplierQuestion)
 		
 		AllHeaderConditionalNotifiedQuestionsAnswered
 			when (all RequiredNotifiedSupplierQuestionsRel.SELSupplierQuestion = any HeaderConditionalQuestions.SELSupplierQuestion)
 		
 		AllHeaderConditionalQuestionsAnswered
 			when (all RequiredPortalSupplierQuestionsRel.SELSupplierQuestion = any HeaderConditionalQuestions.SELSupplierQuestion)
 		
 		AllHeaderConditionalQuestionsAnsweredResponseExists
 			when (all RequiredPortalSupplierQuestionsRel.SELSupplierQuestion = any HeaderConditionalQuestions.SELSupplierQuestion
			and   ResponseExists)
 		
 		SourcingEventLineNotifiedSupplierQuestionsExists
			when (SELSupplierQuestionRel exists)
		
 		SourcingEventPortalSupplierQuestionsExists
			when (SELSupplierQuestionPortalRel exists)
		
 		RequiredSupplierQuestionsExists
			when (RequiredNotifiedSupplierQuestionsRel exists
			or    RequiredPortalSupplierQuestionsRel exists)
		
 		AdHocRequiredLineQuestionsAnsweredExists
			when (LineSupplierQuestionRequiredNoAnswerRel !exists)
		
 		RequiredQuestionsExists
			when (RequiredQuestions exists)
		
 		ResponseLineExistsWithSupplierQuestions
			when (SELSupplierQuestionPortalRel exists
			and   LineExists)		

		DisplayNoBidReason
			restricted
			when (NotifiedSupplier.SupplierGroup.RequireNoBidReason)
		BestLineScore	
			when (LineWeightingDefined
			and	  TotalLineScore >= SourcingEventLine.BestLineScoreCalc)
		LineWeightingDefined
			restricted
			when (SourcingEventLine.WeightingEnteredForLine)
		DisplayNegotiatedTerms
			restricted
			when (SourcingEventResponse.RequestToNegotiateTerms)
		DisplayNegotiatedTermsColumn
			restricted
			when (SourcingEventLine.EventWithNegotiatedTerms)			

		ToCm
			restricted
			when (ContractRel exists)
		NoBid
			when (ResponseAmount.NoBid)
		DisplayBid
			restricted
			when (not ResponseAmount.NoBid)
		ParticipantInUse
			restricted
			when (Participant entered
			or    ParticipantGroup entered)
		Committed
			restricted
			when (LifetimeMaximumAmount entered)
		BothMaxQtyFieldsEntered
			restricted
			when (LifetimeMaxQuantity entered
			and   AwardQtyToLifetimeMaxQty)
		NoDeliveryOrAward
			restricted
			when   (AwardDateRange !entered
			and    FromDeliveryDate !entered
			and    ToDeliveryDate !entered) 			
		DeliveryAndAwardInRange
			restricted
			when(((DeliveryDateOverride >= FromDeliveryDate
			and    FromDeliveryDate entered
			and    ToDeliveryDate !entered)
			or    (DeliveryDateOverride <= ToDeliveryDate
			and    ToDeliveryDate entered
			and    FromDeliveryDate !entered
			and    DeliveryDateOverride entered)
			or    (DeliveryDateOverride >= FromDeliveryDate
			and    DeliveryDateOverride <= ToDeliveryDate 
			and    FromDeliveryDate entered
			and    ToDeliveryDate entered)
			and   (AwardDateRange !entered))
			or    (AwardDate date within AwardDateRange
			and    AwardDateRange entered
			and    FromDeliveryDate !entered
			and    ToDeliveryDate   !entered)
			or   ((DeliveryDateOverride >= FromDeliveryDate
			and    FromDeliveryDate entered
			and    ToDeliveryDate !entered)
			or    (DeliveryDateOverride <= ToDeliveryDate
			and    ToDeliveryDate entered
			and    FromDeliveryDate !entered
			and    DeliveryDateOverride entered)
			or    (DeliveryDateOverride >= FromDeliveryDate
			and    DeliveryDateOverride <= ToDeliveryDate 
			and    FromDeliveryDate entered
			and    ToDeliveryDate entered)
			and   (AwardDate date within AwardDateRange
			and    AwardDateRange entered)))
		PoData
			restricted
			when (SourcingEventLine.OutputType.PO)
		CmData
			restricted
			when (SourcingEventLine.ContractOutput)
		GtinEnteredOnLine
			restricted
			when (SourcingEventLine.GlobalTradeItemNumber entered)
		LineAwarded
			when (SourcingEventLine.Status.Awarded
			and   IsAwarded)
		ContractEntered
			restricted
			when (Contract entered)
		LineQuestionResponseAttachmentExists
			restricted
			when (AllowAttachmentRel exists)
		EventLineAwarded
			restricted
			when (SourcingEventLine.TotalAwardQuantity > 0)
		ManufacturerInformationExists
			restricted
			when (ManufacturerInformation entered
			or	  (GlobalTradeItemNumber entered
			and    GlobalTradeItemNumber.HasManufacturerInfo)
			or	  ((PovendoritemRel exists
			and   (PovendoritemRel.ManufacturerNumber entered)
			or	   PovendoritemRel.Manufacturer.ManufacturerCode entered))
			or	  SourcingEventLine.ManufacturerInformation entered)
		ServiceItemWithContractOutput
			restricted
			when (SourcingEventLine.ContractOutput
			and	  SourcingEventLine.ItemType.Service)
		ServiceContract
			restricted
			when (SourcingEventLine.OutputType.Service)
		PoOutputOrNoOutput
			restricted
			when (SourcingEventLine.OutputType.PO
			or	  SourcingEventLine.OutputType.NoOutput)
		DisplayGlobalTradeItemNumber
			restricted
			when (!GtinEnteredOnLine
			and	  NotifiedSupplier.SupplierGroup.DisplayGTINAndGLNInSupplierPortal
			and	  !ServiceItemWithContractOutput)
		DisplayGTINAndVendorItem
			restricted
			when (DisplayGlobalTradeItemNumber
			and	  SourcingEventLine.DisplayVendorItem)
		BuyerDisplayGTIN
			restricted
			when (!GtinEnteredOnLine
			and	  !ServiceItemWithContractOutput)
		BuyerDisplayGTINAndVendorItem
			restricted
			when (BuyerDisplayGTIN
			and	  SourcingEventLine.DisplayVendorItem)
		AllowEntryOfManufacturerInfoOnAward
			restricted
			when (!PoOutputOrNoOutput
			and	  !ServiceItemWithContractOutput)
		ValidGlobalTradeItemNumber
			restricted
			when (LocalAlphaGTIN[12] entered
			or	  LocalAlphaGTIN[13] entered
			or	  LocalAlphaGTIN[14] entered)
		AlternateDisplayGlobalTradeItemNumber
			restricted
			when (NotifiedSupplier.SupplierGroup.DisplayGTINAndGLNInSupplierPortal
			and	  !ServiceItemWithContractOutput)
		AlternateDisplayGTINAndVendorItem
			restricted
			when (AlternateDisplayGlobalTradeItemNumber
			and	  SourcingEventLine.DisplayVendorItem)
		AlternateBuyerDisplayGTIN
			restricted
			when (!ServiceItemWithContractOutput)
		AlternateBuyerDisplayGTINAndVendorItem
			restricted
			when (AlternateBuyerDisplayGTIN
			and	  SourcingEventLine.DisplayVendorItem)
		AlternateAllowEntryOfManufacturerInfoOnAward
			restricted
			when (!PoOutputOrNoOutput
			and	  !ServiceItemWithContractOutput)
		POCodeExists
			restricted
			when (PoCodeRel exists
			or	  PurchaseOrder.POCode entered)
		POCodeRelExists
			restricted
			when (PoCodeRel exists)
		LineHasAddOnCharge
			restricted
			when (SourcingEventLine.AddOnChargesExist
			and   !ResponseAmount.NoBid)
		LineAOCExists
			restricted
			when (LineHasAddOnCharge
			and   SourcingEventLineResponseAOC set exists)
		LineHasAddOnChargeAmount
			restricted
			when (ResponseTotalAOC > 0)
		LineHasAllowanceAOC
			restricted
			when (SourcingEventLineAllowanceAOCRel exists)
		BuyerActorContextExists
			restricted
    		when (ActorContextBuyerRel exists)
    	CategoryActorContextExists
			restricted
    		when (ActorContextCategoryRel exists)
		SubCategoryActorContextExists
			restricted
			when (ActorContextSubCategoryRel exists)
		AmountService
			restricted
			when (SourcingEventLine.ServiceCode.Amount)
		HasSupplierAttachment
			restricted
			when (SourcingEventResponseAttachmentRel exists)
		LineDescEntered
			restricted
			when (SourcingEventLine.Description entered)
		LineMfgInfoEntered
			restricted
			when (SourcingEventLine.ManufacturerInformation.ManufacturerNumber entered)
		LineGTINEntered
			restricted
			when (SourcingEventLine.GlobalTradeItemNumber entered)
		LineDelDateEntered
			restricted
			when (SourcingEventLine.RequestedDeliveryDate entered)
		StandardLineResponse
			restricted
			when (UOM = SourcingEventLine.UOM)
		AwardedAlternateResponsesExist
			when (AwardedAlternateResponsesRel exist)
		DiversityExist
			restricted
			when (DiversityCodeRel exist)
		

		IsGroupByCommodity
			restricted
			when(IsEventResponseCommodityCodeHeaderRel not exists)
		IsGroupByCommodityCodeSupplier
			restricted
			when (IsEventResponseCommoditySupplierHeaderRel not exist)
			
		IsSupplyManagementReportCommodityCodeSupplierValid
			restricted
			when	((SupplyManagementReportContext.CommodityCode not entered
			or		SourcingEventLine.CommodityCode = SupplyManagementReportContext.CommodityCode)
			and		(SupplyManagementReportContext.SupplyManagementReportSupplierGroupField.Supplier not entered
			or		NotifiedSupplier.Supplier = SupplyManagementReportContext.SupplyManagementReportSupplierGroupField.Supplier))
			
		NoAdditionalLineResponseInfo  
			restricted
			when (!LineHasAddOnCharge
			and   !AllowQuantityPriceBreak
			and   !SELQuestionsExist)		

		ContactDetailExist
			restricted
			when (NotifiedSupplier.Supplier.SupplierName entered)			
			
		IsGroupedByDiversityCode 
			restricted
			when (SourcingEventLineResponsesByDiversityRel not exists)
	
		NoAlternateResponses
			restricted
			when (!AlternatesExist)
		
		AlternateVendorItemExists
			restricted
			when (VenAlternateItemRel exists)
		
		ResponseCommentsFormDisplay
			restricted
			when (ResponseComments entered or PackagingString entered)
		AddOnChargeAlreadyExists
			restricted
			when (PurchaseOrderHeaderAOCRel exists)
		NotSealed
			restricted
			when    ((SourcingEvent.Sealed
			and    ((SourcingEvent.SecOpenPending
			and      SourcingEventResponse.BestAndFinalOpen
			and      SourcingEventResponse.TwoStepBiddingOpen
			and      (SourcingEventLine.Status.Open
			or       (SourcingEventLine.Status.Cancelled
			and       SourcingEventLine.CancelDate > SourcingEvent.CloseDate)
			or        SourcingEventLine.Status.Awarded
			or          SourcingEventLine.Status.Closed))
			or      (SourcingEvent.Status.Cancelled
			and      (SourcingEventLine.Status.Cancelled
			and       SourcingEventLine.CancelDate > SourcingEvent.CloseDate))
			or        (SourcingEvent.Status.Closed
			and      (SourcingEventLine.Status.Open
			or       (SourcingEventLine.Status.Cancelled
			and       SourcingEventLine.CancelDate > SourcingEvent.CloseDate)
			or        SourcingEventLine.Status.Awarded
			or          SourcingEventLine.Status.Closed))))
			or    (!SourcingEvent.Sealed
			and    (SourcingEvent.Status.Open
			or         SourcingEvent.Status.Cancelled
			or        SourcingEvent.Status.Closed)))			
		
		SupplierWasNotified
			when (NotificationRel exists)
		
		LineExists
			restricted
			when (SourcingEventLineResponse exists)

	Relations
		NotifiedSupplierRel
			one-to-many relation to Supplier
			Field Mapping uses symbolic key
			Instance Selection
				where (related.SupplierGroup				= NotifiedSupplier.SupplierGroup
				and related.Supplier					= NotifiedSupplier.Supplier)
				
		NotificationRel
			one-to-one relation to SourcingEventNotification
			Field Mapping uses BySupplier
				related.NotifiedSupplier.SupplierGroup		= NotifiedSupplier.SupplierGroup
 				related.NotifiedSupplier.Supplier           = NotifiedSupplier.Supplier
				related.NotifiedSupplier.SupplierSourceId   = NotifiedSupplier.SupplierSourceId
 				related.Company                             = Company
 				related.SourcingEvent                       = SourcingEvent	
		
		CurrentSourcingEventLineRel
   			one-to-many relation to SourcingEventLineResponse
   			Field Mapping uses symbolic key
   			Instance Selection
   				where (related.Company	= Company
   				and related.SourcingEvent = SourcingEvent
   				and related.SourcingEventLine = SourcingEventLine
   				and related.NotifiedSupplier = NotifiedSupplier   				
   				and related.SourcingEventResponse = SourcingEventResponse)
   				
		ItemGroupRel
        	one-to-one relation to ItemGroup
        	Field Mapping uses symbolic key
        		related.ItemGroup  = Company.SourcingGroup.ProcurementGroupRel.ItemGroupRel.ItemGroup
		
		SourcingEventLineRel
			one-to-one relation to SourcingEventLine
			Field Mapping uses symbolic key
				related.Company    			= Company
				related.SourcingEvent		= SourcingEvent
				related.SourcingEventLine	= SourcingEventLine
		
		SourcingEventLineAttachmentsRel
			one-to-many relation to SourcingEventLineAttachment
			Field Mapping uses part of key
				related.Company    			= Company
				related.SourcingEvent		= SourcingEvent
				related.SourcingEventLine	= SourcingEventLine
			Instance Selection
				where (related.SupplierCanView)

		SourcingEventLineCommentsRel
			one-to-many relation to SourcingEventLineComment
			Field Mapping uses part of key
				related.Company    			= Company
				related.SourcingEvent		= SourcingEvent
				related.SourcingEventLine	= SourcingEventLine
			Instance Selection
				where (related.SupplierCanView)

		SourcingEventLineAOCRel
			one-to-many relation to SourcingEventLineAOC
			Field Mapping uses symbolic key
				related.Company    			= Company
				related.SourcingEvent		= SourcingEvent
				related.SourcingEventLine	= SourcingEventLine
			Instance Selection
				where (related.SourcingEventLine.AllowAddOnCharge)
				
		SourcingEventLineResponseAOCRel
			one-to-many relation to SourcingEventLineResponseAOC 
			Field Mapping uses ByEvent
				related.Company                             = Company
				related.SourcingEvent                       = SourcingEvent
				related.SourcingEventLine                   = SourcingEventLine
				related.NotifiedSupplier.SupplierGroup      = NotifiedSupplier.SupplierGroup 
				related.NotifiedSupplier.Supplier           = NotifiedSupplier.Supplier
				related.NotifiedSupplier.SupplierSourceId   = NotifiedSupplier.SupplierSourceId 

		SourcingEventLineResponseHeaderAOCRel
			one-to-many relation to SourcingEventLineResponseAOC 
			Field Mapping uses ByEvent
				related.Company                             = Company
				related.SourcingEvent                       = SourcingEvent
				related.SourcingEventLine                   = 0
				related.NotifiedSupplier.SupplierGroup      = NotifiedSupplier.SupplierGroup 
				related.NotifiedSupplier.Supplier           = NotifiedSupplier.Supplier
				related.NotifiedSupplier.SupplierSourceId   = NotifiedSupplier.SupplierSourceId 
		
		PurchaseOrderHeaderAOCRel
			one-to-many relation to PurchaseOrderAndLineAddOnCharge
			Field Mapping uses symbolic key
				related.Company                             = Company
				related.PurchaseOrder                       = PurchaseOrder  
				related.PurchaseOrderLine                   = 0
			Instance Selection
				where (related.AddOnCharge = LocalAddOnCharge)
			
		SourcingEventLineAllowanceAOCRel
			one-to-many relation to SourcingEventLineAOC
			Field Mapping uses symbolic key
				related.Company    			= Company
				related.SourcingEvent		= SourcingEvent
				related.SourcingEventLine	= SourcingEventLine
			Instance Selection
				where (related.AllowanceAOC)
			
		RequiredQuestions is a SourcingEventLineQuestion set
        	Instance Selection
            	where (related.ResponseRequired)

		NotEnteredRequiredAOCs is a SourcingEventLineResponseAOC set
        	Instance Selection
            	where (related.RequiredAOC
            	and    related.CostNotEntered)

		LineQuestionWithRequiredAttachmentsRel
            one-to-many relation to SourcingEventLineQuestion 
            Field Mapping uses symbolic key
            	related.Company				= Company
            	related.SourcingEvent		= SourcingEvent
            	related.SourcingEventLine	= SourcingEventLine
            Instance Selection
            	where (related.AlwaysRequireResponseAttachment)

		ConditionalQuestionsDirectRel 
			one-to-many relation to ConditionalQuestion 
			Field Mapping uses symbolic key 
				related.ProcurementGroup		= Company.SourcingGroup 
				related.Question				= SourcingEventLineQuestionRel.Question 

		SourcingEventLineQuestionResponseWithAttachmentRel is a SourcingEventLineQuestionResponse set
			Instance Selection
				where (related.SourcingEventLineResponse	= SourcingEventLineResponse
				and	   related.Attachment entered)

        PurchaseOrderRel
        	one-to-one relation to PurchaseOrder
        	Field Mapping uses symbolic key
        		related.Company					= Company 
        		related.PurchaseOrder			= PurchaseOrder
        		
		VendorItemDefault
        	one-to-many relation to VendorItem
        	Field Mapping uses Set4
        		related.ProcurementGroup	= Company.ProcurementGroup
        		related.Vendor				= NotifiedSupplier.Supplier.Vendor
        		related.Item				= ItemNumber
        	Instance Selection
            	where (related.UseAsDefault)

		VenItemManfDflt
        	one-to-many relation to VendorItem
        	Field Mapping uses Set5
        		related.ProcurementGroup					= Company.ProcurementGroup
        		related.Vendor								= NotifiedSupplier.Supplier.Vendor
				related.Manufacturer.ManufacturerCode    	= DerivedGlobalTradeItemNumberManufCode
				related.Manufacturer.ManufacturerDivision	= DerivedGlobalTradeItemNumberManufDivision
				related.ManufacturerNumber      			= DerivedGlobalTradeItemNumberManufNbr
        		related.Item								= ItemNumber

		VenItemLineManfDflt
        	one-to-many relation to VendorItem
        	Field Mapping uses Set5
        		related.ProcurementGroup					= Company.ProcurementGroup
        		related.Vendor								= NotifiedSupplier.Supplier.Vendor
				related.Manufacturer.ManufacturerCode    	= SourcingEventLine.ManufacturerInformation.Manufacturer.ManufacturerCode
				related.Manufacturer.ManufacturerDivision	= SourcingEventLine.ManufacturerInformation.Manufacturer.ManufacturerDivision
				related.ManufacturerNumber      			= SourcingEventLine.ManufacturerInformation.ManufacturerNumber
        		related.Item								= ItemNumber
			Instance Selection 
				where (related.VendorBuyUOM !entered
				or     related.VendorBuyUOM = SourcingEventLine.UOM.UnitOfMeasure)

        VendorItemByItemRel
        	one-to-one relation to VendorItem
        	Field Mapping uses symbolic key
        		related.ProcurementGroup	= Company.ProcurementGroup
        		related.Item				= ItemNumber
        		related.Vendor				= NotifiedSupplier.Supplier.Vendor
        		related.VendorItem			= VendorItem
        
		PovendoritemRel
			one-to-many relation to VendorItem
			Field Mapping uses Set3
				related.ProcurementGroup	= Company.ProcurementGroup
				related.Vendor				= NotifiedSupplier.Supplier.Vendor
				related.VendorItem			= VendorItem
		
		POVendorItemForSameMfgInfoRel
			one-to-many relation to VendorItem
			Field Mapping uses Set5
				related.ProcurementGroup			= Company.ProcurementGroup
				related.Vendor						= NotifiedSupplier.Supplier.Vendor
				related.Manufacturer				= ManufacturerInformation.Manufacturer
				related.ManufacturerNumber			= ManufacturerInformation.ManufacturerNumber
			Instance Selection
				where (related.VendorItem != VendorItem)

		ContractParticipant
			one-to-one relation to ContractParticipant
			Field Mapping uses symbolic key
        		related.ContractGroup														= Company.SourcingGroup
				related.Contract															= Contract
				related.ContractParticipant.ParticipantLocation.Company						= Participant.Company
				related.ContractParticipant.ParticipantLocation.Location					= Participant.Location
				related.ContractParticipant.ParticipantLocation.RequestingLocation			= Participant.RequestingLocation
           		related.ContractParticipant.ParticipantLocation.PricingGroup                = Participant.PricingGroup
           		related.ContractParticipant.ContractCompanyDepartment.ContractCompany		= 0
           		related.ContractParticipant.ContractCompanyDepartment.ContractDepartment	= blank
				
     	VenItemRel
			one-to-many relation to SourcingEventLineResponse
			Field Mapping uses ByNotifiedSupplier
				related.Company          					= Company
				related.SourcingEvent    					= SourcingEvent
 				related.NotifiedSupplier.SupplierGroup		= NotifiedSupplier.SupplierGroup
 				related.NotifiedSupplier.Supplier			= NotifiedSupplier.Supplier
				related.NotifiedSupplier.SupplierSourceId	= NotifiedSupplier.SupplierSourceId
			Instance Selection
				where   (related.VendorItem				= VendorItem
				and      related.ItemNumber            != ItemNumber
				and		 related.UniqueID 			   != UniqueID
				and      related.IsAwarded)

     	SpecialVenItemRel
			one-to-many relation to SourcingEventLineResponse
			Field Mapping uses ByNotifiedSupplier
				related.Company          					= Company
				related.SourcingEvent    					= SourcingEvent
 				related.NotifiedSupplier.SupplierGroup		= NotifiedSupplier.SupplierGroup
 				related.NotifiedSupplier.Supplier			= NotifiedSupplier.Supplier
				related.NotifiedSupplier.SupplierSourceId	= NotifiedSupplier.SupplierSourceId
			Instance Selection
				where   (related.VendorItem				= VendorItem
				and      related.ItemNumber            != ItemNumber
				and		 related.UniqueID 			   != UniqueID
				and      related.IsAwarded)

     	MfgVenItemRel
			one-to-many relation to SourcingEventLineResponse
			Field Mapping uses ByNotifiedSupplier
				related.Company          					= Company
				related.SourcingEvent    					= SourcingEvent
 				related.NotifiedSupplier.SupplierGroup		= NotifiedSupplier.SupplierGroup
 				related.NotifiedSupplier.Supplier			= NotifiedSupplier.Supplier
				related.NotifiedSupplier.SupplierSourceId	= NotifiedSupplier.SupplierSourceId
			Instance Selection
				where	(related.ManufacturerInformation.Manufacturer.ManufacturerCode		 = ManufacturerInformation.Manufacturer.ManufacturerCode
				and	     related.ManufacturerInformation.Manufacturer.ManufacturerDivision	 = ManufacturerInformation.Manufacturer.ManufacturerDivision
				and	     related.ManufacturerInformation.ManufacturerNumber			 = ManufacturerInformation.ManufacturerNumber
				and		 related.VendorItem											!= VendorItem
				and		 related.UniqueID 			  								!= UniqueID
				and      related.IsAwarded)

     	VenAlternateItemRel
			one-to-many relation to SourcingEventLineResponse
			Field Mapping uses ByNotifiedSupplier
				related.Company          					= Company
				related.SourcingEvent    					= SourcingEvent
 				related.NotifiedSupplier.SupplierGroup		= NotifiedSupplier.SupplierGroup
 				related.NotifiedSupplier.Supplier			= NotifiedSupplier.Supplier
				related.NotifiedSupplier.SupplierSourceId	= NotifiedSupplier.SupplierSourceId
			Instance Selection
				where	((related.AlternateResponseArray.AlternateResponseOccurs.AlternateResponseDetails[1].Item   != ItemNumber
				and      related.AlternateResponseArray.AlternateResponseOccurs.AlternateResponseDetails[1].VendorItem	= VendorItem
				and      related.AlternateResponseArray.AlternateResponseOccurs.AlternateResponseDetails[1].AwardForContract = true)
				or		(related.AlternateResponseArray.AlternateResponseOccurs.AlternateResponseDetails[2].Item	   != ItemNumber
				and      related.AlternateResponseArray.AlternateResponseOccurs.AlternateResponseDetails[2].VendorItem	= VendorItem
				and      related.AlternateResponseArray.AlternateResponseOccurs.AlternateResponseDetails[2].AwardForContract = true)
				or		(related.AlternateResponseArray.AlternateResponseOccurs.AlternateResponseDetails[3].Item	   != ItemNumber
				and      related.AlternateResponseArray.AlternateResponseOccurs.AlternateResponseDetails[3].VendorItem	= VendorItem
				and      related.AlternateResponseArray.AlternateResponseOccurs.AlternateResponseDetails[3].AwardForContract = true)
				or		(related.AlternateResponseArray.AlternateResponseOccurs.AlternateResponseDetails[4].Item	   != ItemNumber
				and      related.AlternateResponseArray.AlternateResponseOccurs.AlternateResponseDetails[4].VendorItem	= VendorItem
				and      related.AlternateResponseArray.AlternateResponseOccurs.AlternateResponseDetails[4].AwardForContract = true)
				or		(related.AlternateResponseArray.AlternateResponseOccurs.AlternateResponseDetails[5].Item	   != ItemNumber
				and      related.AlternateResponseArray.AlternateResponseOccurs.AlternateResponseDetails[5].VendorItem	= VendorItem
				and      related.AlternateResponseArray.AlternateResponseOccurs.AlternateResponseDetails[5].AwardForContract = true))

     	ItemUOMVenItemRel
			one-to-many relation to SourcingEventLineResponse
			Field Mapping uses ByNotifiedSupplier
				related.Company          					= Company
				related.SourcingEvent    					= SourcingEvent
 				related.NotifiedSupplier.SupplierGroup		= NotifiedSupplier.SupplierGroup
 				related.NotifiedSupplier.Supplier			= NotifiedSupplier.Supplier
				related.NotifiedSupplier.SupplierSourceId	= NotifiedSupplier.SupplierSourceId
			Instance Selection
				where	(related.UniqueID 			   != UniqueID
				and      related.Contract				= Contract
				and      related.ItemNumber				= ItemNumber
				and      related.UOM					= UOM
				and      related.VendorItem				= VendorItem
				and     (related.SourcingEventLine.Status.Open
				or       related.SourcingEventLine.Status.Awarded))

     	MatchItemVenItemRel
			one-to-many relation to SourcingEventLineResponse
			Field Mapping uses ByNotifiedSupplier
				related.Company          					= Company
				related.SourcingEvent    					= SourcingEvent
 				related.NotifiedSupplier.SupplierGroup		= NotifiedSupplier.SupplierGroup
 				related.NotifiedSupplier.Supplier			= NotifiedSupplier.Supplier
				related.NotifiedSupplier.SupplierSourceId	= NotifiedSupplier.SupplierSourceId
			Instance Selection
				where	(related.UniqueID 			   != UniqueID
				and      related.Contract				= Contract
				and      related.ItemNumber				= ItemNumber
				and      related.UOM				   != UOM
				and      related.VendorItem				= VendorItem
				and      related.AwardForContract       = true
				and     !related.SourcingEventLine.Status.Cancelled
				and     !related.SourcingEventLine.Status.Closed)
		
		AltMatchItemVenItemRel
			one-to-many relation to SourcingEventLineResponse
			Field Mapping uses ByNotifiedSupplier
				related.Company          					= Company
				related.SourcingEvent    					= SourcingEvent
 				related.NotifiedSupplier.SupplierGroup		= NotifiedSupplier.SupplierGroup
 				related.NotifiedSupplier.Supplier			= NotifiedSupplier.Supplier
				related.NotifiedSupplier.SupplierSourceId	= NotifiedSupplier.SupplierSourceId
			Instance Selection
				where   (related.Contract				= Contract
				and		(related.AlternateResponseArray.AlternateResponseOccurs.AlternateResponseDetails[1].Item		= ItemNumber
				and      related.AlternateResponseArray.AlternateResponseOccurs.AlternateResponseDetails[1].UOM		   != UOM
				and      related.AlternateResponseArray.AlternateResponseOccurs.AlternateResponseDetails[1].VendorItem	= VendorItem
				and      related.AlternateResponseArray.AlternateResponseOccurs.AlternateResponseDetails[1].AwardForContract = true)
				or		(related.AlternateResponseArray.AlternateResponseOccurs.AlternateResponseDetails[2].Item		= ItemNumber
				and      related.AlternateResponseArray.AlternateResponseOccurs.AlternateResponseDetails[2].UOM		   != UOM
				and      related.AlternateResponseArray.AlternateResponseOccurs.AlternateResponseDetails[2].VendorItem	= VendorItem
				and      related.AlternateResponseArray.AlternateResponseOccurs.AlternateResponseDetails[2].AwardForContract = true)
				or		(related.AlternateResponseArray.AlternateResponseOccurs.AlternateResponseDetails[3].Item		= ItemNumber
				and      related.AlternateResponseArray.AlternateResponseOccurs.AlternateResponseDetails[3].UOM		   != UOM
				and      related.AlternateResponseArray.AlternateResponseOccurs.AlternateResponseDetails[3].VendorItem	= VendorItem
				and      related.AlternateResponseArray.AlternateResponseOccurs.AlternateResponseDetails[3].AwardForContract = true)
				or		(related.AlternateResponseArray.AlternateResponseOccurs.AlternateResponseDetails[4].Item		= ItemNumber
				and      related.AlternateResponseArray.AlternateResponseOccurs.AlternateResponseDetails[4].UOM		   != UOM
				and      related.AlternateResponseArray.AlternateResponseOccurs.AlternateResponseDetails[4].VendorItem	= VendorItem
				and      related.AlternateResponseArray.AlternateResponseOccurs.AlternateResponseDetails[4].AwardForContract = true)
				or		(related.AlternateResponseArray.AlternateResponseOccurs.AlternateResponseDetails[5].Item		= ItemNumber
				and      related.AlternateResponseArray.AlternateResponseOccurs.AlternateResponseDetails[5].UOM		   != UOM
				and      related.AlternateResponseArray.AlternateResponseOccurs.AlternateResponseDetails[5].VendorItem	= VendorItem
				and      related.AlternateResponseArray.AlternateResponseOccurs.AlternateResponseDetails[5].AwardForContract = true)
				and     !related.SourcingEventLine.Status.Cancelled
				and     !related.SourcingEventLine.Status.Closed)
     	
     	SpecialMatchItemVenItemRel
			one-to-many relation to SourcingEventLineResponse
			Field Mapping uses ByNotifiedSupplier
				related.Company          					= Company
				related.SourcingEvent    					= SourcingEvent
 				related.NotifiedSupplier.SupplierGroup		= NotifiedSupplier.SupplierGroup
 				related.NotifiedSupplier.Supplier			= NotifiedSupplier.Supplier
				related.NotifiedSupplier.SupplierSourceId	= NotifiedSupplier.SupplierSourceId
			Instance Selection
				where	(related.UniqueID 			   != UniqueID
				and      related.Contract				= Contract
				and      related.ItemNumber				= ItemNumber
				and      related.UOM				   != UOM
				and      related.VendorItem				= VendorItem
				and      related.SourcingEventLine.ItemType.Special
				and     !related.SourcingEventLine.Status.Cancelled
				and     !related.SourcingEventLine.Status.Closed)

     	NonMatchItemVenItemRel
			one-to-many relation to ContractLine
			Field Mapping uses symbolic key
				related.ContractGroup      					= Company.SourcingGroup
				related.Contract	    					= Contract
			Instance Selection
 				where   (related.Contract.Supplier			= NotifiedSupplier.Supplier
				and      related.Contract.SupplierSourceId	= NotifiedSupplier.SupplierSourceId
				and      related.ItemNumber			    	= ItemNumber
				and      related.UOM				       != UOM
				and      related.VendorItem			    	= VendorItem)
				
     	ItemOnContractLineRel
			one-to-many relation to ContractLine
			Field Mapping uses ByVenItemMfgInfo
				related.ContractGroup      									= Company.SourcingGroup
				related.Contract	    									= Contract
				related.VendorItem											= VendorItem	
				related.Manufacturer.ManufacturerCode						= ManufacturerInformation.Manufacturer.ManufacturerCode
				related.Manufacturer.ManufacturerDivision					= ManufacturerInformation.Manufacturer.ManufacturerDivision
				related.ManufacturerNumber									= ManufacturerInformation.ManufacturerNumber
				related.UOM													= UOM

     	GTINOnContractLineRel
			one-to-many relation to ContractLine
			Field Mapping uses symbolic key
				related.ContractGroup      					= Company.SourcingGroup
				related.Contract	    					= Contract
			Instance Selection
 				where (GlobalTradeItemNumber entered
 				and	   related.GlobalTradeItemNumber entered
 				and	   related.GlobalTradeItemNumber		= GlobalTradeItemNumber)

		ContractRel
			one-to-one relation to Contract
			Field Mapping uses symbolic key
				related.ContractGroup   = Company.SourcingGroup
				related.Contract        = Contract
			
		InventoryCompanyRel
        	one-to-one relation to InventoryCompany
        	Field Mapping uses symbolic key
        		related.Company		= Company
		
		RequestingLocRel is a SourcingEventLineSource set
			Instance Selection
				where (related.Company				= Company
				and    related.SourcingEvent 		= SourcingEvent
				and    related.SourcingEventLine	= SourcingEventLine
				and    related.RequestingLocation entered)
				
		ReqLocWithPocode
        	one-to-many relation using RequestingLocRel
			Instance Selection
				where (related.RequestingLocationRel exists
				and    related.RequestingLocationRel.POCode entered)
				
		PoCodeRel 
			one-to-many relation to SourcingEventLineSource 
			Field Mapping uses symbolic key
				related.Company          	= Company
				related.SourcingEvent    	= SourcingEvent
				related.SourcingEventLine	= SourcingEventLine
			Instance Selection
				where (related.POCode entered)
		
		LineSourceRel 
			one-to-many relation to SourcingEventLineSource 
			Field Mapping uses symbolic key
				related.Company          	= Company
				related.SourcingEvent    	= SourcingEvent
				related.SourcingEventLine	= SourcingEventLine
		
	    ContractSourcingEventLineSourceRel 
			one-to-many relation to SourcingEventLineSource
			Field Mapping uses symbolic key
				related.Company          	= Company
				related.SourcingEvent    	= SourcingEvent
				related.SourcingEventLine	= SourcingEventLine
			Instance Selection
				where (related.ContractManagement)
	    
	    PoCompanyRel
    		one-to-one relation to PurchasingCompany
            Field Mapping uses Set2
          		related.ProcurementGroup	= Company.SourcingGroup
          		related.Company				= LocalCompany
        
        PurchasingCompanyRel
    		one-to-one relation to PurchasingCompany
            Field Mapping uses Set2
          		related.ProcurementGroup	= Company.SourcingGroup
          		related.Company				= Company
        
        ContractPricingRel
    		one-to-one relation to ContractPricing
    		Field Mapping uses symbolic key
    			related.ContractGroup		= Company.SourcingGroup
				related.Contract			= Contract
				related.ContractPricing		= EffectiveDate
				
		AllowAttachmentRel	is a SourcingEventLineQuestionResponse set
	       	Instance Selection
        		where (related.Attachment entered) 			
        		
        RequiredLineQuestions is a SourcingEventLineQuestion set
        	Instance Selection
            	where (related.ResponseRequired
            	and    !related.SourcingEventLine.Status.Cancelled
            	and     related.SourcingEventLine.RequireResponse
            	and    !ResponseAmount.NoBid)

        NonRequiredLineQuestions is a SourcingEventLineQuestion set
        	Instance Selection
            	where (!related.ResponseRequired
            	and    !related.SourcingEventLine.Status.Cancelled
            	and    !ResponseAmount.NoBid)

        LineQuestions is a SourcingEventLineQuestionResponse set
     		Instance Selection
				where (related.NotifiedSupplier.SupplierGroup		= NotifiedSupplier.SupplierGroup
    			and    related.NotifiedSupplier.Supplier			= NotifiedSupplier.Supplier
    			and    related.NotifiedSupplier.SupplierSourceId	= NotifiedSupplier.SupplierSourceId)
		      				
		LineQuestionsThatAreRequiredRel
            one-to-many relation to SourcingEventLineQuestion 
            Field Mapping uses symbolic key
            	related.Company				= Company
            	related.SourcingEvent		= SourcingEvent
            	related.SourcingEventLine	= SourcingEventLine
            Instance Selection
            	where (related.ResponseRequired)

        LineQuestionsRequiredResponse 
        	one-to-many relation to SourcingEventLineQuestionResponse
     		Field Mapping uses ByQuestion
     			related.Company            					= Company
     			related.SourcingEvent      					= SourcingEvent
				related.SourcingEventLine					= SourcingEventLine
				related.SourcingEventLineQuestion			= LocalSourcingEventLineQuestion
			Instance Selection
				where (related.NotifiedSupplier.SupplierGroup  		= NotifiedSupplier.SupplierGroup
				and    related.NotifiedSupplier.Supplier           	= NotifiedSupplier.Supplier
				and    related.NotifiedSupplier.SupplierSourceId   	= NotifiedSupplier.SupplierSourceId)
        
        LineSupplierQuestionsThatAreRequiredRel 
        	one-to-many relation to SourcingEventLineQuestion
     		Field Mapping uses symbolic key
     			related.Company            							= Company
     			related.SourcingEvent		      					= SourcingEvent
			Instance Selection
				where (related.ResponseRequired)
        
        LineSupplierQuestionsRequiredResponse 
        	one-to-many relation to SELSupplierQuestionResponse
     		Field Mapping uses ByQuestion
     			related.Company            							= Company
     			related.SourcingEvent		      					= SourcingEvent
				related.SourcingEventLine							= LocalSourcingEventLine
				related.SELSupplierQuestion							= LocalSourcingEventLineQuestion
			Instance Selection
				where (related.NotifiedSupplier.SupplierGroup  		= NotifiedSupplier.SupplierGroup
				and    related.NotifiedSupplier.Supplier           	= NotifiedSupplier.Supplier
				and    related.NotifiedSupplier.SupplierSourceId   	= NotifiedSupplier.SupplierSourceId)

     	DiversityAwardRel
			one-to-many relation to SupplierDiversityResponse
			Field Mapping uses symbolic key
				related.SupplierGroup		= NotifiedSupplier.SupplierGroup
 				related.Supplier			= NotifiedSupplier.Supplier
			Instance Selection
				where	(related.EffectiveDate		= blank
				or		(related.EffectiveDate  	<= SourcingEvent.FinalizedDate
				and		 related.ExpirationDate	>= SourcingEvent.FinalizedDate))	

		DiversityRel
			one-to-many relation to SupplierDiversityResponse
			Field Mapping uses symbolic key
				related.SupplierGroup				= NotifiedSupplier.SupplierGroup
				related.Supplier					= NotifiedSupplier.Supplier
		
		DiversityCodeRel
			one-to-many relation to SupplierDiversityResponse
			Field Mapping uses symbolic key
				related.SupplierGroup				= NotifiedSupplier.SupplierGroup
				related.Supplier					= NotifiedSupplier.Supplier
							
		DropShipAddressRel 
			one-to-many relation to SourcingEventLineSource
			Field Mapping uses symbolic key
				related.Company				= Company
				related.SourcingEvent		= SourcingEvent
				related.SourcingEventLine	= SourcingEventLine
 			Instance Selection
 				where (related.OriginCode	= "RQ"
				and	   related.RequisitionHeaderRel.DropshipAddress entered)
		
		LowestBidRel
			one-to-many relation to SourcingEventLineResponse
        	Field Mapping uses symbolic key
	        	related.Company				= Company
	        	related.SourcingEvent		= SourcingEvent
				related.SourcingEventLine   = SourcingEventLine
			Instance Selection
				where (related.ResponseAmount.UnitPrice entered
				and	   related.Status.Submitted
				and    related.SourcingEventResponse.ConsiderForScoring)
		
		DeliveryDateCalcRel
			one-to-many relation to SourcingEventLineResponse
        	Field Mapping uses symbolic key
	        	related.Company				= Company
	        	related.SourcingEvent		= SourcingEvent
				related.SourcingEventLine   = SourcingEventLine
			Instance Selection
				where (related.SourcingEventLine.OutputType.PO
				and	   related.Status.Submitted
				and    related.SourcingEventResponse.ConsiderForScoring)
		
		WeightedQuestionResponseRel is a SourcingEventLineQuestionResponse set
			Instance Selection
				where (related.SourcingEventLineQuestion.QuestionWeighting entered)

		WeightedSupplierQuestionResponseRel
			one-to-many relation to SELSupplierQuestionResponse
			Field Mapping uses BySupplier
     			related.Company            					= Company
     			related.SourcingEvent      					= SourcingEvent
				related.SourcingEventLine					= SourcingEventLine
				related.NotifiedSupplier.SupplierGroup  	= NotifiedSupplier.SupplierGroup
				related.NotifiedSupplier.Supplier           = NotifiedSupplier.Supplier
				related.NotifiedSupplier.SupplierSourceId   = NotifiedSupplier.SupplierSourceId
		
		AwardedAlternateResponsesRel      
			one-to-many relation to SourcingEventLineResponse
        	Field Mapping uses symbolic key
	        	related.Company				= Company
	        	related.SourcingEvent		= SourcingEvent
				related.SourcingEventLine   = SourcingEventLine
			Instance Selection
				where (related.IsAwarded
				and    related.AlternatesExist)

		UpdateNegotiatedFlagRel
			one-to-many relation to SourcingEventLineResponse
        	Field Mapping uses ByNotifiedSupplier
	        	related.Company							  = Company
	        	related.SourcingEvent				      = SourcingEvent
				related.NotifiedSupplier.SupplierGroup    = NotifiedSupplier.SupplierGroup
				related.NotifiedSupplier.Supplier         = NotifiedSupplier.Supplier
		 		related.NotifiedSupplier.SupplierSourceId = NotifiedSupplier.SupplierSourceId
			Instance Selection
				where  (related.Status.Submitted
				and     !related.SourcingEventLine.Status.Cancelled
				and     !related.SourcingEventLine.Status.Closed
				and     related.SourcingEventResponse.RequestToNegotiateTerms)

		AwardReasonsToResponsesRel
			one-to-many relation to SourcingEventLineResponse
			Field Mapping uses ByAwardReason
				related.AwardReason						= AwardReason

		GTINsByManufRel
			one-to-many relation to ItemGTIN
			Field Mapping uses Set7
				related.ItemGroup  			= Company.SourcingGroup
				related.Manufacturer     	= ManufacturerInformation.Manufacturer
        		related.ManufacturerNumber  = ManufacturerInformation.ManufacturerNumber
				related.Item  				= ItemNumber
				related.UnitOfMeasure		= UOM

		ItemGTINItemMismatchRel
			one-to-many relation to ItemGTIN
			Field Mapping uses Set2
				related.ItemGroup  			= Company.SourcingGroup
				related.ItemGTIN 		 	= DerivedGlobalTradeItemNumber
			Instance Selection
				where (related.Item		!= ItemNumber)

     	SELRDuplicateNewGTINRel
			one-to-many relation to SourcingEventLineResponse
     		Field Mapping uses symbolic key
     			related.Company          										= Company
				related.SourcingEvent    										= SourcingEvent
			Instance Selection
     			where (GlobalTradeItemNumber entered
     			and	   !GlobalTradeItemNumber exists
     			and	   ItemNumber entered
     			and	   related.IsAwarded
     			and	   related.ItemNumber										= ItemNumber
     			and	   related.ManufacturerInformation.Manufacturer.ManufacturerCode		= ManufacturerInformation.Manufacturer.ManufacturerCode
				and	   related.ManufacturerInformation.Manufacturer.ManufacturerDivision	= ManufacturerInformation.Manufacturer.ManufacturerDivision
				and	   related.ManufacturerInformation.ManufacturerNumber		= ManufacturerInformation.ManufacturerNumber
				and	   related.UOM		 										= UOM
				and	   related.GlobalTradeItemNumber entered
				and	   !related.GlobalTradeItemNumber exists
				and	   related.GlobalTradeItemNumber							!= GlobalTradeItemNumber
				and	   related.UniqueID 	   									!= UniqueID)

		SourcingEventResponseAttachmentRel is a SourcingEventResponseAttachment set
			Instance Selection
				where (related.SourcingEventResponse      = SourcingEventResponse)
		
		PurchasingVendorRel
			one-to-one relation to PurchasingVendor
			Field Mapping uses symbolic key
				related.VendorGroup             = Company.SourcingGroup
				related.Vendor                  = VendorContext
		
		ActorContextBuyerRel
			one-to-many relation to ActorContext
			Field Mapping uses symbolic key
				related.Actor                    = actor
			Instance Selection
				where (related.ContextProperty.KeyField   = "Buyer")	
				
		ActorContextCategoryRel
			one-to-many relation to ActorContext
			Field Mapping uses symbolic key
				related.Actor                    = actor
			Instance Selection
				where (related.ContextProperty.KeyField   = "Category")	
		
		ActorContextSubCategoryRel
			one-to-many relation to ActorContext
			Field Mapping uses symbolic key
				related.Actor                    = actor
			Instance Selection
				where (related.ContextProperty.KeyField   = "SubCategory")	



		EventResponsesGroupByCommoditySupplierDetailsRel
			one-to-many relation to SourcingEventLineResponse
			Field Mapping uses ByNotifiedSupplier
			Instance Selection
				where	(related.NotifiedSupplier.SupplierGroup	= NotifiedSupplier.SupplierGroup
				and 	related.IsSupplyManagementReportCommodityCodeSupplierValid
				and 	(SupplyManagementReportContext.IncludeNoBids
				or		not related.ResponseAmount.NoBid)
				and		(SupplyManagementReportContext.IncludeUnsubmittedBids
				or		not related.SourcingEventResponse.NotSubmitted)
				and 	(SupplyManagementReportContext.FromDate not entered
				or		related.SourcingEvent.FinalizedDate	>= SupplyManagementReportContext.FromDate)
				and		(SupplyManagementReportContext.ThruDate not entered
				or		related.SourcingEvent.FinalizedDate <= SupplyManagementReportContext.ThruDate))

		IsEventResponseByCommoditySupplierDisplayHeaderRel
			one-to-many relation to SourcingEventLineResponse
			Field Mapping uses ByNotifiedSupplier
			Instance Selection
				where (related.SourcingEventLine.CommodityCode  = SourcingEventLine.CommodityCode
				and IsSupplyManagementReportCommodityCodeSupplierValid
				and related.IsGroupByCommodityCodeSupplier)
		
		
		IsEventResponseCommodityCodeHeaderRel	
			one-to-many relation to SourcingEventLineResponse
			Field Mapping uses ByNotifiedSupplier
			Instance Selection
				where (related.SourcingEventLine.CommodityCode = SourcingEventLine.CommodityCode
				and related.UniqueID  < UniqueID)
		
		IsEventResponseCommoditySupplierHeaderRel 
			one-to-many relation to SourcingEventLineResponse
			Field Mapping uses ByNotifiedSupplier
			Instance Selection
				where (related.NotifiedSupplier.SupplierGroup	= NotifiedSupplier.SupplierGroup
				and related.SourcingEventLine.CommodityCode		= SourcingEventLine.CommodityCode
				and related.NotifiedSupplier.Supplier			= NotifiedSupplier.Supplier
				and related.UniqueID  < UniqueID)
				
		SupplierResponseLineCommodityRel
			one-to-many relation to SourcingEventLineResponse
			Field Mapping uses ByNotifiedSupplier
				related.Company								= Company
			Instance Selection
				where (related.SourcingEvent				= SourcingEvent
				and related.SourcingEventLine						= SourcingEventLine
				and related.NotifiedSupplier.SupplierGroup	= NotifiedSupplier.SupplierGroup
    			and related.NotifiedSupplier.Supplier		= NotifiedSupplier.Supplier
				and related.SourcingEventLine.CommodityCode = SourcingEventLine.CommodityCode)
		
		EventAwardedResponseLineCommodityRel
			one-to-many relation to SourcingEventLineResponse
			Field Mapping uses ByNotifiedSupplier
				related.Company								= Company
			Instance Selection
				where (related.SourcingEvent				= SourcingEvent
				and related.SourcingEventLine				= SourcingEventLine
				and related.NotifiedSupplier.SupplierGroup	= NotifiedSupplier.SupplierGroup
    			and related.NotifiedSupplier.Supplier		= NotifiedSupplier.Supplier
				and related.SourcingEventLine.CommodityCode = SourcingEventLine.CommodityCode
				and related.IsAwarded)

		DiversityResponseLineCommodityRel
			one-to-many relation to SourcingEventLineResponse
			Field Mapping uses ByNotifiedSupplier
				related.Company								= Company
			Instance Selection
				where (related.SourcingEvent				= SourcingEvent
				and related.SourcingEventLine				= SourcingEventLine
				and related.NotifiedSupplier.SupplierGroup	= NotifiedSupplier.SupplierGroup
    			and related.NotifiedSupplier.Supplier		= NotifiedSupplier.Supplier
				and related.SourcingEventLine.CommodityCode = SourcingEventLine.CommodityCode
				and related.ResponseAmount.NoBid
				and related.DiversityExist)
		
		DiversityAwardResponseLineCommodityRel
			one-to-many relation to SourcingEventLineResponse
			Field Mapping uses ByNotifiedSupplier
				related.Company								= Company
			Instance Selection
				where (related.SourcingEvent				= SourcingEvent
				and related.SourcingEventLine				= SourcingEventLine
				and related.NotifiedSupplier.SupplierGroup	= NotifiedSupplier.SupplierGroup
    			and related.NotifiedSupplier.Supplier		= NotifiedSupplier.Supplier
				and related.SourcingEventLine.CommodityCode = SourcingEventLine.CommodityCode
				and related.DiversityAward)
		
		TotalAwardResponseLineCommodityRel
			one-to-many relation to SourcingEventLineResponse
			Field Mapping uses ByNotifiedSupplier
				related.Company								= Company
			Instance Selection
				where (related.SourcingEvent				= SourcingEvent
				and related.SourcingEventLine				= SourcingEventLine
				and related.NotifiedSupplier.SupplierGroup	= NotifiedSupplier.SupplierGroup
    			and related.NotifiedSupplier.Supplier		= NotifiedSupplier.Supplier
				and related.SourcingEventLine.CommodityCode = SourcingEventLine.CommodityCode
				and related.IsAwarded)

		NoBidEventResponseLineRel
			one-to-many relation to SourcingEventLineResponse
			Field Mapping uses ByNotifiedSupplier
			Instance Selection
				where (related.NotifiedSupplier.SupplierGroup	= NotifiedSupplier.SupplierGroup
    			and related.NotifiedSupplier.Supplier			= NotifiedSupplier.Supplier
				and related.SourcingEventLine.CommodityCode 	= SourcingEventLine.CommodityCode
				and related.SourcingEventResponse.NoBid)

		AwardedEventResponseLineRel
			one-to-many relation to SourcingEventLineResponse
			Field Mapping uses ByNotifiedSupplier
			Instance Selection
				where (related.NotifiedSupplier.SupplierGroup	= NotifiedSupplier.SupplierGroup
    			and related.NotifiedSupplier.Supplier			= NotifiedSupplier.Supplier
				and related.SourcingEventLine.CommodityCode 	= SourcingEventLine.CommodityCode
				and related.IsAwarded)

		NoBidEventResponseLineWithDiversityRel
			one-to-many relation to SourcingEventLineResponse
			Field Mapping uses ByNotifiedSupplier
			Instance Selection
				where (related.NotifiedSupplier.SupplierGroup	= NotifiedSupplier.SupplierGroup
    			and related.NotifiedSupplier.Supplier			= NotifiedSupplier.Supplier
				and related.SourcingEventLine.CommodityCode 	= SourcingEventLine.CommodityCode
				and related.ResponseAmount.NoBid
				and related.DiversityExist)
				
		DiversityAwardedEventResponseLineRel
			one-to-many relation to SourcingEventLineResponse
			Field Mapping uses ByNotifiedSupplier
			Instance Selection
				where (related.NotifiedSupplier.SupplierGroup	= NotifiedSupplier.SupplierGroup
    			and related.NotifiedSupplier.Supplier			= NotifiedSupplier.Supplier
				and related.SourcingEventLine.CommodityCode 	= SourcingEventLine.CommodityCode				
				and related.DiversityAward)

		AwardedResponseLineWithDiversityRel
			one-to-many relation to SourcingEventLineResponse
			Field Mapping uses ByNotifiedSupplier
			Instance Selection
				where (related.NotifiedSupplier.SupplierGroup	= NotifiedSupplier.SupplierGroup
    			and related.NotifiedSupplier.Supplier			= NotifiedSupplier.Supplier
				and related.SourcingEventLine.CommodityCode 	= SourcingEventLine.CommodityCode
				and related.ResponseAmount.NoBid
				and related.DiversityExist
				and related.IsAwarded)

		SupplierLineQuestionWithRequiredAttachmentsNotifiedRel
            one-to-many relation to SELSupplierQuestion 
            Field Mapping uses symbolic key
            	related.Company								= Company
            	related.SourcingEvent						= SourcingEvent
				related.SourcingEventLine					= SourcingEventLine
 				related.NotifiedSupplier					= NotifiedSupplier
            Instance Selection
            	where (related.AlwaysRequireResponseAttachment)

		SupplierLineQuestionWithRequiredAttachmentsPortalRel
            one-to-many relation to SELSupplierQuestion 
            Field Mapping uses symbolic key
            	related.Company								= Company
            	related.SourcingEvent						= SourcingEvent
				related.SourcingEventLine					= SourcingEventLine
 				related.NotifiedSupplier.SupplierGroup		= actor.agent(SupplierSourceId).SupplierGroup
	 			related.NotifiedSupplier.Supplier			= actor.agent(SupplierSourceId).Supplier
	 			related.NotifiedSupplier.SupplierSourceId	= actor.agent(SupplierSourceId).SupplierSourceId
            Instance Selection
            	where (related.AlwaysRequireResponseAttachment)

		RequiredNotifiedSupplierQuestionsRel
            one-to-many relation to SELSupplierQuestion 
            Field Mapping uses symbolic key
            	related.Company								= Company
            	related.SourcingEvent						= SourcingEvent
				related.SourcingEventLine					= SourcingEventLine
 				related.NotifiedSupplier					= NotifiedSupplier
            Instance Selection
            	where (related.ResponseRequired)

		LineSupplierQuestionRequiredNoAnswerRel
            one-to-many relation to SELSupplierQuestion 
            Field Mapping uses symbolic key
            	related.Company								= Company
            	related.SourcingEvent						= SourcingEvent
				related.SourcingEventLine					= SourcingEventLine
 				related.NotifiedSupplier					= NotifiedSupplier
            Instance Selection
            	where (related.RequiredQuestionNoAnswer)

		RequiredPortalSupplierQuestionsRel
            one-to-many relation to SELSupplierQuestion 
            Field Mapping uses symbolic key
            	related.Company								= Company
            	related.SourcingEvent						= SourcingEvent
				related.SourcingEventLine					= SourcingEventLine
 				related.NotifiedSupplier.SupplierGroup		= actor.agent(SupplierSourceId).SupplierGroup
	 			related.NotifiedSupplier.Supplier			= actor.agent(SupplierSourceId).Supplier
	 			related.NotifiedSupplier.SupplierSourceId	= actor.agent(SupplierSourceId).SupplierSourceId
            Instance Selection
            	where (related.ResponseRequired)

		SourcingEventLineQuestionRel
            one-to-many relation to SourcingEventLineQuestion 
            Field Mapping uses symbolic key
            	related.Company				= Company
            	related.SourcingEvent		= SourcingEvent
				related.SourcingEventLine	= SourcingEventLine

		SourcingEventLineQuestionRequiredRel
            one-to-many relation to SourcingEventLineQuestion 
            Field Mapping uses symbolic key
            	related.Company				= Company
            	related.SourcingEvent		= SourcingEvent
				related.SourcingEventLine	= SourcingEventLine
			Instance Selection
            	where (!related.ResponseRequired)

		SELSupplierQuestionRel 
			one-to-many relation to SELSupplierQuestion 
			Field Mapping uses symbolic key  
				related.Company							= Company
				related.SourcingEvent					= SourcingEvent
				related.SourcingEventLine				= SourcingEventLine
				related.NotifiedSupplier				= NotifiedSupplier

		SELSupplierQuestionPortalRel
            one-to-many relation to SELSupplierQuestion 
            Field Mapping uses symbolic key
            	related.Company								= Company
            	related.SourcingEvent						= SourcingEvent
				related.SourcingEventLine					= SourcingEventLine
 				related.NotifiedSupplier.SupplierGroup		= actor.agent(SupplierSourceId).SupplierGroup
	 			related.NotifiedSupplier.Supplier			= actor.agent(SupplierSourceId).Supplier
	 			related.NotifiedSupplier.SupplierSourceId	= actor.agent(SupplierSourceId).SupplierSourceId

        HeaderConditionalQuestions 
     		one-to-many relation to SELSupplierQuestionResponse
     		Field Mapping uses BySupplier
     			related.Company            					= Company
     			related.SourcingEvent      					= SourcingEvent
				related.SourcingEventLine					= SourcingEventLine
				related.NotifiedSupplier.SupplierGroup  	= NotifiedSupplier.SupplierGroup
				related.NotifiedSupplier.Supplier           = NotifiedSupplier.Supplier
				related.NotifiedSupplier.SupplierSourceId   = NotifiedSupplier.SupplierSourceId

        SupplierQuestionWithRequiredAttachmentEnteredRel 
     		one-to-many relation to SELSupplierQuestionResponse
     		Field Mapping uses BySupplier
     			related.Company            					= Company
     			related.SourcingEvent      					= SourcingEvent
				related.SourcingEventLine					= SourcingEventLine
				related.NotifiedSupplier.SupplierGroup		= NotifiedSupplier.SupplierGroup
				related.NotifiedSupplier.Supplier			= NotifiedSupplier.Supplier
				related.NotifiedSupplier.SupplierSourceId	= NotifiedSupplier.SupplierSourceId
			Instance Selection
				where (related.Attachment entered)

		SELSupplierQuestionResponseRel
			one-to-many relation to SELSupplierQuestionResponse
			Field Mapping uses ByQuestion
				related.Company										= Company
				related.SourcingEvent								= SourcingEvent
				related.SourcingEventLine							= SourcingEventLine
				related.SELSupplierQuestion							= LocalSourcingEventLineQuestion
 			Instance Selection
 				where (related.NotifiedSupplier.SupplierGroup		= NotifiedSupplier.SupplierGroup
    			and    related.NotifiedSupplier.Supplier			= NotifiedSupplier.Supplier
    			and    related.NotifiedSupplier.SupplierSourceId	= NotifiedSupplier.SupplierSourceId)


		SupplierDetailResponsesRel
			one-to-many relation to SourcingEventLineResponse
			Field Mapping uses ByNotifiedSupplier
			Instance Selection
				where (related.Company				= Company
				and related.SourcingEvent			= SourcingEvent)
				
		SourcingEventLineResponsesByDiversityRel 
			one-to-many relation to SourcingEventLineResponse
			Field Mapping uses BySupplier
				related.NotifiedSupplier.SupplierGroup	= NotifiedSupplier.SupplierGroup
			Instance Selection
				where (related.DiversityCode = DiversityCode
				and related.UniqueID < UniqueID)
				
		SourcingEventLineResponsesWithSameDiversityRel 
			one-to-many relation to SourcingEventLineResponse
			Field Mapping uses BySupplier
				related.NotifiedSupplier.SupplierGroup	= NotifiedSupplier.SupplierGroup
			Instance Selection
				where (related.DiversityCode = DiversityCode)
				
		AllSourcingEventLineResponsesRel 
			one-to-many relation to SourcingEventLineResponse
			Field Mapping uses BySupplier
				related.NotifiedSupplier.SupplierGroup	= NotifiedSupplier.SupplierGroup
	Sets
 		
		ByNotifiedSupplier
			sql name is BYSUPPLIER
			duplicates		
			indexed
			Sort Order
				Company
				SourcingEvent
 				NotifiedSupplier.SupplierGroup
 				NotifiedSupplier.Supplier
				NotifiedSupplier.SupplierSourceId

		ByAwardReason
			Sort Order
				AwardReason
				Company
				SourcingEvent
				SourcingEventLine
				NotifiedSupplier.SupplierGroup
				NotifiedSupplier.Supplier
				NotifiedSupplier.SupplierSourceId
				AwardQuantity
	       	Instance Selection
        		where (IsAwarded) 	
        		
        BySupplier
        	duplicates
        	indexed
        	Sort Order
 				NotifiedSupplier.SupplierGroup
 				NotifiedSupplier.Supplier
				NotifiedSupplier.SupplierSourceId
 				Company
 				SourcingEvent
 				Status
 			Instance Selection
 				where (Status.Submitted)
 				
	Field Rules
		LowUOMCode
			if (LowUOMCode entered)
				constraint (UOMConversion entered)
					"MustEnterBothLowUOMCodeAndUOMConversion"

			if (LowUOMCode entered
			and UOMConversion = 1)
				constraint (LowUOMCode = SourcingEventLine.UOM )
					"UOMConversionCannotBeOneIfSourcingEventUOMAndLowUOMAreDifferent"
		
		UOMConversion
			if (UOMConversion entered)
				constraint (LowUOMCode entered)
					"MustEnterBothLowUOMCodeAndUOMConversion"
			
			if (UOMConversion entered 
			and UOMConversion = 1)
				constraint (LowUOMCode = SourcingEventLine.UOM)
					"UOMConversionCannotBeOneIfSourcingEventUOMAndLowUOMAreDifferent"

			
		VendorItem
			if (!VendorItem entered
			and ResponseExists)
				if (VenItemManfDflt exists
				and VenItemManfDflt.ManufacturerNumber entered)
					default to first VenItemManfDflt.VendorItem
				else
				if (VenItemLineManfDflt exists
				and VenItemLineManfDflt.ManufacturerNumber entered)
					default to first VenItemLineManfDflt.VendorItem
				else
				if (!GlobalTradeItemNumber entered)
					if (VendorItemDefault exists)
						default to first VendorItemDefault.VendorItem

			if (!VendorItem entered
			and !SourcingEventLine.ItemType.Service
			and  SourcingEvent.VendorItemProcessing.DefaultFromItem
			and  ResponseExists)
				default to ItemNumber 
			
			if (!NoBid
			and !VendorItem entered
			and	 SourcingEventLine.NonServiceContracts
			and !SourcingEventLine.ItemType.Service
			and  ResponseExists
			and  ResponseAmount.NoBid = false
			and (SourcingEvent.VendorItemProcessing.SupplierForContract
			or   SourcingEvent.VendorItemProcessing.SupplierForAll))
				required
					"VendorItemIsRequired"
				
			if (!NoBid
			and !VendorItem entered
			and	 SourcingEventLine.OutputType.PO
			and !SourcingEventLine.ItemType.Service
			and  ResponseExists
			and  SourcingEvent.VendorItemProcessing.SupplierForAll
			and  ResponseAmount.NoBid = false)
				required
					"VendorItemIsRequired"
			else		
			if (!VendorItem entered
			and  SourcingEventLine.OutputType.PO
			and  ResponseExists
			and  ItemNumber entered)
				default to ItemNumber 
			
			if (PovendoritemRel.ManufacturerNumber entered
			and (VendorItem changed
			or  !ManufacturerInformation entered)
			and !GlobalTradeItemNumber entered)
				ManufacturerInformation.Manufacturer.ManufacturerCode	  = PovendoritemRel.Manufacturer.ManufacturerCode
				ManufacturerInformation.Manufacturer.ManufacturerDivision = PovendoritemRel.Manufacturer.ManufacturerDivision
				ManufacturerInformation.ManufacturerNumber		 		  = PovendoritemRel.ManufacturerNumber
			
		VendorItemDescription
		
			if (!VendorItemDescription entered
			and  ResponseExists	
			and (SourcingEventLine.ItemType.NonStock
			or   SourcingEventLine.ItemType.Inventoried))
				if (VenItemManfDflt exists
				and VenItemManfDflt.ManufacturerNumber entered)
					VendorItemDescription = VenItemManfDflt.VendorItemDescription
				else
				if (VenItemLineManfDflt exists
				and VenItemLineManfDflt.ManufacturerNumber entered)
					VendorItemDescription = VenItemLineManfDflt.VendorItemDescription
				else
				if (!GlobalTradeItemNumber entered)
					if (VendorItemDefault exists)
						VendorItemDescription = VendorItemDefault.VendorItemDescription
			
			if (!VendorItemDescription entered
			and !SourcingEventLine.ItemType.Service
			and  ResponseExists
			and !ResponseAmount.NoBid)
				if ((SourcingEvent.VendorItemProcessing.SupplierForAll
				and (SourcingEventLine.OutputType.PO
				or   SourcingEventLine.NonServiceContracts))
				or  (SourcingEvent.VendorItemProcessing.SupplierForContract
				and  SourcingEventLine.NonServiceContracts))
					if (Company.VendorItemDescriptionRequired)
						required
				
		Quantity

			if (CurrencyResponseUnitPrice entered
        	or  ResponseAmount.NoCharge)  	
				required
					"ResponseQuantityIsRequired"
					
			if (!ResponseAmount.NoBid
			and ResponseExists)
				if (SourcingEventLine.RequireFullQuantity
				and !SourcingEventLine.ServiceCode.Amount)
					constraint (Quantity = SourcingEventLine.Quantity)
						"ResponseQuantityMustBeEqualToLineQuantityOf<SourcingEventLine.Quantity>"
				constraint (Quantity <= SourcingEventLine.Quantity)
					"ResponseQuantityMustBeLessThanOrEqualToLineQuantity"
				if (SourcingEventLine.Quantity = 1)
					default to 1
			
			if (AmountService
			and !ResponseAmount.NoBid
			and ResponseExists)
				force default to 1
				
		CurrencyResponseUnitPrice
		
			if (VendorItem entered
			or  GlobalTradeItemNumber entered
			or  Quantity entered) 
				if (ResponseAmount.NoBid !entered
				and ResponseAmount.NoCharge !entered)
					required
						"MustEnterAUnitCost,NoBid,OrNoChargeIfVendorItemOrQuantityEntered"
		
			CurrencyResponseUnitPrice = CurrencyUnitPriceWithPrecision 
		
		ResponseAmount
			if (SourcingEventResponse.EnteredCurrencyCode   = SourcingEvent.CurrencyCode)
				ResponseAmount.UnitPrice   = CurrencyResponseUnitPrice
			else
				initialize LocalCurrencyExchange
			
				if (Company.CurrencyTable entered
				and CurrencyResponseUnitPrice entered)

					SavedFromCurrency                       = SourcingEventResponse.EnteredCurrencyCode
					SavedEnterpriseGroup					= Company.FinanceEnterpriseGroup
					SavedCurrencyTable      				= Company.CurrencyTable
					SavedTransactionAmount      			= CurrencyResponseUnitPrice
					SavedExchangeDate		 	 			= current corporate date
					LocalCurrencyExchange.ToCurrency 		= SourcingEvent.CurrencyCode

					ResponseAmount.UnitPrice	    	    = LocalCurrencyExchange.OutputCurrencyAmount
			
			if (SourcingEventResponse.NoBid)
				constraint (ResponseAmount.NoBid)  
 					"LineMustBeNoBidWhenEventResponseIsMarkedAsNoBid"  
		
			if (Quantity entered)
				constraint (!ResponseAmount.NoBid)
					"CannotEnterQuantityWhenResponseIsNoBid"
			
		BaseCurrencyUnitPrice
			if (SourcingEventResponse.EnteredCurrencyCode   = Company.Currency)
				BaseCurrencyUnitPrice   = CurrencyResponseUnitPrice
			if (SourcingEvent.CurrencyCode                  = Company.Currency)
				BaseCurrencyUnitPrice   = ResponseAmount.UnitPrice
			else
				initialize LocalCurrencyExchange
			
				if (Company.CurrencyTable entered
				and CurrencyResponseUnitPrice entered)

					SavedFromCurrency                       = SourcingEventResponse.EnteredCurrencyCode
					SavedEnterpriseGroup					= Company.FinanceEnterpriseGroup
					SavedCurrencyTable      				= Company.CurrencyTable
					SavedTransactionAmount      			= CurrencyResponseUnitPrice
					SavedExchangeDate		 	 			= current corporate date
					LocalCurrencyExchange.ToCurrency 		= Company.Currency

					BaseCurrencyUnitPrice   	    	    = LocalCurrencyExchange.OutputCurrencyAmount
		
		DeliveryDate
			if (!SourcingEventLine.OutputType.PO)
				constraint (DeliveryDate !entered)
					"CannotEnterDeliveryDateForNonPOOutput"

		AdvancedPricing
			constraint (SourcingEventLine.AllowAdvancedPricing)
				"QuantityPriceBreaksNotAllowedForLine<SourcingEventLine>"
			constraint (SourcingEventLine.OutputType.Contract
			or			SourcingEventLine.OutputType.Blanket
			or			SourcingEventLine.OutputType.CatalogQuote
			or		   (SourcingEventLine.OutputType.Service
			and 		SourcingEventLine.ServiceCode.Quantity))
				"QuantityPriceBreaksOnlyAllowedForContract,Blanket,Catalog,OrQuantityServiceContractTypes"
			if (AdvancedPricing.BreakpointOccurs.QuantityPrice[1].Quantity entered
			and ResponseAmount.UnitPrice entered)
				constraint (AdvancedPricing.BreakpointOccurs.QuantityPrice[1].CurrencyUnitPrice < CurrencyResponseUnitPrice)
					"InitialPriceBreakMustBeLessThanResponseUnitPrice"
		MarkupDiscount
			if (AdvancedPricing entered)
				required
					"MarkupOrDiscountFlagMustBeEnteredWhenPriceBreaksExist"
		QuantityAmountBreakType
			if (AdvancedPricing entered)
				required
					"ByQuantityOrAmountFlagMustBeEnteredWhenPriceBreaksExist"
    	BasePercent
    		if (MarkupDiscount.Markup
    		and AdvancedPricing.BreakpointOccurs.QuantityPrice[1].UnitPercent entered)
    			required
    				"BasePercentIsRequiredWhenUsingMarkupPriceBreaksByPercent"
    		constraint (!AdvancedPricing.BreakpointOccurs.QuantityPrice[1].CurrencyUnitPrice entered)
    			"BasePercentCannotBeEnteredWhenUsingPriceBreaksByUnitPrice"
		AwardReason
			if (Status.Submitted
			and	Company.RequireNonAwardReason
			and !NoBid
			and	(SourcingEventLine.Status.Awarded
			or	 SourcingEventLine.Status.Closed))
				constraint (AwardReason entered)
					"NonAwardReasonCodesMustBeEnteredForAllSupplierResponses"

		NoBidReason
			if (ResponseAmount.NoBid
			and NotifiedSupplier.SupplierGroup.RequireNoBidReason)
				required
					"MustEnterANoBidReason"

			if (!ResponseAmount.NoBid)
				initialize

			if (!NotifiedSupplier.SupplierGroup.RequireNoBidReason)
				constraint (!NoBidReason entered)
					"CannotEnterNoBidReasonCode"

			if (!ResponseAmount.NoBid
			or  ResponseAmount.NoCharge
			or  ResponseAmount.UnitPrice != 0)
				constraint (!NoBidReason entered)
					"CanOnlyEnterNoBidReasonWhenResponseIsNoBid"

		GlobalTradeItemNumber
			initial value is SourcingEventLine.GlobalTradeItemNumber
				when (SourcingEventLine.GlobalTradeItemNumber entered)
				
			if (!SourcingEventLine.GlobalTradeItemNumber entered)
	        	if (ItemNumber exists
	        	and ManufacturerInformation entered)
	        		if (GTINsByManufRel exists)
	        			if (GlobalTradeItemNumber entered)
		        			constraint (GlobalTradeItemNumber = GTINsByManufRel.ItemGTIN)
		        				"GTIN<GlobalTradeItemNumber>DoesNotMatchExistingGTINForThisItem,ManufacturerInformation,AndUOM"
			        	default to first GTINsByManufRel.ItemGTIN
			else
				default to SourcingEventLine.GlobalTradeItemNumber

			if (GlobalTradeItemNumber exists)  

				if (UOM entered)
					constraint (GlobalTradeItemNumber.UnitOfMeasure = UOM)
						"GTINUnitOfMeasureMustBeTheSameAsUOM"

				if (SourcingEventLine.ManufacturerInformation entered
				and !SourcingEventLine.GlobalTradeItemNumber exists)
					constraint (GlobalTradeItemNumber.Manufacturer.ManufacturerCode 		= SourcingEventLine.ManufacturerInformation.Manufacturer.ManufacturerCode
					and         GlobalTradeItemNumber.Manufacturer.ManufacturerDivision 	= SourcingEventLine.ManufacturerInformation.Manufacturer.ManufacturerDivision
					and         GlobalTradeItemNumber.ManufacturerNumber 					= SourcingEventLine.ManufacturerInformation.ManufacturerNumber)
						"ManufacturerInformationMustBeTheSameOnEventLineAndGTIN<GlobalTradeItemNumber>"
												
				ManufacturerInformation.Manufacturer.ManufacturerCode		= GlobalTradeItemNumber.Manufacturer.ManufacturerCode
				ManufacturerInformation.Manufacturer.ManufacturerDivision	= GlobalTradeItemNumber.Manufacturer.ManufacturerDivision
				ManufacturerInformation.ManufacturerNumber					= GlobalTradeItemNumber.ManufacturerNumber

			if (GlobalTradeItemNumber entered)
				if (SourcingEventLine.OutputType.PO)
					if (ItemNumber exists)
						constraint (GlobalTradeItemNumber exists)
							"GTINDoesNotExist;MustMaintainOnItemMaster"
									
				constraint (!ItemGTINItemMismatchRel exists)
					"GTIN<GlobalTradeItemNumber>IsAlreadyAssociatedWithADifferentItem;EnterCorrectGTINOrEnterAVendorItem"

		ContractType
			initial value is SourcingEventLine.DefaultContractType
			if (!ResponseAmount.NoBid)
				default to SourcingEventLine.DefaultContractType
		ContractSubtype
			if (!ResponseAmount.NoBid)
				default to SourcingEventLine.DefaultContractSubType
		ContractClassification
			if (!ResponseAmount.NoBid)	
				default to SourcingEventLine.DefaultContractClass
		ContractSubclassification
			if (!ResponseAmount.NoBid)	
				default to SourcingEventLine.DefaultContractSubClass

		EffectiveDate
			if (!ResponseAmount.NoBid)	
				default to SourcingEventLine.DefaultEffectiveDate
		ExpirationDate
			if (!ResponseAmount.NoBid
			and !MaxReleaseNumber entered)	
				default to SourcingEventLine.DefaultExpirationDate
		ScheduleFrequency
			if (!ResponseAmount.NoBid)	
				default to SourcingEventLine.DefaultScheduleFrequency
		MaxReleaseNumber
			if (!ResponseAmount.NoBid
			and !ExpirationDate entered)	
				default to SourcingEventLine.DefaultMaxReleaseNumber
		Participant
			if (!ResponseAmount.NoBid)
				default to SourcingEventLine.DefaultParticipant
							
		ManufacturerInformation
			if (SourcingEventLine.ContractOutput
			and SourcingEventLine.ItemType.Service)
				cannot be entered
					"CannotEnterManufacturerInformationForServiceItemsWithContractOutput"
					
		POCode
    		if (SourcingEventLine.OutputType.PO) 
	    		if (LineSourceRel.POCode entered)
	    			default to LineSourceRel.POCode 
	    		else
	    		if (PurchasingCompanyRel.POCodeDefaultMethod.InventoryLocation)
		    		default to SourcingEventLine.ShipTo.POCode
		    	else
		    	if (PurchasingCompanyRel.POCodeDefaultMethod.RequestingLocation)
					default to TransientRequestingLocation.POCode
		    	else
		  		if (PurchasingCompanyRel.POCodeDefaultMethod.VendorOrVendorLocation)
		  			default to PurchasingVendorRel.POCode
		    	else
		    	if (PurchasingCompanyRel.POCodeDefaultMethod.BuyerGroup)
		    		default to SourcingEvent.Buyer.BuyerGroup.POCode
		    	else
		    	if (PurchasingCompanyRel.POCodeDefaultMethod.System)
		    		if (TransientRequestingLocation exists)
		    			default to PurchasingCompanyRel.RequisitionsDefaultPOCode
		    		else
		    			default to PurchasingCompanyRel.StrategicSourcingDefaultPOCode

	StateCycles
    	EventResponseLifeCycle is a StateCycle
    		state field is Status
		
    		Draft is a State
				Create is a Create Action   
					Field Rules
					
				    	DeliveryDate	
				    		if (SourcingEventLine.OutputType.PO)
								if  (!ResponseAmount.NoBid
								and   ResponseExists
								and  (SourcingEvent.WeightingCriteria.DeliveryWeighting entered
							    or    SourcingEventLine.WeightingCriteria.DeliveryWeighting entered
							    or    SourcingEvent.DeliveryDateResponseRequired))
									required
										"DeliveryDateIsRequired"
				    			else
								if (!SourcingEvent.WeightingCriteria.DeliveryWeighting entered
								and !SourcingEventLine.WeightingCriteria.DeliveryWeighting entered
								and  ResponseExists)
					    			default to SourcingEventLine.RequestedDeliveryDate
					    			
					    		if  (DeliveryDate entered
					    		and (SourcingEventLine.RequestedDeliveryDate !entered
					    		or   SourcingEventLine.RequestedDeliveryDate != DeliveryDate))
									constraint (DeliveryDate >= current corporate date)
				    					"EnteredDeliveryDateCannotBeBeforeCurrentDate"
						
				    	DeliveryDateOverride
							if (SourcingEventLine.OutputType.PO)
					    		DeliveryDateOverride = DeliveryDate
								if (DeliveryDateOverride !entered
								and AlternateResponseArray.AlternateResponseOccurs.AlternateResponseDetails[1].DeliveryDate entered)
									DeliveryDateOverride = AlternateResponseArray.AlternateResponseOccurs.AlternateResponseDetails[1].DeliveryDate
								if (DeliveryDateOverride !entered
								and AlternateResponseArray.AlternateResponseOccurs.AlternateResponseDetails[2].DeliveryDate entered)
									DeliveryDateOverride = AlternateResponseArray.AlternateResponseOccurs.AlternateResponseDetails[2].DeliveryDate			
								if (DeliveryDateOverride !entered
								and AlternateResponseArray.AlternateResponseOccurs.AlternateResponseDetails[3].DeliveryDate entered)
									DeliveryDateOverride = AlternateResponseArray.AlternateResponseOccurs.AlternateResponseDetails[3].DeliveryDate
								if (DeliveryDateOverride !entered
								and AlternateResponseArray.AlternateResponseOccurs.AlternateResponseDetails[4].DeliveryDate entered)
									DeliveryDateOverride = AlternateResponseArray.AlternateResponseOccurs.AlternateResponseDetails[4].DeliveryDate
								if (DeliveryDateOverride !entered
								and AlternateResponseArray.AlternateResponseOccurs.AlternateResponseDetails[5].DeliveryDate entered)
									DeliveryDateOverride = AlternateResponseArray.AlternateResponseOccurs.AlternateResponseDetails[5].DeliveryDate

						ResponseAmount
				 			if (ResponseAmount.UnitPrice entered
							and LowestBidRel exists)
					 			if (!LineHasAllowanceAOC)
						 			if (SourcingEventLine.LowestBidOption.LessThanLowestBid)
						 				constraint (ResponseAmount.UnitPrice < LowestBid)
						 					"BidMustBeLessThanTheLowestBidOf<LowestBid>"
						 				constraint (NetUnitPrice < LowestBid)
						 					"BidNetUnitPrice<NetUnitPrice>MustBeLessThanTheLowestBidOf<LowestBid>"
						 			if (SourcingEventLine.LowestBidOption.LessThanOrEqualToLowestBid)
						 				constraint (ResponseAmount.UnitPrice <= LowestBid)
						 					"BidMustBeLessThanOrEqualToTheLowestBidOf<LowestBid>"
						 				constraint (NetUnitPrice <= LowestBid)
						 					"BidNetUnitPrice<NetUnitPrice>MustBeLessThanOrEqualToTheLowestBidOf<LowestBid>"

				    	VendorItem
				        	if (PovendoritemRel exists)
				        		if (SourcingEventLine.GlobalTradeItemNumber exists)
									constraint (SourcingEventLine.GlobalTradeItemNumber.Manufacturer.ManufacturerCode 		= 	PovendoritemRel.Manufacturer.ManufacturerCode
									and         SourcingEventLine.GlobalTradeItemNumber.Manufacturer.ManufacturerDivision	= 	PovendoritemRel.Manufacturer.ManufacturerDivision
									and         SourcingEventLine.GlobalTradeItemNumber.ManufacturerNumber 					= 	PovendoritemRel.ManufacturerNumber)
										"VendorItem<VendorItem>IsNotAValidVendorItemForGTIN<SourcingEventLine.GlobalTradeItemNumber>"
				        		else
				        		if (GlobalTradeItemNumber exists)
									constraint (GlobalTradeItemNumber.Manufacturer.ManufacturerCode 	= 	PovendoritemRel.Manufacturer.ManufacturerCode
									and         GlobalTradeItemNumber.Manufacturer.ManufacturerDivision = 	PovendoritemRel.Manufacturer.ManufacturerDivision
									and         GlobalTradeItemNumber.ManufacturerNumber 				= 	PovendoritemRel.ManufacturerNumber)
										"CannotEnterBothVendorItem<VendorItem>AndGTIN<GlobalTradeItemNumber>"

						GlobalTradeItemNumber
							if (GlobalTradeItemNumber entered)
								LocalAlphaGTIN = GlobalTradeItemNumber
								constraint (LocalAlphaGTIN[8] entered)
									"GTINMustBe8,12,13,Or14DigitsLong"
								if (LocalAlphaGTIN[9] entered)
									constraint (ValidGlobalTradeItemNumber)
										"GTINMustBe8,12,13,Or14DigitsLong"

						ManufacturerInformation
							if (SourcingEventLine.ManufacturerInformation entered
							and AlternateResponseArray !entered)
								ManufacturerInformation.Manufacturer.ManufacturerCode		= SourcingEventLine.ManufacturerInformation.Manufacturer.ManufacturerCode
								ManufacturerInformation.Manufacturer.ManufacturerDivision	= SourcingEventLine.ManufacturerInformation.Manufacturer.ManufacturerDivision
								ManufacturerInformation.ManufacturerNumber			= SourcingEventLine.ManufacturerInformation.ManufacturerNumber				

					Action Rules
						if (ResponseAmount.NoBid !entered
						and ResponseAmount.NoCharge !entered)
							constraint (CurrencyResponseUnitPrice entered)
								"MustEnterAUnitCost,NoBid,OrNoChargeToAddAResponse"
 						if (!SourcingEventResponse.ManualResponse)
 							constraint (!SourcingEvent.NotificationStatus.Amended)
    							"AmendmentInProgress;PleaseTryAgainLater"
	 						if (!SourcingEvent.InformalQuote
	 						and !SourcingEventResponse.HasCurrentModificationRequests)
	 							if (!SourcingEvent.BestAndFinalStarted
	 							and !SourcingEvent.StepTwoStarted)
		 							constraint (SourcingEvent.CanRespondFormal)  
		 								"CanOnlyRespondBetweenEventOpenDateAndTimeAndCloseDateAndTime"
							else
								constraint (SourcingEvent.CanRespondInformal)
									"EventStatusMustBeOpenToRespond"
	 						constraint (!SourcingEvent.AnyLinePrelimAwarded)
 								"CannotRespond;EventIsInTheProcessOfBeingAwarded"
 						constraint (SourcingEventResponse.Status.Draft)  
 							"CannotCreateLineIfResponseHasBeenSubmitted"
 						constraint (SourcingEventLine.Status.Open)  
 							"CannotRespond;LineHasBeenCancelledOrAwarded"
 						if (SourcingEventResponse.BestAndFinalSupplier)
							constraint (SourcingEvent.BestAndFinalStarted)
								"CannotEnterBestAndFinalResponseUntilProcessIsStartedByBuyer"
							if (!SourcingEventResponse.HasCurrentModificationRequests)
								constraint (current timestamp <= SourcingEvent.BestAndFinalCloseDate)
									"CannotUpdateResponseAfterBestAndFinalCloseDate"
						if (SourcingEventResponse.TechnicalProposalAccepted)
							constraint (SourcingEvent.StepTwoStarted)
								"CannotEnterPricingAmountsUntilProcessIsStartedByBuyer"
							if (!SourcingEvent.BestAndFinalOffer
							and !SourcingEventResponse.HasCurrentModificationRequests)
								constraint (current timestamp <= SourcingEvent.StepTwoCloseDate)
									"CannotUpdateResponseAfterPricingCloseDateOnTwoStepEvent"

					Exit Rules
						for each SourcingEventLineAOCRel
							invoke Create SourcingEventLineResponseAOC
								fill in fields from each
								invoked.NotifiedSupplier	= NotifiedSupplier
								
						for each SourcingEventLineResponseHeaderAOCRel
							invoke UpdateTotalAOCCost each

						if  (SourcingEvent.AllowsConditionalQuestions)
							for each SourcingEventLineQuestionRel
								invoke Create SELSupplierQuestion
									fill in fields from each
									invoked.NotifiedSupplier			= NotifiedSupplier
									invoked.SourcingEventLineQuestion	= each.SourcingEventLineQuestion

    			ManualLineCreate is a Create Action  
    				default label is "Create"
					
					Field Rules
				    	DeliveryDate
				    		if (SourcingEventLine.OutputType.PO
				    		and ResponseExists)
								if  (!ResponseAmount.NoBid
								and  (SourcingEvent.WeightingCriteria.DeliveryWeighting entered
							    or    SourcingEventLine.WeightingCriteria.DeliveryWeighting entered
							    or    SourcingEvent.DeliveryDateResponseRequired))
									required
										"DeliveryDateIsRequired"
				    			else
								if (!SourcingEvent.WeightingCriteria.DeliveryWeighting entered
								and !SourcingEventLine.WeightingCriteria.DeliveryWeighting entered)
					    			default to SourcingEventLine.RequestedDeliveryDate
					    			
					    		if  (DeliveryDate entered
					    		and (SourcingEventLine.RequestedDeliveryDate !entered
					    		or   SourcingEventLine.RequestedDeliveryDate != DeliveryDate))
									constraint (DeliveryDate >= current corporate date)
				    					"EnteredDeliveryDateCannotBeBeforeCurrentDate"

				    	DeliveryDateOverride
							if (SourcingEventLine.OutputType.PO)
					    		DeliveryDateOverride = DeliveryDate
								if (DeliveryDateOverride !entered
								and AlternateResponseArray.AlternateResponseOccurs.AlternateResponseDetails[1].DeliveryDate entered)
									DeliveryDateOverride = AlternateResponseArray.AlternateResponseOccurs.AlternateResponseDetails[1].DeliveryDate
								if (DeliveryDateOverride !entered
								and AlternateResponseArray.AlternateResponseOccurs.AlternateResponseDetails[2].DeliveryDate entered)
									DeliveryDateOverride = AlternateResponseArray.AlternateResponseOccurs.AlternateResponseDetails[2].DeliveryDate			
								if (DeliveryDateOverride !entered
								and AlternateResponseArray.AlternateResponseOccurs.AlternateResponseDetails[3].DeliveryDate entered)
									DeliveryDateOverride = AlternateResponseArray.AlternateResponseOccurs.AlternateResponseDetails[3].DeliveryDate
								if (DeliveryDateOverride !entered
								and AlternateResponseArray.AlternateResponseOccurs.AlternateResponseDetails[4].DeliveryDate entered)
									DeliveryDateOverride = AlternateResponseArray.AlternateResponseOccurs.AlternateResponseDetails[4].DeliveryDate
								if (DeliveryDateOverride !entered
								and AlternateResponseArray.AlternateResponseOccurs.AlternateResponseDetails[5].DeliveryDate entered)
									DeliveryDateOverride = AlternateResponseArray.AlternateResponseOccurs.AlternateResponseDetails[5].DeliveryDate

						VendorItem
							if (VendorItem entered)
						        if (SourcingEventLine.OutputType.PO)
							        if (SourcingEventLine.ItemType.Inventoried
							        or  SourcingEventLine.ItemType.NonStock)
								        if (VendorItemDefault exists)
											constraint (VendorItem exists)
												"VendorItem<VendorItem>NotAValidVendorItemForItem<ItemNumber>"
				        	if (PovendoritemRel exists)
				        		if (SourcingEventLine.GlobalTradeItemNumber exists)
									constraint (SourcingEventLine.GlobalTradeItemNumber.Manufacturer.ManufacturerCode 		= 	PovendoritemRel.Manufacturer.ManufacturerCode
									and         SourcingEventLine.GlobalTradeItemNumber.Manufacturer.ManufacturerDivision	= 	PovendoritemRel.Manufacturer.ManufacturerDivision
									and         SourcingEventLine.GlobalTradeItemNumber.ManufacturerNumber 					= 	PovendoritemRel.ManufacturerNumber)
										"VendorItem<VendorItem>IsNotAValidVendorItemForGTIN<SourcingEventLine.GlobalTradeItemNumber>"
				        		else
				        		if (GlobalTradeItemNumber exists)
									constraint (GlobalTradeItemNumber.Manufacturer.ManufacturerCode 	= 	PovendoritemRel.Manufacturer.ManufacturerCode
									and         GlobalTradeItemNumber.Manufacturer.ManufacturerDivision = 	PovendoritemRel.Manufacturer.ManufacturerDivision
									and         GlobalTradeItemNumber.ManufacturerNumber 				= 	PovendoritemRel.ManufacturerNumber)
										"CannotEnterBothVendorItem<VendorItem>AndGTIN<GlobalTradeItemNumber>"

						ResponseAmount
				 			if (ResponseAmount.UnitPrice entered
							and LowestBidRel exists)
					 			if (!LineHasAllowanceAOC)
						 			if (SourcingEventLine.LowestBidOption.LessThanLowestBid)
						 				constraint (ResponseAmount.UnitPrice < LowestBid)
						 					"BidMustBeLessThanTheLowestBidOf<LowestBid>"
						 				constraint (NetUnitPrice < LowestBid)
						 					"BidNetUnitPrice<NetUnitPrice>MustBeLessThanTheLowestBidOf<LowestBid>"
						 			if (SourcingEventLine.LowestBidOption.LessThanOrEqualToLowestBid)
						 				constraint (ResponseAmount.UnitPrice <= LowestBid)
						 					"BidMustBeLessThanOrEqualToTheLowestBidOf<LowestBid>"
						 				constraint (NetUnitPrice <= LowestBid)
						 					"BidNetUnitPrice<NetUnitPrice>MustBeLessThanOrEqualToTheLowestBidOf<LowestBid>"
							
						GlobalTradeItemNumber
							if (GlobalTradeItemNumber entered
							and GlobalTradeItemNumber !exists)
								initialize GTINCheckDigit
								GTINCheckDigit.ItemGTIN		= GlobalTradeItemNumber
								LocalValidCheckDigit        = GTINCheckDigit.ValidCheckDigit
								constraint (LocalValidCheckDigit = true)
									"GTINCheckDigitIsInvalid"

						ManufacturerInformation
							if (SourcingEventLine.ManufacturerInformation entered)
								ManufacturerInformation.Manufacturer.ManufacturerCode		= SourcingEventLine.ManufacturerInformation.Manufacturer.ManufacturerCode
								ManufacturerInformation.Manufacturer.ManufacturerDivision	= SourcingEventLine.ManufacturerInformation.Manufacturer.ManufacturerDivision
								ManufacturerInformation.ManufacturerNumber			= SourcingEventLine.ManufacturerInformation.ManufacturerNumber				

					Action Rules
						if (ResponseAmount.NoBid !entered
						and ResponseAmount.NoCharge !entered)
							constraint (CurrencyResponseUnitPrice entered)
								"MustEnterAUnitCost,NoBid,OrNoChargeToAddAResponse"
 						constraint (SourcingEventResponse.CanUpdateResponse)
 							"BuyerCannotAddAResponseEnteredByASupplier"
 						if (!SourcingEventResponse.ManualResponse)
 							constraint (!SourcingEvent.NotificationStatus.Amended)
    							"AmendmentInProgress;PleaseTryAgainLater"
	 						if (!SourcingEvent.InformalQuote
	 						and !SourcingEventResponse.HasCurrentModificationRequests)
		 						if (!SourcingEvent.BestAndFinalStarted
	 							and !SourcingEvent.StepTwoStarted)
		 							constraint (SourcingEvent.CanRespondFormal)  
		 								"CanOnlyRespondBetweenEventOpenDateAndTimeAndCloseDateAndTime"
							else
								constraint (SourcingEvent.CanRespondInformal)
									"EventStatusMustBeOpenToRespond"
	 						constraint (!SourcingEvent.AnyLinePrelimAwarded)
 								"CannotRespond;EventIsInTheProcessOfBeingAwarded"
 						constraint (SourcingEventResponse.Status.Draft)  
 							"CannotCreateLineIfResponseHasBeenSubmitted"
 						constraint (SourcingEventLine.Status.Open)  
 							"CannotRespond;LineHasBeenCancelledOrAwarded"
    					if (SourcingEventLine.OutputType.Service)
    						constraint (!ResponseAmount.NoCharge)
    							"CannotEnterNoChargeWhenOutputTypeIsService"
    					if (SourcingEventResponse.BestAndFinalSupplier)
							constraint (SourcingEvent.BestAndFinalStarted)
								"CannotEnterBestAndFinalResponseUntilProcessIsStartedByBuyer"
							if (!SourcingEventResponse.HasCurrentModificationRequests)
								constraint (current timestamp <= SourcingEvent.BestAndFinalCloseDate)
									"CannotUpdateResponseAfterBestAndFinalCloseDate"
						if (SourcingEventResponse.TechnicalProposalAccepted)
							constraint (SourcingEvent.StepTwoStarted)
								"CannotEnterPricingAmountsUntilProcessIsStartedByBuyer"
							if (!SourcingEventResponse.HasCurrentModificationRequests)
								if (!SourcingEvent.BestAndFinalOffer)
									constraint (current timestamp <= SourcingEvent.StepTwoCloseDate)
										"CannotUpdateResponseAfterPricingCloseDateOnTwoStepEvent"

					Exit Rules
						for each SourcingEventLineAOCRel
							invoke Create SourcingEventLineResponseAOC set
								fill in fields from each
								
						for each SourcingEventLineResponseHeaderAOCRel
							invoke UpdateTotalAOCCost each

						if  (SourcingEvent.AllowsConditionalQuestions)
							for each SourcingEventLineQuestionRel
								invoke Create SELSupplierQuestion
									fill in fields from each
									invoked.NotifiedSupplier			= NotifiedSupplier
									invoked.SourcingEventLineQuestion	= each.SourcingEventLineQuestion

    			Update is an Update Action	
					valid when (SupplierCanUpdate)
					Field Rules
				    	DeliveryDate
							if (SourcingEventLine.OutputType.PO
							and ResponseExists)
								if  (!ResponseAmount.NoBid
								and  (SourcingEvent.WeightingCriteria.DeliveryWeighting entered
							    or    SourcingEventLine.WeightingCriteria.DeliveryWeighting entered
							    or    SourcingEvent.DeliveryDateResponseRequired))
									required
										"DeliveryDateIsRequired"
				    			else
								if (!SourcingEvent.WeightingCriteria.DeliveryWeighting entered
								and !SourcingEventLine.WeightingCriteria.DeliveryWeighting entered)
					    			default to SourcingEventLine.RequestedDeliveryDate
									
				    	DeliveryDateOverride
							if (SourcingEventLine.OutputType.PO
							and !SourcingEventLine.ItemType.Service)
					    		if (DeliveryDateOverride !entered)
									DeliveryDateOverride = DeliveryDate
								if (DeliveryDateOverride !entered
								and AlternateResponseArray.AlternateResponseOccurs.AlternateResponseDetails[1].DeliveryDate entered)
									DeliveryDateOverride = AlternateResponseArray.AlternateResponseOccurs.AlternateResponseDetails[1].DeliveryDate
								if (DeliveryDateOverride !entered
								and AlternateResponseArray.AlternateResponseOccurs.AlternateResponseDetails[2].DeliveryDate entered)
									DeliveryDateOverride = AlternateResponseArray.AlternateResponseOccurs.AlternateResponseDetails[2].DeliveryDate			
								if (DeliveryDateOverride !entered
								and AlternateResponseArray.AlternateResponseOccurs.AlternateResponseDetails[3].DeliveryDate entered)
									DeliveryDateOverride = AlternateResponseArray.AlternateResponseOccurs.AlternateResponseDetails[3].DeliveryDate
								if (DeliveryDateOverride !entered
								and AlternateResponseArray.AlternateResponseOccurs.AlternateResponseDetails[4].DeliveryDate entered)
									DeliveryDateOverride = AlternateResponseArray.AlternateResponseOccurs.AlternateResponseDetails[4].DeliveryDate
								if (DeliveryDateOverride !entered
								and AlternateResponseArray.AlternateResponseOccurs.AlternateResponseDetails[5].DeliveryDate entered)
									DeliveryDateOverride = AlternateResponseArray.AlternateResponseOccurs.AlternateResponseDetails[5].DeliveryDate

						VendorItem
				        	if (PovendoritemRel exists)
				        		if (SourcingEventLine.GlobalTradeItemNumber exists)
									constraint (SourcingEventLine.GlobalTradeItemNumber.Manufacturer.ManufacturerCode 		= 	PovendoritemRel.Manufacturer.ManufacturerCode
									and         SourcingEventLine.GlobalTradeItemNumber.Manufacturer.ManufacturerDivision	= 	PovendoritemRel.Manufacturer.ManufacturerDivision
									and         SourcingEventLine.GlobalTradeItemNumber.ManufacturerNumber 					= 	PovendoritemRel.ManufacturerNumber)
										"VendorItem<VendorItem>IsNotAValidVendorItemForGTIN<SourcingEventLine.GlobalTradeItemNumber>"
				        		else
				        		if (GlobalTradeItemNumber exists)
									constraint (GlobalTradeItemNumber.Manufacturer.ManufacturerCode 	= 	PovendoritemRel.Manufacturer.ManufacturerCode
									and         GlobalTradeItemNumber.Manufacturer.ManufacturerDivision = 	PovendoritemRel.Manufacturer.ManufacturerDivision
									and         GlobalTradeItemNumber.ManufacturerNumber 				= 	PovendoritemRel.ManufacturerNumber)
										"CannotEnterBothVendorItem<VendorItem>AndGTIN<GlobalTradeItemNumber>"

						ResponseAmount
				 			if (ResponseAmount.UnitPrice entered
							and LowestBidRel exists)
					 			if (SourcingEventLine.LowestBidOption.LessThanLowestBid)
					 				constraint (ResponseAmount.UnitPrice < LowestBid)
					 					"BidMustBeLessThanTheLowestBidOf<LowestBid><SourcingEventResponse.CurrencyCode>"
					 				constraint (NetUnitPrice < LowestBid)
					 					"BidNetUnitPrice<NetUnitPrice><SourcingEventResponse.CurrencyCode>MustBeLessThanTheLowestBidOf<LowestBid><SourcingEventResponse.CurrencyCode>"
					 			if (SourcingEventLine.LowestBidOption.LessThanOrEqualToLowestBid)
					 				constraint (ResponseAmount.UnitPrice <= LowestBid)
					 					"BidMustBeLessThanOrEqualToTheLowestBidOf<LowestBid><SourcingEventResponse.CurrencyCode>"
					 				constraint (NetUnitPrice <= LowestBid)
					 					"BidNetUnitPrice<NetUnitPrice><SourcingEventResponse.CurrencyCode>MustBeLessThanOrEqualToTheLowestBidOf<LowestBid><SourcingEventResponse.CurrencyCode>"
					 		if (ResponseAmount.NoBid)
					 			for each SourcingEventLineResponseAOCRel
									invoke FastDelete each
							if  (ResponseAmount changed
							and !ResponseAmount.NoBid)
								constraint (NetUnitPrice >= 0)
									"CannotChangeUnitPriceSoThatNetUnitPriceIsLessThanZero"

						GlobalTradeItemNumber
							if (GlobalTradeItemNumber entered)
								LocalAlphaGTIN = GlobalTradeItemNumber
								constraint (LocalAlphaGTIN[8] entered)
									"GTINMustBe8,12,13,Or14DigitsLong"
								if (LocalAlphaGTIN[9] entered)
									constraint (ValidGlobalTradeItemNumber)
										"GTINMustBe8,12,13,Or14DigitsLong"
										
    				Action Rules
						if (ResponseAmount.NoBid !entered
						and ResponseAmount.NoCharge !entered)
							constraint (CurrencyResponseUnitPrice entered)
								"MustEnterAUnitCost,NoBid,OrNoCharge"
 						if (!SourcingEventResponse.ManualResponse)
 							constraint (!SourcingEvent.NotificationStatus.Amended)
    							"AmendmentInProgress;PleaseTryAgainLater"
	 						if (!SourcingEventResponse.HasCurrentModificationRequests)
		 						if (!SourcingEvent.InformalQuote)
			 						if (!SourcingEvent.BestAndFinalStarted
		 							and !SourcingEvent.StepTwoStarted)
			 							constraint (SourcingEvent.CanRespondFormal)  
			 								"CannotUpdateResponseAfterEventCloseDateAndTime"
							if (SourcingEvent.InformalQuote)
								constraint (SourcingEvent.CanRespondInformal)
									"EventStatusMustBeOpenToUpdateResponse"
	 						constraint (!SourcingEvent.AnyLinePrelimAwarded)
 								"CannotUpdateResponse;EventIsInTheProcessOfBeingAwarded"
	 					constraint (SourcingEventResponse.Status.Draft)  
 							"CannotUpdateLineIfResponseHasBeenSubmitted"
 						if (SourcingEventResponse.BestAndFinalSupplier)
							constraint (SourcingEvent.BestAndFinalStarted)
								"CannotUpdateBestAndFinalResponseUntilProcessIsStartedByBuyer"
							if (!SourcingEventResponse.HasCurrentModificationRequests)
								constraint (current timestamp <= SourcingEvent.BestAndFinalCloseDate)
									"CannotUpdateResponseAfterBestAndFinalCloseDate"
						if (SourcingEventResponse.TechnicalProposalAccepted)
							constraint (SourcingEvent.StepTwoStarted)
								"CannotUpdatePricingAmountsUntilProcessIsStartedByBuyer"
							if (!SourcingEvent.BestAndFinalOffer
							and !SourcingEventResponse.HasCurrentModificationRequests)
								constraint (current timestamp <= SourcingEvent.StepTwoCloseDate)
									"CannotUpdateResponseAfterPricingCloseDateOnTwoStepEvent"
 							
 					Exit Rules
						if  (ResponseAmount changed
						and  old ResponseAmount.NoBid)
							for each SourcingEventLineAOCRel
								invoke Create SourcingEventLineResponseAOC set
									fill in fields from each
									
						for each SourcingEventLineResponseAOCRel
							invoke UpdateTotalAOCCost each
						
						for each SourcingEventLineResponseHeaderAOCRel
							invoke UpdateTotalAOCCost each
 				
 				ManualLineUpdate is an Update Action
 					default label is "Update"
					Field Rules
				    	DeliveryDate
							if (SourcingEventLine.OutputType.PO
							and ResponseExists)
								if  (!ResponseAmount.NoBid
								and  (SourcingEvent.WeightingCriteria.DeliveryWeighting entered
							    or    SourcingEventLine.WeightingCriteria.DeliveryWeighting entered
							    or    SourcingEvent.DeliveryDateResponseRequired))
									required
										"DeliveryDateIsRequired"
								else
								if (!SourcingEvent.WeightingCriteria.DeliveryWeighting entered
								and !SourcingEventLine.WeightingCriteria.DeliveryWeighting entered)
					    			default to SourcingEventLine.RequestedDeliveryDate

				    	DeliveryDateOverride
							if (SourcingEventLine.OutputType.PO
							and !SourcingEventLine.ItemType.Service)
					    		if (DeliveryDate !entered)
									DeliveryDateOverride = DeliveryDate
								if (DeliveryDateOverride !entered
								and AlternateResponseArray.AlternateResponseOccurs.AlternateResponseDetails[1].DeliveryDate entered)
									DeliveryDateOverride = AlternateResponseArray.AlternateResponseOccurs.AlternateResponseDetails[1].DeliveryDate
								if (DeliveryDateOverride !entered
								and AlternateResponseArray.AlternateResponseOccurs.AlternateResponseDetails[2].DeliveryDate entered)
									DeliveryDateOverride = AlternateResponseArray.AlternateResponseOccurs.AlternateResponseDetails[2].DeliveryDate			
								if (DeliveryDateOverride !entered
								and AlternateResponseArray.AlternateResponseOccurs.AlternateResponseDetails[3].DeliveryDate entered)
									DeliveryDateOverride = AlternateResponseArray.AlternateResponseOccurs.AlternateResponseDetails[3].DeliveryDate
								if (DeliveryDateOverride !entered
								and AlternateResponseArray.AlternateResponseOccurs.AlternateResponseDetails[4].DeliveryDate entered)
									DeliveryDateOverride = AlternateResponseArray.AlternateResponseOccurs.AlternateResponseDetails[4].DeliveryDate
								if (DeliveryDateOverride !entered
								and AlternateResponseArray.AlternateResponseOccurs.AlternateResponseDetails[5].DeliveryDate entered)
									DeliveryDateOverride = AlternateResponseArray.AlternateResponseOccurs.AlternateResponseDetails[5].DeliveryDate
						ResponseAmount
				 			if (ResponseAmount.UnitPrice entered
							and LowestBidRel exists)
					 			if (SourcingEventLine.LowestBidOption.LessThanLowestBid)
					 				constraint (ResponseAmount.UnitPrice < LowestBid)
					 					"BidMustBeLessThanTheLowestBidOf<LowestBid>"
					 				constraint (NetUnitPrice < LowestBid)
					 					"BidNetUnitPrice<NetUnitPrice>MustBeLessThanTheLowestBidOf<LowestBid>"
					 			if (SourcingEventLine.LowestBidOption.LessThanOrEqualToLowestBid)
					 				constraint (ResponseAmount.UnitPrice <= LowestBid)
					 					"BidMustBeLessThanOrEqualToTheLowestBidOf<LowestBid>"
					 				constraint (NetUnitPrice <= LowestBid)
					 					"BidNetUnitPrice<NetUnitPrice>MustBeLessThanOrEqualToTheLowestBidOf<LowestBid>"
					 		if (ResponseAmount.NoBid)
					 			for each SourcingEventLineResponseAOCRel
									invoke  FastDelete each
							if  (ResponseAmount changed
							and !ResponseAmount.NoBid)
								constraint (NetUnitPrice >= 0)
									"CannotChangeUnitPriceSoThatNetUnitPriceIsLessThanZero"

						GlobalTradeItemNumber
							if (GlobalTradeItemNumber entered
							and GlobalTradeItemNumber !exists)
								initialize GTINCheckDigit
								GTINCheckDigit.ItemGTIN		= GlobalTradeItemNumber
								LocalValidCheckDigit        = GTINCheckDigit.ValidCheckDigit
								constraint (LocalValidCheckDigit = true)
									"GTINCheckDigitIsInvalid"

				    	VendorItem
				        	if (VendorItem entered)
						        if (SourcingEventLine.OutputType.PO)
							        if (SourcingEventLine.ItemType.Inventoried
							        or  SourcingEventLine.ItemType.NonStock)
								        if (VendorItemDefault exists)
											constraint (VendorItem exists)
												"VendorItem<VendorItem>NotAValidVendorItemForItem<ItemNumber>"
				        	if (PovendoritemRel exists)
				        		if (SourcingEventLine.GlobalTradeItemNumber exists)
									constraint (SourcingEventLine.GlobalTradeItemNumber.Manufacturer.ManufacturerCode 		= 	PovendoritemRel.Manufacturer.ManufacturerCode
									and         SourcingEventLine.GlobalTradeItemNumber.Manufacturer.ManufacturerDivision	= 	PovendoritemRel.Manufacturer.ManufacturerDivision
									and         SourcingEventLine.GlobalTradeItemNumber.ManufacturerNumber 					= 	PovendoritemRel.ManufacturerNumber)
										"VendorItem<VendorItem>IsNotAValidVendorItemForGTIN<SourcingEventLine.GlobalTradeItemNumber>"
				        		else
				        		if (GlobalTradeItemNumber exists)
									constraint (GlobalTradeItemNumber.Manufacturer.ManufacturerCode 	= 	PovendoritemRel.Manufacturer.ManufacturerCode
									and         GlobalTradeItemNumber.Manufacturer.ManufacturerDivision = 	PovendoritemRel.Manufacturer.ManufacturerDivision
									and         GlobalTradeItemNumber.ManufacturerNumber 				= 	PovendoritemRel.ManufacturerNumber)
										"CannotEnterBothVendorItem<VendorItem>AndGTIN<GlobalTradeItemNumber>"
										
    				Action Rules
						if (ResponseAmount.NoBid !entered
						and ResponseAmount.NoCharge !entered)
							constraint (CurrencyResponseUnitPrice entered)
								"MustEnterAUnitCost,NoBid,OrNoCharge"
 						if (!SourcingEventResponse.HasCurrentModificationRequests)
 							constraint (SourcingEventResponse.CanUpdateResponse)
 								"BuyerCannotUpdateAResponseEnteredByASupplier"
 						if (!SourcingEventResponse.ManualResponse)
	 						constraint (!SourcingEvent.NotificationStatus.Amended)
    							"AmendmentInProgress;PleaseTryAgainLater"
	 						if (!SourcingEvent.InformalQuote
	 						and !SourcingEventResponse.HasCurrentModificationRequests)
		 						if (!SourcingEvent.BestAndFinalStarted
	 							and !SourcingEvent.StepTwoStarted)
		 							constraint (SourcingEvent.CanRespondFormal)  
		 								"CannotUpdateResponseAfterEventCloseDateAndTime"
							else
								constraint (SourcingEvent.CanRespondInformal)
									"EventStatusMustBeOpenToUpdateResponse"
	 						constraint (!SourcingEvent.AnyLinePrelimAwarded)
 								"CannotUpdateResponse;EventIsInTheProcessOfBeingAwarded"
	 					constraint (SourcingEventResponse.Status.Draft)  
 							"CannotUpdateLineIfResponseHasBeenSubmitted"
    					if (SourcingEventLine.OutputType.Service)
    						constraint (!ResponseAmount.NoCharge)
    							"CannotEnterNoChargeWhenOutputTypeIsService"
    					if (SourcingEventResponse.BestAndFinalSupplier)
							constraint (SourcingEvent.BestAndFinalStarted)
								"CannotUpdateBestAndFinalResponseUntilProcessIsStartedByBuyer"
							if (!SourcingEventResponse.HasCurrentModificationRequests)
								constraint (current timestamp <= SourcingEvent.BestAndFinalCloseDate)
									"CannotUpdateResponseAfterBestAndFinalCloseDate"
						if (SourcingEventResponse.TechnicalProposalAccepted)
							constraint (SourcingEvent.StepTwoStarted)
								"CannotUpdatePricingAmountsUntilProcessIsStartedByBuyer"
							if (!SourcingEvent.BestAndFinalOffer
							and !SourcingEventResponse.HasCurrentModificationRequests)
								constraint (current timestamp <= SourcingEvent.StepTwoCloseDate)
									"CannotUpdateResponseAfterPricingCloseDateOnTwoStepEvent"
    							
    				Exit Rules
						if  (ResponseAmount changed
						and  old ResponseAmount.NoBid)
							for each SourcingEventLineAOCRel
								invoke Create SourcingEventLineResponseAOC set
									fill in fields from each
									
						for each SourcingEventLineResponseAOCRel
							invoke UpdateTotalAOCCost each
						
						for each SourcingEventLineResponseHeaderAOCRel
							invoke UpdateTotalAOCCost each
									
    			Delete is a Delete Action
					Entrance Rules
						for each SourcingEventLineResponseAOCRel
							invoke FastDelete each

    				Action Rules
 						if (!SourcingEventResponse.ManualResponse)
	 						constraint (!SourcingEvent.NotificationStatus.Amended)
    							"AmendmentInProgress;PleaseTryAgainLater"
 						constraint (SourcingEventResponse.Status.Draft)  
 							"CannotDeleteLineIfResponseHasBeenSubmitted"
 							
 					Exit Rules
 						for each SourcingEventLineResponseHeaderAOCRel
							invoke UpdateTotalAOCCost each
 							
				Submit is an Instance Action
					restricted
    				Action Rules
						if (!ResponseAmount.NoBid
						and SourcingEventLine.LineQuestionsExist)
							if (RequiredQuestionsExists
							or  RequiredSupplierQuestionsExists)
								if (NeedToValidateForSourcingEventLineQuestion)
									constraint (AdHocRequiredLineQuestionsAnsweredExists)
										"MustAnswerAllRequiredQuestionsForLine<SourcingEventLine>"
									constraint ((all LineQuestionWithRequiredAttachmentsRel.SourcingEventLineQuestion = any SourcingEventLineQuestionResponseWithAttachmentRel.SourcingEventLineQuestion)
										or     (SourcingEvent.AllowsConditionalQuestions
										and     SourcingEventLineNotifiedSupplierQuestionsExists
										and     QuestionWithRequiredAttachmentNotifiedSupplier)     
										or     (SourcingEvent.AllowsConditionalQuestions
										and     SourcingEventPortalSupplierQuestionsExists
										and     QuestionWithRequiredAttachmentPortalSupplier))
											"MustAttachADocumentForAllQuestionsRequiringAnAttachmentForLine<SourcingEventLine>"

								constraint ((AllLineQuestionsAnsweredNotAllowsConditional)
									or      (SourcingEvent.AllowsConditionalQuestions
									and     SourcingEventLineNotifiedSupplierQuestionsExists
									and     AllHeaderConditionalNotifiedQuestionsAnswered)	
									or     (SourcingEvent.AllowsConditionalQuestions
									and     SourcingEventPortalSupplierQuestionsExists
									and     AllHeaderConditionalQuestionsAnswered))
										"MustAnswerAllRequiredQuestionsForLine<SourcingEventLine>"

								constraint ((all LineQuestionWithRequiredAttachmentsRel.SourcingEventLineQuestion = any SourcingEventLineQuestionResponseWithAttachmentRel.SourcingEventLineQuestion)
									or     (SourcingEvent.AllowsConditionalQuestions
									and     SourcingEventLineNotifiedSupplierQuestionsExists
									and     QuestionWithRequiredAttachmentNotifiedSupplier)     
									or     (SourcingEvent.AllowsConditionalQuestions
									and     SourcingEventPortalSupplierQuestionsExists
									and     QuestionWithRequiredAttachmentPortalSupplier))							
										"MustAttachADocumentForAllQuestionsRequiringAnAttachmentForLine<SourcingEventLine>"

						if (!ResponseAmount.NoBid
						and SourcingEventLine.AddOnChargesExist)
							constraint (NotEnteredRequiredAOCs not exists)
								"ValueNotEnteredForRequiredAOC<first NotEnteredRequiredAOCs.AOC>ForLine<SourcingEventLine>"
						
						if  (SourcingEventLine.LowestBidOption > 0
						and	 LowestBidRel exists
	 					and  LineHasAllowanceAOC)
		 					if (SourcingEventLine.LowestBidOption.LessThanLowestBid)
		 						constraint (TotalResponse < LowestBidExtended)
		 							"BidTotalAmount<TotalResponse>MustBeLessThanTheLowestBidOf<LowestBidExtended>"
		 					if (SourcingEventLine.LowestBidOption.LessThanOrEqualToLowestBid)
		 						constraint (TotalResponse <= LowestBidExtended)
		 							"BidTotalAmount<TotalResponse>MustBeLessThanOrEqualToTheLowestBidOf<LowestBidExtended>"	
						
						if (!SourcingEventLine.ItemType.Service
						and  SourcingEventLine.AllowAlternateResponses)
							if (AlternateResponseArray.AlternateResponseOccurs.AlternateResponseDetails[1].ResponseAmount entered)
								constraint (AlternateResponseArray.AlternateResponseOccurs.AlternateResponseDetails[1].Quantity entered
											and AlternateResponseArray.AlternateResponseOccurs.AlternateResponseDetails[1].VendorItem entered
								            and AlternateResponseArray.AlternateResponseOccurs.AlternateResponseDetails[1].VendorItemDescription entered)
								            	"ResponseAmountEnteredForFirstAlternateResponse;MustAlsoEnterQuantity,VendorItem,AndDescription"
							
							if (AlternateResponseArray.AlternateResponseOccurs.AlternateResponseDetails[2].ResponseAmount entered)
								constraint (AlternateResponseArray.AlternateResponseOccurs.AlternateResponseDetails[2].Quantity entered
											and AlternateResponseArray.AlternateResponseOccurs.AlternateResponseDetails[2].VendorItem entered
								            and AlternateResponseArray.AlternateResponseOccurs.AlternateResponseDetails[2].VendorItemDescription entered)
								            	"ResponseAmountEnteredForSecondAlternateResponse;MustAlsoEnterQuantity,VendorItem,AndDescription"
							
							if (AlternateResponseArray.AlternateResponseOccurs.AlternateResponseDetails[3].ResponseAmount entered)
								constraint (AlternateResponseArray.AlternateResponseOccurs.AlternateResponseDetails[3].Quantity entered
											and AlternateResponseArray.AlternateResponseOccurs.AlternateResponseDetails[3].VendorItem entered
								            and AlternateResponseArray.AlternateResponseOccurs.AlternateResponseDetails[3].VendorItemDescription entered)
								            	"ResponseAmountEnteredForThirdAlternateResponse;MustAlsoEnterQuantity,VendorItem,AndDescription"
							
							if (AlternateResponseArray.AlternateResponseOccurs.AlternateResponseDetails[4].ResponseAmount entered)
								constraint (AlternateResponseArray.AlternateResponseOccurs.AlternateResponseDetails[4].Quantity entered
											and AlternateResponseArray.AlternateResponseOccurs.AlternateResponseDetails[4].VendorItem entered
								            and AlternateResponseArray.AlternateResponseOccurs.AlternateResponseDetails[4].VendorItemDescription entered)
								            	"ResponseAmountEnteredForFourthAlternateResponse;MustAlsoEnterQuantity,VendorItem,AndDescription"
							
							if (AlternateResponseArray.AlternateResponseOccurs.AlternateResponseDetails[5].ResponseAmount entered)
								constraint (AlternateResponseArray.AlternateResponseOccurs.AlternateResponseDetails[5].Quantity entered
											and AlternateResponseArray.AlternateResponseOccurs.AlternateResponseDetails[5].VendorItem entered
								            and AlternateResponseArray.AlternateResponseOccurs.AlternateResponseDetails[5].VendorItemDescription entered)
								            	"ResponseAmountEnteredForFifthAlternateResponse;MustAlsoEnterQuantity,VendorItem,AndDescription"
						
						if (SourcingEventLine.OutputType.PO
						and SourcingEventLine.AllowAlternateResponses)
						
							if (AlternateResponseArray.AlternateResponseOccurs.AlternateResponseDetails[1].ResponseAmount entered)
								constraint (AlternateResponseArray.AlternateResponseOccurs.AlternateResponseDetails[1].DeliveryDate entered)
								    "ResponseAmountEnteredForFirstAlternateResponse;MustAlsoEnterDeliveryDate"
							
							if (AlternateResponseArray.AlternateResponseOccurs.AlternateResponseDetails[2].ResponseAmount entered)
								constraint (AlternateResponseArray.AlternateResponseOccurs.AlternateResponseDetails[2].DeliveryDate entered)
								    "ResponseAmountEnteredForSecondAlternateResponse;MustAlsoEnterDeliveryDate"
								   
							if (AlternateResponseArray.AlternateResponseOccurs.AlternateResponseDetails[3].ResponseAmount entered)
								constraint (AlternateResponseArray.AlternateResponseOccurs.AlternateResponseDetails[3].DeliveryDate entered)
								    "ResponseAmountEnteredForSecondAlternateResponse;MustAlsoEnterDeliveryDate"
								   
							if (AlternateResponseArray.AlternateResponseOccurs.AlternateResponseDetails[4].ResponseAmount entered)
								constraint (AlternateResponseArray.AlternateResponseOccurs.AlternateResponseDetails[4].DeliveryDate entered)
									"ResponseAmountEnteredForSecondAlternateResponse;MustAlsoEnterDeliveryDate"
								   
							if (AlternateResponseArray.AlternateResponseOccurs.AlternateResponseDetails[5].ResponseAmount entered)
								constraint (AlternateResponseArray.AlternateResponseOccurs.AlternateResponseDetails[5].DeliveryDate entered)
								    "ResponseAmountEnteredForSecondAlternateResponse;MustAlsoEnterDeliveryDate"
						
						make transition to Submitted

				QuickSubmit is an Instance Action 
					restricted 

					Action Rules 

						make transition to Submitted 

			Submitted is a State
				ModifyResponse is an Instance Action
					restricted
					Action Rules
						make transition to Draft
						
				WithdrawResponse is an Instance Action 
					restricted
    				Action Rules
    					make transition to Withdrawn
 				
 				Update is an Update Action
 					bypass field rules
 					restricted
 					 					
				UpdateContract is an Instance Action
 					restricted
 					Parameters
 						ContractParam					is a Contract					
						ContractTypeParam				is a ContractType				
						ContractSubtypeParam			is a ContractSubtype				
						ContractClassificationParam		is a ContractClassification		
						ContractSubclassificationParam	is a ContractSubclassification
 						ContractLineParam				is a ContractLine					
						NewContractCreationParam		is Boolean
						EffectiveDateParam			    is Date	
						ExpirationDateParam			    is Date
						ScheduleFrequencyParam		    is a ScheduleFrequency				
						MaxReleaseNumberParam		    is Numeric size 4		
					
					Action Rules				
						if ((EffectiveDate             = EffectiveDateParam
						or   EffectiveDate             = blank)
						and (ExpirationDate            = ExpirationDateParam
						or   ExpirationDate            = blank)
						and (ScheduleFrequency         = ScheduleFrequencyParam
						or   ScheduleFrequency         = blank)
						and (MaxReleaseNumber          = MaxReleaseNumberParam
						or   MaxReleaseNumber          = blank))
							EffectiveDate			= EffectiveDateParam
							ExpirationDate			= ExpirationDateParam
							ScheduleFrequency		= ScheduleFrequencyParam
							MaxReleaseNumber		= MaxReleaseNumberParam
						if (ContractParam entered)
							Contract					= ContractParam
						if (ContractTypeParam entered)
							ContractType				= ContractTypeParam
						if (ContractSubtypeParam entered)
							ContractSubtype				= ContractSubtypeParam
						if (ContractClassificationParam entered)
							ContractClassification		= ContractClassificationParam
						if (ContractSubclassificationParam entered)
							ContractSubclassification	= ContractSubclassificationParam
						if (ContractLineParam entered)
							ContractLine				= ContractLineParam
						if (NewContractCreationParam entered)
							NewContractCreation			= NewContractCreationParam

 				AwardLineNewContract is an Update Action
 					valid when (AwardLineValidForNewContract)
 					Action Rules
						
						if (SourcingEvent.RequireBidBond)
 							constraint (SourcingEventResponse.BidBondValidated)
 								"CannotAward;ABidBondIsRequiredAndHasNotBeenProvidedOrValidated;IfAPaperBidBondHasBeenProvided,IndicateOnResponsesBySupplier"
						
						if (SourcingEvent.ResponsesNeedBuyerScoring)
							if (!SourcingEvent.PastBuyerWeightingDate)
								constraint (!SourcingEvent.IncompleteBuyerScoringEdit.HardEditAtAwardTime)
									"CannotAwardUntilBuyerScoringHasBeenCompletedOnAllResponses."
							else
								constraint (!SourcingEvent.IncompleteBuyerScoringEdit.HardEditAtAwardTime)
									"CannotAwardUntilBuyerScoringHasBeenCompletedOnAllResponses;FinalBuyerWeightingDateHasPassed;MustExtendBuyerWeightingDateToEnterMissingResponses."		
	 							
 							if (SourcingEvent.IncompleteBuyerScoringEdit.SoftEditAtAwardTime)
 								confirmation required
 									"BuyerScoringHasNotBeenCompletedOnAllResponses.AreYouSureYouWantToAwardToThisSupplier?"
						if (SourcingEventResponse.RequestToNegotiateTerms
						and !TermsHaveBeenNegotiated)
							confirmation required
								"SupplierChoseToNegotiateTerms;AreYouSureYouWantToAwardToThisSupplier?"
						if (AwardForContract)
							constraint (!ResponseAmount.NoBid)
								"SupplierRespondedWithNoBid;CannotAward"
						if (SourcingEventLine.OutputType.Service)
							constraint (!ResponseAmount.NoCharge)
								"SupplierRespondedWithNoCharge;OutputTypeServiceRequiresACostAmount;CannotAward"

						if (SourcingEventResponse.RequiredQuestions exists
						or  SourcingEventResponse.RequiredSupplierQuestionsExists)

							if  (!SourcingEvent.AllowsConditionalQuestions)
								constraint (SourcingEventResponse.AllHeaderQuestionsAnswered)
									"MustAnswerAllRequiredQuestionsForEvent"
							else
							if  (SourcingEvent.AllowsConditionalQuestions)
								constraint ((SourcingEventResponse.SourcingEventNotifiedSupplierQuestionsExists
									and      SourcingEventResponse.AllHeaderConditionalNotifiedQuestionsAnswered)	
									or      (SourcingEventResponse.SourcingEventPortalSupplierQuestionsExists
									and      SourcingEventResponse.AllHeaderConditionalQuestionsAnswered))
										"MustAnswerAllRequiredQuestionsForEvent"

						if  (!SourcingEvent.AllowsConditionalQuestions)
							for each LineQuestionsThatAreRequiredRel
								LocalSourcingEventLine				= each.SourcingEventLine
								LocalSourcingEventLineQuestion		= each.SourcingEventLineQuestion
								constraint (LineQuestionsRequiredResponse exists)
									"MustAnswerAllRequiredQuestions;EventLine:<LocalSourcingEventLine>,Question:<LocalSourcingEventLineQuestion>"
						else
						if  (SourcingEvent.AllowsConditionalQuestions)
							for each LineSupplierQuestionsThatAreRequiredRel
								LocalSourcingEventLine				= each.SourcingEventLine
								LocalSourcingEventLineQuestion		= each.SourcingEventLineQuestion
								constraint (LineSupplierQuestionsRequiredResponse exists)
									"MustAnswerAllRequiredQuestions;EventLine:<LocalSourcingEventLine>,Question:<LocalSourcingEventLineQuestion>"

						AwardDate	= current timestamp
						AwardByUser = actor

						if (NotifiedSupplier.Supplier.Vendor.PurchasingVendor.GTINInUse
						and !SourcingEventLine.ItemType.Service)
							if (!PovendoritemRel exists
							and !GlobalTradeItemNumber exists) 	
								constraint (ManufacturerInformation.Manufacturer.ManufacturerCode entered)
									"ManufacturerCodeIsRequired"				
								constraint (ManufacturerInformation.ManufacturerNumber entered)
									"ManufacturerNumberIsRequired"
									
						if (SourcingEventLine.NonServiceContracts
						and !SourcingEventLine.ItemType.Service
						and ResponseExists
						and SourcingEvent.VendorItemProcessing = 4)
							constraint (VendorItem entered)
								"MustEnterAVendorItem;EventRequiresAVendorItemPriorToOutputCreation"

						initialize Contract
						
						if (SourcingEventResponse.CurrencyCode !entered)
							invoke Submitted.Update SourcingEventResponse
								if (OutputCurrency entered)
									invoked.CurrencyCode = OutputCurrency
								else
									invoked.CurrencyCode = SourcingEventResponse.EnteredCurrencyCode

					Field Rules 

						AwardReason
    						required

    					AwardForContract
    						if (!SourcingEventLine.AllowAlternateResponses)
    							default to true
    						else
    							constraint (SomeContractAwarded)
    								"MustIndicateAnAwardForAtLeastOneResponse"
    								
    					VendorItem

							if (VendorItem entered)
								if (AwardQuantity > 0
								or  AwardForContract = true)
									if (SourcingEventLine.NonServiceContracts)
								        if (SourcingEventLine.ItemType.Inventoried
								        or  SourcingEventLine.ItemType.NonStock)
											constraint (!VenItemRel exists)
												"VendorItem<VendorItem>AlreadyAssignedToDifferentItemOnLineNumber<first VenItemRel.SourcingEventLine>"
											constraint (!VenAlternateItemRel exists)
												"VendorItem<VendorItem>AlreadyAssignedToDifferentItemOnLineNumber<first VenAlternateItemRel.SourcingEventLine>SeeAlternateResponsesBySupplier"
										if (ManufacturerInformation.Manufacturer.ManufacturerCode entered
										and ManufacturerInformation.ManufacturerNumber entered)
											constraint (!POVendorItemForSameMfgInfoRel exists)
												"POVendorItem<first POVendorItemForSameMfgInfoRel.VendorItem>AlreadyExistsForThisVendorWithTheSameManufacturerInformation"
											constraint (!MfgVenItemRel exists)
												"VendorItem<first MfgVenItemRel.VendorItem>OnAwardedResponseLine<first MfgVenItemRel.SourcingEventLine>AlsoExistsWithTheSameManufacturerInformation"
										if (ManufacturerInformation changed
										and PovendoritemRel exists)
											constraint (ManufacturerInformation.Manufacturer.ManufacturerCode 		= PovendoritemRel.Manufacturer.ManufacturerCode
											and         ManufacturerInformation.Manufacturer.ManufacturerDivision	= PovendoritemRel.Manufacturer.ManufacturerDivision
											and         ManufacturerInformation.ManufacturerNumber					= PovendoritemRel.ManufacturerNumber)
												"CannotOverrideTheManufacturerInformationForAnExistingVendorItem"
	
									if (VendorItem.VendorPriceUOM entered
									and VendorItem.VendorBuyUOM entered)
										constraint (VendorItem.VendorPriceUOM = UOM)
											"PriceUOMOf<VendorItem.VendorPriceUOM.UnitOfMeasure>ForVendorItem<VendorItem>DoesNotMatchResponseUOMOf<UOM.UnitOfMeasure>"
									else
									if (VendorItem.VendorBuyUOM entered
									and !SourcingEventLine.OutputType.PO)
										constraint (VendorItem.VendorBuyUOM = UOM)
											"BuyUOMOf<VendorItem.VendorBuyUOM.UnitOfMeasure>ForVendorItem<VendorItem>DoesNotMatchResponseUOMOf<UOM.UnitOfMeasure>"
									else
									if (VendorItem.VendorPriceUOM entered)
										constraint (VendorItem.VendorPriceUOM = UOM)
											"PriceUOMOf<VendorItem.VendorPriceUOM.UnitOfMeasure>ForVendorItem<VendorItem>DoesNotMatchResponseUOMOf<UOM.UnitOfMeasure>"

								if (!GlobalTradeItemNumber entered)
									if (GTINsByManufRel exists)
										GlobalTradeItemNumber = first GTINsByManufRel.ItemGTIN

                		ContractType
				    		required
				    		if (!ContractSubtype entered)
				    			constraint (ContractType.PurchaseType = SourcingEventLine.ContractType)
                					"MustSelectAPurchaseTypeWithATypeOf<SourcingEventLine.OutputType>"
               				                			                			
                		ContractSubtype
                			constraint (ContractSubtype.PurchaseType = SourcingEventLine.ContractType)
                				"MustSelectAPurchaseTypeWithAnTypeOf<SourcingEventLine.OutputType>"
                			                													
						ContractClassification
               				required
                			                		
						EffectiveDate 
				    		if	(LifetimeMaximumAmount entered
							or   ServiceCommitment = true)
				    			required
				    				"EffectiveDateRequiredWhenCommitmentInformationEntered"							
						
						ExpirationDate
							constraint (ExpirationDate > EffectiveDate)
								"ExpirationDateMustBeGreaterThanEffectiveDate"
				    		if (SourcingEventLine.OutputType.Standing
				    		and !Contract entered)
				    			if (MaxReleaseNumber entered)
				    				cannot be entered
				    					"CanEnterEitherExpirationDateOrMaxReleaseNumber"
				    			
				    		if (SourcingEventLine.OutputType.Standing
				    		and !MaxReleaseNumber entered)
				    			required
				    					"MustEnterEitherMaxReleaseNumberOrExpirationDate"		
				    		if	(LifetimeMaximumAmount entered
							or   ServiceCommitment = true)
				    			required
				    				"ExpirationDateRequiredWhenCommitmentInformationEntered"
				    		
				    	ScheduleFrequency
				    		constraint (SourcingEventLine.OutputType.Standing)
				    			"CanOnlyEnterScheduleFrequencyWhenOutputIsStanding"
				    		if (SourcingEventLine.OutputType.Standing)
				    			required
				    				"ScheduleFrequencyRequiredWhenOutputIsStanding"
				    								
				    	MaxReleaseNumber
				    		if (SourcingEventLine.OutputType.Standing)
				    			if (ExpirationDate entered)
				    				cannot be entered
				    					"CanEnterEitherMaxReleaseNumberOrExpirationDate"
				    		if (SourcingEventLine.OutputType.Standing
				    		and !ExpirationDate entered)
				    			required
				    					"MustEnterEitherMaxReleaseNumberOrExpirationDate"
				    			
				    	LifetimeMaxQuantity
				    		constraint (LifetimeMaxQuantity >= AwardQuantity)
								"LifetimeMaximumQuantityMustBeGreaterThanAwardedQuantity-<AwardQuantity>"
				    		constraint (!BothMaxQtyFieldsEntered)
								"CannotEnterBothLifetimeMaxQuantityAndAwardQuantityToLifetimeMaximumQuantity"
				    		if (SourcingEventLine.NonStandingContracts
				    		and SourcingEventLine.ServiceCode.Quantity
							and !AwardQtyToLifetimeMaxQty)
				    			required
				    				"LifetimeMaxQuantityRequiredWhenServiceCodeEqualsQuantity"
				    		if (SourcingEventLine.ServiceCode.Amount)
				    			cannot be entered
				    				"LifetimeMaxQuantityCannotBeEnteredWhenServiceCodeEqualsAmount" 
				    	
				    	Participant

				    		if (SourcingEventLine.OutputType.Standing
				    		and !ParticipantGroup entered)
				    			constraint (Participant.Location entered)
				    				"MustEnterCompany/LocationOnlyForStandingOrder"
			    				required
			    					"ParticipantInformationRequiredWhenOutputIsStanding"
				    											
							if (Participant.Location entered)
								constraint (!Participant.RequestingLocation entered)
									"MustEnterEitherLocationOrRequestingLocation"			    			


							if (Participant.Company entered)
								LocalCompany = Participant.Company
								constraint (Participant.PricingGroup !entered)
									"CannotEnterBothCompanyAndPricingGroup"
								constraint (PoCompanyRel exists)
									"ParticipantCompanysProcurementGroupDoesNotEqualTheSourcingCompanysProcurementGroup"
							if (Participant.PricingGroup entered)
								constraint (Participant.Company !entered)
									"CannotEnterBothCompanyAndPricingGroup"
							if (Participant entered)
								constraint (!ParticipantGroup entered)
									"CannotEnterBothParticipantGroupAndParticipantInformation"
								
						ParticipantGroup
							if (ParticipantGroup entered)
					    		constraint (SourcingEventLine.NonServiceContracts)
									"CannotEnterParticipantGroupInformationWhenOutputIsService"

								constraint (!Participant entered)
									"CannotEnterBothParticipantGroupAndParticipantInformation"

					    		if (SourcingEventLine.OutputType.Standing)
									constraint (any ParticipantGroup.ParticipantGroupLineRel.HasLoc)
					    				"ParticipantGroupMustContainCompany/LocationDefinedParticipantsForStandingOutputTypes"

								if (MaxReleaseNumber entered)
									constraint (ParticipantGroup.HasMixedCompanies = false)
										"DurationDefinedByNumberOfReleases,MultipleCompaniesCannotParticipate"

				    	LifetimeMaximumAmount   		

							constraint (LifetimeMaximumAmount >= ResponseAmount.UnitPrice)
								"LifetimeMaximumAmountMustBeGreaterThanLineUnitPrice-<ResponseAmount.UnitPrice>"
                		
						GlobalTradeItemNumber
							if (GlobalTradeItemNumber entered
							and GlobalTradeItemNumber !exists)
								initialize GTINCheckDigit
								GTINCheckDigit.ItemGTIN		= GlobalTradeItemNumber
								LocalValidCheckDigit        = GTINCheckDigit.ValidCheckDigit
								constraint (LocalValidCheckDigit = true)
									"GTINCheckDigitIsInvalid"

								constraint (!ItemGTINItemMismatchRel exists)
									"GTIN<GlobalTradeItemNumber>IsAlreadyAssociatedWithADifferentItem;EnterCorrectGTINOrEnterAVendorItem"

								if (GlobalTradeItemNumber exists)
									constraint (GlobalTradeItemNumber.UnitOfMeasure = SourcingEventLine.UOM)
										"UOMMustBeTheSameOnGTINAndSourcingEventLine"
									constraint (GlobalTradeItemNumber.Active)
										"GTIN<GlobalTradeItemNumber>IsInactive"
									if (PovendoritemRel exists)
										constraint (GlobalTradeItemNumber.Manufacturer.ManufacturerCode 	= 	PovendoritemRel.Manufacturer.ManufacturerCode
										and         GlobalTradeItemNumber.Manufacturer.ManufacturerDivision = 	PovendoritemRel.Manufacturer.ManufacturerDivision
										and         GlobalTradeItemNumber.ManufacturerNumber 				= 	PovendoritemRel.ManufacturerNumber)
											"ManufacturerInformationOnGTIN<GlobalTradeItemNumber>MustBeTheSameAsManufacturerInformationOnVendorItem<VendorItem>"

									if (SourcingEventLine.ManufacturerInformation entered)
										constraint (GlobalTradeItemNumber.Manufacturer.ManufacturerCode 		=	SourcingEventLine.ManufacturerInformation.Manufacturer.ManufacturerCode
										and         GlobalTradeItemNumber.Manufacturer.ManufacturerDivision 	= 	SourcingEventLine.ManufacturerInformation.Manufacturer.ManufacturerDivision
										and         GlobalTradeItemNumber.ManufacturerNumber 					= 	SourcingEventLine.ManufacturerInformation.ManufacturerNumber)
											"ManufacturerInformationMustBeTheSameOnGTIN<GlobalTradeItemNumber>AndSourcingEventLine"

									ManufacturerInformation.Manufacturer.ManufacturerCode		= GlobalTradeItemNumber.Manufacturer.ManufacturerCode
									ManufacturerInformation.Manufacturer.ManufacturerDivision	= GlobalTradeItemNumber.Manufacturer.ManufacturerDivision
									ManufacturerInformation.ManufacturerNumber					= GlobalTradeItemNumber.ManufacturerNumber

								if (!GlobalTradeItemNumber exists
								and !SourcingEventLine.ItemType.Service)
									constraint (ManufacturerInformation.Manufacturer.ManufacturerCode entered)
										"ManufacturerCodeIsRequired"				
									constraint (ManufacturerInformation.ManufacturerNumber entered)
										"ManufacturerNumberIsRequired"
								
								if (PovendoritemRel exists)
									constraint (GlobalTradeItemNumber exists)
										"GTINDoesNotExist;MustMaintainOnItemMaster"

				        	if (ItemNumber exists
				        	and ManufacturerInformation entered)
				        		if (GTINsByManufRel exists)
				        			if (GlobalTradeItemNumber entered)
					        			constraint (GlobalTradeItemNumber = GTINsByManufRel.ItemGTIN)
					        				"GTIN<GlobalTradeItemNumber>DoesNotMatchExistingGTINForThisItem,ManufacturerInformation,AndUOM"

					Exit Rules
						invoke Update Submitted UpdateNegotiatedFlagRel
							invoked.TermsHaveBeenNegotiated				= TermsHaveBeenNegotiated
							
						if (SourcingEvent.ShowResponsesNotViewed)
							invoke MarkResponsesAsViewed SourcingEvent						

 				AwardLineAppendToContract is an Update Action
 					valid when (AwardLineValidForExistingContract)
 					Action Rules
 						if (SourcingEvent.RequireBidBond)
 							constraint (SourcingEventResponse.BidBondValidated)
 								"CannotAward;ABidBondIsRequiredAndHasNotBeenProvidedOrValidated;IfAPaperBidBondHasBeenProvided,IndicateOnResponsesBySupplier"
						
						if (SourcingEventLine.NonServiceContracts
						and !SourcingEventLine.ItemType.Service
						and ResponseExists
						and SourcingEvent.VendorItemProcessing = 4)
							constraint (VendorItem entered)
								"MustEnterAVendorItem;EventRequiresAVendorItemPriorToOutputCreation"
														
						if (SourcingEvent.ResponsesNeedBuyerScoring)
							if (!SourcingEvent.PastBuyerWeightingDate)
								constraint (!SourcingEvent.IncompleteBuyerScoringEdit.HardEditAtAwardTime)
									"CannotAwardUntilBuyerScoringHasBeenCompletedOnAllResponses."
							else
								constraint (!SourcingEvent.IncompleteBuyerScoringEdit.HardEditAtAwardTime)
									"CannotAwardUntilBuyerScoringHasBeenCompletedOnAllResponses;FinalBuyerWeightingDateHasPassed;MustExtendBuyerWeightingDateToEnterMissingResponses."	
	 							
 							if (SourcingEvent.IncompleteBuyerScoringEdit.SoftEditAtAwardTime)
 								confirmation required
 									"BuyerScoringHasNotBeenCompletedOnAllResponses.AreYouSureYouWantToAwardToThisSupplier?"
						if (SourcingEventResponse.RequestToNegotiateTerms
						and !TermsHaveBeenNegotiated)
							confirmation required
								"SupplierChoseToNegotiateTerms;AreYouSureYouWantToAwardToThisSupplier?"
						if (AwardForContract)
							constraint (!ResponseAmount.NoBid)
								"SupplierRespondedWithNoBid;CannotAward"
						if (SourcingEventLine.OutputType.Service)
							constraint (!ResponseAmount.NoCharge)
								"SupplierRespondedWithNoCharge;OutputTypeServiceRequiresACostAmount;CannotAward"
						
						if (NotifiedSupplier.Supplier.Vendor.PurchasingVendor.GTINInUse
						and !SourcingEventLine.ItemType.Service)
							if (!PovendoritemRel exists
							and !GlobalTradeItemNumber exists) 	
								constraint (ManufacturerInformation.Manufacturer.ManufacturerCode entered)
									"ManufacturerCodeIsRequired"				
								constraint (ManufacturerInformation.ManufacturerNumber entered)
									"ManufacturerNumberIsRequired"

						if (SourcingEventResponse.RequiredQuestions exists
						or  SourcingEventResponse.RequiredSupplierQuestionsExists)

							if  (!SourcingEvent.AllowsConditionalQuestions)
								constraint (SourcingEventResponse.AllHeaderQuestionsAnswered)
									"MustAnswerAllRequiredQuestionsForEvent"
							else
							if  (SourcingEvent.AllowsConditionalQuestions)
								constraint ((SourcingEventResponse.SourcingEventNotifiedSupplierQuestionsExists
									and      SourcingEventResponse.AllHeaderConditionalNotifiedQuestionsAnswered)	
									or      (SourcingEventResponse.SourcingEventPortalSupplierQuestionsExists
									and      SourcingEventResponse.AllHeaderConditionalQuestionsAnswered))
										"MustAnswerAllRequiredQuestionsForEvent"

						if  (!SourcingEvent.AllowsConditionalQuestions)
							for each LineQuestionsThatAreRequiredRel
								LocalSourcingEventLine				= each.SourcingEventLine
								LocalSourcingEventLineQuestion		= each.SourcingEventLineQuestion
								constraint (LineQuestionsRequiredResponse exists)
									"MustAnswerAllRequiredQuestions;EventLine:<LocalSourcingEventLine>,Question:<LocalSourcingEventLineQuestion>"
						else
						if  (SourcingEvent.AllowsConditionalQuestions)
							for each LineSupplierQuestionsThatAreRequiredRel
								LocalSourcingEventLine				= each.SourcingEventLine
								LocalSourcingEventLineQuestion		= each.SourcingEventLineQuestion
								constraint (LineSupplierQuestionsRequiredResponse exists)
									"MustAnswerAllRequiredQuestions;EventLine:<LocalSourcingEventLine>,Question:<LocalSourcingEventLineQuestion>"

						AwardDate	= current timestamp
						AwardByUser = actor
						AwardQtyToLifetimeMaxQty = AwardQtyToLifetimeMaxQty
 					
 					Field Rules 

						AwardReason
    						required

    					AwardForContract
    						if (!SourcingEventLine.AllowAlternateResponses)
    							default to true
    						else
    							constraint (SomeContractAwarded)
    								"MustIndicateAnAwardForAtLeastOneResponse"
    					
    					VendorItem
							if (!VendorItem entered
							and	SourcingEventLine.NonServiceContracts
							and !SourcingEventLine.ItemType.Service
							and ResponseExists)
								required
							if (VendorItem entered)
								if (SourcingEventLine.NonServiceContracts)
							        if (SourcingEventLine.ItemType.Inventoried
							        or  SourcingEventLine.ItemType.NonStock)
										constraint (!VenItemRel exists)
											"VendorItem<VendorItem>AlreadyAssignedToDifferentItemOnLineNumber<first VenItemRel.SourcingEventLine>"
										constraint (!VenAlternateItemRel exists)
											"VendorItem<VendorItem>AlreadyAssignedToDifferentItemOnLineNumber<first VenAlternateItemRel.SourcingEventLine>SeeAlternateResponsesBySupplier"
									if (ManufacturerInformation entered)
										constraint (!POVendorItemForSameMfgInfoRel exists)
											"POVendorItem<first POVendorItemForSameMfgInfoRel.VendorItem>AlreadyExistsForThisVendorWithTheSameManufacturerInformation"
										constraint (!MfgVenItemRel exists)
											"VendorItem<first MfgVenItemRel.VendorItem>OnAwardedResponseLine<first MfgVenItemRel.SourcingEventLine>AlsoExistsWithTheSameManufacturerInformation"
									if (ManufacturerInformation changed
									and PovendoritemRel exists)
										constraint (ManufacturerInformation.Manufacturer.ManufacturerCode 		= PovendoritemRel.Manufacturer.ManufacturerCode
										and         ManufacturerInformation.Manufacturer.ManufacturerDivision	= PovendoritemRel.Manufacturer.ManufacturerDivision
										and         ManufacturerInformation.ManufacturerNumber					= PovendoritemRel.ManufacturerNumber)
											"CannotOverrideTheManufacturerInformationForAnExistingVendorItem"

								if (VendorItem.VendorPriceUOM entered
								and VendorItem.VendorBuyUOM entered)
									constraint (VendorItem.VendorPriceUOM.UnitOfMeasure = UOM.UnitOfMeasure)
										"PriceUOMOf<VendorItem.VendorPriceUOM.UnitOfMeasure>ForVendorItem<VendorItem>DoesNotMatchResponseUOMOf<UOM.UnitOfMeasure>"
								else
								if (VendorItem.VendorBuyUOM entered)
									constraint (VendorItem.VendorBuyUOM.UnitOfMeasure = UOM.UnitOfMeasure)
										"BuyUOMOf<VendorItem.VendorBuyUOM.UnitOfMeasure>ForVendorItem<VendorItem>DoesNotMatchResponseUOMOf<UOM.UnitOfMeasure>"
								else
								if (VendorItem.VendorPriceUOM entered)
									constraint (VendorItem.VendorPriceUOM.UnitOfMeasure = UOM.UnitOfMeasure)
										"PriceUOMOf<VendorItem.VendorPriceUOM.UnitOfMeasure>ForVendorItem<VendorItem>DoesNotMatchResponseUOMOf<UOM.UnitOfMeasure>"

								if (!GlobalTradeItemNumber entered)
									if (GTINsByManufRel exists)
										GlobalTradeItemNumber = first GTINsByManufRel.ItemGTIN

				    	Contract
			    			constraint (!Contract.ContractStatus.Closed)
								"ExistingContractMustNotBeInactiveOrClosed"
							constraint (!Contract.ContractStatus.Inactive)
								"ExistingContractMustNotBeInactiveOrClosed"
							constraint (NotifiedSupplier.Supplier = Contract.Supplier)
            					"AwardedSupplierMustMatchTheSupplierOnTheExistingContract"
            				constraint (NotifiedSupplier.SupplierSourceId = Contract.SupplierSourceId)
            					"AwardedSupplierContactMustMatchTheSupplierContactOnTheExistingContract"
							constraint (!Contract.UseHeaderCommitments)
								"CannotAppendToExistingContractThatUsesHeaderCommitments"
							if (Contract.UseLineCommitments)
								constraint (LifetimeMaximumAmount entered)
									"ContractUsesLineOrLineSpreadCommitments;MustEnterALifetimeMaximumAmount"
							if (!SourcingEventLine.ItemType.Special
							and VendorItem entered)
								constraint (!ItemOnContractLineRel exists)
									"VendorItem<VendorItem>WithUOMOf<UOM.UnitOfMeasure>IsAlreadyOnTheExistingContract"						
            		                		
						GlobalTradeItemNumber
							if (GlobalTradeItemNumber entered
							and GlobalTradeItemNumber !exists)
								initialize GTINCheckDigit
								GTINCheckDigit.ItemGTIN		= GlobalTradeItemNumber
								LocalValidCheckDigit        = GTINCheckDigit.ValidCheckDigit
								constraint (LocalValidCheckDigit = true)
									"GTINCheckDigitIsInvalid"

								constraint (!ItemGTINItemMismatchRel exists)
									"GTIN<GlobalTradeItemNumber>IsAlreadyAssociatedWithADifferentItem;EnterCorrectGTINOrEnterAVendorItem"

								if (GlobalTradeItemNumber exists)
									constraint (GlobalTradeItemNumber.UnitOfMeasure.UnitOfMeasure = SourcingEventLine.UOM.UnitOfMeasure)
										"UOMMustBeTheSameOnGTINAndSourcingEventLine"
									constraint (GlobalTradeItemNumber.Active)
										"GTIN<GlobalTradeItemNumber>IsInactive"
									if (PovendoritemRel exists)
										constraint (GlobalTradeItemNumber.Manufacturer.ManufacturerCode 	= 	PovendoritemRel.Manufacturer.ManufacturerCode
										and         GlobalTradeItemNumber.Manufacturer.ManufacturerDivision = 	PovendoritemRel.Manufacturer.ManufacturerDivision
										and         GlobalTradeItemNumber.ManufacturerNumber 				= 	PovendoritemRel.ManufacturerNumber)
											"ManufacturerInformationOnGTIN<GlobalTradeItemNumber>MustBeTheSameAsManufacturerInformationOnVendorItem<VendorItem>"

									if (SourcingEventLine.ManufacturerInformation entered)
										constraint (GlobalTradeItemNumber.Manufacturer.ManufacturerCode 		=	SourcingEventLine.ManufacturerInformation.Manufacturer.ManufacturerCode
										and         GlobalTradeItemNumber.Manufacturer.ManufacturerDivision 	= 	SourcingEventLine.ManufacturerInformation.Manufacturer.ManufacturerDivision
										and         GlobalTradeItemNumber.ManufacturerNumber 					= 	SourcingEventLine.ManufacturerInformation.ManufacturerNumber)
											"ManufacturerInformationMustBeTheSameOnGTIN<GlobalTradeItemNumber>AndSourcingEventLine"

									ManufacturerInformation.Manufacturer.ManufacturerCode		= GlobalTradeItemNumber.Manufacturer.ManufacturerCode
									ManufacturerInformation.Manufacturer.ManufacturerDivision	= GlobalTradeItemNumber.Manufacturer.ManufacturerDivision
									ManufacturerInformation.ManufacturerNumber					= GlobalTradeItemNumber.ManufacturerNumber

								if (!GlobalTradeItemNumber exists
								and !SourcingEventLine.ItemType.Service)
									constraint (ManufacturerInformation.Manufacturer.ManufacturerCode entered)
										"ManufacturerCodeIsRequired"				
									constraint (ManufacturerInformation.ManufacturerNumber entered)
										"ManufacturerNumberIsRequired"
								
								if (PovendoritemRel exists)
									constraint (GlobalTradeItemNumber exists)
										"GTINDoesNotExist;MustMaintainOnItemMaster"

				        	if (ItemNumber exists
				        	and ManufacturerInformation entered)
				        		if (GTINsByManufRel exists)
				        			if (GlobalTradeItemNumber entered)
					        			constraint (GlobalTradeItemNumber = GTINsByManufRel.ItemGTIN)
					        				"GTIN<GlobalTradeItemNumber>DoesNotMatchExistingGTINForThisItem,ManufacturerInformation,AndUOM"

					Exit Rules
						invoke Update Submitted UpdateNegotiatedFlagRel
							invoked.TermsHaveBeenNegotiated				= TermsHaveBeenNegotiated

						if (SourcingEvent.ShowResponsesNotViewed)
							invoke MarkResponsesAsViewed SourcingEvent	

 				AwardLineNewPO is an Update Action
 					valid when (AwardLineValidForNewPO)
 					Action Rules
						constraint (SomeAwardQuantity)
							"AnAwardQuantityMustBeEntered"
						
						if (SourcingEvent.RequireBidBond)
 							constraint (SourcingEventResponse.BidBondValidated)
 								"CannotAward;ABidBondIsRequiredAndHasNotBeenProvidedOrValidated;IfAPaperBidBondHasBeenProvided,IndicateOnResponsesBySupplier"
						
						if (SourcingEvent.ResponsesNeedBuyerScoring)
	 							
							if (!SourcingEvent.PastBuyerWeightingDate)
								constraint (!SourcingEvent.IncompleteBuyerScoringEdit.HardEditAtAwardTime)
									"CannotAwardUntilBuyerScoringHasBeenCompletedOnAllResponses."
							else
								constraint (!SourcingEvent.IncompleteBuyerScoringEdit.HardEditAtAwardTime)
									"CannotAwardUntilBuyerScoringHasBeenCompletedOnAllResponses;FinalBuyerWeightingDateHasPassed;MustExtendBuyerWeightingDateToEnterMissingResponses."	

 							if (SourcingEvent.IncompleteBuyerScoringEdit.SoftEditAtAwardTime)
 								confirmation required
 									"BuyerScoringHasNotBeenCompletedOnAllResponses.AreYouSureYouWantToAwardToThisSupplier?"
						if (SourcingEventResponse.RequestToNegotiateTerms
						and !TermsHaveBeenNegotiated)
							confirmation required
								"SupplierChoseToNegotiateTerms;AreYouSureYouWantToAwardToThisSupplier?"
						if (AwardQuantity > 0)
							constraint (!ResponseAmount.NoBid)
								"SupplierRespondedWithNoBid;CannotAward"

						if (SourcingEventResponse.RequiredQuestions exists
						or  SourcingEventResponse.RequiredSupplierQuestionsExists)

							if  (!SourcingEvent.AllowsConditionalQuestions)
								constraint (SourcingEventResponse.AllHeaderQuestionsAnswered)
									"MustAnswerAllRequiredQuestionsForEvent"
							else
							if  (SourcingEvent.AllowsConditionalQuestions)
								constraint ((SourcingEventResponse.SourcingEventNotifiedSupplierQuestionsExists
									and      SourcingEventResponse.AllHeaderConditionalNotifiedQuestionsAnswered)	
									or      (SourcingEventResponse.SourcingEventPortalSupplierQuestionsExists
									and      SourcingEventResponse.AllHeaderConditionalQuestionsAnswered))
										"MustAnswerAllRequiredQuestionsForEvent"

						if  (!SourcingEvent.AllowsConditionalQuestions)
							for each LineQuestionsThatAreRequiredRel
								LocalSourcingEventLine				= each.SourcingEventLine
								LocalSourcingEventLineQuestion		= each.SourcingEventLineQuestion
								constraint (LineQuestionsRequiredResponse exists)
									"MustAnswerAllRequiredQuestions;EventLine:<LocalSourcingEventLine>,Question:<LocalSourcingEventLineQuestion>"
						else
						if  (SourcingEvent.AllowsConditionalQuestions)
							for each LineSupplierQuestionsThatAreRequiredRel
								LocalSourcingEventLine				= each.SourcingEventLine
								LocalSourcingEventLineQuestion		= each.SourcingEventLineQuestion
								constraint (LineSupplierQuestionsRequiredResponse exists)
									"MustAnswerAllRequiredQuestions;EventLine:<LocalSourcingEventLine>,Question:<LocalSourcingEventLineQuestion>"

						AwardDate	= current timestamp
						AwardByUser = actor

				        initialize PurchaseOrder
				        initialize LocalPoCode
				        initialize ParaPoCode

						ParaPoCode = POCode

						if (PoCodeRel exists)
							if (ParaPoCode entered)
								if (first PoCodeRel.POCode != ParaPoCode)
									confirmation required
										"ManuallyEnteredPurchaseOrderPOCode<ParaPoCode>OnLine<SourcingEventLine>ForSupplier<NotifiedSupplier.Supplier>DoesNotMatchPOCode<first PoCodeRel.POCode>OnOriginalRequisition-ManuallyEnteredPOCodeWillBeUsed;DoYouWishToContinue?"

						SavedPurchaseOrder = PurchaseOrder
						PurchaseOrder = SavedPurchaseOrder
						
						if (SourcingEventResponse.CurrencyCode !entered)
							invoke Submitted.Update SourcingEventResponse
								if (OutputCurrency entered)
									invoked.CurrencyCode = OutputCurrency
								else
									invoked.CurrencyCode = SourcingEvent.CurrencyCode

					Field Rules 
						AwardQuantity
							constraint (AwardQuantity <= SourcingEventLine.Quantity)
								"AwardQuantityMustBeLessThanOrEqualToLineQuantity"
							constraint (AwardQuantity <= Quantity)
								"AwardQuantityCannotBeGreaterThanResponseQuantity"
							if (SourcingEventLine.ServiceCode.Amount)
								constraint (AwardQuantity = 1)
									"AwardQuantityMustBeOneForAmountServiceItem"
							if (VendorItem exists)
								if (VendorItem.MinimumOrderQuantity entered)
									if (VendorItem.VendorBuyUOM not entered
									or  VendorItem.VendorBuyUOM = UOM)
										constraint (AwardQuantity >= VendorItem.MinimumOrderQuantity)
											"VendorItemHasMinimumQuantityPer_POLineOf<VendorItem.MinimumOrderQuantity>"
									else
										initialize UOMCalculation
    									UOMCalculation.InputUOM 		= UOM
    									UOMCalculation.InputToUOM		= VendorItem.VendorBuyUOM
    									UOMCalculation.InputQuantity	= AwardQuantity
    									UOMCalculation.Method			= UOMCalculation.Method.ConvertToAlternate
    									constraint (UOMCalculation.OutputQuantity >= VendorItem.MinimumOrderQuantity)
											"ConvertedAwardQuantityToVendorBuyUOMOf<LocalBuyUomQuantity>_<VendorItem.VendorBuyUOM>DoesNotMeetTheVendorItemMinimumQuantityPer_POLineOf<VendorItem.MinimumOrderQuantity>"

						AwardReason
    						required

    					VendorItem
					        if (VendorItem entered)
						        if (SourcingEventLine.OutputType.PO)
							        if (SourcingEventLine.ItemType.Inventoried
							        or  SourcingEventLine.ItemType.NonStock)
										constraint (!VenItemRel exists)
											"VendorItem<VendorItem>AlreadyAssignedToDifferentItemOnLineNumber<first VenItemRel.SourcingEventLine>"
										constraint (!VenAlternateItemRel exists)
											"VendorItem<VendorItem>AlreadyAssignedToDifferentItemOnLineNumber<first VenAlternateItemRel.SourcingEventLine>SeeAlternateResponsesBySupplier"
								        if (VendorItemDefault exists)   
											constraint (VendorItemByItemRel exists)
												"VendorItem<VendorItem>NotAValidVendorItemForItem<ItemNumber>"
											constraint (VendorItem.Active)
												"VendorItem<VendorItem>IsInactive"
	
								if (VendorItem.VendorPriceUOM entered
								and VendorItem.VendorBuyUOM entered)
									constraint (VendorItem.VendorPriceUOM = UOM)
										"PriceUOMOf<VendorItem.VendorPriceUOM.UnitOfMeasure>ForVendorItem<VendorItem>DoesNotMatchResponseUOMOf<UOM.UnitOfMeasure>"
								else
								if (VendorItem.VendorBuyUOM entered
								and !SourcingEventLine.OutputType.PO)
									constraint (VendorItem.VendorBuyUOM = UOM)
										"BuyUOMOf<VendorItem.VendorBuyUOM.UnitOfMeasure>ForVendorItem<VendorItem>DoesNotMatchResponseUOMOf<UOM.UnitOfMeasure>"
								else
								if (VendorItem.VendorPriceUOM entered)
									constraint (VendorItem.VendorPriceUOM = UOM)
										"PriceUOMOf<VendorItem.VendorPriceUOM.UnitOfMeasure>ForVendorItem<VendorItem>DoesNotMatchResponseUOMOf<UOM.UnitOfMeasure>"

							if (!GlobalTradeItemNumber entered)
								if (GTINsByManufRel exists)
									GlobalTradeItemNumber = first GTINsByManufRel.ItemGTIN

						DeliveryDateOverride
				    		constraint (DeliveryDateOverride >= current corporate date)
				    			"DeliveryDateCannotBeBeforeCurrentDate"
				    		if (!DeliveryDateOverride entered
							and !SourcingEventLine.ItemType.Service
							and  ResponseExists)
								constraint (DeliveryDateOverride entered)
									"DeliveryDateIsRequired"
									
						GlobalTradeItemNumber
							if (GlobalTradeItemNumber entered
							and GlobalTradeItemNumber !exists)
								initialize GTINCheckDigit
								GTINCheckDigit.ItemGTIN		= GlobalTradeItemNumber
								LocalValidCheckDigit        = GTINCheckDigit.ValidCheckDigit
								constraint (LocalValidCheckDigit = true)
									"GTINCheckDigitIsInvalid"

								constraint (!ItemGTINItemMismatchRel exists)
									"GTIN<GlobalTradeItemNumber>IsAlreadyAssociatedWithADifferentItem;EnterCorrectGTINOrEnterAVendorItem"

								if (GlobalTradeItemNumber exists)
									constraint (GlobalTradeItemNumber.UnitOfMeasure = SourcingEventLine.UOM)
										"UOMMustBeTheSameOnGTINAndSourcingEventLine"
									constraint (GlobalTradeItemNumber.Active)
										"GTIN<GlobalTradeItemNumber>IsInactive"
									if (PovendoritemRel exists)
										constraint (GlobalTradeItemNumber.Manufacturer.ManufacturerCode 	= 	PovendoritemRel.Manufacturer.ManufacturerCode
										and         GlobalTradeItemNumber.Manufacturer.ManufacturerDivision = 	PovendoritemRel.Manufacturer.ManufacturerDivision
										and         GlobalTradeItemNumber.ManufacturerNumber 				= 	PovendoritemRel.ManufacturerNumber)
											"ManufacturerInformationOnGTIN<GlobalTradeItemNumber>MustBeTheSameAsManufacturerInformationOnVendorItem<VendorItem>"

									if (SourcingEventLine.ManufacturerInformation entered)
										constraint (GlobalTradeItemNumber.Manufacturer.ManufacturerCode 		=	SourcingEventLine.ManufacturerInformation.Manufacturer.ManufacturerCode
										and         GlobalTradeItemNumber.Manufacturer.ManufacturerDivision 	= 	SourcingEventLine.ManufacturerInformation.Manufacturer.ManufacturerDivision
										and         GlobalTradeItemNumber.ManufacturerNumber 					= 	SourcingEventLine.ManufacturerInformation.ManufacturerNumber)
											"ManufacturerInformationMustBeTheSameOnGTIN<GlobalTradeItemNumber>AndSourcingEventLine"

									ManufacturerInformation.Manufacturer.ManufacturerCode		= GlobalTradeItemNumber.Manufacturer.ManufacturerCode
									ManufacturerInformation.Manufacturer.ManufacturerDivision	= GlobalTradeItemNumber.Manufacturer.ManufacturerDivision
									ManufacturerInformation.ManufacturerNumber					= GlobalTradeItemNumber.ManufacturerNumber

				        	if (ItemNumber exists
				        	and ManufacturerInformation entered)
				        		if (GTINsByManufRel exists)
				        			if (GlobalTradeItemNumber entered)
					        			constraint (GlobalTradeItemNumber = GTINsByManufRel.ItemGTIN)
					        				"GTIN<GlobalTradeItemNumber>DoesNotMatchExistingGTINForThisItem,ManufacturerInformation,AndUOM"

							if (SourcingEventLine.ItemNumber exists)
								if (GlobalTradeItemNumber entered)
									constraint (GlobalTradeItemNumber exists)
										"GTIN<GlobalTradeItemNumber>DoesNotExist;MustMaintainOnItemMaster"

					Exit Rules
						invoke Update Submitted UpdateNegotiatedFlagRel
							invoked.TermsHaveBeenNegotiated				= TermsHaveBeenNegotiated

						if (SourcingEvent.ShowResponsesNotViewed)
							invoke MarkResponsesAsViewed SourcingEvent	

 				AwardLineAppendToPO is an Update Action
 					valid when (AwardLineValidForExistingPO)
 					Action Rules
						constraint (SomeAwardQuantity)
							"AnAwardQuantityMustBeEntered"
						
						for each SourcingEventLineResponseHeaderAOCRel
							LocalAddOnCharge = each.AOC
							constraint (!AddOnChargeAlreadyExists)
								"CannotAppendToPOWhereAddOnChargeOnResponseAlreadyExistsOnPOHeader"
						
						for each LineSourceRel
							if (each.HasProcessLevel
							and PurchaseOrder.ProcessLevel entered)
								constraint (each.RequestingLocationProcessLevel = PurchaseOrder.ProcessLevel)
									"CannotAppendToPO;PurchaseOrderProcessLevelAndRequestingLocationProcessLevelAreDifferent"
							if (each.HasProcessLevel)
								constraint (PurchaseOrder.ProcessLevel entered)
									"CannotAppendToPO;RequestingLocationHasProcessLevelAndPurchaseOrderHasNoProcessLevel"
						
						if (SourcingEvent.RequireBidBond)
 							constraint (SourcingEventResponse.BidBondValidated)
 								"CannotAward;ABidBondIsRequiredAndHasNotBeenProvidedOrValidated;IfAPaperBidBondHasBeenProvided,IndicateOnResponsesBySupplier"
						
						if (SourcingEvent.ResponsesNeedBuyerScoring)
	 							
							if (!SourcingEvent.PastBuyerWeightingDate)
								constraint (!SourcingEvent.IncompleteBuyerScoringEdit.HardEditAtAwardTime)
									"CannotAwardUntilBuyerScoringHasBeenCompletedOnAllResponses."
							else
								constraint (!SourcingEvent.IncompleteBuyerScoringEdit.HardEditAtAwardTime)
									"CannotAwardUntilBuyerScoringHasBeenCompletedOnAllResponses;FinalBuyerWeightingDateHasPassed;MustExtendBuyerWeightingDateToEnterMissingResponses."	

 							if (SourcingEvent.IncompleteBuyerScoringEdit.SoftEditAtAwardTime)
 								confirmation required
 									"BuyerScoringHasNotBeenCompletedOnAllResponses.AreYouSureYouWantToAwardToThisSupplier?"
						if (SourcingEventResponse.RequestToNegotiateTerms
						and !TermsHaveBeenNegotiated)
							confirmation required
								"SupplierChoseToNegotiateTerms;AreYouSureYouWantToAwardToThisSupplier?"
						if (AwardQuantity > 0)
							constraint (!ResponseAmount.NoBid)
								"SupplierRespondedWithNoBid;CannotAward"
						if (SourcingEventLine.OutputType.Service)
							constraint (!ResponseAmount.NoCharge)
								"SupplierRespondedWithNoCharge;OutputTypeServiceRequiresACostAmount;CannotAward"

						if (SourcingEventResponse.RequiredQuestions exists
						or  SourcingEventResponse.RequiredSupplierQuestionsExists)

							if  (!SourcingEvent.AllowsConditionalQuestions)
								constraint (SourcingEventResponse.AllHeaderQuestionsAnswered)
									"MustAnswerAllRequiredQuestionsForEvent"
							else
							if  (SourcingEvent.AllowsConditionalQuestions)
								constraint ((SourcingEventResponse.SourcingEventNotifiedSupplierQuestionsExists
									and      SourcingEventResponse.AllHeaderConditionalNotifiedQuestionsAnswered)	
									or      (SourcingEventResponse.SourcingEventPortalSupplierQuestionsExists
									and      SourcingEventResponse.AllHeaderConditionalQuestionsAnswered))
										"MustAnswerAllRequiredQuestionsForEvent"

						if  (!SourcingEvent.AllowsConditionalQuestions)
							for each LineQuestionsThatAreRequiredRel
								LocalSourcingEventLine				= each.SourcingEventLine
								LocalSourcingEventLineQuestion		= each.SourcingEventLineQuestion
								constraint (LineQuestionsRequiredResponse exists)
									"MustAnswerAllRequiredQuestions;EventLine:<LocalSourcingEventLine>,Question:<LocalSourcingEventLineQuestion>"
						else
						if  (SourcingEvent.AllowsConditionalQuestions)
							for each LineSupplierQuestionsThatAreRequiredRel
								LocalSourcingEventLine				= each.SourcingEventLine
								LocalSourcingEventLineQuestion		= each.SourcingEventLineQuestion
								constraint (LineSupplierQuestionsRequiredResponse exists)
									"MustAnswerAllRequiredQuestions;EventLine:<LocalSourcingEventLine>,Question:<LocalSourcingEventLineQuestion>"

						AwardDate	= current timestamp
						AwardByUser = actor
						
						ParaPoCode = PurchaseOrder.POCode

						if (PoCodeRel exists)
							if (ParaPoCode entered)
								if (first PoCodeRel.POCode != ParaPoCode)
									confirmation required
										"PurchaseOrderPOCode<ParaPoCode>OnLine<SourcingEventLine>ForSupplier<NotifiedSupplier.Supplier>DoesNotMatchPOCode<first PoCodeRel.POCode>OnOriginalRequisition-ManuallyEnteredPOCodeWillBeUsed;DoYouWishToContinue?"

					Field Rules 
						AwardQuantity
							constraint (AwardQuantity <= SourcingEventLine.Quantity)
								"AwardQuantityMustBeLessThanOrEqualToLineQuantity"
							constraint (AwardQuantity <= Quantity)
								"AwardQuantityCannotBeGreaterThanResponseQuantity"
							if (SourcingEventLine.ServiceCode.Amount)
								constraint (AwardQuantity = 1)
									"AwardQuantityMustBeOneForAmountServiceItem" 
							if (VendorItem exists)
								if (VendorItem.MinimumOrderQuantity entered)
									if (VendorItem.VendorBuyUOM not entered
									or  VendorItem.VendorBuyUOM = UOM)
										constraint (AwardQuantity >= VendorItem.MinimumOrderQuantity)
											"VendorItemHasMinimumQuantityPer_POLineOf<VendorItem.MinimumOrderQuantity>"
									else
										initialize UOMCalculation
    									UOMCalculation.InputUOM 		= UOM
    									UOMCalculation.InputToUOM		= VendorItem.VendorBuyUOM
    									UOMCalculation.InputQuantity	= AwardQuantity
    									UOMCalculation.Method			= UOMCalculation.Method.ConvertToAlternate
    									constraint (UOMCalculation.OutputQuantity >= VendorItem.MinimumOrderQuantity)
											"ConvertedAwardQuantityToVendorBuyUOMOf<LocalBuyUomQuantity>_<VendorItem.VendorBuyUOM>DoesNotMeetTheVendorItemMinimumQuantityPer_POLineOf<VendorItem.MinimumOrderQuantity>"						        		

						AwardReason
    						required

    					VendorItem
							if (VendorItem entered)
						        if (SourcingEventLine.OutputType.PO)
							        if (SourcingEventLine.ItemType.Inventoried
							        or  SourcingEventLine.ItemType.NonStock)
										constraint (!VenItemRel exists)
											"VendorItem<VendorItem>AlreadyAssignedToDifferentItemOnLineNumber<first VenItemRel.SourcingEventLine>"
										constraint (!VenAlternateItemRel exists)
											"VendorItem<VendorItem>AlreadyAssignedToDifferentItemOnLineNumber<first VenAlternateItemRel.SourcingEventLine>SeeAlternateResponsesBySupplier"
								        if (VendorItemDefault exists)   
											constraint (VendorItemByItemRel exists)
												"VendorItem<VendorItem>NotAValidVendorItemForItem<ItemNumber>"
											constraint (VendorItem.Active)
												"VendorItem<VendorItem>IsInactive"

								if (VendorItem.VendorPriceUOM entered
								and VendorItem.VendorBuyUOM entered)
									constraint (VendorItem.VendorPriceUOM = UOM)
										"PriceUOMOf<VendorItem.VendorPriceUOM.UnitOfMeasure>ForVendorItem<VendorItem>DoesNotMatchResponseUOMOf<UOM.UnitOfMeasure>"
								else
								if (VendorItem.VendorBuyUOM entered
								and !SourcingEventLine.OutputType.PO)
									constraint (VendorItem.VendorBuyUOM = UOM)
										"BuyUOMOf<VendorItem.VendorBuyUOM.UnitOfMeasure>ForVendorItem<VendorItem>DoesNotMatchResponseUOMOf<UOM.UnitOfMeasure>"
								else
								if (VendorItem.VendorPriceUOM entered)
									constraint (VendorItem.VendorPriceUOM = UOM)
										"PriceUOMOf<VendorItem.VendorPriceUOM.UnitOfMeasure>ForVendorItem<VendorItem>DoesNotMatchResponseUOMOf<UOM.UnitOfMeasure>"

							if (!GlobalTradeItemNumber entered)
								if (GTINsByManufRel exists)
									GlobalTradeItemNumber = first GTINsByManufRel.ItemGTIN

						PurchaseOrder

							constraint (!PurchaseOrder.Closed.Yes)
								"CannotAppendToPurchaseOrderThatIsAlreadyClosed"
							constraint (!PurchaseOrder.Canceled)
								"CannotAppendToPurchaseOrderThatIsCancelled"
							constraint (PurchaseOrder.Vendor    = NotifiedSupplier.Supplier.Vendor)
                           		"PurchaseOrderIsSetupForADifferentVendor"
		    				constraint (PurchaseOrderRel.PurchaseFromLocation = NotifiedSupplier.SupplierSourceId.VendorLocation)
                           		"PurchaseOrderIsSetupForADifferentVendorLocation"
							if (DropShipAddressRel exists)
		    					constraint (first DropShipAddressRel.RequisitionHeaderRel.DropshipAddress = PurchaseOrder.DropshipAddress)
									"CannotAppendToAnExistingPurchaseOrderWithDifferentDropshipAddress"	

						DeliveryDateOverride
				    		constraint (DeliveryDateOverride >= current corporate date)
				    			"DeliveryDateCannotBeBeforeCurrentDate"
				    		if (!DeliveryDateOverride entered
							and !SourcingEventLine.ItemType.Service
							and  ResponseExists)
								constraint (DeliveryDateOverride entered)
									"DeliveryDateIsRequired"
									
						GlobalTradeItemNumber
							if (GlobalTradeItemNumber entered
							and GlobalTradeItemNumber !exists)
								initialize GTINCheckDigit
								GTINCheckDigit.ItemGTIN		= GlobalTradeItemNumber
								LocalValidCheckDigit        = GTINCheckDigit.ValidCheckDigit
								constraint (LocalValidCheckDigit = true)
									"GTINCheckDigitIsInvalid"

								constraint (!ItemGTINItemMismatchRel exists)
									"GTIN<GlobalTradeItemNumber>IsAlreadyAssociatedWithADifferentItem;EnterCorrectGTINOrEnterAVendorItem"

								if (GlobalTradeItemNumber exists)
									constraint (GlobalTradeItemNumber.UnitOfMeasure = SourcingEventLine.UOM)
										"UOMMustBeTheSameOnGTINAndSourcingEventLine"
									constraint (GlobalTradeItemNumber.Active)
										"GTIN<GlobalTradeItemNumber>IsInactive"
									if (PovendoritemRel exists)
										constraint (GlobalTradeItemNumber.Manufacturer.ManufacturerCode 	= 	PovendoritemRel.Manufacturer.ManufacturerCode
										and         GlobalTradeItemNumber.Manufacturer.ManufacturerDivision = 	PovendoritemRel.Manufacturer.ManufacturerDivision
										and         GlobalTradeItemNumber.ManufacturerNumber 				= 	PovendoritemRel.ManufacturerNumber)
											"ManufacturerInformationOnGTIN<GlobalTradeItemNumber>MustBeTheSameAsManufacturerInformationOnVendorItem<VendorItem>"

									if (SourcingEventLine.ManufacturerInformation entered)
										constraint (GlobalTradeItemNumber.Manufacturer.ManufacturerCode 		=	SourcingEventLine.ManufacturerInformation.Manufacturer.ManufacturerCode
										and         GlobalTradeItemNumber.Manufacturer.ManufacturerDivision 	= 	SourcingEventLine.ManufacturerInformation.Manufacturer.ManufacturerDivision
										and         GlobalTradeItemNumber.ManufacturerNumber 					= 	SourcingEventLine.ManufacturerInformation.ManufacturerNumber)
											"ManufacturerInformationMustBeTheSameOnGTIN<GlobalTradeItemNumber>AndSourcingEventLine"

									ManufacturerInformation.Manufacturer.ManufacturerCode		= GlobalTradeItemNumber.Manufacturer.ManufacturerCode
									ManufacturerInformation.Manufacturer.ManufacturerDivision	= GlobalTradeItemNumber.Manufacturer.ManufacturerDivision
									ManufacturerInformation.ManufacturerNumber					= GlobalTradeItemNumber.ManufacturerNumber

				        	if (ItemNumber exists
				        	and ManufacturerInformation entered)
				        		if (GTINsByManufRel exists)
				        			if (GlobalTradeItemNumber entered)
					        			constraint (GlobalTradeItemNumber = GTINsByManufRel.ItemGTIN)
					        				"GTIN<GlobalTradeItemNumber>DoesNotMatchExistingGTINForThisItem,ManufacturerInformation,AndUOM"

							if (SourcingEventLine.ItemNumber exists)
								if (GlobalTradeItemNumber entered)
									constraint (GlobalTradeItemNumber exists)
										"GTIN<GlobalTradeItemNumber>DoesNotExist;MustMaintainOnItemMaster"

					Exit Rules
						invoke Update Submitted UpdateNegotiatedFlagRel
							invoked.TermsHaveBeenNegotiated				= TermsHaveBeenNegotiated
				    	
						if (SourcingEvent.ShowResponsesNotViewed)
							invoke MarkResponsesAsViewed SourcingEvent	

				AwardLineNoOutput is an Update Action
 					valid when (AwardLineValidForNoOutput)
 					Action Rules
						constraint (SomeAwardQuantity)
							"AnAwardQuantityMustBeEntered"
						
						if (SourcingEvent.RequireBidBond)
 							constraint (SourcingEventResponse.BidBondValidated)
 								"CannotAward;ABidBondIsRequiredAndHasNotBeenProvidedOrValidated;IfAPaperBidBondHasBeenProvided,IndicateOnResponsesBySupplier"
						
						if (SourcingEvent.ResponsesNeedBuyerScoring)

							if (!SourcingEvent.PastBuyerWeightingDate)
								constraint (!SourcingEvent.IncompleteBuyerScoringEdit.HardEditAtAwardTime)
									"CannotAwardUntilBuyerScoringHasBeenCompletedOnAllResponses."
							else
								constraint (!SourcingEvent.IncompleteBuyerScoringEdit.HardEditAtAwardTime)
									"CannotAwardUntilBuyerScoringHasBeenCompletedOnAllResponses;FinalBuyerWeightingDateHasPassed;MustExtendBuyerWeightingDateToEnterMissingResponses."	
	 							
 							if (SourcingEvent.IncompleteBuyerScoringEdit.SoftEditAtAwardTime)
 								confirmation required
 									"BuyerScoringHasNotBeenCompletedOnAllResponses.AreYouSureYouWantToAwardToThisSupplier?"
						if (SourcingEventResponse.RequestToNegotiateTerms
						and !TermsHaveBeenNegotiated)
							confirmation required
								"SupplierChoseToNegotiateTerms;AreYouSureYouWantToAwardToThisSupplier?"
						if (AwardQuantity > 0)
							constraint (!ResponseAmount.NoBid)
								"SupplierRespondedWithNoBid;CannotAward"
						if (SourcingEventLine.OutputType.Service)
							constraint (!ResponseAmount.NoCharge)
								"SupplierRespondedWithNoCharge;OutputTypeServiceRequiresACostAmount;CannotAward"

						AwardDate	= current timestamp
						AwardByUser = actor
						
					Field Rules 
						AwardQuantity
							constraint (AwardQuantity <= SourcingEventLine.Quantity)
								"AwardQuantityMustBeLessThanOrEqualToLineQuantity"
							constraint (AwardQuantity <= Quantity)
								"AwardQuantityCannotBeGreaterThanResponseQuantity"
							if (SourcingEventLine.ServiceCode.Amount)
								constraint (AwardQuantity = 1)
									"AwardQuantityMustBeOneForAmountServiceItem" 
							if (VendorItem exists)
								if (VendorItem.MinimumOrderQuantity entered)
									if (VendorItem.VendorBuyUOM not entered
									or  VendorItem.VendorBuyUOM = UOM)
										constraint (AwardQuantity >= VendorItem.MinimumOrderQuantity)
											"VendorItemHasMinimumQuantityPer_POLineOf<VendorItem.MinimumOrderQuantity>"
									else
										initialize UOMCalculation
    									UOMCalculation.InputUOM 		= UOM
    									UOMCalculation.InputToUOM		= VendorItem.VendorBuyUOM
    									UOMCalculation.InputQuantity	= AwardQuantity
    									UOMCalculation.Method			= UOMCalculation.Method.ConvertToAlternate
    									constraint (UOMCalculation.OutputQuantity >= VendorItem.MinimumOrderQuantity)
											"ConvertedAwardQuantityToVendorBuyUOMOf<LocalBuyUomQuantity>_<VendorItem.VendorBuyUOM>DoesNotMeetTheVendorItemMinimumQuantityPer_POLineOf<VendorItem.MinimumOrderQuantity>"						        		

						AwardReason
    						required

    					VendorItem
							if (VendorItem entered)

								if (VendorItem.VendorPriceUOM entered
								and VendorItem.VendorBuyUOM entered)
									constraint (VendorItem.VendorPriceUOM = UOM)
										"PriceUOMOf<VendorItem.VendorPriceUOM.UnitOfMeasure>ForVendorItem<VendorItem>DoesNotMatchResponseUOMOf<UOM.UnitOfMeasure>"
								else
								if (VendorItem.VendorBuyUOM entered
								and !SourcingEventLine.OutputType.PO)
									constraint (VendorItem.VendorBuyUOM = UOM)
										"BuyUOMOf<VendorItem.VendorBuyUOM.UnitOfMeasure>ForVendorItem<VendorItem>DoesNotMatchResponseUOMOf<UOM.UnitOfMeasure>"
								else
								if (VendorItem.VendorPriceUOM entered)
									constraint (VendorItem.VendorPriceUOM = UOM)
										"PriceUOMOf<VendorItem.VendorPriceUOM.UnitOfMeasure>ForVendorItem<VendorItem>DoesNotMatchResponseUOMOf<UOM.UnitOfMeasure>"

							if (!GlobalTradeItemNumber entered)
								if (GTINsByManufRel exists)
									GlobalTradeItemNumber = first GTINsByManufRel.ItemGTIN

						GlobalTradeItemNumber
							if (GlobalTradeItemNumber entered
							and GlobalTradeItemNumber !exists)
								initialize GTINCheckDigit
								GTINCheckDigit.ItemGTIN		= GlobalTradeItemNumber
								LocalValidCheckDigit        = GTINCheckDigit.ValidCheckDigit
								constraint (LocalValidCheckDigit = true)
									"GTINCheckDigitIsInvalid"

								constraint (!ItemGTINItemMismatchRel exists)
									"GTIN<GlobalTradeItemNumber>IsAlreadyAssociatedWithADifferentItem;EnterCorrectGTINOrEnterAVendorItem"

								if (GlobalTradeItemNumber exists)
									constraint (GlobalTradeItemNumber.UnitOfMeasure = SourcingEventLine.UOM)
										"UOMMustBeTheSameOnGTINAndSourcingEventLine"
									constraint (GlobalTradeItemNumber.Active)
										"GTIN<GlobalTradeItemNumber>IsInactive"
									if (PovendoritemRel exists)
										constraint (GlobalTradeItemNumber.Manufacturer.ManufacturerCode 	= 	PovendoritemRel.Manufacturer.ManufacturerCode
										and         GlobalTradeItemNumber.Manufacturer.ManufacturerDivision = 	PovendoritemRel.Manufacturer.ManufacturerDivision
										and         GlobalTradeItemNumber.ManufacturerNumber 				= 	PovendoritemRel.ManufacturerNumber)
											"ManufacturerInformationOnGTIN<GlobalTradeItemNumber>MustBeTheSameAsManufacturerInformationOnVendorItem<VendorItem>"

									if (SourcingEventLine.ManufacturerInformation entered)
										constraint (GlobalTradeItemNumber.Manufacturer.ManufacturerCode 		=	SourcingEventLine.ManufacturerInformation.Manufacturer.ManufacturerCode
										and         GlobalTradeItemNumber.Manufacturer.ManufacturerDivision 	= 	SourcingEventLine.ManufacturerInformation.Manufacturer.ManufacturerDivision
										and         GlobalTradeItemNumber.ManufacturerNumber 					= 	SourcingEventLine.ManufacturerInformation.ManufacturerNumber)
											"ManufacturerInformationMustBeTheSameOnGTIN<GlobalTradeItemNumber>AndSourcingEventLine"

									ManufacturerInformation.Manufacturer.ManufacturerCode		= GlobalTradeItemNumber.Manufacturer.ManufacturerCode
									ManufacturerInformation.Manufacturer.ManufacturerDivision	= GlobalTradeItemNumber.Manufacturer.ManufacturerDivision
									ManufacturerInformation.ManufacturerNumber					= GlobalTradeItemNumber.ManufacturerNumber

				        	if (ItemNumber exists
				        	and ManufacturerInformation entered)
				        		if (GTINsByManufRel exists)
				        			if (GlobalTradeItemNumber entered)
					        			constraint (GlobalTradeItemNumber = GTINsByManufRel.ItemGTIN)
					        				"GTIN<GlobalTradeItemNumber>DoesNotMatchExistingGTINForThisItem,ManufacturerInformation,AndUOM"

							if (SourcingEventLine.ItemNumber exists)
								if (GlobalTradeItemNumber entered)
									constraint (GlobalTradeItemNumber exists)
										"GTIN<GlobalTradeItemNumber>DoesNotExist;MustMaintainOnItemMaster"

					Exit Rules
						invoke Update Submitted UpdateNegotiatedFlagRel
							invoked.TermsHaveBeenNegotiated				= TermsHaveBeenNegotiated
				
						if (SourcingEvent.ShowResponsesNotViewed)
							invoke MarkResponsesAsViewed SourcingEvent	

				DeleteAward is an Instance Action
					valid when (DeleteAwardValid)
					confirmation required
					Action Rules
						constraint (SourcingEventLine.Status.Open)
							"CannotChangeAwardAfterLineHasBeenAwarded"

				    	initialize EffectiveDate			
				    	initialize ExpirationDate			
				    	initialize ScheduleFrequency		
				    	initialize MaxReleaseNumber		
				    	initialize LifetimeMaxQuantity
						initialize ParticipantGroup
				    	initialize Participant
				    	initialize AwardReason				
				    	initialize LifetimeMaximumAmount
				    	initialize AwardQuantity			
				    	initialize AwardForContract
				    	initialize AwardDate 				
				    	initialize AwardByUser
				    	initialize PurchaseOrder
				    	initialize Contract
						initialize ContractType					
						initialize ContractSubtype					
						initialize ContractClassification			
						initialize ContractSubclassification
						initialize TermsHaveBeenNegotiated
				    	
				    	if (SourcingEventLine.AllowAlternateResponses)
				    		initialize AlternateResponseArray.AlternateResponseOccurs.AlternateResponseDetails[1].AwardQuantity
							initialize AlternateResponseArray.AlternateResponseOccurs.AlternateResponseDetails[1].AwardForContract	
							initialize AlternateResponseArray.AlternateResponseOccurs.AlternateResponseDetails[2].AwardQuantity
							initialize AlternateResponseArray.AlternateResponseOccurs.AlternateResponseDetails[2].AwardForContract	
							initialize AlternateResponseArray.AlternateResponseOccurs.AlternateResponseDetails[3].AwardQuantity
							initialize AlternateResponseArray.AlternateResponseOccurs.AlternateResponseDetails[3].AwardForContract	
							initialize AlternateResponseArray.AlternateResponseOccurs.AlternateResponseDetails[4].AwardQuantity
							initialize AlternateResponseArray.AlternateResponseOccurs.AlternateResponseDetails[4].AwardForContract	
							initialize AlternateResponseArray.AlternateResponseOccurs.AlternateResponseDetails[5].AwardQuantity
							initialize AlternateResponseArray.AlternateResponseOccurs.AlternateResponseDetails[5].AwardForContract	
				    						
						if (!ResponseAmount.NoBid)
							ContractType 					= SourcingEventLine.DefaultContractType
							ContractSubtype 				= SourcingEventLine.DefaultContractSubType
							ContractClassification			= SourcingEventLine.DefaultContractClass
							ContractSubclassification		= SourcingEventLine.DefaultContractSubClass
							EffectiveDate 					= SourcingEventLine.DefaultEffectiveDate
							ScheduleFrequency 				= SourcingEventLine.DefaultScheduleFrequency
							Participant 					= SourcingEventLine.DefaultParticipant
							ExpirationDate 					= SourcingEventLine.DefaultExpirationDate
							MaxReleaseNumber 				= SourcingEventLine.DefaultMaxReleaseNumber
							
				AwardAll is an Instance Action
					restricted
					Parameters
						Reasoncode 					is an AwardReason
						Termshavebeennegotiated		is Boolean
						Purchaseorder				is a PurchaseOrder
						Deliverydateoverride		is Date
				    	Pocode                      is a POCode
				    	Effectivedate				is Date
				    	Expirationdate				is Date
				    	Schedulefrequency			is a ScheduleFrequency		
				    	Maxreleasenumber			is Numeric size 4
				    	Lifetimemaxquantity			is Numeric size 10
						Awardqtytolifetimemaxqty	is Boolean
				    	Participants				is a Participant
				    	Participantgroups			is a ParticipantGroup
				    	Contracts					is a Contract
				    	Contractarticletitle		is a Description
				    	Contracttype 				is a ContractType					
						Contractsubtype				is a ContractSubtype					
						Contractclassification		is a ContractClassification			
						Contractsubclassification	is a ContractSubclassification
				    			
					Action Rules
						if (SourcingEventLine.Status.Open
						and !ResponseAmount.NoBid)
							if (!ResponseAmount.NoCharge
							or  (ResponseAmount.NoCharge
							and  !SourcingEventLine.OutputType.Service))
								if (!CmData)
									AwardQuantity 			= Quantity
								AwardReason 				= Reasoncode
								TermsHaveBeenNegotiated		= Termshavebeennegotiated
								PurchaseOrder				= Purchaseorder
								if (Deliverydateoverride entered)
									DeliveryDateOverride	= Deliverydateoverride
							    POCode                      = Pocode
							    if (!CmData)
								    if (POCode !entered
								    and LineSourceRel.POCode entered)
								    	POCode = LineSourceRel.POCode
								    else
								    if (POCode !entered
							    	and PurchasingCompanyRel.POCodeDefaultMethod.InventoryLocation)
								    	POCode = SourcingEventLine.ShipTo.POCode
								    else
								    if (POCode !entered
								    and PurchasingCompanyRel.POCodeDefaultMethod.RequestingLocation)
										POCode = TransientRequestingLocation.POCode
								    else
								    if (POCode !entered
								  	and PurchasingCompanyRel.POCodeDefaultMethod.VendorOrVendorLocation)
								  		POCode = PurchasingVendorRel.POCode
								    else
								    if (POCode !entered
								    and PurchasingCompanyRel.POCodeDefaultMethod.BuyerGroup)
								    	POCode = SourcingEvent.Buyer.BuyerGroup.POCode
								    else
								    if (POCode !entered)
								    	if (PurchasingCompanyRel.POCodeDefaultMethod.System)
								    		if (TransientRequestingLocation exists)
								    			POCode = PurchasingCompanyRel.RequisitionsDefaultPOCode
								    		else
								    			POCode = PurchasingCompanyRel.StrategicSourcingDefaultPOCode
							    EffectiveDate				= Effectivedate			
							    ExpirationDate				= Expirationdate			
							    ScheduleFrequency			= Schedulefrequency		
							    MaxReleaseNumber			= Maxreleasenumber		
							    LifetimeMaxQuantity			= Lifetimemaxquantity
								AwardQtyToLifetimeMaxQty	= Awardqtytolifetimemaxqty	
							    Participant					= Participants
							    ParticipantGroup			= Participantgroups
							    Contract					= Contracts
							    ContractType 				= Contracttype					
								ContractSubtype				= Contractsubtype					
								ContractClassification		= Contractclassification			
								ContractSubclassification	= Contractsubclassification
								AwardDate					= current timestamp
								AwardByUser 				= actor
								if (!VendorItem entered	
								and (SourcingEventLine.ItemType.NonStock
								or   SourcingEventLine.ItemType.Inventoried))
									if (VenItemManfDflt exists
									and VenItemManfDflt.ManufacturerNumber entered)
										VendorItem = VenItemManfDflt.VendorItem
									else
									if (VenItemLineManfDflt exists
									and VenItemLineManfDflt.ManufacturerNumber entered)
										VendorItem = VenItemLineManfDflt.VendorItem
									else
									if (!GlobalTradeItemNumber entered)
										if (VendorItemDefault exists)
											VendorItem = VendorItemDefault.VendorItem
								if (CmData)
									AwardForContract   = true
									
				AssignNonAwardReason is an Instance Action
					valid when (NonAwardValid)
					Parameters
						NonAwardReason		is an AwardReason
						
					Parameter Rules 
						NonAwardReason
							required
					
					Action Rules
						AwardReason	= NonAwardReason		
									
				UpdateNonAwardReason is an Instance Action
					valid when (NonAwardReasonEntered)
						
					Parameters
						NonAwardReason		is an AwardReason
						
					Parameter Rules 
						NonAwardReason
							required
							initial value is AwardReason
					
					Action Rules
						AwardReason	= NonAwardReason	
						
				SetInitialCost is an Instance Action
					restricted
					
					Action Rules
						InitialResponseAmount 			= ResponseAmount.UnitPrice
						CurrencyResponseInitialAmount 	= CurrencyResponseUnitPrice						

			Withdrawn is a State
				ReinstateAll is an Instance Action
					restricted
					Action Rules
						make transition to Draft
