BookCalendar is a BusinessClass
    owned by am
    prefix is AMC
    classic name is AMCALENDAR

    Ontology
        symbolic key is BookCalendar
            classic set name is AMCSET1
            classic name for YearEndDate is YR-END-DATE

    Patterns
        implements StaticJava
        disable AuditIndex
		enable explicit context override

    Persistent Fields

        CalendarStatus                    	is AlphaUpper size 1
            classic name is CAL-STATUS
            States
                Current  value is "C"
                Future   value is "F"
                Historic value is "H"
        YearBeginDate                     is Date
            classic name is YR-BEG-DATE
        RequiredBook                      is Boolean
            classic name is REQ-BOOK
        PostingBook                       is Boolean
        DepreciationPeriodsPerYear        is Numeric size 3
            classic name is PD-PER-YR
        ShortYear                         is Boolean
        DepreciationPeriods
            classic name for DepreciationPeriods.DepreciationPeriodNumbers is NBR-DEPR-PD
            classic name for DepreciationPeriods.DepreciationPeriodEndDates is PD-END-DATE
        NumberOfDepreciationPeriodsClosed is Numeric size 3
            sql name is NOfDepreciationPeriodsClosed
            classic name is DEPR-PD-CLS
        NumberOfPeriodCloseRuns           is Numeric size 2
            classic name is DEPR-RUN-CLS
        NumberOfPeriodsInProcess          is a NumberOfFields
            classic name is NBR-PD-INPROC
        InProcessFiscalPeriodEndDate      is Date
            classic name is PD-END-INPROC
        DepreciationCalculated            is Boolean
            classic name is DEPR-CALC-FL
        Used                              is Boolean
        OriginalYearEndDate               is Date
            classic name is ORG-YE-DATE
        CloseBook						  is Numeric 1
            States
                Yes  	value is 0
                No   	value is 1

		MaximumAmount						is an InternationalAmount   
		Total179Property					is an InternationalAmount	
		ReductionThreshold					is an InternationalAmount	
		TotalUnlistedElected				is an InternationalAmount	
		TotalListedElected					is an InternationalAmount	
		PriorYearCarryover					is an InternationalAmount
		BusinessIncome						is an InternationalAmount	
		SpecialDepreciationAllowance		is an InternationalAmount   
		Total168Election					is an InternationalAmount	
		OtherDepreciation					is an InternationalAmount   
		PriorYearMACRSDeductions      		is an InternationalAmount	
  		TotalListedProperty 			   	is an InternationalAmount	
		Section263ACosts					is an InternationalAmount  	
   		SpecialDepreciationPart4 			is an InternationalAmount   
		CurrentYearAssetAmortization		is an InternationalAmount   
		PriorYearAssetAmortization		   	is an InternationalAmount   
		Quarter1							is an InternationalAmount
		Quarter2							is an InternationalAmount
		Quarter3							is an InternationalAmount
		Quarter4							is an InternationalAmount
		ProjectMQ							is an InternationalAmount
		Selected							is Boolean
		DepreciationCalculationStatus       is AlphaUpper size 1
            States
                PendingApproval    value is "S"
                Rejected           value is "R"
                Approved           value is "A"
        ApprovalCode
        ApprovalLevel							is Numeric 8
		Approver								is a FinanceResource
			context of FinanceEnterpriseGroup
		ApproverTeam							is a FinanceTeam
	
		
	Local Fields
		LocalDate					is Date
		LocalArrayCount				is Numeric 3


		LocalPeriodCount			is Numeric 3
		CalendarDateRange 			is a DateRange
		LocalDepreciationPeriods	is Numeric 2


		LocalCurrentYearBeginDate	is Date
		LocalCurrentYearEndDate		is Date


		LocalPeriodEndDate			is Date
		PeriodsClosedEditDone		is Boolean
		LocalCurrentCloseRuns		is Numeric 2
		LocalHistoryCloseRuns		is Numeric 2
		LocalCompany				is like Company
		LocalBook 					is like Book
		LocalLedger					is like Ledger
		LocalOtherDepreciation 		is an InternationalAmount
		LocalTotal179Expense		is an InternationalAmount
		LocalAsset					is like Asset
		LocalUseYearEndDepreciation	is Boolean
		LocalActualAmount			is an InternationalAmount
		CYPurchases					is an InternationalAmount
		LocalBeginDate   			is Date
		LocalEndDate				is Date
		LocalFinanceEnterpriseGroup	is like FinanceEnterpriseGroup
		LocalGeneralLedgerCompanyGroup	is like GeneralLedgerCompanyGroup
		LocalApproverList				is Alpha 250
		LocalApprovalCode				is like ApprovalCode
		LocalApprovalLevel				is Numeric 8
		LocalApprover					is a FinanceResource
			context of FinanceEnterpriseGroup
		LocalApproverTeam				is a FinanceTeam
		LocalFirstApproverAssigned		is Boolean
		LocalComment					is Alpha size up to 500
		
	Rule Blocks
		
		InitiateApprovalProcessFlow
			initiate DepreciationApproval process
				title is "Depreciation_For_The_Period_Ending<BookCalendar.CurrentPeriodDate>For_The_Company<BookCalendar.Company>and_Book<BookCalendar.Book>"
				Variables
					Book
					Company
				URLs
					"<linkback(webapp is JournalApprover navigation is ProcessFlowForm text is \"DepreciationApproval\")>"
		
		GetNextEscalationApprovalLevel
			LocalApprovalCode		= ApprovalCode
			LocalApprovalLevel		= ApprovalLevel
			if (first LocalApprovalCodeLevelRel.EscalateTo.NextApprovalLevel)
				LocalApprovalLevel	= ApprovalLevel + 1
				LocalApprover		= first LocalApprovalCodeLevelRel.Approver
				LocalApproverTeam	= first LocalApprovalCodeLevelRel.ApprovalTeam
			else
				LocalApprovalLevel	= first LocalApprovalCodeLevelRel.EscalationApprovalLevel.ApprovalLevel
				LocalApprover		= first LocalApprovalCodeLevelRel.Approver
				LocalApproverTeam	= first LocalApprovalCodeLevelRel.ApprovalTeam


		
		GetNextApprovalLevel
			if (ApprovalLevel < 1)
				LocalApprovalLevel	= first ApprovalCodeResourceRel.ApprovalLevel
				LocalApprover		= first ApprovalCodeResourceRel.Approver
				LocalApproverTeam	= first ApprovalCodeResourceRel.ApprovalTeam
			else
				LocalApprovalCode		= ApprovalCode
				LocalApprovalLevel		= ApprovalLevel + 1
				if (LocalApprovalCodeLevelRel exists)
					LocalApprovalLevel	= first LocalApprovalCodeLevelRel.ApprovalLevel
					LocalApprover		= first LocalApprovalCodeLevelRel.Approver
					LocalApproverTeam	= first LocalApprovalCodeLevelRel.ApprovalTeam
				else
					initialize LocalApprovalCode
					initialize LocalApprovalLevel
					initialize LocalApprover
					initialize LocalApproverTeam
			
			if (LocalApprovalLevel entered)
				include ApproverEmailNotification
				
		RejectionEmailNotification
			send email
				to		CreateActorRel.ContactInfo.EmailAddress
				from	actor.agent(Employee).EmployeeWorkEmailAddress
				subject "[Rejected]:_Depreciation_For_The_Period_Ending<BookCalendar.CurrentPeriodDate>"
				Contents
					"Depreciation_for_the_Period_Ending<BookCalendar.CurrentPeriodDate>for_the_Company<BookCalendar.Company>_<BookCalendar.CompanyName>and_Book<BookCalendar.Book>Is_RejectedIs_Rejected"
					"RejectionComment:<LocalComment>"
		
		ApprovedEmailNotification
			send email
				to		CreateActorRel.ContactInfo.EmailAddress
				from	actor.agent(Employee).EmployeeWorkEmailAddress
				subject "[Approved]:_Depreciation_For_The_Period_Ending<BookCalendar.CurrentPeriodDate>"
				Contents
					"Depreciation_for_the_Period_Ending<BookCalendar.CurrentPeriodDate>for_the_Company<BookCalendar.Company>_<BookCalendar.CompanyName>and_Book<BookCalendar.Book>Is_Approved"

		ApproverEmailNotification
			if (LocalApprover entered)
				send email
					to		FinanceResourceRel.EmailAddress
					from	actor.agent(Employee).EmployeeWorkEmailAddress
					subject "[Approval_Required]:_Depreciation_For_The_Period_Ending<BookCalendar.CurrentPeriodDate>"
					Contents
						"Approve_Depreciation_for_the_Period_Ending<BookCalendar.CurrentPeriodDate>for_the_Company<BookCalendar.Company>_<BookCalendar.CompanyName>and_Book<BookCalendar.Book>"
			else
			if (LocalApproverTeam entered)
				for each SendToTeamMembersRel
					send email
						to		each.FinanceTeamMember.TeamMember.EmailAddress
						from	actor.agent(Employee).EmployeeWorkEmailAddress
						subject "[Approval_Required]:_Depreciation_For_The_Period_Ending<BookCalendar.CurrentPeriodDate>"
						Contents
							"Approve_Depreciation_for_the_Period_Ending<BookCalendar.CurrentPeriodDate>for_the_Company<BookCalendar.Company>_<BookCalendar.CompanyName>and_Book<BookCalendar.Book>"
						
		ValidatePeriods
			initialize LocalArrayCount
			initialize LocalPeriodCount
			initialize LocalPeriodEndDate
			PeriodsClosedEditDone	= false
			LocalArrayCount 		= 1
			LocalPeriodCount 		= 0

			while (LocalArrayCount > 0)
				LocalPeriodCount += DepreciationPeriods.DepreciationPeriodNumbers.DepreciationPeriodNumber[LocalArrayCount]
				if (LocalArrayCount = 1)
					constraint (DepreciationPeriods.DepreciationPeriodEndDates.DepreciationPeriodEndDate[1] entered)
						"MustEnterAtLeast_1DepreciationPeriod" 
					constraint (YearBeginDate <= DepreciationPeriods.DepreciationPeriodEndDates.DepreciationPeriodEndDate[1])
						"Period1EndDateCannotBePriorToCalendarBeginDate" 
				if (DepreciationPeriods.DepreciationPeriodNumbers.DepreciationPeriodNumber[LocalArrayCount] entered)
					LocalPeriodEndDate = DepreciationPeriods.DepreciationPeriodEndDates.DepreciationPeriodEndDate[LocalArrayCount]
					constraint (DepreciationPeriods.DepreciationPeriodEndDates.DepreciationPeriodEndDate[LocalArrayCount] entered)
						"BothDateAndNumberOfPeriodsAreRequired"
					constraint (DepreciationPeriods.DepreciationPeriodNumbers.DepreciationPeriodNumber[LocalArrayCount] entered)
						"BothDateAndNumberOfPeriodsAreRequired"
					if (Book.DepreciationType.ClassLevel)
						constraint (DepreciationPeriods.DepreciationPeriodNumbers.DepreciationPeriodNumber[LocalArrayCount] = 1)
							"BookIsUsingAClassTypeDepreciationEachPeriodEndDateMustBeAssigned1Period"
					if (NumberOfDepreciationPeriodsClosed > 0)
						if (LocalPeriodCount >= NumberOfDepreciationPeriodsClosed)
							if (PeriodsClosedEditDone = false)
								constraint (LocalPeriodCount = NumberOfDepreciationPeriodsClosed)
									"TheNumberOfPeriodsClosedMustCorrespondToAPeriodEndDate"
				    			if (CalendarStatus = "C")
									LocalCurrentCloseRuns = LocalArrayCount
								PeriodsClosedEditDone = true
						if (Used)
							if (DepreciationPeriods.DepreciationPeriodEndDates.DepreciationPeriodEndDate[LocalArrayCount] changed)
							 	constraint (old DepreciationPeriods.DepreciationPeriodEndDates.DepreciationPeriodEndDate[LocalArrayCount] <= CurrentPeriodDate)
									"CalendarInUse;CannotChangeCurrentOrPriorPeriodEndDate"
								constraint (DepreciationPeriods.DepreciationPeriodEndDates.DepreciationPeriodEndDate[LocalArrayCount] <= PeriodCloseDate)
									"NewPeriodEndDateMustBeGreaterThanCurrentCloseDatePeriodEndDate"
								if (!CalendarStatus.Current)
									constraint (LocalArrayCount not= CurrentPeriod)
										"CurrentPeriodEndDateCannotBeChanged;AssetsExist"
								constraint (!CalendarStatus.Historic)
									"EndDatesCannotBeChangedOnAHistoricCalendarWithAssets"
					if (LocalPeriodCount = DepreciationPeriodsPerYear)
						constraint (DepreciationPeriods.DepreciationPeriodEndDates.DepreciationPeriodEndDate[LocalArrayCount] = BookCalendar.YearEndDate)
							"FinalPeriodEndDateMustEqualCalendarEndDate"
				    	if (CalendarStatus = "H")
							LocalHistoryCloseRuns = LocalArrayCount
						if (CalendarStatus = "C")
							if (PostingBook
							and CloseBook = 0)
								constraint (Company.AccountingEntity.FiscalYear.DerivedNumberOfPeriods = LocalArrayCount)
									"CloseBook<Book>MustHaveTheSameNumberOfPeriodsAsTheAccountingEntityCloseCalendar"
								constraint (BookCalendar.YearEndDate 	= Company.AccountingEntity.CurrentYearEndDate)
								 	"CloseBook<Book>MustHaveTheSameEndDateAsTheAccountingEntityCloseCalendar"
						LocalArrayCount = 0
					else
						constraint ((LocalPeriodCount + DepreciationPeriods.DepreciationPeriodNumbers.DepreciationPeriodNumber[LocalArrayCount + 1]) <= DepreciationPeriodsPerYear)
							"TotalAssignedPeriodsCannotExceedDepreciationPeriodsPerYear"
						constraint (DepreciationPeriods.DepreciationPeriodEndDates.DepreciationPeriodEndDate[LocalArrayCount + 1] entered)
							"TotalAssignedPeriodsMustEqualDepreciationPeriodsPerYear"
						LocalArrayCount += 1
				else  
					LocalArrayCount = 0


		CalculateTaxReport
			initialize Total179Property
			initialize TotalUnlistedElected
			initialize TotalListedElected
			initialize Total168Election
			initialize CurrentYearAssetAmortization
			initialize LocalTotal179Expense
			initialize LocalOtherDepreciation
			initialize SpecialDepreciationAllowance
			initialize TotalListedProperty
			initialize OtherDepreciation
			initialize PriorYearMACRSDeductions
			initialize PriorYearAssetAmortization
			initialize SpecialDepreciationPart4
			if (LocalUseYearEndDepreciation)
				for each CalendarYearAdditionsRel
					if (each.Section179
					or each.Listed)
						Total179Property 		+= each.Basis
					if (!each.Listed
					and each.Section179
					and each.Section179Expense entered)
						LocalAsset = each.Asset
						display "BC_1030LocalAsset<LocalAsset>"
						TotalUnlistedElected 	+= each.Section179Expense

					else
						if (each.Section179
						and each.Section179Expense entered
						and each.Listed)
							if (each.BusinessPercent > 50)
								TotalListedElected	+= each.Section179Expense  	
								Total179Property	+= each.Basis				
							else
								Total179Property	+= each.Basis				
					if (each.IsUnitOfProduction)
						Total168Election     	+= each.Basis
					if (each.DepreciableIntangible.AmortizedIntangible)
						CurrentYearAssetAmortization += each.FirstYearDepreciation
					LocalTotal179Expense			+= each.Section179Expense
					if (each.BonusAmount entered)
						if (!each.Listed)
							SpecialDepreciationAllowance	+= each.BonusAmount
						else
							if (each.BusinessPercent > 50)
								SpecialDepreciationPart4	+= each.BonusAmount		
								Total179Property			+= each.BonusAmount		

				for each AllReleasedAssets   
					if (!each.IndianReservation)
						if (each.DepreciableIntangible.DepreciableIntangible)
							LocalOtherDepreciation += each.FirstYearDepreciation		 
						if (each.NonConforming)
							LocalOtherDepreciation += each.FirstYearDepreciation		 
				for each PriorYearAdditionsRel
					if (each.IndianReservation 	= true)
						LocalOtherDepreciation	+= each.FirstYearDepreciation
				for each QualifiedPriorYearAdditionsRel
					PriorYearMACRSDeductions += each.FirstYearDepreciation   	 
				for each PriorYearAmortizedIntangiblesRel
					if (each.DepreciableIntangible.AmortizedIntangible)
						PriorYearAssetAmortization += each.FirstYearDepreciation
				OtherDepreciation 				= LocalOtherDepreciation
			else
				for each CalendarYearAdditionsRel
					if (each.Section179
					or each.Listed)
						Total179Property 		+= each.Basis
					if (!each.Listed
					and each.Section179
					and each.Section179Expense entered)
						LocalAsset = each.Asset
						display "BC_1030LocalAsset<LocalAsset>"
						TotalUnlistedElected 	+= each.Section179Expense

					else
						if (each.Section179
						and each.Section179Expense entered
						and each.Listed)
							if (each.BusinessPercent > 50)
								TotalListedElected	+= each.Section179Expense  	
								Total179Property	+= each.Basis				
							else
								Total179Property	+= each.Basis				
					if (each.IsUnitOfProduction)
						Total168Election     	+= each.Basis
					if (each.DepreciableIntangible.AmortizedIntangible)
						CurrentYearAssetAmortization += each.YearToDateDepreciation
					LocalTotal179Expense			+= each.Section179Expense
					if (each.BonusAmount entered)
						if (!each.Listed)
							SpecialDepreciationAllowance	+= each.BonusAmount
						else
							if (each.BusinessPercent > 50)
								SpecialDepreciationPart4	+= each.BonusAmount		
								Total179Property			+= each.BonusAmount		

				for each AllReleasedAssets   
					if (!each.IndianReservation)
						if (each.DepreciableIntangible.DepreciableIntangible)
							LocalOtherDepreciation += each.YearToDateDepreciation		 
						if (each.NonConforming)
							LocalOtherDepreciation += each.YearToDateDepreciation		 
				for each PriorYearAdditionsRel
					if (each.IndianReservation 	= true)
						LocalOtherDepreciation	+= each.YearToDateDepreciation
				for each QualifiedPriorYearAdditionsRel
					PriorYearMACRSDeductions += each.YearToDateDepreciation   	 
				for each PriorYearAmortizedIntangiblesRel
					if (each.DepreciableIntangible.AmortizedIntangible)
						PriorYearAssetAmortization += each.YearToDateDepreciation
				OtherDepreciation 				= LocalOtherDepreciation
		
		BuildTeamApproverActorList
			LocalApproverList = ""
			LocalFirstApproverAssigned = false
			for each FinanceTeamMembersFromCurrentApprovalLevelRel
				if (LocalFirstApproverAssigned)
					LocalApproverList = LocalApproverList + "," + each.FinanceTeamMember.TeamMember.FinanceResourceActor
				else
					LocalApproverList = each.FinanceTeamMember.TeamMember.FinanceResourceActor
					LocalFirstApproverAssigned = true
	

	Transient Fields
		TransientYearEndDate		is like YearEndDate
			derive value from BookCalendar.YearEndDate
		QTDActual					is an InternationalAmount

	Derived Fields
		DaysInQuarter				is a ComputeField
			type is	Numeric size 3
		 	((CalendarDays)/4)

		Q1							is a DerivedField
			type is like InternationalAmount
			initialize LocalActualAmount
			if (CurrentPeriodDate > (YearEndDate - (DaysInQuarter * 3 )))
				for each HYCalendarYearRel
					if (each.InServiceDate <= (YearEndDate - (DaysInQuarter * 3 )))
						LocalActualAmount += each.TotalDepreciableBasis
				return LocalActualAmount
			else
				return Quarter1


		Q2							is a DerivedField
			type is like InternationalAmount
			initialize LocalActualAmount
			if (CurrentPeriodDate > (YearEndDate - (DaysInQuarter*2)))
				for each HYCalendarYearRel
					if (each.InServiceDate > (YearEndDate - (DaysInQuarter * 3 ))
					and each.InServiceDate <= (YearEndDate - (DaysInQuarter*2)))
						LocalActualAmount += each.TotalDepreciableBasis
				return LocalActualAmount
			else
				return Quarter2

		Q3							is a DerivedField
			type is like InternationalAmount
			initialize LocalActualAmount
			if (CurrentPeriodDate > (YearEndDate - DaysInQuarter))
				for each HYCalendarYearRel
					if (each.InServiceDate > (YearEndDate - (DaysInQuarter*2))
					and each.InServiceDate <= (YearEndDate - DaysInQuarter))
						LocalActualAmount += each.TotalDepreciableBasis
				return LocalActualAmount
			else
				return Quarter3

		Q4							is a DerivedField
			type is like InternationalAmount
			initialize LocalActualAmount
			if (CurrentPeriodDate > YearEndDate)
				for each HYCalendarYearRel
					if (each.InServiceDate > (YearEndDate - DaysInQuarter)
					and each.InServiceDate <= YearEndDate)
						LocalActualAmount += each.TotalDepreciableBasis
				return LocalActualAmount
			else
				return Quarter4

		StoreActualAmount		is a DerivedField
			type is like InternationalAmount
			for each HYCalendarYearRel
				if (IsQ1)
					if (each.InServiceDate <= LastPeriodDate)
						QTDActual += each.TotalDepreciableBasis
				else
				if (IsQ2)
					if (each.InServiceDate > (YearEndDate - DaysInQuarter - DaysInQuarter - DaysInQuarter )
					and each.InServiceDate <= LastPeriodDate)
						QTDActual += each.TotalDepreciableBasis
				else
				if (IsQ3)
					if (each.InServiceDate > (YearEndDate - DaysInQuarter - DaysInQuarter)
					and each.InServiceDate <= LastPeriodDate)
						QTDActual += each.TotalDepreciableBasis
				else
				if (IsQ4)
					if (each.InServiceDate > (YearEndDate - DaysInQuarter)
					and each.InServiceDate <= LastPeriodDate)
						QTDActual += each.TotalDepreciableBasis
			return QTDActual

		TestPercent					is a DerivedField
			type is like Percent
			return (Q4 / (Q1 + Q2 + Q3 + Q4))

		MidQuarterTestResult					is a DerivedField
			type is Alpha 80
			if (TestPercent>=40%)
				return ApplyMessage
			else
				return DoesNotApplyMessage

		ApplyMessage			is a MessageField
			restricted
			"TestPercentIs<TestPercent>,_\Mid-\Quarter_\ConventionApplies"

		DoesNotApplyMessage		is a MessageField
			restricted
			"TestPercentIs<TestPercent>,_\Mid-\Quarter_\ConventionDoesNotApply"

		HYConvention				is a DerivedField
			type is like InternationalAmount
			return sum HYCalendarYearRel.YearToDateDepreciation

		CalendarDays 				is a ComputeField
			type is Numeric size 3
			restricted
			((BookCalendar.YearEndDate - YearBeginDate) + 1)

		PeriodsClosed is a DerivedField
			type is Numeric size 3
			return NumberOfDepreciationPeriodsClosed

        PeriodCloseDate            	is an ArrayValueField
            type is Date
            restricted
            classic name is PD-CLOSE-DATE
            DepreciationPeriods.DepreciationPeriodEndDates.DepreciationPeriodEndDate[NumberOfDepreciationPeriodsClosed]

		CurrentPeriod              	is a ComputeField
            type is Decimal size 2



            (NumberOfPeriodCloseRuns + 1)

		CurrentPeriodDisplay       	is a DerivedField
            type is Alpha size 20
			if (PeriodCloseDate = BookCalendar.YearEndDate)
				return "YearEndInProgress"
			else
            	return CurrentPeriod

 		LastPeriodEnd              	is a ComputeField
            type is Decimal size 2
            restricted
            (NumberOfPeriodCloseRuns)

        LastPeriodDate           	is an DerivedField
            type is Date
            restricted
            if (LastPeriodEnd = blank)
            	return (YearBeginDate - 1 day)
            else
	            return DepreciationPeriods.DepreciationPeriodEndDates.DepreciationPeriodEndDate[LastPeriodEnd]

        CurrentPeriodDate           is an ArrayValueField
            type is Date

            classic name is PD-CURR-DATE
            DepreciationPeriods.DepreciationPeriodEndDates.DepreciationPeriodEndDate[CurrentPeriod]

		CurrentPeriodYear			is a DerivedField
			type is Year
			restricted
            return DepreciationPeriods.DepreciationPeriodEndDates.DepreciationPeriodEndDate[CurrentPeriod] year

       	NumberOfBookPeriods			is a DerivedField
       	 	type is Numeric size 3
       	 	return sum DepreciationPeriods.DepreciationPeriodNumbers.DepreciationPeriodNumber

       	NumberOfPeriods  			is a DerivedField
       	 	type is Numeric size 3
       	 	LocalArrayCount = 1
      	 	while(DepreciationPeriods.DepreciationPeriodEndDates.DepreciationPeriodEndDate[LocalArrayCount] <= YearEndDate)
				if(DepreciationPeriods.DepreciationPeriodEndDates.DepreciationPeriodEndDate[LocalArrayCount] = YearEndDate)

      	 			return LocalArrayCount
       	 		else
       	 			LocalArrayCount += 1
       	 	return

        BookDescription             is a StringField
            type is Alpha size 30
            classic name is BK-DESCRIPTION
            Book.Description

        BookCurrency                is a StringField
            type is Alpha size 5
            classic name is BK-CURR-CODE
            Book.Currency

        BookStatus                  is a StringField
            type is Alpha size 1
            restricted
            classic name is BK-STATUS
            Book.Active

        BookDepreciationType        is a StringField
            type is Alpha size 1
            restricted
            classic name is BK-DEPR-TYPE
            Book.DepreciationType

        BookConvension              is a StringField
            type is Alpha size 2
            restricted
            classic name is BK-CONV
            Book.Convention

        BookMethodSwitch            is a StringField
            type is Alpha size 1
            restricted
            classic name is BK-METH-SWITCH
            Book.MethodSwitch

        BookTrackDepreciationHistory is a StringField
            type is Alpha size 1
            classic name is BK-HISTORY
            Book.TrackDepreciationHistory

        CompanyName                 is a StringField 
            type is like Name
        	holds pii
            restricted
            classic name is CO-NAME
            Company.Name

        CompanyCurrency            	is a StringField
            type is Alpha size 5
            restricted
            classic name is CO-CURR-CODE
            Company.Currency

       	ClassTypeCalendarDatesValid	is a DerivedField
       		type is Numeric 1
       		restricted
       		if (Book.DepreciationType.ClassLevel)
				LocalCurrentYearEndDate			= (Company.AccountingEntity.FiscalYear.DerivedEndDate)
				LocalCurrentYearBeginDate		= (Company.AccountingEntity.FiscalYear.DerivedStartDate)

      			return 1
      		else
      			return 0

		ReductionInLimitation is a DerivedField
			type is like InternationalAmount	
			if ((ReductionThreshold - Total179Property) > 0)
				return (ReductionThreshold - Total179Property)
			else
				return 0

		LimitForTaxYear is a DerivedField   
			type is like InternationalAmount
			if ((MaximumAmount - ReductionInLimitation) > 0)
				return (MaximumAmount - ReductionInLimitation)
			else
				return 0

		TotalElected179Property is a DerivedField	
			type is like InternationalAmount
			return (TotalListedElected + TotalUnlistedElected)

		TentativeDeduction	is a DerivedField		
			type is like InternationalAmount
			if (LimitForTaxYear <= TotalElected179Property)
				return LimitForTaxYear
			else
				return TotalElected179Property

		BusinessIncomeLimitation is a DerivedField  
			type is like InternationalAmount
			if (BusinessIncome = 0
			or LimitForTaxYear = 0)
				return 0
			else
				if (BusinessIncome < LimitForTaxYear)
					return BusinessIncome
				else
					return LimitForTaxYear

		Section179ExpenseDeduction is a DerivedField 
     		type is like InternationalAmount
			if ((TentativeDeduction + PriorYearCarryover) <= BusinessIncomeLimitation)
				return BusinessIncomeLimitation
			else
				return (TentativeDeduction + PriorYearCarryover)


		Carryover is a DerivedField					
			type is like InternationalAmount
			return (TentativeDeduction + PriorYearCarryover - Section179ExpenseDeduction)

		TotalGDS is a DerivedField
			type is like InternationalAmount   
			return sum CalendarYearGDSAdditionsRel.YearToDateDepreciation

		TotalADS is a DerivedField
			type is like InternationalAmount   
			return sum CalendarYearADSAdditionsRel.YearToDateDepreciation

		AnnualTotal is a DerivedField 					
			type is like InternationalAmount
			return (Section179ExpenseDeduction + SpecialDepreciationAllowance
			+ Total168Election	+ OtherDepreciation + PriorYearMACRSDeductions
			+ TotalListedProperty + TotalGDS + TotalADS)

		DepreciationAllowancePart4 is a DerivedField
			type is like InternationalAmount
			return (Total179Property - ReductionThreshold)

		PeriodEndingDate is a DerivedField
			type is Date
			return (CurrentPeriodDate - 1 month)
			
		DerivedApprovalCode is a DerivedField
			type is Alpha 30 
			return Company.ApprovalCode
		
		DerivedCurrentApprovalResource is a DerivedField
			type is Numeric 9
			restricted
			return first CurrentApprovalCodeLevelRel.Approver
		
		DerivedCurrentApprovalActor is a DerivedField
			type is Actor
			restricted
			return first CurrentApprovalCodeLevelRel.Approver.FinanceResourceActor
		
		DerivedCurrentApprovalTeam is a DerivedField
			type is AlphaUpper 20
			restricted
			return first CurrentApprovalCodeLevelRel.ApprovalTeam
		
		DerivedCurrentTeamActorList is a DerivedField
			type is Alpha 250
			restricted
			include BuildTeamApproverActorList
			return LocalApproverList
		
		DerivedCurrentApproverEscalationDays is a DerivedField
			type is Numeric 6
			restricted
			if (first CurrentApprovalCodeLevelRel.EscalationDays > 0)
				return first CurrentApprovalCodeLevelRel.EscalationDays
			else
				return 10000
		
		DerivedCurrentApproverEscalationHours is a DerivedField
			type is Decimal 6.2
			restricted
			if (first CurrentApprovalCodeLevelRel.EscalationHours > 0)
				return first CurrentApprovalCodeLevelRel.EscalationHours
			else
				return 9999.99
				
		DerivedAppsValue is a DerivedField
			type is like PfiAppsValue
			return "DepreciationApproval" + UniqueID

	Conditions
		IsQ1
			when (IsCurrent
			and CurrentPeriodDate >= YearBeginDate
			and CurrentPeriodDate <=  (YearEndDate - (DaysInQuarter * 3)))

		IsQ2
			when (IsCurrent
			and (CurrentPeriodDate > (YearEndDate - (DaysInQuarter * 3))
			and CurrentPeriodDate <= (YearEndDate - (DaysInQuarter * 2))))

		IsQ3
			when (IsCurrent
			and (CurrentPeriodDate > (YearEndDate - (DaysInQuarter * 2))
			and CurrentPeriodDate <=  (YearEndDate - DaysInQuarter)))

		IsQ4
			when (IsCurrent
			and CurrentPeriodDate > (YearEndDate - DaysInQuarter)
			and CurrentPeriodDate <= YearEndDate)

		IsValidForMQTest
			when (IsCurrent
			and HYCalendarYearRel exists)

		AbleToReset
			when (IsCurrent
			and MQCalendarYearRel exists)

		IsCurrent

			when (CalendarStatus.Current)

		IsFuture
			restricted
			when (CalendarStatus.Future)

		IsShortYearAndFuture
			restricted
			when (ShortYear
			or IsFuture)

		IsCurrentAndPriorShortYear
			restricted
			when (IsCurrent
			and PriorYearCalendarIsShortYear)

		IsHistory
			restricted
			when (CalendarStatus.Historic)

		CurrentExists
			restricted
			when (CurrentYearBookCalendarRel exists)

		FutureExists
			restricted
			when (FutureYearBookCalendarsRel exists)

		HistoryExists
			restricted
			when (HistoryYearBookCalendarsRel exists)

		IsCurrentActiveDepreciationBook
			when (IsCurrent
			and Book.IsActive
			and !Book.Impairment)

        LastCurrentNextCalendarsExist
        	restricted
        	when (CurrentExists
			and FutureExists
			and HistoryExists)

		CurrentYearActiveCalendar
			restricted
			when (IsCurrent
			and AssetBookRel exists)

		CurrentYearInactiveCalendar
			restricted
			when (IsCurrent
			and AssetBookRel not exists)

		ActiveBook
			restricted
			when (Book.IsActive)

		ActiveCalendar
			restricted
			when (!IsFuture
			and AssetBookRel exists)

        CurrentCalendar
        	restricted
            classic name is AMCSET4
            when (CalendarStatus.Current)

        CurrentCalendar2
        	restricted
            classic name is AMCSET5
            when (CalendarStatus.Current)

        CurrentRequiredCalendar
        	restricted
            classic name is AMCSET6
            when (CalendarStatus.Current
            and   RequiredBook)

        BookEntered
        	restricted
            classic name is BOOK-EXIST
            when (Book entered)

        ClassLevelDepreciation
        	restricted
            classic name is CLASS-LVL-DEPR
            when (Book.DepreciationType.ClassLevel)

        CompanyEntered
        	restricted
            classic name is COMPANY-EXIST
            when (Company entered)

        IsPostingBook
        	restricted
            when (PostingBook)

        IsRequiredBook
        	restricted
            when (RequiredBook)

        IsAssignedImpairmentNonPostingBook
        	restricted
        	when ((Book.Impairment
        	and ImpairmentBookInUse)
        	or  !IsPostingBook)

        IsAssignedImpairmentBook
        	restricted
        	when (Book.Impairment
        	and ImpairmentBookInUse)

        ImpairmentBookInUse
        	restricted
        	when (ImpairmentBookInUseRel exists)

       	DeleteIsAValidAction
       		restricted
       		when (!ActiveCalendar
       		and (IsCurrent
       		and !FutureExists
       		and !HistoryExists)
       		or  (IsHistory
	       	and !HistoryExists)
	       	or (IsFuture
	       	and !FutureExists))

		PriorYearCalendarIsShortYear
			when (first HistoryYearBookCalendarsRel.ShortYear)


		RequiredBookForLedgerExists
			restricted
			when (RequiredPostingBookRel exists)

		CloseControlOn
			restricted
			when (CompanySystemClosingControlRel exists
			and CompanySystemClosingControlRel.Control = true)

		PeriodCloseReady
			restricted
			when (Company.PeriodCloseReady)

		ClosedForCurrentEntityPeriod
			when ((NumberOfPeriodCloseRuns >= Company.AccountingEntity.CurrentPeriod.PeriodNumber)
			or (YearEndDate > Company.AccountingEntity.FiscalYear.DerivedEndDate))

		YearEndInProgress
			when (AmcontrolRel.PeriodCloseRelease.InProcess)

		OtherCloseBooksExist
			restricted
			when (OtherCloseBooks exist)

		IsCloseBook
			when (CloseBook.Yes
			and PostingBook)

		TrackDepreciationHistory
			restricted
			when (Book.TrackDepreciationHistory)

		CurrentYearAdditionsExist
			when (CalendarYearAdditionsRel exists)

		CurrentYearDisposalsExist
			when (CalendarYearDisposalsRel exists)

		IsDepreciationCalculated
			when (DepreciationCalculated)

		PriorHistoryCalendarsExist
			when (PriorHistoryCalendarsRel exists)

		IsTaxBook
			restricted
			when (Book.IsTaxBook)

		IsTaxBookCal
			when(IsTaxBook and IsCurrent)

		ADSRegulationExists
			restricted
			when (IsTaxBook
			and ADSRegulationRel exists)

		GDSRegulationExists
			restricted
			when (IsTaxBook
			and GDSRegulationRel exists)

		IsValidForActorContext
			restricted
			when (GeneralLedgerCompanyRel.FinanceEnterpriseGroup = actor.context.FinanceEnterpriseGroup)

		BookCalendarPeriodEndExists
			restricted
			when (BookCalendarPeriodEndRel exists)
		
		IsPendingForApproval
			restricted
			when (DepreciationCalculationStatus.PendingApproval)
			

    Relations

		CurrentYearListedAdditionsRel
			one-to-many relation to AssetBook
			Field Mapping uses Set2
	            related.FinanceEnterpriseGroup	= FinanceEnterpriseGroup
                related.Book					= Book
            Instance Selection
            	where (related.Asset.Company	= Company
				and	related.InServiceDate 		>= YearBeginDate
				and related.InServiceDate 		<= BookCalendar.YearEndDate

				and related.Listed 				= true)

		CalendarYearGDSAdditionsRel
			one-to-many relation to AssetBook
			Field Mapping uses ByBookRegulationClass
	            related.FinanceEnterpriseGroup	= FinanceEnterpriseGroup
                related.Book					= Book
           		related.BookRegulation			= "GDS"
            Instance Selection   
            	where (related.Asset.Company	= Company
				and related.Listed				= false
            	and related.InServiceDate 		>= YearBeginDate
				and related.InServiceDate 		<= BookCalendar.YearEndDate)

		CalendarYear179AdditionsRel
			one-to-many relation to AssetBook
			Field Mapping uses ByBookRegulationClass
	            related.FinanceEnterpriseGroup	= FinanceEnterpriseGroup
                related.Book					= Book
            Instance Selection
            	where (related.Asset.Company	= Company
				and related.Section179			= true
            	and related.InServiceDate 		>= YearBeginDate
				and related.InServiceDate 		<= BookCalendar.YearEndDate)
		Unlisted179AdditionsRel
			one-to-many relation to AssetBook
			Field Mapping uses ByBookRegulationClass
	            related.FinanceEnterpriseGroup	= FinanceEnterpriseGroup
                related.Book					= Book
            Instance Selection
            	where (related.Asset.Company	= Company
				and related.Section179			= true
				and related.Listed				= false
            	and related.InServiceDate 		>= YearBeginDate
				and related.InServiceDate 		<= BookCalendar.YearEndDate)

		Listed179AdditionsRel
			one-to-many relation to AssetBook
			Field Mapping uses ByBookRegulationClass
	            related.FinanceEnterpriseGroup	= FinanceEnterpriseGroup
                related.Book					= Book
            Instance Selection
            	where (related.Asset.Company	= Company
				and related.Section179			= true
				and related.Listed				= true
            	and related.InServiceDate 		>= YearBeginDate
				and related.InServiceDate 		<= BookCalendar.YearEndDate)
		CalendarYearADSAdditionsRel
			one-to-many relation to AssetBook
			Field Mapping uses ByBookRegulationClass
	            related.FinanceEnterpriseGroup	= FinanceEnterpriseGroup
                related.Book					= Book
           		related.BookRegulation			= "ADS" 

            Instance Selection
            	where (related.Asset.Company	= Company
				and related.Listed				= false
            	and related.InServiceDate 		>= YearBeginDate
				and related.InServiceDate 		<= BookCalendar.YearEndDate)

    	OtherCloseBooks
    		one-to-many relation to BookCalendar
    		Field Mapping uses Set4   
    			related.Company					= Company
			Instance Selection
				where (related.Book			   != Book
				and related.CloseBook			= 0
				and related.PostingBook			= true)

        CloseBookCalendarsRel
            one-to-many relation to BookCalendar
            Field Mapping uses Set4
                related.Company 				= Company
			Instance Selection
				where (related.CloseBook		= 0
				and related.PostingBook			= true)

    	LocalBookRel
    		one-to-one relation to Book
    		Field Mapping uses symbolic key
    			related.FinanceEnterpriseGroup	= FinanceEnterpriseGroup
    			related.Book					= LocalBook

    	RequiredPostingBookRel
    		one-to-many relation to BookCalendar
    		Field Mapping uses Set4
				related.Company 			  	= Company
			Instance Selection
				where (related.Book			not = Book
				and related.PostingBook			= true
				and related.RequiredBook		= true
				and related.Book.Ledger			= LocalLedger)

		CompanyPostingBookRel
			one-to-many relation to BookCalendar
			Field Mapping uses Set4
				related.Company 			  	= Company
			Instance Selection
				where (related.Book			not = Book
				and related.PostingBook			= true)

		LocalCompanyPostingBookRel
			one-to-many relation to BookCalendar
			Field Mapping uses Set4
				related.Company 			  	= LocalCompany
			Instance Selection
				where (related.Book			not = LocalBook
				and related.PostingBook			= true
				and related.RequiredBook		= true
				and related.Book.Ledger			= LocalLedger)

		AMSystemClosingControlRel
			one-to-one relation to CompanySystemClosingControl
			Field Mapping uses symbolic key
				related.Company						= Company
				related.GeneralLedgerSystemCode		= "AM"

        AmcontrolRel
            one-to-one relation to AssetCompany
            Field Mapping uses symbolic key
                related.Company 				= Company

		HistoryYearBookCalendarsRel
			one-to-many relation to BookCalendar
			Field Mapping uses Set2
				related.Book 				  	= Book
				related.Company 			  	= Company
			Instance Selection
				where (related.YearBeginDate 	< YearBeginDate)

		AllBookCalendarsRel
			one-to-many relation to BookCalendar
			Field Mapping uses ByCompanyBookDate
            	related.FinanceEnterpriseGroup	= FinanceEnterpriseGroup

		HistoryCalendarsRel
			one-to-many relation to BookCalendar
			Field Mapping uses ByCompanyBookDate
            	related.FinanceEnterpriseGroup	= FinanceEnterpriseGroup
                related.Company					= Company
                related.Book					= Book

		CalendarsByDateRel
			one-to-many relation to BookCalendar
			Field Mapping uses ByCompanyBookDate
            	related.FinanceEnterpriseGroup	= FinanceEnterpriseGroup
                related.Company					= Company
                related.Book					= Book

		CurrentYearBookCalendarRel
			one-to-one relation to BookCalendar
			Field Mapping uses Set4
				related.Company 			  	= Company
				related.Book 				  	= Book

		CurrentYearBookCalendarsRel
			one-to-many relation to BookCalendar
			Field Mapping uses Set4
				related.Company 			  	= Company

		CurrentImpairmentBookCalendarRel
			one-to-one relation to BookCalendar
			Field Mapping uses Set4
				related.Company 			  	= Company
				related.Book 				  	= Book.ImpairmentBook

		ImpairmentBookInUseRel
			one-to-many relation to BookCalendar
			Field Mapping uses Set4
				related.Company 			  	= Company
			Instance Selection
				where (related.Book.ImpairmentBook	= Book)

		FutureYearBookCalendarsRel
			one-to-many relation to BookCalendar
			Field Mapping uses Set2
				related.Book 				  	= Book
				related.Company 			  	= Company
			Instance Selection
				where (related.YearBeginDate > YearBeginDate)

		BookCalendarsRel
			one-to-many relation to BookCalendar
			Field Mapping uses Set2
				related.Book 				  	= Book
				related.Company				  	= Company

		AssetBookRel
			one-to-many relation to AssetBook
			Field Mapping uses Set2
	            related.FinanceEnterpriseGroup	= FinanceEnterpriseGroup
                related.Book					= Book
            Instance Selection
            	where (related.Asset.Company 	= Company)
		CalendarYearAdditionsRel
			one-to-many relation to AssetBook
			Field Mapping uses Set2
	            related.FinanceEnterpriseGroup	= FinanceEnterpriseGroup
                related.Book					= Book
            Instance Selection
            	where (related.Asset.Company 	= Company
            	and related.InServiceDate 		>= YearBeginDate   
            	and related.InServiceDate		<= BookCalendar.YearEndDate
				and related.Asset.Status.Released)

		HYCalendarYearRel
			one-to-many relation to AssetBook
			Field Mapping uses Set2
	            related.FinanceEnterpriseGroup	= FinanceEnterpriseGroup
                related.Book					= Book
            Instance Selection
            	where (related.Asset.Company 	= Company
            	and related.InServiceDate 		>= YearBeginDate
            	and related.InServiceDate		<= BookCalendar.YearEndDate
            	and related.Convention.HalfYear
            	and related.CostRecoverySystem.MACRS
            	and (related.BookRegulation = "ADS" or related.BookRegulation = "GDS")
            	and related.PropertyType.1245
            	and !(related.ClassificationOfProperty = "27" or related.ClassificationOfProperty = "31" or related.ClassificationOfProperty = "39")
            	and !related.Disposed
				and related.Asset.Status.Released)

		MQCalendarYearRel
			one-to-many relation to AssetBook
			Field Mapping uses Set2
	            related.FinanceEnterpriseGroup	= FinanceEnterpriseGroup
                related.Book					= Book
            Instance Selection
            	where (related.Asset.Company 	= Company
            	and related.InServiceDate 		>= YearBeginDate
            	and related.InServiceDate		<= BookCalendar.YearEndDate
            	and related.Convention.MidQuarter
            	and related.CostRecoverySystem.MACRS
            	and (related.BookRegulation = "ADS" or related.BookRegulation = "GDS")
            	and related.PropertyType.1245
            	and !(related.ClassificationOfProperty = "27" or related.ClassificationOfProperty = "31" or related.ClassificationOfProperty = "39")
            	and !related.Disposed
				and (related.Asset.Status.PostRelease
				and related.Asset.AssetProcess.Adjustment))

		PriorYearAdditionsRel
			one-to-many relation to AssetBook
			Field Mapping uses Set2
	            related.FinanceEnterpriseGroup	= FinanceEnterpriseGroup
                related.Book					= Book
            Instance Selection
            	where (related.Asset.Company 	= Company
            	and related.InServiceDate 		< YearBeginDate
				and related.Asset.Status.Released)

		QualifiedPriorYearAdditionsRel
			one-to-many relation to AssetBook
			Field Mapping uses Set2
	            related.FinanceEnterpriseGroup	= FinanceEnterpriseGroup
                related.Book					= Book
            Instance Selection
            	where (related.Asset.Company 	= Company
				and related.CostRecoverySystem 	= 2
				and !related.IndianReservation
				and !related.Farming
				and related.DepreciableIntangible = 0
            	and related.InServiceDate 		< YearBeginDate
				and related.Asset.Status.Released)

		CurrentYearAmortizedIntangiblesRel
			one-to-many relation to AssetBook
			Field Mapping uses Set2
	            related.FinanceEnterpriseGroup	= FinanceEnterpriseGroup
                related.Book					= Book
            Instance Selection
            	where (related.Asset.Company 	= Company
				and related.DepreciableIntangible = "2"
            	and related.InServiceDate 		>= YearBeginDate   
            	and related.InServiceDate		<= BookCalendar.YearEndDate
				and related.Asset.Status.Released)

		PriorYearAmortizedIntangiblesRel
			one-to-many relation to AssetBook
			Field Mapping uses Set2
	            related.FinanceEnterpriseGroup	= FinanceEnterpriseGroup
                related.Book					= Book
            Instance Selection
            	where (related.Asset.Company 	= Company
				and related.DepreciableIntangible = "2"
            	and related.InServiceDate 		< YearBeginDate
				and related.Asset.Status.Released)

		AllReleasedAssets
			one-to-many relation to AssetBook
			Field Mapping uses Set2
	            related.FinanceEnterpriseGroup	= FinanceEnterpriseGroup
                related.Book					= Book
            Instance Selection
            	where (related.Asset.Company 	= Company
				and related.Asset.Status.Released)

		PriorYearMACRSNotReservationOrFarming			
			one-to-many relation to AssetBook
			Field Mapping uses Set2
	            related.FinanceEnterpriseGroup	= FinanceEnterpriseGroup
                related.Book					= Book
            Instance Selection
            	where (related.Asset.Company 	= Company
				and related.IndianReservation	= false
				and related.Farming				= false
            	and related.InServiceDate 		< YearBeginDate
				and related.Asset.Status.Released)


		CalendarYearDisposalsRel
			one-to-many relation to AssetDisposal
			Field Mapping uses ByDisposalAsset
                related.FinanceEnterpriseGroup	= FinanceEnterpriseGroup
            Instance Selection
            	where (related.Asset.Company 	= Company
            	and related.DisposalDate >= YearBeginDate
            	and related.DisposalDate <= BookCalendar.YearEndDate)








		AssetBookWithHistoryRel
			one-to-many relation to AssetBookHistory
			Field Mapping uses Set4
                related.Company					= Company
                related.Book					= Book
                related.YearEndDate				= BookCalendar.YearEndDate

		ClassDepreciationRel
			one-to-many relation to ClassDepreciation
			Field Mapping uses Set4
                related.Company					= Company
                related.Book					= Book
           	Instance Selection
           		where (related.ClassDepreciation.YearEndDate >= BookCalendar.YearEndDate)

       	GeneralLedgerCompanyRel
       		one-to-one relation to GeneralLedgerCompany
       		Field Mapping uses symbolic key
       			related.Company					= Company

       	BookAccountsRel
       		one-to-many relation to AssetTransactionSummary
       		Field Mapping uses Set2
       			related.Company 				= Company
       			related.Book					= Book
                related.YearEndDate				= BookCalendar.YearEndDate

		CompanySystemClosingControlRel
			one-to-one relation to CompanySystemClosingControl
			Field Mapping uses BySystemCode
				related.GeneralLedgerSystemCode			= "AM"
				related.Company							= Company
		LastYearBookCalendarRel
			one-to-many relation to BookCalendar
			Field Mapping uses Set2
				related.Book		= Book
				related.Company 	= Company
			Instance Selection
				where (related.BookCalendar.YearEndDate < BookCalendar.YearEndDate)
		GDSRegulationRel
			one-to-one relation to BookRegulation
			Field Mapping uses symbolic key
				related.FinanceEnterpriseGroup	= FinanceEnterpriseGroup
				related.BookRegulation			= "GDS"
		ADSRegulationRel
			one-to-one relation to BookRegulation
			Field Mapping uses symbolic key
				related.FinanceEnterpriseGroup	= FinanceEnterpriseGroup
				related.BookRegulation			= "ADS"

		PriorHistoryCalendarsRel
			one-to-many relation to BookCalendar
			Field Mapping uses Set3
				related.CalendarStatus			= "H"
				related.Book					= Book
         	Instance Selection
                where (related.YearEndDate 		< YearEndDate)

		Part1DisposalsRel
			one-to-many relation to AssetBookDisposal
			Field Mapping uses Set2
				related.Book	= Book
			Instance Selection
				where (related.Asset.Company = Company
				and related.4797Part1
				and related.DerivedDisposalDate >= YearBeginDate
				and related.DerivedDisposalDate <= YearEndDate)
		Part2DisposalsRel
			one-to-many relation to AssetBookDisposal
			Field Mapping uses Set2
				related.Book	= Book
			Instance Selection
				where (related.Asset.Company = Company
				and related.4797Part2
				and related.DerivedDisposalDate >= YearBeginDate
				and related.DerivedDisposalDate <= YearEndDate)
		Part3DisposalsRel
			one-to-many relation to AssetBookDisposal
			Field Mapping uses Set2
				related.Book	= Book
			Instance Selection
				where (related.Asset.Company = Company
				and related.4797Part3
				and related.DerivedDisposalDate >= YearBeginDate
				and related.DerivedDisposalDate <= YearEndDate)

		4797DisposalsRel
			one-to-many relation to AssetBookDisposal
			Field Mapping uses Set2
				related.Book	= Book
			Instance Selection
				where (related.4797All
				and related.DerivedDisposalDate >= YearBeginDate
				and related.DerivedDisposalDate <= YearEndDate)
		4797CompanyDisposalsRel
			one-to-many relation to AssetBookDisposal
			Field Mapping uses Set2
				related.Book	= Book

			Instance Selection
				where (related.4797All
				and related.DerivedDisposalDate >= YearBeginDate
				and related.DerivedDisposalDate <= YearEndDate)

		BookCalendarPeriodEndRel
			one-to-many relation to AssetBatchUpdateResult
			Field Mapping uses symbolic key
				related.FinanceEnterpriseGroup	= FinanceEnterpriseGroup
			Instance Selection
				where (Company	= Company
				and Book		= Book)

		YearBeginDateCalendarRel
			one-to-many relation to BookCalendar
			Field Mapping uses Set2
       			related.Book					= LocalBook
				related.Company 				= LocalCompany
			Instance Selection
				where (related.YearBeginDate	= LocalBeginDate)

		YearEndDateCalendarRel
			one-to-many relation to BookCalendar
			Field Mapping uses Set2
       			related.Book					= LocalBook
				related.Company 				= LocalCompany
			Instance Selection
				where (related.YearEndDate = LocalEndDate)

		CompanyGroupRel
			one-to-many relation to GeneralLedgerCompanyGroupMember
			Field Mapping uses symbolic key
				related.GeneralLedgerCompanyGroup 	= LocalGeneralLedgerCompanyGroup
		CurrentApprovalCodeLevelRel
			one-to-many relation to ApprovalCodeResource
			Field Mapping uses ByApprovalLevel
				related.FinanceEnterpriseGroup	= FinanceEnterpriseGroup
				related.ApprovalCode			= ApprovalCode
				related.ApprovalLevel			= ApprovalLevel
		
		FinanceTeamMembersFromCurrentApprovalLevelRel
			one-to-many relation to FinanceTeamMember
			Field Mapping uses symbolic key
				related.FinanceEnterpriseGroup	= FinanceEnterpriseGroup
				related.FinanceTeam				= first CurrentApprovalCodeLevelRel.ApprovalTeam
		
		CreateActorRel
			one-to-one relation to Actor
			Field Mapping uses symbolic key
				related.Actor				= create stamp.actor
		
		LocalApprovalCodeLevelRel
			one-to-many relation to ApprovalCodeResource
			Field Mapping uses ByApprovalLevel
				related.FinanceEnterpriseGroup	= GeneralLedgerCompanyRel.FinanceEnterpriseGroup
				related.ApprovalCode			= LocalApprovalCode
				related.ApprovalLevel			= LocalApprovalLevel
		
		ApprovalCodeResourceRel
			one-to-many relation to ApprovalCodeResource
			Field Mapping uses ByApprovalLevel
				related.FinanceEnterpriseGroup	= GeneralLedgerCompanyRel.FinanceEnterpriseGroup
				related.ApprovalCode			= ApprovalCode
		
		SendToTeamMembersRel
			one-to-many relation to FinanceTeamMember
			Field Mapping uses symbolic key
				related.FinanceEnterpriseGroup	= GeneralLedgerCompanyRel.FinanceEnterpriseGroup
				related.FinanceTeam				= LocalApproverTeam	
		
		FinanceResourceRel
			one-to-one relation to FinanceResource
			Field Mapping uses symbolic key
				related.HROrganization		= FinanceEnterpriseGroup.HROrganization	
				related.FinanceResource  	= LocalApprover
		
		PfiWorkunitRel
			one-to-many relation to PfiWorkunit
			Field Mapping uses ByAppsKeyAppsValueWorkunit
				related.AppsKey		= "BOOKCALENDAR"
				related.AppsValue	= DerivedAppsValue

    Sets
       	Set2
            indexed
            Sort Order
                Book
                Company
                YearEndDate descending

       	ByBeginDateDescending
            Sort Order
                Book
                Company
                YearBeginDate descending

        ByCompanyBookStatus
            indexed
            Sort Order
            	FinanceEnterpriseGroup
                Company
                Book
                CalendarStatus
                YearEndDate

        ByCompanyBookDate
            Sort Order
            	FinanceEnterpriseGroup
                Company
                Book
                YearEndDate

        Set3
            indexed
            Sort Order
                CalendarStatus
                Book
                Company
                YearEndDate

        Set4
            indexed
            Instance Selection
                where (CalendarStatus.Current)
            Sort Order
                Company
                Book

        CompanyCurrentPostingBook
            Sort Order
                Company
                PostingBook
                Book
            Instance Selection
                where (CalendarStatus.Current)

		CompanyHistoryPostingBooks
			Sort Order
				Company
				PostingBook
                YearEndDate descending
				Book
			Instance Selection
                where (CalendarStatus.Historic)

        Set5
            indexed
            Instance Selection
                where (CalendarStatus.Current)
            Sort Order
                Book
                Company

        Set6
            indexed
            Instance Selection
                where (CurrentRequiredCalendar)
            Sort Order
                Company
                Book

        BookCalendarsByStatus
            indexed
            Sort Order
                Company
                CalendarStatus
                RequiredBook
                Book
                YearEndDate


    Field Rules
    	ApprovalCode
			initial value is Company.ApprovalCode
			default to Company.ApprovalCode
			
			constraint (ApprovalCode.HasApprovalLevels)
				"ApprovalCodeHasNoApprovalLevels"
			constraint (!ApprovalCode.HasTeamWithNoMembers)
				"ApprovalCodeHasATeamWithNoMembers"
			constraint (!ApprovalCode.HasInvalidEscalations)
				"ApprovalCodeHasInvalidEscalationSettings"
			constraint (!ApprovalCode.HasInactiveResources)
				"ApprovalCodeHasInactiveResources"
    		
		CalendarStatus
			if (!CalendarStatus.Current)
				constraint (PostingBook = CurrentYearBookCalendarRel.PostingBook)
					"PostingBookOptionMustBeTheSameAsThe_\Current_\Calendar"

		YearBeginDate
			required
			cannot be changed

			CalendarDateRange.Begin	= last BookCalendarsRel.YearBeginDate
			CalendarDateRange.End	= first BookCalendarsRel.YearEndDate


			constraint (CalendarDays > 355)
				"CalendarDateRangeMustBeGreaterThan355Days"

			constraint (YearBeginDate not overlaps CalendarDateRange)
				"CalendarOverlapsAnExistingCalendar"

			constraint (CalendarDays <= 375)
				"CalendarDateRangeCannotExceed375Days"

			constraint (DepreciationPeriods.DepreciationPeriodEndDates.DepreciationPeriodEndDate[1] entered)
				"MustEnterAtLeast_1DepreciationPeriod"

			constraint (DepreciationPeriods.DepreciationPeriodNumbers.DepreciationPeriodNumber[1] entered)
				"MustEnterAtLeast_1DepreciationPeriod"

			constraint (YearBeginDate <= DepreciationPeriods.DepreciationPeriodEndDates.DepreciationPeriodEndDate[1])
				"Period1EndDateCannotBePriorToCalendarBeginDate"

			if (BookCalendar.YearEndDate changed)
				constraint (!FutureYearBookCalendarsRel exists)
					"CannotChangeYear-endDate;FutureCalendarExists"
				if (!PriorYearCalendarIsShortYear)
					constraint (!HistoryYearBookCalendarsRel exists)
						"CannotChangeYearEndDateHistoryCalendarExists"
				constraint (!ClassDepreciationRel exists)
					"CannotChangeYearEndDateClassDepreciationRecordsExist"

		DepreciationPeriodsPerYear
			required
			constraint (DepreciationPeriodsPerYear = (sum DepreciationPeriods.DepreciationPeriodNumbers.DepreciationPeriodNumber[1:55]))
				"TheNumberOfDepreciationPeriodsMustEqualTotalNumberPeriodDefinedForAllEndDates"
			constraint (DepreciationPeriods entered)
				"DepreciationPeriodsMustBeDefined"
			constraint (DepreciationPeriodsPerYear <= 60) 						
				"MaximumPeriodsAllowedPerYearIs_60"
			if (AssetBookRel exists)
				if (!PriorYearCalendarIsShortYear
				or (NumberOfDepreciationPeriodsClosed > 0
				or NumberOfPeriodsInProcess > 0))
					cannot be changed
						"PeriodsPerYearCannotBeChanged;PeriodsClosedOrCloseInProgress"
			if (!CalendarStatus.Current)
				cannot be changed
					"CanOnlyChangePeriodsOnCurrentCalendar"

		PostingBook
			constraint (Book.Currency = Company.Currency)
				"CalendarBookCurrencyMustBeTheSameAsTheCalendarCompanyBaseCurrencyOnAPostingBook"  

		RequiredBook
			constraint (Book.Impairment = false)
				"ImpairmentBooksCannotBeRequired"
			if(RequiredBook changed
			and old RequiredBook = false)
				constraint (ActiveBook)
					"InactiveBookCan'tBeMadeRequired"
			if (RequiredBook 	= true
			and PostingBook 	= true)
				LocalLedger		= Book.Ledger
				constraint (!RequiredBookForLedgerExists)
					"ARequiredPostingBookForThisLedgerAlreadyExists"

		NumberOfDepreciationPeriodsClosed
			constraint (NumberOfDepreciationPeriodsClosed <= DepreciationPeriodsPerYear)
				"PeriodsClosedMustBeLessThanNumberOfPeriodsInCalendar" 
			if (AssetBookRel exists)
				cannot be changed
					"CannotChangeNumberOfClosedPeriodsOfBookCalendarWithAssetsAssigned"
			if (NumberOfDepreciationPeriodsClosed changed)
				constraint (Book.ImpairmentBook not entered)
					"CannotChangeNumberOfClosedPeriodsOfBookCalendar;BookIsAssignedAnImpairmentBook"
				constraint (ImpairmentBookInUseRel not exists)
					"CannotChangeNumberOfClosedPeriodsOfBookCalendar;BookIsAnAssignedImpairmentBook"

		CloseBook
			initial value is 1
			if (!Book.Ledger.CloseLedger)
				constraint (CloseBook = 1)
					"OnlyBooksForTheCloseLedgerCanBeCloseBooks"



	


    Actions

    	Create is a Create Action
    		restricted
    		Action Rules
    			if (!PostingBook)
    				constraint (CloseBook.No)
   						"CloseBookFlagMustBeNoForNonPostingBook"
					constraint (Book.DepreciationType.AssetLevel)
						"NonPostingBooksAreNotValidForClassTypeDepreciation"
 				if (CalendarStatus = "C")
					constraint (NumberOfDepreciationPeriodsClosed < DepreciationPeriodsPerYear)
						"ACurrentBookCalendarCannotBeCreatedWithAllPeriodsClosed"
    			include ValidatePeriods

    	CopyCreate is a Create Action
    		restricted
    		Action Rules
				if (CalendarStatus = "C")
					constraint (NumberOfDepreciationPeriodsClosed < DepreciationPeriodsPerYear)
						"ACurrentBookCalendarCannotBeCreatedWithAllPeriodsClosed"
    			include ValidatePeriods

    	CreateCurrentCalendar is a Create Action
    		valid when (!CurrentExists)

			Action Rules
				CalendarStatus = "C"
				constraint (NumberOfDepreciationPeriodsClosed < DepreciationPeriodsPerYear)
					"ACurrentBookCalendarCannotBeCreatedWithAllPeriodsClosed"

    			if (!PostingBook)
    				constraint (CloseBook.No)
   						"CloseBookFlagMustBeNoForNonPostingBook"
					constraint (Book.DepreciationType.AssetLevel)
						"NonPostingBooksAreNotValidForClassTypeDepreciation"
    			include ValidatePeriods
			Exit Rules
				NumberOfPeriodCloseRuns = LocalCurrentCloseRuns

		ValidateEntityCloseDates is an Instance Action
			restricted
			Action Rules
    			include ValidatePeriods

		SelectBookCalendars is an Instance Action
			valid when (IsTaxBookCal)
			Action Rules
				Selected = true

		InitializeSelection	is an Instance Action
			restricted
			Action Rules
				initialize Selected

		MQProjection				is an Instance Action
			valid when (IsValidForMQTest)
			Action Rules
				for each HYCalendarYearRel
					invoke Update each
						invoked.Convention = "MQ"
						invoked.ComputeOption = "Y"
					CYPurchases += each.YearToDateDepreciation
					invoke Reset each
				ProjectMQ = CYPurchases

		ApplyMidQuarterConvention	is an Instance Action
			valid when (IsValidForMQTest)
			Action Rules
				invoke Update HYCalendarYearRel
					invoked.Convention = "MQ"
					invoked.ComputeOption = "Y"

		ResetAssetBooks		is an Instance Action
			valid when (AbleToReset)
			Action Rules
				invoke Reset MQCalendarYearRel

		ReleaseAssetBooks		is an Instance Action
			valid when (AbleToReset)
			Action Rules
				invoke ReleaseAdjustment MQCalendarYearRel

		CreateHistoryCalendar is an Instance Action
			Parameters
				BookParameter						is a Book
					context of FinanceEnterpriseGroup
				CompanyParameter					is a Company
		        YearBeginDateParameter				is Date
				YearEndDateParameter				is Date
		        OriginalYearEndDate					is Date
		        PeriodsPerYearParameter				is Numeric 3
		        DepreciationPeriodsParameter		is a DepreciationPeriods
		        NumberOfDepreciationPeriodsClosed	is Numeric 3
		        RequiredBookParameter				is Boolean
		        PostingBookParameter				is Boolean
		        ShortYearParameter    				is Boolean
		        CalendarStatus						is AlphaUpper 1
		        NumberOfPeriodCloseRuns   			is Numeric 2
		        NumberOfPeriodsInProcess    		is a NumberOfFields
		        InProcessFiscalPeriodEndDate		is Date
		        DepreciationCalculated  			is Boolean
		        Used                        		is Boolean

			Parameter Rules
				BookParameter
					initial value is Book
					required

				CompanyParameter
					initial value is Company
					required
				YearBeginDateParameter
					required
				YearEndDateParameter
					required
					initial value is (last BookCalendarsRel.YearBeginDate - 1)
					if (OriginalYearEndDate entered)
						constraint (OriginalYearEndDate > YearEndDateParameter)
							"ShortYearEndDateMustBePriorToOriginalYearEndDate"
				PeriodsPerYearParameter
					initial value is DepreciationPeriodsPerYear
					constraint (PeriodsPerYearParameter = DepreciationPeriodsPerYear)
						"PeriodsPerYearMustEqualCurrentYearNumberOfPeriods"

				NumberOfDepreciationPeriodsClosed
					initial value is DepreciationPeriodsPerYear
					constraint (NumberOfDepreciationPeriodsClosed <= DepreciationPeriodsPerYear)
						"PeriodsClosedCannotExceedNumberOfDepreciationPeriods"

				CalendarStatus
					initial value is "H"

				OriginalYearEndDate
					if (ShortYearParameter = false)
						cannot be entered

				ShortYearParameter
					if (ShortYearParameter = true)
						constraint (OriginalYearEndDate entered)
							"ShortYearRequiresOriginalYearEndDate"

			Action Rules
				LocalDate								= last BookCalendarsRel.YearBeginDate
				LocalDate 								-= 1
				constraint (DepreciationPeriodsParameter entered)
					"DefinePeriodEndDates"
				constraint (PeriodsPerYearParameter = (sum DepreciationPeriodsParameter.DepreciationPeriodNumbers.DepreciationPeriodNumber[1:55]))
					"DepreciationPeriodsMustEqualTheTotalNumberOfPeriodsAssignedToTheCalendarsEndDates"

				constraint (YearEndDateParameter		= LocalDate)
					"CalendarsMustBeCreatedSequentially;TheNextExpectedHistoryCalendarEndDateIs<LocalDate>"
    			invoke HistoryCalendarCreateAction
    				invoked.FinanceEnterpriseGroup		= FinanceEnterpriseGroup
    				invoked.Book						= Book
    				invoked.Company						= Company
    				invoked.YearBeginDate				= YearBeginDateParameter
					invoked.BookCalendar.YearEndDate	= YearEndDateParameter
					invoked.RequiredBook				= RequiredBookParameter
					invoked.PostingBook					= PostingBookParameter
					invoked.ShortYear					= ShortYearParameter
					invoked.CalendarStatus 				= "H"
			        invoked.DepreciationPeriods 		= DepreciationPeriodsParameter
   			        invoked.DepreciationPeriodsPerYear 	= PeriodsPerYearParameter
 			        invoked.NumberOfDepreciationPeriodsClosed	= NumberOfDepreciationPeriodsClosed
	   				invoked.NumberOfPeriodCloseRuns 	= LocalHistoryCloseRuns

        HistoryCalendarCreateAction is a Create Action
        	restricted

			Action Rules
				CalendarStatus = "H"
    			include ValidatePeriods
				NumberOfDepreciationPeriodsClosed 	= DepreciationPeriodsPerYear
				NumberOfPeriodCloseRuns				= DepreciationPeriodsPerYear

        CreateFutureCalendar is an Instance Action
			Parameters
				BookParameter						is a Book
					context of FinanceEnterpriseGroup
				CompanyParameter					is a Company
		        YearBeginDateParameter				is Date
				YearEndDateParameter				is Date
		        OriginalYearEndDate					is Date
		        PeriodsPerYearParameter				is Numeric 3
		        DepreciationPeriodsParameter		is a DepreciationPeriods
		        NumberOfDepreciationPeriodsClosed	is Numeric 3
		        RequiredBookParameter				is Boolean
		        PostingBookParameter				is Boolean
		        ShortYear             				is Boolean
		        CalendarStatus						is AlphaUpper 1
		        NumberOfPeriodCloseRuns   			is Numeric 2
		        NumberOfPeriodsInProcess    		is a NumberOfFields
		        InProcessFiscalPeriodEndDate		is Date
		        DepreciationCalculated  			is Boolean
		        Used                        		is Boolean

			Parameter Rules
				BookParameter
					initial value is Book
					required
				CompanyParameter
					initial value is Company
					required
				YearBeginDateParameter
					required
					initial value is (first BookCalendarsRel.YearEndDate + 1)
				YearEndDateParameter
					required
				PeriodsPerYearParameter
					initial value is DepreciationPeriodsPerYear
				CalendarStatus
					initial value is "F"

    		Action Rules
				LocalDate								= first BookCalendarsRel.YearEndDate
				LocalDate 								+= 1
				constraint (YearBeginDateParameter		= LocalDate)
					"TheNextExpectedFutureCalendarBeginDateIs<LocalDate>"
				constraint (DepreciationPeriodsParameter entered)
					"DefinePeriodEndDates"

    			invoke FutureCalendarCreateAction
    				invoked.FinanceEnterpriseGroup		= FinanceEnterpriseGroup
    				invoked.Book						= Book
    				invoked.Company						= Company
    				invoked.YearBeginDate				= YearBeginDateParameter
					invoked.BookCalendar.YearEndDate	= YearEndDateParameter
					invoked.CalendarStatus 				= "F"
					invoked.RequiredBook				= RequiredBookParameter
					invoked.PostingBook					= PostingBookParameter
   			        invoked.DepreciationPeriodsPerYear 	= PeriodsPerYearParameter
			        invoked.DepreciationPeriods 		= DepreciationPeriodsParameter



        FutureCalendarCreateAction is a Create Action
			restricted
			Action Rules
    			include ValidatePeriods

      	CopyCurrentBookCalendar is an Instance Action
      		valid when (IsCurrent)
        	Parameters
				PrmToCompany							is an AssetCompany
					default label is "Company"
				PrmToBook								is like Book
					default label is "Book"

				PrmToBookDescription					is like Description
					default label is "Description"
				PrmToLedger								is a Ledger
					default label is "Ledger"
				PrmDepreciationType						is AlphaUpper 1
					default label is "DepreciationType"
		        	States
        				AssetLevel	value is "A"
        				ClassLevel	value is "C"
				PrmConvention							is a Convention
					default label is "Convention"
				PrmToCurrency							is a Currency
					default label is "BookCurrency"
				PrmToPostCurrency						is Numeric 1
					default label is "TransactionCurrency"
		        	States
        				Book	value is 0
        				Asset	value is 1
				PrmActive								is Boolean
					default label is "Active"
        		PrmMethodSwitch							is Boolean
        			default label is "MethodSwitch"
				PrmTrackDepreciationHistory				is Boolean
					default label is "TrackDepreciationHistory"
				PrmPostHistory							is Boolean
					default label is "PostHistory"
				PrmPostingBook							is Boolean
					default label is "Posting"
				PrmRequiredBook							is Boolean
					default label is "Required"
				PrmImpairment							is Boolean
					default label is "UseForImpairment"
        		PrmImpairmentBook						is a Book
        			default label is "ImpairmentBook"
				PrmCloseBook							is Numeric 1  	

					default label is "CloseBook"
		            States
		                Yes  	value is 2
		                No   	value is 1
				PrmBookRegulation						is a BookRegulation

        	Parameter Rules
        		PrmToCompany
        			initial value is Company
        			default to Company

				PrmToBook
					initial value is Book
					LocalBook	= PrmToBook
					required
					constraint (!LocalBookRel.CurrentCalendarExists)
						"CurrentCalendarAlreadyExistsForToBook"

				PrmToBookDescription
					if (LocalBookRel not exists)
						if (PrmToBookDescription not entered)
							PrmToBookDescription = "CopyOf<Book.Description>"
					else
						confirmation required
							"Book<LocalBook>AlreadyExists;BookDescriptionWillNotBeUpdated"

				PrmToLedger
					initial value is Book.Ledger
					default to Book.Ledger
					if (LocalBookRel not exists)
						required
					else
						confirmation required
							"Book<LocalBook>AlreadyExists;BookLedgerWillNotBeUpdated"

				PrmDepreciationType
					initial value is Book.DepreciationType
	    			if (PrmDepreciationType.ClassLevel)
	    				constraint (PrmPostingBook)
	   						"DepreciationTypeMustBeAssetForNonPostingBook"
					required

				PrmConvention
					initial value is Book.Convention
					default to Book.Convention

				PrmToCurrency
					initial value is Book.Currency
					default to Book.Currency
					if (LocalBookRel not exists)
						required
					else
						confirmation required
							"Book<LocalBook>AlreadyExists;BookCurrencyWillNotBeUpdated"
				PrmToPostCurrency
					if (LocalBookRel  exists)
						confirmation required
							"Book<LocalBook>AlreadyExists;PostCurrencyWillNotBeUpdated"
				PrmActive
					initial value is true
        		PrmMethodSwitch
        			initial value is Book.MethodSwitch
				PrmTrackDepreciationHistory
					initial value is Book.TrackDepreciationHistory
				PrmPostHistory
					initial value is Book.PostHistory
				PrmPostingBook
					initial value is PostingBook
				PrmRequiredBook
					initial value is RequiredBook
				PrmImpairment
					constraint (!PrmMethodSwitch)
						"ImpairmentBookCannotImplementAMethodSwitch"
					constraint (!PrmRequiredBook)
						"ImpairmentBookCannotBeRequired"
					constraint (PrmImpairmentBook not entered)
						"ImpairmentTypeBookCannotHaveAnImpairmentBookAssignedToIt"
					constraint (PrmActive)
						"ImpairmentBookMustBeActive"
				PrmImpairmentBook
					constraint (PrmImpairmentBook.Impairment)
						"ImpairmentBookMustHaveTheImpairmentOptionSelected"
				PrmCloseBook
					initial value is CloseBook
	    			if (PrmCloseBook = 2)
	    				constraint (PrmPostingBook)
	   						"CloseBookFlagMustBeNoForNonPostingBook"
					required
				PrmBookRegulation
					initial value is Book.BookRegulation

			Local Fields
				LocalCompany						is like AssetCompany
        		LocalDescription					is like Description
				LocalConvention						is like Convention
	        	LocalCurrency						is like Currency
	        	LocalPostCurrency					is Numeric 1
        		LocalDepreciationType 				is AlphaUpper 1
        		LocalBookFormula					is like BusinessClassCompute
        		LocalClassBalanceType				is Numeric 1
        		LocalReportingBasis					is like ReportingBasis
        		LocalActive							is Boolean
        		LocalMethodSwitch					is Boolean
        		LocalTrackDepreciationHistory 		is Boolean
        		LocalPostHistory					is Boolean
				LocalCloseBook						is Numeric 1

			Entrance Rules
				if (LocalBookRel not exists)
					confirmation required
						"CopyToBookDoesNotExist;CreateNewBook<PrmToBook>From<Book>?"
	        		LocalBook							= PrmToBook
	        		LocalCompany						= PrmToCompany
	        		LocalDescription					= PrmToBookDescription
	        		LocalLedger 						= PrmToLedger
	        		LocalActive							= PrmActive
					LocalConvention						= PrmConvention
	        		LocalMethodSwitch					= PrmMethodSwitch
		        	if (PrmToCurrency entered)
		        		LocalCurrency					= PrmToCurrency
		        	else
		        		LocalCurrency					= Book.Currency
					if (PrmToPostCurrency entered)
						LocalPostCurrency				= PrmToPostCurrency
					else
						LocalPostCurrency				= Book.PostCurrency
	        		LocalTrackDepreciationHistory 		= PrmTrackDepreciationHistory
	        		LocalDepreciationType 				= PrmDepreciationType
	        		LocalBookFormula					= Book.BookFormula
	        		LocalClassBalanceType				= Book.ClassBalanceType
        			LocalReportingBasis					= Book.ReportingBasis
        			if (PrmCloseBook = 2)
	        			LocalCloseBook					= 0
	        		else
	        			LocalCloseBook 					= 1
					if (PrmPostingBook = true)
						if (PrmRequiredBook = true)
							constraint (LocalCompanyPostingBookRel not exists)
								"ARequiredPostingBookForThisLedgerAlreadyExists"

					invoke Create Book
						invoked.FinanceEnterpriseGroup 	= FinanceEnterpriseGroup
						invoked.Book 					= LocalBook
						invoked.Description				= LocalDescription
	        			invoked.Active					= LocalActive
						invoked.Convention				= LocalConvention
		        		invoked.MethodSwitch			= LocalMethodSwitch
						invoked.Currency			    = LocalCurrency
						invoked.PostCurrency			= LocalPostCurrency
	    				invoked.PostHistory				= PrmPostHistory
						invoked.Ledger					= PrmToLedger
						invoked.TrackDepreciationHistory	= LocalTrackDepreciationHistory
						invoked.DepreciationType		= LocalDepreciationType
						invoked.BookFormula			    = LocalBookFormula
						invoked.ClassBalanceType		= LocalClassBalanceType
        				invoked.ReportingBasis			= LocalReportingBasis
	    				invoked.Impairment				= PrmImpairment
	    				invoked.ImpairmentBook			= PrmImpairmentBook
						invoked.BookRegulation			= PrmBookRegulation
				else
					if (PrmCloseBook = 2)
	        			LocalCloseBook					= 0
	        		else
	        			LocalCloseBook 					= 1

			Exit Rules
    			invoke CopyCreate
					invoked.FinanceEnterpriseGroup 	= FinanceEnterpriseGroup
    				invoked.Book					= PrmToBook
					invoked.Company					= PrmToCompany
    				invoked.PostingBook				= PrmPostingBook
    				invoked.RequiredBook			= PrmRequiredBook
    				invoked.CloseBook				= LocalCloseBook
					fill in fields from this instance


      	CreateHistoryCalendarsFromYear is an Instance Action
        	Parameters
				CalendarBeginYear				is Year

        	Parameter Rules
				CalendarBeginYear
					required
					constraint (CalendarBeginYear < YearBeginDate year)
						"CalendarBeginYearMustBePriorToTheYearOfTheCurrentCalendarBeginDate"
					constraint (CalendarBeginYear < first HistoryCalendarsRel.YearBeginDate year)
						"InvalidBeginYear;CalendarBeginYearIsWithinAnExistingCalendar"

			Local Fields
        		LocalBeginDate						is Date
        		LocalEndDate						is Date
        		NewCalendarBeginDate				is Date
        		NewCalendarEndDate					is Date
        		LocalDisplayPeriod					is Date
        		LocalArrayCounter					is Numeric 2
        		YearCounter							is Numeric 2
	        	StartDepreciationPeriods			is a DepreciationPeriods
        		LocalDepreciationPeriods			is a DepreciationPeriods
        		LocalNumberOfYears					is Numeric 2
			Entrance Rules
				if (!PostingBook)
					CloseBook = 1
				if (HistoryCalendarsRel exists)
					LocalNumberOfYears				= (first HistoryCalendarsRel.YearBeginDate year - CalendarBeginYear)
					LocalEndDate					= first CalendarsByDateRel.BookCalendar.YearEndDate
					LocalBeginDate					= first CalendarsByDateRel.YearBeginDate
					StartDepreciationPeriods		= first CalendarsByDateRel.DepreciationPeriods
				else
					LocalNumberOfYears				= (YearBeginDate year - CalendarBeginYear)
					LocalEndDate					= BookCalendar.YearEndDate
					LocalBeginDate					= YearBeginDate
					StartDepreciationPeriods 		= DepreciationPeriods

			Action Rules
				YearCounter			= 1
				while (YearCounter <= LocalNumberOfYears)
					NewCalendarEndDate 		= (LocalBeginDate - 1)
					NewCalendarBeginDate 	= (LocalBeginDate - 1 year)
					LocalArrayCounter 		= 1
					while LocalArrayCounter <= 55
						if (StartDepreciationPeriods.DepreciationPeriodEndDates.DepreciationPeriodEndDate[LocalArrayCounter] entered)
							if (StartDepreciationPeriods.DepreciationPeriodEndDates.DepreciationPeriodEndDate[LocalArrayCounter + 1] entered)
								LocalDepreciationPeriods.DepreciationPeriodEndDates.DepreciationPeriodEndDate[LocalArrayCounter] = (StartDepreciationPeriods.DepreciationPeriodEndDates.DepreciationPeriodEndDate[LocalArrayCounter] - (YearCounter as years))
								LocalArrayCounter += 1
							else
								LocalDepreciationPeriods.DepreciationPeriodEndDates.DepreciationPeriodEndDate[LocalArrayCounter] = NewCalendarEndDate
								LocalArrayCounter = 56

					invoke Create BookCalendar
	    				invoked.FinanceEnterpriseGroup				= FinanceEnterpriseGroup
	    				invoked.Book								= Book
	    				invoked.Company								= Company
						invoked.BookCalendar.YearEndDate 			= NewCalendarEndDate
						invoked.YearBeginDate 						= NewCalendarBeginDate
				        invoked.CalendarStatus 						= "H"
				        invoked.NumberOfDepreciationPeriodsClosed	= DepreciationPeriodsPerYear
				        invoked.NumberOfPeriodCloseRuns       		= DepreciationPeriodsPerYear
				        invoked.NumberOfPeriodsInProcess          	= blank
				        invoked.InProcessFiscalPeriodEndDate     	= blank
				        invoked.DepreciationCalculated            	= blank
				        invoked.Used                             	= blank
				        invoked.OriginalYearEndDate              	= blank
						invoked.DepreciationPeriods.DepreciationPeriodNumbers	= DepreciationPeriods.DepreciationPeriodNumbers
						invoked.DepreciationPeriods.DepreciationPeriodEndDates 	= LocalDepreciationPeriods.DepreciationPeriodEndDates
						invoked.ShortYear							= false
						invoked.RequiredBook						= RequiredBook
						invoked.PostingBook							= PostingBook
	   			        invoked.DepreciationPeriodsPerYear 			= DepreciationPeriodsPerYear
	   			        invoked.CloseBook							= CloseBook


	 				LocalBeginDate		= NewCalendarBeginDate
        			LocalArrayCounter 	= 0
					YearCounter 		+= 1


        Update is an Update Action
			Field Rules
				PostingBook
					if (AssetBookRel exists)
						cannot be changed
							"CannotChangePostingFlag;BookHasBeenAssignedToAssets"
				DepreciationPeriodsPerYear
					if (AssetBookRel exists)
						if (!PriorYearCalendarIsShortYear
						or (NumberOfDepreciationPeriodsClosed > 0
						or NumberOfPeriodsInProcess > 0))
							cannot be changed
								"DepreciationPeriodsCannotBeChanged;PeriodsClosedOrCloseInProgress"
				CalendarStatus
					cannot be changed
						"StatusIsUpdatedByClose;CannotBeManuallyMaintained"

			Entrance Rules
				if (PostingBook changed
				or	RequiredBook changed)
					for each BookCalendarsRel
						invoke NoEditUpdate each
							invoked.PostingBook		= PostingBook
							invoked.RequiredBook	= RequiredBook

			Action Rules
				if (NumberOfDepreciationPeriodsClosed changed
				and NumberOfDepreciationPeriodsClosed not < DepreciationPeriodsPerYear)
					constraint (NumberOfDepreciationPeriodsClosed < DepreciationPeriodsPerYear)
						"ACurrentBookCalendarCannotBeChangedToHaveAllPeriodsClosed"
				constraint (Company.AssetCompany.PendingYearEndCount not entered)
					"CannotChangeWithYear-endPending" 
				constraint (Company.AssetCompany.PeriodCloseRelease != "X")
					"PeriodOrYear-endCloseInProcess" 
				if (CloseBook changed)
					if (CloseBook = 1)
						if (CloseControlOn)
							constraint (OtherCloseBooksExist)
								"CloseBookIsRequiredWhenCloseControlIsTurnedOn"
					if (Book.ImpairmentBook entered)
						invoke NoEditUpdate CurrentImpairmentBookCalendarRel
							invoked.CloseBook = CloseBook
					if (Book.Impairment)
						if (ImpairmentBookInUseRel exists)
							for each ImpairmentBookInUseRel
								constraint (each.CloseBook = CloseBook)
									"AnImpairmentCloseBookFlagMustBeTheSameAsItsDepreciationBook"
    			if (TransientYearEndDate entered)
   					invoke UpdateEndDate
    			include ValidatePeriods
    		Exit Rules
				if (!PostingBook)
					CloseBook = 1
   				if (CalendarStatus = "H")
    				NumberOfPeriodCloseRuns = LocalHistoryCloseRuns
   				if (CalendarStatus = "C")
   					NumberOfPeriodCloseRuns = LocalCurrentCloseRuns

		NoEditUpdate is an Update Action
			restricted
			bypass field rules


        Delete is a Delete Action
			valid when (DeleteIsAValidAction)
			Action Rules
   				if (CalendarStatus = "C"
  				or CalendarStatus = "H")
					constraint (!Book.IsAssignedImpairmentBook)
						"CannotDelete;ImpairmentBookCalendar"
    			if (CloseControlOn)
    				constraint (OtherCloseBooksExist)
    					"YouCannotDeleteTheLastCloseBookWhileCloseControlIsOnForAssetSystem"
				if (CalendarStatus = "C"
				and NumberOfDepreciationPeriodsClosed	= DepreciationPeriodsPerYear)	
					initialize LocalPeriodCount   							
					for each CurrentYearBookCalendarsRel
						if (each.NumberOfDepreciationPeriodsClosed	= each.DepreciationPeriodsPerYear)
							LocalPeriodCount += 1
					if (Company.AssetCompany.PendingYearEndCount > 0
					and Company.AssetCompany.PendingYearEndCount >= LocalPeriodCount)
						invoke Update AmcontrolRel
							invoked.PendingYearEndCount -= 1


		SetDepreciationCalculated is an Instance Action
			restricted
			Parameters
				PrmDepreciationCalculated		is Boolean

			Action Rules
				DepreciationCalculated	= PrmDepreciationCalculated

		UpdateEndDate is an Instance Action
			valid when (IsCurrentAndPriorShortYear)
			restricted
			Action Rules
				if (PriorYearCalendarIsShortYear)
					BookCalendar.YearEndDate = TransientYearEndDate

		SetUsed is an Instance Action
			restricted
			Parameters
				PrmUsed		is Boolean

			Action Rules
				Used	= PrmUsed

		SetAsUsed is an Instance Action
			restricted
			Action Rules
				Used	= true

		RefreshTaxAmounts is an Instance Action
			restricted
			valid when (IsCurrent)
			Parameters
				UseYearToDateDepreciation is Boolean
				UseYearEndDepreciation is Boolean
			Parameter Rules
				UseYearToDateDepreciation
					if (UseYearToDateDepreciation = true)
						constraint (UseYearEndDepreciation = false)
							"SelectEitherYearToDateOrYearEndDepreciationOption"
			Action Rules
				LocalUseYearEndDepreciation = UseYearToDateDepreciation
				include CalculateTaxReport

		RefreshHistoryTaxAmounts is an Instance Action
			restricted
			default label is "RefreshTaxAmounts"
			valid when (!IsCurrent)
			Action Rules
				include CalculateTaxReport

		RebuildCurrentYearEndDateAndBalances is an Instance Action
			restricted
			Local Fields
				BackgroundGroup				is AlphaUpper up to 200
				BackgroundGroupAsyncId      is an AsyncActionRequest
			Action Rules
				BackgroundGroup = "UpdateAssetTransaction"

				invoke UpdateCurrentYearTransDate AssetTransaction in background group (BackgroundGroup)
					assign async action request id to BackgroundGroupAsyncId
					invoked.PrmCompany			= Company
					invoked.PrmBook				= Book
					invoked.PrmYearEndDate		= CurrentYearBookCalendarRel.YearEndDate
					invoked.PrmYearBeginDate	= CurrentYearBookCalendarRel.YearBeginDate

				invoke UpdateCurrentYearTransDate AssetBookTransaction in background
					run after BackgroundGroupAsyncId
					assign async action request id to BackgroundGroupAsyncId
					invoked.PrmCompany			= Company
					invoked.PrmBook				= Book
					invoked.PrmYearEndDate		= CurrentYearBookCalendarRel.YearEndDate
					invoked.PrmYearBeginDate	= CurrentYearBookCalendarRel.YearBeginDate 

		UpdateTransactionYearEndDateAndBalances is a Set Action
			restricted
			Parameters
				PrmFinanceEnterpriseGroup	is a FinanceEnterpriseGroup
		    		default label is "FinanceEnterpriseGroup"
		        PrmBook						is a Book
		        	default label is "Book"
		        	context of PrmFinanceEnterpriseGroup
		        PrmCompany                 	is an AssetCompany
		        	default label is "Company"
				PrmCompanyGroup            	is a GeneralLedgerCompanyGroup
		        	default label is "CompanyGroup"
				PrmYearBeginDate	is Date
					default label is "CalendarBeginDate"
				PrmYearEndDate		is Date
					default label is "CalendarEndDate"
				PrmUpdateTransactionYearEndDate is Boolean
					default label is "UpdateTransactionYearEndDate"
				PrmRebuildShortYearTransactions is Boolean
					default label is "UpdateShortYearTransactions"
				PrmQueue						is Numeric 2
				PrmThread						is Numeric 2
			Parameter Rules
				PrmUpdateTransactionYearEndDate
					if (PrmUpdateTransactionYearEndDate entered)
						constraint(PrmRebuildShortYearTransactions not entered)
							"SelectEitherUpdateTransactionYearEndDateOrUpdateShortYearTransactionToRun"
				PrmBook
					if (PrmRebuildShortYearTransactions)
						required
				PrmCompany
					if (PrmRebuildShortYearTransactions 
					and (PrmCompany not entered
				    and PrmCompanyGroup not entered))
						required
							"MustEnterEitherCompanyOrCompanyGroup"
				PrmCompanyGroup
					LocalGeneralLedgerCompanyGroup = PrmCompanyGroup
				PrmYearBeginDate
					LocalBeginDate	= PrmYearBeginDate
					LocalCompany	= PrmCompany
					LocalBook		= PrmBook
					constraint (PrmYearBeginDate = YearBeginDateCalendarRel.YearBeginDate)
						"YearBeginDateShouldBeEqualToBookCalendarBeginDate"
				PrmYearEndDate
					LocalEndDate	= PrmYearEndDate
					constraint (PrmYearEndDate > PrmYearBeginDate)
						"YearEndDateShouldBeGreaterThanYearBeginDate"
					constraint (PrmYearEndDate = YearEndDateCalendarRel.YearEndDate)
						"YearEndDateShouldBeEqualToBookCalendarEndDate"
				PrmQueue
					initial value is 4
					default to 4
				
			Local Fields
				BackgroundGroup				is AlphaUpper up to 200
				BackgroundGroupAsyncId      is an AsyncActionRequest
			Instance Selection
				where (PrmRebuildShortYearTransactions
				and    FinanceEnterpriseGroup = PrmFinanceEnterpriseGroup
				and    Book = PrmBook
				and    (PrmCompany not entered or Company = PrmCompany)
				and    (PrmCompanyGroup not entered or CompanyGroupRel exists)
				and   (PrmYearBeginDate not entered
				or    (PrmYearBeginDate entered 
				and    YearBeginDate >= PrmYearBeginDate))
				and   (PrmYearEndDate not entered
				or    (PrmYearEndDate entered
				and    YearEndDate <= PrmYearEndDate)))
			
			Action Rules
				Empty Set Rules
					if (PrmUpdateTransactionYearEndDate)
						invoke UpdateYearEndDate AssetTransaction in background
							run after BackgroundGroupAsyncId
							assign async action request id to BackgroundGroupAsyncId

						invoke UpdateYearEndDate AssetBookTransaction in background
							run after BackgroundGroupAsyncId
							assign async action request id to BackgroundGroupAsyncId

						invoke RebuildAssetTransactionSummary AssetTransaction in background
							run after BackgroundGroupAsyncId
							assign async action request id to BackgroundGroupAsyncId

						invoke RebuildAssetTransactionSummary AssetBookTransaction in background
							run after BackgroundGroupAsyncId
							assign async action request id to BackgroundGroupAsyncId
				Set Rules
					Exit Rules
						if (PrmRebuildShortYearTransactions)
							LocalBook		= PrmBook
							LocalBeginDate	= PrmYearBeginDate
							LocalEndDate	= PrmYearEndDate
							LocalFinanceEnterpriseGroup = PrmFinanceEnterpriseGroup
							if (PrmCompanyGroup entered)
								for each CompanyGroupRel
									LocalCompany	= each.Company
									invoke DeleteSummaryRecords AssetTransactionSummary in background
										run after BackgroundGroupAsyncId
										assign async action request id to BackgroundGroupAsyncId
										invoked.PrmFinanceEnterpriseGroup	= LocalFinanceEnterpriseGroup
										invoked.PrmCompany			= LocalCompany
										invoked.PrmBook				= LocalBook
									
									invoke RebuildAssetTransactionSummary AssetTransaction in background
										run after BackgroundGroupAsyncId
										assign async action request id to BackgroundGroupAsyncId
										invoked.PrmCompany			= LocalCompany
										invoked.PrmBook				= LocalBook
										invoked.PrmUpdateDateFlag	= true
									
									invoke RebuildAssetTransactionSummary AssetBookTransaction in background
										run after BackgroundGroupAsyncId
										assign async action request id to BackgroundGroupAsyncId
										invoked.PrmCompany			= LocalCompany
										invoked.PrmBook				= LocalBook
										invoked.PrmUpdateDateFlag	= true
							else
								if (PrmCompany entered)
									LocalCompany	= PrmCompany
									invoke DeleteSummaryRecords AssetTransactionSummary in background
										run after BackgroundGroupAsyncId
										assign async action request id to BackgroundGroupAsyncId
										invoked.PrmFinanceEnterpriseGroup	= LocalFinanceEnterpriseGroup
										invoked.PrmCompany			= LocalCompany
										invoked.PrmBook				= LocalBook

									invoke RebuildAssetTransactionSummary AssetTransaction in background
										run after BackgroundGroupAsyncId
										assign async action request id to BackgroundGroupAsyncId
										invoked.PrmCompany			= LocalCompany
										invoked.PrmBook				= LocalBook
										invoked.PrmUpdateDateFlag	= true
										
									invoke RebuildAssetTransactionSummary AssetBookTransaction in background
										run after BackgroundGroupAsyncId
										assign async action request id to BackgroundGroupAsyncId
										invoked.PrmCompany			= LocalCompany
										invoked.PrmBook				= LocalBook
										invoked.PrmUpdateDateFlag	= true

				Instance Rules
					if (PrmRebuildShortYearTransactions)
						if (CalendarStatus.Historic)
							NumberOfDepreciationPeriodsClosed = DepreciationPeriodsPerYear

						BackgroundGroup = "UpdateAssetTransaction"

						initialize PrmThread
						while (PrmThread < PrmQueue)
							invoke UpdateTransDate AssetTransaction in background group (BackgroundGroup)
								assign async action request id to BackgroundGroupAsyncId
								invoked.PrmBook				= PrmBook
								invoked.PrmCompany			= Company
								invoked.PrmYearBeginDate	= YearBeginDate
								invoked.PrmYearEndDate		= YearEndDate
								invoked.PrmQueue			= PrmQueue
								invoked.PrmThread			= PrmThread
							PrmThread += 1

						initialize PrmThread
						while (PrmThread < PrmQueue)
							invoke UpdateTransDate AssetBookTransaction in background
								run after BackgroundGroupAsyncId
								assign async action request id to BackgroundGroupAsyncId
								invoked.PrmBook				= PrmBook
								invoked.PrmCompany			= Company
								invoked.PrmYearBeginDate	= YearBeginDate
								invoked.PrmYearEndDate		= YearEndDate
								invoked.PrmQueue			= PrmQueue
								invoked.PrmThread			= PrmThread
							PrmThread += 1


		PflowApprove is an Instance Action  
			restricted
			Action Rules
				DepreciationCalculationStatus	= DepreciationCalculationStatus.Approved
				initialize ApprovalLevel
				initialize Approver
				initialize ApproverTeam
				include ApprovedEmailNotification
				
		PflowReject is an Instance Action
			restricted
			action comment required
			Action Rules
				DepreciationCalculationStatus	= DepreciationCalculationStatus.Rejected
				initialize ApprovalLevel
				initialize Approver
				initialize ApproverTeam

				LocalComment = action comment
				include RejectionEmailNotification
		
		UpdateApprovalLevel is an Instance Action
			restricted
			Parameters
				ParmEscalate	is Boolean
				ParmReassign	is Boolean
			Action Rules
				if (ParmEscalate)
					include GetNextEscalationApprovalLevel
					ApprovalLevel		= LocalApprovalLevel
					Approver			= LocalApprover
					ApproverTeam		= LocalApproverTeam
				else
					include GetNextApprovalLevel
					ApprovalLevel		= LocalApprovalLevel
					Approver			= LocalApprover
					ApproverTeam		= LocalApproverTeam
		
		ProcessFlow is an Instance Action
			restricted
			Action Rules
				ApprovalCode = Company.ApprovalCode
				initialize ApprovalLevel
				initialize Approver
				initialize ApproverTeam	
				constraint (ApprovalCode.HasApprovalLevels)
					"CannotSubmitForApproval;TheApprovalCodeHasNoApprovalLevels"
				constraint (!ApprovalCode.HasTeamWithNoMembers)
					"CannotSubmitForApproval;TheApprovalCodeHasATeamWithNoMembers"
				constraint (!ApprovalCode.HasInvalidEscalations)
					"CannotSubmitForApproval;TheApprovalCodeHasInvalidEscalationSettings"
				constraint (!ApprovalCode.HasInactiveResources)
					"CannotSubmitForApproval;TheApprovalCodeHasInactiveResources"
				include GetNextApprovalLevel
				ApprovalLevel	= LocalApprovalLevel
				Approver		= LocalApprover
				ApproverTeam	= LocalApproverTeam
				
				invoke Cancel PfiWorkunitRel
				include InitiateApprovalProcessFlow
		
		
		



