PayablesInvoicePayment is a BusinessClass
	owned by ap
	prefix is APP
	classic name is APPAYMENT

	Ontology
		symbolic key is PayablesInvoicePayment
			classic set name is APPSET1
			classic name for PayablesInvoicePayment.PaymentSequence is SEQ-NBR
			classic name for PayablesInvoicePayment.VoidSequence is VOID-SEQ


	Patterns
		implements InlineUserFields
			size is 1000
		implements ContextualParent
		implements StaticJava
		implements BODId
		disable AuditIndex
		implements AnalyticCube
			disable continuous update
			dynamically calculate totals
			write to base level only
		implements ForceUIRefreshOnStale		
		implements Archivable

	Transient Fields


		TransientReportablePaymentAmount is an InternalAmount	
			precision is OutputNumberOfDecimals
				round to precision
			derive value from DerivedReportablePaymentAmount			
		TransientAllowableAmount	is an InternalAmount			
			precision is OutputNumberOfDecimals
				round to precision
			derive value from DerivedAllowableAmount

		TransientAllowChange		is Boolean
		TransientCurrencyRefresh	is Boolean
		TransientDeleteFromHeader	is Boolean		
		TransientReleaseAfterCreate	is Boolean
		SkipPayablesDiscount		is Boolean
		BypassActiveCodeBlockEdit                   
		TransientPaymentAmount		is an InternalAmount		
			precision is OutputNumberOfDecimals
				round to precision
		TransientRecurrUpdateSwitch	is Boolean
		TransientUpdatePaymentBalance	is Boolean
		TransientBypassUpdateEdit	is Boolean	
		TransientUpdateFromBatch	is Boolean
		TransEnableAPToARInterface	is Boolean
		TransientBypassRevalueEdit  is Boolean
		OverrideSeparatePayment		is a BooleanOverride		
		OverridePayImmediately		is a BooleanOverride		
		OverrideEnclosure			is a BooleanOverride		
		TransientICBPaymentSelectAmount	is like InternationalAmount 
			derive value from DerivedICBPaymentSelectAmount
		TransientSettlementDetailLineDistributionSetState is Numeric size 1 
			States
				OutOfBalance				value is 1
				ReadyForProcessing 			value is 2
				Processed					value is 3
			derive value from DerivedSettlementDetailLineDistributionSetState
		TransientGLCalendarPeriod	is a GeneralLedgerCalendarPeriod	
			derive value from PayablesInvoice.GeneralLedgerCalendarPeriodXrefRel.GeneralLedgerCalendarPeriod
		TransientPaidLate					is Boolean
			default label is "PaidLate"
			derive value from DerivedPaidLate

	Context Fields
		InvoiceDateRange			is a DateRange	
		PaymentDueDateRange			is a DateRange2	
		PaymentDiscountDateRange	is a DateRange3	
		CheckDateRange				is a DateRange4	
		SupplyManagementReportContext is a SupplyManagementReport 
		ContextCashCode				is a CashCode
		CashLedgerSourceRecord
		CashLedgerPayablesPayment
		GeneralLedgerCompanyGroup
		IncludeUnreleased			is a BooleanB	
		IncludePendingApproval		is a BooleanC	
		IncludeApproved				is a BooleanD	
		IncludeAmended				is a BooleanE	
		ExcludeReleased				is a BooleanF	
		IncludeAllInvoices			is a BooleanG	
		CashRequirementsReport
		AuditDateRange				is a DateRange	
		ReportableAmountRange		is an AmountRange	
		PaymentAmountRange			is an AmountRange2	
		ContextVendorGroup			is a VendorGroup
		ContextSettlementIDForContext is a SettlementIDForContext 
		CutoffDate									
		AgingMethod									
		TaxIdentificationType						
		TaxID										
		FSMInboundBODTracker
		ReportableIncomeGroup   is a PayablesReportableIncomeGroup		
		
	Persistent Fields
		Vendor									is a snapshot of PayablesInvoice.Vendor
		Invoice									is a snapshot of PayablesInvoice.Invoice
		Suffix									is a snapshot of PayablesInvoice.Suffix
		CancelSequence							is a snapshot of PayablesInvoice.CancelSequence
		VoidDate                               	is Date
		PayVendor                              	is a Vendor
		RemitToCode                            	is a VendorLocation
			context of PayVendor
			default label is "RemitToLocation"
		PayGroup
		CashCode
		Enclosure                              is Boolean
		OnHold                                 is Boolean
			classic name is HOLD-FLAG
		VendorClass
			classic name is VEN-CLASS
		PaymentPriority
			classic name is VEN-PRIORITY
		ProcessGroup                           is a PayablesProcessGroup
			classic name is PROC-GRP
		BaseNumberOfDecimals			
			classic name is BASE-ND
		NumberOfDecimals                       is Numeric size 1		
			classic name is TRAN-ND
		BankCheckAmount                        is an InternationalAmount
			classic name is BANK-CHK-AMT
		BankNumberOfDecimals                   is an AcctNd		
			classic name is BANK-ND
		InvoiceCurrency                        is a FromCurrency
			classic name is INV-CURRENCY
		DueDate								   is Date 
		LastCurrencyRevaluationDate            is Date
			classic name is UNRL-REV-DATE
		CheckDate                              is Date
			classic name is DISC-DATE
			default label is "PaymentDate"
		PaymentAmount                          is a FinanceCurrencyAmountGroup
			classic name is TRAN-PMT-AMT
		RevaluedBaseAmount                     is a FinanceCurrencyAmountGroup
			classic name is BASE-ACT-AMT
		DiscountDate                           is Date	
		DiscountPercent
			classic name is DISCOUNT-RT
		DiscountAmount                         is a FinanceCurrencyAmountGroup
			classic name is TRAN-DISC-AMT
		NetPaymentAmount                       is a FinanceCurrencyAmountGroup
			classic name is TRAN-CHK-AMT
		WithholdingAmount                      is an InternationalAmount 
			classic name is TRAN-INC-WH
		BaseWithholdingAmount                  is an InternationalAmount
			classic name is BASE-INC-WH
		ReportableIncomeAmount                 is an InternationalAmount
			classic name is TRAN-INC-AMT
		GainLossAmount                         is an InternationalAmount
			classic name is GAINLOS-AMT
		TransactionIDNumber
			classic name is TRANS-IDENT
		AccrualCode                            is a PayablesAccrualCode
			classic name is ACCR-CODE
		ProcessLevel                           is a PayablesProcessLevel
			classic name is PROC-LEVEL
		Status                                 is Numeric size 1
			classic name is REC-STATUS
			States
				Unreleased              value is 0
				Released                value is 1
				SelectedForPayment      value is 2
				SystemGeneratedPayment  value is 3
				ManuallyPaid            value is 4
				DraftPayable            value is 5
				UnreleasedManualPayment value is 7
				Cancelled               value is 8
				Historical              value is 9
		TransactionNumber
			classic name is TRANS-NBR
		CheckSuffix
			classic name is CHK-SUFFIX
		BankTransactionCode
			classic name is BANK-INST-CODE
		IncomeCode                             is a PayablesIncomeCode
		SeparatePayment                        is Boolean
			classic name is SEP-CHK-FLAG
		SeparatePaymentSequence				   is Numeric size 18
		PayImmediately                         is Boolean
			classic name is PAY-IMM-FLAG
		DiscountLost                           is Boolean
			classic name is DISC-LOST-FLG
		Anticipation                           is Boolean
		InvoiceGroup						   is a PayablesInvoiceGroup		
		DiscountCode                           is a PayablesDiscountCode
		DiscountAccount                        is a FinanceCodeBlock

			classic name for DiscountAccount.AccountingUnit is DSC-ACCT-UNIT
			classic name for DiscountAccount.GeneralLedgerChartAccount is DSC-ACCOUNT
		IncomeWithholdingCode
			classic name is INC-ACCR-CODE
		CashLedgerStatement					   is like CashLedgerStatement
			classic name is RECON-STMT-NBR
		MatchDiscountTaken
			classic name is MATCH-DISC-TAK
		ProcurementCardStatement
			classic name is STATEMENT
		RetainagePayment                       is Boolean
			classic name is RETAINAGE-PMT
		SecondaryWithholdingCode1              	is a PayablesSecondaryWithholdingCode
			classic name is SEC-WTH-CODE1
		SecondaryWithholdingPercent1           	is a SecondaryWithholdingPercent
			classic name is SEC-WTH-PCT1
		SecondaryWithholdingBaseAmount1         is an InternationalAmount
			classic name is BASE-SEC-WTH1
		SecondaryWithholdingTransactionAmount1	is an InternationalAmount 
			classic name is TRAN-SEC-WTH1
		SecondaryWithholdingCode2              	is a PayablesSecondaryWithholdingCode
			classic name is SEC-WTH-CODE2
		SecondaryWithholdingPercent2           	is a SecondaryWithholdingPercent
			classic name is SEC-WTH-PCT2
		SecondaryWithholdingBaseAmount2         is an InternationalAmount
			classic name is BASE-SEC-WTH2
		SecondaryWithholdingTransactionAmount2	is an InternationalAmount 
			classic name is TRAN-SEC-WTH2
		SecondaryWithholdingCode3              	is a PayablesSecondaryWithholdingCode
			classic name is SEC-WTH-CODE3
		SecondaryWithholdingPercent3           	is a SecondaryWithholdingPercent
			classic name is SEC-WTH-PCT3
		SecondaryWithholdingBaseAmount3         is an InternationalAmount
			classic name is BASE-SEC-WTH3
		SecondaryWithholdingTransactionAmount3	is an InternationalAmount 
			classic name is TRAN-SEC-WTH3
		CreatedBy                              is an Operator 
			holds pii
		LastUpdateBy                           is an Operator 
			holds pii
		LastUpdateDate                         is TimeStamp
			classic name is LAST-UPDT-DATE
		TemporaryHold                          is AlphaUpper size 1
			classic name is TEMP-HOLD
			States
				SentForApproval  value is "S"
					default label is "Sent for Approval"
				ApprovedByEngine value is "A"
					default label is "Approved by Engine"
				RejectedByEngine value is "R"
					default label is "Rejected by Engine"
		CurrencyEvaluation			   is Numeric 1
			States
				CurrencyRounding value is 1
				CurrencyGainLoss value is 2
		VendorPaymentCurrency					is a  Currency
		VendorPaymentAmount						is an InternationalAmount
		VendorGroup								is like VendorGroup
			disable surrogates
			disable Auditing
		CashRequirementsResult
			delete ignored
			disable Auditing
		PayablesJobResult						is like PayablesJobResult

		FATCAIncomeCode							is a PayablesIncomeCode
			classic name is FATCA-INC-CODE
		FATCABaseIncomeAmount 					is an InternationalAmount
			classic name is FATCA-BASE-INC
		FATCATransactionIncomeAmount 			is an InternationalAmount
			classic name is FATCA-TRAN-INC
		LetterOfGuarantee
			classic name is LTR-OF-GUARAN
		LetterOfCredit
			classic name is LETTER-OF-CR
		OnHoldDate								is TimeStamp		
		OffHoldDate								is TimeStamp		
		MarkedAsPaid							is Boolean			


	Local Fields
		Skip									is Boolean
		RecordInError							is Boolean
		NextSentence							is Boolean
		SkipMessage								is Text
		ConfirmAdd								is Boolean
		LocalCounter							is Numeric size 2   
		Match									is Boolean
		WsdrNbrDays								is Numeric size 6
		WSRecordBypassedFlag					is Boolean
		WSRoiAmt								is an InternationalCost
		VendorEntered							is Boolean
		VendorClassEntered						is Boolean
		LocalCreditNumber						is like Invoice			//	Used in "Unapply Credit" routines
		LocalCreditPayablesInvoice				is like PayablesInvoice //	Used in "Unapply Credit" routines FSM-2063
		LocalCreditPaymentSequence				is like PaymentSequence	//	Used in "Create CRM" routine
		LocalCreditSuffix						is like Suffix				//	Used in "Unapply Credit" routines
		LocalCurrencyTable						is a CurrencyTable
		LocalHoldCode							is a PayablesHoldCode	
		LocalInvoiceNumber						is like Invoice			//	Used in "Credit Apply" & "Credit Unapply" routines
		LocalInvoiceDate						is Date					//	Used in "Credit Apply" & "Credit Unapply" routines FSM-2063
		LocalInvoiceSuffix						is like Suffix			//	Used in "Credit Apply" & "Credit Unapply" routines
		LocalInvoicePaymentSequence				is like PaymentSequence	//	Used in "Create CRM" routine
		LocalPayablesCreditMemoCredit			is like Invoice			//	Used in "Create CRM" routine
		LocalPayablesCreditMemoCrdSuf			is like Suffix			//	Used in "Create CRM" routine
		LocalPayablesCreditMemoCrdSeq			is like PaymentSequence	//	Used in "Create CRM" routine
		LocalPayablesCreditMemoCrdPI			is like PayablesInvoice	
		LocalPayablesCreditMemoInvoice  		is like Invoice			//	Used in "Create CRM" routine
		LocalPayablesCreditMemoInvSuf			is like Suffix			//	Used in "Create CRM" routine
		LocalPayablesCreditMemoInvSeq			is like PaymentSequence	//	Used in "Create CRM" routine
		LocalPayablesCreditMemoInvPI			is like PayablesInvoice	
		LocalPayablesInvoice					is like PayablesInvoice
		LocalPayablesInvoicePayment				is like PayablesInvoicePayment
		LocalPerformValidateCashPaymentFormat	is Boolean
		LocalRemitToCode						is like VendorLocation		
		LocalRetainageSplitPercent				is like Pct						
		LocalRetainageCalculatedAmount			is an InternationalAmount		
		LocalRetainagePaymentAmount				is an InternationalAmount		
		LocalRetainagePaymentTotal				is an InternationalAmount		
		LocalRetainAdjustDistributionSequence	is like DistributionSequence		
		LocalRetainAdjustMatchDistributionSequence	is like MatchDistributionSequence	
		LocalRetainAdjustMatchLine				is like PayablesMatchLine			
		LocalRetainAdjustRelPercent				is like Pct						
		LocalRetainAdjustRelPmtAmt				is an InternationalAmount		
		LocalRetainAdjustRetCalcAmt				is an InternationalAmount		
		LocalRetainAdjustRetPercent				is like Pct						
		LocalRetainAdjustRetPmtAmt				is an InternationalAmount		

		LocalRetainageBankCheckAmount			is an InternationalAmount
		LocalRetainageDiscountAmount			is an InternationalAmount
		LocalRetainageWithholdingAmount			is an InternationalAmount
		LocalRetainageGainLossAmount			is an InternationalAmount
		LocalRetainageRevaluedBaseAmount		is an InternationalAmount

		LocalAllowAmt							is an InternalAmount		
			precision is OutputNumberOfDecimals
				round to precision
		LocalDiscountAmt						is an InternalAmount		
			precision is OutputNumberOfDecimals
				round to precision

		LocalRunProgram							is a RunProgram
		LocalProcessGroup						is like PayablesProcessGroup	
		LocalAsyncId							is an AsyncActionRequest		
		LocalStatus								is Numeric 1
		ValidateCashPaymentFormat
		VerifyPayablesMonitor
		LocalCheckAPMonitor						is Alpha 1
		NewPayablesInvoicePayment				is a PayablesInvoicePayment view
		NewRetainageDistribution				is a PayablesInvoiceRetainageDistribution view
		OldPaymentAmount						is an InternationalAmount
		OldDiscountAmount						is an InternationalAmount
		OldDiscountPercent						is a Percent
 		LocalDocumentCurrencyTotals				is a PayablesCurrencyGroupTotals
		ActionType								is AlphaUpper 1
			States
				CreateType		value is "C"
				UpdateType		value is "U"
				DeleteType		value is "D"
		ActionCode			is Alpha size 1
			States
				Create  value is "C"
				Update	value is "U"
				Delete	value is "D"
		LocalBODCurrentTimeStamp		is a BODCurrentTimeStamp
		CreateFromBatchSwitch			is Boolean
		LocalPayablesCompany					is like PayablesCompany
		LocalAccrualCode						is like PayablesAccrualCode
		LocalSecondaryWithholdingCode			is like PayablesSecondaryWithholdingCode
		LocalRetainagePercent					is Percent size 8.5  
		CalculateFinanceCurrencyAmountGroup
		NegativeFinanceCurrencyAmountGroup
		NegativeFinanceCurrencyAmount
		GainLossCalculation
		LocalExchangeDate						is an ExchangeDate
		LocalCurrencyAmount						is a CurrencyAmount
		LocalDiscountExchange					is a CurrencyExchangeGroup
		LocalWithholdingExchange				is a CurrencyExchangeGroup
		LocalFundWithholdingExchange			is a CurrencyExchangeGroup
		LocalFATCAWithholdingExchange			is a CurrencyExchangeGroup
		LocalSecondaryWithholdingExchange1		is a CurrencyExchangeGroup
		LocalSecondaryWithholdingExchange2		is a CurrencyExchangeGroup
		LocalSecondaryWithholdingExchange3		is a CurrencyExchangeGroup
		LocalCashCodePaymentExchange			is a CurrencyExchangeGroup
		LocalCurrencyCalculationGroup			is a CurrencyCalculationGroup
		LocalInvoiceCurrencyCalculationGroup	is a CurrencyCalculationGroup
		LocalDiscountCurrencyAmount				is an InternationalAmount
		LocalDiscountAmount						is a FinanceCurrencyAmountGroup
		LocalWithholdingCurrencyAmount			is an InternationalAmount
		LocalWithholdingAmount					is a FinanceCurrencyAmountGroup
		LocalFundWithholdingAmount				is a FinanceCurrencyAmountGroup
		LocalFundWithhldCurrencyAmount			is an InternationalAmount
		LocalSecondaryWithholdingTransactionAmount is an InternationalAmount
		LocalFATCAWithhldCurrencyAmount			is an InternationalAmount
		LocalFATCAWithholdingAmount				is a FinanceCurrencyAmountGroup
		LocalSecondaryWithhldCurrencyAmount1	is an InternationalAmount
		LocalSecondaryWithholdingAmount1		is a FinanceCurrencyAmountGroup
		LocalSecondaryWithhldCurrencyAmount2	is an InternationalAmount
		LocalSecondaryWithholdingAmount2		is a FinanceCurrencyAmountGroup
		LocalSecondaryWithhldCurrencyAmount3	is an InternationalAmount
		LocalSecondaryWithholdingAmount3		is a FinanceCurrencyAmountGroup
		LocalCashCodePaymentAmount				is a FinanceCurrencyAmountGroup
		LocalTranSecWth1						is an InternationalAmount
		LocalTranSecWth2						is an InternationalAmount
		LocalTranSecWth3						is an InternationalAmount
		LocalPaymentDate						is Date
		LocalCashCode							is a CashCode
		LocalBankAccountValidationType			is a BankAccountValidationType
		LocalBankAccountNumber					is a BankAccountNumber
		RelLocalTransactionIDNumber				is a TransactionIDNumber
		CreateCashLedgerPayablesPayment			is Boolean
		LocalProrateDistributionAmount			is like CurrencyAmount

		LocalDistributionAmount					is a FinanceCurrencyAmountGroup
		LocalTotalDistributionAmount			is a FinanceCurrencyAmountGroup
		LocalNumberOfDistributions				is Numeric 6
		LocalDistributionCount					is Numeric 6
		LocalDistributionCommitCounter			is Numeric 6		












		LocalDistributionSetSum					is like InternationalAmount 
		LocalFinanceCodeBlock					is a FinanceCodeBlock
		LocalSystemAccount						is a SystemAccount
		LocalLastDistribution					is Boolean
		LocalNumberOfDecimals					is Numeric 1
		LocalCashRequirementsResult				is like CashRequirementsResult
		LocalBankTransactionCode				is like BankTransactionCode
		LocalAlphaPayablesCompany				is Alpha size 4
		LocalAlphaPayablesInvoice				is Alpha size 18
		LocalAlphaPaymentSequence				is Alpha size 4
		LocalSettlementID						is AlphaUpper size 22 
		LocalEditCashCodeCurrencyRelationships	is Boolean
		LocalCalculatePayablesFinanceStructure			is a CalculatePayablesFinanceStructure
		LocalAnswer				 				is Alpha size 1
		CalculateWithholdingAmount
		LocalWithholdingCategory 				is a WithholdingCategory
		LocalWithholdingCode					is an IncomeWithholdingCode
		LocalFinanceDimension1					is a FinanceDimension1
		LocalToAccountingEntity					is like AccountingEntity
		LocalAccountingUnit						is like AccountingUnit

		LocalWithholdingRate					is Percent 5.2 
		LocalPaymentPercent						is a Percent
		LocalPerformCalculation					is Boolean
		LocalInternalAmount						is a InternalAmount
		LocalLikeAccountingEntity				is like AccountingEntity		
		LocalPriority							is like DisplayOrder			

		LocalLocation							is like InventoryLocation
		LocalItem								is like Item
		ConvertedCost							is like UnitCost	
		
		LocalBODPayablesInvoiceLineCount        is Numeric size 9          
		LocalBODAccountingEntity                is Alpha 30                
		LocalBasePaymentCurrency                is Alpha 5                 
		LocalCashLegerPaymentBaseNetPaymentAmount is Decimal size 19.3     
    	

    	NativeLPLBODTrigger	   					is Boolean

		LocalDocID								is Alpha 100
		LocalVoidDate							is Alpha 30
		LocalReconciledDate						is Alpha 30
		LocalNativeTriggerCount					is Boolean
		NewBODTracker  							is a FSMInboundBODTracker view
		LocalFSMInboundBODTracker				is Numeric 15
		Error            						is Boolean
	    ErrorMessage     						is Alpha 300

		LocalTriggerFrom			is Alpha size 100


		LocalVariationID				 	is Alpha size 25
		LocalClearSysMemID					is Alpha size 18

		LocaLine								is Alpha size 5
		LocalEffectiveDate 						is Alpha size 20
		LocalPIPStatus							is Alpha size 30
		LocalNounTemplate						is Alpha size 250
		LocalTaxSequenceNumber					is Numeric size 9


    	LocalCurrExchangeDate					is Alpha size 15
		LocalFromCurrency						is Alpha size 5
		LocalToCurrency							is Alpha size 5
		LocalInternationalCost					is an InternationalCost
	 	LocalAmendedReallocation				is Boolean		
	   	LocalMassBODTrigger						is Boolean
    	LocalTitle								is Alpha up to 255	
#ifdef module cam
		LocalCustodialPosting					is a FinanceDimension10
		LocalCommittedAmount					is an InternationalAmount
		LocalCustodialAccountEdit				is a CustodialAccountEdit
		LocalActivityType						is Numeric size 2
#endif

		LocalTaxSeqNumber					is Numeric size 9

		LocalLine								is Numeric size 9

		LocalConfigurationParameter			is Alpha size up to 200
		LocalSecWthCode1					is like PayablesSecondaryWithholdingCode
		LocalSecWthCode2					is like PayablesSecondaryWithholdingCode
		LocalSecWthCode3					is like PayablesSecondaryWithholdingCode
		LocalPayablesJobResult				is like PayablesJobResult
		
    Derived Fields	
		DerivedDaysPaidLate is a DerivedField
			type is Numeric 4
			if (CheckDate > DueDate)
				return (CheckDate - DueDate)
			else
				return 0

		DerivedPaidLate is a DerivedField
			type is Boolean
			if (DerivedDaysPaidLate > 0)
				return true
			else
				return false    	
				

		DerivedLocation is a DerivedField
			type is Alpha 24
			restricted
			if(DerivedIntegrationApplication="Local.ly")
				return DerivedAccountingEntity
			else
				return ""


		DerivedCurrAmountLocally is a DerivedField
			type is Decimal size 19.2
			restricted
			return NetPaymentAmount.CurrencyAmount	
		
		DerivedCurrencyAmount is a DerivedField
			type is Alpha size 50
			restricted
			if(DerivedIntegrationApplication="Local.ly" and DerivedDebtorAddressCountry = "NZ")
				return DerivedCurrAmountLocally
			else
				return NetPaymentAmount.CurrencyAmount
		
		DerivedEnteredCurrAmountLocally is a DerivedField
			type is Decimal size 19.2
			restricted
			return PayablesInvoice.InvoiceAmount.FunctionalAmount.EnteredCurrencyAmount
	
		DerivedEnteredCurrencyAmount is a DerivedField
			type is Alpha size 50
			restricted
			if(DerivedIntegrationApplication="Local.ly" and DerivedDebtorAddressCountry = "NZ")
				return DerivedEnteredCurrAmountLocally
			else
				return PayablesInvoice.InvoiceAmount.FunctionalAmount.EnteredCurrencyAmount


		PayableTrackerLineTaxXML is a DerivedField
			type is XMLDocument
			restricted
			if(DerivedIntegrationApplication="Local.ly" and GeneralLedgerCompanyRel.AccountingEntity.AddressCode.PostalAddress.Country = "AU")
				if(PayablesInvoiceRel exist)
					if(PayablesInvoiceDistributionTaxRel exists)
						initialize LocalTaxSeqNumber
						for each PayablesInvoiceDistributionTaxRel
							if(each.TaxCode entered)
								LocalTaxSeqNumber +=1
								each.LocalTaxSeqNumber = LocalTaxSeqNumber
								PayableTrackerLineTaxXML += template.IONPayableTracker_PayableTrackerLineTaxXML_ST document for each
						return PayableTrackerLineTaxXML
					else
						return ""
				else
					return ""
			else
				return ""


    	DerivedAccountingEntityName is a DerivedField
			type is Alpha size up to 80
			restricted
			if(DerivedIntegrationApplication="Local.ly" and DerivedDebtorAddressCountry = "AU")
				return GeneralLedgerCompanyRel.AccountingEntity.Name
			else
				return DerivedPayablesCompanyName
		
		DerivedClearSystemMemID is a DerivedField
			type is AlphaUpper size 9
			restricted
			if(DerivedIntegrationApplication="Local.ly" and DerivedDebtorAddressCountry = "AU")
				return CashLedgerPayablesPayment.PaidVendor.BankID
			else
				return LocalClearSysMemID
				
		DerivedFinancialAccountName is a DerivedField
			type is Alpha size up to 120
			restricted
			if(DerivedIntegrationApplication="Local.ly" and DerivedDebtorAddressCountry="AU")
				return CashLedgerPayablesPayment.PaidVendor.VendorName
			else
				return ""
				
		DerivedCLTranIdentifier is a DerivedField
			type is Alpha size 22
			restricted
			if(DerivedIntegrationApplication="Local.ly")
				if(DerivedDebtorAddressCountry = "AU")
					return CashLedgerPayablesPayment.CashManagementAccount.SwiftID	
				else
				if(DerivedDebtorAddressCountry = "AR")
					return "CashLedgerPayablesPayment"
				else	
					return ""
			else
				return ""

    


		DerivedCreateMessage is a LabelField
            restricted
            "CreateInvoicePayment"

        DerivedPaymentExistsMsg is a LabelField
            restricted
            "Invoice<PayablesInvoice.Invoice>_|_Payment<PayablesInvoicePayment.PaymentSequence>"

        DerivedFormTitle is a DerivedField
            type is MessageField
            restricted
            if (RecordExists)
            	return DerivedPaymentExistsMsg
            else
            	return DerivedCreateMessage


    	ContextMessageEntityType is a StringField
			type is Alpha 30
			restricted
			"InforPayableTransaction"

		ContextMessageText is a MessageField
			restricted
			"PayablesInvoicePayment<PayablesInvoicePayment>"

		PastDueMessage is a MessageField		
			"PastDue"


















		Derived1099ReportableAmount	is a DerivedField
			type is like InternationalAmount
			default label is "1099ReportableAmount"
			if (IsVoidPayment)
				return 0								
			return ReportableIncomeAmount

		DerivedReportablePaymentAmount is a DerivedField		
			type is like InternationalAmount
			restricted
			if (IsVoidPayment)
				return 0
			if (NetPaymentAmount.CurrencyAmount entered)		
				return NetPaymentAmount.CurrencyAmount			
			return PaymentAmount.CurrencyAmount

		DerivedReportableAmountForUpdate	is a DerivedField
			type is like InternationalAmount
			restricted
			if (ReportableIncomeAmount entered)
				return ReportableIncomeAmount
			if (NetPaymentAmount.CurrencyAmount entered)
				return NetPaymentAmount.CurrencyAmount
			return PaymentAmount.CurrencyAmount

		DerivedAllowableAmount is a DerivedField
			type is like InternationalAmount
			restricted
			if (DiscountPercent entered
			and DiscountAmount.CurrencyAmount not entered)
				if (PaymentAmount.CurrencyAmount <= PayablesInvoice.InvoiceAmount.CurrencyAmount)
					return PaymentAmount.CurrencyAmount
				else
					return PayablesInvoice.InvoiceAmount.CurrencyAmount
			else
				if (DiscountPercent entered
				and DiscountAmount.CurrencyAmount entered)
					if (DiscountPercent = PayablesInvoice.DiscountPercent		
					and DiscountAmount.CurrencyAmount = PayablesInvoice.DiscountAmount.CurrencyAmount
					and !PayablesInvoice.MultiplePayablesInvoicePaymentRelExists)
						return PayablesInvoice.AllowableAmountForDiscount
					if (PayablesInvoice.InvoiceType.CreditMemo				
					or  PayablesInvoice.InvoiceType.PrepaymentCredit)		
						if ((DiscountAmount.CurrencyAmount / DiscountPercent) >= PayablesInvoice.InvoiceAmount.CurrencyAmount)		
							if (!PayablesInvoice.MultiplePayablesInvoicePaymentRelExists)
								return PayablesInvoice.AllowableAmountForDiscount
							else
								return (DiscountAmount.CurrencyAmount / DiscountPercent)	
						else

							return (DiscountAmount.CurrencyAmount / DiscountPercent)		
					else
						if ((DiscountAmount.CurrencyAmount / DiscountPercent) <= PayablesInvoice.InvoiceAmount.CurrencyAmount)
							if (!PayablesInvoice.MultiplePayablesInvoicePaymentRelExists)
								return PayablesInvoice.AllowableAmountForDiscount
							else
								return (DiscountAmount.CurrencyAmount / DiscountPercent)	
						else

							return (DiscountAmount.CurrencyAmount / DiscountPercent)		
				else
					return blank

		DerivedIncomeWithholdingPercent is a DerivedField		
			type is like Percent
			default label is "IncomeWithholdingPercent"
			if (WithholdingAmount entered)
				if (Vendor.AllowWithholdingCodeOverride)
					return VendorWithholdingCodeRel.IncomeWithholdingPercent
				return Company.IncomeWithholdingPercent

		DerivedCheckAmount is a DerivedField
			type is like InternationalAmount

			if (TransactionNumber 	entered
			or  CheckDate			entered)
				if (DiscountAmount.CurrencyAmount entered
				and !DiscountLost)									
					return (PaymentAmount.CurrencyAmount - DiscountAmount.CurrencyAmount)
				else
					return PaymentAmount.CurrencyAmount
			else
				return blank

		DerivedICBPaymentSelectAmount is a DerivedField 
			type is like InternationalAmount
			restricted
			if (ContextSettlementDetailLineRel exists)
				return ContextSettlementDetailLineRel.SelectedAmount
			else
				return 0

		DerivedSettlementDetailLineDistributionSetState is a DerivedField 
			type is Numeric size 1
			restricted
			if (ContextSettlementDetailLineRel exists)
				return ContextSettlementDetailLineRel.DerivedPayablesDistributionSetState
			else
				return 0

		DerivedSettlementDetailLineDistributionSetSum is a DerivedField 
			type is like InternationalAmount
			LocalDistributionSetSum = 0
			for each ContextSettlementDetailLineRel.ICBPayablesApplyDistribution set
				LocalDistributionSetSum += each.DistributionAmount.CurrencyAmount
			return LocalDistributionSetSum

		DerivedSettlementDetailLineDistributionDifference is a DerivedField 
			type is like InternationalAmount
			if (ContextSettlementDetailLineRel exists)
				return (TransientICBPaymentSelectAmount - DerivedSettlementDetailLineDistributionSetSum)
			else
				return 0

		DerivedIncomeCodeWithDescription is a ConditionalField
			type is MessageField
			if (HasIncomeCode)
				IncomeCodeWithDescriptionMsg
			else
				blank

		IncomeCodeWithDescriptionMsg is a MessageField
			default label is "IncomeCode"
			"<IncomeCode>_-_<IncomeCode.Description>"

		CompletionMessage is a DerivedField
			type is MessageField
			restricted
			if (PayablesInvoice.PaymentAmountOutOfBalance)
				return "Change Complete; Payment Out Of Balance"
			else
				return "Change Complete; Continue"

		CreditOrInvoiceAppliedMessage is a DerivedField
			type is MessageField

			if (IsAppliedToCredit)
				return "Applied To A Credit"
			else
				if (IsAppliedToInvoice)
					return "Applied To An Invoice"
				else
					return blank

		DerivedAppliedPaymentAmount is a DerivedField		
			type is like InternationalAmount
			default label is "AppliedPaymentAmount"
			if (PayablesPaymentCreditMemoRel exists)
				return (sum PayablesPaymentCreditMemoRel.AmountApplied)
			if (PayablesPaymentCreditMemo2Rel exists)
				return (sum PayablesPaymentCreditMemo2Rel.AmountApplied)

		DerivedUnappliedPaymentAmount is a DerivedField	
			type is like InternationalAmount
			default label is "UnappliedPaymentAmount"
			if (PaymentAmount.CurrencyAmount < 0)
				return ((PaymentAmount.CurrencyAmount * -1) - DerivedAppliedPaymentAmount)
			return (PaymentAmount.CurrencyAmount - DerivedAppliedPaymentAmount)

		DerivedVATSplitAmount is a DerivedField		
			type is like InternationalAmount
			if (PayablesInvoice.VATSplitPayment)
				return (sum PayablesInvoice.TotalInvoicedTaxDistributionRel.DistributionAmount.CurrencyAmount *(PaymentAmount.CurrencyAmount / PayablesInvoice.InvoiceAmount.CurrencyAmount))
			return blank

		DerivedDraftNumber is a DerivedField
			type is AlphaRight size 20

			if (PayablesBillOfExchangeRel exists)
				return PayablesBillOfExchangeRel.DraftNumber
			else
				return blank

		DerivedDraftSuffix is a DerivedField
			type is like Suffix

			if (PayablesBillOfExchangeRel exists)
				return PayablesBillOfExchangeRel.Suffix
			else
				return blank

		DerivedDraftDate is a DerivedField
			type is Date

			if (PayablesBillOfExchangeRel exists)
				return PayablesBillOfExchangeRel.DraftDate
			else
				return blank

		OpenBasePayment        is a DerivedField
			type is like InternationalAmount
			classic name is OPEN-BASE-PMT
			restricted
			return (RevaluedBaseAmount.FunctionalAmount.EnteredCurrencyAmount - DiscountAmount.FunctionalAmount.EnteredCurrencyAmount)

		OpenTransactionPayment is a DerivedField
			type is like InternationalAmount
			classic name is OPEN-TRAN-PMT
			restricted
			return (PaymentAmount.CurrencyAmount - DiscountAmount.CurrencyAmount)

		BaseNetPayment         is a DerivedField
			type is like InternationalAmount
			classic name is BASE-NET-PMT
			restricted
			if (IsInvoicePaid)
				return NetPaymentAmount.FunctionalAmount.EnteredCurrencyAmount	
			else
				return OpenBasePayment

		TransactionNetPayment  is a DerivedField
			type is like InternationalAmount
			classic name is TRAN-NET-PMT

			if (IsInvoicePaid)
				return NetPaymentAmount.CurrencyAmount	
			else
				return OpenTransactionPayment

		OpenMsg is a MessageField
			restricted
			"OPEN"

		PaidMsg is a MessageField
			restricted
			"PAID"

		CancelMsg is a MessageField
			restricted
			"CNCL"

		VoidMsg is a MessageField
			restricted
			"VOID"

		UnpaidMsg is a MessageField
			restricted
			"UNPAID"

		ProcessedMsg is a MessageField
			restricted
			"PROCESSED"

		ReconcileMsg is a MessageField
			restricted
			"RECONCILE"

		StopPaymentMsg is a MessageField
			restricted
			"STOP_PAYMENT"

		StaleDatedMsg is a MessageField
			restricted
			"STALE_DATED"

		EscheatedMsg is a MessageField
			restricted
			"ESCHEATED"

		UnacceptedMsg is a MessageField
			restricted
			"UNACCEPTED"

		AcceptedMsg is a MessageField
			restricted
			"ACCEPTED"

		CashedMsg is a MessageField
			restricted
			"CASHED"

		DishonoredMsg is a MessageField
			restricted
			"DISHONORED"

		CanceledMsg is a MessageField
			restricted
			"CANCELED"

		EFTRejectedMsg is a MessageField
			restricted
			"EFT_REJECTED"

		EFTVoidedMsg is a MessageField
			restricted
			"EFT_VOIDED"

		IssuedMsg is a MessageField
			restricted
			"ISSUED"

		InterfacedHistoricalInvoicePaymentMessage is a MessageField
			restricted
			"Issued_-<CheckDate>"

		PaymentStatus          is a DerivedField
			type is MessageField
			classic name is PMT-STATUS
			if (CashLedgerPayablesPaymentRel exists)
				return CashLedgerPayablesPaymentRel.PaymentStatus
			if (Status.Historical)
				return InterfacedHistoricalInvoicePaymentMessage
			return blank


		BankStatus             is a DerivedField
			type is MessageField

			if (IsNoPayment)
				return UnpaidMsg
			else
			if (IsCheckProcessed)
				return ProcessedMsg
			else
			if (IsReconcileCash)
				return ReconcileMsg
			else
			if (IsVoidCash)
				return VoidMsg
			else
			if (IsStopPaymentCash)
				return StopPaymentMsg
			else
			if (IsStaleDated)
				return StaleDatedMsg
			else
			if (IsEscheated)
				return EscheatedMsg
			else
			if (IsUnacceptDraft)
				return UnacceptedMsg
			else
			if (IsAcceptDraft)
				return AcceptedMsg
			else
			if (IsCashedDraft)
				return CashedMsg
			else
			if (IsDishonoredDraft)
				return DishonoredMsg
			else
			if (IsCancelDraft)
				return CanceledMsg
			else
			if (IsTapePaymentRejected)
				return EFTRejectedMsg
			else
			if (IsTapeVoid)
				return EFTVoidedMsg
			else
			if (IssuedCash)
				return IssuedMsg
			else
				return blank

		NoReinstate            is a ConditionalField
			type is AlphaUpper size 4
			restricted
			if (IsNoReinstate)
				"*"
			else
				blank

		PaidDocumentDate       is a ConditionalField
			type is Date
			classic name is PAID-DOC-DATE
			restricted
			if (IsAcceptDraft)
				PayablesBillOfExchangeRel.AcceptDate
			else
				CheckDate

		DraftAccrued           is a DerivedField
			type is MessageField
			restricted
			if (IsDraftAccrual)
				return "BOE_\Open"
			else
				return blank

		OnHoldMessage		is a MessageField
			restricted
			"InvoiceOnHoldVia_\Hold_\Code:"

		ApInvoiceDate          is a StringField
			type is Date
			classic name is AP-INV-DATE
			restricted
			PayablesInvoice.InvoiceDate

		ApPoNumber             is a StringField
			type is Alpha size 12
			classic name is AP-PO-NBR

			PayablesInvoice.first MatchPurchaseOrderInvoicesRel.PurchaseOrder	

		ApInvoiceType          is a StringField
			type is Alpha size 1
			classic name is AP-INV-TYPE

			PayablesInvoice.InvoiceType

		ApBaseInvoice          is a StringField
			type is Alpha size 15
			classic name is AP-BASE-INV
			restricted
			PayablesInvoice.InvoiceAmount.FunctionalAmount.EnteredCurrencyAmount

		ApFormatNumber         is a StringField
			type is Alpha size 2
			classic name is AP-FORMAT-NBR
			restricted
			CashPaymentFormatRel.PaymentFormat

		FirstPayablesOnHoldHoldCode is a DerivedField
			type is like PayablesHoldCode

			if (OnHold)
				return first PayablesOnHoldRel.HoldCode
			else
				return blank

		DerivedCashPostingCompany is a DerivedField	
			type is like Company
			restricted
			if (CashRequirementsResult.OverrideCashCode.DefaultPostCompany entered)
				return CashRequirementsResult.OverrideCashCode.DefaultPostCompany
			if (CashCode.DefaultPostCompany entered)
				return CashCode.DefaultPostCompany
			return PayGroup.PostCompany


		DisplayDiversityCode is a DerivedField
			type is AlphaUpper size 8

			if (PayablesInvoice.DiversityCode entered)
				return PayablesInvoice.DiversityCode
			else
				return "Majority"

		DerivedBaseAmountTotalPerCompany is a DerivedField	
			type is like CurrencyAmount
			restricted

			return 0	

		DerivedBaseAmountTotalPerDiversityCodePercent is a DerivedField		
			type is Percent size 6.2

			return 0	

		DerivedBaseAmountTotalPerDiversityCode is a DerivedField	
			type is like CurrencyAmount

			return 0	

		DerivedBaseAmountTotalPerVendor is a DerivedField	
			type is like CurrencyAmount

			return 0	

		DerivedCompanyWithinGLCompanyGroup is a DerivedField	
			type is Boolean
			if (GeneralLedgerCompanyGroup not entered)
				return true
			if (GLCompanyGroupMemberRelExists)
				return true
			return false

		ExcludeFromReportBasedOnPOCode is a DerivedField
			type is Boolean
			restricted
			for each SupplyManagementReportContext.ExcludePOCodeArray.ExcludePOCode
				if (each = PayablesInvoice.FirstPurchaseOrder.POCode)
					return true
			return false

		ExcludeFromReportBasedOnVendorClass is a DerivedField
			type is Boolean
			restricted
			for each SupplyManagementReportContext.ExcludeVendorClassArray.ExcludeVendorClass
				if (each = VendorClass)
					return true
			return false

		UnrealizedCurrencyGainMessage		is a MessageField
			restricted
			"UnrealizedCurrencyGain"

		UnrealizedCurrencyLossMessage		is a MessageField
			restricted
			"UnrealizedCurrencyLoss"

		UnrealizedCurrencyGainLossMessage		is a MessageField
			restricted
			"UnrealizedCurrencyGainLoss"

		RealizedCurrencyGainMessage		is a MessageField
			restricted
			"RealizedCurrencyGain"

		RealizedCurrencyLossMessage		is a MessageField
			restricted
			"RealizedCurrencyLoss"

		RealizedCurrencyGainLossMessage		is a MessageField
			restricted
			"RealizedCurrencyGainLoss"

		NonInvoiceCurrencyPaymentOffsetMessage	is a MessageField
			restricted
			"NonInvoiceCurrencyPaymentOffset"

		NonInvoiceCurrencyPaymentAccrualOffsetMessage	is a MessageField
			restricted
			"NonInvoiceCurrencyPaymentAccrualOffset"

		PaymentWriteOffAccrualOffsetMessage	is a MessageField		
			restricted
			"PaymentWriteOffAccrualOffset"		
		
		ClearPaymentFromCreditMemoMessage	is a MessageField		
			restricted
			"PaymentCreditMemoClearingGainLoss"		

		PaymentWriteOffMessage	is a MessageField		
			restricted
			"PaymentWriteOff"

		InvoiceCancel is a MessageField		
			restricted
			"InvoiceCancel"


		DaysToPayInvoice is a DerivedField
			type is Numeric size 3
			restricted
			if (IsInvoicePaid)
				return CheckDate - PayablesInvoice.InvoiceDate


		EligibleDiscountAmount is a DerivedField
			type is like InternationalAmount
			restricted
			if (Status.Historical)
				return PayablesInvoice.BaseDiscountAmount1

		DiscountEligPaymentsCount is a DerivedField
			type is Numeric size 1
			restricted
			if (Status.Historical and DiscountAmount.CurrencyAmount != 0)
				return 1

		DiscountedPaymentsCount is a DerivedField
			type is Numeric size 1
			restricted
			if (Status.Historical and DiscountAmount.CurrencyAmount != 0 and !DiscountLost)
				return 1

		DiscountAmountApplied is a DerivedField
			type is like InternationalAmount
			restricted
			if (Status.Historical and DiscountAmount.CurrencyAmount != 0 and !DiscountLost)
				return DiscountAmount.CurrencyAmount

		DiscountLostCount is a DerivedField
			type is Numeric size 1
			restricted
			if (Status.Historical and DiscountLost)
				return 1

		DiscountAmountLost is a DerivedField
			type is like InternationalAmount
			restricted
			if (Status.Historical and DiscountLost)
				return DiscountAmount.CurrencyAmount

		PayablesInvoiceAmount is a DerivedField
			type is like InternationalAmount
			restricted
			return PayablesInvoice.InvoiceAmount.CurrencyAmount

		OpenInvoiceAmount is a DerivedField
			type is like InternationalAmount
			restricted
			if (IsOpenPayment)
				return RevaluedBaseAmount.CurrencyAmount

		OpenInvoiceCount is a DerivedField
			type is Numeric size 1
			restricted
			if (IsOpenPayment)
				return 1

		PaidInvoiceCount is a DerivedField
			type is Numeric 1
			restricted
			if (IsInvoicePaid)
				return 1

		BaseAmount is a DerivedField
			type is like InternationalAmount
			restricted
			return PayablesInvoice.InvoiceAmount.FunctionalAmount.EnteredCurrencyAmount

		PaymentCount is a DerivedField
			type is Numeric 1
			restricted
			return 1

		PaymentsProcessedCount is a DerivedField
			type is Numeric size 1
			restricted
			if (IsCheckProcessed)
				return 1

		PaidAmount is a DerivedField
			type is like InternationalAmount
			restricted
			if (IsInvoicePaid)
				return PaymentAmount.CurrencyAmount


		InvoicedElectronicallyCount is a DerivedField
			type is Numeric size 1
			restricted
			if (PayablesInvoice.InvoiceSource.EDI)
				return 1

		PaidElectronicallyCount is a DerivedField
			type is Numeric size 1
			restricted
			if (BankTransactionCodeRel.PaymentOutputOption.ElectronicFile)	
				return 1

		PaidOnTimeCount is a DerivedField
			type is Numeric size 1
			restricted
			if (Status.Historical and CheckDate <= DueDate)
				return 1

		PaidWithinTerms is a DerivedField
			type is Numeric size 1
			restricted
			if (Status.Historical and CheckDate <= DiscountDate)
				return 1

		PaidInFullCount is a DerivedField
			type is Numeric size 1
			restricted
			if (Status.Historical and PayablesInvoice.PaidInvoice)
				return 1

		ReceivedDiscountCount is a DerivedField
			type is Numeric size 1
			restricted
			if (Status.Historical and !DiscountLost and DiscountLost != "Y" and PayablesInvoice.BaseDiscountAmount1 != 0)
				return 1

		RushPaymentCount is a DerivedField
			type is Numeric size 1
			restricted
			if (PayImmediately)
				return 1

		RushPaymentAmount is a DerivedField
			type is like InternationalAmount
			restricted
			if (PayImmediately)
				return PaymentAmount.CurrencyAmount

		VoidPaymentAmount is a DerivedField
			type is like InternationalAmount
			restricted
			if (IsVoidCash)
				return PaymentAmount.CurrencyAmount

		VoidPaymentCount is a DerivedField
			type is Numeric 1
			restricted
			if (IsVoidCash)
				return 1

		DueDateDiff is a DerivedField
			type is Numeric size 3
			restricted
			return DueDate - current corporate date

		PaymentsProcessedCountPO is a DerivedField
			type is Numeric 1
			restricted
			if(PayablesInvoice.InvoiceType = "P")
				return 1

		PaymentsProcessedCountExp is a DerivedField
			type is Numeric 1
			restricted
			if(PayablesInvoice.InvoiceType = "E")
				return 1

		PaidAmountPO is a DerivedField
			type is like InternationalAmount
			restricted
			if (PayablesInvoice.InvoiceType = "P")
				return PaymentAmount.CurrencyAmount

		PaidAmountExp is a DerivedField
			type is like InternationalAmount
			restricted
			if (PayablesInvoice.InvoiceType = "E")
				return PaymentAmount.CurrencyAmount



		PeriodOneAmount is a DerivedField
			type is like InternationalAmount
			if (DueDate <= current corporate date + 30)
				return PaymentAmount.CurrencyAmount

		PeriodTwoAmount is a DerivedField
			type is like InternationalAmount
			if (DueDate > current corporate date + 30
			and DueDate	<= current corporate date + 60)
				return PaymentAmount.CurrencyAmount

		PeriodThreeAmount is a DerivedField
			type is like InternationalAmount
			if (DueDate > current corporate date + 60
			and DueDate	<= current corporate date + 90)
				return PaymentAmount.CurrencyAmount

		PeriodFourAmount is a DerivedField
			type is like InternationalAmount
			if (DueDate > current corporate date + 90
			and DueDate	<= current corporate date + 120)
				return PaymentAmount.CurrencyAmount

		AbovePeriodAmount is a DerivedField
			type is like InternationalAmount
			if (DueDate > current corporate date + 120)
				return PaymentAmount.CurrencyAmount


		DerivedDiscountAmount is a DerivedField
			type is like InternationalAmount
			restricted
			if (DiscountLost)
				return blank
			else
				return DiscountAmount.CurrencyAmount

		DerivedProrateDistributionAmount is a DerivedField	
			type is like CurrencyAmount
			restricted
			return (sum ProrateDistributionsRel.GLTransactionAmount)

		DerivedPayVendorWarning is a DerivedField		
			type is MessageField
			restricted
			if (Vendor.OnHold)
				return VendorWarningMessage
			if (PayVendor.OnHold)
				return PayVendorWarningMessage
			if (RemitToCode.OnHold)
				return RemitToWarningMessage

		VendorWarningMessage is a MessageField		
			restricted
			"VendorIsOnHold.HoldCode:<Vendor.first PayablesOnHoldRel.HoldCode>"

		PayVendorWarningMessage is a MessageField		
			restricted
			"PayVendorIsOnHold.HoldCode:<PayVendor.first PayablesOnHoldRel.HoldCode>"

		RemitToWarningMessage is a MessageField		
			restricted
			"RemitToLocationIsOnHold.HoldCode:<RemitToCode.first PayablesOnHoldRel.HoldCode>"

		DerivedInvoiceWarning is a DerivedField		
			type is MessageField
			restricted
			if (!PayablesInvoice.MatchProcessType.Expense)
				if (PayablesInvoice.HasOpenMatchInvoiceMessages)
					return "InvoiceHasOpenMatchInvoiceMessages"
				else
					if (PayablesInvoice.MatchStatus < 2
					and !PayablesInvoice.InvoiceType.MatchPrepayment)
						return "MatchInvoiceIsNotMatched"

		DerivedPaymentWarning is a DerivedField		
			type is MessageField
			restricted
			if (IsOnHold)
				return PaymentWarningMessage

		PaymentWarningMessage is a MessageField		
			restricted
			"PaymentIsOnHold.HoldCode:<PayablesInvoicePaymentsOnHoldRel.HoldCode>"

		SkipMessage1 is a MessageField
			restricted
			"PayablesPaymentForInvoiceNumber<Invoice>CannotBeAddedTo_Cash_Requirements_Result.ProcessGroupParameterDoesNotMatch."
		SkipMessage2 is a MessageField
			restricted
			"PayablesPaymentForInvoiceNumber<Invoice>CannotBeAddedTo_Cash_Requirements_Result.PayImmediatelyParameterDoesNotMatch."
		SkipMessage3 is a MessageField
			restricted
			"PayablesPaymentForInvoiceNumber<Invoice>CannotBeAddedTo_Cash_Requirements_Result.TemporaryHoldIsNotApprovedByEngine."
		SkipMessage4 is a MessageField
			restricted
			"PayablesPaymentForInvoiceNumber<Invoice>CannotBeAddedTo_Cash_Requirements_Result.PaymentIsOnHold."
		SkipMessage5 is a MessageField
			restricted
			"PayablesPaymentForInvoiceNumber<Invoice>CannotBeAddedTo_Cash_Requirements_Result.CurrencyExchangeErrorExists."
		SkipMessage6 is a MessageField
			restricted
			"PayablesPaymentForInvoiceNumber<Invoice>CannotBeAddedTo_Cash_Requirements_Result.BankTransactionCodeNotApplicable."
		SkipMessage7 is a MessageField
			restricted
			"PayablesPaymentForInvoiceNumber<Invoice>CannotBeAddedTo_Cash_Requirements_Result.CompanyParameterDoesNotMatch."
		SkipMessage8 is a MessageField
			restricted
			"PayablesPaymentForInvoiceNumber<Invoice>CannotBeAddedTo_Cash_Requirements_Result.ProcessLevelParameterDoesNotMatch."
		SkipMessage9 is a MessageField
			restricted
			"PayablesPaymentForInvoiceNumber<Invoice>CannotBeAddedTo_Cash_Requirements_Result.PaymentCodeParameterDoesNotMatch."
		SkipMessage10 is a MessageField
			restricted
			"PayablesPaymentForInvoiceNumber<Invoice>CannotBeAddedTo_Cash_Requirements_Result.VendorIsOnHold."
		SkipMessage11 is a MessageField
			restricted
			"PayablesPaymentForInvoiceNumber<Invoice>CannotBeAddedTo_Cash_Requirements_Result.PayVendorIsOnHold."
		ConfirmMessage12 is a MessageField
			restricted
			"PayablesPaymentForInvoiceNumber<Invoice>DoesNotMatchParameters.InvoiceCurrencyParameterDoesNotMatch.Continue?"
		ConfirmMessage13 is a MessageField
			restricted
			"PayablesPaymentForInvoiceNumber<Invoice>DoesNotMatchParameters.InvoiceGroupParameterDoesNotMatch.Continue?"
		ConfirmMessage14 is a MessageField
			restricted
			"PayablesPaymentForInvoiceNumber<Invoice>DoesNotMatchParameters.VendorClassDoesNotMatchAnyVendorClassParameters.Continue?"
		ConfirmMessage15 is a MessageField
			restricted
			"PayablesPaymentForInvoiceNumber<Invoice>DoesNotMatchParameters.VendorClassDoesNotMatchAnyVendorClassParameters.Continue?"
		ConfirmMessage16 is a MessageField
			restricted
			"PayablesPaymentForInvoiceNumber<Invoice>DoesNotMatchParameters.CashCodeParameterDoesNotMatch.Continue?"
		ConfirmMessage17 is a MessageField
			restricted
			"PayablesPaymentForInvoiceNumber<Invoice>DoesNotMatchParameters.DueDateIsPastPayThroughDate.Continue?"
		SkipMessage18 is a MessageField
			restricted
			"PayablesPaymentForInvoiceNumber<Invoice>CannotBeAddedTo_Cash_Requirements_Result.InvoiceIsUnmatched."
		SkipMessage19 is a MessageField
			restricted
			"PayablesPaymentForInvoiceNumber<Invoice>CannotBeAddedTo_Cash_Requirements_Result.MatchInvoiceHasOpenMessages."
		SkipMessage20 is a MessageField
			restricted
			"PayablesPaymentForInvoiceNumber<Invoice>CannotBeAddedTo_Cash_Requirements_Result.NetPaymentAmountExceedsMaxiumumAmountForPaymentOutputOptionOfElectronicFile."
		SkipMessage21 is a MessageField
			restricted
			"PayablesPayment(s)ForBankTransactionCode<BankTransactionCode>CannotBeAddedTo_Cash_Requirements_Result.BankTransactionCodeIsNotActive."
		SkipMessage22 is a MessageField		
			restricted
			"PayablesPaymentForInvoiceNumber<Invoice>CannotBeAddedTo_Cash_Requirements_Result.VendorLocationIsOnHold."
		SkipMessage23 is a MessageField
			restricted
			"PayablesPayment(s)ForCashCode<CashCode>CannotBeAddedTo_Cash_Requirements_Result.CashCodeIsNotActive."
		SkipMessage24 is a MessageField
			restricted
			"PayablesPaymentForInvoiceNumber<Invoice>CannotBeAddedTo_Cash_Requirements_Result.InvalidVendorBankInformation."
		SkipMessage25 is a MessageField
			restricted
			"PayablesPayment(s)ForAlternateBankTransactionCode<BankTransactionCode.ElectronicAlternateTransactionCode.BankTransactionCode>CannotBeAddedTo_Cash_Requirements_Result.AlternateBankTransactionCodeIsNotActive."
		SkipMessage27 is a MessageField
			restricted
			"PayablesPaymentForInvoiceNumber<Invoice>CannotBeAddedTo_Cash_Requirements_Result.InvalidCashPaymentFormat."
		SkipMessage28 is a MessageField
			restricted
			"PayablesPaymentForInvoiceNumber<Invoice>CannotBeAddedTo_Cash_Requirements_Result.CurrentlyInTheMiddleOfAnotherProcess."
		InvoiceGroupPaymentsExistMessage is a MessageField
			restricted
			"CreditMemo_/_PrepaymentCreditPayablesPayment(s)ForSpecificInvoiceGroupAddedTo_Cash_Requirements_Result."


		OutputNumberOfDecimals is a DerivedField
			type is Numeric 1
			if (InvoiceCurrency entered)
				return InvoiceCurrency.NumberOfDecimals
			else
				return 3


		DerivedRoundTo is a DerivedField
			type is Decimal 5.4
			restricted
			if (OutputNumberOfDecimals = 2)
				return .01
			else
			if (OutputNumberOfDecimals = 0)
				return 1
			else
			if (OutputNumberOfDecimals = 3)
				return .001
			else
			if (OutputNumberOfDecimals = 4)
				return .0001


		DerivedLocalRoundTo is a DerivedField
			type is Decimal 5.4
			restricted
			if (LocalNumberOfDecimals = 2)
				return .01
			else
			if (LocalNumberOfDecimals = 0)
				return 1
			else
			if (LocalNumberOfDecimals = 3)
				return .001
			else
			if (LocalNumberOfDecimals = 4)
				return .0001


		RoundedDiscountAmount is a DerivedField		
			type is like CurrencyAmount		
			restricted
			if (DiscountAmount.CurrencyAmount entered)
				RoundedDiscountAmount	      = DiscountAmount.CurrencyAmount
				round RoundedDiscountAmount to nearest DerivedRoundTo
				return RoundedDiscountAmount

		RoundedCurrencyAmount is a DerivedField		
			type is like CurrencyAmount		
			restricted
			if (LocalCurrencyAmount entered)
				RoundedCurrencyAmount	      = LocalCurrencyAmount
				round RoundedCurrencyAmount to nearest DerivedRoundTo
				return RoundedCurrencyAmount

		DerivedPONumber is a DerivedField
			type is Alpha size 13
			if (ApPoNumber > 0)
				return ApPoNumber
			else
				return blank

		NetVendorPaymentAmount is a DerivedField
			type is like InternationalAmount
			if (VendorPaymentCurrency 	= InvoiceCurrency)
				return  NetPaymentAmount.CurrencyAmount
			if (VendorPaymentCurrency	= CashCode.Currency
			and VendorPaymentAmount		!entered)
				return BankCheckAmount
			if (VendorPaymentAmount		entered)
				return (VendorPaymentAmount * (NetPaymentAmount.CurrencyAmount / PaymentAmount.CurrencyAmount))
				

		DerivedWithholdingRate is a DerivedField
			type is Percent 5.2
			for each PayablesInvoiceWithholdingForIDMRel
				LocalWithholdingCode 		= each.IncomeWithholdingCode
				LocalWithholdingCategory 	= each.WithholdingCategory
				
				if (PayablesInvoicePayment.Vendor.EnrolledWithholding)
					LocalWithholdingRate += last IncomeWithholdingRateRel.EnrolledRate
				else
					LocalWithholdingRate += last IncomeWithholdingRateRel.Rate
			return LocalWithholdingRate

		DerivedDelimiter is a DerivedField
			type is Alpha size 5
			restricted
			LocalConfigurationParameter	= "Generic_Delimiter"
			if(FSMBODConfigurationParameterRel exists)
				return FSMBODConfigurationParameterRel.Value
		
		DerivedLineDocumentID is a DerivedField
			type is Alpha 100
			restricted
			return PayablesInvoice using "%d" + DerivedDelimiter + PayablesInvoicePayment.PaymentSequence using "%d" + DerivedDelimiter + PayablesInvoicePayment.VoidSequence using "%d"
		
		DerivedLineCheckDate is a DerivedField
			type is Alpha 20
			restricted
			return CheckDate
				
		DerivedLineFormatCheckDate is a DerivedField
			type is Alpha 20
			restricted
			return DerivedLineCheckDate[1:4] + "-" + DerivedLineCheckDate[5:6] + "-" + DerivedLineCheckDate[7:8]

	    

		DerivedTenantID is a DerivedField
			type is Alpha size 60
			restricted
			LocalConfigurationParameter	= "tenantID"
			if(FSMBODConfigurationParameterRel exists)
				return FSMBODConfigurationParameterRel.Value
		
		DerivedReleaseID is a DerivedField
			type is Alpha size 60
			restricted
			LocalConfigurationParameter	= "releaseID"
			if(FSMBODConfigurationParameterRel exists)
				return FSMBODConfigurationParameterRel.Value
		
		DerivedLogicalID is a DerivedField
			type is Alpha size 60
			restricted
			LocalConfigurationParameter	= "logicalID"
			if(FSMBODConfigurationParameterRel exists)
				return FSMBODConfigurationParameterRel.Value
		
		DerivedVersionID is a DerivedField
			type is Alpha size 60
			restricted
			LocalConfigurationParameter	= "VersionID"
			if(FSMBODConfigurationParameterRel exists)
				return FSMBODConfigurationParameterRel.Value
		
		DerivedappProdline is a DerivedField
			type is Alpha size 60
			restricted
			LocalConfigurationParameter	= "appProdline"
			if(FSMBODConfigurationParameterRel exists)
				return FSMBODConfigurationParameterRel.Value
		
		DerivedBODVariationID is a DerivedField
			type is Alpha 25
			restricted
			return bod id.VariationID
			
		DerivedBODCurrentTimeStamp is a DerivedField
			type is Alpha size 20
			restricted
			DerivedBODCurrentTimeStamp = system current timestamp
			return DerivedBODCurrentTimeStamp
			
		MassBODTitleDate is a DerivedField
			type is Alpha size 25
			restricted
			return DerivedBODCurrentTimeStamp[7:8]+DerivedBODCurrentTimeStamp[5:6]+DerivedBODCurrentTimeStamp[1:4]
		
		DerivedBODFormattedCurrentTimeStamp is a DerivedField
			type is Alpha size 30
			restricted
			return DerivedBODCurrentTimeStamp[1:4] + "-" + DerivedBODCurrentTimeStamp[5:6] + "-" + DerivedBODCurrentTimeStamp[7:8] + "T" + DerivedBODCurrentTimeStamp[9:10] + ":" + DerivedBODCurrentTimeStamp[11:12] + ":" + DerivedBODCurrentTimeStamp[13:14] + "Z"
		
		DerivedBODActionCode is a DerivedField
			type is Alpha 10
			restricted
			if (action type.Create or ActionCode.Create)
				return "Add"
			else 
			if (action type.Update)
				return "Replace"
			else 
			if (action type.Delete)
				return "Delete"
			else
				return ""
		
		DerivedFinEnterpriseGroup is a DerivedField
			type is Alpha 12
			restricted
			return GeneralLedgerCompanyRel.FinanceEnterpriseGroup
		
		DerivedAccountingEntity is a DerivedField
			type is Alpha 24
			restricted
			return GeneralLedgerCompanyRel.FinanceEnterpriseGroup + DerivedDelimiter + GeneralLedgerCompanyRel.AccountingEntity		
		
		DerivedCompany is a DerivedField
			type is Alpha 12
			restricted
			if(DerivedIntegrationApplication="Local.ly" and DerivedDebtorAddressCountry = "AU")
				return CashLedgerPayablesPayment.CashManagementAccount.BankClientIdentifier
			else
				return PayablesInvoice.Company using "%d"
				
		DerivedDocumentID is a DerivedField
			type is Alpha size 100
			restricted
			if(bod id.DocumentID!="")
				return bod id.DocumentID
			else
			if(Suffix!=0)
				LocalDocID = PayablesInvoice.Company using "%d" + DerivedDelimiter + Vendor using "%d" + DerivedDelimiter + Invoice + DerivedDelimiter  +Suffix+ DerivedDelimiter+ PayablesInvoicePayment.PaymentSequence using "%d" + DerivedDelimiter + TransactionNumber	
				return LocalDocID
			else
				LocalDocID = PayablesInvoice.Company using "%d" + DerivedDelimiter + Vendor using "%d" + DerivedDelimiter + Invoice + DerivedDelimiter + PayablesInvoicePayment.PaymentSequence using "%d" + DerivedDelimiter + TransactionNumber	
				return LocalDocID			
		
		DerivedBODID is a DerivedField
			type is Alpha 150
			restricted
			return "infor-nid:" + DerivedTenantID + ":" + DerivedAccountingEntity+ "::" + DerivedDocumentID + ":" + "?PayableTransaction&verb=Sync&TrackerID=" + LocalFSMInboundBODTracker
				
		DerivedUpdateTime is a DerivedField
			type is Alpha 25
			restricted
			DerivedUpdateTime = update stamp.timestamp
			return DerivedUpdateTime
		
		DerivedUpdateDateTime is a DerivedField
			type is Alpha 30
			restricted	
			return DerivedUpdateTime[1:4] + "-" + DerivedUpdateTime[5:6] + "-" + DerivedUpdateTime[7:8] + "T" + DerivedUpdateTime[9:10] + ":" + DerivedUpdateTime[11:12] + ":" + DerivedUpdateTime[13:14] + "Z"	
		
		DerivedTempCheckdate is a DerivedField
			type is Alpha 25
			restricted
			return CheckDate
		
		DerivedCheckDate is a DerivedField
			type is Alpha 30
			restricted
			return DerivedTempCheckdate[1:4] + "-" + DerivedTempCheckdate[5:6] + "-" + DerivedTempCheckdate[7:8] + "T" + DerivedBODCurrentTimeStamp[9:10] + ":" + DerivedBODCurrentTimeStamp[11:12] + ":" + DerivedBODCurrentTimeStamp[13:14] + "Z"
				
		DerivedToCurr is a DerivedField 
			type is Alpha size 5
			restricted
			return CashCode.Currency
		
		DerivedPTStatus is a DerivedField
			type is Alpha 20
			restricted
			if(Status=0)
				return "Unapproved"
			else
			if(Status=1)
				return "Open"
			else
			if(Status=8)
				return "Cancelled"
			else
			if(Status=9 and PayablesInvoicePayment.VoidSequence>0)
				return "Void"
			else
				return "Paid"
		
		DerivedVendorGroup is a DerivedField
			type is Alpha 5
			restricted
			return Company.VendorGroup
		
		DerivedSupplierDetails is a DerivedField
			type is Alpha 30
			restricted
			return DerivedFinEnterpriseGroup + DerivedDelimiter + DerivedVendorGroup + DerivedDelimiter + Vendor using "%d"
		
		DerivedVendorTaxID is a DerivedField
			type is Alpha 25
			restricted
			return Vendor.TaxID
		
		DerivedVendorName is a DerivedField
			type is Alpha size up to 120
			restricted
			return Vendor.VendorName
		
		DerivedVendorContactName is a DerivedField
			type is Alpha size up to 120
			restricted
			return Vendor.ContactName	
		
		DerivedVendorAddressLine1 is a DerivedField
			type is Alpha size 60
			restricted
			return Vendor.CurrentAddressRel.VendorAddress.PostalAddress.DeliveryAddress.AddressLine1
		
		DerivedVendorAddressLine2 is a DerivedField
			type is Alpha size 60
			restricted
			return Vendor.CurrentAddressRel.VendorAddress.PostalAddress.DeliveryAddress.AddressLine2
		
		DerivedVendorAddressLine3 is a DerivedField
			type is Alpha size 60
			restricted
			return Vendor.CurrentAddressRel.VendorAddress.PostalAddress.DeliveryAddress.AddressLine3
		
		DerivedVendorAddressLine4 is a DerivedField
			type is Alpha size 60
			restricted
			return Vendor.CurrentAddressRel.VendorAddress.PostalAddress.DeliveryAddress.AddressLine4
		
		DerivedMunicipality is a DerivedField
			type is Alpha 60
			restricted
			return Vendor.CurrentAddressRel.VendorAddress.PostalAddress.Municipality
		
		DerivedStateProvince is a DerivedField
			type is Alpha 20
			restricted
			return Vendor.CurrentAddressRel.VendorAddress.PostalAddress.StateProvince
		
		DerivedPostalCode is a DerivedField
			type is Alpha 20
			restricted
			return Vendor.CurrentAddressRel.VendorAddress.PostalAddress.PostalCode
		
		DerivedRemitToCode	is a DerivedField
			type is Alpha size 30
			restricted
			if(RemitToCode="")
				return ""
			else
				return Company.VendorGroup + DerivedDelimiter + PayVendor using "%d" + DerivedDelimiter + RemitToCode
		
		DerivedInvType is a DerivedField
			type is Alpha size 4
			restricted
			return PayablesInvoice.InvoiceType
		
		DerivedPIDocID	is a DerivedField
			type is Alpha size 100
			restricted
			if(PayablesInvoice.GroupDocumentID!="")
				DerivedPIDocID = PayablesInvoice.GroupDocumentID
			else
			if(Suffix!=0)
				DerivedPIDocID = PayablesInvoice.Company using "%d" + DerivedDelimiter + Vendor using "%d" + DerivedDelimiter + Invoice + DerivedDelimiter  +Suffix+ DerivedDelimiter+ PayablesInvoice using "%d"
			else
				DerivedPIDocID = PayablesInvoice.Company using "%d" + DerivedDelimiter + Vendor using "%d" + DerivedDelimiter + Invoice + DerivedDelimiter+ PayablesInvoice using "%d"
			return DerivedPIDocID
		
		Derivedsupplier1099ind is a DerivedField 
			type is Alpha 10
			restricted
			Derivedsupplier1099ind = Vendor.IncomeWithholding
			if(Derivedsupplier1099ind="Y")
				Derivedsupplier1099ind = "true"
				return Derivedsupplier1099ind
			else
				Derivedsupplier1099ind = "false"
				return Derivedsupplier1099ind	
		
		DerivedPITaxCode is a DerivedField
			type is Alpha size 15
			restricted
			if(PayablesInvoice.TaxCode!="")
				return PayablesInvoice.TaxCode
			else
				return ""	
		
		DerivedPITaxAmount is a DerivedField
			type is like InternationalAmount 
			restricted
			if(PayablesInvoice.TaxCode!="")
				return PayablesInvoice.TaxAmount
			else
				return 0
		
		DerivedPIBaseTaxAmount is a DerivedField
			type is like InternationalAmount
			restricted
			if(PayablesInvoice.TaxCode!="")
				return PayablesInvoice.TaxAmount * DerivedEnteredRate
			else
				return 0
		
		DerivedTermsCode is a DerivedField
			type is Alpha size 10
			restricted
			return PayablesInvoice.TermsCode
		
		DerivedEnteredRate is a DerivedField
			type is Decimal size 31.15
			restricted	
			return PayablesInvoicePayment.PaymentAmount.FunctionalAmount.EnteredCurrencyRate
		
		DerivedPTVoidStatus is a DerivedField
			type is Alpha 30
			restricted
			if(CashLedgerPayablesPaymentRel.CashLedgerPayablesPayment.CbtransRel exists)
				if(CashLedgerPayablesPaymentRel.CashLedgerPayablesPayment.CbtransRel.Status.Voided)
					LocalVoidDate	= CashLedgerPayablesPaymentRel.CashLedgerPayablesPayment.CbtransRel.ReconciliationData.ExchangeDate
					LocalVoidDate	= LocalVoidDate[1:4] + "-" + LocalVoidDate[5:6] + "-" + LocalVoidDate[7:8]
					LocalReconciledDate	= ""
					return "VoidDate"
				else
					if(CashLedgerPayablesPaymentRel.CashLedgerPayablesPayment.CbtransRel.Status.Reconciled)
						LocalReconciledDate		= CashLedgerPayablesPaymentRel.CashLedgerPayablesPayment.CbtransRel.ReconciliationData.ExchangeDate
						LocalReconciledDate	= LocalReconciledDate[1:4] + "-" + LocalReconciledDate[5:6] + "-" + LocalReconciledDate[7:8]
						LocalVoidDate	= ""
						return "ReconciledDate"

		DerivedOpenPaymentAmount is a DerivedField	
			type is like CurrencyAmount
			if  ((CheckDate not entered
			or    CheckDate > DerivedCutoffDate)
			and ((AgingMethod.AgeByDueDate
			and   DueDate <= DerivedCutoffDate)
			or   (AgingMethod.AgeByInvoiceDate
			and   PayablesInvoice.InvoiceDate <= DerivedCutoffDate)))
				return PaymentAmount.CurrencyAmount
		
		DerivedCutoffDate is a DerivedField			
			type is Date
			if (CutoffDate entered)
				return CutoffDate
			return current corporate date
		
		AgeByDueDate is a DerivedField				
			type is Numeric size 5
			return (DerivedCutoffDate - DueDate)

		AgeByInvoiceDate is a DerivedField			
			type is Numeric size 5
			return (DerivedCutoffDate - PayablesInvoice.InvoiceDate)

		PeriodCurrentRetAmount is a DerivedField	
			type is like InternationalAmount
			default label is "Current"
			if (AgingMethod.AgeByDueDate)
				if (AgeByDueDate >= 0)
					return DerivedOpenPaymentAmount
			else
				if (AgeByInvoiceDate >= 0)
					return DerivedOpenPaymentAmount
				
		PeriodOneRetAmount is a DerivedField		
			type is like InternationalAmount
			default label is "1-30Days"
			if (AgingMethod.AgeByDueDate)
				if (AgeByDueDate > 0
				and AgeByDueDate <= 30)
					return DerivedOpenPaymentAmount
			else
				if (AgeByInvoiceDate > 0
				and AgeByInvoiceDate <= 30)
					return DerivedOpenPaymentAmount

		PeriodTwoRetAmount is a DerivedField		
			type is like InternationalAmount
			default label is "31-60Days"
			if (AgingMethod.AgeByDueDate)
				if (AgeByDueDate > 30
				and AgeByDueDate <= 60)
					return DerivedOpenPaymentAmount
			else
				if (AgeByInvoiceDate > 30
				and AgeByInvoiceDate <= 60)
					return DerivedOpenPaymentAmount

		PeriodThreeRetAmount is a DerivedField		
			type is like InternationalAmount
			default label is "61-90Days"
			if (AgingMethod.AgeByDueDate)
				if (AgeByDueDate > 60
				and AgeByDueDate <= 90)
					return DerivedOpenPaymentAmount
			else
				if (AgeByInvoiceDate > 60
				and AgeByInvoiceDate <= 90)
					return DerivedOpenPaymentAmount

		PeriodFourRetAmount is a DerivedField		
			type is like InternationalAmount
			default label is "91-120Days"
			if (AgingMethod.AgeByDueDate)
				if (AgeByDueDate > 90
				and AgeByDueDate <= 120)
					return DerivedOpenPaymentAmount
			else
				if (AgeByInvoiceDate > 90
				and AgeByInvoiceDate <= 120)
					return DerivedOpenPaymentAmount

		AbovePeriodRetAmount is a DerivedField		
			type is like InternationalAmount
			default label is "Over120Days"
			if (AgingMethod.AgeByDueDate)
				if (AgeByDueDate > 120)
					return DerivedOpenPaymentAmount
			else
				if (AgeByInvoiceDate > 120)
					return DerivedOpenPaymentAmount
							
		DerivedDescTermsCode is a DerivedField
			type is Alpha size up to 60
			restricted
			if(DerivedTermsCode != "")
				return PayablesInvoice.TermsCode.Description.Desc[1]
			else
				return ""
			
		DerivedRTCVendorName is a DerivedField
			type is Alpha size up to 120
			restricted
			if(RemitToCode!="")
				return PayablesInvoice.RemitToCode.VendorName
			else
				return Vendor.VendorName	
		
		DerivedDueDate is a DerivedField
			type is Alpha size 20
			restricted
			if(DerivedTermsCode!="")
				DerivedDueDate = PayablesInvoice.DueDate
				return DerivedDueDate[1:4] + "-"+ DerivedDueDate[5:6] + "-" + DerivedDueDate[7:8]
			else
				return ""
		
		DerivedDiscountDate is a DerivedField
			type is Alpha size 20
			restricted
			if(PayablesInvoice.DiscountDate != 00000000)
				DerivedDiscountDate	= PayablesInvoice.DiscountDate
				return DerivedDiscountDate[1:4] + "-"+ DerivedDiscountDate[5:6] + "-" + DerivedDiscountDate[7:8]	
			else
				return ""
				
		DerivedPIDescription is a DerivedField
			type is Alpha size 60
			restricted
			return PayablesInvoice.Description
		
		PayableTransactionXMLBOD is a DerivedField
			type is XMLDocument
			restricted
			PayableTransactionXMLBOD = template.IONSyncPayableTransaction_PayablesInvoicePayment_Header_XML_ST document for this instance
		
		PayableTransactionSupplierDetailsXMLBOD is a DerivedField
			type is XMLDocument
			restricted
			PayableTransactionSupplierDetailsXMLBOD = template.IONSyncPayableTransaction_PayablesInvoicePayment_SupplierDetails_XML_ST document for this instance
		
		PayableTransactionContactDetailsXMLBOD is a DerivedField
			type is XMLDocument
			restricted
			if(VendorContactsLocRel exists)
				for each VendorContactsLocRel
					each.LocalAccountingEntity = DerivedAccountingEntity
					if(each.VendorContact.VendorContactCode = "PRIME")
						PayableTransactionContactDetailsXMLBOD += template.IONSyncPayableTransaction_VendorContact_ContactDetails_XML_ST document for each
		
		PayableTransactionLineXMLBOD is a DerivedField
			type is XMLDocument
			restricted
			if(PayablesInvoice.PayablesInvoiceDetailRel exists)
				for each PayablesInvoice.PayablesInvoiceDetailRel
					PayableTransactionLineXMLBOD += template.IONSyncPayableTransaction_PayableTransactionLine_PayablesInvoiceDetail_XML_ST document for each




		DerivedBODMXBankAccountNumber is a DerivedField
			type is AlphaUpper 35
			restricted
			if(DerivedIntegrationApplication="Local.ly" and GeneralLedgerCompanyRel.AccountingEntity.AddressCode.PostalAddress.Country = "MX")
				return CashLedgerPayablesPayment.CashManagementAccount.BankClientIdentifier
			else
				return ""
		
		DerivedBODBranchName is a DerivedField
			type is Alpha size 70
			restricted
			if(DerivedIntegrationApplication="Local.ly" and GeneralLedgerCompanyRel.AccountingEntity.AddressCode.PostalAddress.Country = "MX")
				return DerivedBEBranchName
			else
				return ""
		
		
		
		DerivedTaxID is a DerivedField
			type is Alpha size 25
			restricted
			if(PayablesInvoice.TaxEntityRel.VATRegistrationNumber entered)
				return PayablesInvoice.TaxEntityRel.VATRegistrationNumber
			else
				return PayablesInvoice.TaxEntityRel.TaxID
		
		DerivedPayablesCompanyName is a DerivedField
			type is Alpha size up to 80
			restricted
			return Company.Name
			
		DerivedDebtorAddress1 is a DerivedField
			type is Alpha size 40
			restricted
			return GeneralLedgerCompanyRel.AccountingEntity.AddressCode.PostalAddress.DeliveryAddress.AddressLine1
			
		DerivedDebtorAddress2 is a DerivedField
			type is Alpha size 40
			restricted
			return GeneralLedgerCompanyRel.AccountingEntity.AddressCode.PostalAddress.DeliveryAddress.AddressLine2
			
		DerivedDebtorAddress3 is a DerivedField
			type is Alpha size 40
			restricted
			return GeneralLedgerCompanyRel.AccountingEntity.AddressCode.PostalAddress.DeliveryAddress.AddressLine3
			
		DerivedDebtorAddress4 is a DerivedField
			type is Alpha size 40
			restricted
			return GeneralLedgerCompanyRel.AccountingEntity.AddressCode.PostalAddress.DeliveryAddress.AddressLine4
			
		DerivedDebtorAddressCity is a DerivedField
			type is Alpha size 58
			restricted
			return GeneralLedgerCompanyRel.AccountingEntity.AddressCode.PostalAddress.Municipality
			
		DerivedDebtorAddressState is a DerivedField
			type is Alpha size 3
			restricted
			return GeneralLedgerCompanyRel.AccountingEntity.AddressCode.PostalAddress.StateProvince
			
		DerivedDebtorAddressPostalCode is a DerivedField
			type is Alpha size 12
			restricted
			return GeneralLedgerCompanyRel.AccountingEntity.AddressCode.PostalAddress.PostalCode
		
		DerivedDebtorAddressContact is a DerivedField
			type is Alpha size 255
			restricted
			return GeneralLedgerCompanyRel.AccountingEntity.AddressCode.PersonResponsible.Name.GivenName + " " + GeneralLedgerCompanyRel.AccountingEntity.AddressCode.PersonResponsible.Name.FamilyName
		
		DerivedCashLedgerSourceRecord is a DerivedField
			type is Alpha 5
			if(CashLedgerSourceRecord.CashLedgerPayment)
				return "CBM"
			else 
			if(CashLedgerSourceRecord.CashLedgerPayablesPayment)
				return "CHK"
			else 
			if(CashLedgerSourceRecord.CashLedgerTransaction)
				return "CBT"
			else 
			if(CashLedgerSourceRecord.CashLedgerReturnedPayment)
				return "CRP"
			else 
			if(CashLedgerSourceRecord.ElectronicFundsTransfer)
				return "CFT"
			else
				return ""

		BODDocumentID is a DerivedField
			type is Alpha 75
			restricted
			return CashLedgerPayablesPayment.CashManagementGroup + DerivedDelimiter + DerivedCashLedgerSourceRecord + DerivedDelimiter + CashCode + DerivedDelimiter + CashLedgerPayablesPayment.BankTransactionCode + DerivedDelimiter + DerivedDisplayID
			
		DerivedDisplayID is a DerivedField
			type is Alpha size 10
			restricted
			return CashLedgerPayablesPayment.TransactionIDNumber
		
		DerivedFinanceEnterpriseGroup is a DerivedField
			type is Alpha 4
			restricted
			return GeneralLedgerCompanyRel.FinanceEnterpriseGroup
		
		DerivedReqExecDate is a DerivedField
			type is Alpha size 20
			restricted

			if(DerivedIntegrationApplication="Local.ly" and DerivedDebtorAddressCountry="NZ")
				DerivedReqExecDate = CashLedgerPayablesPayment.PaymentDate
			else
				DerivedReqExecDate = PayablesInvoice.DueDate
			return DerivedReqExecDate[0:4] + "-"+ DerivedReqExecDate[5:6] + "-" + DerivedReqExecDate[7:8]
		
		DerivedIDScheme is a DerivedField
			type is Alpha size 30
			restricted
			return "BankPartyIdentification"
		
		DerivedDkPriorityCode is a DerivedField
			type is Alpha size 10
			restricted
			if(DerivedIntegrationApplication="Local.ly" and DerivedDebtorAddressCountry="DK")
				return "Normal"
			else
				return ""
		
		DerivedBODAccountingEntity is a DerivedField
			type is Alpha size 24
			restricted
			return DerivedFinanceEnterpriseGroup + DerivedDelimiter + GeneralLedgerCompanyRel.AccountingEntity
			
		DerivedTaxIDSchemaName is a DerivedField
			type is Alpha size 30
			restricted
			if(DerivedDebtorAddressCountry="SE" or DerivedDebtorAddressCountry="FR")
				return "CountryIdentificationNumber"
			else 
				return "TaxIdentificationNumber"		
			
		DerivedDebtorAddressCountry is a DerivedField
			type is Alpha size 3
			restricted
			return GeneralLedgerCompanyRel.AccountingEntity.AddressCode.PostalAddress.Country
		
		DerivedDebtorBBANID is a DerivedField
			type is Alpha size 35
			restricted
			if (CashPaymentFormatRel.PaymentFormat.SwedenPgdPlusgiroDomestic or 
				CashPaymentFormatRel.PaymentFormat.SwedenBgdBankgiroDomestic or
				CashPaymentFormatRel.PaymentFormat.FinlandFndNordeaDomestic or
				CashPaymentFormatRel.PaymentFormat.NorwayNtdTelepayDomestic or
				CashPaymentFormatRel.PaymentFormat.DenmarkDddDanskeBankDomestic)
				return CashCode.BankAccountNumber
			else 
			if (CashPaymentFormatRel.PaymentFormat.SwedenBgiBankgiroInternational)
				return CashCode.BankAccountNumber
			else
				return ""
			
		DerivedDebtorIBANID is a DerivedField
			type is Alpha size 35
			restricted
			if (CashPaymentFormatRel.PaymentFormat.SwedenPgdPlusgiroDomestic or 
				CashPaymentFormatRel.PaymentFormat.SwedenBgdBankgiroDomestic or
				CashPaymentFormatRel.PaymentFormat.FinlandFndNordeaDomestic or
				CashPaymentFormatRel.PaymentFormat.NorwayNtdTelepayDomestic or
				CashPaymentFormatRel.PaymentFormat.DenmarkDddDanskeBankDomestic)
				return ""
			else 
			if (CashPaymentFormatRel.PaymentFormat.SwedenBgiBankgiroInternational)
				return ""
			else
				return CashCode.BankAccountNumber
				
		DerivedDebtorsBBANID is a DerivedField
			type is Alpha size 35
			restricted
			if(CashCode.BankAccountValidationType.Iban or CashCode.BankAccountValidationType.IbanAndBIC)
				return ""
			else
				return CashCode.BankAccountNumber
				
		DerivedDebtorsIBANID is a DerivedField
			type is Alpha size 35
			restricted
			if(CashCode.BankAccountValidationType.Iban or CashCode.BankAccountValidationType.IbanAndBIC)
				return CashCode.BankAccountNumber
			else
				return ""
		
		DerivedCreditorsBBANID is a DerivedField
			type is Alpha size 35
			restricted
			if(CashCode.BankAccountValidationType.Iban or CashCode.BankAccountValidationType.IbanAndBIC)
				return ""
			else
				return DerivedAccountNumber
				
		DerivedCreditorsIBANID is a DerivedField
			type is Alpha size 35
			restricted
			if(CashCode.BankAccountValidationType.Iban or CashCode.BankAccountValidationType.IbanAndBIC)
				return DerivedAccountNumber
			else
				return ""
				
		DerivedCurrency is a DerivedField
			type is AlphaUpper size 5
			restricted
			return CashCode.Currency
		
		DerivedBankTransactionCodeDesc is a DerivedField
			type is Alpha size up to 60
			restricted
			if(DerivedIntegrationApplication="Local.ly" and DerivedDebtorAddressCountry = "AU")
				return CashLedgerPayablesPayment.BankTransactionCode.Description
			else 
				return ""
			
			
		DerivedBankEntityBIC is a DerivedField
			type is AlphaUpper size 12
			restricted
			return CashCode.SwiftID
				
		DerivedfirstagentpartyID is a DerivedField
			type is Alpha size 12
			restricted
			if (DerivedBankEntityBIC entered)
				return CashLedgerPayablesPayment.CashCode + DerivedDelimiter + DerivedBankEntityBIC
			else
				return CashLedgerPayablesPayment.CashCode
				
		DerivedBEBankName is a DerivedField
			type is AlphaUpper size 15
			restricted
			if (DerivedIntegrationApplication="Local.ly")
				if(DerivedCountry = "MX")
					return CashLedgerPayablesPayment.CashCode.FinancialInstitution
				else
				if(DerivedCountry = "AU")
					return CashLedgerPayablesPayment.CashCode.FinancialInstitution.Description
				else
					return CashLedgerPayablesPayment.PaidVendor.BankEntity.BankName
			else
				return CashLedgerPayablesPayment.PaidVendor.BankEntity.BankName
			
		DerivedFwdagentpartyLocType is a DerivedField
			type is Alpha size 20
			restricted
			return "Financial"
			
		DerivedBEBranchName is a DerivedField
			type is Alpha size 70
			restricted
			if(DerivedRemitTolocation entered and DerivedVLBankEntity entered)
				return VendorLocationRel.DerivedIBranchName
			else
			if(DerivedRemitTolocation entered and DerivedVLBankEntity not entered)
				return CashLedgerPayablesPayment.PaidVendor.BankEntity.BranchName
			else
			if(DerivedRemitTolocation not entered and DerivedVLBankEntity entered)
				return CashLedgerPayablesPayment.PaidVendor.BankEntity.BranchName
			else
				return ""
			
		DerivedBankEntityContact is a DerivedField
			type is AlphaUpper size 20
			restricted
			if(DerivedIntegrationApplication="Local.ly" and GeneralLedgerCompanyRel.AccountingEntity.AddressCode.PostalAddress.Country = "MX")
				return DerivedPaidVendorContactName
			else
				return CashLedgerPayablesPayment.PaidVendor.BankEntity.Contact
		
		DerivedBankEntityAddressLine1 is a DerivedField
			type is Alpha size 40
			restricted
			if(DerivedIntegrationApplication="Local.ly" and GeneralLedgerCompanyRel.AccountingEntity.AddressCode.PostalAddress.Country = "MX")
				return DerivedVenAddressLine1
			else
				return CashLedgerPayablesPayment.PaidVendor.BankEntity.PostalAddress.DeliveryAddress.AddressLine1
			
		DerivedBankEntityAddressLine2 is a DerivedField
			type is Alpha size 40
			restricted
			if(DerivedIntegrationApplication="Local.ly" and GeneralLedgerCompanyRel.AccountingEntity.AddressCode.PostalAddress.Country = "MX")
				return DerivedVenAddressLine2
			else
				return CashLedgerPayablesPayment.PaidVendor.BankEntity.PostalAddress.DeliveryAddress.AddressLine2
			
		DerivedBankEntityAddressLine3 is a DerivedField
			type is Alpha size 40
			restricted
			if(DerivedIntegrationApplication="Local.ly" and GeneralLedgerCompanyRel.AccountingEntity.AddressCode.PostalAddress.Country = "MX")
				return DerivedVenAddressLine3
			else
				return CashLedgerPayablesPayment.PaidVendor.BankEntity.PostalAddress.DeliveryAddress.AddressLine3
			
		DerivedBankEntityAddressLine4 is a DerivedField
			type is Alpha size 40
			restricted
			if(DerivedIntegrationApplication="Local.ly" and GeneralLedgerCompanyRel.AccountingEntity.AddressCode.PostalAddress.Country = "MX")
				return DerivedVenAddressLine4
			else
				return CashLedgerPayablesPayment.PaidVendor.BankEntity.PostalAddress.DeliveryAddress.AddressLine4
			
		DerivedBankEntityMunicipality is a DerivedField
			type is Alpha size 58
			restricted
			if(DerivedIntegrationApplication="Local.ly" and GeneralLedgerCompanyRel.AccountingEntity.AddressCode.PostalAddress.Country = "MX")
				return DerivedVendorMunicipality
			else
				return CashLedgerPayablesPayment.PaidVendor.BankEntity.PostalAddress.Municipality
			
		DerivedBankEntityStateProvince is a DerivedField
			type is Alpha size 3
			restricted
			if(DerivedIntegrationApplication="Local.ly" and GeneralLedgerCompanyRel.AccountingEntity.AddressCode.PostalAddress.Country = "MX")
				return DerivedVendorStateProvince
			else	
				return CashLedgerPayablesPayment.PaidVendor.BankEntity.PostalAddress.StateProvince
		
		DerivedBankEntityCountry is a DerivedField
			type is Alpha size 3
			restricted
			if(DerivedIntegrationApplication="Local.ly" and GeneralLedgerCompanyRel.AccountingEntity.AddressCode.PostalAddress.Country = "MX")
				return DerivedVendorCountry
			else 
				return CashLedgerPayablesPayment.PaidVendor.BankEntity.PostalAddress.Country
			
		DerivedBankEntityPostalCode is a DerivedField
			type is Alpha size 12
			restricted
			if(DerivedIntegrationApplication="Local.ly" and GeneralLedgerCompanyRel.AccountingEntity.AddressCode.PostalAddress.Country = "MX")
				return DerivedVendorPostalCode
			else
				return CashLedgerPayablesPayment.PaidVendor.BankEntity.PostalAddress.PostalCode 
			
		DerivedCleanSystemMemberID is a DerivedField
			type is AlphaUpper size 50
			restricted
			if(DerivedIntegrationApplication="Local.ly" and DerivedDebtorAddressCountry = "AU")
				return CashLedgerPayablesPayment.CashManagementAccount.FinancialInstitutionBranch.BranchIdentifier
			else
				return CashLedgerPayablesPayment.CashManagementAccount.FinancialInstitutionBranch.ClearingSystemMemberID
				
		DerivedFirstAgentFinacctID is a DerivedField
			type is Alpha size 60
			restricted
			return CashLedgerPayablesPayment.BankTransactionCode + DerivedDelimiter + TransactionNumber + DerivedDelimiter + CashLedgerPayablesPayment.TransactionIDNumber
			
		DerivedPayCurrency is a DerivedField
			type is AlphaUpper size 5
			restricted
			return CashLedgerPayablesPayment.PayCurrency
			
		DerivedpmttransID is a DerivedField
			type is Alpha size 32
			restricted
			if (DerivedDebtorAddressCountry = "CL" or (DerivedIntegrationApplication="Local.ly" and GeneralLedgerCompanyRel.AccountingEntity.AddressCode.PostalAddress.Country = "MX"))
				return Invoice
			else
				return Invoice + DerivedDelimiter + CancelSequence + DerivedDelimiter + PayablesInvoicePayment.PaymentSequence
			
		DerivedSeqNum is a DerivedField
			type is Numeric size 6
			restricted
			return PayablesInvoicePayment.PaymentSequence using "%d"
			
		DerivedVendorPaymentCategoryCode is a DerivedField
			type is AlphaUpper size 6
			restricted
			return CashLedgerPayablesPayment.PaidVendor.PaymentCategoryCode
				
		DerivedVendPurposeCode is a DerivedField
			type is AlphaUpper size 6
			restricted
			if (DerivedDebtorAddressCountry = "IT")
				return DerivedVendorPaymentCategoryCode
			else
			if(DerivedIntegrationApplication="Local.ly" and DerivedDebtorAddressCountry = "AU")
				return "50"
			else
				return ""
					
		DerivedBasePaymentCurrency is a DerivedField
			type is AlphaUpper size 5
			restricted
			return CashLedgerPayablesPayment.BasePaymentAmount.ToCurrency
			
		DerivedPaidVendor is a DerivedField
			type is Numeric size 9
			restricted
			return CashLedgerPayablesPayment.PaidVendor using "%d"
			
		DerivedPaidVendorTaxID is a DerivedField
			type is AlphaUpper size 25
			restricted
			return CashLedgerPayablesPayment.PaidVendor.TaxID
			
		DerivedPaidVendorSwiftID is a DerivedField
			type is AlphaUpper size 12
			restricted
			return CashLedgerPayablesPayment.PaidVendor.SwiftID
			
		DerivedPaidVendorName is a DerivedField
			type is Alpha size up to 120
			restricted
			return CashLedgerPayablesPayment.PaidVendor.VendorName
				
		DerivedRemitTolocation is a DerivedField
			type is AlphaUpper size 15
			restricted
			return CashLedgerPayablesPayment.RemitToCode
			
		DerivedVLBankAccountNumber is a DerivedField
			type is AlphaUpper size 35
			restricted
			return CashLedgerPayablesPayment.RemitToCode.BankAccountNumber
		
		DerivedVLBankEntity is a DerivedField
			type is AlphaUpper size 15
			restricted
			return CashLedgerPayablesPayment.PaidVendor.VendorLocationRel.BankEntity
		
			
		DerivedContactName is a DerivedField
			type is Alpha size up to 120
			restricted
			if (DerivedRemitTolocation entered)
				if ((DerivedVLBankAccountNumber entered) and (DerivedVLBankEntity entered))
					return VendorLocationRel.ContactName
				else
					return CashLedgerPayablesPayment.PaidVendor.ContactName
			else
				return CashLedgerPayablesPayment.PaidVendor.ContactName
				
		DerivedAccountNumber is a DerivedField
			type is Alpha size 35
			restricted
			if (DerivedRemitTolocation entered)
				if ((DerivedVLBankAccountNumber entered) and (DerivedVLBankEntity entered))
					return DerivedVLBankAccountNumber
				else
					return CashLedgerPayablesPayment.PaidVendor.BankAccountNumber
			else
				return CashLedgerPayablesPayment.PaidVendor.BankAccountNumber
				
		DerivedVLocAddressLine1 is a DerivedField
			type is Alpha size 40
			restricted
			return VendorLocationRel.VendorAddress.DeliveryAddress.AddressLine1
		
		DerivedVLocAddressLine2 is a DerivedField
			type is Alpha size 40
			restricted
			return VendorLocationRel.VendorAddress.DeliveryAddress.AddressLine2
			
		DerivedVLocAddressLine3 is a DerivedField
			type is Alpha size 40
			restricted
			return VendorLocationRel.VendorAddress.DeliveryAddress.AddressLine3
			
		DerivedVLocAddressLine4 is a DerivedField
			type is Alpha size 40
			restricted
			return VendorLocationRel.VendorAddress.DeliveryAddress.AddressLine4
				
		DerivedAddressLine1 is a DerivedField
			type is Alpha size 40
			restricted
			if (DerivedRemitTolocation entered)
				if ((DerivedVLBankAccountNumber entered) and (DerivedVLBankEntity entered))
					return VendorLocationRel.VendorAddress.DeliveryAddress.AddressLine1
				else
					return DerivedVennAddressLine1
			else
				return DerivedVennAddressLine1
		
		DerivedAddressLine2 is a DerivedField
			type is Alpha size 40
			restricted
			if (DerivedRemitTolocation entered)
				if ((DerivedVLBankAccountNumber entered) and (DerivedVLBankEntity entered))
					return VendorLocationRel.VendorAddress.DeliveryAddress.AddressLine2
				else
					return DerivedVennAddressLine2
			else
				return DerivedVennAddressLine2
				
		DerivedAddressLine3 is a DerivedField
			type is Alpha size 40
			restricted
			if (DerivedRemitTolocation entered)
				if ((DerivedVLBankAccountNumber entered) and (DerivedVLBankEntity entered))
					return VendorLocationRel.VendorAddress.DeliveryAddress.AddressLine3
				else
					return DerivedVennAddressLine3
			else
				return DerivedVennAddressLine3
		
		DerivedAddressLine4 is a DerivedField
			type is Alpha size 40
			restricted
			if (DerivedRemitTolocation entered)
				if ((DerivedVLBankAccountNumber entered) and (DerivedVLBankEntity entered))
					return VendorLocationRel.VendorAddress.DeliveryAddress.AddressLine3
				else
					return DerivedVennAddressLine4
			else
				return DerivedVennAddressLine4
				
		DerivedVLocMunicipality is a DerivedField
			type is Alpha size 58
			restricted
			return Vendor.CurrentAddressRel.VendorAddress.PostalAddress.Municipality
		
		DerivedVLocStateProvince is a DerivedField
			type is Alpha size 3
			restricted
			return Vendor.CurrentAddressRel.VendorAddress.PostalAddress.StateProvince
		
		DerivedVLocCountry is a DerivedField
			type is Alpha size 3
			restricted
			return Vendor.CurrentAddressRel.VendorAddress.PostalAddress.Country
		
		DerivedVLocPostalCode is a DerivedField
			type is Alpha size 12
			restricted
			return Vendor.CurrentAddressRel.VendorAddress.PostalAddress.PostalCode
			
		DerivedInternationalPrefix is a DerivedField
			type is Alpha size 50
			restricted
			return CashLedgerPayablesPayment.PaidVendor.PhoneNumber.InternationalPrefix
			
		DerivedChannelCD is a DerivedField
			type is Alpha size 10
			restricted
			if (DerivedInternationalPrefix entered)
				return "Phone"
				
		DerivedSubscriberNumber is a DerivedField
			type is Alpha size 50
			restricted
			return CashLedgerPayablesPayment.PaidVendor.PhoneNumber.SubscriberNumber
			
		DerivedExtension is a DerivedField
			type is Alpha size 50
			restricted
			return CashLedgerPayablesPayment.PaidVendor.PhoneNumber.Extension
				
		DerivedCreditorBBANID is a DerivedField
			type is Alpha size 35
			restricted
			if (CashPaymentFormatRel.PaymentFormat.SwedenPgdPlusgiroDomestic or 
				CashPaymentFormatRel.PaymentFormat.SwedenBgdBankgiroDomestic or
				CashPaymentFormatRel.PaymentFormat.FinlandFndNordeaDomestic or
				CashPaymentFormatRel.PaymentFormat.NorwayNtdTelepayDomestic or
				CashPaymentFormatRel.PaymentFormat.DenmarkDddDanskeBankDomestic)
				return DerivedAccountNumber
			else 
			if (CashPaymentFormatRel.PaymentFormat.SwedenBgiBankgiroInternational)
				return ""
			else
				return ""
			
		DerivedCreditorIBANID is a DerivedField
			type is Alpha size 35
			restricted
			if (CashPaymentFormatRel.PaymentFormat.SwedenPgdPlusgiroDomestic or 
				CashPaymentFormatRel.PaymentFormat.SwedenBgdBankgiroDomestic or
				CashPaymentFormatRel.PaymentFormat.FinlandFndNordeaDomestic or
				CashPaymentFormatRel.PaymentFormat.NorwayNtdTelepayDomestic or
				CashPaymentFormatRel.PaymentFormat.DenmarkDddDanskeBankDomestic)
				return ""
			else 
			if (CashPaymentFormatRel.PaymentFormat.SwedenBgiBankgiroInternational)
				return DerivedAccountNumber
			else
				return DerivedAccountNumber

		DerivedAccrualCode is a DerivedField 
			type is like PayablesAccrualCode
			restricted
			if (AccrualCode entered)
				return AccrualCode
			else
				return PayablesInvoice.AccrualCode
				
		DerivedPaidVendorBalanceCurrency is a DerivedField
			type is Alpha size 5
			restricted
			return CashLedgerPayablesPayment.PaidVendor.BalanceCurrency
			
		DerivedCurrencyCode is a DerivedField
			type is AlphaUpper size 5
			restricted
			if (DerivedDebtorAddressCountry = "CA")
				return CashLedgerPayablesPayment.PayCurrency
		
		DerivedVennAddressLine1 is a DerivedField
			type is Alpha size 40
			restricted
			return CashLedgerPayablesPayment.PaidVendor.CurrentAddressRel.VendorAddress.PostalAddress.DeliveryAddress.AddressLine1
			
		DerivedVennAddressLine2 is a DerivedField
			type is Alpha size 40
			restricted
			return CashLedgerPayablesPayment.PaidVendor.CurrentAddressRel.VendorAddress.PostalAddress.DeliveryAddress.AddressLine2
			
		DerivedVennAddressLine3 is a DerivedField
			type is Alpha size 40
			restricted
			return CashLedgerPayablesPayment.PaidVendor.CurrentAddressRel.VendorAddress.PostalAddress.DeliveryAddress.AddressLine3
			
		DerivedVennAddressLine4 is a DerivedField
			type is Alpha size 40
			restricted
			return CashLedgerPayablesPayment.PaidVendor.CurrentAddressRel.VendorAddress.PostalAddress.DeliveryAddress.AddressLine4
			
		
		DerivedSepa is a DerivedField
			type is Boolean
			restricted
			return CashLedgerPayablesPayment.CashCode.Sepa
		
		DerivedChargeBearerCode is a DerivedField
			type is Alpha size 15
			restricted
			if(DerivedIntegrationApplication="Local.ly" and (DerivedDebtorAddressCountry="PL"))
				if(DerivedRemitTolocation entered and VendorLocationRel.CurrentAddressRel.PostalAddress.Country!="")
					if(VendorLocationRel.CurrentAddressRel.PostalAddress.Country="PL")
						return "Shared"
					else 
					if((VendorLocationRel.CurrentAddressRel.PostalAddress.Country!="PL") and
					(PayablesInvoice.DerivedMemOfEu) and (PayablesInvoice.DerivedVenLocMemOfEu))
						return "Service Level"
					else 
					if((VendorLocationRel.CurrentAddressRel.PostalAddress.Country!="PL") and
					(PayablesInvoice.DerivedMemOfEu) and (!PayablesInvoice.DerivedVenLocMemOfEu))
						return "Debtor"
					else
						return ""
				else 
				if(DerivedVLocCountry entered)
					if(DerivedVLocCountry="PL")
						return "Shared"
					else 
					if((DerivedVLocCountry!="PL") and (PayablesInvoice.DerivedMemOfEu) and (PayablesInvoice.DerivedVenMemofEu))
						return "Service Level"
					else 
					if((DerivedVLocCountry!="PL") and (PayablesInvoice.DerivedMemOfEu) and (!PayablesInvoice.DerivedVenMemofEu))
						return "Debtor"
					else
						return ""

			else
			if(DerivedIntegrationApplication="Local.ly" and DerivedDebtorAddressCountry="NL")			
				if(DerivedRemitTolocation entered and VendorLocationRel.CurrentAddressRel.PostalAddress.Country entered)
					if((PayablesInvoice.DerivedMemOfEu) and (PayablesInvoice.DerivedVenLocMemOfEu))
						return "Service Level"
					else
					if((PayablesInvoice.DerivedMemOfEu) and (!PayablesInvoice.DerivedVenLocMemOfEu))
						return "Shared"
					else
					if((!PayablesInvoice.DerivedMemOfEu) and (PayablesInvoice.DerivedVenLocMemOfEu))
						return "Shared"
				else
				if(DerivedVLocCountry entered)
					if((PayablesInvoice.DerivedMemOfEu) and (PayablesInvoice.DerivedVenMemofEu))
						return "Service Level"
					else
					if((PayablesInvoice.DerivedMemOfEu) and (!PayablesInvoice.DerivedVenMemofEu))
						return "Shared"
					else
					if((!PayablesInvoice.DerivedMemOfEu) and (PayablesInvoice.DerivedVenMemofEu))
						return "Shared"
				
				if(CashLedgerPayablesPayment.PayCurrency="EUR")
					return "Service Level"
						

			else
			if(DerivedIntegrationApplication="Local.ly" and DerivedDebtorAddressCountry="NZ")
				if(DerivedRemitTolocation entered and VendorLocationRel.CurrentAddressRel.PostalAddress.Country entered)
					if(VendorLocationRel.CurrentAddressRel.PostalAddress.Country!="NZ")
						return "Shared"
					else
						return "Debtor"
				else 
				if(DerivedVLocCountry entered)
					if(DerivedVLocCountry!="NZ")
						return "Shared"
					else
						return "Debtor"
			else 
			if (DerivedSepa = "true")
				return "Service Level"
			else
				if(DerivedDebtorAddressCountry="PT")
					return "Creditor"
				else
					return ""
					

					
		DerivedRmtIDScheme is a DerivedField
			type is Alpha size 60
			restricted
			return CashLedgerPayablesPayment.BankTransactionCode + DerivedDelimiter + TransactionNumber + DerivedDelimiter + CashLedgerPayablesPayment.TransactionIDNumber
		
		DerivedInvoiceType is a DerivedField
			type is Alpha size 15
			if (PayablesInvoice.InvoiceType="C")
				return "CreditMemo"
			if (PayablesInvoice.InvoiceType="D")
				return "DebitMemo"
			if (PayablesInvoice.InvoiceType="P")
				return "Prepayment"
			if (PayablesInvoice.InvoiceType="")
				return "Invoice"
			
		DerivedRemmInvoiceType is a DerivedField
			type is Alpha size 10
			restricted
			if(DerivedDebtorAddressCountry = "FR")
				return "SupplierInvoice"
			else
				return DerivedInvoiceType
				
		
		DerivedBODDiscountAmount is a DerivedField
			type is like CurrencyAmount	
			restricted
			return DiscountAmount.CurrencyAmount	
			
		DerivedTaxAmount is a DerivedField
			type is like InternationalAmount
			return PayablesInvoice.TaxAmount
		
		DerivedInvoiceCurrency is a DerivedField
			type is AlphaUpper size 5
			restricted
			return PayablesInvoice.InvoiceCurrency
		
		DerivedTaxBaseAmount is a DerivedField
			type is like InternationalAmount
			restricted
			if (DerivedInvoiceCurrency!=DerivedBasePaymentCurrency and DerivedTaxAmount > 0)
				return DerivedTaxAmount*DerivedEnteredCurrencyAmount
			else
				return DerivedTaxAmount
		
		DerivedReference is a DerivedField
			type is Alpha size up to 40
			restricted
			return PayablesInvoice.Reference
		
		DerivedProcurementCardStatement is a DerivedField
			type is Alpha size 22
			restricted
			if(DerivedIntegrationApplication="Local.ly" and GeneralLedgerCompanyRel.AccountingEntity.AddressCode.PostalAddress.Country = "MX")
				return CashLedgerPayablesPayment.CashLedgerTransactionIdentifier
			else
				return PayablesInvoice.ProcurementCardStatement
		
		DerivedpaymentPurposeCode is a DerivedField
			type is Alpha size up to 60
			default label is "PaymentPurposeCode"
			if(DerivedIntegrationApplication="Local.ly" and GeneralLedgerCompanyRel.AccountingEntity.AddressCode.PostalAddress.Country = "MX")
				return PayablesInvoiceRel.Description
			else
				return ""
		
			
		DerivedPaidVendorBankInstruct1 is a DerivedField
			type is AlphaUpper size 35
			restricted
			return CashLedgerPayablesPayment.PaidVendor.BankInstructions1
			
		DerivedPaidVendorBankInstruct2 is a DerivedField
			type is AlphaUpper size 35
			restricted
			return CashLedgerPayablesPayment.PaidVendor.BankInstructions2
		
		DerivedPaidVendorBankInstruct3 is a DerivedField
			type is AlphaUpper size 35
			restricted
			return CashLedgerPayablesPayment.PaidVendor.BankInstructions3
			
		DerivedPaidVendorBankInstruct4 is a DerivedField
			type is AlphaUpper size 35
			restricted
			return CashLedgerPayablesPayment.PaidVendor.BankInstructions4
		
		DerivedAgreementPriorityCode is a DerivedField
			type is Alpha size 10
			restricted
			return "normal"
		
		DerivedIntegrationApplication is a DerivedField
			type is Alpha size 60
			restricted
			LocalConfigurationParameter	= "IntegrationApplication"
			if(FSMBODConfigurationParameterRel exists)
				return FSMBODConfigurationParameterRel.Value
		
		DerivedVenPaymentCategoryCode is a DerivedField
			type is AlphaUpper size 6
			restricted
			if(DerivedIntegrationApplication="Local.ly" and DerivedDebtorAddressCountry = "IT")
				return DerivedVendorPaymentCategoryCode
			else
			if(DerivedIntegrationApplication="Local.ly" and DerivedDebtorAddressCountry = "AU")
				return DerivedVendorPaymentCategoryCode
			else
				return ""
				
		DerivedEffectiveDate is a DerivedField
			type is Alpha size 100
			restricted
			DerivedEffectiveDate = current timestamp
			return DerivedEffectiveDate[0:4] + "-" + DerivedEffectiveDate[5:6] + "-" + DerivedEffectiveDate[7:8]
		
		DerivedElectTransferID is a DerivedField
			type is AlphaUpper size 40 
			restricted
			if(DerivedIntegrationApplication="Local.ly")
				if(DerivedDebtorAddressCountry = "IT")
					return LocalClearSysMemID
				else
				if(DerivedDebtorAddressCountry = "AU")
					return CashLedgerPayablesPayment.CashManagementGroup + "-" + CashLedgerPayablesPayment.TransactionNumber
				else
					return ""
			else
				return ""
					    		

    		

		DerivedBODInvoice is a DerivedField
			type is like Invoice
			restricted
			if(PayablesInvoiceRel exists and DerivedIntegrationApplication="Local.ly" and GeneralLedgerCompanyRel.AccountingEntity.AddressCode.PostalAddress.Country = "AR")
				for each PayablesInvoiceRel.Invoice split on "-"
					DerivedBODInvoice +=each
				return DerivedBODInvoice
			else 
				return ""
		
	    DerivedPIPTDocID	is a DerivedField
			type is Alpha size 100
			restricted
			if(bod id.DocumentID entered)
				DerivedPIPTDocID = bod id.DocumentID
			else
			if(Suffix!=0)
				if(DerivedIntegrationApplication="Local.ly" and GeneralLedgerCompanyRel.AccountingEntity.AddressCode.PostalAddress.Country = "AR")
					DerivedPIPTDocID = DerivedAccountingEntityCompany + DerivedDelimiter + Vendor using "%d" + DerivedDelimiter + DerivedBODInvoice + DerivedDelimiter  +Suffix+ DerivedDelimiter+ PayablesInvoice using "%d"
				else
					DerivedPIPTDocID = DerivedAccountingEntityCompany + DerivedDelimiter + Vendor using "%d" + DerivedDelimiter + Invoice + DerivedDelimiter  +Suffix+ DerivedDelimiter+ PayablesInvoice using "%d"
			else
				if(DerivedIntegrationApplication="Local.ly" and GeneralLedgerCompanyRel.AccountingEntity.AddressCode.PostalAddress.Country = "AR")
					DerivedPIPTDocID = DerivedAccountingEntityCompany + DerivedDelimiter + Vendor using "%d" + DerivedDelimiter + DerivedBODInvoice + DerivedDelimiter+ PayablesInvoice using "%d"
				else
					DerivedPIPTDocID = DerivedAccountingEntityCompany + DerivedDelimiter + Vendor using "%d" + DerivedDelimiter + Invoice + DerivedDelimiter+ PayablesInvoice using "%d"
			return DerivedPIPTDocID

					
		DerivedCurrentAmount is a DerivedField
			type is Decimal size 19.3
			restricted
			return PaymentAmount.CurrencyAmount
			
		DerivedEnteredCurrentAmount is a DerivedField
			type is Decimal size 19.3
			restricted
			if(GeneralLedgerCompanyRel.AccountingEntity.AddressCode.PostalAddress.Country = "MX")
				DerivedEnteredCurrentAmount = BankCheckAmount * DerivedFunctionalCurrRate
			else
			if(GeneralLedgerCompanyRel.AccountingEntity.AddressCode.PostalAddress.Country = "AR")
				DerivedEnteredCurrentAmount = BankCheckAmount * DerivedFunctionalCurrRate
			else
				DerivedEnteredCurrentAmount = BankCheckAmount * NetPaymentAmount.FunctionalAmount.EnteredCurrencyRate
			return 	DerivedEnteredCurrentAmount
			
		DerivedAssignedReportAmount is a DerivedField
			type is Decimal size 19.3
			restricted
			if(GeneralLedgerCompanyRel.AccountingEntity.AddressCode.PostalAddress.Country = "MX")
				DerivedAssignedReportAmount = BankCheckAmount * DerivedReportCurrRate
			else
			if(GeneralLedgerCompanyRel.AccountingEntity.AddressCode.PostalAddress.Country = "AR")
				DerivedAssignedReportAmount = BankCheckAmount * DerivedReportCurrRate
			else
				DerivedAssignedReportAmount = BankCheckAmount * NetPaymentAmount.ReportAmount1.EnteredCurrencyRate
			return DerivedAssignedReportAmount
				
		DerivedFunctionalCurrRate is a DerivedField
			type is Decimal size 31.15
			restricted	
			if(GeneralLedgerCompanyRel.AccountingEntity.AddressCode.PostalAddress.Country = "MX")
				LocalToCurrency	  = DerivedFunctionalCurrency
				LocalCurrExchangeDate = CheckDate
				if(CurrExchangeRateRel exists)
					DerivedFunctionalCurrRate = CurrExchangeRateRel.Rate
				else
					DerivedFunctionalCurrRate = 1	
			else
			if(GeneralLedgerCompanyRel.AccountingEntity.AddressCode.PostalAddress.Country = "AR")
				LocalToCurrency	  = DerivedFunctionalCurrency
				LocalCurrExchangeDate = PayablesInvoice.InvoiceDate
				if(CurrExchangeRateRel exists)
					DerivedFunctionalCurrRate = CurrExchangeRateRel.Rate
				else
					DerivedFunctionalCurrRate = 1		
			return DerivedFunctionalCurrRate
				
		DerivedReportCurrRate is a DerivedField
			type is Decimal size 31.15
			restricted	
			if(GeneralLedgerCompanyRel.AccountingEntity.AddressCode.PostalAddress.Country = "MX")
				LocalToCurrency	  = DerivedReportCurrency
				LocalCurrExchangeDate = CheckDate
				if(LocalFromCurrency = LocalToCurrency)
					DerivedReportCurrRate = 1
				else
				if(CurrExchangeRateRel exists)
					DerivedReportCurrRate = CurrExchangeRateRel.Rate
			else
			if(GeneralLedgerCompanyRel.AccountingEntity.AddressCode.PostalAddress.Country = "AR")
				LocalToCurrency	  = DerivedReportCurrency
				LocalCurrExchangeDate = PayablesInvoice.InvoiceDate
				if(LocalFromCurrency = LocalToCurrency)
					DerivedReportCurrRate = 1
				else
				if(CurrExchangeRateRel exists)
					DerivedReportCurrRate = CurrExchangeRateRel.Rate
			return DerivedReportCurrRate
		
		DerivedWithholdingCurrentAmount is a DerivedField
			type is Decimal size 19.3
			restricted
			return NetPaymentAmount.CurrencyAmount
			
		DerivedWTEnteredCurrentAmount is a DerivedField
			type is Decimal size 19.3
			restricted
			if(GeneralLedgerCompanyRel.AccountingEntity.AddressCode.PostalAddress.Country = "MX")
				return BankCheckAmount * DerivedFunctionalCurrRate
			else
			if(GeneralLedgerCompanyRel.AccountingEntity.AddressCode.PostalAddress.Country = "AR")
				return BankCheckAmount * DerivedFunctionalCurrRate
			else
				return BankCheckAmount * NetPaymentAmount.FunctionalAmount.EnteredCurrencyRate	
		
		DerivedGLCCurrency is a DerivedField
			type is AlphaUpper size 5
			restricted
			return GeneralLedgerCompanyRel.Currency
			
		DerivedAccountingEntityCompany is a DerivedField
			type is Alpha size 30
			restricted
			return GeneralLedgerCompanyRel.AccountingEntity
			
		DerivedReportCurrency is a DerivedField
			type is AlphaUpper size 5
			restricted	
			return GeneralLedgerCompanyRel.FinanceEnterpriseGroup.ReportCurrencyOne
			
		DerivedFunctionalCurrency is a DerivedField
			type is AlphaUpper size 5
			restricted	
			return GeneralLedgerCompanyRel.AccountingEntity.FunctionalCurrency
		
		PayableTrackerWithholdingTaxLineXML is a DerivedField
			type is XMLDocument
			restricted
			if (PayablesInvoiceWithholdingForVoidRel exist)
				initialize LocalTaxSequenceNumber
				for each PayablesInvoiceWithholdingForVoidRel
					LocalTaxSequenceNumber +=1
					each.LocalTaxSequenceNumber = LocalTaxSequenceNumber
					each.LocalReportingCurrency = DerivedReportCurrency
					each.LocalFunctionalCurrency= DerivedFunctionalCurrency
					each.LocalCheckDate			= CheckDate
					PayableTrackerWithholdingTaxLineXML += template.IONPayableTracker_PayablesTrackerWTTaxLine_ST document for each
				return PayableTrackerWithholdingTaxLineXML
			else
				return ""
		
		DerivedPTInvoiceType is a DerivedField
			type is Alpha size 15
			restricted
			if (PayablesInvoice.InvoiceType="C")
				return "CreditMemo"
			if (PayablesInvoice.InvoiceType="P")
				return "DebitMemo"
			if (PayablesInvoice.InvoiceType="")
				return "Invoice"						


		DerivedInvoice is a DerivedField
			type is like Invoice
			return PayablesInvoice.Invoice

		DerivedAmountAndCurrency is a DerivedField
			type is Alpha up to 27
			return PayablesInvoice.DerivedInvoiceAmountAndCurrency2

		DerivedInvoiceDate is a DerivedField
			type is like ExchangeDate
			return PayablesInvoice.InvoiceDate

		DerivedDaysPastDue is a DerivedField
			type is Numeric 3
			return PayablesInvoice.DerivedDaysAfterDueDate
			
		DerivedCompanyRepresentativeText is a DerivedField
			type is Text
			return Company.RepresentativeText
			
		DerivedBuyerName is a DerivedField
			type is Alpha up to 101
			return PayablesInvoice.Buyer.Employee.FirstLastName
	   
	    DerivedHoldCodeDescription is a DerivedField	
            type is Alpha size 60
            return first PayablesOnHoldRel.HoldCode.Description



		DerivedCountry is a DerivedField
			type is Alpha size 40
			restricted
			return GeneralLedgerCompanyRel.AccountingEntity.AddressCode.PostalAddress.Country
			
		DerivedBankEBranchName is a DerivedField
			type is Alpha size 70
			restricted
			if(DerivedIntegrationApplication="Local.ly" and DerivedCountry = "MX")
				return CashLedgerPayablesPayment.CashManagementAccount.FinancialInstitutionBranch
			else
				return DerivedBEBranchName
		
		DerivedVenBankEntity is a DerivedField
			type is AlphaUpper size 15 
			restricted
			return CashLedgerPayablesPayment.PaidVendor.BankEntity
		
		DerBankEntityMunicipality is a DerivedField
			type is Alpha size 58
			restricted
			return CashLedgerPayablesPayment.PaidVendor.BankEntity.PostalAddress.Municipality
		
		DerBankEntityAddressLine1 is a DerivedField
			type is Alpha size 40
			restricted
			return CashLedgerPayablesPayment.PaidVendor.BankEntity.PostalAddress.DeliveryAddress.AddressLine1
			
		DerBankEntityAddressLine2 is a DerivedField
			type is Alpha size 40
			restricted
			return CashLedgerPayablesPayment.PaidVendor.BankEntity.PostalAddress.DeliveryAddress.AddressLine2
			
		DerBankEntityAddressLine3 is a DerivedField
			type is Alpha size 40
			restricted
			return CashLedgerPayablesPayment.PaidVendor.BankEntity.PostalAddress.DeliveryAddress.AddressLine3
			
		DerBankEntityAddressLine4 is a DerivedField
			type is Alpha size 40
			restricted
			return CashLedgerPayablesPayment.PaidVendor.BankEntity.PostalAddress.DeliveryAddress.AddressLine4
			
		DerBankEntityStateProvince is a DerivedField
			type is Alpha size 3
			restricted
			return CashLedgerPayablesPayment.PaidVendor.BankEntity.PostalAddress.StateProvince
		
		DerBankEntityCountry is a DerivedField
			type is Alpha size 3
			restricted
			return CashLedgerPayablesPayment.PaidVendor.BankEntity.PostalAddress.Country
			
		DerBankEntityPostalCode is a DerivedField
			type is Alpha size 12
			restricted
			return CashLedgerPayablesPayment.PaidVendor.BankEntity.PostalAddress.PostalCode
		
		DerivedPaidVendorContactName is a DerivedField
			type is Alpha up to 120
			restricted
			return CashLedgerPayablesPayment.CashManagementAccount.FinancialInstitutionBranch.Description
		
		DerivedVenAddressLine1 is a DerivedField
			type is Alpha size 40
			restricted
			return CashLedgerPayablesPayment.CashManagementAccount.FinancialInstitutionBranch.Address.DeliveryAddress.AddressLine1
		
		DerivedVenAddressLine2 is a DerivedField
			type is Alpha size 40
			restricted
			return CashLedgerPayablesPayment.CashManagementAccount.FinancialInstitutionBranch.Address.DeliveryAddress.AddressLine2
		
		DerivedVenAddressLine3 is a DerivedField
			type is Alpha size 40
			restricted
			return CashLedgerPayablesPayment.CashManagementAccount.FinancialInstitutionBranch.Address.DeliveryAddress.AddressLine3
		
		DerivedVenAddressLine4 is a DerivedField
			type is Alpha size 40
			restricted
			return CashLedgerPayablesPayment.CashManagementAccount.FinancialInstitutionBranch.Address.DeliveryAddress.AddressLine4
		
		DerivedVendorMunicipality is a DerivedField
			type is Alpha size 40
			restricted
			return CashLedgerPayablesPayment.CashManagementAccount.FinancialInstitutionBranch.Address.Municipality
		
		DerivedVendorStateProvince is a DerivedField
			type is Alpha size 40
			restricted
			return CashLedgerPayablesPayment.CashManagementAccount.FinancialInstitutionBranch.Address.StateProvince
		
		DerivedVendorPostalCode is a DerivedField
			type is Alpha size 40
			restricted
			return CashLedgerPayablesPayment.CashManagementAccount.FinancialInstitutionBranch.Address.PostalCode
		
		DerivedVendorCountry is a DerivedField
			type is Alpha size 40
			restricted
			return CashLedgerPayablesPayment.CashManagementAccount.FinancialInstitutionBranch.Address.Country
		
		DPaidVendorContactName is a DerivedField
			type is Alpha up to 120
			restricted
			if(DerivedIntegrationApplication="Local.ly" and DerivedCountry = "MX")
				if (DerivedRemitTolocation entered)
					if (DerivedVLBankEntity entered and (VendorLocationRel.DerivedIBankName entered or VendorLocationRel.DerivedBAddressLine1 entered
						or VendorLocationRel.DerivedBAddressLine2 entered or VendorLocationRel.DerivedBAddressLine3 entered
						or VendorLocationRel.DerivedBAddressLine4 entered or VendorLocationRel.DerivedBMunicipality entered
						or VendorLocationRel.DerivedBStateProvince entered or VendorLocationRel.DerivedBPostalCode entered
						or VendorLocationRel.DerivedBCountry entered))
						return VendorLocationRel.DerivedIBankName
					else
					if ((DerivedVLBankEntity not entered) and (VendorLocationRel.DerivedIBankName not entered or VendorLocationRel.DerivedBAddressLine1 not entered
						or VendorLocationRel.DerivedBAddressLine2 not entered or VendorLocationRel.DerivedBAddressLine3 not entered
						or VendorLocationRel.DerivedBAddressLine4 not entered or VendorLocationRel.DerivedBMunicipality not entered
						or VendorLocationRel.DerivedBStateProvince not entered or VendorLocationRel.DerivedBPostalCode not entered
						or VendorLocationRel.DerivedBCountry not entered) and (CashLedgerPayablesPayment.PaidVendor.BankEntityBankName entered
						or DerBankEntityAddressLine1 entered or DerBankEntityAddressLine2 entered
						or DerBankEntityAddressLine3 entered or DerBankEntityAddressLine4 entered
						or DerBankEntityMunicipality entered or DerBankEntityStateProvince entered
						or DerBankEntityPostalCode entered or DerBankEntityCountry entered))
						return CashLedgerPayablesPayment.PaidVendor.BankEntityBankName
				else
				if (DerivedRemitTolocation not entered)
					if ((DerivedVenBankEntity entered) and (CashLedgerPayablesPayment.PaidVendor.BankEntityBankName entered
						or DerBankEntityAddressLine1 entered or DerBankEntityAddressLine2 entered
						or DerBankEntityAddressLine3 entered or DerBankEntityAddressLine4 entered
						or DerBankEntityMunicipality entered or DerBankEntityStateProvince entered
						or DerBankEntityPostalCode entered or DerBankEntityCountry entered))
						return CashLedgerPayablesPayment.PaidVendor.BankEntityBankName
					else
					if (DerivedVenBankEntity not entered)
						return CashLedgerPayablesPayment.PaidVendor.ContactName
				else
					return CashLedgerPayablesPayment.PaidVendor.ContactName
					
		DVendorAddressLine1 is a DerivedField
			type is Alpha size 40
			restricted
			if(DerivedIntegrationApplication="Local.ly" and DerivedCountry = "MX")
				if (DerivedRemitTolocation entered)
					if (DerivedVLBankEntity entered and (VendorLocationRel.DerivedIBankName entered or VendorLocationRel.DerivedBAddressLine1 entered
						or VendorLocationRel.DerivedBAddressLine2 entered or VendorLocationRel.DerivedBAddressLine3 entered
						or VendorLocationRel.DerivedBAddressLine4 entered or VendorLocationRel.DerivedBMunicipality entered
						or VendorLocationRel.DerivedBStateProvince entered or VendorLocationRel.DerivedBPostalCode entered
						or VendorLocationRel.DerivedBCountry entered))
						return VendorLocationRel.DerivedBAddressLine1
					else
					if ((DerivedVLBankEntity not entered) and (VendorLocationRel.DerivedIBankName not entered or VendorLocationRel.DerivedBAddressLine1 not entered
						or VendorLocationRel.DerivedBAddressLine2 not entered or VendorLocationRel.DerivedBAddressLine3 not entered
						or VendorLocationRel.DerivedBAddressLine4 not entered or VendorLocationRel.DerivedBMunicipality not entered
						or VendorLocationRel.DerivedBStateProvince not entered or VendorLocationRel.DerivedBPostalCode not entered
						or VendorLocationRel.DerivedBCountry not entered) and (CashLedgerPayablesPayment.PaidVendor.BankEntityBankName entered
						or DerBankEntityAddressLine1 entered or DerBankEntityAddressLine2 entered
						or DerBankEntityAddressLine3 entered or DerBankEntityAddressLine4 entered
						or DerBankEntityMunicipality entered or DerBankEntityStateProvince entered
						or DerBankEntityPostalCode entered or DerBankEntityCountry entered))
						return DerBankEntityAddressLine1
				else
				if (DerivedRemitTolocation not entered)
					if ((DerivedVenBankEntity entered) and (CashLedgerPayablesPayment.PaidVendor.BankEntityBankName entered
						or DerBankEntityAddressLine1 entered or DerBankEntityAddressLine2 entered
						or DerBankEntityAddressLine3 entered or DerBankEntityAddressLine4 entered
						or DerBankEntityMunicipality entered or DerBankEntityStateProvince entered
						or DerBankEntityPostalCode entered or DerBankEntityCountry entered))
						return DerBankEntityAddressLine1
					else
					if (DerivedVenBankEntity not entered)
						return DerivedVendorAddressLine1
				else
					return DerivedVendorAddressLine1
		
		DVendorAddressLine2 is a DerivedField
			type is Alpha size 40
			restricted
			if(DerivedIntegrationApplication="Local.ly" and DerivedCountry = "MX")
				if (DerivedRemitTolocation entered)
					if (DerivedVLBankEntity entered and (VendorLocationRel.DerivedIBankName entered or VendorLocationRel.DerivedBAddressLine1 entered
						or VendorLocationRel.DerivedBAddressLine2 entered or VendorLocationRel.DerivedBAddressLine3 entered
						or VendorLocationRel.DerivedBAddressLine4 entered or VendorLocationRel.DerivedBMunicipality entered
						or VendorLocationRel.DerivedBStateProvince entered or VendorLocationRel.DerivedBPostalCode entered
						or VendorLocationRel.DerivedBCountry entered))
						return VendorLocationRel.DerivedBAddressLine2
					else
					if (DerivedVLBankEntity not entered and (VendorLocationRel.DerivedIBankName not entered or VendorLocationRel.DerivedBAddressLine1 not entered
						or VendorLocationRel.DerivedBAddressLine2 not entered or VendorLocationRel.DerivedBAddressLine3 not entered
						or VendorLocationRel.DerivedBAddressLine4 not entered or VendorLocationRel.DerivedBMunicipality not entered
						or VendorLocationRel.DerivedBStateProvince not entered or VendorLocationRel.DerivedBPostalCode not entered
						or VendorLocationRel.DerivedBCountry not entered) and (CashLedgerPayablesPayment.PaidVendor.BankEntityBankName entered
						or DerBankEntityAddressLine1 entered or DerBankEntityAddressLine2 entered
						or DerBankEntityAddressLine3 entered or DerBankEntityAddressLine4 entered
						or DerBankEntityMunicipality entered or DerBankEntityStateProvince entered
						or DerBankEntityPostalCode entered or DerBankEntityCountry entered))
						return DerBankEntityAddressLine2
				else
				if (DerivedRemitTolocation not entered)
					if ((DerivedVenBankEntity entered) and (CashLedgerPayablesPayment.PaidVendor.BankEntityBankName entered
						or DerBankEntityAddressLine1 entered or DerBankEntityAddressLine2 entered
						or DerBankEntityAddressLine3 entered or DerBankEntityAddressLine4 entered
						or DerBankEntityMunicipality entered or DerBankEntityStateProvince entered
						or DerBankEntityPostalCode entered or DerBankEntityCountry entered))
						return DerBankEntityAddressLine2
					else
					if (DerivedVenBankEntity not entered)
						return DerivedVendorAddressLine2
				else
					return DerivedVendorAddressLine2
		
		DVendorAddressLine3 is a DerivedField
			type is Alpha size 40
			restricted
			if(DerivedIntegrationApplication="Local.ly" and DerivedCountry = "MX")
				if (DerivedRemitTolocation entered)
					if (DerivedVLBankEntity entered and (VendorLocationRel.DerivedIBankName entered or VendorLocationRel.DerivedBAddressLine1 entered
						or VendorLocationRel.DerivedBAddressLine2 entered or VendorLocationRel.DerivedBAddressLine3 entered
						or VendorLocationRel.DerivedBAddressLine4 entered or VendorLocationRel.DerivedBMunicipality entered
						or VendorLocationRel.DerivedBStateProvince entered or VendorLocationRel.DerivedBPostalCode entered
						or VendorLocationRel.DerivedBCountry entered))
						return VendorLocationRel.DerivedBAddressLine3
					else
					if ((DerivedVLBankEntity not entered) and (VendorLocationRel.DerivedIBankName not entered or VendorLocationRel.DerivedBAddressLine1 not entered
						or VendorLocationRel.DerivedBAddressLine2 not entered or VendorLocationRel.DerivedBAddressLine3 not entered
						or VendorLocationRel.DerivedBAddressLine4 not entered or VendorLocationRel.DerivedBMunicipality not entered
						or VendorLocationRel.DerivedBStateProvince not entered or VendorLocationRel.DerivedBPostalCode not entered
						or VendorLocationRel.DerivedBCountry not entered) and (CashLedgerPayablesPayment.PaidVendor.BankEntityBankName entered
						or DerBankEntityAddressLine1 entered or DerBankEntityAddressLine2 entered
						or DerBankEntityAddressLine3 entered or DerBankEntityAddressLine4 entered
						or DerBankEntityMunicipality entered or DerBankEntityStateProvince entered
						or DerBankEntityPostalCode entered or DerBankEntityCountry entered))
						return DerBankEntityAddressLine3
				else
				if (DerivedRemitTolocation not entered)
					if ((DerivedVenBankEntity entered) and CashLedgerPayablesPayment.PaidVendor.BankEntityBankName entered
						or DerBankEntityAddressLine1 entered or DerBankEntityAddressLine2 entered
						or DerBankEntityAddressLine3 entered or DerBankEntityAddressLine4 entered
						or DerBankEntityMunicipality entered or DerBankEntityStateProvince entered
						or DerBankEntityPostalCode entered or DerBankEntityCountry entered)
						return DerBankEntityAddressLine3
					else
					if (DerivedVenBankEntity not entered)
						return DerivedVendorAddressLine3
				else
					return DerivedVendorAddressLine3
		
		DVendorAddressLine4 is a DerivedField
			type is Alpha size 40
			restricted
			if(DerivedIntegrationApplication="Local.ly" and DerivedCountry = "MX")
				if (DerivedRemitTolocation entered)
					if (DerivedVLBankEntity entered and (VendorLocationRel.DerivedIBankName entered or VendorLocationRel.DerivedBAddressLine1 entered
						or VendorLocationRel.DerivedBAddressLine2 entered or VendorLocationRel.DerivedBAddressLine3 entered
						or VendorLocationRel.DerivedBAddressLine4 entered or VendorLocationRel.DerivedBMunicipality entered
						or VendorLocationRel.DerivedBStateProvince entered or VendorLocationRel.DerivedBPostalCode entered
						or VendorLocationRel.DerivedBCountry entered))
						return VendorLocationRel.DerivedBAddressLine4
					else
					if (DerivedVLBankEntity not entered and (VendorLocationRel.DerivedIBankName not entered or VendorLocationRel.DerivedBAddressLine1 not entered
						or VendorLocationRel.DerivedBAddressLine2 not entered or VendorLocationRel.DerivedBAddressLine3 not entered
						or VendorLocationRel.DerivedBAddressLine4 not entered or VendorLocationRel.DerivedBMunicipality not entered
						or VendorLocationRel.DerivedBStateProvince not entered or VendorLocationRel.DerivedBPostalCode not entered
						or VendorLocationRel.DerivedBCountry not entered) and (CashLedgerPayablesPayment.PaidVendor.BankEntityBankName entered
						or DerBankEntityAddressLine1 entered or DerBankEntityAddressLine2 entered
						or DerBankEntityAddressLine3 entered or DerBankEntityAddressLine4 entered
						or DerBankEntityMunicipality entered or DerBankEntityStateProvince entered
						or DerBankEntityPostalCode entered or DerBankEntityCountry entered))
						return DerBankEntityAddressLine4
				else
				if (DerivedRemitTolocation not entered)
					if ((DerivedVenBankEntity entered) and CashLedgerPayablesPayment.PaidVendor.BankEntityBankName entered
						or DerBankEntityAddressLine1 entered or DerBankEntityAddressLine2 entered
						or DerBankEntityAddressLine3 entered or DerBankEntityAddressLine4 entered
						or DerBankEntityMunicipality entered or DerBankEntityStateProvince entered
						or DerBankEntityPostalCode entered or DerBankEntityCountry entered)
						return DerBankEntityAddressLine4
					else
					if (DerivedVenBankEntity not entered)
						return DerivedVendorAddressLine4
				else
					return DerivedVendorAddressLine4
				
		DVendorMunicipality is a DerivedField
			type is Alpha size 40
			restricted
			if(DerivedIntegrationApplication="Local.ly" and DerivedCountry = "MX")
				if (DerivedRemitTolocation entered)
					if (DerivedVLBankEntity entered and (VendorLocationRel.DerivedIBankName entered or VendorLocationRel.DerivedBAddressLine1 entered
						or VendorLocationRel.DerivedBAddressLine2 entered or VendorLocationRel.DerivedBAddressLine3 entered
						or VendorLocationRel.DerivedBAddressLine4 entered or VendorLocationRel.DerivedBMunicipality entered
						or VendorLocationRel.DerivedBStateProvince entered or VendorLocationRel.DerivedBPostalCode entered
						or VendorLocationRel.DerivedBCountry entered))
						return VendorLocationRel.DerivedBMunicipality
					else
					if (DerivedVLBankEntity not entered and (VendorLocationRel.DerivedIBankName not entered or VendorLocationRel.DerivedBAddressLine1 not entered
						or VendorLocationRel.DerivedBAddressLine2 not entered or VendorLocationRel.DerivedBAddressLine3 not entered
						or VendorLocationRel.DerivedBAddressLine4 not entered or VendorLocationRel.DerivedBMunicipality not entered
						or VendorLocationRel.DerivedBStateProvince not entered or VendorLocationRel.DerivedBPostalCode not entered
						or VendorLocationRel.DerivedBCountry not entered) and (CashLedgerPayablesPayment.PaidVendor.BankEntityBankName entered
						or DerBankEntityAddressLine1 entered or DerBankEntityAddressLine2 entered
						or DerBankEntityAddressLine3 entered or DerBankEntityAddressLine4 entered
						or DerBankEntityMunicipality entered or DerBankEntityStateProvince entered
						or DerBankEntityPostalCode entered or DerBankEntityCountry entered))
						return DerBankEntityMunicipality
				else
				if (DerivedRemitTolocation not entered)
					if ((DerivedVenBankEntity entered) and CashLedgerPayablesPayment.PaidVendor.BankEntityBankName entered
						or DerBankEntityAddressLine1 entered or DerBankEntityAddressLine2 entered
						or DerBankEntityAddressLine3 entered or DerBankEntityAddressLine4 entered
						or DerBankEntityMunicipality entered or DerBankEntityStateProvince entered
						or DerBankEntityPostalCode entered or DerBankEntityCountry entered)
						return CashLedgerPayablesPayment.PaidVendor.BankEntity.PostalAddress.Municipality
					else
					if (DerivedVenBankEntity not entered)
						return DerivedMunicipality
				else
					return DerivedMunicipality
		
		DVendorStateProvince is a DerivedField
			type is Alpha size 40
			restricted
			if(DerivedIntegrationApplication="Local.ly" and DerivedCountry = "MX")
				if (DerivedRemitTolocation entered)
					if (DerivedVLBankEntity entered and (VendorLocationRel.DerivedIBankName entered or VendorLocationRel.DerivedBAddressLine1 entered
						or VendorLocationRel.DerivedBAddressLine2 entered or VendorLocationRel.DerivedBAddressLine3 entered
						or VendorLocationRel.DerivedBAddressLine4 entered or VendorLocationRel.DerivedBMunicipality entered
						or VendorLocationRel.DerivedBStateProvince entered or VendorLocationRel.DerivedBPostalCode entered
						or VendorLocationRel.DerivedBCountry entered))
						return VendorLocationRel.DerivedBStateProvince
					else
					if ((DerivedVLBankEntity not entered) and (VendorLocationRel.DerivedIBankName not entered or VendorLocationRel.DerivedBAddressLine1 not entered
						or VendorLocationRel.DerivedBAddressLine2 not entered or VendorLocationRel.DerivedBAddressLine3 not entered
						or VendorLocationRel.DerivedBAddressLine4 not entered or VendorLocationRel.DerivedBMunicipality not entered
						or VendorLocationRel.DerivedBStateProvince not entered or VendorLocationRel.DerivedBPostalCode not entered
						or VendorLocationRel.DerivedBCountry not entered) and (CashLedgerPayablesPayment.PaidVendor.BankEntityBankName entered
						or DerBankEntityAddressLine1 entered or DerBankEntityAddressLine2 entered
						or DerBankEntityAddressLine3 entered or DerBankEntityAddressLine4 entered
						or DerBankEntityMunicipality entered or DerBankEntityStateProvince entered
						or DerBankEntityPostalCode entered or DerBankEntityCountry entered))
						return DerBankEntityStateProvince
				else
				if (DerivedRemitTolocation not entered)
					if ((DerivedVenBankEntity entered) and CashLedgerPayablesPayment.PaidVendor.BankEntityBankName entered
						or DerBankEntityAddressLine1 entered or DerBankEntityAddressLine2 entered
						or DerBankEntityAddressLine3 entered or DerBankEntityAddressLine4 entered
						or DerBankEntityMunicipality entered or DerBankEntityStateProvince entered
						or DerBankEntityPostalCode entered or DerBankEntityCountry entered)
						return DerBankEntityStateProvince
					else
					if (DerivedVenBankEntity not entered)
						return DerivedStateProvince
				else
					return DerivedStateProvince
		
		DVendorPostalCode is a DerivedField
			type is Alpha size 40
			restricted
			if(DerivedIntegrationApplication="Local.ly" and DerivedCountry = "MX")
				if (DerivedRemitTolocation entered)
					if (DerivedVLBankEntity entered and (VendorLocationRel.DerivedIBankName entered or VendorLocationRel.DerivedBAddressLine1 entered
						or VendorLocationRel.DerivedBAddressLine2 entered or VendorLocationRel.DerivedBAddressLine3 entered
						or VendorLocationRel.DerivedBAddressLine4 entered or VendorLocationRel.DerivedBMunicipality entered
						or VendorLocationRel.DerivedBStateProvince entered or VendorLocationRel.DerivedBPostalCode entered
						or VendorLocationRel.DerivedBCountry entered))
						return VendorLocationRel.DerivedBPostalCode
					else
					if (DerivedVLBankEntity not entered and (VendorLocationRel.DerivedIBankName not entered or VendorLocationRel.DerivedBAddressLine1 not entered
						or VendorLocationRel.DerivedBAddressLine2 not entered or VendorLocationRel.DerivedBAddressLine3 not entered
						or VendorLocationRel.DerivedBAddressLine4 not entered or VendorLocationRel.DerivedBMunicipality not entered
						or VendorLocationRel.DerivedBStateProvince not entered or VendorLocationRel.DerivedBPostalCode not entered
						or VendorLocationRel.DerivedBCountry not entered) and (CashLedgerPayablesPayment.PaidVendor.BankEntityBankName entered
						or DerBankEntityAddressLine1 entered or DerBankEntityAddressLine2 entered
						or DerBankEntityAddressLine3 entered or DerBankEntityAddressLine4 entered
						or DerBankEntityMunicipality entered or DerBankEntityStateProvince entered
						or DerBankEntityPostalCode entered or DerBankEntityCountry entered))
						return DerBankEntityPostalCode
				else
				if (DerivedRemitTolocation not entered)
					if ((DerivedVenBankEntity entered) and CashLedgerPayablesPayment.PaidVendor.BankEntityBankName entered
						or DerBankEntityAddressLine1 entered or DerBankEntityAddressLine2 entered
						or DerBankEntityAddressLine3 entered or DerBankEntityAddressLine4 entered
						or DerBankEntityMunicipality entered or DerBankEntityStateProvince entered
						or DerBankEntityPostalCode entered or DerBankEntityCountry entered)
						return DerBankEntityPostalCode
					else
					if (DerivedVenBankEntity not entered)
						return DerivedPostalCode
				else
					return DerivedPostalCode
		
		DVendorCountry is a DerivedField
			type is Alpha size 40
			restricted
			if(DerivedIntegrationApplication="Local.ly" and DerivedCountry = "MX")
				if (DerivedRemitTolocation entered)
					if (DerivedVLBankEntity entered and (VendorLocationRel.DerivedIBankName entered or VendorLocationRel.DerivedBAddressLine1 entered
						or VendorLocationRel.DerivedBAddressLine2 entered or VendorLocationRel.DerivedBAddressLine3 entered
						or VendorLocationRel.DerivedBAddressLine4 entered or VendorLocationRel.DerivedBMunicipality entered
						or VendorLocationRel.DerivedBStateProvince entered or VendorLocationRel.DerivedBPostalCode entered
						or VendorLocationRel.DerivedBCountry entered))
						return VendorLocationRel.DerivedBCountry
					else
					if (DerivedVLBankEntity not entered and (VendorLocationRel.DerivedIBankName not entered or VendorLocationRel.DerivedBAddressLine1 not entered
						or VendorLocationRel.DerivedBAddressLine2 not entered or VendorLocationRel.DerivedBAddressLine3 not entered
						or VendorLocationRel.DerivedBAddressLine4 not entered or VendorLocationRel.DerivedBMunicipality not entered
						or VendorLocationRel.DerivedBStateProvince not entered or VendorLocationRel.DerivedBPostalCode not entered
						or VendorLocationRel.DerivedBCountry not entered) and (CashLedgerPayablesPayment.PaidVendor.BankEntityBankName entered
						or DerBankEntityAddressLine1 entered or DerBankEntityAddressLine2 entered
						or DerBankEntityAddressLine3 entered or DerBankEntityAddressLine4 entered
						or DerBankEntityMunicipality entered or DerBankEntityStateProvince entered
						or DerBankEntityPostalCode entered or DerBankEntityCountry entered))
						return DerBankEntityCountry
				else
				if (DerivedRemitTolocation not entered)
					if ((DerivedVenBankEntity entered) and CashLedgerPayablesPayment.PaidVendor.BankEntityBankName entered
						or DerBankEntityAddressLine1 entered or DerBankEntityAddressLine2 entered
						or DerBankEntityAddressLine3 entered or DerBankEntityAddressLine4 entered
						or DerBankEntityMunicipality entered or DerBankEntityStateProvince entered
						or DerBankEntityPostalCode entered or DerBankEntityCountry entered)
						return DerBankEntityCountry
					else
					if (DerivedVenBankEntity not entered)
						return DerivedVLocCountry
				else
					return DerivedVLocCountry


		DerivedReasonCode is a DerivedField
			type is AlphaUpper size 4
			restricted
			if(DerivedIntegrationApplication="Local.ly" and DerivedCountry = "MX")
				return PayablesInvoice.ReasonCode
		
		DerivedAECountry is a DerivedField
			type is Alpha size 40
			restricted
			if(DerivedIntegrationApplication="Local.ly" and DerivedCountry = "PL")
				return DerivedCountry
		
		DerivedVCountry is a DerivedField
			type is Alpha size 40
			restricted
			if(DerivedIntegrationApplication="Local.ly" and DerivedCountry = "PL")
				if (DerivedRemitTolocation entered)
					return VendorLocationRel.VendorCountry
				else
				if (DerivedRemitTolocation not entered)
					return DerivedVLocCountry
				
		DerivedVLCountry is a DerivedField
			type is Alpha size 40
			restricted
			if(DerivedIntegrationApplication="Local.ly" and DerivedCountry = "PL")
				return DerivedVLocCountry
		

		DerivedBankTransactionCode is a DerivedField
			type is Alpha size 10
			restricted
			if(DerivedIntegrationApplication="Local.ly" and DerivedDebtorAddressCountry="PL")
				return CashLedgerPayablesPayment.BankTransactionCode
			else
				return ""
		
		DerivedCreditTransferType is a DerivedField
			type is Alpha size 10
			restricted
			if(DerivedIntegrationApplication="Local.ly" and DerivedDebtorAddressCountry="PL")
				if(DerivedRemitTolocation entered and VendorLocationRel.CurrentAddressRel.PostalAddress.Country!="")
					if((PayablesInvoice.DerivedMemOfEu) and (PayablesInvoice.DerivedVenLocMemOfEu))
						return "SEPA"
					else
						return "URGP"
				else 
				if(DerivedVLocCountry!="")
					if((PayablesInvoice.DerivedMemOfEu) and (PayablesInvoice.DerivedVenMemofEu))
						return "SEPA"
					else
						return "URGP"

		
		DerivedComputeWithholdingAmount is a DerivedField
            type is like InternationalAmount
            return ((BankCheckAmount / NetPaymentAmount.CurrencyAmount * WithholdingAmount))

		DerivedInvoiceAmountDivisor is a DerivedField			
			type is like InternationalAmount
			restricted
			if (PayablesInvoice.RetainageAccrualCode entered)
				return (sum PayableInvoicePaymentByAccrualCodeRel.PaymentAmount.CurrencyAmount)
			else
				return PayablesInvoice.InvoiceAmount.CurrencyAmount

		DerivedSplitInvoice is a DerivedField
			type is Boolean
			restricted
			if (PayablesInvoice.LastPaymentSequence <= 1)
				return false
			else
				if (PaymentAmount.CurrencyAmount = PayablesInvoice.InvoiceAmount.CurrencyAmount)
					return false
				else
					return PayablesInvoice.IsSplitInvoice
		
		DerivedOneYearReplicationData is a DerivedField 
        	type is Boolean
            if ((current date - create date) <  360)
                return true
            else
                return false
                
	Dimensions
		PayablesInvoice.AuthorityCode
			dimension name is AuthorityCode

		PayablesInvoice.APClerk
			dimension name is Operator

		PayablesInvoice.BankTransactionCode
			dimension name is PaymentType

		TransientGLCalendarPeriod
			dimension name is Calendar
			caption is "<AlternateCaption>"
			Attributes
				YTDCrossReference
				SamePeriodLastYear
				YTDCrossRefSPLY
				PeriodType
				PeriodTypeName
				NumberOfDays

		CashCode
			caption is "<Description>"
			Attributes
				Description
				BankAccountNumber
				FinancialInstitution
				FinancialInstitutionBranch

		IncomeCode

		PayablesInvoice.InvoiceSource
			dimension name is InvoiceSource

		PayGroup
			caption is "<Name>"
			Attributes
				Name

		ProcessLevel

		Status
			dimension name is PaymentStatus

		PayablesInvoice.Status
			dimension name is InvoiceStatus

		PayablesInvoice
			dimension name is Invoice
			caption is "<Company>-<Invoice>"
			Attributes
				Company
				Invoice
				APClerk
				ResponsiblePerson
				CustomerID
				Buyer
				DueDate
				Status

		PayablesInvoice.TermsCode
			dimension name is Terms

		Vendor
			caption is representative text
			Attributes
				VendorGroup
				Vendor
				VendorName
				VendorStatus
				VendorClass
				ContactName
				Operator
				Project
			Hierarchies
				VendorClass
					base level included
					Attributes
						VendorGroup
						VendorClass


	Measures

		DaysToPayInvoice
		DiscountAmount.CurrencyAmount
			measure name is DiscountAmount
		DiscountAmountApplied
		DiscountAmountLost
		DiscountedPaymentsCount
		DiscountEligPaymentsCount
		DiscountLostCount

		InvoicedElectronicallyCount
		OpenInvoiceAmount
		OpenInvoiceCount


		PaidElectronicallyCount
		PaidInFullCount
		PaidInvoiceCount
		PaidOnTimeCount
		PaidWithinTerms
		PayablesInvoiceAmount
		PaymentCount



		ReceivedDiscountCount
		RushPaymentAmount
		RushPaymentCount
		VoidPaymentAmount
		VoidPaymentCount


	Conditions
		IsTypeCashPayment
			restricted
			when (BankTransactionCodeRel.IsCashPayment)

		IsValidForActorContext
			restricted
			when (GeneralLedgerCompanyRel.FinanceEnterpriseGroup = actor.context.FinanceEnterpriseGroup)

		CreateActionValid
			restricted
			when (PayablesInvoice.Status.Unreleased
			or    PayablesInvoice.Status.PendingApproval
			or    PayablesInvoice.Status.Amended
			or    PayablesInvoice.Status.Approved
			or    PayablesInvoice.Status.Released)

		UpdateActionValid
			restricted
			when ((Status.Unreleased
			or     Status.Released
			or     Status.UnreleasedManualPayment)
			and   (!IsFromIntercompanyBilling
			or	   ICBAllowSelectDistributionSet)) 

		DeleteActionValid
			restricted
			when ((Status.Unreleased
			or     Status.Released)
			and   !IsFromIntercompanyBilling
			and   !PayablesInvoice.InterfaceInProcess
			and   !PayablesInvoice.BackgroundProcessing.MatchInvoice)

		IsManuallyCreated
			restricted
			when (CashLedgerPayablesPaymentRel.CheckType.ManuallyCreated)

		WithinPaymentAmountRange		
			restricted
			when (PaymentAmountRange not entered
			or	 (PaymentAmountRange entered
			and	  PaymentAmount.CurrencyAmount within PaymentAmountRange))

		WithinInvoiceDateRange				
			restricted
			when (InvoiceDateRange not entered
			or	 (InvoiceDateRange entered
			and	  PayablesInvoice.InvoiceDate within InvoiceDateRange))

		WithinPaymentDueDateRange			
			restricted
			when (PaymentDueDateRange not entered
			or	 (PaymentDueDateRange entered
			and	  DueDate within PaymentDueDateRange))

		WithinDateRange						
			restricted
			when (WithinInvoiceDateRange
			and   WithinPaymentDueDateRange
			and   WithinReportableIncomeCheckDateRange)		


		WithinCashForecastingDueDateRange			
			restricted
			when (PaymentDueDateRange not entered
			or	 (PaymentDueDateRange entered
			and	  DueDate within PaymentDueDateRange))

		WithinCashForecastingDiscountDateRange		
			restricted
			when (PaymentDiscountDateRange not entered
			or	 (PaymentDiscountDateRange entered
			and   DiscountDate entered
			and	  DiscountDate within PaymentDiscountDateRange))

		WithinCashForecastingDateRange				
			restricted
			when (WithinCashForecastingDueDateRange
			and   WithinCashForecastingDiscountDateRange)

		InvoiceIsUnreleased		
			restricted
			when (PayablesInvoice.Status.Unreleased)

		InvoiceIsPendingApproval 
			restricted
			when (PayablesInvoice.Status.PendingApproval)

		InvoiceIsApproved		
			restricted
			when (PayablesInvoice.Status.Approved)

		InvoiceIsAmended		
			restricted
			when (PayablesInvoice.Status.Amended)

		InvoiceIsReleased		
			restricted
			when (PayablesInvoice.Status.Released)

		WithinCashForecastingStatusSelection		
			restricted								
			when ((IncludeUnreleased				
			and    InvoiceIsUnreleased)				
			or    (IncludePendingApproval			
			and    InvoiceIsPendingApproval)		
			or    (IncludeApproved					
			and    InvoiceIsApproved)				
			or    (IncludeAmended					
			and    InvoiceIsAmended)				
			or    (!ExcludeReleased					
			and    InvoiceIsReleased))				
		
		IncludedInReportableIncomeGroup     
            restricted
            when	(Company.VendorGroup	=	ReportableIncomeGroup.VendorGroup
			and		(AllReportableIncomeEntitiesRel !exist
			or		 ReportableIncomeEntitiesRel exists))





		WithinReportableIncomeCheckDateRange		
			restricted
			when (CheckDateRange not entered
			or	 (CheckDateRange entered
			and	  CheckDate within CheckDateRange))

		WithinReportableAmountRange		
			restricted
			when (ReportableAmountRange not entered
			or	 (ReportableAmountRange entered
			and	  ReportableIncomeAmount within ReportableAmountRange))


		WithinCutoffDate		
			restricted
			when ((AgingMethod.AgeByDueDate
			and    DueDate <= DerivedCutoffDate
			and   (CheckDate not entered
			or     CheckDate > DerivedCutoffDate))
			or    (AgingMethod.AgeByInvoiceDate
			and    PayablesInvoice.InvoiceDate <= DerivedCutoffDate
			and   (CheckDate not entered
			or	   CheckDate > DerivedCutoffDate)))

		HasIncomeCode
			restricted
			when (IncomeCode entered)

		IsSelectable
			restricted
			when (TransactionIDNumber = blank
			and	  Status.Released
			and  !IsFromIntercompanyBilling
			and  (CashLedgerPayablesPaymentAvailableRel exists
			or    ReservedCashLedgerPayablesPaymentRel exists))

		IsSelected
			restricted
			when (TransactionIDNumber = blank
			and   Status.SelectedForPayment)

		ManualPaymentWithDiscountLost		
			restricted
			when (Status.UnreleasedManualPayment
			and   DiscountLost)

		ManualPaymentWithDiscountTaken		
			restricted
			when (Status.UnreleasedManualPayment
			and   !DiscountLost)

		ManualPaymentInformationEntered		
			restricted
			when (Status.Unreleased
			and   PayablesInvoice.TransientPaymentNumber entered
			and   PayablesInvoice.TransientPaymentDate entered
			and   PayablesInvoice.TransientPaymentAmount entered)

		IsUnapplyable
			restricted
			when (IsCashPayment
			and   Status.UnreleasedManualPayment)

		IsHoldUpdatable
			restricted
			when ((OnHold)
			and   (Status.Unreleased
			or	   Status.Released
			or	   Status.UnreleasedManualPayment
			or	   Status.SelectedForPayment))

		IsHoldable
			restricted
			when ((!OnHold
			and    !IsFromIntercompanyBilling)
			and   (Status.Unreleased
			or	   Status.Released
			or	   Status.UnreleasedManualPayment
			or	  (Status.SelectedForPayment
			and    TransactionIDNumber not entered)))	

		HasCheck
			restricted
			when (CashLedgerPayablesPaymentRel exists)

		ApplyableToReserved
			restricted
			when (!Status.Historical
			and   !IsCashPayment
			and    BankTransactionCode.ManualPaymentNumberReservation
			and   !IsAppliedToCredit
			and   !IsAppliedToInvoice
			and   !HasCheck)

		ApplyableToNonReserved
			restricted
			when (!Status.Historical
			and   !IsCashPayment
			and   !BankTransactionCode.ManualPaymentNumberReservation
			and   !IsAppliedToCredit
			and   !IsAppliedToInvoice
			and   !HasCheck)

		IsApplied
			when (IsAppliedToInvoice
			or    IsAppliedToCredit)

		IsAppliedToInvoice
			restricted
			when (PayablesPaymentCreditMemoRel exists)

		IsAppliedToCredit
			restricted
			when (PayablesPaymentCreditMemo2Rel exists)

		IsCreditAvailableForInvoiceApplication
			restricted
			when ((PayablesInvoice.InvoiceType.CreditMemo
			or	   PayablesInvoice.InvoiceType.PrepaymentCredit)
			and    PayablesInvoice.Status.Released)

		IsInvoiceAvailableForCreditApplication
			restricted
			when  (!PayablesInvoice.InvoiceType.CreditMemo
			and	   !PayablesInvoice.InvoiceType.PrepaymentCredit
			and    PayablesInvoice.Status.Released)

		IsInvoicePaymentAvailableForCreditApplication		
			restricted
			when  (PayablesInvoice.IsInvoiceAvailableForCreditApplication
			and    Status.Released)

		IsAcceptDraft
			restricted
			when (PayablesBillOfExchangeRel exists
			and   PayablesBillOfExchangeRel.Status.Accepted)

		IsApIncomecode
			classic name is APINCCODE
			restricted
			when (IncomeCode entered)

		IsAppset12
			classic name is APPSET12
			restricted
			when (Status.Released
			or    Status.SelectedForPayment)

		IsAppset3
			classic name is APPSET3
			restricted
			when (Status.Released)

		IsAppset4
			classic name is APPSET4
			restricted
			when (Status.Released
			or    Status.SelectedForPayment)

		IsAppset5
			classic name is APPSET5
			restricted
			when (Status.SelectedForPayment
			or    Status.SystemGeneratedPayment)

		IsSystemGeneratedOrManualPayment
			restricted
			when (Status.SystemGeneratedPayment
			or    Status.ManuallyPaid)

		IsAppset6
			classic name is APPSET6
			restricted
			when (TransactionIDNumber entered)

		IsCancelDraft
			restricted
			when (PayablesBillOfExchangeRel exists
			and   PayablesBillOfExchangeRel.Status.Canceled)

		IsCashPayment
			restricted
			when (TransactionIDNumber entered
			and   CashLedgerPayablesPaymentRel exists)

		IsCashedDraft
			restricted
			when (PayablesBillOfExchangeRel exists
			and   PayablesBillOfExchangeRel.Status.Cashed)

		IsCheckProcessed
			classic name is CHK-PROCESSED
			restricted
			when (CashLedgerPayablesPaymentRel exists
			and   CashLedgerPayablesPaymentRel.Status <  2)

		IsCsdset2
			classic name is CSDSET2
			restricted
			when (CashLedgerStatement entered
			and   first CashLedgerStatementDetailRel exists)

		IsSplitPayment
			restricted
			when (PayablesInvoice.NumberOfSplitPayments > 1)

		IsCurrentBalanceLocatioin
			classic name is CURR-BAL-LOC
			restricted
			when (Status >  blank
			and   Status <  8
			and   not Status.DraftPayable
			and   RemitToCode entered
			and   PayablesInvoice exists
			and   not PayablesInvoice.InvoiceType.Prepayment)

		IsCurrentBal
			restricted
			when (Status >  blank
			and   Status <  8
			and   not Status.DraftPayable
			and   RemitToCode not entered
			and   PayablesInvoice exists
			and   not PayablesInvoice.InvoiceType.Prepayment)

		IsDetailPayment
			classic name is DETAIL-PMT
			restricted
			when (not BankTransactionCode.PaymentSummarization)

		IsDishonoredDraft
			classic name is DISHONOR-DRAFT
			restricted
			when (PayablesBillOfExchangeRel exists
			and   PayablesBillOfExchangeRel.Status.Dishonored)

		IsDraftAccrual
			restricted
			when (Status.DraftPayable)

		IsDraftAccrued
			restricted
			when (Status.DraftPayable)

		IsDraftCancel
			restricted
			when (Status.Cancelled)

		IsDraftPayment
			restricted
			when (TransactionNumber entered
			and   PayablesBillOfExchangeRel exists)

		AllowIssueBOEPayment
			restricted
			when (!IsDraftPayment
			and   !HasCheck
			and   !IsFromIntercompanyBilling)

		IsEscheated
			restricted
			when (CashLedgerPayablesPaymentRel exists
			and   CashLedgerTransactionRel exists
			and   CashLedgerTransactionRel.Status.Escheated)

		WithholdingAmountEntered
			classic name is INC-WH-PMT
			restricted
			when (WithholdingAmount entered)

		IsInvoicePaid
			classic name is INV-PAID
			restricted
			when (Status >  2
			and   BankTransactionCode.BankTransactionType.CashPayment
			or    Status.Historical
			and   BankTransactionCode.BankTransactionType.BillOfExchangePayment)

		IssuedCash
			restricted
			when (CashLedgerPayablesPaymentRel exists
			and   CashLedgerPayablesPaymentRel.Status.PaymentCycleClosed)

		IsNoPayment
			restricted
			when (TransactionIDNumber not entered)

		IsNoReinstate
			restricted
			when (CashLedgerPayablesPaymentRel exists
			and   CashLedgerPayablesPaymentRel.Status.ElectronicPaymentCancelled)

		IsNonBasePayment
			classic name is NON-BASE-PMT
			restricted
			when (InvoiceCurrency != Company.Currency)	

		HasOnHold
			restricted
			when (OnHold
			or    IsOnHold)

		IsOnHold
			restricted
			when (OnHold)

		IsNotOnHold
			restricted
			when (!OnHold)

		IsOpenPayment
			classic name is OPEN-PMT
			restricted
			when (Status <  3
			or   (BankTransactionCode.BankTransactionType.BillOfExchangePayment
			and   Status.ManuallyPaid))

		IsPaidPayment
			classic name is PAID-PMT
			restricted
			when (BankTransactionCode.BankTransactionType.CashPayment
			and   Status >  2
			and   PayablesInvoicePayment.VoidSequence not entered
			or    BankTransactionCode.BankTransactionType.BillOfExchangePayment
			and   Status.DraftPayable
			or    BankTransactionCode.BankTransactionType.BillOfExchangePayment
			and   Status.Historical
			and   PayablesInvoicePayment.VoidSequence not entered)

		PayablesInvoiceRetainageDistributionsRelExists
			classic name is PMT-DIST-EXIST
			restricted
			when (first PayablesInvoiceRetainageDistributionsRel exists)

		IsReconcileCash
			restricted
			when (CashLedgerPayablesPaymentRel exists
			and   CashLedgerTransactionRel exists
			and   CashLedgerTransactionRel.Status.Reconciled)

		IsRetainagePayment
			classic name is RETAINAGE-PMT
			restricted
			when (RetainagePayment)

		IsRetainagePaymentOnHold		
			restricted
			when (IsRetainagePayment
			and   IsOnHold)

		IsSecondaryWithholdingPayment
			classic name is SEC-WH-PMT
			restricted
			when (SecondaryWithholdingTransactionAmount1 entered
			or    SecondaryWithholdingTransactionAmount2 entered
			or    SecondaryWithholdingTransactionAmount3 entered)

		IsStaleDated
			restricted
			when (CashLedgerPayablesPaymentRel exists
			and   CashLedgerTransactionRel exists
			and   CashLedgerTransactionRel.Status.StaleDated)

		IsStopPaymentCash
			classic name is STOP-PMT-CASH
			restricted
			when (CashLedgerPayablesPaymentRel exists
			and   CashLedgerTransactionRel exists
			and   CashLedgerTransactionRel.Status.StopPayment)

		IsTapeIssued
			restricted
			when (CashLedgerTransactionTapeRel exists
			and   CashLedgerTransactionTapeRel.Status.Open)

		IsTapePayment
			restricted
			when (CashLedgerPayablesPaymentRel exists
			and   CashLedgerPayablesPaymentRel.Status.PaymentCycleClosed
			and   CashLedgerPayablesPaymentRel.LastElectronicPaymentSerialNumber entered)

		IsTapePaymentRejected
			classic name is TAPE-PMT-REJ
			restricted
			when (CashLedgerPayablesPaymentRel.Status.ElectronicPaymentCancelled
			or    CashLedgerPayablesPaymentRel.Status.ElectronicPaymentReinstated)

		IsTapeReconcile
			restricted
			when (CashLedgerTransactionTapeRel exists
			and   CashLedgerTransactionTapeRel.Status.Reconciled)

		IsTapeVoid
			restricted
			when (PayablesInvoicePayment.VoidSequence entered
			and   CashLedgerPayablesPaymentRel.LastElectronicPaymentSerialNumber entered)

		IsUnacceptDraft
			restricted
			when (PayablesBillOfExchangeRel exists
			and   PayablesBillOfExchangeRel.Status <  2)

		IsUnopenCash
			restricted
			when (BankTransactionCode.BankTransactionType.CashPayment
			and   Status >  2)

		IsVoidCash
			restricted
			when ((CashLedgerPayablesPaymentRel exists
			and    CashLedgerTransactionRel exists
			and    CashLedgerTransactionRel.Status.Voided)
			or	  (CashLedgerTransactionRel not exists
			and    CashLedgerPayablesPaymentRel exists
			and    CashLedgerPayablesPaymentRel.SummarizedPaymentIsVoided
			and    BankTransactionCode.BankTransactionType.CashPayment
			and    PayablesInvoicePayment.VoidSequence entered))

		IsVoidPayment
			classic name is VOID-PMT
			restricted
			when (Status.Historical
			and   PayablesInvoicePayment.VoidSequence >  blank)

		HasDeletableBOE
			restricted
			when (PayablesBillOfExchangeRel exists
			and  (PayablesBillOfExchangeRel.Status.Unreleased
			or    PayablesBillOfExchangeRel.Status.Dishonored
			or    PayablesBillOfExchangeRel.Status.Canceled))

		VendorInvoiceEntered
			restricted
			when (Vendor entered
			and	  Invoice entered)

		PayablesOnHoldRelMatches
			restricted
			when (first PayablesOnHoldRel.HoldCode = Company.VendorGroup.ManualPaymentHoldCode)


		IsGroupByDiversityCode
			restricted
			when (IsInvoiceSpendByDiversityCodeGroupByDivCodeHeaderRel not exists)

		IsGroupByDiversityCodeVendor
			restricted
			when (IsInvoiceSpendByDiversityCodeGroupByDivCodeVendorHeaderRel not exists)

		IsSupplyManagementReportVendorValid
			restricted
			when	(SupplyManagementReportContext.SupplyManagementReportVendorGroupField.Vendor not entered
			or		Vendor = SupplyManagementReportContext.SupplyManagementReportVendorGroupField.Vendor)

		CanApplyPayablesToCheck
			restricted

			when (CashLedgerPayablesPayment in context		
			and   Status.Released
			and    PayablesInvoice.BackgroundProcessing not entered 
			and  ((!PayablesInvoice.MatchProcessType.Expense		
			and	   !PayablesInvoice.HasOpenMatchInvoiceMessages		
			and   ((PayablesInvoice.MatchStatus > 1 				
			and    !PayablesInvoice.InvoiceType.MatchPrepayment)	
			or 	    PayablesInvoice.InvoiceType.MatchPrepayment))	
			or    PayablesInvoice.MatchProcessType.Expense)			
			and  !IsFromIntercompanyBilling)

		ICBAllowSelectDistributionSet 
			restricted
			when (PayablesInvoice.InvoiceSource.IntercompanyBilling
			and   PayablesInvoice.IntercompanyBillingDocumentRel.AllowSelectDistributionSet
			and   ContextSettlementIDForContext in context
			and   ContextSettlementDetailRel exists)

		AllowSelectOpenAmountForSettlementDetail 
			restricted
			when (ICBAllowSelectDistributionSet
			and   Status.Released
			and  !ContextSettlementDetailLineRel exists
			and   ContextSettlementDetailRel.IntercompanyBillingSettlementHeader.Status.Unreleased)
			
		AllowUnselectForSettlementDetail 
			restricted
			when (ICBAllowSelectDistributionSet
			and   Status.Released
			and   ContextSettlementDetailLineRel exists
			and   ContextSettlementDetailRel.IntercompanyBillingSettlementHeader.Status.Unreleased)

		AllowProrateAndSelectAllForSettlementDetail 
			restricted
			when (ICBAllowSelectDistributionSet
			and   Status.Released
			and   ContextSettlementDetailLineRel exists
			and   ContextSettlementDetailRel.IntercompanyBillingSettlementHeader.Status.Unreleased
			and   ContextSettlementDetailLineRel.DerivedPayablesDistributionSetState != 2)

		ContextSettlementDetailLineRelExists 
			restricted
			when (ContextSettlementDetailLineRel exists)

		GLCompanyGroupMemberRelExists
			restricted
			when (GLCompanyGroupMemberRel exists)

		IsFromIntercompanyBilling
			restricted
			when (PayablesInvoice.InvoiceSource.IntercompanyBilling)

		ValidForHelperList
			restricted
			when (PayablesInvoice.IsValidForActorContext
			and   CanApplyPayablesToCheck			
			and   !IsFromIntercompanyBilling)

		CanRemoveFromCashRequirementsResult
			when (CashRequirementsResult entered
			and   CashRequirementsResult.Status.Selected)

		CanAddToCashRequirementsResult
			when (CashRequirementsResult not entered
			and   Status.Released)

		WithholdingFlag
			default label is "Withholding"
			when (BaseWithholdingAmount entered
			or    SecondaryWithholdingBaseAmount1 entered
			or    SecondaryWithholdingBaseAmount2 entered
			or    SecondaryWithholdingBaseAmount3 entered
			or    FATCABaseIncomeAmount entered)

		BankCheckAmountEntered
			restricted
			when (BankCheckAmount	entered)

		RecordExists	
			restricted
			when (PayablesInvoicePayment exists)

		BypassRuleForTheseFiles
			restricted
			when (action = "RemoveFromCashRequirementsResultBackground"
			or    action = "RemoveFromCashRequirementsResultBatch"
			or    invoking action = "CreateVendorOffsetCreditMemoByInvoiceGroup"		
			or    invoking action = "CreateVendorOffsetCreditMemoByCompany")			

		CashRequirementsProcessingRelExists
			when (CashRequirementsProcessingRel exists)

		UseBackgroundCreatePaymentAccrual
			restricted
			when (instance count of ProrateDistributionsRel > 50)
			
		PayablesInvoiceWithholdingExists
			restricted
			when (PayablesInvoiceWithholdingForPaymentRel exists)

		IsPastDue		
			restricted
			when (DueDate < current corporate date
			and   Status.Released
			and  !PayablesInvoice.IsCreditInvoice)		

		CurrentDiscountPayments		
			restricted
			when (DiscountDate < current corporate date + 7
			and   DiscountAmount.CurrencyAmount entered
			and   Status.Released)

		CurrentPayments		
			restricted
			when (DueDate < current corporate date + 7
			and   DiscountAmount.CurrencyAmount !entered
			and   Status.Released)

		DerivedPayVendorWarningEntered		
			restricted
			when (DerivedPayVendorWarning entered)

		DerivedInvoiceWarningEntered		
			restricted
			when (DerivedInvoiceWarning entered)

		DerivedPaymentWarningEntered		
			restricted
			when (DerivedPaymentWarning entered)
			
		DerivedTaxAmountEntered
			restricted
			when (PayablesInvoice.TaxAmount entered)
			
		DerivedPOEntered
			restricted
			when (ApPoNumber > 0)
			
		DerivedOverdueInvoice
			restricted
			when (PayablesInvoice.OverdueInvoice)
			
		DerivedShowLinks
			restricted
			when (PayablesInvoice.SupplierShowPOLinks)

		InvoiceImageEntered												
			restricted
			when (PayablesInvoiceDocumentInvoiceTypeRel exists)

		HasICBSelectDistributionSet 
			restricted
			when (PayablesInvoice.InvoiceSource.IntercompanyBilling
			and   PayablesFundApplyDistributionRel exists)

		CompanyWithinGLCompanyGroup		
			when (GeneralLedgerCompanyGroup not entered
			or	  GLCompanyGroupMemberRel exists)

		ValidCertificationNotExist		
			restricted
			when (!Status.Historical
			and   Vendor.ValidateCertificationAmount
			and   ValidateVendorCertificationNotExistsRel !exists)

	Field Groups	
		CompanyInvoicePayment
			Company 
			PayablesInvoice
			PayablesInvoicePayment

	Relations

		BankTransactionCodeRel		
			one-to-one relation to BankTransactionCode
			Field Mapping uses symbolic key
				related.CashManagementGroup		= GeneralLedgerCompanyRel.FinanceEnterpriseGroup
				related.BankTransactionCode		= BankTransactionCode
		
		GeneralLedgerCompanyRel		
			one-to-one relation to GeneralLedgerCompany
			Field Mapping uses symbolic key
				related.Company 		= Company

		PayablesInvoiceDistributionTaxRel
			one-to-many relation to PayablesInvoiceDistribution
			Field Mapping uses Set7
				related.Vendor 					= CashLedgerPayablesPayment.PaidVendor
				related.Company					= Company
				related.PayablesInvoice			= PayablesInvoice

		CompanyCashCodeRel
			one-to-one relation to CompanyCashCode
			Field Mapping uses symbolic key
				related.Company		= DerivedCashPostingCompany 
				related.CashCode 	= CashCode

		GLInterEntityRelationRel
			one-to-one relation to GLInterEntityRelation
			Field Mapping uses symbolic key
				related.FinanceEnterpriseGroup	= GeneralLedgerCompanyRel.FinanceEnterpriseGroup
				related.AccountingEntity		= GeneralLedgerCompanyRel.AccountingEntity
				related.ToAccountingEntity		= CashCode.DefaultPostCompany.AccountingEntity

		GLInterEntityRelationByPayGroupCompanyRel		
			one-to-one relation to GLInterEntityRelation
			Field Mapping uses symbolic key
				related.FinanceEnterpriseGroup	= GeneralLedgerCompanyRel.FinanceEnterpriseGroup
				related.AccountingEntity		= GeneralLedgerCompanyRel.AccountingEntity
				related.ToAccountingEntity		= PayGroup.PostCompany.AccountingEntity

		CompanySystemClosingControlRel
			one-to-one relation to CompanySystemClosingControl
			Field Mapping uses BySystemCode
				related.GeneralLedgerSystemCode		= "AP"
				related.Company						= Company

		CashLedgerPayablesPaymentRel2
			one-to-many relation to CashLedgerPayablesPayment
			Field Mapping uses Set2
				related.CashManagementGroup 				   			= CashCode.CashManagementGroup
				related.PayGroup										= PayGroup
				related.CashCode										= CashCode
				related.CashLedgerPayablesPayment.BankTransactionCode 	= BankTransactionCode
				related.TransactionNumber 								= TransactionNumber

		ReservedCashLedgerPayablesPaymentRel
			one-to-many relation to CashLedgerPayablesPayment
			Field Mapping uses Set3
				related.CashManagementGroup 				   			= CashCode.CashManagementGroup
				related.PayGroup										= PayGroup
				related.Status.ReservedForManualPayment 				= true
				related.CashCode										= CashCode
			Instance Selection
				where ((related.PaidVendor = Vendor
				or		related.PaidVendor = PayVendor)				
				and     related.CashLedgerPayablesPayment.BankTransactionCode = BankTransactionCode)

		CashLedgerPayablesPaymentAvailableRel
			one-to-many relation to CashLedgerPayablesPayment
			Field Mapping uses Set2
				related.CashManagementGroup 				   			= CashCode.CashManagementGroup
				related.PayGroup										= PayGroup
				related.CashCode										= CashCode
				related.CashLedgerPayablesPayment.BankTransactionCode 	= BankTransactionCode
			Instance Selection
				where ((related.Status.PaymentCycleProcessed
				and		related.BasePaymentAmount 			not = related.AppliedBaseAmount)
				or	    related.Status.ReservedForManualPayment)

		AvailableCashLedgerPayablesPaymentRel
			one-to-many relation to CashLedgerPayablesPayment
			Field Mapping uses Set2
				related.CashManagementGroup 				   			= CashCode.CashManagementGroup
				related.PayGroup										= PayGroup
				related.CashCode										= CashCode
				related.CashLedgerPayablesPayment.BankTransactionCode 	= BankTransactionCode
			Instance Selection
				where (related.Status.ReservedForManualPayment)

		CashLedgerPayablesPaymentRel4
			one-to-many relation to CashLedgerPayablesPayment
			Field Mapping uses Set4
				related.CashManagementGroup 				   			= CashCode.CashManagementGroup
				related.CashCode										= CashCode
				related.CashLedgerPayablesPayment.BankTransactionCode 	= BankTransactionCode
				related.TransactionNumber								= TransactionNumber

		PayablesInvoicePaymentsOnHoldRel
			classic name is APHLDINV
			one-to-one relation to PayablesOnHold
			valid when (HasOnHold)
			delete cascades
			Field Mapping uses Set5
				related.HoldRecordType 							= "P"
				related.VendorGroup   							= Company.VendorGroup
				related.Company       							= Company
				related.Vendor									= Vendor
				related.PayablesInvoice 						= PayablesInvoice
				related.PayablesInvoicePayment.PaymentSequence 	= PayablesInvoicePayment.PaymentSequence
				related.PayablesInvoicePayment.VoidSequence 	= PayablesInvoicePayment.VoidSequence
				related.HoldCode								= PayablesInvoice.InvoiceHoldCode
				related.VendorLocation							= blank		

		PayablesOnHoldRel
			classic name is APHLDINV
			one-to-many relation to PayablesOnHold
			valid when (HasOnHold)
			delete cascades
			Field Mapping uses Set5
				related.HoldRecordType			= "P"
				related.VendorGroup   			= Company.VendorGroup
				related.Company        			= Company
				related.Vendor         			= Vendor
				related.PayablesInvoice			= PayablesInvoice
				related.PayablesInvoicePayment	= PayablesInvoicePayment

		PayablesInvoicePaymentRel
			one-to-many relation to PayablesInvoicePayment
			Field Mapping uses ByCompanyVendor
				related.Company					= Company
				related.Vendor					= Vendor
				related.PayablesInvoice 		= PayablesInvoice

		PayGroupRel
			one-to-many relation to PayGroup
			Field Mapping uses symbolic key
				related.VendorGroup = Company.VendorGroup
				related.PayGroup	= PayGroup

		PayablesCreditMemoInvoiceFlexRel	
			one-to-many relation to PayablesCreditMemo
			Field Mapping uses Set2
				related.Company								= Company
				related.Vendor								= Vendor
				related.PayablesCreditMemo.Invoice			= LocalPayablesCreditMemoInvoice
				related.PayablesCreditMemo.Suffix			= LocalPayablesCreditMemoInvSuf
				related.PayablesCreditMemo.PayablesSequence	= LocalPayablesCreditMemoInvSeq
			Instance Selection				
				where  (related.PayablesCreditMemo.PayablesInvoice !entered			
				or      related.PayablesCreditMemo.PayablesInvoice = LocalPayablesCreditMemoInvPI)
		PayablesCreditMemoCreditFlexRel		
			one-to-many relation to PayablesCreditMemo
			Field Mapping uses symbolic key
				related.Company									= Company
				related.Vendor									= Vendor
			Instance Selection
				where  (related.PayablesCreditMemo.CreditMemoNumber		= LocalPayablesCreditMemoCredit
				and		related.PayablesCreditMemo.CreditMemoSuffix		= LocalPayablesCreditMemoCrdSuf
				and		related.PayablesCreditMemo.CreditMemoSequence	= LocalPayablesCreditMemoCrdSeq
				and	   (related.PayablesCreditMemo.CreditMemoPayablesInvoice !entered		
				or      related.PayablesCreditMemo.CreditMemoPayablesInvoice = LocalPayablesCreditMemoCrdPI))

		PayablesPaymentCreditMemoRel	
			classic name is APCRMEMO
			one-to-many relation to PayablesCreditMemo
			Field Mapping uses symbolic key
				related.Company					= Company
				related.Vendor 					= Vendor
			Instance Selection
				where (related.PayablesCreditMemo.CreditMemoNumber 		= PayablesInvoice.Invoice
				and    related.PayablesCreditMemo.CreditMemoSuffix 		= PayablesInvoice.Suffix
				and    related.PayablesCreditMemo.CreditMemoSequence 	= PayablesInvoicePayment.PaymentSequence
				and	  (related.PayablesCreditMemo.CreditMemoPayablesInvoice !entered		
				or     related.PayablesCreditMemo.CreditMemoPayablesInvoice = PayablesInvoice))

		FirstPayablesPaymentCreditMemoRel	
			classic name is APCRMEMO
			one-to-many relation to PayablesCreditMemo
			Field Mapping uses symbolic key
				related.Company					= Company
				related.Vendor 					= Vendor
			Instance Selection
				where (related.PayablesCreditMemo.CreditMemoNumber 		= LocalCreditNumber
				and    related.PayablesCreditMemo.CreditMemoSuffix 		= LocalCreditSuffix
				and    related.PayablesCreditMemo.CreditMemoSequence 	= 1
				and	  (related.PayablesCreditMemo.CreditMemoPayablesInvoice !entered		
				or     related.PayablesCreditMemo.CreditMemoPayablesInvoice = LocalCreditPayablesInvoice))

		PayablesPaymentCreditMemo2Rel		
			classic name is APCRMEMO
			one-to-many relation to PayablesCreditMemo
			Field Mapping uses Set2
				related.Company								= Company
				related.Vendor 								= Vendor
				related.PayablesCreditMemo.Invoice 			= PayablesInvoice.Invoice
				related.PayablesCreditMemo.Suffix  			= PayablesInvoice.Suffix
				related.PayablesCreditMemo.PayablesSequence	= PayablesInvoicePayment.PaymentSequence
			Instance Selection					
				where (related.PayablesCreditMemo.PayablesInvoice !entered
				or     related.PayablesCreditMemo.PayablesInvoice = PayablesInvoice)

		FirstPayablesPaymentCreditMemo2Rel	
			classic name is APCRMEMO
			one-to-many relation to PayablesCreditMemo
			Field Mapping uses Set2
				related.Company								= Company
				related.Vendor 								= Vendor
				related.PayablesCreditMemo.Invoice 			= LocalInvoiceNumber
				related.PayablesCreditMemo.Suffix  			= LocalInvoiceSuffix
				related.PayablesCreditMemo.PayablesSequence	= 1
			Instance Selection				
				where (related.PayablesCreditMemo.PayablesInvoice !entered
				or     related.PayablesCreditMemo.PayablesInvoice = LocalPayablesInvoice)

		PayablesHoldCodeRel
			one-to-one relation to PayablesHoldCode
			Field Mapping uses symbolic key
				related.VendorGroup		= Company.VendorGroup
				related.HoldCode		= LocalHoldCode

		CreditInvoicePayablePaymentRel
			one-to-one relation to PayablesInvoicePayment
			Field Mapping uses symbolic key
				related.Company									= Company
				related.PayablesInvoice							= LocalPayablesInvoice
				related.PayablesInvoicePayment					= LocalPayablesInvoicePayment

		DraftPayablesInvoicePaymentRel
			one-to-one relation to PayablesInvoicePayment
			Field Mapping uses ByCompanyVendorInvoice
				related.Company									= Company
				related.Vendor									= Vendor
				related.Invoice									= Invoice
				related.Suffix									= Suffix
				related.CancelSequence							= 0
				related.PayablesInvoicePayment.PaymentSequence 	= PayablesInvoicePayment.PaymentSequence
				related.PayablesInvoicePayment.VoidSequence		= 1
				related.PayablesInvoice							= PayablesInvoice		

		CreditInvoicesForPaymentVendorRel
			one-to-many relation to PayablesInvoicePayment
			Field Mapping uses ByCompanyVendor
				related.Company				= Company
				related.Vendor				= Vendor
			Instance Selection
				where  (related.Status.Released
				and    (related.PayablesInvoice.InvoiceType.CreditMemo
				or		related.PayablesInvoice.InvoiceType.PrepaymentCredit))

		InvoicePaymentsForCreditVendorRel
			one-to-many relation to PayablesInvoicePayment
			Field Mapping uses ByCompanyVendor
				related.Company				= Company
				related.Vendor				= Vendor
			Instance Selection
				where  (related.Status.Released
				and    (related.PayablesInvoice.InvoiceType.Invoice
				or		related.PayablesInvoice.InvoiceType.DebitMemo
				or 		related.PayablesInvoice.InvoiceType.MatchPrepayment
				or		related.PayablesInvoice.InvoiceType.Prepayment))

		PayablesInvoiceDiscountRel
			classic name is APDISCACC
			one-to-many relation to PayablesInvoiceDiscount
			Field Mapping uses ByCompany
				related.Company = Company
				related.Vendor  = Vendor
			Instance Selection
				where (related.PayablesInvoice.Invoice = PayablesInvoice.Invoice
				and   related.PayablesInvoice.Suffix = PayablesInvoice.Suffix
				and   related.PayablesInvoice.CancelSequence = PayablesInvoice.CancelSequence
				and   related.PayablesInvoicePayment.PaymentSequence = PayablesInvoicePayment.PaymentSequence)

		PayablesInvoiceRetainageDistributionsRel
			classic name is APDISTPAY
			one-to-many relation to PayablesInvoiceRetainageDistribution
			Field Mapping uses Set1
				related.Company                                                     = Company
				related.Vendor                                                      = Vendor
				related.Invoice 													= PayablesInvoice.Invoice
				related.Suffix  													= PayablesInvoice.Suffix
				related.PayablesInvoiceRetainageDistribution.InvoicePaymentSequence = PayablesInvoicePayment.PaymentSequence

		PayablesInvoiceRetainageDistributionRel
			classic name is APDISTPAY
			one-to-one relation to PayablesInvoiceRetainageDistribution
			Field Mapping uses symbolic key
				related.Company                                                     	 = Company
				related.Vendor                                                     	 	 = Vendor
				related.PayablesInvoiceRetainageDistribution.PayablesInvoice			 = PayablesInvoice
				related.PayablesInvoiceRetainageDistribution.InvoicePaymentSequence 	 = PayablesInvoicePayment.PaymentSequence
				related.PayablesInvoiceRetainageDistribution.PayablesMatchLine  		 = LocalRetainAdjustMatchLine
				related.PayablesInvoiceRetainageDistribution.MatchDistributionSequence	 = LocalRetainAdjustMatchDistributionSequence
				related.PayablesInvoiceRetainageDistribution.PayablesInvoiceDistribution = LocalRetainAdjustDistributionSequence

		PayablesBillOfExchangeRel
			classic name is APDRAFTS
			one-to-one relation to PayablesBillOfExchange
			Field Mapping uses symbolic key
				related.CashManagementGroup		= BankTransactionCode.CashManagementGroup
				related.BankTransactionCode    	= BankTransactionCode
				related.PayablesBillOfExchange 	= TransactionIDNumber

		PayablesInvoicePayment6Rel
			classic name is APPSET6
			one-to-many relation to PayablesInvoicePayment
			Field Mapping uses Set6
				related.PayGroup            = PayGroup
				related.BankTransactionCode = BankTransactionCode
				related.TransactionIDNumber = TransactionIDNumber

		PayablesInvoicePayment8Rel
			classic name is APPSET8
			one-to-many relation to PayablesInvoicePayment
			Field Mapping uses Set8
				related.PayGroup            	= PayGroup
				related.CashCode				= CashCode
				related.TransactionNumber		= TransactionNumber
				related.BankTransactionCode		= BankTransactionCode

		CashPaymentFormatRel
			classic name is CBCASHFORM
			one-to-one relation to CashPaymentFormat
			Field Mapping uses symbolic key
				related.CashManagementGroup 				   = CashCode.CashManagementGroup
				related.CashCode               				   = CashCode
				related.CashPaymentFormat.BankTransactionCode  = BankTransactionCode
				related.CashPaymentFormat.PayablesProcessGroup = ProcessGroup

		CashRequirementsCashPaymentFormatRel
			classic name is CBCASHFORM
			one-to-one relation to CashPaymentFormat
			Field Mapping uses symbolic key
				related.CashManagementGroup 				   = CashCode.CashManagementGroup
				related.CashCode               				   = LocalCashCode
				related.CashPaymentFormat.BankTransactionCode  = BankTransactionCode
				related.CashPaymentFormat.PayablesProcessGroup = ProcessGroup

		CashLedgerPayablesPaymentRel
			classic name is CBCHECK
			one-to-one relation to CashLedgerPayablesPayment
			Field Mapping uses symbolic key
				related.CashManagementGroup 						  = CashCode.CashManagementGroup
				related.CashCode                        			  = CashCode
				related.CashLedgerSourceRecord						  = "CHK"
				related.CashLedgerPayablesPayment.BankTransactionCode = BankTransactionCode
				related.CashLedgerPayablesPayment.TransactionIDNumber = TransactionIDNumber

		CashLedgerStatementDetailRel
			classic name is CBSTMTDTL
			one-to-many relation to CashLedgerStatementDetail
			Field Mapping uses Set2
				related.BankTransactionCode		= BankTransactionCode
				related.CashLedgerStatement		= CashLedgerStatement
				related.PaymentNumber       	= TransactionNumber
				related.TransactionType    		= "V"
			Instance Selection
				where (related.CashCode.BankAccountNumber	= CashCode)

		VendorCommentsRel
			classic name is APVENCOMMENTS
			one-to-many relation to Apcomments
			Field Mapping uses Set2
				related.VendorCommentType = "V"
				related.VendorGroup       = Company.VendorGroup
				related.Vendor            = Vendor
				related.VendorLocation    = blank
				related.Company           = Company

		VendorCommentCashReqRel
			one-to-many relation to VendorComment
			Field Mapping uses ByTitle
				related.VendorGroup		= Company.VendorGroup
				related.Vendor			= PayVendor  
				related.VendorLocation	= RemitToCode

			Instance Selection
				where (related.Title	= "CashRequirements")


		VendorBalanceFlexRel	
			classic name is APVENCURRBAL
			one-to-one relation to VendorBalance
			Field Mapping uses symbolic key
				related.VendorGroup    = Company.VendorGroup
				related.Vendor         = Vendor
				related.VendorLocation = LocalRemitToCode
				related.Company        = Company

		VendorDiversityRel
			classic name is APVENDIV
			one-to-many relation to VendorDiversity
			Field Mapping uses ByDateDescending
				related.VendorGroup    = Company.VendorGroup
				related.Vendor         = Vendor
				related.VendorLocation = PayablesInvoice.Location

		VendorGroupRel
			classic name is APVENGROUP
			one-to-one relation to VendorGroup
			required
			Field Mapping uses symbolic key
				related.VendorGroup = Company.VendorGroup

		VendorLocationRel
			classic name is APVENLOC
			one-to-one relation to VendorLocation
			Field Mapping uses symbolic key
				related.VendorGroup    = Company.VendorGroup
				related.Vendor         = PayVendor
				related.VendorLocation = RemitToCode

		VendorDebtRel		
			one-to-many relation to VendorDebt
			Field Mapping uses ByPrioritySequence
				related.VendorGroup			= Company.VendorGroup
				related.Vendor				= PayVendor
			Instance Selection
				where (related.BalanceDue	> 0)

		VendorDebtByAccountingEntityRel		
			one-to-many relation to VendorDebt
			Field Mapping uses symbolic key
				related.VendorGroup					= Company.VendorGroup
				related.Vendor						= PayVendor
				related.VendorDebt.AccountingEntity	= LocalLikeAccountingEntity

		CashLedgerTransactionRel
			classic name is CBTRANS
			one-to-one relation to CashLedgerTransaction
			valid when (IsDetailPayment)
			Field Mapping uses symbolic key
				related.CashManagementGroup		= BankTransactionCode.CashManagementGroup
				related.BankTransactionCode   	= BankTransactionCode
				related.CashLedgerSourceRecord	= "CHK"
				related.CashLedgerTransaction 	= TransactionIDNumber

		CashLedgerTransactionTapeRel
			classic name is CBTRANS-TAPE
			one-to-one relation to CashLedgerTransaction
			valid when (IsTapePayment)
			Field Mapping uses Set4
				related.CashManagementGroup				  = CashLedgerPayablesPaymentRel.CashManagementGroup
				related.BankTransactionCode               = CashLedgerPayablesPaymentRel.CashLedgerPayablesPayment.BankTransactionCode
				related.CashCode                          = CashCode
				related.LastElectronicPaymentSerialNumber = CashLedgerPayablesPaymentRel.LastElectronicPaymentSerialNumber
				related.CashLedgerTransaction             = CashLedgerPayablesPaymentRel.CashLedgerPayablesPayment.TransactionIDNumber
				related.CashLedgerSourceRecord			  = "CHK"

		RecurringPayablesInvoiceRel
			one-to-many relation to PayablesInvoice
			Field Mapping uses ByCompanyVendorInvoice
				related.Company			= Company
				related.Vendor			= Vendor
				related.Invoice			= Invoice
				related.Suffix			= LocalInvoiceSuffix
				related.CancelSequence	= CancelSequence

		PayablesInvoiceRel
			one-to-one relation to PayablesInvoice
			Field Mapping uses symbolic key
				related.Company			        = Company
				related.PayablesInvoice			= PayablesInvoice

		LocalPayablesInvoiceNumberRel		
			one-to-many relation to PayablesInvoice									
			Field Mapping uses ByCompanyVendorInvoice
				related.Company			= Company
				related.Vendor			= Vendor
				related.Invoice			= LocalInvoiceNumber
				related.Suffix			= Suffix
				related.CancelSequence	= blank
			Instance Selection
				where (related.InvoiceDate	!= PayablesInvoice.InvoiceDate)			

		AccrualCodeDetailRel
			one-to-one relation to PayablesAccrualCodeDetail
			Field Mapping uses Set1
				related.VendorGroup			= Company.VendorGroup
				related.Company				= Company
				related.PayablesAccrualCode	= AccrualCode

		PayablesDiscountCodeDetailRel
			one-to-one relation to PayablesDiscountCodeDetail
			Field Mapping uses symbolic key
				related.VendorGroup				= Company.VendorGroup
				related.PayablesDiscountCode	= DiscountCode
				related.Company					= Company

		LocalPayablesCompanyRel
			one-to-one relation to PayablesCompany
			Field Mapping uses symbolic key
				related.Company				= LocalPayablesCompany

		PayablesAccrualCodeDetailRel
			one-to-one relation to PayablesAccrualCodeDetail
			Field Mapping uses Set1
				related.VendorGroup			= LocalPayablesCompanyRel.VendorGroup
				related.Company				= LocalPayablesCompany
				related.PayablesAccrualCode	= LocalAccrualCode

		IsInvoiceSpendByDiversityCodeGroupByDivCodeHeaderRel	
			one-to-many relation to PayablesInvoicePayment
			Field Mapping uses ByCompanyDivCodeVendor
				related.Company			= Company
			Instance Selection
				where (related.PayablesInvoice.DiversityCode = PayablesInvoice.DiversityCode
				and related.UniqueID  < UniqueID)

		IsInvoiceSpendByDiversityCodeGroupByDivCodeVendorHeaderRel	
			one-to-many relation to PayablesInvoicePayment
			Field Mapping uses ByCompanyDivCodeVendor
				related.Company			= Company
				related.Vendor			= Vendor
			Instance Selection
				where (related.PayablesInvoice.DiversityCode = PayablesInvoice.DiversityCode
				and related.UniqueID  < UniqueID)

		IsInvoiceSpendByDiversityCodeGroupByDivCodeVendorDisplayHeaderRel
			one-to-many relation to PayablesInvoicePayment
			Field Mapping uses ByCompanyDivCodeVendor
				related.Company			= Company
			Instance Selection
				where (related.PayablesInvoice.DiversityCode = PayablesInvoice.DiversityCode
				and IsSupplyManagementReportVendorValid
				and related.IsGroupByDiversityCodeVendor)

		IsInvoiceSpendByDiversityCodeGroupByDivCodeDisplayHeaderRel
			one-to-many relation to PayablesInvoicePayment
			Field Mapping uses ByCompanyDivCodeVendor
				related.Company			= Company
			Instance Selection
				where (related.PayablesInvoice.DiversityCode = PayablesInvoice.DiversityCode
				and IsSupplyManagementReportVendorValid
				and related.IsGroupByDiversityCode)

		InvoiceSpendByDiversityCodeTotalPerCompanyRel	
			one-to-many relation to PayablesInvoicePayment
			Field Mapping uses symbolic key
				related.Company									= Company
				related.PayablesInvoice							= PayablesInvoice
				related.PayablesInvoicePayment.PaymentSequence	= PayablesInvoicePayment.PaymentSequence
				related.PayablesInvoicePayment.VoidSequence		= PayablesInvoicePayment.VoidSequence














		InvoiceSpendByDiversityCodeTotalPerDiversityCodeRel	
			one-to-many relation to PayablesInvoicePayment
			Field Mapping uses symbolic key
				related.Company									= Company
				related.PayablesInvoice							= PayablesInvoice
				related.PayablesInvoicePayment.PaymentSequence	= PayablesInvoicePayment.PaymentSequence
				related.PayablesInvoicePayment.VoidSequence		= PayablesInvoicePayment.VoidSequence















		InvoiceSpendByDiversityCodeTotalPerVendorRel		
			one-to-many relation to PayablesInvoicePayment
			Field Mapping uses symbolic key
				related.Company									= Company
				related.PayablesInvoice							= PayablesInvoice
				related.PayablesInvoicePayment.PaymentSequence	= PayablesInvoicePayment.PaymentSequence
				related.PayablesInvoicePayment.VoidSequence		= PayablesInvoicePayment.VoidSequence


















		IncomeWithholdingCodeDetailRel
			one-to-one relation to IncomeWithholdingCodeDetail
			Field Mapping uses symbolic key
				related.VendorGroup				= Company.VendorGroup
				related.IncomeWithholdingCode	= IncomeWithholdingCode
				related.Company					= Company

		PayablesSecondaryWithholdingCodeDetailRel
			one-to-one relation to PayablesSecondaryWithholdingCodeDetail
			Field Mapping uses symbolic key
				related.VendorGroup							= Company.VendorGroup
				related.PayablesSecondaryWithholdingCode	= LocalSecondaryWithholdingCode
				related.Company								= Company

		PaymentDistributionsRel
			one-to-many relation to PayablesInvoiceDistribution
			Field Mapping uses symbolic key
				related.Company					= Company
				related.PayablesInvoice			= PayablesInvoice
			Instance Selection
				where (related.DistributionType.Payment
				or     related.DistributionType.PaymentAccrual
				or     related.DistributionType.PaymentWithholding
				or     related.DistributionType.PaymentDiscount)

		CashPaymentDistributionsRel	
			one-to-many relation to PayablesInvoiceDistribution
			Field Mapping uses symbolic key
				related.Company					= Company
				related.PayablesInvoice			= PayablesInvoice
			Instance Selection
				where (related.DistributionType.Payment
				and    related.DistributionDate	= CheckDate)

		ExpenseDistributionsRel	
			one-to-many relation to PayablesInvoiceDistribution
			Field Mapping uses symbolic key
				related.Company					= Company
				related.PayablesInvoice			= PayablesInvoice
			Instance Selection
				where (related.DistributionType.Distribution)

		ProrateDistributionsRel	
			if (LocalAmendedReallocation)
				AmendedProrateDistributionsRel
			else
				OriginalProrateDistributionsRel

		AmendedProrateDistributionsRel		
			one-to-many relation to PayablesInvoiceDistribution
			Field Mapping uses symbolic key
				related.Company					= Company
				related.PayablesInvoice			= PayablesInvoice
			Instance Selection
				where (related.Status.Unreleased
				and    related.AccrualCode	= LocalAccrualCode
				and    related.DistributionType.Distribution
				and	   !related.IsAccruedTaxDistribution)

		OriginalProrateDistributionsRel	
			one-to-many relation to PayablesInvoiceDistribution
			Field Mapping uses symbolic key
				related.Company					= Company
				related.PayablesInvoice			= PayablesInvoice
			Instance Selection
				where (related.AccrualCode	= LocalAccrualCode
				and    related.DistributionType.Distribution
				and	   !related.IsAccruedTaxDistribution)

		ProrateDiscountDistributionsRel
			one-to-many relation to PayablesInvoiceDistribution
			Field Mapping uses symbolic key
				related.Company					= Company
				related.PayablesInvoice			= PayablesInvoice
			Instance Selection
				where (related.AccrualCode	= LocalAccrualCode
				and    related.DistributionType.Distribution
				and    !related.IsTaxDistribution)

		ICBProrateDistributionsRel 
			one-to-many relation to PayablesInvoiceDistribution
			Field Mapping uses symbolic key
				related.Company					= Company
				related.PayablesInvoice			= PayablesInvoice
			Instance Selection
				where (related.AccrualCode	= DerivedAccrualCode
				and    related.DistributionType.Distribution)

		PaymentDiscountDistributionsRel
			one-to-many relation to PayablesInvoiceDistribution
			Field Mapping uses symbolic key
				related.Company					= Company
				related.PayablesInvoice			= PayablesInvoice
			Instance Selection
				where (related.DistributionType.PaymentDiscount)

		PaymentGainLossDistributionsRel	
			one-to-many relation to PayablesInvoiceDistribution
			Field Mapping uses symbolic key
				related.Company					= Company
				related.PayablesInvoice			= PayablesInvoice
			Instance Selection
				where (related.DistributionType.GainLossDistribution
				and    related.Status.Released)

		PayablesInvoicePaymentAnalyticCubeRel
			one-to-one relation to AnalyticCube
			Field Mapping uses AnalyticCubeSet
				related.BusinessClass = "PayablesInvoicePayment"

		BasicAnalyticsCalendarsRel 		is a BasicAnalyticsCalendar set

		ContextSettlementDetailRel 
			one-to-one relation to IntercompanyBillingSettlementDetail
			Field Mapping uses ByBillingDocument
				related.IntercompanyBillingGroup							= GeneralLedgerCompanyRel.FinanceEnterpriseGroup
				related.IntercompanyBillingDocumentHeader					= PayablesInvoice.IntercompanyBillingDocumentRel.IntercompanyBillingDocumentHeader
				related.IntercompanyBillingSettlementHeader.SettlementID	= ContextSettlementIDForContext

		ContextSettlementDetailLineRel 
			one-to-one relation to IntercompanyBillingSettlementDetailLine
			Field Mapping uses ByPayablesInvoiceLine
				related.IntercompanyBillingGroup							= GeneralLedgerCompanyRel.FinanceEnterpriseGroup
				related.IntercompanyBillingSettlementHeader.SettlementID	= ContextSettlementIDForContext
				related.IntercompanyBillingDocumentHeader					= PayablesInvoice.IntercompanyBillingDocumentRel.IntercompanyBillingDocumentHeader
				related.InvoiceLine											= PayablesInvoicePayment.PaymentSequence
				related.VoidSequence										= PayablesInvoicePayment.VoidSequence

		LocalSettlementIDSettlementDetailLineRel 
			one-to-one relation to IntercompanyBillingSettlementDetailLine
			Field Mapping uses ByPayablesInvoiceLine
				related.IntercompanyBillingGroup							= GeneralLedgerCompanyRel.FinanceEnterpriseGroup
				related.IntercompanyBillingSettlementHeader.SettlementID	= LocalSettlementID
				related.IntercompanyBillingDocumentHeader					= PayablesInvoice.IntercompanyBillingDocumentRel.IntercompanyBillingDocumentHeader
				related.InvoiceLine											= PayablesInvoicePayment.PaymentSequence
				related.VoidSequence										= blank

		GLCompanyGroupMemberRel
			one-to-one relation to GeneralLedgerCompanyGroupMember
			Field Mapping uses symbolic key
				related.GeneralLedgerCompanyGroup	= GeneralLedgerCompanyGroup
				related.Company						= Company

		PayablesSecondaryWithholdingRateRel
			one-to-many relation to PayablesSecondaryWithholdingRate
			Field Mapping uses symbolic key
				related.VendorGroup							= VendorGroup
				related.PayablesSecondaryWithholdingCode	= LocalSecondaryWithholdingCode
				related.EffectiveDate					   <= LocalPaymentDate

		PayablesInvoicePaymentDescendingAmountRel
			one-to-many relation to PayablesInvoicePayment
			Field Mapping uses ByTransactionIDNumberDescendingAmount
				related.VendorGroup				= VendorGroup
				related.PayGroup				= PayGroup
				related.PayVendor				= PayVendor
				related.CashRequirementsResult	= CashRequirementsResult
				related.BankTransactionCode		= BankTransactionCode
				related.TransactionIDNumber		= TransactionIDNumber
			Instance Selection
				where (related.PaymentAmount.CurrencyAmount > 0)

		PaymentForTransactionIDNumberRel
			one-to-many relation to PayablesInvoicePayment
			Field Mapping uses Set6
				related.PayGroup			= PayGroup
				related.BankTransactionCode	= BankTransactionCode
				related.TransactionIDNumber	= RelLocalTransactionIDNumber

		CalculateCurrencyExchangeRel
			one-to-one relation to CalculateCurrencyExchange
			Field Mapping uses Set1
				related.LPLField			= "CashRequirementsCurrencyExchange"
				related.UniqueParametersKey = blank

		ValidCashRequirementsResultRel
			one-to-many relation to CashRequirementsResult
			Field Mapping uses symbolic key
				related.VendorGroup				= Company.VendorGroup
				related.PayGroup				= PayGroup
			Instance Selection
				where (related.ProcessGroup !entered		
				and    related.Status			<= 2)		

		ValidCashRequirementsResultByProcessGroupRel		
			one-to-many relation to CashRequirementsResult
			Field Mapping uses symbolic key
				related.VendorGroup				= Company.VendorGroup
				related.PayGroup				= PayGroup
			Instance Selection
				where (related.ProcessGroup		= ProcessGroup
				and    related.Status			<= 2)

		CashRequirementsReportRel
			one-to-one relation to CashRequirementsReport
			Field Mapping uses symbolic key
				related.VendorGroup									= Company.VendorGroup
				related.PayGroup									= PayGroup
				related.CashRequirementsResult						= CashRequirementsResult
				related.CashRequirementsReport.CashCode				= CashCode
				related.CashRequirementsReport.BankTransactionCode	= BankTransactionCode
				related.CashRequirementsReport.InvoiceCurrency		= InvoiceCurrency
				related.CashRequirementsReport.PayVendor			= PayVendor
				related.CashRequirementsReport.RemitToCode			= RemitToCode

		OldCashRequirementsReportRel
			one-to-one relation to CashRequirementsReport
			Field Mapping uses symbolic key
				related.VendorGroup									= Company.VendorGroup
				related.PayGroup									= PayGroup
				related.CashRequirementsResult						= LocalCashRequirementsResult
				related.CashRequirementsReport.CashCode				= CashCode
				related.CashRequirementsReport.BankTransactionCode	= LocalBankTransactionCode
				related.CashRequirementsReport.InvoiceCurrency		= InvoiceCurrency
				related.CashRequirementsReport.PayVendor			= PayVendor
				related.CashRequirementsReport.RemitToCode			= RemitToCode

		VendorWithholdingCodeRel
			one-to-one relation to VendorWithholdingCode
			Field Mapping uses symbolic key
				related.VendorGroup				= Company.VendorGroup
				related.Vendor					= Vendor
				related.Company					= Company
				related.IncomeWithholdingCode	= IncomeWithholdingCode

		SystemAccountRel
			one-to-many relation to GeneralLedgerChartAccount
			Field Mapping uses BySystemAccount
				related.FinanceEnterpriseGroup				= GeneralLedgerCompanyRel.FinanceEnterpriseGroup
				related.SystemAccount						= LocalSystemAccount

		VendorContactsLocRel
			one-to-many relation to VendorContact
			Field Mapping uses symbolic key
				related.VendorGroup                     = VendorGroup
				related.Vendor                          = Vendor

		CashRequirementsProcessingRel
			one-to-many relation to CashRequirementsProcessing
			Field Mapping uses ByPayablesInvoicePayment
				related.VendorGroup						= Company.VendorGroup
				related.PayGroup						= PayGroup
				related.CashRequirementsResult			= CashRequirementsResult
				related.PayablesInvoice					= PayablesInvoice
				related.PayablesInvoicePayment			= PayablesInvoicePayment

		CashRequirementsErrorRel
			one-to-many relation to CashRequirementsError
			Field Mapping uses ByPayablesInvoicePayment
				related.VendorGroup						= Company.VendorGroup
				related.PayGroup						= PayGroup
				related.CashRequirementsResult			= CashRequirementsResult
				related.PayablesCompany					= Company
				related.PayablesInvoice					= PayablesInvoice
				related.PayablesInvoicePayment			= PayablesInvoicePayment

		DeleteCashRequirementsErrorRel
			one-to-many relation to CashRequirementsError
			Field Mapping uses DeleteByPayablesInvoicePayment
				related.PayablesCompany					= Company
				related.PayablesInvoice					= PayablesInvoice
				related.PayablesInvoicePayment			= PayablesInvoicePayment

		InactiveBankTransactionCodeErrorRel
			one-to-many relation to CashRequirementsError
			Field Mapping uses ByBankTransactionCode
				related.VendorGroup 			= Company.VendorGroup
				related.PayGroup 				= PayGroup
				related.CashRequirementsResult	= LocalCashRequirementsResult
				related.CashManagementGroup		= GeneralLedgerCompanyRel.FinanceEnterpriseGroup
				related.BankTransactionCode		= BankTransactionCode
				related.ErrorNumber				= CashRequirementsErrorNumber.BankTransactionCodeInactive
 			Instance Selection
				where (related.PayablesInvoicePayment entered)

		BankTransactionCodeInActiveErrorRel
			one-to-many relation to PayablesJobErrorResult
			Field Mapping uses symbolic key
				related.VendorGroup 							= Company.VendorGroup
				related.PayablesJobResult						= LocalPayablesJobResult
 			Instance Selection
				where (related.PayablesJobResult.PayGroup 		= PayGroup
				and related.PayablesInvoicePayment entered
				and related.CashManagementGroup					= GeneralLedgerCompanyRel.FinanceEnterpriseGroup
				and related.BankTransactionCode					= BankTransactionCode
				and related.ErrorNumber							= CashRequirementsErrorNumber.BankTransactionCodeInactive)

		InactiveCashCodeErrorRel
			one-to-many relation to CashRequirementsError
			Field Mapping uses ByCashCode
				related.VendorGroup 			= Company.VendorGroup
				related.PayGroup 				= PayGroup
				related.CashRequirementsResult	= LocalCashRequirementsResult
				related.CashManagementGroup		= GeneralLedgerCompanyRel.FinanceEnterpriseGroup
				related.CashCode				= CashCode
				related.ErrorNumber				= CashRequirementsErrorNumber.CashCodeInactive
 			Instance Selection
				where (related.PayablesInvoicePayment entered)

		CashCodeInactiveErrorRel
			one-to-many relation to PayablesJobErrorResult
			Field Mapping uses symbolic key
				related.VendorGroup 						= VendorGroup
				related.PayablesJobResult					= LocalPayablesJobResult
 			Instance Selection
				where (related.PayablesJobResult.PayGroup 	= PayGroup
				and related.PayablesInvoicePayment entered
				and related.CashManagementGroup				= GeneralLedgerCompanyRel.FinanceEnterpriseGroup
				and related.CashCode						= CashCode
				and related.ErrorNumber						= CashRequirementsErrorNumber.CashCodeInactive)

		CompanyCashCodeRelationCashRequirementsErrorRel
			one-to-many relation to CashRequirementsError
			Field Mapping uses symbolic key
				related.VendorGroup							= VendorGroup
				related.PayGroup							= PayGroup
				related.CashRequirementsResult				= LocalCashRequirementsResult
 			Instance Selection
				where (related.PayablesInvoicePayment entered
				and related.CashManagementGroup				= GeneralLedgerCompanyRel.FinanceEnterpriseGroup
				and related.CashCode						= CashCode
				and related.ErrorNumber						= CashRequirementsErrorNumber.CompanyCashCodeRelationship)

		CompanyCashCodeRelationPayablesJobErrorRel
			one-to-many relation to PayablesJobErrorResult
			Field Mapping uses symbolic key
				related.VendorGroup 						= VendorGroup
				related.PayablesJobResult					= LocalPayablesJobResult
 			Instance Selection
				where (related.PayablesJobResult.PayGroup 	= PayGroup
				and related.PayablesInvoicePayment entered
				and related.CashManagementGroup				= GeneralLedgerCompanyRel.FinanceEnterpriseGroup
				and related.CashCode						= CashCode
				and related.ErrorNumber						= CashRequirementsErrorNumber.CompanyCashCodeRelationship)

		GLInterEntityRelationshipCashRequirementsErrorRel
			one-to-many relation to CashRequirementsError
			Field Mapping uses symbolic key
				related.VendorGroup 						= VendorGroup
				related.PayGroup 							= PayGroup
				related.CashRequirementsResult				= LocalCashRequirementsResult
 			Instance Selection
				where (related.PayablesInvoicePayment entered
				and related.ErrorNumber						= CashRequirementsErrorNumber.GLInterEntityRelationship)

		GLInterEntityRelationshipPayablesJobErrorRel
			one-to-many relation to PayablesJobErrorResult
			Field Mapping uses symbolic key
				related.VendorGroup 						= VendorGroup
				related.PayablesJobResult					= LocalPayablesJobResult
 			Instance Selection
				where (related.PayablesInvoicePayment entered
				and related.PayablesJobResult.PayGroup 		= PayGroup
				and related.ErrorNumber						= CashRequirementsErrorNumber.GLInterEntityRelationship)

		InactiveAlternateBankTransactionCodeErrorRel
			one-to-many relation to CashRequirementsError
			Field Mapping uses ByBankTransactionCode
				related.VendorGroup 			= Company.VendorGroup
				related.PayGroup 				= PayGroup
				related.CashRequirementsResult	= LocalCashRequirementsResult
				related.CashManagementGroup		= GeneralLedgerCompanyRel.FinanceEnterpriseGroup
				related.BankTransactionCode		= BankTransactionCode.ElectronicAlternateTransactionCode.BankTransactionCode
				related.ErrorNumber				= CashRequirementsErrorNumber.AlternateBankTransactionCodeInactive
 			Instance Selection
				where (related.PayablesInvoicePayment entered)


		PayablesInvoiceWithholdingRel
			one-to-many relation to PayablesInvoiceWithholding
			Field Mapping uses ByCategoryWithholdingCode
				related.Company							= Company
				related.PayablesInvoice					= PayablesInvoice
				related.PayablesInvoicePayment			= PayablesInvoicePayment
 			Instance Selection
				where (related.Type.Payment)

		PayablesInvoiceWithholdingByCodeRel
			one-to-many relation to PayablesInvoiceWithholding
			Field Mapping uses ByCategoryWithholdingCode
				related.Company							= Company
				related.PayablesInvoice					= PayablesInvoice
				related.PayablesInvoicePayment			= PayablesInvoicePayment
				related.WithholdingCategory				= LocalWithholdingCategory
				related.IncomeWithholdingCode			= LocalWithholdingCode

		PayablesInvoiceWithholdingForVoidRel
			one-to-many relation to PayablesInvoiceWithholding
			Field Mapping uses symbolic key
				related.Company									= Company
				related.PayablesInvoice							= PayablesInvoice
				related.PayablesInvoicePayment.PaymentSequence	= PayablesInvoicePayment.PaymentSequence
				related.PayablesInvoicePayment.VoidSequence		= blank

		AccruedPayablesInvoiceWithholdingRel
			one-to-many relation to PayablesInvoiceWithholding
			Field Mapping uses ByAccruedCategoryWithholdingCode
				related.Company							= Company
				related.PayablesInvoice					= PayablesInvoice
				related.Type							= 1		

		PayablesInvoiceWithholdingForPaymentRel
			one-to-many relation to PayablesInvoiceWithholding
			Field Mapping uses ByCategoryWithholdingCode
				related.Company							= Company
				related.PayablesInvoice					= PayablesInvoice
			Instance Selection
				where (related.Reportable
				and   (related.PayablesInvoicePayment	= PayablesInvoicePayment
				or     related.Type.Accrued))

		SelectedPayablesInvoicePaymentRel
			one-to-many relation to PayablesInvoicePayment
			Field Mapping uses ByCashRequirementsReport
				related.VendorGroup							= VendorGroup
				related.PayGroup							= PayGroup
				related.CashRequirementsResult				= CashRequirementsResult
				related.CashCode							= CashCode
				related.BankTransactionCode					= BankTransactionCode
				related.InvoiceCurrency						= InvoiceCurrency
				related.PayVendor							= PayVendor
				related.RemitToCode							= RemitToCode
			Instance Selection
				where (!related.IsOnHold
				and    related.UniqueID			!= UniqueID)

		PaymentsNotVoidedRel					
			one-to-many relation to PayablesInvoicePayment
			Field Mapping uses ByCompanyVendor
				related.Company					= Company
				related.Vendor					= Vendor
				related.PayablesInvoice 		= PayablesInvoice
			Instance Selection
				where (related.PayablesInvoicePayment.VoidSequence !entered)

		PayableInvoicePaymentByAccrualCodeRel				
			one-to-many relation to PayablesInvoicePayment
			Field Mapping uses symbolic key
				related.Company					= Company
				related.PayablesInvoice			= PayablesInvoice
			Instance Selection
				where (related.AccrualCode		= AccrualCode)

		CashCodeFundRel
			one-to-one relation to CashCodeFund
			Field Mapping uses ByAccountingEntityFund
				related.CashManagementGroup		= GeneralLedgerCompanyRel.FinanceEnterpriseGroup
				related.CashCode				= CashCode
				related.AccountingEntity		= LocalToAccountingEntity
		 		related.AccountingUnit			= LocalAccountingUnit
				related.FinanceDimension1		= LocalFinanceDimension1

		CashCodeFundEditRel
			one-to-many relation to CashCodeFundEdit
			Field Mapping uses ByOriginatingTransaction
		 		related.CashManagementGroup		= GeneralLedgerCompanyRel.FinanceEnterpriseGroup
		  		related.OriginatingTransaction	= reference to PayablesInvoice

		CashCodeFundEditByFundRel					
			one-to-one relation to CashCodeFundEdit
			Field Mapping uses ByOriginatingTransaction
		 		related.CashManagementGroup		= GeneralLedgerCompanyRel.FinanceEnterpriseGroup
		  		related.OriginatingTransaction	= reference to PayablesInvoice
		 		related.CashCode				= LocalCashCode
		 		related.AccountingEntity		= LocalToAccountingEntity
		 		related.AccountingUnit			= LocalAccountingUnit
		 		related.FinanceDimension1		= LocalFinanceDimension1

		ExceedesCashCodeFundBalanceRel
			one-to-many relation to CashCodeFundEdit
			Field Mapping uses ByExceedesFundBalance
		 		related.CashManagementGroup		= GeneralLedgerCompanyRel.FinanceEnterpriseGroup
		  		related.OriginatingTransaction	= reference to PayablesInvoice
		 		related.ExceedesFundBalance		= true

	 	PayablesInvoiceDocumentInvoiceTypeRel								
			one-to-many relation to PayablesInvoiceDocument
			Field Mapping uses symbolic key
				related.Company			= Company
				related.PayablesInvoice	= PayablesInvoice
			Instance Selection
				where (related.DocumentType.Invoice		
				and	   related.Attachment.MimeType entered) 

#ifdef module cam
		CustodialDetailAmountRel
			one-to-many relation to CustodialDetailAmount
			Field Mapping uses ByCustodialPosting
				related.FinanceEnterpriseGroup  		= GeneralLedgerCompanyRel.FinanceEnterpriseGroup
				related.CustodialPosting          		= LocalCustodialPosting
			Instance Selection
				where (related.CustodialAccountManagement.AccountingEntity	= LocalToAccountingEntity)
				
		CustodialAccountEditRel
			one-to-many relation to CustodialAccountEdit
			Field Mapping uses ByOriginatingTransaction
	 			related.FinanceEnterpriseGroup	= GeneralLedgerCompanyRel.FinanceEnterpriseGroup
	  			related.OriginatingTransaction	= reference to PayablesInvoice

		CustodialAccountEditRel2
			one-to-one relation to CustodialAccountEdit
			Field Mapping uses ByOriginatingTransaction
		 		related.FinanceEnterpriseGroup	= GeneralLedgerCompanyRel.FinanceEnterpriseGroup
		  		related.OriginatingTransaction	= reference to PayablesInvoice
		 		related.AccountingEntity		= LocalToAccountingEntity
		 		related.FinanceDimension10		= LocalCustodialPosting

		ExceedsCustodialAccountBalanceRel
			one-to-many relation to CustodialAccountEdit
			Field Mapping uses ByExceedsBalance
		 		related.FinanceEnterpriseGroup	= GeneralLedgerCompanyRel.FinanceEnterpriseGroup
		  		related.OriginatingTransaction	= reference to PayablesInvoice
		 		related.ExceedsBalance			= true

		CustodialActivityRel
			one-to-many relation to CustodialActivity
			Field Mapping uses ByPayablesInvoicePayment
		 		related.FinanceEnterpriseGroup	= GeneralLedgerCompanyRel.FinanceEnterpriseGroup
		  		related.CustodialCompany		= Company
				related.CustodialPosting		= LocalCustodialPosting
		 		related.PayablesInvoice			= PayablesInvoice
		 		related.PayablesInvoicePayment	= PayablesInvoicePayment
		 		related.DocumentNumber			= PayablesInvoicePayment.PaymentSequence+"_"+PayablesInvoice.Invoice
#endif

		CashLedgerGLDistributionsRel
			one-to-many relation to CashLedgerGLDistribution
            Field Mapping uses symbolic key
            	related.CashManagementGroup 	= GeneralLedgerCompanyRel.FinanceEnterpriseGroup
                related.CashCode 				= CashCode
                related.CashLedgerSourceRecord	= "CHK"
            Instance Selection
                where (related.CashLedgerGLDistribution.BankTransactionCode = BankTransactionCode
                and    related.CashLedgerGLDistribution.TransactionIDNumber  = TransactionIDNumber
                and    related.CashLedgerGLDistribution.DistributionType.FundCashPayment)

		CashLedgerGLDistributionByAccountRel
			one-to-many relation to CashLedgerGLDistribution
            Field Mapping uses symbolic key
            	related.CashManagementGroup 	= GeneralLedgerCompanyRel.FinanceEnterpriseGroup
                related.CashCode 				= CashCode
                related.CashLedgerSourceRecord	= "CHK"
            Instance Selection
                where (related.CashLedgerGLDistribution.BankTransactionCode	= BankTransactionCode
                and    related.CashLedgerGLDistribution.TransactionIDNumber	= TransactionIDNumber
                and    related.CashLedgerGLDistribution.DistributionType.FundCashPayment
                and    related.Company.OrigCompany							= Company
				and    related.GLFinanceCodeBlock.Ledger					= LocalCalculatePayablesFinanceStructure.OutputFinanceCodeBlock.Ledger
				and    related.GLFinanceCodeBlock.ToAccountingEntity		= LocalCalculatePayablesFinanceStructure.OutputFinanceCodeBlock.ToAccountingEntity
				and    related.GLFinanceCodeBlock.AccountingUnit			= LocalCalculatePayablesFinanceStructure.OutputFinanceCodeBlock.AccountingUnit
				and    related.GLFinanceCodeBlock.GeneralLedgerChartAccount	= LocalCalculatePayablesFinanceStructure.OutputFinanceCodeBlock.GeneralLedgerChartAccount
				and    related.GLFinanceCodeBlock.Project					= LocalCalculatePayablesFinanceStructure.OutputFinanceCodeBlock.Project
				and    related.GLFinanceCodeBlock.FinanceDimension1			= LocalCalculatePayablesFinanceStructure.OutputFinanceCodeBlock.FinanceDimension1
				and    related.GLFinanceCodeBlock.FinanceDimension2			= LocalCalculatePayablesFinanceStructure.OutputFinanceCodeBlock.FinanceDimension2
				and    related.GLFinanceCodeBlock.FinanceDimension3			= LocalCalculatePayablesFinanceStructure.OutputFinanceCodeBlock.FinanceDimension3
				and    related.GLFinanceCodeBlock.FinanceDimension4			= LocalCalculatePayablesFinanceStructure.OutputFinanceCodeBlock.FinanceDimension4
				and    related.GLFinanceCodeBlock.FinanceDimension5			= LocalCalculatePayablesFinanceStructure.OutputFinanceCodeBlock.FinanceDimension5
				and    related.GLFinanceCodeBlock.FinanceDimension6			= LocalCalculatePayablesFinanceStructure.OutputFinanceCodeBlock.FinanceDimension6
				and    related.GLFinanceCodeBlock.FinanceDimension7			= LocalCalculatePayablesFinanceStructure.OutputFinanceCodeBlock.FinanceDimension7
				and    related.GLFinanceCodeBlock.FinanceDimension8			= LocalCalculatePayablesFinanceStructure.OutputFinanceCodeBlock.FinanceDimension8
				and    related.GLFinanceCodeBlock.FinanceDimension9			= LocalCalculatePayablesFinanceStructure.OutputFinanceCodeBlock.FinanceDimension9
				and    related.GLFinanceCodeBlock.FinanceDimension10		= LocalCalculatePayablesFinanceStructure.OutputFinanceCodeBlock.FinanceDimension10)		

		MatchCompanyRel		
			one-to-one relation to MatchCompany
			Field Mapping uses symbolic key
				related.Company				= Company

		ItemLocationRel
			one-to-one relation to ItemLocation
			Field Mapping uses symbolic key
				related.Company							= Company
				related.InventoryLocation				= LocalLocation
				related.Item							= LocalItem


		PayablesInvoiceWithholdingForIDMRel
			one-to-many relation to PayablesInvoiceWithholding
			Field Mapping uses symbolic key
				related.Company					= Company
				related.PayablesInvoice			= PayablesInvoice
			Instance Selection
				where (related.PayablesInvoicePayment !entered)
				
		IncomeWithholdingRateRel
			one-to-many relation to IncomeWithholdingRate
			Field Mapping uses symbolic key
				related.VendorGroup				= Company.VendorGroup
				related.IncomeWithholdingCode	= LocalWithholdingCode
				related.WithholdingCategory		= LocalWithholdingCategory
			Instance Selection
				where (related.EffectiveDate <= PayablesInvoicePayment.CheckDate)

		PayablesFundApplyDistributionRel	is a PayablesFundApplyDistribution set 

		PayablesFundApplyDistributionDescendingRel 
			one-to-many relation to PayablesFundApplyDistribution
			Field Mapping uses PayablesFundApplyDistributionDescending
            	related.Company					= Company
            	related.PayablesInvoice 		= PayablesInvoice
            	related.PayablesInvoicePayment 	= PayablesInvoicePayment

		


		
		FSMBODConfigurationRel
        	one-to-one relation to FSMBODConfiguration
			Field Mapping uses symbolic key
            	related.FSMBODConfiguration.Verb 		= 1
            	related.FSMBODConfiguration.Noun 		= "PayableTransaction"
            	related.FSMBODConfiguration.Direction 	= 1
		
		FSMInboundBODTrackerRel
            one-to-one relation to FSMInboundBODTracker
            Field Mapping uses symbolic key
                related.FSMInboundBODTracker	= LocalFSMInboundBODTracker		

		CurrExchangeRateRel
			one-to-one relation to CurrExchangeRate
			Field Mapping uses symbolic key
				related.FinanceEnterpriseGroup									= GeneralLedgerCompanyRel.FinanceEnterpriseGroup
				related.CurrencyTable											= PayablesInvoice.CurrencyTable
				related.CurrExchangeRate.CurrencyRelationship.FromCurrency		= LocalFromCurrency
				related.CurrExchangeRate.CurrencyRelationship.ToCurrency		= LocalToCurrency
				related.ExchangeDate											= LocalCurrExchangeDate

		FSMBODConfigurationParameterRel
    		one-to-one relation to FSMBODConfigurationParameter
    		Field Mapping uses symbolic key
    			related.FSMBODConfigurationParameter	= LocalConfigurationParameter


		ReportableIncomeEntitiesRel					
			one-to-many relation to PayablesReportableIncomeEntity
            Field Mapping uses symbolic key
                related.VendorGroup                     = VendorGroup
                related.PayablesReportableIncomeGroup   = ReportableIncomeGroup
                related.Company                         = Company
            Instance Selection
                where   (related.ProcessLevel       !entered
                or      (related.ProcessLevel       entered
                and     related.ProcessLevel        = ProcessLevel))

		AllReportableIncomeEntitiesRel				
			one-to-many relation to PayablesReportableIncomeEntity
			Field Mapping uses symbolic key
				related.VendorGroup						= ReportableIncomeGroup.VendorGroup
				related.PayablesReportableIncomeGroup	= ReportableIncomeGroup

		PayablesProcessingMonitorRel				
			one-to-one relation to PayablesProcessingMonitor
			Field Mapping uses symbolic key
				related.VendorGroup									  = VendorGroup
				related.PayablesProcessingMonitor.PayGroup			  = PayGroup		
				related.PayablesProcessingMonitor.RunProgram		  = LocalRunProgram			
				related.PayablesProcessingMonitor.ProcessGroup		  = LocalProcessGroup
				related.PayablesProcessingMonitor.ProcessLevel		  = blank
				related.PayablesProcessingMonitor.AccountStructure	  = blank						
				related.PayablesProcessingMonitor.RunGroup			  = blank		
				related.PayablesProcessingMonitor.AuthorityCode		  = blank	
				related.PayablesProcessingMonitor.Company			  = blank	   
				related.PayablesProcessingMonitor.BankTransactionCode = blank		

		ValidateVendorCertificationRel		
			one-to-many relation to VendorCertification
			Field Mapping uses symbolic key
				related.VendorGroup 	= Company.VendorGroup
				related.Vendor      	= PayVendor
				related.VendorLocation	= RemitToCode
			Instance Selection
				where (related.Validated
				and    related.CertificationEffectiveDate  <= CheckDate
				and    related.CertificationExpirationDate >= CheckDate)

		ValidateVendorValidCertificationDaysRel		
			one-to-many relation to VendorCertification
			Field Mapping uses symbolic key
				related.VendorGroup 	= Company.VendorGroup
				related.Vendor      	= PayVendor
				related.VendorLocation	= RemitToCode
			Instance Selection
				where (related.Validated
				and    related.CertificationEffectiveDate  <= CheckDate
				and    related.ValidCertificationDays entered)	

		ValidateVendorValidCertificationExistsRel		
			one-to-many relation to VendorCertification
			Field Mapping uses symbolic key
				related.VendorGroup 	= Company.VendorGroup
				related.Vendor      	= PayVendor
				related.VendorLocation	= RemitToCode	

		ValidateVendorCertificationMaxSpendExistsRel		
				one-to-many relation to VendorCertification
				Field Mapping uses symbolic key
					related.VendorGroup 	= Company.VendorGroup
					related.Vendor      	= PayVendor
					related.VendorLocation	= RemitToCode
				Instance Selection
					where (related.Validated
					and    related.CertificationEffectiveDate  <= CheckDate
					and   (related.CertificationExpirationDate >= CheckDate
					or     related.CertificationExpirationDate !entered))	

		ValidateVendorCertificationNotExistsRel		
				one-to-many relation to VendorCertification
				Field Mapping uses symbolic key
					related.VendorGroup 	= Company.VendorGroup
					related.Vendor      	= PayVendor
					related.VendorLocation	= RemitToCode
				Instance Selection
					where (related.Validated
					and    related.CertificationEffectiveDate  <= DueDate
					and   (related.CertificationExpirationDate >= DueDate
					or     related.CertificationExpirationDate !entered))	

		PayGroupCompanyRelationshipRel
            one-to-one relation to PayGroupCompanyRelationship
            Field Mapping uses symbolic key
                related.VendorGroup     			= VendorGroup
                related.PayGroup        			= PayGroup
                related.Company         			= Company
				related.ProcessLevel				= ProcessLevel

		GeneralLedgerSystemCodeRel
			one-to-one relation to GeneralLedgerSystemCode
			Field Mapping uses symbolic key
				related.FinanceEnterpriseGroup		= GeneralLedgerCompanyRel.FinanceEnterpriseGroup
				related.GeneralLedgerSystemCode		= "AP"

		CashCodeDefaultPostCompanyRel
			one-to-one relation to GeneralLedgerCompany
			Field Mapping uses symbolic key
				related.Company 					= LocalPayablesCompany

		GLInterEntityRel
			one-to-one relation to GLInterEntityRelation
			Field Mapping uses symbolic key
				related.FinanceEnterpriseGroup					= GeneralLedgerCompanyRel.FinanceEnterpriseGroup
				related.AccountingEntity						= PayAccrualCodeDetailRel.DistributionAccount.ToAccountingEntity
				related.ToAccountingEntity						= CashCodeDefaultPostCompanyRel.AccountingEntity

		PaymentsOnHoldRel
			one-to-one relation to PayablesOnHold
			Field Mapping uses Set4
				related.VendorGroup   							= VendorGroup
				related.HoldCode								= PayablesInvoice.InvoiceHoldCode
				related.Company       							= Company
				related.Vendor									= Vendor
				related.PayablesInvoice 						= PayablesInvoice
				related.PayablesInvoicePayment.PaymentSequence 	= PayablesInvoicePayment.PaymentSequence
				related.PayablesInvoicePayment.VoidSequence 	= PayablesInvoicePayment.VoidSequence

		PayablesInvoiceMatchDiscountRel
			one-to-one relation to PayablesInvoiceDiscount
			Field Mapping uses symbolic key
				related.Company 								= Company
				related.PayablesInvoice 						= PayablesInvoice
				related.PayablesInvoicePayment.PaymentSequence 	= PayablesInvoicePayment.PaymentSequence
				related.PayablesInvoicePayment.VoidSequence 	= PayablesInvoicePayment.VoidSequence
				related.DiscountType 							= "M"

		PayablesInvoiceByVendorRel
			one-to-one relation to PayablesInvoice
			Field Mapping uses ByCompanyVendorInvoice
				related.Company						= Company
				related.Vendor						= Vendor
				related.Invoice						= Invoice
				related.Suffix						= Suffix
				related.CancelSequence				= CancelSequence
				related.InvoiceDate					= PayablesInvoice.InvoiceDate

		PayablesInvoiceSuffixRel
			one-to-one relation to PayablesInvoice
			Field Mapping uses ByCompanyVendorInvoice
				related.Company						= Company
				related.Vendor						= Vendor
				related.Invoice						= Invoice
				related.Suffix						= 1
				related.CancelSequence				= blank
				related.InvoiceDate					= PayablesInvoice.InvoiceDate

		PayAccrualCodeDetailRel
			one-to-one relation to PayablesAccrualCodeDetail
			Field Mapping uses Set2
				related.VendorGroup					= VendorGroup
				related.PayablesAccrualCode			= AccrualCode
				related.Company						= Company

		APAccrualCodeDetailRel
			one-to-one relation to PayablesAccrualCodeDetail
			Field Mapping uses symbolic key
				related.VendorGroup					= VendorGroup
				related.PayablesAccrualCode			= AccrualCode
				related.Company						= Company

		PayablesInvDistributionTaxRel
			one-to-many relation to PayablesInvoiceDistribution
			Field Mapping uses Set1
				related.Company						= Company
				related.PayablesInvoice				= PayablesInvoice
			Instance Selection
				where (related.TaxCode entered
				and    related.DistributionType 	!= "R"
				and    related.TaxIndicator 		!= 2)

	Sets
		ByTransactionIDNumberDescendingAmount	
			duplicates
			indexed
			Sort Order
				VendorGroup
				PayGroup
				PayVendor
				CashRequirementsResult
				BankTransactionCode
				TransactionIDNumber
				PaymentAmount.CurrencyAmount descending

		ByCompanyDivCodeVendor			
			duplicates
			indexed
			Sort Order
				Company
				Vendor
				PayablesInvoice

		ByCurrencyCompanyVendor			
			duplicates
			indexed
			Sort Order
				InvoiceCurrency
				Company
				Vendor
				CheckDate				

		ByCheckDateCompanyVendor		
			duplicates
			indexed
			Sort Order
				InvoiceCurrency
				CheckDate
				Company
				Vendor
				IncomeCode

		ByCompanyVendor
			Sort Order
				Company
				Vendor
				PayablesInvoice
				PayablesInvoicePayment

		ByCompanyVendorInvoice
			Instance Selection
				where (VendorInvoiceEntered)
			Sort Order
				Company
				Vendor
				Invoice
				Suffix
				CancelSequence
				PayablesInvoicePayment.PaymentSequence
				PayablesInvoicePayment.VoidSequence
				PayablesInvoice							

		Set10
			indexed
			Sort Order
				Status
				Company
				ProcessLevel
				Vendor
				PayablesInvoice
				PayablesInvoicePayment
				PayGroup

		Set12
			indexed
			Instance Selection
				where (IsAppset12)
			Sort Order
				PayGroup
				Vendor
				PayablesInvoice
				PayablesInvoicePayment
				Company

		Set2
			indexed
			Sort Order
				PayGroup
				Status
				Vendor
				PayablesInvoice
				PayablesInvoicePayment
				Company

		Set3
			indexed
			Sort Order
				PayGroup
				Status
				PayImmediately
				ProcessGroup
				Vendor
				PayablesInvoice
				PayablesInvoicePayment
				Company

		Set4
			indexed
			Instance Selection
				where (IsAppset4)
			Sort Order
				Company
				Vendor
				PayablesInvoice
				PayablesInvoicePayment

		Set6
			indexed
			Instance Selection
				where (IsAppset6)
			Sort Order
				PayGroup
				BankTransactionCode
				TransactionIDNumber
				Vendor
				PayablesInvoice
				PayablesInvoicePayment
				Company

		Set8
			indexed
			Sort Order
				PayGroup
				CashCode
				TransactionNumber
				BankTransactionCode
				Company
				Vendor
				PayablesInvoice
				PayablesInvoicePayment

		OldSet4
			indexed
			Instance Selection
				where (IsAppset4)
			Sort Order
				Company
				Vendor
				Invoice
				Suffix
				CancelSequence
				PayablesInvoicePayment

		OldSet6
			indexed
			Instance Selection
				where (IsAppset6)
			Sort Order
				PayGroup
				BankTransactionCode
				TransactionIDNumber
				Vendor
				Invoice
				Suffix
				CancelSequence
				PayablesInvoicePayment
				Company
				PayablesInvoice

		OldSet10
			indexed
			Sort Order
				Status
				Company
				ProcessLevel
				Vendor
				Invoice
				Suffix
				CancelSequence
				PayablesInvoicePayment
				PayGroup
				PayablesInvoice











		ForCashRequirements
			indexed
			duplicates
			Sort Order
				VendorGroup
				PayGroup
				PaymentPriority
				PayVendor
				CashCode
				BankTransactionCode

		ByCashRequirementsReport
			indexed
			duplicates
			Sort Order
				VendorGroup
				PayGroup
				CashRequirementsResult
				CashCode
				BankTransactionCode
				InvoiceCurrency
				PayVendor
				RemitToCode
				Vendor
				Invoice

		ByCashCodePriorityVendorCompany		
			Sort Order
				CashCode
				PaymentPriority
				VendorGroup
				PayVendor
				RemitToCode
				BankTransactionCode
				InvoiceCurrency
				VendorPaymentCurrency
				SeparatePaymentSequence
				Company
				PayablesInvoice
				PayablesInvoicePayment
				PayGroup
				CashRequirementsResult
				Status
				OnHold

		ByCashCodePriorityVendorInvoiceGroup		
			Sort Order
				CashCode
				PaymentPriority
				VendorGroup
				PayVendor
				RemitToCode
				BankTransactionCode
				InvoiceCurrency
				VendorPaymentCurrency
				SeparatePaymentSequence
				InvoiceGroup
				Company
				PayablesInvoice
				PayablesInvoicePayment

	Field Rules

		Vendor
 			force default to PayablesInvoice.Vendor
		ProcessLevel
			force default to PayablesInvoice.ProcessLevel
		AccrualCode
			if (!RetainagePayment)
				force default to PayablesInvoice.AccrualCode
		VendorClass
			force default to Vendor.VendorClass

		RemitToCode
			force default to PayablesInvoice.RemitToCode











		InvoiceCurrency
			default to PayablesInvoice.InvoiceCurrency

		PayGroup		
			required
			force default to PayablesInvoice.PayGroup
		
		VendorGroup
			default to Company.VendorGroup

		ProcessGroup
			force default to Vendor.PayablesProcessGroup

		BankCheckAmount		
			if (Status.Historical)
				cannot be changed
					"CannotChangeBankCheckAmount;StatusIsHistorical"
			if (CashRequirementsResult entered)
				cannot be changed
					"CannotChangeBankCheckAmount;CashRequirementsInProcess"

		BankTransactionCode
			default to PayablesInvoice.BankTransactionCode
			default to PayablesInvoice.RemitToVendorCompanyDefaultRel.BankTransactionCode
			default to RemitToCode.BankTransactionCode
			default to PayVendor.BankTransactionCode
			default to PayablesInvoice.VendorCompanyDefaultRel.BankTransactionCode
			default to Vendor.BankTransactionCode
			default to VendorClass.BankTransactionCode
			default to ProcessLevel.PayGroup.BankTransactionCode
			default to Company.PayGroup.BankTransactionCode
			default to PayGroup.BankTransactionCode
			required
			if (BankTransactionCode entered						
			and PayablesInvoice.BankTransactionCode not entered
			and !PayablesInvoice.TransientChangingVendor)		
				invoke Update PayablesInvoice
					invoked.BankTransactionCode = BankTransactionCode
			if (BankTransactionCode changed)
				if (BankTransactionCode.BankTransactionType.BillOfExchangePayment)
					constraint (!PayablesInvoice.InvoiceType.Prepayment)
						"PaymentCodeCannotBeChangedTo_\B\O\E"	
				constraint (!BankTransactionCode.BankTransactionType.BankService)
					"PaymentCodeMustBeCashOrBillOfExchangeType"	
			if (!Status.Unreleased
			and !Status.Released
			and !Status.SelectedForPayment)
				cannot be changed
					"PaymentCodeCannotBeChanged;PaymentIs<Status>"
			if (TransactionNumber entered)
				cannot be changed
					"UnapplyPmtBeforeChangingPmtCodeOrCashCode"	


			if (!Status.Unreleased)
				if ((BankTransactionCodeRel.PaymentOutputOption.ElectronicFile	
				or	 BankTransactionCodeRel.PaymentOutputOption.Swift
				or   BankTransactionCodeRel.PaymentOutputOption.WireTransfer)	
				and CashRequirementsResult not entered)
					constraint ((PayVendor.BankEntity 			entered
					and			 PayVendor.BankAccountNumber 	entered)
					or			(RemitToCode.BankEntity			entered		
					and   		 RemitToCode.BankAccountNumber	entered))
						"BankEntityAndBankAccountNumberRequiredOnPayVendor<PayVendor>ForInvoicesSetUpForElectronicPayment"
					if (PayVendor.BankEntity 	entered)
						constraint (PayVendor.BankAccountType entered)
							"BankAccountTypeRequiredForElectronicPayment"
					else
					if (RemitToCode.BankEntity	entered)
						constraint (RemitToCode.BankAccountType entered)
							"BankAccountTypeRequiredForElectronicPayment"

			if (Status.DraftPayable)
				constraint (BankTransactionCode.BankTransactionType.BillOfExchangePayment)
					"TransactionCodeMustBeB\O\EForDraftType" 
			if (BankTransactionCode entered
			and BankTransactionCode != PayablesInvoice.BankTransactionCode
			and !PayablesInvoice.MultiplePayablesInvoicePaymentRelExists
			and !PayablesInvoice.TransientChangingVendor)		
				invoke FastUpdate PayablesInvoice
					invoked.BankTransactionCode = BankTransactionCode
				if  (BankTransactionCodeRel.BankTransactionType.CashPayment		
				and !BankTransactionCodeRel.PaymentOutputOption.NoOutput)
					initialize ValidateCashPaymentFormat
					ValidateCashPaymentFormat.VendorGroup			= Company.VendorGroup
					ValidateCashPaymentFormat.BankTransactionCode 	= BankTransactionCode
					ValidateCashPaymentFormat.CashCode				= CashCode
					ValidateCashPaymentFormat.PayablesProcessGroup	= Vendor.PayablesProcessGroup
					LocalPerformValidateCashPaymentFormat = ValidateCashPaymentFormat.PerformValidateCashPaymentFormat
					constraint (ValidateCashPaymentFormat.OutputErrorNumber not entered)
						"<ValidateCashPaymentFormat.OutputErrorMessage>"
					if (ValidateCashPaymentFormat.OutputCashPaymentFormat.PaymentFormat.AchFile)	
						if (PayVendor.BankEntity 	entered)
							constraint (PayVendor.BankAccountType.Checking
							or			PayVendor.BankAccountType.Savings
							or			PayVendor.BankAccountType.IBAN)								
								"BankAccountTypeMustBeCheckingOrSavingsOrIbanForACHPaymentFormat"	
						else
						if (RemitToCode.BankEntity 	entered)
							constraint (RemitToCode.BankAccountType.Checking
							or			RemitToCode.BankAccountType.Savings
							or			RemitToCode.BankAccountType.IBAN)							
								"BankAccountTypeMustBeCheckingOrSavingsOrIbanForACHPaymentFormat"	
			constraint (BankTransactionCode.BankTransactionType.CashPayment
			or          BankTransactionCode.BankTransactionType.BillOfExchangePayment)
				"PaymentCode<BankTransactionCode>NotCashOr_\B\O\EPaymentType"     






		CashCode
			default to PayablesInvoice.CashCode
			default to PayablesInvoice.RemitToVendorCompanyDefaultRel.CashCode
			default to RemitToCode.CashCode
			default to PayVendor.CashCode
			default to PayablesInvoice.VendorCompanyDefaultRel.CashCode
			default to Vendor.CashCode
			default to PayVendor.VendorClass.CashCode
			default to Vendor.VendorClass.CashCode
			default to ProcessLevel.CashCode
			default to Company.CashCode
			default to PayGroup.CashCode
			required		
			if (!TransientUpdateFromBatch)
				if (TransactionIDNumber entered)
					cannot be changed
						"UnapplyPaymentBeforeChangingPaymentCodeOrCashCode"	   
			if (CashRequirementsResult entered)		
				cannot be changed
					"CannotChangeCashCode;CashRequirementsInProcess"

			if (BankTransactionCode.BankTransactionType.BillOfExchangePayment)
				constraint (PayablesInvoice.InvoiceCurrency = PayablesInvoice.PayCurrency)
					"InvoicePayCurrency<PayablesInvoice.PayCurrency>MustEqualInvoiceCurrency<InvoiceCurrency>For_\BillOf_\Exchange"	 

			if (CashCode.Currency not = PayablesInvoice.InvoiceCurrency)
				constraint (!BankTransactionCode.BankTransactionType.BillOfExchangePayment)
					"CashCodeCurrency<CashCode.Currency>MustEqualInvoiceCurrency<PayablesInvoice.InvoiceCurrency>For_\BillOf_\ExchangePayment"	  
			if (CashCode.DefaultPostCompany    entered)    
				constraint (CompanyCashCodeRel exists)
					"CompanyCashCodeRelationshipDoesNotExistForCashCode:<CashCode>WithDefaultPostCompany:<DerivedCashPostingCompany>"
				if (action type.Create
				or CashCode changed)
					constraint (CompanyCashCodeRel.Active)
						"CompanyCashCodeIsNotActive"
				if  (GeneralLedgerCompanyRel.AccountingEntity != CashCode.DefaultPostCompany.AccountingEntity)
					constraint (GLInterEntityRelationRel exists)
						"RelationshipBetweenCompanyAccountingEntityAndCashCodeDefaultPostCompanyAccountingEntityDoesNotExist"
					constraint (GLInterEntityRelationRel.Active)		
						"InactiveRelationBetween<GeneralLedgerCompanyRel.FinanceEnterpriseGroup.AccountingEntityLabel>_<GeneralLedgerCompanyRel.AccountingEntity>And<CashCode.DefaultPostCompany.AccountingEntity>"
				constraint (CashCode.DefaultPostCompany.Currency = Company.Currency)
					"TheCashCodeDefaultPostingCompanyCurrencyMustEqualCompanyCurrency"
			else
				constraint (PayGroup.BaseCurrency = Company.Currency)		
					"CompanyBaseCurrency:<Company.Currency>MustEqualPayGroupBaseCurrency:<PayGroup.BaseCurrency>;EnterDefaultPostCompanyOnCashCode"
				constraint (CompanyCashCodeRel exists)			
					"Company-\Cash_\CodeRelationshipDoesNotExistFor_\Pay_\Group<PayGroup>;_\Post_\Company<DerivedCashPostingCompany>and_\Cash_\Code<CashCode>"	
				if (action type.Create
				or CashCode changed)
					constraint (CompanyCashCodeRel.Active)
						"CompanyCashCodeIsNotActive"
				if (PayGroup.PostCompany = DerivedCashPostingCompany		
				and GeneralLedgerCompanyRel.AccountingEntity != PayGroup.PostCompany.AccountingEntity)
					constraint (GLInterEntityRelationByPayGroupCompanyRel exists)
						"InvalidRelationBetween<GeneralLedgerCompanyRel.FinanceEnterpriseGroup.AccountingEntityLabel>_<GeneralLedgerCompanyRel.AccountingEntity>And<PayGroup.PostCompany.AccountingEntity>"
					constraint (GLInterEntityRelationByPayGroupCompanyRel.Active)
						"InactiveRelationBetween<GeneralLedgerCompanyRel.FinanceEnterpriseGroup.AccountingEntityLabel>_<GeneralLedgerCompanyRel.AccountingEntity>And<PayGroup.PostCompany.AccountingEntity>"
			if (CashCode changed
			and VendorPaymentAmount	!entered
			and !Vendor.DefaultVendorPaymentCurrency.Invoice				
			and PayablesInvoice.PayCurrency != CashCode.Currency			
			and PayablesInvoice.PayCurrency = VendorPaymentCurrency)		
				VendorPaymentCurrency   = CashCode.Currency
			if (CashCode entered
			and PayablesInvoice.CashCode != CashCode
			and !PayablesInvoice.MultiplePayablesInvoicePaymentRelExists
			and !PayablesInvoice.TransientChangingVendor)		
				invoke FastUpdate PayablesInvoice
					invoked.CashCode = CashCode
					invoked.PayCurrency	= CashCode.Currency 
					invoked.VendorPaymentCurrency	= VendorPaymentCurrency
			if (BankTransactionCode.BankTransactionType.CashPayment)
				required
					"CashCodeRequiredForCashTypePaymentCode"	     
			if (CashCode entered
			and CashCode changed)									

				if  (BankTransactionCodeRel.BankTransactionType.CashPayment		
				and !BankTransactionCodeRel.PaymentOutputOption.NoOutput)
					initialize ValidateCashPaymentFormat
					ValidateCashPaymentFormat.VendorGroup			= Company.VendorGroup
					ValidateCashPaymentFormat.BankTransactionCode 	= BankTransactionCode
					ValidateCashPaymentFormat.CashCode				= CashCode
					ValidateCashPaymentFormat.PayablesProcessGroup	= Vendor.PayablesProcessGroup
					LocalPerformValidateCashPaymentFormat = ValidateCashPaymentFormat.PerformValidateCashPaymentFormat
					constraint (ValidateCashPaymentFormat.OutputErrorNumber not entered)
						"<ValidateCashPaymentFormat.OutputErrorMessage>"
					if (ValidateCashPaymentFormat.OutputCashPaymentFormat.PaymentFormat.AchFile)
						if (PayVendor.BankEntity 	entered)
							constraint (PayVendor.BankAccountType.Checking
							or			PayVendor.BankAccountType.Savings
							or			PayVendor.BankAccountType.IBAN)								
								"BankAccountTypeMustBeCheckingOrSavingsOrIbanForACHPaymentFormat"	
						else
						if (RemitToCode.BankEntity 	entered)
							constraint (RemitToCode.BankAccountType.Checking
							or			RemitToCode.BankAccountType.Savings
							or			RemitToCode.BankAccountType.IBAN)							
								"BankAccountTypeMustBeCheckingOrSavingsOrIbanForACHPaymentFormat"	
			if (CashCode.Currency	!= InvoiceCurrency) 


				LocalExchangeDate											= PayablesInvoice.InvoiceDate
				LocalCashCodePaymentExchange.TransactionAmount				= PaymentAmount.CurrencyAmount
				LocalCashCodePaymentExchange.BaseAmount.ToCurrency			= CashCode.Currency
				LocalEditCashCodeCurrencyRelationships						= LocalCashCodePaymentExchange.BaseAmount.IsRateDefined

				LocalCurrencyTable											= PayablesInvoice.CurrencyTable
				LocalCurrencyCalculationGroup.CurrencyAmount				= LocalCashCodePaymentExchange.BaseAmount.OutputCurrencyAmount
				LocalCurrencyCalculationGroup.FinanceEnterpriseGroup		= GeneralLedgerCompanyRel.FinanceEnterpriseGroup
				LocalCurrencyCalculationGroup.ExchangeDate					= PayablesInvoice.InvoiceDate
				LocalCurrencyCalculationGroup.FromCurrency					= CashCode.Currency
				LocalCurrencyCalculationGroup.FunctionalAmount.ToCurrency	= GeneralLedgerCompanyRel.AccountingEntity.FunctionalCurrency
				LocalEditCashCodeCurrencyRelationships						= LocalCurrencyCalculationGroup.FunctionalAmount.IsRateDefined
				LocalCurrencyCalculationGroup.AlternateAmount.ToCurrency	= GeneralLedgerCompanyRel.AccountingEntity.AlternateCurrency
				LocalEditCashCodeCurrencyRelationships						= LocalCurrencyCalculationGroup.AlternateAmount.IsRateDefined
				LocalCurrencyCalculationGroup.AlternateAmount2.ToCurrency	= GeneralLedgerCompanyRel.AccountingEntity.AlternateCurrency2
				LocalEditCashCodeCurrencyRelationships						= LocalCurrencyCalculationGroup.AlternateAmount2.IsRateDefined
				LocalCurrencyCalculationGroup.AlternateAmount3.ToCurrency	= GeneralLedgerCompanyRel.AccountingEntity.AlternateCurrency3
				LocalEditCashCodeCurrencyRelationships						= LocalCurrencyCalculationGroup.AlternateAmount3.IsRateDefined
				LocalCurrencyCalculationGroup.ReportAmount1.ToCurrency		= GeneralLedgerCompanyRel.FinanceEnterpriseGroup.ReportCurrencyOne
				LocalEditCashCodeCurrencyRelationships						= LocalCurrencyCalculationGroup.ReportAmount1.IsRateDefined
				LocalCurrencyCalculationGroup.ReportAmount2.ToCurrency		= GeneralLedgerCompanyRel.FinanceEnterpriseGroup.ReportCurrencyTwo
				LocalEditCashCodeCurrencyRelationships						= LocalCurrencyCalculationGroup.ReportAmount2.IsRateDefined
				LocalCurrencyCalculationGroup.ReportAmount3.ToCurrency		= GeneralLedgerCompanyRel.FinanceEnterpriseGroup.ReportCurrencyThree
				LocalEditCashCodeCurrencyRelationships						= LocalCurrencyCalculationGroup.ReportAmount3.IsRateDefined
				LocalCurrencyCalculationGroup.ReportAmount4.ToCurrency		= GeneralLedgerCompanyRel.FinanceEnterpriseGroup.ReportCurrencyFour
				LocalEditCashCodeCurrencyRelationships						= LocalCurrencyCalculationGroup.ReportAmount4.IsRateDefined
				LocalCurrencyCalculationGroup.ReportAmount5.ToCurrency		= GeneralLedgerCompanyRel.FinanceEnterpriseGroup.ReportCurrencyFive
				LocalEditCashCodeCurrencyRelationships						= LocalCurrencyCalculationGroup.ReportAmount5.IsRateDefined

			if (CompanyCashCodeRel.Company.AccountingEntity != GeneralLedgerCompanyRel.AccountingEntity) 


				LocalCurrencyTable											= PayablesInvoice.CurrencyTable
				LocalCurrencyCalculationGroup.CurrencyAmount				= PaymentAmount.CurrencyAmount
				LocalCurrencyCalculationGroup.FinanceEnterpriseGroup		= GeneralLedgerCompanyRel.FinanceEnterpriseGroup
				LocalCurrencyCalculationGroup.ExchangeDate					= PayablesInvoice.InvoiceDate
				LocalCurrencyCalculationGroup.FromCurrency					= CashCode.Currency
				LocalCurrencyCalculationGroup.AlternateAmount.ToCurrency	= CompanyCashCodeRel.Company.AccountingEntity.AlternateCurrency
				LocalEditCashCodeCurrencyRelationships						= LocalCurrencyCalculationGroup.AlternateAmount.IsRateDefined
				LocalCurrencyCalculationGroup.AlternateAmount2.ToCurrency	= CompanyCashCodeRel.Company.AccountingEntity.AlternateCurrency2
				LocalEditCashCodeCurrencyRelationships						= LocalCurrencyCalculationGroup.AlternateAmount2.IsRateDefined
				LocalCurrencyCalculationGroup.AlternateAmount3.ToCurrency	= CompanyCashCodeRel.Company.AccountingEntity.AlternateCurrency3
				LocalEditCashCodeCurrencyRelationships						= LocalCurrencyCalculationGroup.AlternateAmount3.IsRateDefined






		CheckDate
			if ((Status.Unreleased			
			or   Status.Released
			or   Status.UnreleasedManualPayment)
			and  CompanySystemClosingControlRel.Control)
				constraint (CheckDate within CompanySystemClosingControlRel.ValidEntryDate)
					"CheckDateOf<CheckDate>NotWithinValidEntryDatesForCompany<Company>;ValidDateRangeIs<CompanySystemClosingControlRel.ValidEntryDate.Begin>-<CompanySystemClosingControlRel.ValidEntryDate.End>"
			if (Status.Unreleased)
				if (PayablesInvoice.MultiplePayablesInvoicePaymentRelExists)
					cannot be changed
						"UsePmtScheduleForChanges;MultiplePmtsExist"              

				if (PayablesInvoice.InvoiceType.CreditMemo)
					constraint (CheckDate not entered)
						"ManualPaymentNotAllowedWithCreditMemo"	    

			if (TransactionNumber entered
			or  PaymentAmount.CurrencyAmount entered)
				constraint (CheckDate entered)
					"MustEnterPaymentNumber,Date,AndAmount"	     

			if (CheckDate changed)
				initialize DiscountAmount.ExchangeDate
				initialize DiscountAmount.FunctionalAmount
				initialize DiscountAmount.AlternateAmount
				initialize DiscountAmount.AlternateAmount2
				initialize DiscountAmount.AlternateAmount3
				initialize DiscountAmount.ToFunctionalAmount
				initialize DiscountAmount.ToAlternateAmount
				initialize DiscountAmount.ToAlternateAmount2
				initialize DiscountAmount.ToAlternateAmount3
				initialize DiscountAmount.ProjectAmount
				initialize DiscountAmount.ReportAmount1
				initialize DiscountAmount.ReportAmount2
				initialize DiscountAmount.ReportAmount3
				initialize DiscountAmount.ReportAmount4
				initialize DiscountAmount.ReportAmount5
				initialize NetPaymentAmount.ExchangeDate
				initialize NetPaymentAmount.FunctionalAmount
				initialize NetPaymentAmount.AlternateAmount
				initialize NetPaymentAmount.AlternateAmount2
				initialize NetPaymentAmount.AlternateAmount3
				initialize NetPaymentAmount.ToFunctionalAmount
				initialize NetPaymentAmount.ToAlternateAmount
				initialize NetPaymentAmount.ToAlternateAmount2
				initialize NetPaymentAmount.ToAlternateAmount3
				initialize NetPaymentAmount.ProjectAmount
				initialize NetPaymentAmount.ReportAmount1
				initialize NetPaymentAmount.ReportAmount2
				initialize NetPaymentAmount.ReportAmount3
				initialize NetPaymentAmount.ReportAmount4
				initialize NetPaymentAmount.ReportAmount5

		NumberOfDecimals
			default to PayablesInvoice.NumberOfDecimals

		BaseNumberOfDecimals
			default to PayablesInvoice.BaseNumberOfDecimals

		BankNumberOfDecimals
			default to CashCode.Currency.NumberOfDecimals

		FATCAIncomeCode
			if (Vendor.FATCAIncomeCode entered)
				if ((GeneralLedgerCompanyRel.AccountingEntity.AddressCode.PostalAddress.Country = "US"
				or   GeneralLedgerCompanyRel.AccountingEntity.AddressCode.PostalAddress.Country = "CA"
				or   GeneralLedgerCompanyRel.AccountingEntity.AddressCode.PostalAddress.Country = blank)
				and  Vendor.VendorAddress.Country != "US"
				and  Vendor.VendorAddress.Country != "CA"
				and  Vendor.VendorAddress.Country != blank
				and  Vendor.W8Verified.No)
					default to Vendor.FATCAIncomeCode			

				if (FATCATransactionIncomeAmount not entered		
				and Vendor.FATCAPercentage			 entered)
					FATCATransactionIncomeAmount = (PaymentAmount.CurrencyAmount * Vendor.FATCAPercentage)
					FATCABaseIncomeAmount 		 = (PaymentAmount.FunctionalAmount.EnteredCurrencyAmount * Vendor.FATCAPercentage)

			if (IncomeCode entered)
				constraint (FATCAIncomeCode != IncomeCode)
					"InvoiceIncomeCodeCannotEqualFATCAIncomeCode"	

		IncomeWithholdingCode
			if (Status.Unreleased)
				default to PayablesInvoice.IncomeWithholdingCode


		WithholdingAmount
			BaseWithholdingAmount = ((WithholdingAmount / PaymentAmount.CurrencyAmount) * PaymentAmount.FunctionalAmount.EnteredCurrencyAmount)


		PaymentAmount
			if (TransactionIDNumber entered)
				constraint (PaymentAmount.CurrencyAmount not changed)
					"UnapplyPaymentBeforeChangingAmount"	   

			if (PaymentAmount.CurrencyAmount changed)		
				constraint (CashRequirementsResult !entered)
					"CannotChangePaymentAmount;CashRequirementsInProcess"
				constraint (!PayablesInvoice.IsRecurringInvoice)         
					"CannotHaveSplitPaymentsOnARecurringInvoice"
			if (Status.Released)
				if (PaymentAmount.CurrencyAmount changed)
					constraint (PayablesInvoice.RetainageAmount = 0)
						"CannotChangePaymentAmountForARetainageInvoice"
					if (RevaluedBaseAmount.FunctionalAmount.EnteredCurrencyAmount not = PaymentAmount.FunctionalAmount.EnteredCurrencyAmount
					and !TransientBypassRevalueEdit)
						constraint (!DiscountAmount.CurrencyAmount changed)
							"InvoiceHasBeenRevalued;CannotChange"			      

			if ((CheckDate entered
			or   TransactionNumber entered)
			and  Status.Unreleased)					
				constraint (PaymentAmount.CurrencyAmount entered)
					"MustEnterPaymentNumber,Date,AndAmount"	     

			if (PayablesInvoice.InvoiceType.CreditMemo
			or  PayablesInvoice.InvoiceType.PrepaymentCredit)
				constraint (PaymentAmount.CurrencyAmount <= 0)
					"InvalidSignOnPaymentAmountOf<PaymentAmount.CurrencyAmount>ForCreditInvoiceType"	    
				constraint (PaymentAmount.CurrencyAmount >= PayablesInvoice.InvoiceAmount.CurrencyAmount)
					"PaymentAmount<PaymentAmount.CurrencyAmount>GreaterThanInvoiceAmount<PayablesInvoice.InvoiceAmount.CurrencyAmount>"		

			if (PayablesInvoice.InvoiceType.Invoice
			or  PayablesInvoice.InvoiceType.DebitMemo
			or  PayablesInvoice.InvoiceType.Prepayment
			or  PayablesInvoice.InvoiceType.MatchPrepayment)
				constraint (PaymentAmount.CurrencyAmount >= 0)
					"InvalidSignOnInvoiceAmountOf<PaymentAmount.CurrencyAmount>ForInvoiceType"		       
				if (!TransientRecurrUpdateSwitch)
					constraint (PaymentAmount.CurrencyAmount <= PayablesInvoice.InvoiceAmount.CurrencyAmount)
						"PaymentAmount<PaymentAmount.CurrencyAmount>GreaterThanInvoiceAmount<PayablesInvoice.InvoiceAmount.CurrencyAmount>"	     

			if (PayablesBillOfExchangeRel exists)
				constraint (PaymentAmount.CurrencyAmount = PayablesBillOfExchangeRel.DraftAmount)
					"B\O\EAmountMustEqualPaymentAmount"		

			if (PaymentAmount.CurrencyAmount changed)
				TransientPaymentAmount								= PaymentAmount.CurrencyAmount
				initialize PaymentAmount
				PaymentAmount.ExchangeDate							= PayablesInvoice.InvoiceAmount.ExchangeDate 
				PaymentAmount.FunctionalAmount.ToCurrency 			= PayablesInvoice.Company.Currency
				PaymentAmount.FunctionalAmount.EnteredCurrencyRate	= PayablesInvoice.InvoiceAmount.FunctionalAmount.EnteredCurrencyRate
				PaymentAmount.AlternateAmount.EnteredCurrencyRate	= PayablesInvoice.InvoiceAmount.AlternateAmount.EnteredCurrencyRate		
				PaymentAmount.AlternateAmount2.EnteredCurrencyRate	= PayablesInvoice.InvoiceAmount.AlternateAmount2.EnteredCurrencyRate	
				PaymentAmount.AlternateAmount3.EnteredCurrencyRate	= PayablesInvoice.InvoiceAmount.AlternateAmount3.EnteredCurrencyRate	
				PaymentAmount.ProjectAmount.EnteredCurrencyRate		= PayablesInvoice.InvoiceAmount.ProjectAmount.EnteredCurrencyRate		
				PaymentAmount.ReportAmount1.EnteredCurrencyRate		= PayablesInvoice.InvoiceAmount.ReportAmount1.EnteredCurrencyRate		
				PaymentAmount.ReportAmount2.EnteredCurrencyRate		= PayablesInvoice.InvoiceAmount.ReportAmount2.EnteredCurrencyRate		
				PaymentAmount.ReportAmount3.EnteredCurrencyRate		= PayablesInvoice.InvoiceAmount.ReportAmount3.EnteredCurrencyRate		
				PaymentAmount.ReportAmount4.EnteredCurrencyRate		= PayablesInvoice.InvoiceAmount.ReportAmount4.EnteredCurrencyRate		
				PaymentAmount.ReportAmount5.EnteredCurrencyRate		= PayablesInvoice.InvoiceAmount.ReportAmount5.EnteredCurrencyRate		
				PaymentAmount.CurrencyAmount						= TransientPaymentAmount
				initialize RevaluedBaseAmount

			if (RetainagePayment 
			and initiating action = "Update")
				cannot be changed 
					"CannotChangeAmountOnRetainagePayment"




		PaymentPriority				
			default to Vendor.PaymentPriority
			default to Vendor.VendorClass.PaymentPriority






		ReportableIncomeAmount
			if ((PayablesInvoice.InvoiceType.DebitMemo
			or   PayablesInvoice.InvoiceType.Invoice)
			and  ReportableIncomeAmount < 0)		
				ReportableIncomeAmount = ReportableIncomeAmount * -1		
				constraint (ReportableIncomeAmount >= 0)
					"ThisInvoiceTypeCannotHaveANegativeAmount"                
			if (PayablesInvoice.IsCreditInvoice
			and ReportableIncomeAmount > 0)
				ReportableIncomeAmount = ReportableIncomeAmount * -1
			if (PayablesInvoice.InvoiceAmount.CurrencyAmount > 0)
				constraint (ReportableIncomeAmount >= 0)
					"InvoiceAmount<PayablesInvoice.InvoiceAmount.CurrencyAmount>AndIncomeAmount<ReportableIncomeAmount>MustHaveSameSign"    
			if (PayablesInvoice.InvoiceAmount.CurrencyAmount < 0)
				constraint (ReportableIncomeAmount <= 0)
					"InvoiceAmount<PayablesInvoice.InvoiceAmount.CurrencyAmount>AndIncomeAmount<ReportableIncomeAmount>MustHaveSameSign"    
			if (ReportableIncomeAmount > PayablesInvoice.InvoiceAmount.CurrencyAmount)
				constraint (PayablesInvoice.IsCreditInvoice)
					"IncomeAmount<ReportableIncomeAmount>CannotExceed<PayablesInvoice.InvoiceType>Amount<PayablesInvoice.InvoiceAmount.CurrencyAmount>"    
			if (ReportableIncomeAmount < PayablesInvoice.InvoiceAmount.CurrencyAmount)
				constraint (!PayablesInvoice.IsCreditInvoice)
					"IncomeAmount<ReportableIncomeAmount>CannotBeGreaterThan<PayablesInvoice.InvoiceType>Amount<PayablesInvoice.InvoiceAmount.CurrencyAmount>"    
			if (PayablesInvoice.InvoiceType.Invoice
			or  PayablesInvoice.InvoiceType.DebitMemo
			or  PayablesInvoice.InvoiceType.Prepayment
			or  PayablesInvoice.InvoiceType.MatchPrepayment)
				constraint (!ReportableIncomeAmount < 0)
				 	"IncomeAmount<ReportableIncomeAmount>MustBeSameSignAsPaymentAmount<PaymentAmount.CurrencyAmount>"		 
				if (ReportableIncomeAmount > PaymentAmount.CurrencyAmount)		
					ReportableIncomeAmount = PaymentAmount.CurrencyAmount		
				constraint (ReportableIncomeAmount <= PaymentAmount.CurrencyAmount)
				 	"ReportableAmount<ReportableIncomeAmount>CannotBeGreaterThanPaymentAmount<PaymentAmount.CurrencyAmount>"  
			if (PayablesInvoice.IsCreditInvoice)
				constraint (!ReportableIncomeAmount > 0)
				 	"IncomeAmount<ReportableIncomeAmount>MustBeSameSignAsPaymentAmount<PaymentAmount.CurrencyAmount>"		  
				if (ReportableIncomeAmount < PaymentAmount.CurrencyAmount)		
					ReportableIncomeAmount = PaymentAmount.CurrencyAmount		
				constraint (ReportableIncomeAmount >= PaymentAmount.CurrencyAmount)
					"ReportableAmount<ReportableIncomeAmount>CannotBeLessThanPaymentAmount<PaymentAmount.CurrencyAmount>"	



		RevaluedBaseAmount
			if (RevaluedBaseAmount.CurrencyAmount !entered)
				RevaluedBaseAmount	= PaymentAmount
			if (RevaluedBaseAmount.CurrencyAmount entered
			and RevaluedBaseAmount.ExchangeDate not entered)
				if (LastCurrencyRevaluationDate entered)
					RevaluedBaseAmount.ExchangeDate = LastCurrencyRevaluationDate
				else
					RevaluedBaseAmount.ExchangeDate							= PayablesInvoice.InvoiceAmount.ExchangeDate 
					RevaluedBaseAmount.FunctionalAmount.EnteredCurrencyRate	= PayablesInvoice.InvoiceAmount.FunctionalAmount.EnteredCurrencyRate

		DiscountAmount
			if (PayablesInvoice.InvoiceType.CreditMemo
			or  PayablesInvoice.InvoiceType.PrepaymentCredit)
				constraint (DiscountAmount.CurrencyAmount <= 0)
					"InvalidSignForInvoiceType"	    
				constraint (DiscountAmount.CurrencyAmount >= PaymentAmount.CurrencyAmount)
					"DiscountAmount<DiscountAmount.CurrencyAmount>CannotBeGreaterThanPaymentAmount<PaymentAmount.CurrencyAmount>"		

			if (DiscountAmount.CurrencyAmount changed)		
				constraint (CashRequirementsResult !entered)
					"CannotChangeDiscountAmount;CashRequirementsInProcess"

			if (PayablesInvoice.InvoiceType.Invoice
			or  PayablesInvoice.InvoiceType.DebitMemo
			or  PayablesInvoice.InvoiceType.Prepayment
			or  PayablesInvoice.InvoiceType.MatchPrepayment)
				constraint (DiscountAmount.CurrencyAmount >= 0)
					"InvalidSignForInvoiceType:InvoiceType=<PayablesInvoice.InvoiceType>:DiscountAmount=<DiscountAmount.CurrencyAmount>"	      
				if (DerivedSplitInvoice)
					constraint (DiscountAmount.CurrencyAmount <= PayablesInvoice.InvoiceAmount.CurrencyAmount)
						"DiscountAmount<DiscountAmount.CurrencyAmount>CannotBeGreaterThanInvoiceAmount<PayablesInvoice.InvoiceAmount.CurrencyAmount>"
				else
					constraint (DiscountAmount.CurrencyAmount <= PaymentAmount.CurrencyAmount)
						"DiscountAmount<DiscountAmount.CurrencyAmount>CannotBeGreaterThanPaymentAmount<PaymentAmount.CurrencyAmount>"		

			if (DiscountAmount.CurrencyAmount not entered
			and TransientAllowableAmount entered
			and DiscountPercent entered)
				DiscountAmount.CurrencyAmount 	= TransientAllowableAmount * DiscountPercent
				if (CheckDate entered)
					DiscountAmount.ExchangeDate = CheckDate
				else
					DiscountAmount.ExchangeDate							= PayablesInvoice.InvoiceAmount.ExchangeDate 
					DiscountAmount.FunctionalAmount.EnteredCurrencyRate	= PayablesInvoice.InvoiceAmount.FunctionalAmount.EnteredCurrencyRate

			if (DiscountAmount.CurrencyAmount entered)
				if (TransientAllowableAmount entered)
					if (DiscountPercent entered
					and invoking action != "PayablesInvoice.ChangeDiscount")     
						LocalDiscountAmt = TransientAllowableAmount * DiscountPercent  
						LocalCurrencyAmount = LocalDiscountAmt		
						constraint (RoundedCurrencyAmount = RoundedDiscountAmount)				
							"DiscountAmount<DiscountAmount.CurrencyAmount>DoesNotEqualAllowableAmount<TransientAllowableAmount>TimesRate<DiscountPercent>-\DeleteDiscountAmountAndSaveToRecalculate"
					else
						DiscountPercent = DiscountAmount.CurrencyAmount / TransientAllowableAmount

				if (PayablesInvoice.InvoiceType.PrepaymentCredit)
					initialize DiscountAmount
					initialize DiscountDate
					initialize DiscountPercent
					initialize TransientAllowableAmount
				else
					constraint (!PayablesInvoice.InvoiceType.PrepaymentCredit)
						"CannotAddDiscountToASystemGeneratedCreditMemo"	   

			if (DiscountDate entered
			and PayablesInvoice.TermsCode not entered)
				required
					"DiscountAmountRequiredIfDiscountDateIsEntered"


			if (DiscountAmount.CurrencyAmount changed
			and !TransientCurrencyRefresh
			and action != "MatchRelease")
				constraint (!MatchDiscountTaken.Yes)
					"CannotChangeDiscountAmount,MatchDiscountTaken"	   

			if (DiscountAmount.ExchangeDate not entered)
				if (CheckDate entered)
					DiscountAmount.ExchangeDate = CheckDate
				else
					DiscountAmount.ExchangeDate							= PayablesInvoice.InvoiceAmount.ExchangeDate 
					DiscountAmount.FunctionalAmount.EnteredCurrencyRate	= PayablesInvoice.InvoiceAmount.FunctionalAmount.EnteredCurrencyRate

			DiscountAmount.FunctionalAmount.ToCurrency			= GeneralLedgerCompanyRel.AccountingEntity.FunctionalCurrency
			initialize DiscountAmount.FunctionalAmount.EnteredCurrencyAmount

			if (DiscountPercent entered
			and DiscountAmount.CurrencyAmount not entered)
				required
					"Discount_\Amount,Or_\AllowableAnd_\RateRequired"	 


		DiscountPercent
			if  (TransientAllowableAmount 				entered
			and  DiscountAmount.CurrencyAmount 		not entered
			and  PayablesInvoice.TermsCode 			not entered
			and !TransientCurrencyRefresh)
				required
					"Discount_\Amount,Or_\AllowableAnd_\RateRequired"	 

		TransientAllowableAmount
			if (DerivedSplitInvoice)
				if (PayablesInvoice.MatchProcessType.Expense)		
					if (PayablesInvoice.InvoiceType.CreditMemo
					or  PayablesInvoice.InvoiceType.PrepaymentCredit)
						constraint (TransientAllowableAmount >= PayablesInvoice.InvoiceAmount.CurrencyAmount)
							"AllowableAmount<TransientAllowableAmount>CannotBeGreaterThanInvoiceAmount<PayablesInvoice.InvoiceAmount.CurrencyAmount>"
					else
						constraint (TransientAllowableAmount <= PayablesInvoice.InvoiceAmount.CurrencyAmount)
							"AllowableAmount<TransientAllowableAmount>CannotBeGreaterThanInvoiceAmount<PayablesInvoice.InvoiceAmount.CurrencyAmount>"
				else
					if (PayablesInvoice.InvoiceType.CreditMemo
					or  PayablesInvoice.InvoiceType.PrepaymentCredit)
						constraint (TransientAllowableAmount >= PayablesInvoice.CalculatedAllowableAmount)
							"AllowableAmount<TransientAllowableAmount>CannotBeGreaterThanInvoiceAmount<PayablesInvoice.CalculatedAllowableAmount>"
					else
						constraint (TransientAllowableAmount <= PayablesInvoice.CalculatedAllowableAmount)
							"AllowableAmount<TransientAllowableAmount>CannotBeGreaterThanInvoiceAmount<PayablesInvoice.CalculatedAllowableAmount>"
			else
				if (PayablesInvoice.MatchProcessType.Expense)		
					if (PayablesInvoice.InvoiceType.CreditMemo				
					or  PayablesInvoice.InvoiceType.PrepaymentCredit)		
						constraint (TransientAllowableAmount >= PaymentAmount.CurrencyAmount)		
							"AllowableAmount<TransientAllowableAmount>CannotBeGreaterThanPaymentAmount<PaymentAmount.CurrencyAmount>"		
					else
						constraint (TransientAllowableAmount <= PaymentAmount.CurrencyAmount)
							"AllowableAmount<TransientAllowableAmount>CannotBeGreaterThanPaymentAmount<PaymentAmount.CurrencyAmount>"
				else
					if (PayablesInvoice.InvoiceType.CreditMemo
					or  PayablesInvoice.InvoiceType.PrepaymentCredit)
						constraint (TransientAllowableAmount >= PayablesInvoice.CalculatedAllowableAmount)		
							"AllowableAmount<TransientAllowableAmount>CannotBeGreaterThanCalculatedPaymentAmount<PayablesInvoice.CalculatedAllowableAmount>"
					else
						constraint (TransientAllowableAmount <= PayablesInvoice.CalculatedAllowableAmount)		
							"AllowableAmount<TransientAllowableAmount>CannotBeGreaterThanCalculatedPaymentAmount<PayablesInvoice.CalculatedAllowableAmount>"

		DiscountDate
			if (Status.Unreleased)
				if (DiscountDate entered
				and DiscountDate < PayablesInvoice.InvoiceDate)
					DiscountDate = PayablesInvoice.InvoiceDate	
				constraint (!DiscountDate > DueDate)
					"DiscountDateCannotBeGreaterThanDueDate"	       

			if (Status.Released)
				if (DiscountDate entered)
					constraint (DiscountDate >= PayablesInvoice.InvoiceDate)
						"DiscountDateLessThanInvoiceDate" 	      
				if (DiscountDate > DueDate)
					constraint (PayablesInvoice.FlexTerms
					and Vendor.FloatDays > 0)
						"DiscountDateCannotBeGreaterThanDueDate"	       

			if ((DiscountAmount.CurrencyAmount entered
			or   TransientAllowableAmount entered)
			and  DiscountPercent != 0					
			and !TransientCurrencyRefresh)
				required
					"DiscountDateRequired"	 

		DiscountCode
			required
			default to PayablesInvoice.DiscountCode
			default to PayablesInvoice.VendorCompanyDefaultRel.DiscountCode
			default to Vendor.DiscountCode
			default to ProcessLevel.DiscountCode
			default to Company.DiscountCode
			if (DiscountCode changed)						
            	if (Status.Unreleased
                and !PayablesInvoice.MultiplePayablesInvoicePaymentRelExists)
                    invoke FastUpdate PayablesInvoice
                        invoked.DiscountCode = DiscountCode
                else
                    constraint (PayablesDiscountCodeDetailRel exists)
                        "PayablesDiscountCodeDetailDoesNotExist"

		DiscountAccount
			default to PayablesDiscountCodeDetailRel.DiscountAccount
				default individual fields

		DueDate
			if (RetainagePayment)
				if (PayablesInvoice.MatchProcessType.ServiceContract)
					if  (PayablesInvoice.ServiceContract.ExpirationDate entered)
						DueDate		= PayablesInvoice.ServiceContract.ExpirationDate + PayablesInvoice.ServiceContract.RetainageDueDays as days
				else
				if (PayablesInvoice.FirstPurchaseOrder.RetainageDueDate entered)
					DueDate = PayablesInvoice.FirstPurchaseOrder.RetainageDueDate

			default to PayablesInvoice.DueDate
			if (!TransientCurrencyRefresh
			and !PayablesInvoice.CreatedBySupplier)
				required
			if (!Status.Unreleased
			and !Status.Released)
				cannot be changed
					"DueDateCannotBeChanged;PaymentStatusIs<Status>"
			if  (PayablesInvoice.Status.PendingApproval)					
				cannot be changed
					"DueDateCannotBeChanged;InvoiceStatusIs<PayablesInvoice.Status>"
			constraint (DueDate >= PayablesInvoice.InvoiceDate)
				"DueDate<DueDate>CannotBeLessThanInvoiceDate<PayablesInvoice.InvoiceDate>"	 

		IncomeCode
			default to PayablesInvoice.IncomeCode
			if (ReportableIncomeAmount entered)
				required
					"IncomeCodeRequiredWithReportableIncomeAmount"		

		PayImmediately
			if (ActionType.CreateType)
				if (OverridePayImmediately entered)		
					if (OverridePayImmediately.Yes)
						PayImmediately = true
					else
						PayImmediately = false
				else
					if (RemitToCode entered)
						default to RemitToCode.PayImmediately
					else
						default to Vendor.PayImmediately

			if (!Status.Unreleased
			and !Status.Released)
				cannot be changed
					"PayImmediateFlagCannotBeChanged;PaymentStatusIs<Status>"






		PayVendor
			force default to PayablesInvoice.PayVendor
			if (!Status.Unreleased
			and !Status.Released)
				cannot be changed
					"PayVendorCannotBeChanged;PaymentStatusIs<Status>"

		TransactionNumber

			if (Status.Unreleased)
				if (PayablesInvoice.MultiplePayablesInvoicePaymentRelExists)
					cannot be changed
						"UsePmtScheduleForChanges;MultiplePmtsExist"              

				if (PayablesInvoice.InvoiceType.CreditMemo)
					constraint (TransactionNumber not entered)
						"ManualPaymentNotAllowedWithCreditMemo"	       

			if (CheckDate entered
			or  PaymentAmount.CurrencyAmount entered)
				constraint (TransactionNumber entered)
					"MustEnterPaymentNumber,Date,AndAmount"	     

			if (TransactionNumber != old TransactionNumber	
			and old TransactionNumber entered)
				constraint (Status.Unreleased)
					"CannotChangePaymentNumberAfterRelease-DeleteAndRe-/Add"
				if (CashLedgerPayablesPaymentRel exists)
					constraint (CashLedgerPayablesPaymentRel.CheckType = "M")
						"PaymentNumberAlreadyUsed"	       
					constraint (CashLedgerPayablesPaymentRel.Status.ReservedForManualPayment)
						"ManualPaymentNumberAlreadyAssigned"	   
				else
					if (CashLedgerPayablesPaymentRel2 exists)
						constraint (BankTransactionCode.ManualPaymentNumberReservation)
							"ManualPaymentNumberNotReserved" 	 


		SecondaryWithholdingCode1
			if (Status.Unreleased)
				default to PayablesInvoice.VendorCompanyDefaultRel.SecondaryWithholdingCode1
				default to Vendor.SecondaryWithholdingCode1
				default to PayablesInvoice.ProcessLevel.SecondaryWithholdingCode1
				default to Company.SecondaryWithholdingCode1

		SecondaryWithholdingCode2
			if (Status.Unreleased)
				default to PayablesInvoice.VendorCompanyDefaultRel.SecondaryWithholdingCode2
				default to Vendor.SecondaryWithholdingCode2
				default to PayablesInvoice.ProcessLevel.SecondaryWithholdingCode2
				default to Company.SecondaryWithholdingCode2

		SecondaryWithholdingCode3
			if (Status.Unreleased)
				default to PayablesInvoice.VendorCompanyDefaultRel.SecondaryWithholdingCode3
				default to Vendor.SecondaryWithholdingCode3
				default to PayablesInvoice.ProcessLevel.SecondaryWithholdingCode3
				default to Company.SecondaryWithholdingCode3

		Enclosure
			if (OverrideEnclosure entered)		
				if (OverrideEnclosure.Yes)
					Enclosure = true
				else
					Enclosure = false
			else
				if (action type.Create)
					if (Vendor.Enclosure)
						default to Vendor.Enclosure
					else
						default to Vendor.VendorClass.Enclosure
			if (!Status.Unreleased
			and !Status.Released)
				cannot be changed
					"EnclosureFlagCannotBeChanged;PaymentStatusIs<Status>"

		InvoiceGroup
			if (InvoiceGroup changed
			and InvoiceGroup != PayablesInvoice.InvoiceGroup
			and PayablesInvoice.Status.Unreleased
			and !DerivedSplitInvoice
			and !PayablesInvoice.TransientChangingVendor)		
				invoke FastUpdate PayablesInvoice
					invoked.InvoiceGroup = InvoiceGroup
			if (!Status.Unreleased
			and !Status.Released)
				cannot be changed






		NetPaymentAmount
			if (CheckDate entered)
				NetPaymentAmount.ExchangeDate 					= CheckDate
				NetPaymentAmount.FunctionalAmount.ToCurrency	= PayablesInvoice.Company.Currency 
			if (Status.Unreleased)
				if (PayablesInvoice.MultiplePayablesInvoicePaymentRelExists
				and old NetPaymentAmount.CurrencyAmount entered)
					constraint (NetPaymentAmount.CurrencyAmount not changed)
						"UsePmtScheduleForChanges;MultiplePmtsExist"		   

				if (PayablesInvoice.InvoiceType.CreditMemo)
					constraint (NetPaymentAmount.CurrencyAmount not entered)
						"ManualPaymentNotAllowedWithCreditMemo"	   


		SeparatePayment
			if (PayablesInvoice.InvoiceType.CreditMemo
			or  PayablesInvoice.InvoiceType.PrepaymentCredit)
				constraint (!SeparatePayment)
					"CannotFlagCreditForSeparatePayment"
			else
				if (PayablesInvoice.HasBankInstructions)		
					SeparatePayment = true
				else
					if  (ActionType.CreateType
					and  Status.Unreleased)
						if (OverrideSeparatePayment entered)		
							if (OverrideSeparatePayment.Yes)
								SeparatePayment = true
							else
								SeparatePayment = false
						else
							if (RemitToCode entered)
								default to RemitToCode.SeparatePayment
							else
								default to Vendor.SeparatePayment

			if (!Status.Unreleased
			and !Status.Released)
				cannot be changed
					"SeparatePaymentFlagCannotBeChanged;PaymentStatusIs<Status>"
			if (IsAppliedToCredit)
				constraint (!SeparatePayment)
					"InvoiceIsAppliedToACredit;CannotFlagForSeparatePayment"
			if (IsAppliedToInvoice)
				constraint (!SeparatePayment)
					"CreditIsAppliedToAnInvoice;CannotFlagForSeparatePayment"
			if (PayablesInvoice.HasBankInstructions)		
				constraint (SeparatePayment)
					"InvoiceHasBankInstructions;MustFlagForSeparatePayment"

			if (SeparatePayment changed)
				if (SeparatePayment)
					LocalAlphaPayablesCompany	= Company
					LocalAlphaPayablesInvoice	= PayablesInvoice
					LocalAlphaPaymentSequence	= PayablesInvoicePayment.PaymentSequence
					SeparatePaymentSequence 	= LocalAlphaPayablesCompany + LocalAlphaPayablesInvoice + LocalAlphaPaymentSequence
				else
					initialize SeparatePaymentSequence

		SeparatePaymentSequence
			if (SeparatePayment)
				LocalAlphaPayablesCompany	= Company
				LocalAlphaPayablesInvoice	= PayablesInvoice
				LocalAlphaPaymentSequence	= PayablesInvoicePayment.PaymentSequence
				SeparatePaymentSequence 	= LocalAlphaPayablesCompany + LocalAlphaPayablesInvoice + LocalAlphaPaymentSequence
			else
				initialize SeparatePaymentSequence

		VendorPaymentCurrency
			default to PayablesInvoice.VendorPaymentCurrency
			if (Vendor.DefaultVendorPaymentCurrency.Invoice)		
				default to InvoiceCurrency
			else
				default to CashCode.Currency
			if (!Status.Unreleased
			and !Status.Released)
				cannot be changed
					"VendorPaymentCurrencyCannotBeChanged;PaymentIs<Status>"
			if (VendorPaymentCurrency changed
			and !PayablesInvoice.MultiplePayablesInvoicePaymentRelExists)
				invoke FastUpdate PayablesInvoice
					invoked.VendorPaymentCurrency = VendorPaymentCurrency

		VendorPaymentAmount
			if (VendorPaymentCurrency	!= InvoiceCurrency
			and VendorPaymentCurrency	!= CashCode.Currency)
				default to PayablesInvoice.VendorPaymentAmount
				required
					"VendorPaymentAmountRequiredWhenPaymentCurrencyNotInvoiceOrCashCodeCurrency"
			if (VendorPaymentCurrency	= InvoiceCurrency)
				constraint (VendorPaymentAmount	!entered)
					"VendorPaymentAmountCannotBeEnteredIfVendorPaymentCurrencyIsInvoiceCurrency;AmountWillBeCalculatedWhenPaid"
			if (!Status.Unreleased
			and !Status.Released)
				cannot be changed
					"VendorPaymentAmountCannotBeChanged;PaymentIs<Status>"
			if (VendorPaymentAmount changed
			and !PayablesInvoice.MultiplePayablesInvoicePaymentRelExists)
				invoke FastUpdate PayablesInvoice
					invoked.VendorPaymentAmount		= VendorPaymentAmount



	Rule Blocks
		SetCurrencyContext		
			PaymentAmount.ExchangeDate							= PayablesInvoice.InvoiceAmount.ExchangeDate 
			PaymentAmount.FunctionalAmount.EnteredCurrencyRate	= PayablesInvoice.InvoiceAmount.FunctionalAmount.EnteredCurrencyRate
			PaymentAmount.AlternateAmount.EnteredCurrencyRate	= PayablesInvoice.InvoiceAmount.AlternateAmount.EnteredCurrencyRate		
			PaymentAmount.AlternateAmount2.EnteredCurrencyRate	= PayablesInvoice.InvoiceAmount.AlternateAmount2.EnteredCurrencyRate	
			PaymentAmount.AlternateAmount3.EnteredCurrencyRate	= PayablesInvoice.InvoiceAmount.AlternateAmount3.EnteredCurrencyRate	
			PaymentAmount.ProjectAmount.EnteredCurrencyRate		= PayablesInvoice.InvoiceAmount.ProjectAmount.EnteredCurrencyRate		
			PaymentAmount.ReportAmount1.EnteredCurrencyRate		= PayablesInvoice.InvoiceAmount.ReportAmount1.EnteredCurrencyRate		
			PaymentAmount.ReportAmount2.EnteredCurrencyRate		= PayablesInvoice.InvoiceAmount.ReportAmount2.EnteredCurrencyRate		
			PaymentAmount.ReportAmount3.EnteredCurrencyRate		= PayablesInvoice.InvoiceAmount.ReportAmount3.EnteredCurrencyRate		
			PaymentAmount.ReportAmount4.EnteredCurrencyRate		= PayablesInvoice.InvoiceAmount.ReportAmount4.EnteredCurrencyRate		
			PaymentAmount.ReportAmount5.EnteredCurrencyRate		= PayablesInvoice.InvoiceAmount.ReportAmount5.EnteredCurrencyRate		
			if (RevaluedBaseAmount.ExchangeDate not entered)
				if (LastCurrencyRevaluationDate entered)
					RevaluedBaseAmount.ExchangeDate = LastCurrencyRevaluationDate
				else
					RevaluedBaseAmount.ExchangeDate							= PayablesInvoice.InvoiceAmount.ExchangeDate 
					RevaluedBaseAmount.FunctionalAmount.EnteredCurrencyRate	= PayablesInvoice.InvoiceAmount.FunctionalAmount.EnteredCurrencyRate
					RevaluedBaseAmount.AlternateAmount.EnteredCurrencyRate	= PayablesInvoice.InvoiceAmount.AlternateAmount.EnteredCurrencyRate		
					RevaluedBaseAmount.AlternateAmount2.EnteredCurrencyRate	= PayablesInvoice.InvoiceAmount.AlternateAmount2.EnteredCurrencyRate	
					RevaluedBaseAmount.AlternateAmount3.EnteredCurrencyRate	= PayablesInvoice.InvoiceAmount.AlternateAmount3.EnteredCurrencyRate	
					RevaluedBaseAmount.ProjectAmount.EnteredCurrencyRate	= PayablesInvoice.InvoiceAmount.ProjectAmount.EnteredCurrencyRate		
					RevaluedBaseAmount.ReportAmount1.EnteredCurrencyRate	= PayablesInvoice.InvoiceAmount.ReportAmount1.EnteredCurrencyRate		
					RevaluedBaseAmount.ReportAmount2.EnteredCurrencyRate	= PayablesInvoice.InvoiceAmount.ReportAmount2.EnteredCurrencyRate		
					RevaluedBaseAmount.ReportAmount3.EnteredCurrencyRate	= PayablesInvoice.InvoiceAmount.ReportAmount3.EnteredCurrencyRate		
					RevaluedBaseAmount.ReportAmount4.EnteredCurrencyRate	= PayablesInvoice.InvoiceAmount.ReportAmount4.EnteredCurrencyRate		
					RevaluedBaseAmount.ReportAmount5.EnteredCurrencyRate	= PayablesInvoice.InvoiceAmount.ReportAmount5.EnteredCurrencyRate		
			if (DiscountAmount.ExchangeDate not entered)
				if (CheckDate entered)
					DiscountAmount.ExchangeDate 		= CheckDate
				else
					DiscountAmount.ExchangeDate							= PayablesInvoice.InvoiceAmount.ExchangeDate 
					DiscountAmount.FunctionalAmount.EnteredCurrencyRate	= PayablesInvoice.InvoiceAmount.FunctionalAmount.EnteredCurrencyRate
					DiscountAmount.AlternateAmount.EnteredCurrencyRate	= PayablesInvoice.InvoiceAmount.AlternateAmount.EnteredCurrencyRate		
					DiscountAmount.AlternateAmount2.EnteredCurrencyRate	= PayablesInvoice.InvoiceAmount.AlternateAmount2.EnteredCurrencyRate	
					DiscountAmount.AlternateAmount3.EnteredCurrencyRate	= PayablesInvoice.InvoiceAmount.AlternateAmount3.EnteredCurrencyRate	
					DiscountAmount.ProjectAmount.EnteredCurrencyRate	= PayablesInvoice.InvoiceAmount.ProjectAmount.EnteredCurrencyRate		
					DiscountAmount.ReportAmount1.EnteredCurrencyRate	= PayablesInvoice.InvoiceAmount.ReportAmount1.EnteredCurrencyRate		
					DiscountAmount.ReportAmount2.EnteredCurrencyRate	= PayablesInvoice.InvoiceAmount.ReportAmount2.EnteredCurrencyRate		
					DiscountAmount.ReportAmount3.EnteredCurrencyRate	= PayablesInvoice.InvoiceAmount.ReportAmount3.EnteredCurrencyRate		
					DiscountAmount.ReportAmount4.EnteredCurrencyRate	= PayablesInvoice.InvoiceAmount.ReportAmount4.EnteredCurrencyRate		
					DiscountAmount.ReportAmount5.EnteredCurrencyRate	= PayablesInvoice.InvoiceAmount.ReportAmount5.EnteredCurrencyRate		
			if (NetPaymentAmount.ExchangeDate not entered
			and NetPaymentAmount.CurrencyAmount entered)
				if (CheckDate entered)
					NetPaymentAmount.ExchangeDate		= CheckDate



		VerifyProcessingMonitorRule
			VerifyPayablesMonitor.Company 			= Company
			VerifyPayablesMonitor.PayGroup			= PayGroup
			VerifyPayablesMonitor.RunProgram		= LocalRunProgram
			VerifyPayablesMonitor.VendorGroup		= VendorGroup
			VerifyPayablesMonitor.ProcessGroup		= ProcessGroup
			VerifyPayablesMonitor.ProcessLevel		= ProcessLevel
			VerifyPayablesMonitor.AccountStructure	= blank
			VerifyPayablesMonitor.BatchNumber		= blank
			VerifyPayablesMonitor.AuthorityCode		= PayablesInvoice.AuthorityCode
			LocalCheckAPMonitor						= VerifyPayablesMonitor.CallVerifyPayablesMonitor
			constraint (VerifyPayablesMonitor.NoErrors)
				"<VerifyPayablesMonitor.APMonitorProcessingMessage>"


		UpdateLastDateTimeActor
			LastUpdateDate = current timestamp
			LastUpdateBy = actor

		ComputeDiscountedAmounts
			if (DiscountLost)			
				NetPaymentAmount.FunctionalAmount.EnteredCurrencyAmount	= PaymentAmount.FunctionalAmount.EnteredCurrencyAmount		
				NetPaymentAmount.CurrencyAmount	= PaymentAmount.CurrencyAmount		
				NetPaymentAmount.ExchangeDate	= CheckDate							
			else																	

				NetPaymentAmount.FunctionalAmount.EnteredCurrencyAmount	= PaymentAmount.FunctionalAmount.EnteredCurrencyAmount - DiscountAmount.FunctionalAmount.EnteredCurrencyAmount	
				NetPaymentAmount.CurrencyAmount	= PaymentAmount.CurrencyAmount - DiscountAmount.CurrencyAmount	
				NetPaymentAmount.ExchangeDate	= CheckDate
			if ((NetPaymentAmount.CurrencyAmount = PaymentAmount.CurrencyAmount
			and !DiscountAmount.CurrencyAmount = 0)
			or   DiscountLost)
				DiscountLost = true
			else
				DiscountLost = false

		UpdateIncomeCode
			if (IncomeCode entered)

				if (PayablesInvoice.IncomeCode not entered)
					invoke UpdateDefaultIncomeCode PayablesInvoice
						invoked.DefaultIncomeCode = IncomeCode

		CreditMemoApplyRules	
			constraint (CreditInvoicePayablePaymentRel exists)	
				"CreditInvoicePaymentDoesNotExist<Company>;<LocalPayablesInvoice>;<LocalPayablesInvoicePayment>"
			if (initiating action != "Vendor.ReleaseToARInterface")		
				constraint (CreditInvoicePayablePaymentRel.Status.Released)
					"CreditInvoiceMustBeReleased"					
			constraint (CreditInvoicePayablePaymentRel.PayablesInvoice.InvoiceAmount.CurrencyAmount = CreditInvoicePayablePaymentRel.PayablesInvoice.TotalPaymentAmount.TransactionTotal)
				"CannotApply;InvoiceOutOfBalance"			   
			constraint (CreditInvoicePayablePaymentRel.DiscountAmount.CurrencyAmount not entered)
				"CannotApply;CreditHasDiscount"				 
			constraint (CreditInvoicePayablePaymentRel.PayGroup = PayGroup)
				"Credit_\Memo_\Pay_\GroupNotEqual_\Invoice_\Pay_\Group,CannotApply"			   
			constraint (CreditInvoicePayablePaymentRel.InvoiceCurrency = InvoiceCurrency)
				"CreditMemoCurrencyNotEqualInvoiceCurrencyCannotApply"						 
			constraint (CreditInvoicePayablePaymentRel.RemitToCode = RemitToCode)
				"Credit_\Memo_\Remit_\LocationNotEqual_\Invoice_\Remit_\To,CannotApply"			   
			constraint (CreditInvoicePayablePaymentRel.PayVendor = PayVendor)
				"Credit_\Memo_\Pay_\To_\VendorNotEqual_\Invoice_\Pay_\To_\Vendor,CannotApply"		      

		CreatePayablesCreditMemoBlock
			invoke Create PayablesCreditMemo
				invoked.Company									= this instance.PayablesInvoice.Company
				invoked.Vendor									= this instance.PayablesInvoice.Vendor
				invoked.PayablesCreditMemo.CreditMemoNumber		= LocalPayablesCreditMemoCredit
				invoked.PayablesCreditMemo.CreditMemoSuffix		= LocalPayablesCreditMemoCrdSuf
				invoked.PayablesCreditMemo.CreditMemoSequence	= LocalCreditPaymentSequence
				invoked.PayablesCreditMemo.CreditMemoPayablesInvoice = LocalPayablesCreditMemoCrdPI		
				invoked.PayablesCreditMemo.Invoice				= LocalPayablesCreditMemoInvoice
				invoked.PayablesCreditMemo.Suffix				= LocalPayablesCreditMemoInvSuf
				invoked.PayablesCreditMemo.PayablesSequence		= LocalInvoicePaymentSequence
				invoked.PayablesCreditMemo.PayablesInvoice		= LocalPayablesCreditMemoInvPI			
				invoked.AmountApplied							= PrmAppliedAmount
			invoke TakeOffHold CreditInvoicePayablePaymentRel
			invoke TakeOffHold

		445DeleteCBCheck
			for each CashLedgerPayablesPaymentRel4
				if (each.CheckType.ManuallyCreated
				and each.CashLedgerPayablesPayment.BankTransactionCode.ManualPaymentNumberReservation)
					invoke SetAsReservedForManualPayment each
				else
					invoke Delete each

		ReleaseEditRules
			if (BankTransactionCodeRel.PaymentOutputOption.ElectronicFile	
			and BankTransactionCodeRel.PaymentOutputOption.Swift
			and BankTransactionCodeRel.PaymentOutputOption.WireTransfer)	
				if   (PayVendor.BankEntity 			not entered
				or	  PayVendor.BankAccountNumber 	not entered)
					constraint (RemitToCode.BankEntity			entered		
					and   		RemitToCode.BankAccountNumber	entered)
						"BankEntityAndBankAccountNumberRequiredOnPayVendor<PayVendor>ForInvoicesSetUpForElectronicPayment"
				if (PayVendor.BankEntity 	    entered
				and PayVendor.BankAccountNumber entered)
					constraint (PayVendor.BankAccountType entered)
						"BankAccountTypeRequiredForElectronicPayment"
				else
				if (RemitToCode.BankEntity	entered)
					constraint (RemitToCode.BankAccountType entered)
						"BankAccountTypeRequiredForElectronicPayment"
			if (IncomeWithholdingCode entered)
				constraint (IncomeWithholdingCodeDetailRel exists)
					"IncomeWithholdingCode<IncomeWithholdingCode>DoesNotHaveDistributionDetails"
			if (TransactionNumber not entered)
				LocalStatus = 1
			else
			if (TransactionNumber entered
			and BankTransactionCode.BankTransactionType.CashPayment)
				LocalStatus = 4
			else
			if (BankTransactionCode.BankTransactionType.BillOfExchangePayment)
				if (!BankTransactionCode.PayableAcceptanceAccounting)
					if (PayGroup.BillOfExchangeAcceptanceAccounting)
						display "Do711-DRAFT-ACCEPT"
					else
						LocalStatus = 4
				else
					LocalStatus = 4




		SaveDocumentTotalsEntranceRules		
			if (ActionType.CreateType)
				LocalDocumentCurrencyTotals 	= PayablesInvoice.TotalPaymentAmount
				initialize LocalDocumentCurrencyTotals.OldCurrencyAmount
			else
				if (PaymentAmount.CurrencyAmount changed
				or  TransientCurrencyRefresh)
					LocalDocumentCurrencyTotals 	= PayablesInvoice.TotalPaymentAmount
					LocalDocumentCurrencyTotals.OldCurrencyAmount = old PaymentAmount	
					OldPaymentAmount	= old PaymentAmount.CurrencyAmount
				if (DiscountAmount.CurrencyAmount changed
				or  TransientCurrencyRefresh)
					OldDiscountAmount	= old DiscountAmount.CurrencyAmount
					OldDiscountPercent	= old DiscountPercent


		UpdateBaseTotalPaymentAmount	
			LocalDocumentCurrencyTotals.NewCurrencyAmount = PaymentAmount	
			LocalDocumentCurrencyTotals.PerformUpdate	  = true
			if (LocalDocumentCurrencyTotals.UpdateTotals)
				invoke UpdateBasePaymentTotals PayablesInvoice
					invoked.PrmTotalPaymentAmount = LocalDocumentCurrencyTotals


		DeleteAmountFromDocumentTotals
			LocalDocumentCurrencyTotals 				  = PayablesInvoice.TotalPaymentAmount
			LocalDocumentCurrencyTotals.OldCurrencyAmount = PaymentAmount
			LocalDocumentCurrencyTotals.NewCurrencyAmount = 0
			LocalDocumentCurrencyTotals.TransactionTotal  = PayablesInvoice.TotalPaymentAmount.TransactionTotal 
			LocalDocumentCurrencyTotals.PerformUpdate	  = true
			if (LocalDocumentCurrencyTotals.UpdateTotals)
				invoke UpdateBasePaymentTotals PayablesInvoice
					invoked.PrmTotalPaymentAmount = LocalDocumentCurrencyTotals





		SetInvoicePaymentCurrencyAmountFields	
			LocalCurrencyTable															= PayablesInvoice.CurrencyTable
			LocalInvoiceCurrencyCalculationGroup.CurrencyAmount							= PaymentAmount
			LocalInvoiceCurrencyCalculationGroup.FinanceEnterpriseGroup					= GeneralLedgerCompanyRel.FinanceEnterpriseGroup
			LocalInvoiceCurrencyCalculationGroup.ExchangeDate							= PayablesInvoice.InvoiceAmount.ExchangeDate 
			LocalInvoiceCurrencyCalculationGroup.FunctionalAmount.EnteredCurrencyRate	= PayablesInvoice.InvoiceAmount.FunctionalAmount.EnteredCurrencyRate
			LocalInvoiceCurrencyCalculationGroup.FromCurrency							= InvoiceCurrency
			LocalInvoiceCurrencyCalculationGroup.FunctionalAmount.ToCurrency			= GeneralLedgerCompanyRel.AccountingEntity.FunctionalCurrency
			LocalInvoiceCurrencyCalculationGroup.AlternateAmount.ToCurrency				= GeneralLedgerCompanyRel.AccountingEntity.AlternateCurrency
			LocalInvoiceCurrencyCalculationGroup.AlternateAmount2.ToCurrency			= GeneralLedgerCompanyRel.AccountingEntity.AlternateCurrency2
			LocalInvoiceCurrencyCalculationGroup.AlternateAmount3.ToCurrency			= GeneralLedgerCompanyRel.AccountingEntity.AlternateCurrency3
			LocalInvoiceCurrencyCalculationGroup.ReportAmount1.ToCurrency				= GeneralLedgerCompanyRel.FinanceEnterpriseGroup.ReportCurrencyOne
			LocalInvoiceCurrencyCalculationGroup.ReportAmount2.ToCurrency				= GeneralLedgerCompanyRel.FinanceEnterpriseGroup.ReportCurrencyTwo
			LocalInvoiceCurrencyCalculationGroup.ReportAmount3.ToCurrency				= GeneralLedgerCompanyRel.FinanceEnterpriseGroup.ReportCurrencyThree
			LocalInvoiceCurrencyCalculationGroup.ReportAmount4.ToCurrency				= GeneralLedgerCompanyRel.FinanceEnterpriseGroup.ReportCurrencyFour
			LocalInvoiceCurrencyCalculationGroup.ReportAmount5.ToCurrency				= GeneralLedgerCompanyRel.FinanceEnterpriseGroup.ReportCurrencyFive


		SetPaymentCurrencyAmountFields			
			LocalCurrencyTable														= PayablesInvoice.CurrencyTable
			LocalCurrencyCalculationGroup.FinanceEnterpriseGroup					= GeneralLedgerCompanyRel.FinanceEnterpriseGroup
			LocalCurrencyCalculationGroup.ExchangeDate								= CheckDate
			LocalCurrencyCalculationGroup.FromCurrency								= CashCode.Currency
			LocalCurrencyCalculationGroup.FunctionalAmount.ToCurrency				= GeneralLedgerCompanyRel.AccountingEntity.FunctionalCurrency
			LocalCurrencyCalculationGroup.AlternateAmount.ToCurrency				= GeneralLedgerCompanyRel.AccountingEntity.AlternateCurrency
			LocalCurrencyCalculationGroup.AlternateAmount2.ToCurrency				= GeneralLedgerCompanyRel.AccountingEntity.AlternateCurrency2
			LocalCurrencyCalculationGroup.AlternateAmount3.ToCurrency				= GeneralLedgerCompanyRel.AccountingEntity.AlternateCurrency3
			LocalCurrencyCalculationGroup.ReportAmount1.ToCurrency					= GeneralLedgerCompanyRel.FinanceEnterpriseGroup.ReportCurrencyOne
			LocalCurrencyCalculationGroup.ReportAmount2.ToCurrency					= GeneralLedgerCompanyRel.FinanceEnterpriseGroup.ReportCurrencyTwo
			LocalCurrencyCalculationGroup.ReportAmount3.ToCurrency					= GeneralLedgerCompanyRel.FinanceEnterpriseGroup.ReportCurrencyThree
			LocalCurrencyCalculationGroup.ReportAmount4.ToCurrency					= GeneralLedgerCompanyRel.FinanceEnterpriseGroup.ReportCurrencyFour
			LocalCurrencyCalculationGroup.ReportAmount5.ToCurrency					= GeneralLedgerCompanyRel.FinanceEnterpriseGroup.ReportCurrencyFive


		CheckForRateChangesDuringPaymentCycle	
			if (CashCode.Currency = InvoiceCurrency)
				if (LocalCurrencyCalculationGroup.FunctionalAmount.OutputCurrencyRate	!= NetPaymentAmount.FunctionalAmount.EnteredCurrencyRate
				or  LocalCurrencyCalculationGroup.AlternateAmount.OutputCurrencyRate	!= NetPaymentAmount.AlternateAmount.EnteredCurrencyRate
				or  LocalCurrencyCalculationGroup.AlternateAmount2.OutputCurrencyRate	!= NetPaymentAmount.AlternateAmount2.EnteredCurrencyRate
				or  LocalCurrencyCalculationGroup.AlternateAmount3.OutputCurrencyRate	!= NetPaymentAmount.AlternateAmount3.EnteredCurrencyRate
				or  LocalCurrencyCalculationGroup.ReportAmount1.OutputCurrencyRate		!= NetPaymentAmount.ReportAmount1.EnteredCurrencyRate
				or  LocalCurrencyCalculationGroup.ReportAmount2.OutputCurrencyRate		!= NetPaymentAmount.ReportAmount2.EnteredCurrencyRate
				or  LocalCurrencyCalculationGroup.ReportAmount3.OutputCurrencyRate		!= NetPaymentAmount.ReportAmount3.EnteredCurrencyRate
				or  LocalCurrencyCalculationGroup.ReportAmount4.OutputCurrencyRate		!= NetPaymentAmount.ReportAmount4.EnteredCurrencyRate
				or  LocalCurrencyCalculationGroup.ReportAmount5.OutputCurrencyRate		!= NetPaymentAmount.ReportAmount5.EnteredCurrencyRate)
					include SetNetPaymentCurrencyAmounts
					if (DiscountAmount.CurrencyAmount	entered)
						include SetDiscountCurrencyAmounts
					if (WithholdingAmount	entered)
						include SetWithholdingCurrencyAmounts
					invoke UpdateBaseRateAndAmount CashLedgerPayablesPaymentRel
						invoked.PrmCurrencyRate = LocalCurrencyCalculationGroup.FunctionalAmount.OutputCurrencyRate
			else
				include SetLocalCurrencyAmountFields
				if (LocalCurrencyCalculationGroup.FunctionalAmount.OutputCurrencyRate	!= NetPaymentAmount.FunctionalAmount.EnteredCurrencyRate
				or  LocalCurrencyCalculationGroup.AlternateAmount.OutputCurrencyRate	!= NetPaymentAmount.AlternateAmount.EnteredCurrencyRate
				or  LocalCurrencyCalculationGroup.AlternateAmount2.OutputCurrencyRate	!= NetPaymentAmount.AlternateAmount2.EnteredCurrencyRate
				or  LocalCurrencyCalculationGroup.AlternateAmount3.OutputCurrencyRate	!= NetPaymentAmount.AlternateAmount3.EnteredCurrencyRate
				or  LocalCurrencyCalculationGroup.ReportAmount1.OutputCurrencyRate		!= NetPaymentAmount.ReportAmount1.EnteredCurrencyRate
				or  LocalCurrencyCalculationGroup.ReportAmount2.OutputCurrencyRate		!= NetPaymentAmount.ReportAmount2.EnteredCurrencyRate
				or  LocalCurrencyCalculationGroup.ReportAmount3.OutputCurrencyRate		!= NetPaymentAmount.ReportAmount3.EnteredCurrencyRate
				or  LocalCurrencyCalculationGroup.ReportAmount4.OutputCurrencyRate		!= NetPaymentAmount.ReportAmount4.EnteredCurrencyRate
				or  LocalCurrencyCalculationGroup.ReportAmount5.OutputCurrencyRate		!= NetPaymentAmount.ReportAmount5.EnteredCurrencyRate)

					LocalCurrencyCalculationGroup.CurrencyAmount				= NetPaymentAmount.CurrencyAmount
					NetPaymentAmount.ExchangeDate								= CheckDate

					if (CashCode.Currency = GeneralLedgerCompanyRel.AccountingEntity.FunctionalCurrency)
						NetPaymentAmount.FunctionalAmount.EnteredCurrencyRate				= CashLedgerPayablesPaymentRel.PaymentAmountBankAccountCurrency.EnteredCurrencyRate
						LocalCurrencyCalculationGroup.FunctionalAmount.EnteredCurrencyRate	= CashLedgerPayablesPaymentRel.PaymentAmountBankAccountCurrency.EnteredCurrencyRate
					else
						NetPaymentAmount.FunctionalAmount.EnteredCurrencyRate	= LocalCurrencyCalculationGroup.FunctionalAmount.OutputCurrencyRate
					NetPaymentAmount.FunctionalAmount.EnteredCurrencyAmount		= LocalCurrencyCalculationGroup.FunctionalAmount.OutputCurrencyAmount
					if (GeneralLedgerCompanyRel.AccountingEntity.AlternateCurrency entered)
						if (CashCode.Currency = GeneralLedgerCompanyRel.AccountingEntity.AlternateCurrency)
							NetPaymentAmount.AlternateAmount.EnteredCurrencyRate 				= CashLedgerPayablesPaymentRel.PaymentAmountBankAccountCurrency.EnteredCurrencyRate
							LocalCurrencyCalculationGroup.AlternateAmount.EnteredCurrencyRate	= CashLedgerPayablesPaymentRel.PaymentAmountBankAccountCurrency.EnteredCurrencyRate
						else
							NetPaymentAmount.AlternateAmount.EnteredCurrencyRate	= LocalCurrencyCalculationGroup.AlternateAmount.OutputCurrencyRate
						NetPaymentAmount.AlternateAmount.EnteredCurrencyAmount		= LocalCurrencyCalculationGroup.AlternateAmount.OutputCurrencyAmount
					if (GeneralLedgerCompanyRel.AccountingEntity.AlternateCurrency2 entered)
						if (CashCode.Currency = GeneralLedgerCompanyRel.AccountingEntity.AlternateCurrency2)
							NetPaymentAmount.AlternateAmount2.EnteredCurrencyRate 				= CashLedgerPayablesPaymentRel.PaymentAmountBankAccountCurrency.EnteredCurrencyRate
							LocalCurrencyCalculationGroup.AlternateAmount2.EnteredCurrencyRate	= CashLedgerPayablesPaymentRel.PaymentAmountBankAccountCurrency.EnteredCurrencyRate
						else
							NetPaymentAmount.AlternateAmount2.EnteredCurrencyRate  	= LocalCurrencyCalculationGroup.AlternateAmount2.OutputCurrencyRate
						NetPaymentAmount.AlternateAmount2.EnteredCurrencyAmount		= LocalCurrencyCalculationGroup.AlternateAmount2.OutputCurrencyAmount
					if (GeneralLedgerCompanyRel.AccountingEntity.AlternateCurrency3 entered)
						if (CashCode.Currency = GeneralLedgerCompanyRel.AccountingEntity.AlternateCurrency3)
							NetPaymentAmount.AlternateAmount3.EnteredCurrencyRate 				= CashLedgerPayablesPaymentRel.PaymentAmountBankAccountCurrency.EnteredCurrencyRate
							LocalCurrencyCalculationGroup.AlternateAmount3.EnteredCurrencyRate	= CashLedgerPayablesPaymentRel.PaymentAmountBankAccountCurrency.EnteredCurrencyRate
						else
							NetPaymentAmount.AlternateAmount3.EnteredCurrencyRate	= LocalCurrencyCalculationGroup.AlternateAmount3.OutputCurrencyRate
						NetPaymentAmount.AlternateAmount3.EnteredCurrencyAmount		= LocalCurrencyCalculationGroup.AlternateAmount3.OutputCurrencyAmount
					if (GeneralLedgerCompanyRel.FinanceEnterpriseGroup.ReportCurrencyOne entered)
						if (CashCode.Currency = GeneralLedgerCompanyRel.FinanceEnterpriseGroup.ReportCurrencyOne)
							NetPaymentAmount.ReportAmount1.EnteredCurrencyRate 					= CashLedgerPayablesPaymentRel.PaymentAmountBankAccountCurrency.EnteredCurrencyRate
							LocalCurrencyCalculationGroup.ReportAmount1.EnteredCurrencyRate		= CashLedgerPayablesPaymentRel.PaymentAmountBankAccountCurrency.EnteredCurrencyRate
						else
							NetPaymentAmount.ReportAmount1.EnteredCurrencyRate    	= LocalCurrencyCalculationGroup.ReportAmount1.OutputCurrencyRate
						NetPaymentAmount.ReportAmount1.EnteredCurrencyAmount  		= LocalCurrencyCalculationGroup.ReportAmount1.OutputCurrencyAmount
					if (GeneralLedgerCompanyRel.FinanceEnterpriseGroup.ReportCurrencyTwo entered)
						if (CashCode.Currency = GeneralLedgerCompanyRel.FinanceEnterpriseGroup.ReportCurrencyTwo)
							NetPaymentAmount.ReportAmount2.EnteredCurrencyRate 					= CashLedgerPayablesPaymentRel.PaymentAmountBankAccountCurrency.EnteredCurrencyRate
							LocalCurrencyCalculationGroup.ReportAmount2.EnteredCurrencyRate		= CashLedgerPayablesPaymentRel.PaymentAmountBankAccountCurrency.EnteredCurrencyRate
						else
							NetPaymentAmount.ReportAmount2.EnteredCurrencyRate    	= LocalCurrencyCalculationGroup.ReportAmount2.OutputCurrencyRate
						NetPaymentAmount.ReportAmount2.EnteredCurrencyAmount  		= LocalCurrencyCalculationGroup.ReportAmount2.OutputCurrencyAmount
					if (GeneralLedgerCompanyRel.FinanceEnterpriseGroup.ReportCurrencyThree entered)
						if (CashCode.Currency = GeneralLedgerCompanyRel.FinanceEnterpriseGroup.ReportCurrencyThree)
							NetPaymentAmount.ReportAmount3.EnteredCurrencyRate 					= CashLedgerPayablesPaymentRel.PaymentAmountBankAccountCurrency.EnteredCurrencyRate
							LocalCurrencyCalculationGroup.ReportAmount3.EnteredCurrencyRate		= CashLedgerPayablesPaymentRel.PaymentAmountBankAccountCurrency.EnteredCurrencyRate
						else
							NetPaymentAmount.ReportAmount3.EnteredCurrencyRate		= LocalCurrencyCalculationGroup.ReportAmount3.OutputCurrencyRate
						NetPaymentAmount.ReportAmount3.EnteredCurrencyAmount		= LocalCurrencyCalculationGroup.ReportAmount3.OutputCurrencyAmount
					if (GeneralLedgerCompanyRel.FinanceEnterpriseGroup.ReportCurrencyFour entered)
						if (CashCode.Currency = GeneralLedgerCompanyRel.FinanceEnterpriseGroup.ReportCurrencyFour)
							NetPaymentAmount.ReportAmount4.EnteredCurrencyRate 					= CashLedgerPayablesPaymentRel.PaymentAmountBankAccountCurrency.EnteredCurrencyRate
							LocalCurrencyCalculationGroup.ReportAmount4.EnteredCurrencyRate		= CashLedgerPayablesPaymentRel.PaymentAmountBankAccountCurrency.EnteredCurrencyRate
						else
							NetPaymentAmount.ReportAmount4.EnteredCurrencyRate		= LocalCurrencyCalculationGroup.ReportAmount4.OutputCurrencyRate
						NetPaymentAmount.ReportAmount4.EnteredCurrencyAmount		= LocalCurrencyCalculationGroup.ReportAmount4.OutputCurrencyAmount
					if (GeneralLedgerCompanyRel.FinanceEnterpriseGroup.ReportCurrencyFive entered)
						if (CashCode.Currency = GeneralLedgerCompanyRel.FinanceEnterpriseGroup.ReportCurrencyFive)
							NetPaymentAmount.ReportAmount5.EnteredCurrencyRate 					= CashLedgerPayablesPaymentRel.PaymentAmountBankAccountCurrency.EnteredCurrencyRate
							LocalCurrencyCalculationGroup.ReportAmount5.EnteredCurrencyRate		= CashLedgerPayablesPaymentRel.PaymentAmountBankAccountCurrency.EnteredCurrencyRate
						else
							NetPaymentAmount.ReportAmount5.EnteredCurrencyRate		= LocalCurrencyCalculationGroup.ReportAmount5.OutputCurrencyRate
						NetPaymentAmount.ReportAmount5.EnteredCurrencyAmount		= LocalCurrencyCalculationGroup.ReportAmount5.OutputCurrencyAmount

					if (DiscountAmount.CurrencyAmount	entered)

						LocalCurrencyCalculationGroup.CurrencyAmount				= DiscountAmount.CurrencyAmount
						DiscountAmount.ExchangeDate									= CheckDate
						if (CashCode.Currency = GeneralLedgerCompanyRel.AccountingEntity.FunctionalCurrency)
							DiscountAmount.FunctionalAmount.EnteredCurrencyRate						= CashLedgerPayablesPaymentRel.PaymentAmountBankAccountCurrency.EnteredCurrencyRate
							LocalCurrencyCalculationGroup.FunctionalAmount.EnteredCurrencyRate		= CashLedgerPayablesPaymentRel.PaymentAmountBankAccountCurrency.EnteredCurrencyRate
						else
							DiscountAmount.FunctionalAmount.EnteredCurrencyRate		= LocalCurrencyCalculationGroup.FunctionalAmount.OutputCurrencyRate
						DiscountAmount.FunctionalAmount.EnteredCurrencyAmount		= LocalCurrencyCalculationGroup.FunctionalAmount.OutputCurrencyAmount
						if (GeneralLedgerCompanyRel.AccountingEntity.AlternateCurrency entered)
							if (CashCode.Currency = GeneralLedgerCompanyRel.AccountingEntity.AlternateCurrency)
								DiscountAmount.AlternateAmount.EnteredCurrencyRate 					= CashLedgerPayablesPaymentRel.PaymentAmountBankAccountCurrency.EnteredCurrencyRate
								LocalCurrencyCalculationGroup.AlternateAmount.EnteredCurrencyRate	= CashLedgerPayablesPaymentRel.PaymentAmountBankAccountCurrency.EnteredCurrencyRate
							else
								DiscountAmount.AlternateAmount.EnteredCurrencyRate	= LocalCurrencyCalculationGroup.AlternateAmount.OutputCurrencyRate
							DiscountAmount.AlternateAmount.EnteredCurrencyAmount	= LocalCurrencyCalculationGroup.AlternateAmount.OutputCurrencyAmount
						if (GeneralLedgerCompanyRel.AccountingEntity.AlternateCurrency2 entered)
							if (CashCode.Currency = GeneralLedgerCompanyRel.AccountingEntity.AlternateCurrency2)
								DiscountAmount.AlternateAmount2.EnteredCurrencyRate 				= CashLedgerPayablesPaymentRel.PaymentAmountBankAccountCurrency.EnteredCurrencyRate
								LocalCurrencyCalculationGroup.AlternateAmount2.EnteredCurrencyRate	= CashLedgerPayablesPaymentRel.PaymentAmountBankAccountCurrency.EnteredCurrencyRate
							else
								DiscountAmount.AlternateAmount2.EnteredCurrencyRate = LocalCurrencyCalculationGroup.AlternateAmount2.OutputCurrencyRate
							DiscountAmount.AlternateAmount2.EnteredCurrencyAmount	= LocalCurrencyCalculationGroup.AlternateAmount2.OutputCurrencyAmount
						if (GeneralLedgerCompanyRel.AccountingEntity.AlternateCurrency3 entered)
							if (CashCode.Currency = GeneralLedgerCompanyRel.AccountingEntity.AlternateCurrency3)
								DiscountAmount.AlternateAmount3.EnteredCurrencyRate					= CashLedgerPayablesPaymentRel.PaymentAmountBankAccountCurrency.EnteredCurrencyRate
								LocalCurrencyCalculationGroup.AlternateAmount3.EnteredCurrencyRate	= CashLedgerPayablesPaymentRel.PaymentAmountBankAccountCurrency.EnteredCurrencyRate
							else
								DiscountAmount.AlternateAmount3.EnteredCurrencyRate	= LocalCurrencyCalculationGroup.AlternateAmount3.OutputCurrencyRate
							DiscountAmount.AlternateAmount3.EnteredCurrencyAmount	= LocalCurrencyCalculationGroup.AlternateAmount3.OutputCurrencyAmount
						if (GeneralLedgerCompanyRel.FinanceEnterpriseGroup.ReportCurrencyOne entered)
							if (CashCode.Currency = GeneralLedgerCompanyRel.FinanceEnterpriseGroup.ReportCurrencyOne)
								DiscountAmount.ReportAmount1.EnteredCurrencyRate 					= CashLedgerPayablesPaymentRel.PaymentAmountBankAccountCurrency.EnteredCurrencyRate
								LocalCurrencyCalculationGroup.ReportAmount1.EnteredCurrencyRate		= CashLedgerPayablesPaymentRel.PaymentAmountBankAccountCurrency.EnteredCurrencyRate
							else
								DiscountAmount.ReportAmount1.EnteredCurrencyRate    = LocalCurrencyCalculationGroup.ReportAmount1.OutputCurrencyRate
							DiscountAmount.ReportAmount1.EnteredCurrencyAmount  	= LocalCurrencyCalculationGroup.ReportAmount1.OutputCurrencyAmount
						if (GeneralLedgerCompanyRel.FinanceEnterpriseGroup.ReportCurrencyTwo entered)
							if (CashCode.Currency = GeneralLedgerCompanyRel.FinanceEnterpriseGroup.ReportCurrencyTwo)
								DiscountAmount.ReportAmount2.EnteredCurrencyRate 					= CashLedgerPayablesPaymentRel.PaymentAmountBankAccountCurrency.EnteredCurrencyRate
								LocalCurrencyCalculationGroup.ReportAmount2.EnteredCurrencyRate		= CashLedgerPayablesPaymentRel.PaymentAmountBankAccountCurrency.EnteredCurrencyRate
							else
								DiscountAmount.ReportAmount2.EnteredCurrencyRate    = LocalCurrencyCalculationGroup.ReportAmount2.OutputCurrencyRate
							DiscountAmount.ReportAmount2.EnteredCurrencyAmount  	= LocalCurrencyCalculationGroup.ReportAmount2.OutputCurrencyAmount
						if (GeneralLedgerCompanyRel.FinanceEnterpriseGroup.ReportCurrencyThree entered)
							if (CashCode.Currency = GeneralLedgerCompanyRel.FinanceEnterpriseGroup.ReportCurrencyThree)
								DiscountAmount.ReportAmount3.EnteredCurrencyRate 					= CashLedgerPayablesPaymentRel.PaymentAmountBankAccountCurrency.EnteredCurrencyRate
								LocalCurrencyCalculationGroup.ReportAmount3.EnteredCurrencyRate		= CashLedgerPayablesPaymentRel.PaymentAmountBankAccountCurrency.EnteredCurrencyRate
							else
								DiscountAmount.ReportAmount3.EnteredCurrencyRate	= LocalCurrencyCalculationGroup.ReportAmount3.OutputCurrencyRate
							DiscountAmount.ReportAmount3.EnteredCurrencyAmount		= LocalCurrencyCalculationGroup.ReportAmount3.OutputCurrencyAmount
						if (GeneralLedgerCompanyRel.FinanceEnterpriseGroup.ReportCurrencyFour entered)
							if (CashCode.Currency = GeneralLedgerCompanyRel.FinanceEnterpriseGroup.ReportCurrencyFour)
								DiscountAmount.ReportAmount4.EnteredCurrencyRate 					= CashLedgerPayablesPaymentRel.PaymentAmountBankAccountCurrency.EnteredCurrencyRate
								LocalCurrencyCalculationGroup.ReportAmount4.EnteredCurrencyRate		= CashLedgerPayablesPaymentRel.PaymentAmountBankAccountCurrency.EnteredCurrencyRate
							else
								DiscountAmount.ReportAmount4.EnteredCurrencyRate	= LocalCurrencyCalculationGroup.ReportAmount4.OutputCurrencyRate
							DiscountAmount.ReportAmount4.EnteredCurrencyAmount		= LocalCurrencyCalculationGroup.ReportAmount4.OutputCurrencyAmount
						if (GeneralLedgerCompanyRel.FinanceEnterpriseGroup.ReportCurrencyFive entered)
							if (CashCode.Currency = GeneralLedgerCompanyRel.FinanceEnterpriseGroup.ReportCurrencyFive)
								DiscountAmount.ReportAmount5.EnteredCurrencyRate 					= CashLedgerPayablesPaymentRel.PaymentAmountBankAccountCurrency.EnteredCurrencyRate
								LocalCurrencyCalculationGroup.ReportAmount5.EnteredCurrencyRate		= CashLedgerPayablesPaymentRel.PaymentAmountBankAccountCurrency.EnteredCurrencyRate
							else
								DiscountAmount.ReportAmount5.EnteredCurrencyRate	= LocalCurrencyCalculationGroup.ReportAmount5.OutputCurrencyRate
							DiscountAmount.ReportAmount5.EnteredCurrencyAmount		= LocalCurrencyCalculationGroup.ReportAmount5.OutputCurrencyAmount

					if (WithholdingAmount	entered)
						include SetWithholdingCurrencyAmounts
					if (CashCode.Currency != GeneralLedgerCompanyRel.AccountingEntity.FunctionalCurrency)
						invoke UpdateBaseRateAndAmount CashLedgerPayablesPaymentRel
							invoked.PrmCurrencyRate = LocalCurrencyCalculationGroup.FunctionalAmount.OutputCurrencyRate
				include SetPaymentCurrencyAmountFields


		CalculateCashCodeCurrencyAmount
			LocalCurrencyCalculationGroup.CurrencyAmount							= BankCheckAmount
			LocalCashCodePaymentAmount.ExchangeDate									= CheckDate
			LocalCashCodePaymentAmount.CurrencyAmount								= BankCheckAmount
			if (PrmVoidDate	entered)	
				LocalCurrencyCalculationGroup.FunctionalAmount.EnteredCurrencyRate	= CashPaymentDistributionsRel.DistributionAmount.FunctionalAmount.EnteredCurrencyRate
				LocalCurrencyCalculationGroup.AlternateAmount.EnteredCurrencyRate	= CashPaymentDistributionsRel.DistributionAmount.AlternateAmount.EnteredCurrencyRate
				LocalCurrencyCalculationGroup.AlternateAmount2.EnteredCurrencyRate	= CashPaymentDistributionsRel.DistributionAmount.AlternateAmount2.EnteredCurrencyRate
				LocalCurrencyCalculationGroup.AlternateAmount3.EnteredCurrencyRate	= CashPaymentDistributionsRel.DistributionAmount.AlternateAmount3.EnteredCurrencyRate
				LocalCurrencyCalculationGroup.ReportAmount1.EnteredCurrencyRate		= CashPaymentDistributionsRel.DistributionAmount.ReportAmount1.EnteredCurrencyRate
				LocalCurrencyCalculationGroup.ReportAmount2.EnteredCurrencyRate		= CashPaymentDistributionsRel.DistributionAmount.ReportAmount2.EnteredCurrencyRate
				LocalCurrencyCalculationGroup.ReportAmount3.EnteredCurrencyRate		= CashPaymentDistributionsRel.DistributionAmount.ReportAmount3.EnteredCurrencyRate
				LocalCurrencyCalculationGroup.ReportAmount4.EnteredCurrencyRate		= CashPaymentDistributionsRel.DistributionAmount.ReportAmount4.EnteredCurrencyRate
				LocalCurrencyCalculationGroup.ReportAmount5.EnteredCurrencyRate		= CashPaymentDistributionsRel.DistributionAmount.ReportAmount5.EnteredCurrencyRate
			LocalCashCodePaymentAmount.FunctionalAmount.EnteredCurrencyAmount		= LocalCurrencyCalculationGroup.FunctionalAmount.OutputCurrencyAmount
			LocalCashCodePaymentAmount.FunctionalAmount.EnteredCurrencyRate			= LocalCurrencyCalculationGroup.FunctionalAmount.OutputCurrencyRate
			if (GeneralLedgerCompanyRel.AccountingEntity.AlternateCurrency entered)
				LocalCashCodePaymentAmount.AlternateAmount.EnteredCurrencyAmount		= LocalCurrencyCalculationGroup.AlternateAmount.OutputCurrencyAmount
				LocalCashCodePaymentAmount.AlternateAmount.EnteredCurrencyRate			= LocalCurrencyCalculationGroup.AlternateAmount.OutputCurrencyRate
			if (GeneralLedgerCompanyRel.AccountingEntity.AlternateCurrency2 entered)
				LocalCashCodePaymentAmount.AlternateAmount2.EnteredCurrencyAmount  		= LocalCurrencyCalculationGroup.AlternateAmount2.OutputCurrencyAmount
				LocalCashCodePaymentAmount.AlternateAmount2.EnteredCurrencyRate  		= LocalCurrencyCalculationGroup.AlternateAmount2.OutputCurrencyRate
			if (GeneralLedgerCompanyRel.AccountingEntity.AlternateCurrency3 entered)
				LocalCashCodePaymentAmount.AlternateAmount3.EnteredCurrencyAmount		= LocalCurrencyCalculationGroup.AlternateAmount3.OutputCurrencyAmount
				LocalCashCodePaymentAmount.AlternateAmount3.EnteredCurrencyRate			= LocalCurrencyCalculationGroup.AlternateAmount3.OutputCurrencyRate
			if (GeneralLedgerCompanyRel.FinanceEnterpriseGroup.ReportCurrencyOne entered)
				LocalCashCodePaymentAmount.ReportAmount1.EnteredCurrencyAmount     		= LocalCurrencyCalculationGroup.ReportAmount1.OutputCurrencyAmount
				LocalCashCodePaymentAmount.ReportAmount1.EnteredCurrencyRate     		= LocalCurrencyCalculationGroup.ReportAmount1.OutputCurrencyRate
			if (GeneralLedgerCompanyRel.FinanceEnterpriseGroup.ReportCurrencyTwo entered)
				LocalCashCodePaymentAmount.ReportAmount2.EnteredCurrencyAmount      	= LocalCurrencyCalculationGroup.ReportAmount2.OutputCurrencyAmount
				LocalCashCodePaymentAmount.ReportAmount2.EnteredCurrencyRate      		= LocalCurrencyCalculationGroup.ReportAmount2.OutputCurrencyRate
			if (GeneralLedgerCompanyRel.FinanceEnterpriseGroup.ReportCurrencyThree entered)
				LocalCashCodePaymentAmount.ReportAmount3.EnteredCurrencyAmount			= LocalCurrencyCalculationGroup.ReportAmount3.OutputCurrencyAmount
				LocalCashCodePaymentAmount.ReportAmount3.EnteredCurrencyRate			= LocalCurrencyCalculationGroup.ReportAmount3.OutputCurrencyRate
			if (GeneralLedgerCompanyRel.FinanceEnterpriseGroup.ReportCurrencyFour entered)
				LocalCashCodePaymentAmount.ReportAmount4.EnteredCurrencyAmount			= LocalCurrencyCalculationGroup.ReportAmount4.OutputCurrencyAmount
				LocalCashCodePaymentAmount.ReportAmount4.EnteredCurrencyRate			= LocalCurrencyCalculationGroup.ReportAmount4.OutputCurrencyRate
			if (GeneralLedgerCompanyRel.FinanceEnterpriseGroup.ReportCurrencyFive entered)
				LocalCashCodePaymentAmount.ReportAmount5.EnteredCurrencyAmount			= LocalCurrencyCalculationGroup.ReportAmount5.OutputCurrencyAmount
				LocalCashCodePaymentAmount.ReportAmount5.EnteredCurrencyRate			= LocalCurrencyCalculationGroup.ReportAmount5.OutputCurrencyRate


		CalculateDiscountCurrencyAmount
			if (InvoiceCurrency	!= CashCode.Currency)
				LocalExchangeDate											= CheckDate
				LocalDiscountExchange.TransactionAmount						= DiscountAmount.CurrencyAmount
				LocalDiscountExchange.BaseAmount.ToCurrency					= CashCode.Currency
				if (PrmVoidDate entered)	
					LocalDiscountExchange.BaseAmount.EnteredCurrencyRate	= (BankCheckAmount / NetPaymentAmount.CurrencyAmount)
				else
					if (CashLedgerPayablesPaymentRel.IsManualPayment)		
						LocalDiscountExchange.BaseAmount.EnteredCurrencyRate = CashLedgerPayablesPaymentRel.PaymentAmountBankAccountCurrency.EnteredCurrencyRate
					else
						if (InvoiceCurrency = CashRequirementsResult.InvoiceCurrency
						and CashCode 		= CashRequirementsResult.CashCode
						and CashRequirementsResult.OverridePaymentRate entered)
							LocalDiscountExchange.BaseAmount.EnteredCurrencyRate = CashRequirementsResult.OverridePaymentRate 
				LocalDiscountCurrencyAmount									= LocalDiscountExchange.BaseAmount.OutputCurrencyAmount
			else
				LocalDiscountCurrencyAmount									= DiscountAmount.CurrencyAmount
			LocalCurrencyCalculationGroup.CurrencyAmount							= LocalDiscountCurrencyAmount
			LocalDiscountAmount.CurrencyAmount	    								= LocalDiscountCurrencyAmount
			if (PrmVoidDate	entered)	
				LocalCurrencyCalculationGroup.FunctionalAmount.EnteredCurrencyRate	= CashPaymentDistributionsRel.DistributionAmount.FunctionalAmount.EnteredCurrencyRate
				LocalCurrencyCalculationGroup.AlternateAmount.EnteredCurrencyRate	= CashPaymentDistributionsRel.DistributionAmount.AlternateAmount.EnteredCurrencyRate
				LocalCurrencyCalculationGroup.AlternateAmount2.EnteredCurrencyRate	= CashPaymentDistributionsRel.DistributionAmount.AlternateAmount2.EnteredCurrencyRate
				LocalCurrencyCalculationGroup.AlternateAmount3.EnteredCurrencyRate	= CashPaymentDistributionsRel.DistributionAmount.AlternateAmount3.EnteredCurrencyRate
				LocalCurrencyCalculationGroup.ReportAmount1.EnteredCurrencyRate		= CashPaymentDistributionsRel.DistributionAmount.ReportAmount1.EnteredCurrencyRate
				LocalCurrencyCalculationGroup.ReportAmount2.EnteredCurrencyRate		= CashPaymentDistributionsRel.DistributionAmount.ReportAmount2.EnteredCurrencyRate
				LocalCurrencyCalculationGroup.ReportAmount3.EnteredCurrencyRate		= CashPaymentDistributionsRel.DistributionAmount.ReportAmount3.EnteredCurrencyRate
				LocalCurrencyCalculationGroup.ReportAmount4.EnteredCurrencyRate		= CashPaymentDistributionsRel.DistributionAmount.ReportAmount4.EnteredCurrencyRate
				LocalCurrencyCalculationGroup.ReportAmount5.EnteredCurrencyRate		= CashPaymentDistributionsRel.DistributionAmount.ReportAmount5.EnteredCurrencyRate
			LocalDiscountAmount.FunctionalAmount.EnteredCurrencyAmount				= LocalCurrencyCalculationGroup.FunctionalAmount.OutputCurrencyAmount
			LocalDiscountAmount.FunctionalAmount.EnteredCurrencyRate				= LocalCurrencyCalculationGroup.FunctionalAmount.OutputCurrencyRate
			if (GeneralLedgerCompanyRel.AccountingEntity.AlternateCurrency entered)
				LocalDiscountAmount.AlternateAmount.EnteredCurrencyAmount   			= LocalCurrencyCalculationGroup.AlternateAmount.OutputCurrencyAmount
				LocalDiscountAmount.AlternateAmount.EnteredCurrencyRate   				= LocalCurrencyCalculationGroup.AlternateAmount.OutputCurrencyRate
			if (GeneralLedgerCompanyRel.AccountingEntity.AlternateCurrency2 entered)
				LocalDiscountAmount.AlternateAmount2.EnteredCurrencyAmount   			= LocalCurrencyCalculationGroup.AlternateAmount2.OutputCurrencyAmount
				LocalDiscountAmount.AlternateAmount2.EnteredCurrencyRate   				= LocalCurrencyCalculationGroup.AlternateAmount2.OutputCurrencyRate
			if (GeneralLedgerCompanyRel.AccountingEntity.AlternateCurrency3 entered)
				LocalDiscountAmount.AlternateAmount3.EnteredCurrencyAmount				= LocalCurrencyCalculationGroup.AlternateAmount3.OutputCurrencyAmount
				LocalDiscountAmount.AlternateAmount3.EnteredCurrencyRate				= LocalCurrencyCalculationGroup.AlternateAmount3.OutputCurrencyRate
			if (GeneralLedgerCompanyRel.FinanceEnterpriseGroup.ReportCurrencyOne entered)
				LocalDiscountAmount.ReportAmount1.EnteredCurrencyAmount     			= LocalCurrencyCalculationGroup.ReportAmount1.OutputCurrencyAmount
				LocalDiscountAmount.ReportAmount1.EnteredCurrencyRate     				= LocalCurrencyCalculationGroup.ReportAmount1.OutputCurrencyRate
			if (GeneralLedgerCompanyRel.FinanceEnterpriseGroup.ReportCurrencyTwo entered)
				LocalDiscountAmount.ReportAmount2.EnteredCurrencyAmount      			= LocalCurrencyCalculationGroup.ReportAmount2.OutputCurrencyAmount
				LocalDiscountAmount.ReportAmount2.EnteredCurrencyRate 	     			= LocalCurrencyCalculationGroup.ReportAmount2.OutputCurrencyRate
			if (GeneralLedgerCompanyRel.FinanceEnterpriseGroup.ReportCurrencyThree entered)
				LocalDiscountAmount.ReportAmount3.EnteredCurrencyAmount					= LocalCurrencyCalculationGroup.ReportAmount3.OutputCurrencyAmount
				LocalDiscountAmount.ReportAmount3.EnteredCurrencyRate					= LocalCurrencyCalculationGroup.ReportAmount3.OutputCurrencyRate
			if (GeneralLedgerCompanyRel.FinanceEnterpriseGroup.ReportCurrencyFour entered)
				LocalDiscountAmount.ReportAmount4.EnteredCurrencyAmount					= LocalCurrencyCalculationGroup.ReportAmount4.OutputCurrencyAmount
				LocalDiscountAmount.ReportAmount4.EnteredCurrencyRate					= LocalCurrencyCalculationGroup.ReportAmount4.OutputCurrencyRate
			if (GeneralLedgerCompanyRel.FinanceEnterpriseGroup.ReportCurrencyFive entered)
				LocalDiscountAmount.ReportAmount5.EnteredCurrencyAmount					= LocalCurrencyCalculationGroup.ReportAmount5.OutputCurrencyAmount
				LocalDiscountAmount.ReportAmount5.EnteredCurrencyRate					= LocalCurrencyCalculationGroup.ReportAmount5.OutputCurrencyRate

		CalculateFundDiscountCurrencyAmount	
			if (LocalProrateDistributionAmount not entered)
				LocalProrateDistributionAmount = PayablesInvoice.InvoiceAmount.CurrencyAmount

			if (InvoiceCurrency	!= CashCode.Currency)
				LocalExchangeDate											= CheckDate
				LocalInternationalCost										= each.DistributionAmount.CurrencyAmount / LocalProrateDistributionAmount
				LocalInternationalCost										= LocalInternationalCost * DiscountAmount.CurrencyAmount
				LocalDiscountExchange.TransactionAmount						= LocalInternationalCost
				LocalDiscountExchange.BaseAmount.ToCurrency					= CashCode.Currency
				if (PrmVoidDate entered)	
					LocalDiscountExchange.BaseAmount.EnteredCurrencyRate	= (BankCheckAmount / NetPaymentAmount.CurrencyAmount)
				else
					if (CashLedgerPayablesPaymentRel.IsManualPayment)		
						LocalDiscountExchange.BaseAmount.EnteredCurrencyRate = CashLedgerPayablesPaymentRel.PaymentAmountBankAccountCurrency.EnteredCurrencyRate
					else
						if (InvoiceCurrency = CashRequirementsResult.InvoiceCurrency
						and CashCode 		= CashRequirementsResult.CashCode
						and CashRequirementsResult.OverridePaymentRate entered)
							LocalDiscountExchange.BaseAmount.EnteredCurrencyRate = CashRequirementsResult.OverridePaymentRate 
				LocalDiscountCurrencyAmount									= LocalDiscountExchange.BaseAmount.OutputCurrencyAmount
			else
				LocalInternationalCost										= each.DistributionAmount.CurrencyAmount / LocalProrateDistributionAmount
				LocalInternationalCost										= LocalInternationalCost * DiscountAmount.CurrencyAmount
				LocalDiscountCurrencyAmount									= LocalInternationalCost
			LocalCurrencyCalculationGroup.CurrencyAmount							= LocalDiscountCurrencyAmount
			LocalDiscountAmount.CurrencyAmount	    								= LocalDiscountCurrencyAmount
			if (PrmVoidDate	entered)	
				LocalCurrencyCalculationGroup.FunctionalAmount.EnteredCurrencyRate	= CashPaymentDistributionsRel.DistributionAmount.FunctionalAmount.EnteredCurrencyRate
				LocalCurrencyCalculationGroup.AlternateAmount.EnteredCurrencyRate	= CashPaymentDistributionsRel.DistributionAmount.AlternateAmount.EnteredCurrencyRate
				LocalCurrencyCalculationGroup.AlternateAmount2.EnteredCurrencyRate	= CashPaymentDistributionsRel.DistributionAmount.AlternateAmount2.EnteredCurrencyRate
				LocalCurrencyCalculationGroup.AlternateAmount3.EnteredCurrencyRate	= CashPaymentDistributionsRel.DistributionAmount.AlternateAmount3.EnteredCurrencyRate
				LocalCurrencyCalculationGroup.ReportAmount1.EnteredCurrencyRate		= CashPaymentDistributionsRel.DistributionAmount.ReportAmount1.EnteredCurrencyRate
				LocalCurrencyCalculationGroup.ReportAmount2.EnteredCurrencyRate		= CashPaymentDistributionsRel.DistributionAmount.ReportAmount2.EnteredCurrencyRate
				LocalCurrencyCalculationGroup.ReportAmount3.EnteredCurrencyRate		= CashPaymentDistributionsRel.DistributionAmount.ReportAmount3.EnteredCurrencyRate
				LocalCurrencyCalculationGroup.ReportAmount4.EnteredCurrencyRate		= CashPaymentDistributionsRel.DistributionAmount.ReportAmount4.EnteredCurrencyRate
				LocalCurrencyCalculationGroup.ReportAmount5.EnteredCurrencyRate		= CashPaymentDistributionsRel.DistributionAmount.ReportAmount5.EnteredCurrencyRate
			LocalDiscountAmount.FunctionalAmount.EnteredCurrencyAmount				= LocalCurrencyCalculationGroup.FunctionalAmount.OutputCurrencyAmount
			LocalDiscountAmount.FunctionalAmount.EnteredCurrencyRate				= LocalCurrencyCalculationGroup.FunctionalAmount.OutputCurrencyRate
			if (GeneralLedgerCompanyRel.AccountingEntity.AlternateCurrency entered)
				LocalDiscountAmount.AlternateAmount.EnteredCurrencyAmount   			= LocalCurrencyCalculationGroup.AlternateAmount.OutputCurrencyAmount
				LocalDiscountAmount.AlternateAmount.EnteredCurrencyRate   				= LocalCurrencyCalculationGroup.AlternateAmount.OutputCurrencyRate
			if (GeneralLedgerCompanyRel.AccountingEntity.AlternateCurrency2 entered)
				LocalDiscountAmount.AlternateAmount2.EnteredCurrencyAmount   			= LocalCurrencyCalculationGroup.AlternateAmount2.OutputCurrencyAmount
				LocalDiscountAmount.AlternateAmount2.EnteredCurrencyRate   				= LocalCurrencyCalculationGroup.AlternateAmount2.OutputCurrencyRate
			if (GeneralLedgerCompanyRel.AccountingEntity.AlternateCurrency3 entered)
				LocalDiscountAmount.AlternateAmount3.EnteredCurrencyAmount				= LocalCurrencyCalculationGroup.AlternateAmount3.OutputCurrencyAmount
				LocalDiscountAmount.AlternateAmount3.EnteredCurrencyRate				= LocalCurrencyCalculationGroup.AlternateAmount3.OutputCurrencyRate
			if (GeneralLedgerCompanyRel.FinanceEnterpriseGroup.ReportCurrencyOne entered)
				LocalDiscountAmount.ReportAmount1.EnteredCurrencyAmount     			= LocalCurrencyCalculationGroup.ReportAmount1.OutputCurrencyAmount
				LocalDiscountAmount.ReportAmount1.EnteredCurrencyRate     				= LocalCurrencyCalculationGroup.ReportAmount1.OutputCurrencyRate
			if (GeneralLedgerCompanyRel.FinanceEnterpriseGroup.ReportCurrencyTwo entered)
				LocalDiscountAmount.ReportAmount2.EnteredCurrencyAmount      			= LocalCurrencyCalculationGroup.ReportAmount2.OutputCurrencyAmount
				LocalDiscountAmount.ReportAmount2.EnteredCurrencyRate 	     			= LocalCurrencyCalculationGroup.ReportAmount2.OutputCurrencyRate
			if (GeneralLedgerCompanyRel.FinanceEnterpriseGroup.ReportCurrencyThree entered)
				LocalDiscountAmount.ReportAmount3.EnteredCurrencyAmount					= LocalCurrencyCalculationGroup.ReportAmount3.OutputCurrencyAmount
				LocalDiscountAmount.ReportAmount3.EnteredCurrencyRate					= LocalCurrencyCalculationGroup.ReportAmount3.OutputCurrencyRate
			if (GeneralLedgerCompanyRel.FinanceEnterpriseGroup.ReportCurrencyFour entered)
				LocalDiscountAmount.ReportAmount4.EnteredCurrencyAmount					= LocalCurrencyCalculationGroup.ReportAmount4.OutputCurrencyAmount
				LocalDiscountAmount.ReportAmount4.EnteredCurrencyRate					= LocalCurrencyCalculationGroup.ReportAmount4.OutputCurrencyRate
			if (GeneralLedgerCompanyRel.FinanceEnterpriseGroup.ReportCurrencyFive entered)
				LocalDiscountAmount.ReportAmount5.EnteredCurrencyAmount					= LocalCurrencyCalculationGroup.ReportAmount5.OutputCurrencyAmount
				LocalDiscountAmount.ReportAmount5.EnteredCurrencyRate					= LocalCurrencyCalculationGroup.ReportAmount5.OutputCurrencyRate

			LocalNumberOfDecimals	= InvoiceCurrency.NumberOfDecimals
			round LocalDiscountAmount.CurrencyAmount to nearest DerivedLocalRoundTo
			LocalNumberOfDecimals	= GeneralLedgerCompanyRel.AccountingEntity.FunctionalCurrency.NumberOfDecimals
			round LocalDiscountAmount.FunctionalAmount.EnteredCurrencyAmount to nearest DerivedLocalRoundTo
			LocalNumberOfDecimals	= GeneralLedgerCompanyRel.AccountingEntity.AlternateCurrency.NumberOfDecimals
			round LocalDiscountAmount.AlternateAmount.EnteredCurrencyAmount to nearest DerivedLocalRoundTo
			LocalNumberOfDecimals	= GeneralLedgerCompanyRel.AccountingEntity.AlternateCurrency2.NumberOfDecimals
			round LocalDiscountAmount.AlternateAmount2.EnteredCurrencyAmount to nearest DerivedLocalRoundTo
			LocalNumberOfDecimals	= GeneralLedgerCompanyRel.AccountingEntity.AlternateCurrency3.NumberOfDecimals
			round LocalDiscountAmount.AlternateAmount3.EnteredCurrencyAmount to nearest DerivedLocalRoundTo
			LocalNumberOfDecimals	= each.DistributionAccount.ToAccountingEntity.FunctionalCurrency.NumberOfDecimals
			round LocalDiscountAmount.ToFunctionalAmount.EnteredCurrencyAmount to nearest DerivedLocalRoundTo
			LocalNumberOfDecimals	= each.DistributionAccount.ToAccountingEntity.AlternateCurrency.NumberOfDecimals
			round LocalDiscountAmount.ToAlternateAmount.EnteredCurrencyAmount to nearest DerivedLocalRoundTo
			LocalNumberOfDecimals	= each.DistributionAccount.ToAccountingEntity.AlternateCurrency2.NumberOfDecimals
			round LocalDiscountAmount.ToAlternateAmount2.EnteredCurrencyAmount to nearest DerivedLocalRoundTo
			LocalNumberOfDecimals	= each.DistributionAccount.ToAccountingEntity.AlternateCurrency3.NumberOfDecimals
			round LocalDiscountAmount.ToAlternateAmount3.EnteredCurrencyAmount to nearest DerivedLocalRoundTo
			LocalNumberOfDecimals	= each.DistributionAccount.Project.Currency.NumberOfDecimals
			round LocalDiscountAmount.ProjectAmount.EnteredCurrencyAmount to nearest DerivedLocalRoundTo
			LocalNumberOfDecimals	= GeneralLedgerCompanyRel.FinanceEnterpriseGroup.ReportCurrencyOne.NumberOfDecimals
			round LocalDiscountAmount.ReportAmount1.EnteredCurrencyAmount to nearest DerivedLocalRoundTo
			LocalNumberOfDecimals	= GeneralLedgerCompanyRel.FinanceEnterpriseGroup.ReportCurrencyTwo.NumberOfDecimals
			round LocalDiscountAmount.ReportAmount2.EnteredCurrencyAmount to nearest DerivedLocalRoundTo
			LocalNumberOfDecimals	= GeneralLedgerCompanyRel.FinanceEnterpriseGroup.ReportCurrencyThree.NumberOfDecimals
			round LocalDiscountAmount.ReportAmount3.EnteredCurrencyAmount to nearest DerivedLocalRoundTo
			LocalNumberOfDecimals	= GeneralLedgerCompanyRel.FinanceEnterpriseGroup.ReportCurrencyFour.NumberOfDecimals
			round LocalDiscountAmount.ReportAmount4.EnteredCurrencyAmount to nearest DerivedLocalRoundTo
			LocalNumberOfDecimals	= GeneralLedgerCompanyRel.FinanceEnterpriseGroup.ReportCurrencyFive.NumberOfDecimals
			round LocalDiscountAmount.ReportAmount5.EnteredCurrencyAmount to nearest DerivedLocalRoundTo

			if (!LocalLastDistribution)
				LocalTotalDistributionAmount.CurrencyAmount								-= LocalDiscountAmount.CurrencyAmount
				LocalTotalDistributionAmount.FunctionalAmount.EnteredCurrencyAmount		-= LocalDiscountAmount.FunctionalAmount.EnteredCurrencyAmount
				LocalTotalDistributionAmount.AlternateAmount.EnteredCurrencyAmount		-= LocalDiscountAmount.AlternateAmount.EnteredCurrencyAmount
				LocalTotalDistributionAmount.AlternateAmount2.EnteredCurrencyAmount		-= LocalDiscountAmount.AlternateAmount2.EnteredCurrencyAmount
				LocalTotalDistributionAmount.AlternateAmount3.EnteredCurrencyAmount		-= LocalDiscountAmount.AlternateAmount3.EnteredCurrencyAmount
				LocalTotalDistributionAmount.ToFunctionalAmount.EnteredCurrencyAmount	-= LocalDiscountAmount.ToFunctionalAmount.EnteredCurrencyAmount
				LocalTotalDistributionAmount.ReportAmount1.EnteredCurrencyAmount		-= LocalDiscountAmount.ReportAmount1.EnteredCurrencyAmount
				LocalTotalDistributionAmount.ReportAmount2.EnteredCurrencyAmount		-= LocalDiscountAmount.ReportAmount2.EnteredCurrencyAmount
				LocalTotalDistributionAmount.ReportAmount3.EnteredCurrencyAmount		-= LocalDiscountAmount.ReportAmount3.EnteredCurrencyAmount
				LocalTotalDistributionAmount.ReportAmount4.EnteredCurrencyAmount		-= LocalDiscountAmount.ReportAmount4.EnteredCurrencyAmount
				LocalTotalDistributionAmount.ReportAmount5.EnteredCurrencyAmount		-= LocalDiscountAmount.ReportAmount5.EnteredCurrencyAmount

		CalculateWithholdingCurrencyAmount
			if (Company.GlobalWithholding)
				CalculateWithholdingAmount.PayablesCompany								= Company
				CalculateWithholdingAmount.PayablesInvoice								= PayablesInvoice
				CalculateWithholdingAmount.PayablesInvoicePayment						= PayablesInvoicePayment
				LocalBoolean															= CalculateWithholdingAmount.SummarizePaymentWithholdingAmounts
				LocalWithholdingAmount													= CalculateWithholdingAmount.TotalWithholdingAmount
			else
				if (InvoiceCurrency     != CashCode.Currency)
					LocalExchangeDate													= CheckDate
					LocalWithholdingExchange.TransactionAmount							= WithholdingAmount
					LocalWithholdingExchange.BaseAmount.ToCurrency						= CashCode.Currency
					if (PrmVoidDate entered) 
						LocalWithholdingExchange.BaseAmount.EnteredCurrencyRate			= (BankCheckAmount / NetPaymentAmount.CurrencyAmount)
					else
						if (InvoiceCurrency = CashRequirementsResult.InvoiceCurrency
						and CashCode 		= CashRequirementsResult.CashCode
						and CashRequirementsResult.OverridePaymentRate entered)
							LocalWithholdingExchange.BaseAmount.EnteredCurrencyRate 	= CashRequirementsResult.OverridePaymentRate 
					LocalWithholdingCurrencyAmount										= LocalWithholdingExchange.BaseAmount.OutputCurrencyAmount
				else
					LocalWithholdingCurrencyAmount										= WithholdingAmount

				LocalCurrencyCalculationGroup.CurrencyAmount							= LocalWithholdingCurrencyAmount
				LocalWithholdingAmount.CurrencyAmount									= LocalWithholdingCurrencyAmount
				if (PrmVoidDate   entered) 
					LocalCurrencyCalculationGroup.FunctionalAmount.EnteredCurrencyRate		= CashPaymentDistributionsRel.DistributionAmount.FunctionalAmount.EnteredCurrencyRate
					LocalCurrencyCalculationGroup.AlternateAmount.EnteredCurrencyRate		= CashPaymentDistributionsRel.DistributionAmount.AlternateAmount.EnteredCurrencyRate
					LocalCurrencyCalculationGroup.AlternateAmount2.EnteredCurrencyRate		= CashPaymentDistributionsRel.DistributionAmount.AlternateAmount2.EnteredCurrencyRate
					LocalCurrencyCalculationGroup.AlternateAmount3.EnteredCurrencyRate		= CashPaymentDistributionsRel.DistributionAmount.AlternateAmount3.EnteredCurrencyRate
					LocalCurrencyCalculationGroup.ReportAmount1.EnteredCurrencyRate			= CashPaymentDistributionsRel.DistributionAmount.ReportAmount1.EnteredCurrencyRate
					LocalCurrencyCalculationGroup.ReportAmount2.EnteredCurrencyRate			= CashPaymentDistributionsRel.DistributionAmount.ReportAmount2.EnteredCurrencyRate
					LocalCurrencyCalculationGroup.ReportAmount3.EnteredCurrencyRate			= CashPaymentDistributionsRel.DistributionAmount.ReportAmount3.EnteredCurrencyRate
					LocalCurrencyCalculationGroup.ReportAmount4.EnteredCurrencyRate			= CashPaymentDistributionsRel.DistributionAmount.ReportAmount4.EnteredCurrencyRate
					LocalCurrencyCalculationGroup.ReportAmount5.EnteredCurrencyRate			= CashPaymentDistributionsRel.DistributionAmount.ReportAmount5.EnteredCurrencyRate
				LocalWithholdingAmount.FunctionalAmount.EnteredCurrencyAmount					= LocalCurrencyCalculationGroup.FunctionalAmount.OutputCurrencyAmount
				LocalWithholdingAmount.FunctionalAmount.EnteredCurrencyRate						= LocalCurrencyCalculationGroup.FunctionalAmount.OutputCurrencyRate
				if (GeneralLedgerCompanyRel.AccountingEntity.AlternateCurrency entered)
					LocalWithholdingAmount.AlternateAmount.EnteredCurrencyAmount			= LocalCurrencyCalculationGroup.AlternateAmount.OutputCurrencyAmount
					LocalWithholdingAmount.AlternateAmount.EnteredCurrencyRate				= LocalCurrencyCalculationGroup.AlternateAmount.OutputCurrencyRate
				if (GeneralLedgerCompanyRel.AccountingEntity.AlternateCurrency2 entered)
					LocalWithholdingAmount.AlternateAmount2.EnteredCurrencyAmount			= LocalCurrencyCalculationGroup.AlternateAmount2.OutputCurrencyAmount
					LocalWithholdingAmount.AlternateAmount2.EnteredCurrencyRate				= LocalCurrencyCalculationGroup.AlternateAmount2.OutputCurrencyRate
				if (GeneralLedgerCompanyRel.AccountingEntity.AlternateCurrency3 entered)
					LocalWithholdingAmount.AlternateAmount3.EnteredCurrencyAmount			= LocalCurrencyCalculationGroup.AlternateAmount3.OutputCurrencyAmount
					LocalWithholdingAmount.AlternateAmount3.EnteredCurrencyRate				= LocalCurrencyCalculationGroup.AlternateAmount3.OutputCurrencyRate
				if (GeneralLedgerCompanyRel.FinanceEnterpriseGroup.ReportCurrencyOne entered)
					LocalWithholdingAmount.ReportAmount1.EnteredCurrencyAmount				= LocalCurrencyCalculationGroup.ReportAmount1.OutputCurrencyAmount
					LocalWithholdingAmount.ReportAmount1.EnteredCurrencyRate				= LocalCurrencyCalculationGroup.ReportAmount1.OutputCurrencyRate
				if (GeneralLedgerCompanyRel.FinanceEnterpriseGroup.ReportCurrencyTwo entered)
					LocalWithholdingAmount.ReportAmount2.EnteredCurrencyAmount				= LocalCurrencyCalculationGroup.ReportAmount2.OutputCurrencyAmount
					LocalWithholdingAmount.ReportAmount2.EnteredCurrencyRate				= LocalCurrencyCalculationGroup.ReportAmount2.OutputCurrencyRate
				if (GeneralLedgerCompanyRel.FinanceEnterpriseGroup.ReportCurrencyThree entered)
					LocalWithholdingAmount.ReportAmount3.EnteredCurrencyAmount				= LocalCurrencyCalculationGroup.ReportAmount3.OutputCurrencyAmount
					LocalWithholdingAmount.ReportAmount3.EnteredCurrencyRate				= LocalCurrencyCalculationGroup.ReportAmount3.OutputCurrencyRate
				if (GeneralLedgerCompanyRel.FinanceEnterpriseGroup.ReportCurrencyFour entered)
					LocalWithholdingAmount.ReportAmount4.EnteredCurrencyAmount				= LocalCurrencyCalculationGroup.ReportAmount4.OutputCurrencyAmount
					LocalWithholdingAmount.ReportAmount4.EnteredCurrencyRate				= LocalCurrencyCalculationGroup.ReportAmount4.OutputCurrencyRate
				if (GeneralLedgerCompanyRel.FinanceEnterpriseGroup.ReportCurrencyFive entered)
					LocalWithholdingAmount.ReportAmount5.EnteredCurrencyAmount				= LocalCurrencyCalculationGroup.ReportAmount5.OutputCurrencyAmount
					LocalWithholdingAmount.ReportAmount5.EnteredCurrencyRate				= LocalCurrencyCalculationGroup.ReportAmount5.OutputCurrencyRate

		CalculateFundWithholdingCurrencyAmount
			if (Company.GlobalWithholding)
				CalculateWithholdingAmount.PayablesCompany								= Company
				CalculateWithholdingAmount.PayablesInvoice								= PayablesInvoice
				CalculateWithholdingAmount.PayablesInvoicePayment						= PayablesInvoicePayment
				LocalBoolean															= CalculateWithholdingAmount.SummarizePaymentWithholdingAmounts
				LocalWithholdingAmount													= CalculateWithholdingAmount.TotalWithholdingAmount
			else
				if (InvoiceCurrency     != CashCode.Currency)
					LocalExchangeDate													= CheckDate
					LocalFundWithholdingExchange.TransactionAmount						= each.DistributionAmount.CurrencyAmount / PayablesInvoice.InvoiceAmount.CurrencyAmount
					LocalFundWithholdingExchange.TransactionAmount						= LocalFundWithholdingExchange.TransactionAmount * WithholdingAmount
					LocalFundWithholdingExchange.BaseAmount.ToCurrency					= CashCode.Currency
					if (PrmVoidDate entered) 
						LocalFundWithholdingExchange.BaseAmount.EnteredCurrencyRate		= (BankCheckAmount / NetPaymentAmount.CurrencyAmount)
					else
						if (InvoiceCurrency = CashRequirementsResult.InvoiceCurrency
						and CashCode 		= CashRequirementsResult.CashCode
						and CashRequirementsResult.OverridePaymentRate entered)
							LocalFundWithholdingExchange.BaseAmount.EnteredCurrencyRate	= CashRequirementsResult.OverridePaymentRate 
					LocalFundWithhldCurrencyAmount										= LocalFundWithholdingExchange.BaseAmount.OutputCurrencyAmount
				else

					LocalInternalAmount										= each.DistributionAmount.CurrencyAmount / PayablesInvoice.InvoiceAmount.CurrencyAmount
					LocalInternalAmount										= LocalInternalAmount * WithholdingAmount

					LocalFundWithhldCurrencyAmount							= LocalInternalAmount

				LocalCurrencyCalculationGroup.CurrencyAmount							= LocalFundWithhldCurrencyAmount
				LocalFundWithholdingAmount.CurrencyAmount								= LocalFundWithhldCurrencyAmount

				if (PrmVoidDate   entered) 
					LocalCurrencyCalculationGroup.FunctionalAmount.EnteredCurrencyRate		= CashPaymentDistributionsRel.DistributionAmount.FunctionalAmount.EnteredCurrencyRate
					LocalCurrencyCalculationGroup.AlternateAmount.EnteredCurrencyRate		= CashPaymentDistributionsRel.DistributionAmount.AlternateAmount.EnteredCurrencyRate
					LocalCurrencyCalculationGroup.AlternateAmount2.EnteredCurrencyRate		= CashPaymentDistributionsRel.DistributionAmount.AlternateAmount2.EnteredCurrencyRate
					LocalCurrencyCalculationGroup.AlternateAmount3.EnteredCurrencyRate		= CashPaymentDistributionsRel.DistributionAmount.AlternateAmount3.EnteredCurrencyRate
					LocalCurrencyCalculationGroup.ReportAmount1.EnteredCurrencyRate			= CashPaymentDistributionsRel.DistributionAmount.ReportAmount1.EnteredCurrencyRate
					LocalCurrencyCalculationGroup.ReportAmount2.EnteredCurrencyRate			= CashPaymentDistributionsRel.DistributionAmount.ReportAmount2.EnteredCurrencyRate
					LocalCurrencyCalculationGroup.ReportAmount3.EnteredCurrencyRate			= CashPaymentDistributionsRel.DistributionAmount.ReportAmount3.EnteredCurrencyRate
					LocalCurrencyCalculationGroup.ReportAmount4.EnteredCurrencyRate			= CashPaymentDistributionsRel.DistributionAmount.ReportAmount4.EnteredCurrencyRate
					LocalCurrencyCalculationGroup.ReportAmount5.EnteredCurrencyRate			= CashPaymentDistributionsRel.DistributionAmount.ReportAmount5.EnteredCurrencyRate
				LocalFundWithholdingAmount.FunctionalAmount.EnteredCurrencyAmount			= LocalCurrencyCalculationGroup.FunctionalAmount.OutputCurrencyAmount
				LocalFundWithholdingAmount.FunctionalAmount.EnteredCurrencyRate				= LocalCurrencyCalculationGroup.FunctionalAmount.OutputCurrencyRate
				if (GeneralLedgerCompanyRel.AccountingEntity.AlternateCurrency entered)
					LocalFundWithholdingAmount.AlternateAmount.EnteredCurrencyAmount			= LocalCurrencyCalculationGroup.AlternateAmount.OutputCurrencyAmount
					LocalFundWithholdingAmount.AlternateAmount.EnteredCurrencyRate				= LocalCurrencyCalculationGroup.AlternateAmount.OutputCurrencyRate
				if (GeneralLedgerCompanyRel.AccountingEntity.AlternateCurrency2 entered)
					LocalFundWithholdingAmount.AlternateAmount2.EnteredCurrencyAmount			= LocalCurrencyCalculationGroup.AlternateAmount2.OutputCurrencyAmount
					LocalFundWithholdingAmount.AlternateAmount2.EnteredCurrencyRate				= LocalCurrencyCalculationGroup.AlternateAmount2.OutputCurrencyRate
				if (GeneralLedgerCompanyRel.AccountingEntity.AlternateCurrency3 entered)
					LocalFundWithholdingAmount.AlternateAmount3.EnteredCurrencyAmount			= LocalCurrencyCalculationGroup.AlternateAmount3.OutputCurrencyAmount
					LocalFundWithholdingAmount.AlternateAmount3.EnteredCurrencyRate				= LocalCurrencyCalculationGroup.AlternateAmount3.OutputCurrencyRate
				if (GeneralLedgerCompanyRel.FinanceEnterpriseGroup.ReportCurrencyOne entered)
					LocalFundWithholdingAmount.ReportAmount1.EnteredCurrencyAmount				= LocalCurrencyCalculationGroup.ReportAmount1.OutputCurrencyAmount
					LocalFundWithholdingAmount.ReportAmount1.EnteredCurrencyRate				= LocalCurrencyCalculationGroup.ReportAmount1.OutputCurrencyRate
				if (GeneralLedgerCompanyRel.FinanceEnterpriseGroup.ReportCurrencyTwo entered)
					LocalFundWithholdingAmount.ReportAmount2.EnteredCurrencyAmount				= LocalCurrencyCalculationGroup.ReportAmount2.OutputCurrencyAmount
					LocalFundWithholdingAmount.ReportAmount2.EnteredCurrencyRate				= LocalCurrencyCalculationGroup.ReportAmount2.OutputCurrencyRate
				if (GeneralLedgerCompanyRel.FinanceEnterpriseGroup.ReportCurrencyThree entered)
					LocalFundWithholdingAmount.ReportAmount3.EnteredCurrencyAmount				= LocalCurrencyCalculationGroup.ReportAmount3.OutputCurrencyAmount
					LocalFundWithholdingAmount.ReportAmount3.EnteredCurrencyRate				= LocalCurrencyCalculationGroup.ReportAmount3.OutputCurrencyRate
				if (GeneralLedgerCompanyRel.FinanceEnterpriseGroup.ReportCurrencyFour entered)
					LocalFundWithholdingAmount.ReportAmount4.EnteredCurrencyAmount				= LocalCurrencyCalculationGroup.ReportAmount4.OutputCurrencyAmount
					LocalFundWithholdingAmount.ReportAmount4.EnteredCurrencyRate				= LocalCurrencyCalculationGroup.ReportAmount4.OutputCurrencyRate
				if (GeneralLedgerCompanyRel.FinanceEnterpriseGroup.ReportCurrencyFive entered)
					LocalFundWithholdingAmount.ReportAmount5.EnteredCurrencyAmount				= LocalCurrencyCalculationGroup.ReportAmount5.OutputCurrencyAmount
					LocalFundWithholdingAmount.ReportAmount5.EnteredCurrencyRate				= LocalCurrencyCalculationGroup.ReportAmount5.OutputCurrencyRate

				if (!LocalLastDistribution)
					LocalTotalDistributionAmount.CurrencyAmount								-= LocalFundWithholdingAmount.CurrencyAmount
					LocalTotalDistributionAmount.FunctionalAmount.EnteredCurrencyAmount		-= LocalFundWithholdingAmount.FunctionalAmount.EnteredCurrencyAmount
					LocalTotalDistributionAmount.AlternateAmount.EnteredCurrencyAmount		-= LocalFundWithholdingAmount.AlternateAmount.EnteredCurrencyAmount
					LocalTotalDistributionAmount.AlternateAmount2.EnteredCurrencyAmount		-= LocalFundWithholdingAmount.AlternateAmount2.EnteredCurrencyAmount
					LocalTotalDistributionAmount.AlternateAmount3.EnteredCurrencyAmount		-= LocalFundWithholdingAmount.AlternateAmount3.EnteredCurrencyAmount
					LocalTotalDistributionAmount.ToFunctionalAmount.EnteredCurrencyAmount	-= LocalFundWithholdingAmount.ToFunctionalAmount.EnteredCurrencyAmount
					LocalTotalDistributionAmount.ReportAmount1.EnteredCurrencyAmount		-= LocalFundWithholdingAmount.ReportAmount1.EnteredCurrencyAmount
					LocalTotalDistributionAmount.ReportAmount2.EnteredCurrencyAmount		-= LocalFundWithholdingAmount.ReportAmount2.EnteredCurrencyAmount
					LocalTotalDistributionAmount.ReportAmount3.EnteredCurrencyAmount		-= LocalFundWithholdingAmount.ReportAmount3.EnteredCurrencyAmount
					LocalTotalDistributionAmount.ReportAmount4.EnteredCurrencyAmount		-= LocalFundWithholdingAmount.ReportAmount4.EnteredCurrencyAmount
					LocalTotalDistributionAmount.ReportAmount5.EnteredCurrencyAmount		-= LocalFundWithholdingAmount.ReportAmount5.EnteredCurrencyAmount

		CalculateFundSecondaryWithholdingCurrencyAmount
			if (InvoiceCurrency     != CashCode.Currency)
				LocalExchangeDate													= CheckDate
				LocalFundWithholdingExchange.TransactionAmount						= each.DistributionAmount.CurrencyAmount / PayablesInvoice.InvoiceAmount.CurrencyAmount
				LocalFundWithholdingExchange.TransactionAmount						= LocalFundWithholdingExchange.TransactionAmount * LocalSecondaryWithholdingTransactionAmount
				LocalFundWithholdingExchange.BaseAmount.ToCurrency					= CashCode.Currency
				if (PrmVoidDate entered) 
					LocalFundWithholdingExchange.BaseAmount.EnteredCurrencyRate		= (BankCheckAmount / NetPaymentAmount.CurrencyAmount)
				else
					if (InvoiceCurrency = CashRequirementsResult.InvoiceCurrency
					and CashCode 		= CashRequirementsResult.CashCode
					and CashRequirementsResult.OverridePaymentRate entered)
						LocalFundWithholdingExchange.BaseAmount.EnteredCurrencyRate	= CashRequirementsResult.OverridePaymentRate 
				LocalFundWithhldCurrencyAmount										= LocalFundWithholdingExchange.BaseAmount.OutputCurrencyAmount
			else

				LocalInternalAmount										= each.DistributionAmount.CurrencyAmount / PayablesInvoice.InvoiceAmount.CurrencyAmount
				LocalInternalAmount										= LocalInternalAmount * LocalSecondaryWithholdingTransactionAmount

				LocalFundWithhldCurrencyAmount							= LocalInternalAmount

			LocalCurrencyCalculationGroup.CurrencyAmount							= LocalFundWithhldCurrencyAmount
			LocalFundWithholdingAmount.CurrencyAmount								= LocalFundWithhldCurrencyAmount

			if (PrmVoidDate   entered) 
				LocalCurrencyCalculationGroup.FunctionalAmount.EnteredCurrencyRate		= CashPaymentDistributionsRel.DistributionAmount.FunctionalAmount.EnteredCurrencyRate
				LocalCurrencyCalculationGroup.AlternateAmount.EnteredCurrencyRate		= CashPaymentDistributionsRel.DistributionAmount.AlternateAmount.EnteredCurrencyRate
				LocalCurrencyCalculationGroup.AlternateAmount2.EnteredCurrencyRate		= CashPaymentDistributionsRel.DistributionAmount.AlternateAmount2.EnteredCurrencyRate
				LocalCurrencyCalculationGroup.AlternateAmount3.EnteredCurrencyRate		= CashPaymentDistributionsRel.DistributionAmount.AlternateAmount3.EnteredCurrencyRate
				LocalCurrencyCalculationGroup.ReportAmount1.EnteredCurrencyRate			= CashPaymentDistributionsRel.DistributionAmount.ReportAmount1.EnteredCurrencyRate
				LocalCurrencyCalculationGroup.ReportAmount2.EnteredCurrencyRate			= CashPaymentDistributionsRel.DistributionAmount.ReportAmount2.EnteredCurrencyRate
				LocalCurrencyCalculationGroup.ReportAmount3.EnteredCurrencyRate			= CashPaymentDistributionsRel.DistributionAmount.ReportAmount3.EnteredCurrencyRate
				LocalCurrencyCalculationGroup.ReportAmount4.EnteredCurrencyRate			= CashPaymentDistributionsRel.DistributionAmount.ReportAmount4.EnteredCurrencyRate
				LocalCurrencyCalculationGroup.ReportAmount5.EnteredCurrencyRate			= CashPaymentDistributionsRel.DistributionAmount.ReportAmount5.EnteredCurrencyRate
			LocalFundWithholdingAmount.FunctionalAmount.EnteredCurrencyAmount			= LocalCurrencyCalculationGroup.FunctionalAmount.OutputCurrencyAmount
			LocalFundWithholdingAmount.FunctionalAmount.EnteredCurrencyRate				= LocalCurrencyCalculationGroup.FunctionalAmount.OutputCurrencyRate
			if (GeneralLedgerCompanyRel.AccountingEntity.AlternateCurrency entered)
				LocalFundWithholdingAmount.AlternateAmount.EnteredCurrencyAmount			= LocalCurrencyCalculationGroup.AlternateAmount.OutputCurrencyAmount
				LocalFundWithholdingAmount.AlternateAmount.EnteredCurrencyRate				= LocalCurrencyCalculationGroup.AlternateAmount.OutputCurrencyRate
			if (GeneralLedgerCompanyRel.AccountingEntity.AlternateCurrency2 entered)
				LocalFundWithholdingAmount.AlternateAmount2.EnteredCurrencyAmount			= LocalCurrencyCalculationGroup.AlternateAmount2.OutputCurrencyAmount
				LocalFundWithholdingAmount.AlternateAmount2.EnteredCurrencyRate				= LocalCurrencyCalculationGroup.AlternateAmount2.OutputCurrencyRate
			if (GeneralLedgerCompanyRel.AccountingEntity.AlternateCurrency3 entered)
				LocalFundWithholdingAmount.AlternateAmount3.EnteredCurrencyAmount			= LocalCurrencyCalculationGroup.AlternateAmount3.OutputCurrencyAmount
				LocalFundWithholdingAmount.AlternateAmount3.EnteredCurrencyRate				= LocalCurrencyCalculationGroup.AlternateAmount3.OutputCurrencyRate
			if (GeneralLedgerCompanyRel.FinanceEnterpriseGroup.ReportCurrencyOne entered)
				LocalFundWithholdingAmount.ReportAmount1.EnteredCurrencyAmount				= LocalCurrencyCalculationGroup.ReportAmount1.OutputCurrencyAmount
				LocalFundWithholdingAmount.ReportAmount1.EnteredCurrencyRate				= LocalCurrencyCalculationGroup.ReportAmount1.OutputCurrencyRate
			if (GeneralLedgerCompanyRel.FinanceEnterpriseGroup.ReportCurrencyTwo entered)
				LocalFundWithholdingAmount.ReportAmount2.EnteredCurrencyAmount				= LocalCurrencyCalculationGroup.ReportAmount2.OutputCurrencyAmount
				LocalFundWithholdingAmount.ReportAmount2.EnteredCurrencyRate				= LocalCurrencyCalculationGroup.ReportAmount2.OutputCurrencyRate
			if (GeneralLedgerCompanyRel.FinanceEnterpriseGroup.ReportCurrencyThree entered)
				LocalFundWithholdingAmount.ReportAmount3.EnteredCurrencyAmount				= LocalCurrencyCalculationGroup.ReportAmount3.OutputCurrencyAmount
				LocalFundWithholdingAmount.ReportAmount3.EnteredCurrencyRate				= LocalCurrencyCalculationGroup.ReportAmount3.OutputCurrencyRate
			if (GeneralLedgerCompanyRel.FinanceEnterpriseGroup.ReportCurrencyFour entered)
				LocalFundWithholdingAmount.ReportAmount4.EnteredCurrencyAmount				= LocalCurrencyCalculationGroup.ReportAmount4.OutputCurrencyAmount
				LocalFundWithholdingAmount.ReportAmount4.EnteredCurrencyRate				= LocalCurrencyCalculationGroup.ReportAmount4.OutputCurrencyRate
			if (GeneralLedgerCompanyRel.FinanceEnterpriseGroup.ReportCurrencyFive entered)
				LocalFundWithholdingAmount.ReportAmount5.EnteredCurrencyAmount				= LocalCurrencyCalculationGroup.ReportAmount5.OutputCurrencyAmount
				LocalFundWithholdingAmount.ReportAmount5.EnteredCurrencyRate				= LocalCurrencyCalculationGroup.ReportAmount5.OutputCurrencyRate

			if (!LocalLastDistribution)
				LocalTotalDistributionAmount.CurrencyAmount								-= LocalFundWithholdingAmount.CurrencyAmount
				LocalTotalDistributionAmount.FunctionalAmount.EnteredCurrencyAmount		-= LocalFundWithholdingAmount.FunctionalAmount.EnteredCurrencyAmount
				LocalTotalDistributionAmount.AlternateAmount.EnteredCurrencyAmount		-= LocalFundWithholdingAmount.AlternateAmount.EnteredCurrencyAmount
				LocalTotalDistributionAmount.AlternateAmount2.EnteredCurrencyAmount		-= LocalFundWithholdingAmount.AlternateAmount2.EnteredCurrencyAmount
				LocalTotalDistributionAmount.AlternateAmount3.EnteredCurrencyAmount		-= LocalFundWithholdingAmount.AlternateAmount3.EnteredCurrencyAmount
				LocalTotalDistributionAmount.ToFunctionalAmount.EnteredCurrencyAmount	-= LocalFundWithholdingAmount.ToFunctionalAmount.EnteredCurrencyAmount
				LocalTotalDistributionAmount.ReportAmount1.EnteredCurrencyAmount		-= LocalFundWithholdingAmount.ReportAmount1.EnteredCurrencyAmount
				LocalTotalDistributionAmount.ReportAmount2.EnteredCurrencyAmount		-= LocalFundWithholdingAmount.ReportAmount2.EnteredCurrencyAmount
				LocalTotalDistributionAmount.ReportAmount3.EnteredCurrencyAmount		-= LocalFundWithholdingAmount.ReportAmount3.EnteredCurrencyAmount
				LocalTotalDistributionAmount.ReportAmount4.EnteredCurrencyAmount		-= LocalFundWithholdingAmount.ReportAmount4.EnteredCurrencyAmount
				LocalTotalDistributionAmount.ReportAmount5.EnteredCurrencyAmount		-= LocalFundWithholdingAmount.ReportAmount5.EnteredCurrencyAmount

		CalculateFATCAWithholdingCurrencyAmount			
			if (InvoiceCurrency	!= CashCode.Currency)
				LocalExchangeDate											= CheckDate
				LocalFATCAWithholdingExchange.TransactionAmount				= FATCATransactionIncomeAmount
				LocalFATCAWithholdingExchange.BaseAmount.ToCurrency			= CashCode.Currency
				if (PrmVoidDate entered)	
					LocalFATCAWithholdingExchange.BaseAmount.EnteredCurrencyRate	= (BankCheckAmount / NetPaymentAmount.CurrencyAmount)
				else
					if (InvoiceCurrency = CashRequirementsResult.InvoiceCurrency
					and CashCode 		= CashRequirementsResult.CashCode
					and CashRequirementsResult.OverridePaymentRate entered)
						LocalFATCAWithholdingExchange.BaseAmount.EnteredCurrencyRate	= CashRequirementsResult.OverridePaymentRate 
				LocalFATCAWithhldCurrencyAmount								= LocalFATCAWithholdingExchange.BaseAmount.OutputCurrencyAmount
			else
				LocalFATCAWithhldCurrencyAmount								= FATCATransactionIncomeAmount

			LocalCurrencyCalculationGroup.CurrencyAmount							= LocalFATCAWithhldCurrencyAmount
			LocalFATCAWithholdingAmount.CurrencyAmount	   							= LocalFATCAWithhldCurrencyAmount
			if (PrmVoidDate	entered)	
				LocalCurrencyCalculationGroup.FunctionalAmount.EnteredCurrencyRate	= CashPaymentDistributionsRel.DistributionAmount.FunctionalAmount.EnteredCurrencyRate
				LocalCurrencyCalculationGroup.AlternateAmount.EnteredCurrencyRate	= CashPaymentDistributionsRel.DistributionAmount.AlternateAmount.EnteredCurrencyRate
				LocalCurrencyCalculationGroup.AlternateAmount2.EnteredCurrencyRate	= CashPaymentDistributionsRel.DistributionAmount.AlternateAmount2.EnteredCurrencyRate
				LocalCurrencyCalculationGroup.AlternateAmount3.EnteredCurrencyRate	= CashPaymentDistributionsRel.DistributionAmount.AlternateAmount3.EnteredCurrencyRate
				LocalCurrencyCalculationGroup.ReportAmount1.EnteredCurrencyRate		= CashPaymentDistributionsRel.DistributionAmount.ReportAmount1.EnteredCurrencyRate
				LocalCurrencyCalculationGroup.ReportAmount2.EnteredCurrencyRate		= CashPaymentDistributionsRel.DistributionAmount.ReportAmount2.EnteredCurrencyRate
				LocalCurrencyCalculationGroup.ReportAmount3.EnteredCurrencyRate		= CashPaymentDistributionsRel.DistributionAmount.ReportAmount3.EnteredCurrencyRate
				LocalCurrencyCalculationGroup.ReportAmount4.EnteredCurrencyRate		= CashPaymentDistributionsRel.DistributionAmount.ReportAmount4.EnteredCurrencyRate
				LocalCurrencyCalculationGroup.ReportAmount5.EnteredCurrencyRate		= CashPaymentDistributionsRel.DistributionAmount.ReportAmount5.EnteredCurrencyRate
			LocalFATCAWithholdingAmount.FunctionalAmount.EnteredCurrencyAmount		= LocalCurrencyCalculationGroup.FunctionalAmount.OutputCurrencyAmount
			LocalFATCAWithholdingAmount.FunctionalAmount.EnteredCurrencyRate		= LocalCurrencyCalculationGroup.FunctionalAmount.OutputCurrencyRate
			if (GeneralLedgerCompanyRel.AccountingEntity.AlternateCurrency entered)
				LocalFATCAWithholdingAmount.AlternateAmount.EnteredCurrencyAmount  	= LocalCurrencyCalculationGroup.AlternateAmount.OutputCurrencyAmount
				LocalFATCAWithholdingAmount.AlternateAmount.EnteredCurrencyRate  	= LocalCurrencyCalculationGroup.AlternateAmount.OutputCurrencyRate
			if (GeneralLedgerCompanyRel.AccountingEntity.AlternateCurrency2 entered)
				LocalFATCAWithholdingAmount.AlternateAmount2.EnteredCurrencyAmount 	= LocalCurrencyCalculationGroup.AlternateAmount2.OutputCurrencyAmount
				LocalFATCAWithholdingAmount.AlternateAmount2.EnteredCurrencyRate 	= LocalCurrencyCalculationGroup.AlternateAmount2.OutputCurrencyRate
			if (GeneralLedgerCompanyRel.AccountingEntity.AlternateCurrency3 entered)
				LocalFATCAWithholdingAmount.AlternateAmount3.EnteredCurrencyAmount	= LocalCurrencyCalculationGroup.AlternateAmount3.OutputCurrencyAmount
				LocalFATCAWithholdingAmount.AlternateAmount3.EnteredCurrencyRate	= LocalCurrencyCalculationGroup.AlternateAmount3.OutputCurrencyRate
			if (GeneralLedgerCompanyRel.FinanceEnterpriseGroup.ReportCurrencyOne entered)
				LocalFATCAWithholdingAmount.ReportAmount1.EnteredCurrencyAmount    	= LocalCurrencyCalculationGroup.ReportAmount1.OutputCurrencyAmount
				LocalFATCAWithholdingAmount.ReportAmount1.EnteredCurrencyRate    	= LocalCurrencyCalculationGroup.ReportAmount1.OutputCurrencyRate
			if (GeneralLedgerCompanyRel.FinanceEnterpriseGroup.ReportCurrencyTwo entered)
				LocalFATCAWithholdingAmount.ReportAmount2.EnteredCurrencyAmount    	= LocalCurrencyCalculationGroup.ReportAmount2.OutputCurrencyAmount
				LocalFATCAWithholdingAmount.ReportAmount2.EnteredCurrencyRate    	= LocalCurrencyCalculationGroup.ReportAmount2.OutputCurrencyRate
			if (GeneralLedgerCompanyRel.FinanceEnterpriseGroup.ReportCurrencyThree entered)
				LocalFATCAWithholdingAmount.ReportAmount3.EnteredCurrencyAmount		= LocalCurrencyCalculationGroup.ReportAmount3.OutputCurrencyAmount
				LocalFATCAWithholdingAmount.ReportAmount3.EnteredCurrencyRate		= LocalCurrencyCalculationGroup.ReportAmount3.OutputCurrencyRate
			if (GeneralLedgerCompanyRel.FinanceEnterpriseGroup.ReportCurrencyFour entered)
				LocalFATCAWithholdingAmount.ReportAmount4.EnteredCurrencyAmount		= LocalCurrencyCalculationGroup.ReportAmount4.OutputCurrencyAmount
				LocalFATCAWithholdingAmount.ReportAmount4.EnteredCurrencyRate		= LocalCurrencyCalculationGroup.ReportAmount4.OutputCurrencyRate
			if (GeneralLedgerCompanyRel.FinanceEnterpriseGroup.ReportCurrencyFive entered)
				LocalFATCAWithholdingAmount.ReportAmount5.EnteredCurrencyAmount		= LocalCurrencyCalculationGroup.ReportAmount5.OutputCurrencyAmount
				LocalFATCAWithholdingAmount.ReportAmount5.EnteredCurrencyRate		= LocalCurrencyCalculationGroup.ReportAmount5.OutputCurrencyRate

		CalculateFATCAFundWithholdingCurrencyAmount
			if (InvoiceCurrency	!= CashCode.Currency)
				LocalExchangeDate											= CheckDate
				LocalFATCAWithholdingExchange.TransactionAmount					= FATCATransactionIncomeAmount
				LocalFATCAWithholdingExchange.BaseAmount.ToCurrency				= CashCode.Currency
				if (PrmVoidDate entered)	
					LocalFATCAWithholdingExchange.BaseAmount.EnteredCurrencyRate	= (each.DistributionAmount.CurrencyAmount / PaymentAmount.CurrencyAmount)
				else
					if (InvoiceCurrency = CashRequirementsResult.InvoiceCurrency
					and CashCode 		= CashRequirementsResult.CashCode
					and CashRequirementsResult.OverridePaymentRate entered)
						LocalFATCAWithholdingExchange.BaseAmount.EnteredCurrencyRate	= CashRequirementsResult.OverridePaymentRate 
				LocalFATCAWithhldCurrencyAmount								= LocalFATCAWithholdingExchange.BaseAmount.OutputCurrencyAmount
			else
				LocalFATCAWithhldCurrencyAmount								= (each.DistributionAmount.CurrencyAmount / PaymentAmount.CurrencyAmount)
				LocalFATCAWithhldCurrencyAmount								= LocalFATCAWithhldCurrencyAmount * FATCATransactionIncomeAmount

			LocalCurrencyCalculationGroup.CurrencyAmount							= LocalFATCAWithhldCurrencyAmount
			LocalFATCAWithholdingAmount.CurrencyAmount	   							= LocalFATCAWithhldCurrencyAmount
			if (PrmVoidDate	entered)	
				LocalCurrencyCalculationGroup.FunctionalAmount.EnteredCurrencyRate	= CashPaymentDistributionsRel.DistributionAmount.FunctionalAmount.EnteredCurrencyRate
				LocalCurrencyCalculationGroup.AlternateAmount.EnteredCurrencyRate	= CashPaymentDistributionsRel.DistributionAmount.AlternateAmount.EnteredCurrencyRate
				LocalCurrencyCalculationGroup.AlternateAmount2.EnteredCurrencyRate	= CashPaymentDistributionsRel.DistributionAmount.AlternateAmount2.EnteredCurrencyRate
				LocalCurrencyCalculationGroup.AlternateAmount3.EnteredCurrencyRate	= CashPaymentDistributionsRel.DistributionAmount.AlternateAmount3.EnteredCurrencyRate
				LocalCurrencyCalculationGroup.ReportAmount1.EnteredCurrencyRate		= CashPaymentDistributionsRel.DistributionAmount.ReportAmount1.EnteredCurrencyRate
				LocalCurrencyCalculationGroup.ReportAmount2.EnteredCurrencyRate		= CashPaymentDistributionsRel.DistributionAmount.ReportAmount2.EnteredCurrencyRate
				LocalCurrencyCalculationGroup.ReportAmount3.EnteredCurrencyRate		= CashPaymentDistributionsRel.DistributionAmount.ReportAmount3.EnteredCurrencyRate
				LocalCurrencyCalculationGroup.ReportAmount4.EnteredCurrencyRate		= CashPaymentDistributionsRel.DistributionAmount.ReportAmount4.EnteredCurrencyRate
				LocalCurrencyCalculationGroup.ReportAmount5.EnteredCurrencyRate		= CashPaymentDistributionsRel.DistributionAmount.ReportAmount5.EnteredCurrencyRate
			LocalFATCAWithholdingAmount.FunctionalAmount.EnteredCurrencyAmount		= LocalCurrencyCalculationGroup.FunctionalAmount.OutputCurrencyAmount
			LocalFATCAWithholdingAmount.FunctionalAmount.EnteredCurrencyRate		= LocalCurrencyCalculationGroup.FunctionalAmount.OutputCurrencyRate
			if (GeneralLedgerCompanyRel.AccountingEntity.AlternateCurrency entered)
				LocalFATCAWithholdingAmount.AlternateAmount.EnteredCurrencyAmount  	= LocalCurrencyCalculationGroup.AlternateAmount.OutputCurrencyAmount
				LocalFATCAWithholdingAmount.AlternateAmount.EnteredCurrencyRate  	= LocalCurrencyCalculationGroup.AlternateAmount.OutputCurrencyRate
			if (GeneralLedgerCompanyRel.AccountingEntity.AlternateCurrency2 entered)
				LocalFATCAWithholdingAmount.AlternateAmount2.EnteredCurrencyAmount 	= LocalCurrencyCalculationGroup.AlternateAmount2.OutputCurrencyAmount
				LocalFATCAWithholdingAmount.AlternateAmount2.EnteredCurrencyRate 	= LocalCurrencyCalculationGroup.AlternateAmount2.OutputCurrencyRate
			if (GeneralLedgerCompanyRel.AccountingEntity.AlternateCurrency3 entered)
				LocalFATCAWithholdingAmount.AlternateAmount3.EnteredCurrencyAmount	= LocalCurrencyCalculationGroup.AlternateAmount3.OutputCurrencyAmount
				LocalFATCAWithholdingAmount.AlternateAmount3.EnteredCurrencyRate	= LocalCurrencyCalculationGroup.AlternateAmount3.OutputCurrencyRate
			if (GeneralLedgerCompanyRel.FinanceEnterpriseGroup.ReportCurrencyOne entered)
				LocalFATCAWithholdingAmount.ReportAmount1.EnteredCurrencyAmount    	= LocalCurrencyCalculationGroup.ReportAmount1.OutputCurrencyAmount
				LocalFATCAWithholdingAmount.ReportAmount1.EnteredCurrencyRate    	= LocalCurrencyCalculationGroup.ReportAmount1.OutputCurrencyRate
			if (GeneralLedgerCompanyRel.FinanceEnterpriseGroup.ReportCurrencyTwo entered)
				LocalFATCAWithholdingAmount.ReportAmount2.EnteredCurrencyAmount    	= LocalCurrencyCalculationGroup.ReportAmount2.OutputCurrencyAmount
				LocalFATCAWithholdingAmount.ReportAmount2.EnteredCurrencyRate    	= LocalCurrencyCalculationGroup.ReportAmount2.OutputCurrencyRate
			if (GeneralLedgerCompanyRel.FinanceEnterpriseGroup.ReportCurrencyThree entered)
				LocalFATCAWithholdingAmount.ReportAmount3.EnteredCurrencyAmount		= LocalCurrencyCalculationGroup.ReportAmount3.OutputCurrencyAmount
				LocalFATCAWithholdingAmount.ReportAmount3.EnteredCurrencyRate		= LocalCurrencyCalculationGroup.ReportAmount3.OutputCurrencyRate
			if (GeneralLedgerCompanyRel.FinanceEnterpriseGroup.ReportCurrencyFour entered)
				LocalFATCAWithholdingAmount.ReportAmount4.EnteredCurrencyAmount		= LocalCurrencyCalculationGroup.ReportAmount4.OutputCurrencyAmount
				LocalFATCAWithholdingAmount.ReportAmount4.EnteredCurrencyRate		= LocalCurrencyCalculationGroup.ReportAmount4.OutputCurrencyRate
			if (GeneralLedgerCompanyRel.FinanceEnterpriseGroup.ReportCurrencyFive entered)
				LocalFATCAWithholdingAmount.ReportAmount5.EnteredCurrencyAmount		= LocalCurrencyCalculationGroup.ReportAmount5.OutputCurrencyAmount
				LocalFATCAWithholdingAmount.ReportAmount5.EnteredCurrencyRate		= LocalCurrencyCalculationGroup.ReportAmount5.OutputCurrencyRate

			if (!LocalLastDistribution)
				LocalTotalDistributionAmount.CurrencyAmount								-= LocalFATCAWithholdingAmount.CurrencyAmount
				LocalTotalDistributionAmount.FunctionalAmount.EnteredCurrencyAmount		-= LocalFATCAWithholdingAmount.FunctionalAmount.EnteredCurrencyAmount
				LocalTotalDistributionAmount.AlternateAmount.EnteredCurrencyAmount		-= LocalFATCAWithholdingAmount.AlternateAmount.EnteredCurrencyAmount
				LocalTotalDistributionAmount.AlternateAmount2.EnteredCurrencyAmount		-= LocalFATCAWithholdingAmount.AlternateAmount2.EnteredCurrencyAmount
				LocalTotalDistributionAmount.AlternateAmount3.EnteredCurrencyAmount		-= LocalFATCAWithholdingAmount.AlternateAmount3.EnteredCurrencyAmount
				LocalTotalDistributionAmount.ToFunctionalAmount.EnteredCurrencyAmount	-= LocalFATCAWithholdingAmount.ToFunctionalAmount.EnteredCurrencyAmount
				LocalTotalDistributionAmount.ReportAmount1.EnteredCurrencyAmount		-= LocalFATCAWithholdingAmount.ReportAmount1.EnteredCurrencyAmount
				LocalTotalDistributionAmount.ReportAmount2.EnteredCurrencyAmount		-= LocalFATCAWithholdingAmount.ReportAmount2.EnteredCurrencyAmount
				LocalTotalDistributionAmount.ReportAmount3.EnteredCurrencyAmount		-= LocalFATCAWithholdingAmount.ReportAmount3.EnteredCurrencyAmount
				LocalTotalDistributionAmount.ReportAmount4.EnteredCurrencyAmount		-= LocalFATCAWithholdingAmount.ReportAmount4.EnteredCurrencyAmount
				LocalTotalDistributionAmount.ReportAmount5.EnteredCurrencyAmount		-= LocalFATCAWithholdingAmount.ReportAmount5.EnteredCurrencyAmount

		CalculateLocalWithholdingAmount
			LocalCurrencyCalculationGroup.CurrencyAmount							= LocalWithholdingCurrencyAmount
			LocalWithholdingAmount.CurrencyAmount	    							= LocalWithholdingCurrencyAmount
			if (PrmVoidDate	entered)	
				LocalCurrencyCalculationGroup.FunctionalAmount.EnteredCurrencyRate	= CashPaymentDistributionsRel.DistributionAmount.FunctionalAmount.EnteredCurrencyRate
				LocalCurrencyCalculationGroup.AlternateAmount.EnteredCurrencyRate	= CashPaymentDistributionsRel.DistributionAmount.AlternateAmount.EnteredCurrencyRate
				LocalCurrencyCalculationGroup.AlternateAmount2.EnteredCurrencyRate	= CashPaymentDistributionsRel.DistributionAmount.AlternateAmount2.EnteredCurrencyRate
				LocalCurrencyCalculationGroup.AlternateAmount3.EnteredCurrencyRate	= CashPaymentDistributionsRel.DistributionAmount.AlternateAmount3.EnteredCurrencyRate
				LocalCurrencyCalculationGroup.ReportAmount1.EnteredCurrencyRate		= CashPaymentDistributionsRel.DistributionAmount.ReportAmount1.EnteredCurrencyRate
				LocalCurrencyCalculationGroup.ReportAmount2.EnteredCurrencyRate		= CashPaymentDistributionsRel.DistributionAmount.ReportAmount2.EnteredCurrencyRate
				LocalCurrencyCalculationGroup.ReportAmount3.EnteredCurrencyRate		= CashPaymentDistributionsRel.DistributionAmount.ReportAmount3.EnteredCurrencyRate
				LocalCurrencyCalculationGroup.ReportAmount4.EnteredCurrencyRate		= CashPaymentDistributionsRel.DistributionAmount.ReportAmount4.EnteredCurrencyRate
				LocalCurrencyCalculationGroup.ReportAmount5.EnteredCurrencyRate		= CashPaymentDistributionsRel.DistributionAmount.ReportAmount5.EnteredCurrencyRate
			LocalWithholdingAmount.FunctionalAmount.EnteredCurrencyAmount	    	= LocalCurrencyCalculationGroup.FunctionalAmount.OutputCurrencyAmount
			LocalWithholdingAmount.FunctionalAmount.EnteredCurrencyRate		    	= LocalCurrencyCalculationGroup.FunctionalAmount.OutputCurrencyRate
			if (GeneralLedgerCompanyRel.AccountingEntity.AlternateCurrency entered)
				LocalWithholdingAmount.AlternateAmount.EnteredCurrencyAmount      		= LocalCurrencyCalculationGroup.AlternateAmount.OutputCurrencyAmount
				LocalWithholdingAmount.AlternateAmount.EnteredCurrencyRate      		= LocalCurrencyCalculationGroup.AlternateAmount.OutputCurrencyRate
			if (GeneralLedgerCompanyRel.AccountingEntity.AlternateCurrency2 entered)
				LocalWithholdingAmount.AlternateAmount2.EnteredCurrencyAmount     		= LocalCurrencyCalculationGroup.AlternateAmount2.OutputCurrencyAmount
				LocalWithholdingAmount.AlternateAmount2.EnteredCurrencyRate     		= LocalCurrencyCalculationGroup.AlternateAmount2.OutputCurrencyRate
			if (GeneralLedgerCompanyRel.AccountingEntity.AlternateCurrency3 entered)
				LocalWithholdingAmount.AlternateAmount3.EnteredCurrencyAmount			= LocalCurrencyCalculationGroup.AlternateAmount3.OutputCurrencyAmount
				LocalWithholdingAmount.AlternateAmount3.EnteredCurrencyRate				= LocalCurrencyCalculationGroup.AlternateAmount3.OutputCurrencyRate
			if (GeneralLedgerCompanyRel.FinanceEnterpriseGroup.ReportCurrencyOne entered)
				LocalWithholdingAmount.ReportAmount1.EnteredCurrencyAmount     			= LocalCurrencyCalculationGroup.ReportAmount1.OutputCurrencyAmount
				LocalWithholdingAmount.ReportAmount1.EnteredCurrencyRate     			= LocalCurrencyCalculationGroup.ReportAmount1.OutputCurrencyRate
			if (GeneralLedgerCompanyRel.FinanceEnterpriseGroup.ReportCurrencyTwo entered)
				LocalWithholdingAmount.ReportAmount2.EnteredCurrencyAmount      		= LocalCurrencyCalculationGroup.ReportAmount2.OutputCurrencyAmount
				LocalWithholdingAmount.ReportAmount2.EnteredCurrencyRate      			= LocalCurrencyCalculationGroup.ReportAmount2.OutputCurrencyRate
			if (GeneralLedgerCompanyRel.FinanceEnterpriseGroup.ReportCurrencyThree entered)
				LocalWithholdingAmount.ReportAmount3.EnteredCurrencyAmount				= LocalCurrencyCalculationGroup.ReportAmount3.OutputCurrencyAmount
				LocalWithholdingAmount.ReportAmount3.EnteredCurrencyRate				= LocalCurrencyCalculationGroup.ReportAmount3.OutputCurrencyRate
			if (GeneralLedgerCompanyRel.FinanceEnterpriseGroup.ReportCurrencyFour entered)
				LocalWithholdingAmount.ReportAmount4.EnteredCurrencyAmount				= LocalCurrencyCalculationGroup.ReportAmount4.OutputCurrencyAmount
				LocalWithholdingAmount.ReportAmount4.EnteredCurrencyRate				= LocalCurrencyCalculationGroup.ReportAmount4.OutputCurrencyRate
			if (GeneralLedgerCompanyRel.FinanceEnterpriseGroup.ReportCurrencyFive entered)
				LocalWithholdingAmount.ReportAmount5.EnteredCurrencyAmount				= LocalCurrencyCalculationGroup.ReportAmount5.OutputCurrencyAmount
				LocalWithholdingAmount.ReportAmount5.EnteredCurrencyRate				= LocalCurrencyCalculationGroup.ReportAmount5.OutputCurrencyRate

		CalculateSecondaryWithholdingCurrencyAmount1
			if (InvoiceCurrency	!= CashCode.Currency)
				LocalExchangeDate											= CheckDate
				LocalSecondaryWithholdingExchange1.TransactionAmount		= SecondaryWithholdingTransactionAmount1
				LocalSecondaryWithholdingExchange1.BaseAmount.ToCurrency	= CashCode.Currency
				if (PrmVoidDate entered)	
					LocalSecondaryWithholdingExchange1.BaseAmount.EnteredCurrencyRate	= (BankCheckAmount / NetPaymentAmount.CurrencyAmount)
				else
					if (InvoiceCurrency = CashRequirementsResult.InvoiceCurrency
					and CashCode 		= CashRequirementsResult.CashCode
					and CashRequirementsResult.OverridePaymentRate entered)
						LocalSecondaryWithholdingExchange1.BaseAmount.EnteredCurrencyRate	= CashRequirementsResult.OverridePaymentRate 
				LocalSecondaryWithhldCurrencyAmount1						= LocalSecondaryWithholdingExchange1.BaseAmount.OutputCurrencyAmount
			else
				LocalSecondaryWithhldCurrencyAmount1						= SecondaryWithholdingTransactionAmount1
			LocalCurrencyCalculationGroup.CurrencyAmount							= LocalSecondaryWithhldCurrencyAmount1
			LocalSecondaryWithholdingAmount1.CurrencyAmount	   						= LocalSecondaryWithhldCurrencyAmount1
			if (PrmVoidDate	entered)	
				LocalCurrencyCalculationGroup.FunctionalAmount.EnteredCurrencyRate	= CashPaymentDistributionsRel.DistributionAmount.FunctionalAmount.EnteredCurrencyRate
				LocalCurrencyCalculationGroup.AlternateAmount.EnteredCurrencyRate	= CashPaymentDistributionsRel.DistributionAmount.AlternateAmount.EnteredCurrencyRate
				LocalCurrencyCalculationGroup.AlternateAmount2.EnteredCurrencyRate	= CashPaymentDistributionsRel.DistributionAmount.AlternateAmount2.EnteredCurrencyRate
				LocalCurrencyCalculationGroup.AlternateAmount3.EnteredCurrencyRate	= CashPaymentDistributionsRel.DistributionAmount.AlternateAmount3.EnteredCurrencyRate
				LocalCurrencyCalculationGroup.ReportAmount1.EnteredCurrencyRate		= CashPaymentDistributionsRel.DistributionAmount.ReportAmount1.EnteredCurrencyRate
				LocalCurrencyCalculationGroup.ReportAmount2.EnteredCurrencyRate		= CashPaymentDistributionsRel.DistributionAmount.ReportAmount2.EnteredCurrencyRate
				LocalCurrencyCalculationGroup.ReportAmount3.EnteredCurrencyRate		= CashPaymentDistributionsRel.DistributionAmount.ReportAmount3.EnteredCurrencyRate
				LocalCurrencyCalculationGroup.ReportAmount4.EnteredCurrencyRate		= CashPaymentDistributionsRel.DistributionAmount.ReportAmount4.EnteredCurrencyRate
				LocalCurrencyCalculationGroup.ReportAmount5.EnteredCurrencyRate		= CashPaymentDistributionsRel.DistributionAmount.ReportAmount5.EnteredCurrencyRate
			LocalSecondaryWithholdingAmount1.FunctionalAmount.EnteredCurrencyAmount	= LocalCurrencyCalculationGroup.FunctionalAmount.OutputCurrencyAmount
			LocalSecondaryWithholdingAmount1.FunctionalAmount.EnteredCurrencyRate	= LocalCurrencyCalculationGroup.FunctionalAmount.OutputCurrencyRate
			if (GeneralLedgerCompanyRel.AccountingEntity.AlternateCurrency entered)
				LocalSecondaryWithholdingAmount1.AlternateAmount.EnteredCurrencyAmount  = LocalCurrencyCalculationGroup.AlternateAmount.OutputCurrencyAmount
				LocalSecondaryWithholdingAmount1.AlternateAmount.EnteredCurrencyRate  	= LocalCurrencyCalculationGroup.AlternateAmount.OutputCurrencyRate
			if (GeneralLedgerCompanyRel.AccountingEntity.AlternateCurrency2 entered)
				LocalSecondaryWithholdingAmount1.AlternateAmount2.EnteredCurrencyAmount = LocalCurrencyCalculationGroup.AlternateAmount2.OutputCurrencyAmount
				LocalSecondaryWithholdingAmount1.AlternateAmount2.EnteredCurrencyRate 	= LocalCurrencyCalculationGroup.AlternateAmount2.OutputCurrencyRate
			if (GeneralLedgerCompanyRel.AccountingEntity.AlternateCurrency3 entered)
				LocalSecondaryWithholdingAmount1.AlternateAmount3.EnteredCurrencyAmount	= LocalCurrencyCalculationGroup.AlternateAmount3.OutputCurrencyAmount
				LocalSecondaryWithholdingAmount1.AlternateAmount3.EnteredCurrencyRate	= LocalCurrencyCalculationGroup.AlternateAmount3.OutputCurrencyRate
			if (GeneralLedgerCompanyRel.FinanceEnterpriseGroup.ReportCurrencyOne entered)
				LocalSecondaryWithholdingAmount1.ReportAmount1.EnteredCurrencyAmount    = LocalCurrencyCalculationGroup.ReportAmount1.OutputCurrencyAmount
				LocalSecondaryWithholdingAmount1.ReportAmount1.EnteredCurrencyRate   	= LocalCurrencyCalculationGroup.ReportAmount1.OutputCurrencyRate
			if (GeneralLedgerCompanyRel.FinanceEnterpriseGroup.ReportCurrencyTwo entered)
				LocalSecondaryWithholdingAmount1.ReportAmount2.EnteredCurrencyAmount    = LocalCurrencyCalculationGroup.ReportAmount2.OutputCurrencyAmount
				LocalSecondaryWithholdingAmount1.ReportAmount2.EnteredCurrencyRate   	= LocalCurrencyCalculationGroup.ReportAmount2.OutputCurrencyRate
			if (GeneralLedgerCompanyRel.FinanceEnterpriseGroup.ReportCurrencyThree entered)
				LocalSecondaryWithholdingAmount1.ReportAmount3.EnteredCurrencyAmount	= LocalCurrencyCalculationGroup.ReportAmount3.OutputCurrencyAmount
				LocalSecondaryWithholdingAmount1.ReportAmount3.EnteredCurrencyRate		= LocalCurrencyCalculationGroup.ReportAmount3.OutputCurrencyRate
			if (GeneralLedgerCompanyRel.FinanceEnterpriseGroup.ReportCurrencyFour entered)
				LocalSecondaryWithholdingAmount1.ReportAmount4.EnteredCurrencyAmount	= LocalCurrencyCalculationGroup.ReportAmount4.OutputCurrencyAmount
				LocalSecondaryWithholdingAmount1.ReportAmount4.EnteredCurrencyRate		= LocalCurrencyCalculationGroup.ReportAmount4.OutputCurrencyRate
			if (GeneralLedgerCompanyRel.FinanceEnterpriseGroup.ReportCurrencyFive entered)
				LocalSecondaryWithholdingAmount1.ReportAmount5.EnteredCurrencyAmount	= LocalCurrencyCalculationGroup.ReportAmount5.OutputCurrencyAmount
				LocalSecondaryWithholdingAmount1.ReportAmount5.EnteredCurrencyRate		= LocalCurrencyCalculationGroup.ReportAmount5.OutputCurrencyRate


		CalculateSecondaryWithholdingCurrencyAmount2
			if (InvoiceCurrency	!= CashCode.Currency)
				LocalExchangeDate											= CheckDate
				LocalSecondaryWithholdingExchange2.TransactionAmount		= SecondaryWithholdingTransactionAmount2
				LocalSecondaryWithholdingExchange2.BaseAmount.ToCurrency	= CashCode.Currency
				if (PrmVoidDate entered)	
					LocalSecondaryWithholdingExchange2.BaseAmount.EnteredCurrencyRate	= (BankCheckAmount / NetPaymentAmount.CurrencyAmount)
				else
					if (InvoiceCurrency = CashRequirementsResult.InvoiceCurrency
					and CashCode 		= CashRequirementsResult.CashCode
					and CashRequirementsResult.OverridePaymentRate entered)
						LocalSecondaryWithholdingExchange2.BaseAmount.EnteredCurrencyRate 	= CashRequirementsResult.OverridePaymentRate 
				LocalSecondaryWithhldCurrencyAmount2						= LocalSecondaryWithholdingExchange2.BaseAmount.OutputCurrencyAmount
			else
				LocalSecondaryWithhldCurrencyAmount2						= SecondaryWithholdingTransactionAmount2
			LocalCurrencyCalculationGroup.CurrencyAmount							= LocalSecondaryWithhldCurrencyAmount2
			LocalSecondaryWithholdingAmount2.CurrencyAmount	   						= LocalSecondaryWithhldCurrencyAmount2
			if (PrmVoidDate	entered)	
				LocalCurrencyCalculationGroup.FunctionalAmount.EnteredCurrencyRate	= CashPaymentDistributionsRel.DistributionAmount.FunctionalAmount.EnteredCurrencyRate
				LocalCurrencyCalculationGroup.AlternateAmount.EnteredCurrencyRate	= CashPaymentDistributionsRel.DistributionAmount.AlternateAmount.EnteredCurrencyRate
				LocalCurrencyCalculationGroup.AlternateAmount2.EnteredCurrencyRate	= CashPaymentDistributionsRel.DistributionAmount.AlternateAmount2.EnteredCurrencyRate
				LocalCurrencyCalculationGroup.AlternateAmount3.EnteredCurrencyRate	= CashPaymentDistributionsRel.DistributionAmount.AlternateAmount3.EnteredCurrencyRate
				LocalCurrencyCalculationGroup.ReportAmount1.EnteredCurrencyRate		= CashPaymentDistributionsRel.DistributionAmount.ReportAmount1.EnteredCurrencyRate
				LocalCurrencyCalculationGroup.ReportAmount2.EnteredCurrencyRate		= CashPaymentDistributionsRel.DistributionAmount.ReportAmount2.EnteredCurrencyRate
				LocalCurrencyCalculationGroup.ReportAmount3.EnteredCurrencyRate		= CashPaymentDistributionsRel.DistributionAmount.ReportAmount3.EnteredCurrencyRate
				LocalCurrencyCalculationGroup.ReportAmount4.EnteredCurrencyRate		= CashPaymentDistributionsRel.DistributionAmount.ReportAmount4.EnteredCurrencyRate
				LocalCurrencyCalculationGroup.ReportAmount5.EnteredCurrencyRate		= CashPaymentDistributionsRel.DistributionAmount.ReportAmount5.EnteredCurrencyRate
			LocalSecondaryWithholdingAmount2.FunctionalAmount.EnteredCurrencyAmount	= LocalCurrencyCalculationGroup.FunctionalAmount.OutputCurrencyAmount
			LocalSecondaryWithholdingAmount2.FunctionalAmount.EnteredCurrencyRate	= LocalCurrencyCalculationGroup.FunctionalAmount.OutputCurrencyRate
			if (GeneralLedgerCompanyRel.AccountingEntity.AlternateCurrency entered)
				LocalSecondaryWithholdingAmount2.AlternateAmount.EnteredCurrencyAmount  = LocalCurrencyCalculationGroup.AlternateAmount.OutputCurrencyAmount
				LocalSecondaryWithholdingAmount2.AlternateAmount.EnteredCurrencyRate  	= LocalCurrencyCalculationGroup.AlternateAmount.OutputCurrencyRate
			if (GeneralLedgerCompanyRel.AccountingEntity.AlternateCurrency2 entered)
				LocalSecondaryWithholdingAmount2.AlternateAmount2.EnteredCurrencyAmount = LocalCurrencyCalculationGroup.AlternateAmount2.OutputCurrencyAmount
				LocalSecondaryWithholdingAmount2.AlternateAmount2.EnteredCurrencyRate 	= LocalCurrencyCalculationGroup.AlternateAmount2.OutputCurrencyRate
			if (GeneralLedgerCompanyRel.AccountingEntity.AlternateCurrency3 entered)
				LocalSecondaryWithholdingAmount2.AlternateAmount3.EnteredCurrencyAmount	= LocalCurrencyCalculationGroup.AlternateAmount3.OutputCurrencyAmount
				LocalSecondaryWithholdingAmount2.AlternateAmount3.EnteredCurrencyRate	= LocalCurrencyCalculationGroup.AlternateAmount3.OutputCurrencyRate
			if (GeneralLedgerCompanyRel.FinanceEnterpriseGroup.ReportCurrencyOne entered)
				LocalSecondaryWithholdingAmount2.ReportAmount1.EnteredCurrencyAmount    = LocalCurrencyCalculationGroup.ReportAmount1.OutputCurrencyAmount
				LocalSecondaryWithholdingAmount2.ReportAmount1.EnteredCurrencyRate   	= LocalCurrencyCalculationGroup.ReportAmount1.OutputCurrencyRate
			if (GeneralLedgerCompanyRel.FinanceEnterpriseGroup.ReportCurrencyTwo entered)
				LocalSecondaryWithholdingAmount2.ReportAmount2.EnteredCurrencyAmount    = LocalCurrencyCalculationGroup.ReportAmount2.OutputCurrencyAmount
				LocalSecondaryWithholdingAmount2.ReportAmount2.EnteredCurrencyRate    	= LocalCurrencyCalculationGroup.ReportAmount2.OutputCurrencyRate
			if (GeneralLedgerCompanyRel.FinanceEnterpriseGroup.ReportCurrencyThree entered)
				LocalSecondaryWithholdingAmount2.ReportAmount3.EnteredCurrencyAmount	= LocalCurrencyCalculationGroup.ReportAmount3.OutputCurrencyAmount
				LocalSecondaryWithholdingAmount2.ReportAmount3.EnteredCurrencyRate		= LocalCurrencyCalculationGroup.ReportAmount3.OutputCurrencyRate
			if (GeneralLedgerCompanyRel.FinanceEnterpriseGroup.ReportCurrencyFour entered)
				LocalSecondaryWithholdingAmount2.ReportAmount4.EnteredCurrencyAmount	= LocalCurrencyCalculationGroup.ReportAmount4.OutputCurrencyAmount
				LocalSecondaryWithholdingAmount2.ReportAmount4.EnteredCurrencyRate		= LocalCurrencyCalculationGroup.ReportAmount4.OutputCurrencyRate
			if (GeneralLedgerCompanyRel.FinanceEnterpriseGroup.ReportCurrencyFive entered)
				LocalSecondaryWithholdingAmount2.ReportAmount5.EnteredCurrencyAmount	= LocalCurrencyCalculationGroup.ReportAmount5.OutputCurrencyAmount
				LocalSecondaryWithholdingAmount2.ReportAmount5.EnteredCurrencyRate		= LocalCurrencyCalculationGroup.ReportAmount5.OutputCurrencyRate


		CalculateSecondaryWithholdingCurrencyAmount3
			if (InvoiceCurrency	= CashCode.Currency)
				LocalExchangeDate											= CheckDate
				LocalSecondaryWithholdingExchange3.TransactionAmount		= SecondaryWithholdingTransactionAmount3
				LocalSecondaryWithholdingExchange3.BaseAmount.ToCurrency	= CashCode.Currency
				if (PrmVoidDate entered)	
					LocalSecondaryWithholdingExchange3.BaseAmount.EnteredCurrencyRate	= (BankCheckAmount / NetPaymentAmount.CurrencyAmount)
				else
					if (InvoiceCurrency = CashRequirementsResult.InvoiceCurrency
					and CashCode 		= CashRequirementsResult.CashCode
					and CashRequirementsResult.OverridePaymentRate entered)
						LocalSecondaryWithholdingExchange3.BaseAmount.EnteredCurrencyRate	= CashRequirementsResult.OverridePaymentRate 
				LocalSecondaryWithhldCurrencyAmount3						= LocalSecondaryWithholdingExchange3.BaseAmount.OutputCurrencyAmount
			else
				LocalSecondaryWithhldCurrencyAmount3						= SecondaryWithholdingTransactionAmount3
			LocalCurrencyCalculationGroup.CurrencyAmount							= LocalSecondaryWithhldCurrencyAmount3
			LocalSecondaryWithholdingAmount3.CurrencyAmount	   						= LocalSecondaryWithhldCurrencyAmount3
			if (PrmVoidDate	entered)	
				LocalCurrencyCalculationGroup.FunctionalAmount.EnteredCurrencyRate	= CashPaymentDistributionsRel.DistributionAmount.FunctionalAmount.EnteredCurrencyRate
				LocalCurrencyCalculationGroup.AlternateAmount.EnteredCurrencyRate	= CashPaymentDistributionsRel.DistributionAmount.AlternateAmount.EnteredCurrencyRate
				LocalCurrencyCalculationGroup.AlternateAmount2.EnteredCurrencyRate	= CashPaymentDistributionsRel.DistributionAmount.AlternateAmount2.EnteredCurrencyRate
				LocalCurrencyCalculationGroup.AlternateAmount3.EnteredCurrencyRate	= CashPaymentDistributionsRel.DistributionAmount.AlternateAmount3.EnteredCurrencyRate
				LocalCurrencyCalculationGroup.ReportAmount1.EnteredCurrencyRate		= CashPaymentDistributionsRel.DistributionAmount.ReportAmount1.EnteredCurrencyRate
				LocalCurrencyCalculationGroup.ReportAmount2.EnteredCurrencyRate		= CashPaymentDistributionsRel.DistributionAmount.ReportAmount2.EnteredCurrencyRate
				LocalCurrencyCalculationGroup.ReportAmount3.EnteredCurrencyRate		= CashPaymentDistributionsRel.DistributionAmount.ReportAmount3.EnteredCurrencyRate
				LocalCurrencyCalculationGroup.ReportAmount4.EnteredCurrencyRate		= CashPaymentDistributionsRel.DistributionAmount.ReportAmount4.EnteredCurrencyRate
				LocalCurrencyCalculationGroup.ReportAmount5.EnteredCurrencyRate		= CashPaymentDistributionsRel.DistributionAmount.ReportAmount5.EnteredCurrencyRate
			LocalSecondaryWithholdingAmount3.FunctionalAmount.EnteredCurrencyAmount	= LocalCurrencyCalculationGroup.FunctionalAmount.OutputCurrencyAmount
			LocalSecondaryWithholdingAmount3.FunctionalAmount.EnteredCurrencyRate	= LocalCurrencyCalculationGroup.FunctionalAmount.OutputCurrencyRate
			if (GeneralLedgerCompanyRel.AccountingEntity.AlternateCurrency entered)
				LocalSecondaryWithholdingAmount3.AlternateAmount.EnteredCurrencyAmount  = LocalCurrencyCalculationGroup.AlternateAmount.OutputCurrencyAmount
				LocalSecondaryWithholdingAmount3.AlternateAmount.EnteredCurrencyRate  	= LocalCurrencyCalculationGroup.AlternateAmount.OutputCurrencyRate
			if (GeneralLedgerCompanyRel.AccountingEntity.AlternateCurrency2 entered)
				LocalSecondaryWithholdingAmount3.AlternateAmount2.EnteredCurrencyAmount = LocalCurrencyCalculationGroup.AlternateAmount2.OutputCurrencyAmount
				LocalSecondaryWithholdingAmount3.AlternateAmount2.EnteredCurrencyRate 	= LocalCurrencyCalculationGroup.AlternateAmount2.OutputCurrencyRate
			if (GeneralLedgerCompanyRel.AccountingEntity.AlternateCurrency3 entered)
				LocalSecondaryWithholdingAmount3.AlternateAmount3.EnteredCurrencyAmount	= LocalCurrencyCalculationGroup.AlternateAmount3.OutputCurrencyAmount
				LocalSecondaryWithholdingAmount3.AlternateAmount3.EnteredCurrencyRate	= LocalCurrencyCalculationGroup.AlternateAmount3.OutputCurrencyRate
			if (GeneralLedgerCompanyRel.FinanceEnterpriseGroup.ReportCurrencyOne entered)
				LocalSecondaryWithholdingAmount3.ReportAmount1.EnteredCurrencyAmount    = LocalCurrencyCalculationGroup.ReportAmount1.OutputCurrencyAmount
				LocalSecondaryWithholdingAmount3.ReportAmount1.EnteredCurrencyRate    	= LocalCurrencyCalculationGroup.ReportAmount1.OutputCurrencyRate
			if (GeneralLedgerCompanyRel.FinanceEnterpriseGroup.ReportCurrencyTwo entered)
				LocalSecondaryWithholdingAmount3.ReportAmount2.EnteredCurrencyAmount    = LocalCurrencyCalculationGroup.ReportAmount2.OutputCurrencyAmount
				LocalSecondaryWithholdingAmount3.ReportAmount2.EnteredCurrencyRate    	= LocalCurrencyCalculationGroup.ReportAmount2.OutputCurrencyRate
			if (GeneralLedgerCompanyRel.FinanceEnterpriseGroup.ReportCurrencyThree entered)
				LocalSecondaryWithholdingAmount3.ReportAmount3.EnteredCurrencyAmount	= LocalCurrencyCalculationGroup.ReportAmount3.OutputCurrencyAmount
				LocalSecondaryWithholdingAmount3.ReportAmount3.EnteredCurrencyRate		= LocalCurrencyCalculationGroup.ReportAmount3.OutputCurrencyRate
			if (GeneralLedgerCompanyRel.FinanceEnterpriseGroup.ReportCurrencyFour entered)
				LocalSecondaryWithholdingAmount3.ReportAmount4.EnteredCurrencyAmount	= LocalCurrencyCalculationGroup.ReportAmount4.OutputCurrencyAmount
				LocalSecondaryWithholdingAmount3.ReportAmount4.EnteredCurrencyRate		= LocalCurrencyCalculationGroup.ReportAmount4.OutputCurrencyRate
			if (GeneralLedgerCompanyRel.FinanceEnterpriseGroup.ReportCurrencyFive entered)
				LocalSecondaryWithholdingAmount3.ReportAmount5.EnteredCurrencyAmount	= LocalCurrencyCalculationGroup.ReportAmount5.OutputCurrencyAmount
				LocalSecondaryWithholdingAmount3.ReportAmount5.EnteredCurrencyRate		= LocalCurrencyCalculationGroup.ReportAmount5.OutputCurrencyRate

		CalculatePaymentCurrencyDifference
			CalculateFinanceCurrencyAmountGroup.Total.FunctionalAmount.EnteredCurrencyAmount	= PaymentAmount.FunctionalAmount.EnteredCurrencyAmount
			CalculateFinanceCurrencyAmountGroup.Total.AlternateAmount.EnteredCurrencyAmount		= PaymentAmount.AlternateAmount.EnteredCurrencyAmount
			CalculateFinanceCurrencyAmountGroup.Total.AlternateAmount2.EnteredCurrencyAmount	= PaymentAmount.AlternateAmount2.EnteredCurrencyAmount
			CalculateFinanceCurrencyAmountGroup.Total.AlternateAmount3.EnteredCurrencyAmount	= PaymentAmount.AlternateAmount3.EnteredCurrencyAmount		
			CalculateFinanceCurrencyAmountGroup.Total.ReportAmount1.EnteredCurrencyAmount		= PaymentAmount.ReportAmount1.EnteredCurrencyAmount
			CalculateFinanceCurrencyAmountGroup.Total.ReportAmount2.EnteredCurrencyAmount		= PaymentAmount.ReportAmount2.EnteredCurrencyAmount
			CalculateFinanceCurrencyAmountGroup.Total.ReportAmount3.EnteredCurrencyAmount		= PaymentAmount.ReportAmount3.EnteredCurrencyAmount
			CalculateFinanceCurrencyAmountGroup.Total.ReportAmount4.EnteredCurrencyAmount		= PaymentAmount.ReportAmount4.EnteredCurrencyAmount
			CalculateFinanceCurrencyAmountGroup.Total.ReportAmount5.EnteredCurrencyAmount		= PaymentAmount.ReportAmount5.EnteredCurrencyAmount



			if (DiscountAmount.CurrencyAmount	entered
			and !DiscountLost)
				include CalculateDiscountCurrencyAmount
				CalculateFinanceCurrencyAmountGroup.Operand		= LocalDiscountAmount 
				LocalBoolean = CalculateFinanceCurrencyAmountGroup.PerformSubtraction

			if (WithholdingAmount entered)
				include CalculateWithholdingCurrencyAmount
				CalculateFinanceCurrencyAmountGroup.Operand		= LocalWithholdingAmount 
				LocalBoolean = CalculateFinanceCurrencyAmountGroup.PerformSubtraction

			if (SecondaryWithholdingTransactionAmount1 entered)
				include CalculateSecondaryWithholdingCurrencyAmount1
				CalculateFinanceCurrencyAmountGroup.Operand		= LocalSecondaryWithholdingAmount1 
				LocalBoolean = CalculateFinanceCurrencyAmountGroup.PerformSubtraction

			if (SecondaryWithholdingTransactionAmount2 entered)
				include CalculateSecondaryWithholdingCurrencyAmount2
				CalculateFinanceCurrencyAmountGroup.Operand		= LocalSecondaryWithholdingAmount2 
				LocalBoolean = CalculateFinanceCurrencyAmountGroup.PerformSubtraction

			if (SecondaryWithholdingTransactionAmount3 entered)
				include CalculateSecondaryWithholdingCurrencyAmount3
				CalculateFinanceCurrencyAmountGroup.Operand		= LocalSecondaryWithholdingAmount3 
				LocalBoolean = CalculateFinanceCurrencyAmountGroup.PerformSubtraction

			if (FATCAIncomeCode entered
			and FATCATransactionIncomeAmount entered)
				include CalculateFATCAWithholdingCurrencyAmount
				CalculateFinanceCurrencyAmountGroup.Operand		= LocalFATCAWithholdingAmount
				LocalBoolean = CalculateFinanceCurrencyAmountGroup.PerformSubtraction

			CalculateFinanceCurrencyAmountGroup.Operand		= LocalCashCodePaymentAmount 
			LocalBoolean = CalculateFinanceCurrencyAmountGroup.PerformSubtraction


		CalculateTotalPaymentAccrualAmount
			initialize CalculateFinanceCurrencyAmountGroup

			CalculateFinanceCurrencyAmountGroup.Operand		= LocalCashCodePaymentAmount

			CalculateFinanceCurrencyAmountGroup.Total.FunctionalAmount.EnteredCurrencyRate		= LocalCashCodePaymentAmount.FunctionalAmount.EnteredCurrencyRate
			CalculateFinanceCurrencyAmountGroup.Total.AlternateAmount.EnteredCurrencyRate		= LocalCashCodePaymentAmount.AlternateAmount.EnteredCurrencyRate
			CalculateFinanceCurrencyAmountGroup.Total.AlternateAmount2.EnteredCurrencyRate		= LocalCashCodePaymentAmount.AlternateAmount2.EnteredCurrencyRate
			CalculateFinanceCurrencyAmountGroup.Total.AlternateAmount3.EnteredCurrencyRate		= LocalCashCodePaymentAmount.AlternateAmount3.EnteredCurrencyRate
			CalculateFinanceCurrencyAmountGroup.Total.ToFunctionalAmount.EnteredCurrencyRate	= LocalCashCodePaymentAmount.ToFunctionalAmount.EnteredCurrencyRate
			CalculateFinanceCurrencyAmountGroup.Total.ToAlternateAmount.EnteredCurrencyRate		= LocalCashCodePaymentAmount.ToAlternateAmount.EnteredCurrencyRate
			CalculateFinanceCurrencyAmountGroup.Total.ToAlternateAmount2.EnteredCurrencyRate	= LocalCashCodePaymentAmount.ToAlternateAmount2.EnteredCurrencyRate
			CalculateFinanceCurrencyAmountGroup.Total.ToAlternateAmount3.EnteredCurrencyRate	= LocalCashCodePaymentAmount.ToAlternateAmount3.EnteredCurrencyRate
			CalculateFinanceCurrencyAmountGroup.Total.ReportAmount1.EnteredCurrencyRate			= LocalCashCodePaymentAmount.ReportAmount1.EnteredCurrencyRate
			CalculateFinanceCurrencyAmountGroup.Total.ReportAmount2.EnteredCurrencyRate			= LocalCashCodePaymentAmount.ReportAmount2.EnteredCurrencyRate
			CalculateFinanceCurrencyAmountGroup.Total.ReportAmount3.EnteredCurrencyRate			= LocalCashCodePaymentAmount.ReportAmount3.EnteredCurrencyRate
			CalculateFinanceCurrencyAmountGroup.Total.ReportAmount4.EnteredCurrencyRate			= LocalCashCodePaymentAmount.ReportAmount4.EnteredCurrencyRate
			CalculateFinanceCurrencyAmountGroup.Total.ReportAmount5.EnteredCurrencyRate			= LocalCashCodePaymentAmount.ReportAmount5.EnteredCurrencyRate

			LocalBoolean = CalculateFinanceCurrencyAmountGroup.PerformAddition

			if (DiscountAmount.CurrencyAmount	entered
			and !DiscountLost)
				include CalculateDiscountCurrencyAmount
				CalculateFinanceCurrencyAmountGroup.Operand		= LocalDiscountAmount
				LocalBoolean = CalculateFinanceCurrencyAmountGroup.PerformAddition

			if (WithholdingAmount entered)
				include CalculateWithholdingCurrencyAmount
				CalculateFinanceCurrencyAmountGroup.Operand		= LocalWithholdingAmount
				LocalBoolean = CalculateFinanceCurrencyAmountGroup.PerformAddition

			if (SecondaryWithholdingTransactionAmount1 entered)
				include CalculateSecondaryWithholdingCurrencyAmount1
				CalculateFinanceCurrencyAmountGroup.Operand		= LocalSecondaryWithholdingAmount1
				LocalBoolean = CalculateFinanceCurrencyAmountGroup.PerformAddition

			if (SecondaryWithholdingTransactionAmount2 entered)
				include CalculateSecondaryWithholdingCurrencyAmount2
				CalculateFinanceCurrencyAmountGroup.Operand		= LocalSecondaryWithholdingAmount2
				LocalBoolean = CalculateFinanceCurrencyAmountGroup.PerformAddition

			if (SecondaryWithholdingTransactionAmount3 entered)
				include CalculateSecondaryWithholdingCurrencyAmount3
				CalculateFinanceCurrencyAmountGroup.Operand		= LocalSecondaryWithholdingAmount3
				LocalBoolean = CalculateFinanceCurrencyAmountGroup.PerformAddition

			if (FATCAIncomeCode entered
			and FATCATransactionIncomeAmount entered)
				include CalculateFATCAWithholdingCurrencyAmount
				CalculateFinanceCurrencyAmountGroup.Operand		= LocalFATCAWithholdingAmount
				LocalBoolean = CalculateFinanceCurrencyAmountGroup.PerformAddition


		AdjustAccrualForDifferentPaymentCurrency

			invoke CreateFromBatchNoParms PayablesInvoiceDistribution
				invoked.CreateAlternateGLTransDetail	= true
				if (PrmVoidDate	entered)
					invoked.GLTPostingDate			= PrmVoidDate
					invoked.DistributionDate		= PrmVoidDate
					invoked.GLTGeneralLedgerEvent	= "VP"
					invoked.DistributionAmount		= LocalDistributionAmount 
				else
					invoked.GLTPostingDate			= CheckDate
					invoked.DistributionDate		= CheckDate
					invoked.GLTGeneralLedgerEvent	= "AP"
					invoked.DistributionAmount		= NegativeFinanceCurrencyAmountGroup
				invoked.GLTTransactionDate			= CheckDate
				invoked.GLTCurrencyCode				= InvoiceCurrency	
				invoked.Company						= Company
				invoked.PayablesInvoice				= PayablesInvoice
				invoked.DistributionType 			= "G"
				invoked.AccrualCode 				= LocalAccrualCode				
				invoked.PostingOption				= "S"
				invoked.Status						= 1
				invoked.GLTControlDocumentNumber	= PrmControlDocumentNumber
				invoked.GLTDocumentNumber           = PrmControlDocumentNumber
				invoked.Description					= NonInvoiceCurrencyPaymentAccrualOffsetMessage
				invoked.DistributionReference		= PrmReference
				invoked.InvoiceCurrency				= InvoiceCurrency	
				invoked.DistributionAmount.ExchangeDate			= PayablesInvoice.InvoiceDate 
				invoked.DistributionAmount.KeepRateAndAmount	= true
				invoked.GLFinanceCodeBlock			= LocalFinanceCodeBlock	
				invoked.GLTTransactionCodeBlock		= LocalFinanceCodeBlock	
				invoked.DistributionAccount			= LocalFinanceCodeBlock	
				invoked.GLTJournalizeGroup			= PrmJournalizeGroup
				invoked.BypassActiveCodeBlockEdit 	= true		

			if (PrmVoidDate	entered)													
				NegativeFinanceCurrencyAmountGroup	= LocalCashCodePaymentAmount		
				LocalBoolean = NegativeFinanceCurrencyAmountGroup.PerformCalculation	
			invoke CreateFromBatchNoParms PayablesInvoiceDistribution
				invoked.CreateAlternateGLTransDetail	= true
				if (PrmVoidDate	entered)
					invoked.GLTPostingDate			= PrmVoidDate
					invoked.DistributionDate		= PrmVoidDate
					invoked.GLTGeneralLedgerEvent	= "VP"
					invoked.DistributionAmount		= NegativeFinanceCurrencyAmountGroup
				else
					invoked.GLTPostingDate			= CheckDate
					invoked.DistributionDate		= CheckDate
					invoked.GLTGeneralLedgerEvent	= "AP"
					invoked.DistributionAmount		= LocalCashCodePaymentAmount
				invoked.GLTTransactionDate			= CheckDate
				invoked.GLTCurrencyCode				= CashCode.Currency
				invoked.Company						= Company
				invoked.PayablesInvoice				= PayablesInvoice
				invoked.DistributionType 			= "G"
				invoked.AccrualCode 				= LocalAccrualCode				
				invoked.PostingOption				= "S"
				invoked.Status						= 1
				invoked.GLTControlDocumentNumber	= PrmControlDocumentNumber
				invoked.GLTDocumentNumber           = PrmControlDocumentNumber
				invoked.Description					= NonInvoiceCurrencyPaymentOffsetMessage
				invoked.DistributionReference		= PrmReference
				invoked.InvoiceCurrency				= CashCode.Currency
				invoked.DistributionAmount.ExchangeDate			= CheckDate
				invoked.DistributionAmount.KeepRateAndAmount	= true
				invoked.GLFinanceCodeBlock			= LocalFinanceCodeBlock
				invoked.GLTTransactionCodeBlock		= LocalFinanceCodeBlock
				invoked.DistributionAccount			= LocalFinanceCodeBlock
				invoked.GLTJournalizeGroup			= PrmJournalizeGroup
				invoked.BypassActiveCodeBlockEdit 	= true		



		SetupGainLossAccountForProratedPaymentCurrencyAdjustment
			LocalSystemAccount = SystemAccount.RealizedGainAndLoss
			if (CashCode.CashManagementGroup.CurrencyDifferenceGainAccount entered)	
				if (LocalCashCodePaymentAmount.FunctionalAmount.EnteredCurrencyAmount < LocalDistributionAmount.FunctionalAmount.EnteredCurrencyAmount)
					LocalFinanceCodeBlock.GeneralLedgerChartAccount = CashCode.CashManagementGroup.CurrencyDifferenceGainAccount
				else
					LocalFinanceCodeBlock.GeneralLedgerChartAccount = CashCode.CashManagementGroup.CurrencyDifferenceLossAccount
			else
			if (SystemAccountRel exists)
				LocalFinanceCodeBlock.GeneralLedgerChartAccount	= SystemAccountRel.GeneralLedgerChartAccount
			else
				if (LocalCashCodePaymentAmount.FunctionalAmount.EnteredCurrencyAmount < LocalDistributionAmount.FunctionalAmount.EnteredCurrencyAmount)
					LocalSystemAccount = SystemAccount.RealizedGain
					LocalFinanceCodeBlock.GeneralLedgerChartAccount	= SystemAccountRel.GeneralLedgerChartAccount
				else
					LocalSystemAccount = SystemAccount.RealizedLoss
					LocalFinanceCodeBlock.GeneralLedgerChartAccount	= SystemAccountRel.GeneralLedgerChartAccount
			LocalFinanceCodeBlock.ToAccountingEntity	= each.DistributionAccount.ToAccountingEntity
			if (GeneralLedgerCompanyRel.FinanceEnterpriseGroup.AccountingUnitRequired)
				if (each.DistributionAccount.AccountingUnit entered)
					LocalFinanceCodeBlock.AccountingUnit	= each.DistributionAccount.AccountingUnit
			if (GeneralLedgerCompanyRel.FinanceEnterpriseGroup.FinanceDimension1Required)
				if (each.DistributionAccount.FinanceDimension1 entered)
					LocalFinanceCodeBlock.FinanceDimension1	= each.DistributionAccount.FinanceDimension1
			if (GeneralLedgerCompanyRel.FinanceEnterpriseGroup.FinanceDimension2Required)
				if (each.DistributionAccount.FinanceDimension2 entered)
					LocalFinanceCodeBlock.FinanceDimension2	= each.DistributionAccount.FinanceDimension2
			if (GeneralLedgerCompanyRel.FinanceEnterpriseGroup.FinanceDimension3Required)
				if (each.DistributionAccount.FinanceDimension3 entered)
					LocalFinanceCodeBlock.FinanceDimension3	= each.DistributionAccount.FinanceDimension3
			if (GeneralLedgerCompanyRel.FinanceEnterpriseGroup.FinanceDimension4Required)
				if (each.DistributionAccount.FinanceDimension4 entered)
					LocalFinanceCodeBlock.FinanceDimension4	= each.DistributionAccount.FinanceDimension4
			if (GeneralLedgerCompanyRel.FinanceEnterpriseGroup.FinanceDimension5Required)
				if (each.DistributionAccount.FinanceDimension5 entered)
					LocalFinanceCodeBlock.FinanceDimension5	= each.DistributionAccount.FinanceDimension5
			if (GeneralLedgerCompanyRel.FinanceEnterpriseGroup.FinanceDimension6Required)
				if (each.DistributionAccount.FinanceDimension6 entered)
					LocalFinanceCodeBlock.FinanceDimension6	= each.DistributionAccount.FinanceDimension6
			if (GeneralLedgerCompanyRel.FinanceEnterpriseGroup.FinanceDimension7Required)
				if (each.DistributionAccount.FinanceDimension7 entered)
					LocalFinanceCodeBlock.FinanceDimension7	= each.DistributionAccount.FinanceDimension7
			if (GeneralLedgerCompanyRel.FinanceEnterpriseGroup.FinanceDimension8Required)
				if (each.DistributionAccount.FinanceDimension8 entered)
					LocalFinanceCodeBlock.FinanceDimension8	= each.DistributionAccount.FinanceDimension8
			if (GeneralLedgerCompanyRel.FinanceEnterpriseGroup.FinanceDimension9Required)
				if (each.DistributionAccount.FinanceDimension9 entered)
					LocalFinanceCodeBlock.FinanceDimension9	= each.DistributionAccount.FinanceDimension9
			if (GeneralLedgerCompanyRel.FinanceEnterpriseGroup.FinanceDimension10Required)
				if (each.DistributionAccount.FinanceDimension10 entered)
					LocalFinanceCodeBlock.FinanceDimension10	= each.DistributionAccount.FinanceDimension10


		SetupGainLossAccountForPaymentCurrencyAdjustment
			LocalSystemAccount = SystemAccount.RealizedGainAndLoss
			if (CashCode.CashManagementGroup.CurrencyDifferenceGainAccount entered)	
				if (LocalCashCodePaymentAmount.FunctionalAmount.EnteredCurrencyAmount < LocalDistributionAmount.FunctionalAmount.EnteredCurrencyAmount)
					LocalFinanceCodeBlock.GeneralLedgerChartAccount = CashCode.CashManagementGroup.CurrencyDifferenceGainAccount
				else
					LocalFinanceCodeBlock.GeneralLedgerChartAccount = CashCode.CashManagementGroup.CurrencyDifferenceLossAccount
			else
			if (SystemAccountRel exists)
				LocalFinanceCodeBlock.GeneralLedgerChartAccount	= SystemAccountRel.GeneralLedgerChartAccount
			else
				if (LocalCashCodePaymentAmount.FunctionalAmount.EnteredCurrencyAmount < LocalDistributionAmount.FunctionalAmount.EnteredCurrencyAmount)
					LocalSystemAccount = SystemAccount.RealizedGain
					LocalFinanceCodeBlock.GeneralLedgerChartAccount	= SystemAccountRel.GeneralLedgerChartAccount
				else
					LocalSystemAccount = SystemAccount.RealizedLoss
					LocalFinanceCodeBlock.GeneralLedgerChartAccount	= SystemAccountRel.GeneralLedgerChartAccount
			LocalFinanceCodeBlock.ToAccountingEntity	= PayablesAccrualCodeDetailRel.DistributionAccount.ToAccountingEntity
			if (GeneralLedgerCompanyRel.FinanceEnterpriseGroup.AccountingUnitRequired)
				if (PayablesAccrualCodeDetailRel.DistributionAccount.AccountingUnit entered)
					LocalFinanceCodeBlock.AccountingUnit	= PayablesAccrualCodeDetailRel.DistributionAccount.AccountingUnit
			if (GeneralLedgerCompanyRel.FinanceEnterpriseGroup.FinanceDimension1Required)
				if (PayablesAccrualCodeDetailRel.DistributionAccount.FinanceDimension1 entered)
					LocalFinanceCodeBlock.FinanceDimension1	= PayablesAccrualCodeDetailRel.DistributionAccount.FinanceDimension1
			if (GeneralLedgerCompanyRel.FinanceEnterpriseGroup.FinanceDimension2Required)
				if (PayablesAccrualCodeDetailRel.DistributionAccount.FinanceDimension2 entered)
					LocalFinanceCodeBlock.FinanceDimension2	= PayablesAccrualCodeDetailRel.DistributionAccount.FinanceDimension2
			if (GeneralLedgerCompanyRel.FinanceEnterpriseGroup.FinanceDimension3Required)
				if (PayablesAccrualCodeDetailRel.DistributionAccount.FinanceDimension3 entered)
					LocalFinanceCodeBlock.FinanceDimension3	= PayablesAccrualCodeDetailRel.DistributionAccount.FinanceDimension3
			if (GeneralLedgerCompanyRel.FinanceEnterpriseGroup.FinanceDimension4Required)
				if (PayablesAccrualCodeDetailRel.DistributionAccount.FinanceDimension4 entered)
					LocalFinanceCodeBlock.FinanceDimension4	= PayablesAccrualCodeDetailRel.DistributionAccount.FinanceDimension4
			if (GeneralLedgerCompanyRel.FinanceEnterpriseGroup.FinanceDimension5Required)
				if (PayablesAccrualCodeDetailRel.DistributionAccount.FinanceDimension5 entered)
					LocalFinanceCodeBlock.FinanceDimension5	= PayablesAccrualCodeDetailRel.DistributionAccount.FinanceDimension5
			if (GeneralLedgerCompanyRel.FinanceEnterpriseGroup.FinanceDimension6Required)
				if (PayablesAccrualCodeDetailRel.DistributionAccount.FinanceDimension6 entered)
					LocalFinanceCodeBlock.FinanceDimension6	= PayablesAccrualCodeDetailRel.DistributionAccount.FinanceDimension6
			if (GeneralLedgerCompanyRel.FinanceEnterpriseGroup.FinanceDimension7Required)
				if (PayablesAccrualCodeDetailRel.DistributionAccount.FinanceDimension7 entered)
					LocalFinanceCodeBlock.FinanceDimension7	= PayablesAccrualCodeDetailRel.DistributionAccount.FinanceDimension7
			if (GeneralLedgerCompanyRel.FinanceEnterpriseGroup.FinanceDimension8Required)
				if (PayablesAccrualCodeDetailRel.DistributionAccount.FinanceDimension8 entered)
					LocalFinanceCodeBlock.FinanceDimension8	= PayablesAccrualCodeDetailRel.DistributionAccount.FinanceDimension8
			if (GeneralLedgerCompanyRel.FinanceEnterpriseGroup.FinanceDimension9Required)
				if (PayablesAccrualCodeDetailRel.DistributionAccount.FinanceDimension9 entered)
					LocalFinanceCodeBlock.FinanceDimension9	= PayablesAccrualCodeDetailRel.DistributionAccount.FinanceDimension9
			if (GeneralLedgerCompanyRel.FinanceEnterpriseGroup.FinanceDimension10Required)
				if (PayablesAccrualCodeDetailRel.DistributionAccount.FinanceDimension10 entered)
					LocalFinanceCodeBlock.FinanceDimension10	= PayablesAccrualCodeDetailRel.DistributionAccount.FinanceDimension10

		CreateCashRequirementsErrors
			if (!Skip)
				if (!BankTransactionCode.Active)
					Skip = true
					SkipMessage = SkipMessage21
					LocalCashRequirementsResult = PrmCashRequirementsResult
					if (InactiveBankTransactionCodeErrorRel not exists)
						invoke Create CashRequirementsError
							invoked.VendorGroup 				= PrmVendorGroup
							invoked.PayGroup					= PrmPayGroup
							invoked.CashRequirementsResult		= PrmCashRequirementsResult
							invoked.PayablesCompany				= Company
							invoked.PayablesInvoice				= PayablesInvoice
							invoked.PayablesInvoicePayment		= PayablesInvoicePayment
							invoked.ErrorMessage				= SkipMessage
							invoked.ErrorNumber					= CashRequirementsErrorNumber.BankTransactionCodeInactive
							invoked.CashManagementGroup			= PrmVendorGroup.BusinessGroup.FinanceEnterpriseGroup
							invoked.BankTransactionCode			= BankTransactionCode
				else
					if (BankTransactionCode.ElectronicPrenotification
					and ((RemitToCode.ACHPrenotification.NotPrenotified
					or    RemitToCode.ACHPrenotification.Prenotified)
					or   (Vendor.ACHPrenotification.NotPrenotified
					or    Vendor.ACHPrenotification.Prenotified)))
						if (!BankTransactionCode.ElectronicAlternateTransactionCode.BankTransactionCode.Active)
							Skip = true
							SkipMessage = SkipMessage25
							LocalCashRequirementsResult = PrmCashRequirementsResult
							if (InactiveAlternateBankTransactionCodeErrorRel not exists)
								invoke Create CashRequirementsError
									invoked.VendorGroup 					= PrmVendorGroup
									invoked.PayGroup						= PrmPayGroup
									invoked.CashRequirementsResult			= PrmCashRequirementsResult
									invoked.PayablesCompany					= Company
									invoked.PayablesInvoice					= PayablesInvoice
									invoked.PayablesInvoicePayment			= PayablesInvoicePayment
									invoked.ErrorMessage					= SkipMessage
									invoked.ErrorNumber						= CashRequirementsErrorNumber.AlternateBankTransactionCodeInactive
									invoked.CashManagementGroup				= PrmVendorGroup.BusinessGroup.FinanceEnterpriseGroup
									invoked.AlternateBankTransactionCode	= BankTransactionCode.ElectronicAlternateTransactionCode.BankTransactionCode

			if (!Skip)
				if (!CashCode.Active)
					Skip = true
					SkipMessage = SkipMessage23
					LocalCashRequirementsResult = PrmCashRequirementsResult
					if (InactiveCashCodeErrorRel not exists)
						invoke Create CashRequirementsError
							invoked.VendorGroup 				= PrmVendorGroup
							invoked.PayGroup					= PrmPayGroup
							invoked.CashRequirementsResult		= PrmCashRequirementsResult
							invoked.PayablesCompany				= Company
							invoked.PayablesInvoice				= PayablesInvoice
							invoked.PayablesInvoicePayment		= PayablesInvoicePayment
							invoked.ErrorMessage				= SkipMessage
							invoked.ErrorNumber					= CashRequirementsErrorNumber.CashCodeInactive
							invoked.CashManagementGroup			= PrmVendorGroup.BusinessGroup.FinanceEnterpriseGroup
							invoked.CashCode					= CashCode


			if (!Skip)
				RecordInError = false
				if (BankTransactionCodeRel.PaymentOutputOption.ElectronicFile	
				and BankTransactionCodeRel.PaymentOutputOption.Swift
				and BankTransactionCodeRel.PaymentOutputOption.WireTransfer)
					LocalCashCode = PrmCashRequirementsResult.CashCode
					if (LocalCashCode not entered)
						LocalCashCode = PrmCashRequirementsResult.OverrideCashCode                     
					if (LocalCashCode not entered)
						LocalCashCode = CashCode

					if (CashRequirementsCashPaymentFormatRel not exists)
						Skip = true
						SkipMessage = SkipMessage27

						invoke Create CashRequirementsError
							invoked.VendorGroup 				= PrmVendorGroup
							invoked.PayGroup					= PrmPayGroup
							invoked.CashRequirementsResult		= PrmCashRequirementsResult
							invoked.PayablesCompany				= Company
							invoked.PayablesInvoice				= PayablesInvoice
							invoked.PayablesInvoicePayment		= PayablesInvoicePayment
							invoked.ErrorMessage				= SkipMessage
							invoked.ErrorNumber					= CashRequirementsErrorNumber.CashPaymentFormatError                


					if (!Skip)
						RecordInError = false
						LocalBankAccountValidationType = RemitToCode.BankAccountValidationType
						if (LocalBankAccountValidationType not entered)
							LocalBankAccountValidationType = PayVendor.BankAccountValidationType

						if (LocalBankAccountValidationType.Check
						or  LocalCashCode.Sepa)
							NextSentence = true
						else
							LocalBankAccountNumber = RemitToCode.BankAccountNumber
							if (LocalBankAccountNumber not entered)
								LocalBankAccountNumber = PayVendor.BankAccountNumber

							if (LocalBankAccountNumber not entered)
								RecordInError	= true

							if (CashRequirementsCashPaymentFormatRel.PaymentFormat.SwedenPgdPlusgiroDomestic)
								if (LocalBankAccountValidationType.Plusgiro
								or  LocalBankAccountValidationType.SocialSecurityNbr
								or  LocalBankAccountValidationType.Bankgiro
								or  LocalBankAccountValidationType.Check)
									NextSentence = true
								else
									RecordInError	= true

							if (CashRequirementsCashPaymentFormatRel.PaymentFormat.SwedenBgdBankgiroDomestic)
								if (LocalBankAccountValidationType.Bankgiro
								or  LocalBankAccountValidationType.BankAccountSweden
								or  LocalBankAccountValidationType.Plusgiro
								or  LocalBankAccountValidationType.Check)
									NextSentence = true
								else
									RecordInError	= true

							if (CashRequirementsCashPaymentFormatRel.PaymentFormat.FinlandFndNordeaDomestic)
								if (LocalBankAccountValidationType.NordeaFinland
								or  LocalBankAccountValidationType.Check)
									NextSentence = true
								else
									RecordInError	= true

							if (CashRequirementsCashPaymentFormatRel.PaymentFormat.NorwayNtdTelepayDomestic)
								if (LocalBankAccountValidationType.AccountNorway
								or  LocalBankAccountValidationType.RegNbrAccount
								or  LocalBankAccountValidationType.Check)
									NextSentence = true
								else
									RecordInError	= true

							if (CashRequirementsCashPaymentFormatRel.PaymentFormat.DenmarkDddDanskeBankDomestic)
								if (LocalBankAccountValidationType.AccountNorway
								or  LocalBankAccountValidationType.RegNbrAccount
								or  LocalBankAccountValidationType.Fik71
								or  LocalBankAccountValidationType.Giro04
								or  LocalBankAccountValidationType.Check
								or  LocalBankAccountValidationType.Inpayment73
								or  LocalBankAccountValidationType.Inpayment75)
									NextSentence = true
								else
									RecordInError	= true

							if (CashRequirementsCashPaymentFormatRel.PaymentFormat.SwedenPgiPlusgiroInternational
							or  CashRequirementsCashPaymentFormatRel.PaymentFormat.SwedenBgiBankgiroInternational
							or  CashRequirementsCashPaymentFormatRel.PaymentFormat.FinlandFniNordeaInternational
							or  CashRequirementsCashPaymentFormatRel.PaymentFormat.NorwayNtiTelepayInternational
							or  CashRequirementsCashPaymentFormatRel.PaymentFormat.DenmarkDdiDanskeBankInternational)
								if (LocalBankAccountValidationType.Iban
								or  LocalBankAccountValidationType.Check
								or  LocalBankAccountValidationType.NationalClearingSystem)
									NextSentence = true
								else
									RecordInError	= true
						if (RecordInError)
							Skip = true
							SkipMessage = SkipMessage24
							invoke Create CashRequirementsError
								invoked.VendorGroup 				= PrmVendorGroup
								invoked.PayGroup					= PrmPayGroup
								invoked.CashRequirementsResult		= PrmCashRequirementsResult
								invoked.PayablesCompany				= Company
								invoked.PayablesInvoice				= PayablesInvoice
								invoked.PayablesInvoicePayment		= PayablesInvoicePayment
								invoked.ErrorMessage				= SkipMessage
								invoked.ErrorNumber					= CashRequirementsErrorNumber.VendorBankError

		ManualAddMatchRules		
			if (!Skip)
				if (PrmCashRequirementsResult.ProcessGroup entered)
					if (PrmCashRequirementsResult.ProcessGroup = "NONE")
						if (ProcessGroup = PrmCashRequirementsResult.ProcessGroup)
							Skip = false
						else
							if (ProcessGroup entered)
								Skip = true
					else
						if (ProcessGroup != PrmCashRequirementsResult.ProcessGroup)
							Skip = true
					SkipMessage = SkipMessage1

			if (!Skip)
				if (PrmCashRequirementsResult.Company entered
				and Company != PrmCashRequirementsResult.Company)
					Skip = true
					SkipMessage = SkipMessage7

			if (!Skip)
				if (PrmCashRequirementsResult.ProcessLevel entered
				and ProcessLevel != PrmCashRequirementsResult.ProcessLevel)
					Skip = true
					SkipMessage = SkipMessage8

			if (!Skip)
				if (PrmCashRequirementsResult.PaymentCode entered
				and BankTransactionCode != PrmCashRequirementsResult.PaymentCode)
					Skip = true
					SkipMessage = SkipMessage9

			if (!Skip)
				if (PrmCashRequirementsResult.PayImmediatelyOnly.Yes
				and !PayImmediately)
					Skip = true
					SkipMessage = SkipMessage2

			if (!Skip)
				if (TemporaryHold entered
				and !TemporaryHold.ApprovedByEngine)
					Skip = true
					SkipMessage = SkipMessage3

			if (!Skip)		
				if (PayablesInvoice.BackgroundProcessing entered)
					Skip = true
					SkipMessage = SkipMessage28

		MatchRules				

			if (!Skip)			
				if (!BankTransactionCodeRel.BankTransactionType.CashPayment)
					Skip = true
					SkipMessage = SkipMessage6
			if (!Skip) 			
				if (!BankTransactionCodeRel.PaymentOutputOption.PrintedDocument
				and !BankTransactionCodeRel.PaymentOutputOption.ElectronicFile
				and !BankTransactionCodeRel.PaymentOutputOption.Swift
				and !BankTransactionCodeRel.PaymentOutputOption.WireTransfer)
					Skip = true
					SkipMessage = SkipMessage6

			if (!Skip)
				if (Vendor.OnHold)		
					Skip = true
					SkipMessage = SkipMessage10

			if (!Skip)
				if (PayVendor.OnHold)
					Skip = true
					SkipMessage = SkipMessage11

			if (!Skip)		
				if (RemitToCode.OnHold)
					Skip = true
					SkipMessage = SkipMessage22
					
			if (!Skip)
				if (IsOnHold)
					if (PayablesInvoicePaymentsOnHoldRel exists
					and (PayablesInvoicePaymentsOnHoldRel.HoldCode = PrmVendorGroup.ReturnOnInvestmentHoldCode
					or   PayablesInvoicePaymentsOnHoldRel.HoldCode = PrmVendorGroup.CreditBalanceHoldCode
					or   PayablesInvoicePaymentsOnHoldRel.HoldCode = PrmVendorGroup.MaximumPaymentHoldCode))
						invoke TakeOffHold
					else
						Skip = true
						SkipMessage = SkipMessage4

			if (!Skip)
				if (!PayablesInvoice.MatchProcessType.Expense)
					if (PayablesInvoice.HasOpenMatchInvoiceMessages)
						Skip = true
						SkipMessage = SkipMessage19
					else
						if (PayablesInvoice.MatchStatus < 2
						and !PayablesInvoice.InvoiceType.MatchPrepayment)
							Skip = true
							SkipMessage = SkipMessage18

			if (!Skip)
				if (PrmCashRequirementsResult.OverrideCashCode entered
				and PayablesInvoice.InvoiceCurrency != PrmCashRequirementsResult.OverrideCashCode.Currency)
					if (CalculateCurrencyExchangeRel not exists)
						invoke Create CalculateCurrencyExchangeRel
							resume on error
								Skip = true
							invoked.FinanceEnterpriseGroup		= GeneralLedgerCompanyRel.FinanceEnterpriseGroup
							invoked.ExchangeDate				= PrmCashRequirementsResult.PaymentDate
							invoked.FromCurrency				= PayablesInvoice.InvoiceCurrency
							invoked.CurrencyExchange.ToCurrency	= PrmCashRequirementsResult.OverrideCashCode.Currency
							invoked.CurrencyTable				= PayablesInvoice.CurrencyTable
					else
						invoke Update CalculateCurrencyExchangeRel
							resume on error
								Skip = true
							invoked.FinanceEnterpriseGroup		= GeneralLedgerCompanyRel.FinanceEnterpriseGroup
							invoked.ExchangeDate				= PrmCashRequirementsResult.PaymentDate
							invoked.FromCurrency				= PayablesInvoice.InvoiceCurrency
							invoked.CurrencyExchange.ToCurrency	= PrmCashRequirementsResult.OverrideCashCode.Currency
							invoked.CurrencyTable				= PayablesInvoice.CurrencyTable
					SkipMessage = SkipMessage5





			ConfirmAdd = false		

			if (!Skip)
				if (DueDate > PrmCashRequirementsResult.PayThroughDate
				and !PayImmediately)
					Skip = true
					ConfirmAdd = true
					SkipMessage = ConfirmMessage17
					if (!DerivedSplitInvoice)
						if (PayablesInvoice.DiscountDate1 entered
						and PrmCashRequirementsResult.PaymentDate <= PayablesInvoice.DiscountDate1
						and PayablesInvoice.DiscountDate1 <= PrmCashRequirementsResult.PayThroughDate)
							Skip = false
							ConfirmAdd = false
							SkipMessage = blank
						else
							if (PayablesInvoice.DiscountDate2 entered
							and PrmCashRequirementsResult.PaymentDate <= PayablesInvoice.DiscountDate2
							and PayablesInvoice.DiscountDate2 <= PrmCashRequirementsResult.PayThroughDate)
								Skip = false
								ConfirmAdd = false
								SkipMessage = blank
							else
								if (PayablesInvoice.DiscountDate3 entered
								and PrmCashRequirementsResult.PaymentDate <= PayablesInvoice.DiscountDate3
								and PayablesInvoice.DiscountDate3 <= PrmCashRequirementsResult.PayThroughDate)
									Skip = false
									ConfirmAdd = false
									SkipMessage = blank
					else
						if (DiscountDate entered
						and PrmCashRequirementsResult.PaymentDate <= DiscountDate
						and DiscountDate <= PrmCashRequirementsResult.PayThroughDate)
							Skip = false
							ConfirmAdd = false
							SkipMessage = blank

			if (!Skip)
				if (PrmCashRequirementsResult.CurrencyOption.Include)
					if (PrmCashRequirementsResult.InvoiceCurrency entered
					and InvoiceCurrency != PrmCashRequirementsResult.InvoiceCurrency)
						Skip = true
						ConfirmAdd = true
						SkipMessage = ConfirmMessage12
				else
					if (PrmCashRequirementsResult.InvoiceCurrency entered
					and InvoiceCurrency = PrmCashRequirementsResult.InvoiceCurrency)
						Skip = true
						ConfirmAdd = true
						SkipMessage = ConfirmMessage12

			if (!Skip)
				if (PrmCashRequirementsResult.InvoiceGroup entered
				and InvoiceGroup != PrmCashRequirementsResult.InvoiceGroup)
					Skip = true
					ConfirmAdd = true
					SkipMessage = ConfirmMessage13

			if (!Skip)
				if (PrmCashRequirementsResult.Vendor entered
				or  PrmCashRequirementsResult.VendorEntered)		
					if (PrmCashRequirementsResult.Vendor entered)
						if (Vendor != PrmCashRequirementsResult.Vendor)
							Skip = true
							ConfirmAdd = true
					else
						if (PrmCashRequirementsResult.VendorEntered)		
							LocalCounter 		= 1
							Match				= false
							VendorEntered	= false
							while LocalCounter < 10
								if (PrmCashRequirementsResult.Vendors.Vendor[LocalCounter] entered)
									VendorEntered = true
									if (Vendor = PrmCashRequirementsResult.Vendors.Vendor[LocalCounter])	
										Match = true
										end while
								LocalCounter += 1
							if (VendorEntered
							and !Match)
								Skip = true
								ConfirmAdd = true
				else
					LocalCounter 		= 1
					Match				= false
					VendorClassEntered	= false
					while LocalCounter < 10
						if (PrmCashRequirementsResult.VendorClasses.VenClass[LocalCounter] entered)
							VendorClassEntered = true
							if (Vendor.VendorClass = PrmCashRequirementsResult.VendorClasses.VenClass[LocalCounter])	
								Match = true
								end while
						LocalCounter += 1
					if (VendorClassEntered
					and !Match)
						Skip = true
						ConfirmAdd = true
				SkipMessage = ConfirmMessage14

			if (!Skip)
				if (PrmCashRequirementsResult.CashCodeGroup entered)
					if (CashCode = any PrmCashRequirementsResult.CashCodeGroup.CashCodeGroupDetailsRel.CashCode)
						Skip = false
					else
						Skip = true
						ConfirmAdd = true
					SkipMessage = ConfirmMessage15
				else
					if (PrmCashRequirementsResult.CashCode entered)
						if (CashCode != PrmCashRequirementsResult.CashCode)
							Skip = true
							ConfirmAdd = true
					SkipMessage = ConfirmMessage16

			include CreateCashRequirementsErrors		

		MatchProcessingRules  

			WSRecordBypassedFlag	= false
			UpdateThisPayment		= true

			if (!PayablesInvoice.InvoiceSource.DebtorCreditMemo)		
				if (DueDate > PrmCashRequirementsResult.PayThroughDate
				and !PayImmediately)
					WSRecordBypassedFlag	= true
					SkipMessage				= ConfirmMessage17
					ConfirmAdd				= true
				else
					SkipMessage				= blank
					ConfirmAdd				= false

			invoke SetDiscountFields PayablesInvoice

			if (!DerivedSplitInvoice)



				if (PayablesInvoice.DiscountDate entered)
					DiscountLost				= true



				if (PayablesInvoice.DiscountDate1 >= PrmCashRequirementsResult.PaymentDate			
				or  PrmCashRequirementsResult.DiscountOption.Yes)
					DiscountDate					= PayablesInvoice.DiscountDate1
					DiscountPercent					= PayablesInvoice.DiscountPercent1

					LocalDiscountAmt				= PayablesInvoice.DiscountAmount1	
					DiscountAmount.CurrencyAmount	= LocalDiscountAmt					
					DiscountLost					= false
					UpdateThisPayment		= true
					WSRecordBypassedFlag 	= false
				else


					if (PayablesInvoice.DiscountDate2 >= PrmCashRequirementsResult.PaymentDate)			
						DiscountDate					= PayablesInvoice.DiscountDate2
						DiscountPercent					= PayablesInvoice.DiscountPercent2

						LocalDiscountAmt				= PayablesInvoice.DiscountAmount2	
						DiscountAmount.CurrencyAmount	= LocalDiscountAmt					
						DiscountLost					= false
						UpdateThisPayment		= true
						WSRecordBypassedFlag 	= false
					else


						if (PayablesInvoice.DiscountDate3 >= PrmCashRequirementsResult.PaymentDate)			
							DiscountDate					= PayablesInvoice.DiscountDate3
							DiscountPercent					= PayablesInvoice.DiscountPercent3

							LocalDiscountAmt				= PayablesInvoice.DiscountAmount3	
							DiscountAmount.CurrencyAmount	= LocalDiscountAmt					
							DiscountLost					= false
							UpdateThisPayment		= true
							WSRecordBypassedFlag	= false
			else
				if (PrmCashRequirementsResult.DiscountOption.No)
					if (PrmCashRequirementsResult.PaymentDate > DiscountDate)
						if (DiscountAmount.CurrencyAmount entered)
							DiscountLost					= true
						else
							DiscountLost					= false
					else
						DiscountLost						= false
						WSRecordBypassedFlag				= false		
					UpdateThisPayment		= true
				else
					if (DiscountAmount.CurrencyAmount not entered)
						DiscountAmount.CurrencyAmount	= DiscountPercent * TransientAllowableAmount
						LocalCurrencyAmount				= DiscountAmount.CurrencyAmount
						DiscountAmount.CurrencyAmount	= RoundedCurrencyAmount
						UpdateThisPayment		= true
					DiscountLost			= false


			if (PayablesInvoice.SecondaryWithholding)
				if (Company.SecondaryWithholding)

					LocalSecondaryWithholdingCode	= SecondaryWithholdingCode1
					LocalPaymentDate				= PrmCashRequirementsResult.PaymentDate
					if (DiscountLost)													
						LocalTranSecWth1			= PaymentAmount.CurrencyAmount		
					else																
						LocalTranSecWth1			= PaymentAmount.CurrencyAmount - DiscountAmount.CurrencyAmount
					LocalTranSecWth1				= LocalTranSecWth1 * (last PayablesSecondaryWithholdingRateRel.SecondaryWithholdingPercent)
					SecondaryWithholdingTransactionAmount1	= LocalTranSecWth1
					LocalCurrencyAmount						= SecondaryWithholdingTransactionAmount1
					SecondaryWithholdingTransactionAmount1	= RoundedCurrencyAmount
					SecondaryWithholdingPercent1           	= last PayablesSecondaryWithholdingRateRel.SecondaryWithholdingPercent
					if (InvoiceCurrency	!= CashCode.Currency)
						LocalExchangeDate													= LocalPaymentDate
						LocalSecondaryWithholdingExchange1.TransactionAmount				= SecondaryWithholdingTransactionAmount1
						LocalSecondaryWithholdingExchange1.BaseAmount.ToCurrency			= CashCode.Currency
						if (InvoiceCurrency = PrmCashRequirementsResult.InvoiceCurrency
						and CashCode 		= PrmCashRequirementsResult.CashCode
						and PrmCashRequirementsResult.OverridePaymentRate entered)
							LocalSecondaryWithholdingExchange1.BaseAmount.EnteredCurrencyRate	= PrmCashRequirementsResult.OverridePaymentRate 
						SecondaryWithholdingBaseAmount1										= LocalSecondaryWithholdingExchange1.BaseAmount.OutputCurrencyAmount
					else
						SecondaryWithholdingBaseAmount1										= SecondaryWithholdingTransactionAmount1




					if (SecondaryWithholdingCode1.MinimumPaymentAmount entered)							
						if (PaymentAmount.CurrencyAmount < 0
						and SecondaryWithholdingCode1.MinimumPaymentAmount > (PaymentAmount.CurrencyAmount * -1))
							initialize SecondaryWithholdingTransactionAmount1								
							initialize SecondaryWithholdingBaseAmount1	
						else									
							if (PaymentAmount.CurrencyAmount > 0
							and SecondaryWithholdingCode1.MinimumPaymentAmount > PaymentAmount.CurrencyAmount)	
								initialize SecondaryWithholdingTransactionAmount1								
								initialize SecondaryWithholdingBaseAmount1									

					LocalSecondaryWithholdingCode	= SecondaryWithholdingCode2
					LocalPaymentDate				= PrmCashRequirementsResult.PaymentDate
					if (DiscountLost)													
						LocalTranSecWth2			= PaymentAmount.CurrencyAmount		
					else																
						LocalTranSecWth2			= PaymentAmount.CurrencyAmount - DiscountAmount.CurrencyAmount
					LocalTranSecWth2				= LocalTranSecWth2 * (last PayablesSecondaryWithholdingRateRel.SecondaryWithholdingPercent)
					SecondaryWithholdingTransactionAmount2	= LocalTranSecWth2
					LocalCurrencyAmount						= SecondaryWithholdingTransactionAmount2
					SecondaryWithholdingTransactionAmount2	= RoundedCurrencyAmount
					SecondaryWithholdingPercent2           	= last PayablesSecondaryWithholdingRateRel.SecondaryWithholdingPercent
					if (InvoiceCurrency	!= CashCode.Currency)
						LocalExchangeDate													= LocalPaymentDate
						LocalSecondaryWithholdingExchange2.TransactionAmount				= SecondaryWithholdingTransactionAmount2
						LocalSecondaryWithholdingExchange2.BaseAmount.ToCurrency			= CashCode.Currency
						if (InvoiceCurrency = PrmCashRequirementsResult.InvoiceCurrency
						and CashCode 		= PrmCashRequirementsResult.CashCode
						and PrmCashRequirementsResult.OverridePaymentRate entered)
							LocalSecondaryWithholdingExchange2.BaseAmount.EnteredCurrencyRate	= PrmCashRequirementsResult.OverridePaymentRate 
						SecondaryWithholdingBaseAmount2										= LocalSecondaryWithholdingExchange2.BaseAmount.OutputCurrencyAmount
					else
						SecondaryWithholdingBaseAmount2										= SecondaryWithholdingTransactionAmount2




					if (SecondaryWithholdingCode2.MinimumPaymentAmount entered)							
						if (PaymentAmount.CurrencyAmount < 0
						and SecondaryWithholdingCode2.MinimumPaymentAmount > (PaymentAmount.CurrencyAmount * -1))
							initialize SecondaryWithholdingTransactionAmount2								
							initialize SecondaryWithholdingBaseAmount2	
						else									
							if (PaymentAmount.CurrencyAmount > 0
							and SecondaryWithholdingCode2.MinimumPaymentAmount > PaymentAmount.CurrencyAmount)	
								initialize SecondaryWithholdingTransactionAmount2								
								initialize SecondaryWithholdingBaseAmount2									


					LocalSecondaryWithholdingCode	= SecondaryWithholdingCode3
					LocalPaymentDate				= PrmCashRequirementsResult.PaymentDate
					if (DiscountLost)													
						LocalTranSecWth3			= PaymentAmount.CurrencyAmount		
					else																
						LocalTranSecWth3			= PaymentAmount.CurrencyAmount - DiscountAmount.CurrencyAmount
					LocalTranSecWth3				= LocalTranSecWth3 * (last PayablesSecondaryWithholdingRateRel.SecondaryWithholdingPercent)
					SecondaryWithholdingTransactionAmount3	= LocalTranSecWth3
					LocalCurrencyAmount						= SecondaryWithholdingTransactionAmount3
					SecondaryWithholdingTransactionAmount3	= RoundedCurrencyAmount
					SecondaryWithholdingPercent3           	= last PayablesSecondaryWithholdingRateRel.SecondaryWithholdingPercent
					if (InvoiceCurrency	!= CashCode.Currency)
						LocalExchangeDate													= LocalPaymentDate
						LocalSecondaryWithholdingExchange3.TransactionAmount				= SecondaryWithholdingTransactionAmount3
						LocalSecondaryWithholdingExchange3.BaseAmount.ToCurrency			= CashCode.Currency
						if (InvoiceCurrency = PrmCashRequirementsResult.InvoiceCurrency
						and CashCode 		= PrmCashRequirementsResult.CashCode
						and PrmCashRequirementsResult.OverridePaymentRate entered)
							LocalSecondaryWithholdingExchange3.BaseAmount.EnteredCurrencyRate	= PrmCashRequirementsResult.OverridePaymentRate 
						SecondaryWithholdingBaseAmount3										= LocalSecondaryWithholdingExchange3.BaseAmount.OutputCurrencyAmount
					else
						SecondaryWithholdingBaseAmount3										= SecondaryWithholdingTransactionAmount3




					if (SecondaryWithholdingCode3.MinimumPaymentAmount entered)							
						if (PaymentAmount.CurrencyAmount < 0
						and SecondaryWithholdingCode3.MinimumPaymentAmount > (PaymentAmount.CurrencyAmount * -1))
							initialize SecondaryWithholdingTransactionAmount3								
							initialize SecondaryWithholdingBaseAmount3	
						else									
							if (PaymentAmount.CurrencyAmount > 0
							and SecondaryWithholdingCode2.MinimumPaymentAmount > PaymentAmount.CurrencyAmount)	
								initialize SecondaryWithholdingTransactionAmount3								
								initialize SecondaryWithholdingBaseAmount3									

					UpdateThisPayment				= true

			if (Anticipation
			and PrmCashRequirementsResult.PaymentDate < DueDate)
				if (Vendor.PrimeRate not entered)
					DiscountAmount.CurrencyAmount	= blank
					DiscountDate					= PrmCashRequirementsResult.PaymentDate
				else
					WsdrNbrDays = DueDate - PrmCashRequirementsResult.PaymentDate
					DiscountAmount.CurrencyAmount	= WsdrNbrDays * PaymentAmount.CurrencyAmount * (Vendor.PrimeRate / 100 / 365)
					LocalCurrencyAmount				= DiscountAmount.CurrencyAmount
					DiscountAmount.CurrencyAmount	= RoundedCurrencyAmount
					DiscountDate					= PrmCashRequirementsResult.PaymentDate
					if (DiscountLost
					and DiscountAmount.CurrencyAmount entered)
						DiscountLost				= false

				UpdateThisPayment					= true

			if (Vendor.IncomeWithholding
			and IncomeCode entered
			and !Company.GlobalWithholding)
				if (Vendor.AllowWithholdingCodeOverride)
					if (ReportableIncomeAmount not entered)
						WithholdingAmount = PaymentAmount.CurrencyAmount - DerivedDiscountAmount
						WithholdingAmount = WithholdingAmount * VendorWithholdingCodeRel.IncomeWithholdingPercent
					else
						WithholdingAmount = ReportableIncomeAmount - DerivedDiscountAmount
						WithholdingAmount = WithholdingAmount * VendorWithholdingCodeRel.IncomeWithholdingPercent
				else
					if (ReportableIncomeAmount not entered)
						WithholdingAmount = PaymentAmount.CurrencyAmount - DerivedDiscountAmount
						WithholdingAmount = WithholdingAmount * Company.IncomeWithholdingPercent
					else
						WithholdingAmount = ReportableIncomeAmount - DerivedDiscountAmount
						WithholdingAmount = WithholdingAmount * Company.IncomeWithholdingPercent
				LocalCurrencyAmount	= WithholdingAmount
				WithholdingAmount	= RoundedCurrencyAmount
				UpdateThisPayment				= true

			if (Vendor.IncomeWithholding
			and Company.GlobalWithholding)
				CheckDate											= PrmCashRequirementsResult.PaymentDate
				CalculateWithholdingAmount.PayablesCompany			= Company
				CalculateWithholdingAmount.PayablesInvoice			= PayablesInvoice
				CalculateWithholdingAmount.PayablesInvoicePayment	= PayablesInvoicePayment
				if (CashCode.Currency	= InvoiceCurrency)
					CalculateWithholdingAmount.PaymentExchangeRate	= 1
				else
					if (InvoiceCurrency = PrmCashRequirementsResult.InvoiceCurrency
					and CashCode 		= PrmCashRequirementsResult.CashCode
					and PrmCashRequirementsResult.OverridePaymentRate entered)
						CalculateWithholdingAmount.PaymentExchangeRate		= PrmCashRequirementsResult.OverridePaymentRate 
					else	
						LocalExchangeDate									= CheckDate
						LocalCurrencyTable									= PayablesInvoice.CurrencyTable
						LocalCashCodePaymentExchange.TransactionAmount		= PaymentAmount.CurrencyAmount
						LocalCashCodePaymentExchange.BaseAmount.ToCurrency	= CashCode.Currency
						CalculateWithholdingAmount.PaymentExchangeRate		= LocalCashCodePaymentExchange.BaseAmount.OutputCurrencyRate
				WithholdingAmount									= CalculateWithholdingAmount.WithholdingAmount



			LocalCurrencyAmount				= DiscountAmount.CurrencyAmount
			DiscountAmount.CurrencyAmount	= RoundedCurrencyAmount

			if (DiscountLost)
				NetPaymentAmount.CurrencyAmount = PaymentAmount.CurrencyAmount - WithholdingAmount - FATCATransactionIncomeAmount - SecondaryWithholdingBaseAmount1 - SecondaryWithholdingBaseAmount2 - SecondaryWithholdingBaseAmount3
			else
				NetPaymentAmount.CurrencyAmount = PaymentAmount.CurrencyAmount - DerivedDiscountAmount - WithholdingAmount - FATCATransactionIncomeAmount - SecondaryWithholdingBaseAmount1 - SecondaryWithholdingBaseAmount2 - SecondaryWithholdingBaseAmount3

			if (WithholdingAmount entered
			and IncomeCode entered
			and IncomeWithholdingCode not entered)
				IncomeWithholdingCode = ProcessLevel.IncomeWithholdingCode
				if (IncomeWithholdingCode not entered)
					IncomeWithholdingCode = Company.IncomeWithholdingCode

			if (WithholdingAmount not entered
			and BaseWithholdingAmount not entered
			and IncomeCode not entered
			and FATCAIncomeCode entered
			and IncomeWithholdingCode not entered)
				IncomeWithholdingCode = ProcessLevel.IncomeWithholdingCode
				if (IncomeWithholdingCode not entered)
					IncomeWithholdingCode = Company.IncomeWithholdingCode

			if (PrmCashRequirementsResult.OverrideCashCode entered)
				TransientUpdateFromBatch = true
				CashCode = PrmCashRequirementsResult.OverrideCashCode

			CheckDate = PrmCashRequirementsResult.PaymentDate

			if (CashCode.Currency	= InvoiceCurrency)
				BankCheckAmount												= NetPaymentAmount.CurrencyAmount
			else
				LocalExchangeDate											= CheckDate
				LocalCurrencyTable											= PayablesInvoice.CurrencyTable
				LocalCashCodePaymentExchange.TransactionAmount				= NetPaymentAmount.CurrencyAmount
				LocalCashCodePaymentExchange.BaseAmount.ToCurrency			= CashCode.Currency
				if (InvoiceCurrency = PrmCashRequirementsResult.InvoiceCurrency
				and CashCode 		= PrmCashRequirementsResult.CashCode
				and PrmCashRequirementsResult.OverridePaymentRate entered)
					LocalCashCodePaymentExchange.BaseAmount.EnteredCurrencyRate	= PrmCashRequirementsResult.OverridePaymentRate 
				BankCheckAmount												= LocalCashCodePaymentExchange.BaseAmount.OutputCurrencyAmount

			if (VendorPaymentCurrency !entered)
				if (Vendor.DefaultVendorPaymentCurrency.Invoice)		
					VendorPaymentCurrency	= InvoiceCurrency
				else
					VendorPaymentCurrency	= CashCode.Currency

			if (PaymentPriority !entered)		
				PaymentPriority		= "1"

			if (DueDate <= PrmCashRequirementsResult.PayThroughDate)
				WSRecordBypassedFlag = false

			if (WSRecordBypassedFlag)
				Skip = true
				ConfirmAdd = true

			if (PrmCashRequirementsResult.DiscountOption.No)
				if (CashCode.ReturnOnInvestmentRate entered)
					if (DiscountDate = DueDate)
						WSRoiAmt = blank
					else
						WSRoiAmt = DueDate - PrmCashRequirementsResult.PaymentDate
						WSRoiAmt = WSRoiAmt * (CashCode.ReturnOnInvestmentRate / 100 / 365)
						WSRoiAmt = WSRoiAmt * (PaymentAmount.CurrencyAmount - DiscountAmount.CurrencyAmount)
						LocalCurrencyAmount	= WSRoiAmt
						WSRoiAmt			= RoundedCurrencyAmount

					if (DiscountAmount.CurrencyAmount <= WSRoiAmt)
						invoke RestrictedPutOnHold
							invoked.InvoiceHoldCode = PrmVendorGroup.ReturnOnInvestmentHoldCode

			if (Vendor.ValidateCertificationAmount)	
				if (first ValidateVendorValidCertificationDaysRel exists)
					invoke UpdateCertificationDates first ValidateVendorValidCertificationDaysRel
						invoked.PrmPaymentDate = CheckDate 
						invoked.PrmPaymentAmount = NetPaymentAmount.CurrencyAmount
				else			
					if ((first ValidateVendorCertificationRel.CurrentSpendAmount + NetPaymentAmount.CurrencyAmount) > first ValidateVendorCertificationRel.MaximumSpendAmount)
						invoke RestrictedPutOnHold
							if (ValidateVendorCertificationRel exists)
								invoked.InvoiceHoldCode = first ValidateVendorCertificationRel.MaximumSpendHoldCode
							else
								invoked.InvoiceHoldCode = last ValidateVendorValidCertificationExistsRel.MaximumSpendHoldCode							
					else 
						invoke FastUpdate first ValidateVendorCertificationRel
							invoked.CurrentSpendAmount += NetPaymentAmount.CurrencyAmount

		ManualMatchProcessingRules 


			invoke SetDiscountFields PayablesInvoice

			if (!DerivedSplitInvoice)



				if (PayablesInvoice.DiscountDate entered)
					DiscountLost				= true

				if (PayablesInvoice.DiscountDate1 >= CheckDate)
					DiscountDate					= PayablesInvoice.DiscountDate1
					DiscountPercent					= PayablesInvoice.DiscountPercent1

					LocalDiscountAmt				= PayablesInvoice.DiscountAmount1	
					DiscountAmount.CurrencyAmount	= LocalDiscountAmt					
					DiscountLost					= false
				else
					if (PayablesInvoice.DiscountDate2 >= CheckDate)
						DiscountDate					= PayablesInvoice.DiscountDate2
						DiscountPercent					= PayablesInvoice.DiscountPercent2

						LocalDiscountAmt				= PayablesInvoice.DiscountAmount2	
						DiscountAmount.CurrencyAmount	= LocalDiscountAmt					
						DiscountLost					= false
					else
						if (PayablesInvoice.DiscountDate3 >= CheckDate)
							DiscountDate					= PayablesInvoice.DiscountDate3
							DiscountPercent					= PayablesInvoice.DiscountPercent3

							LocalDiscountAmt				= PayablesInvoice.DiscountAmount3	
							DiscountAmount.CurrencyAmount	= LocalDiscountAmt					
							DiscountLost					= false

			if (PayablesInvoice.SecondaryWithholding)
				if (Company.SecondaryWithholding)

					LocalSecondaryWithholdingCode	= SecondaryWithholdingCode1
					LocalPaymentDate				= CheckDate
					if (DiscountLost)													
						LocalTranSecWth1			= PaymentAmount.CurrencyAmount		
					else																
						LocalTranSecWth1			= PaymentAmount.CurrencyAmount - DiscountAmount.CurrencyAmount
					LocalTranSecWth1				= LocalTranSecWth1 * (last PayablesSecondaryWithholdingRateRel.SecondaryWithholdingPercent)
					SecondaryWithholdingTransactionAmount1	= LocalTranSecWth1
					LocalCurrencyAmount						= SecondaryWithholdingTransactionAmount1
					SecondaryWithholdingTransactionAmount1	= RoundedCurrencyAmount
					SecondaryWithholdingPercent1           	= last PayablesSecondaryWithholdingRateRel.SecondaryWithholdingPercent
					if (InvoiceCurrency	!= CashCode.Currency)
						LocalExchangeDate													= LocalPaymentDate
						LocalSecondaryWithholdingExchange1.TransactionAmount				= SecondaryWithholdingTransactionAmount1
						LocalSecondaryWithholdingExchange1.BaseAmount.EnteredCurrencyRate	= CashLedgerPayablesPaymentRel.PaymentAmountBankAccountCurrency.EnteredCurrencyRate	
						LocalSecondaryWithholdingExchange1.BaseAmount.ToCurrency			= CashCode.Currency
						SecondaryWithholdingBaseAmount1										= LocalSecondaryWithholdingExchange1.BaseAmount.OutputCurrencyAmount
					else
						SecondaryWithholdingBaseAmount1										= SecondaryWithholdingTransactionAmount1




					if (SecondaryWithholdingCode1.MinimumPaymentAmount entered)							
						if (PaymentAmount.CurrencyAmount < 0)
							if (SecondaryWithholdingCode1.MinimumPaymentAmount > (PaymentAmount.CurrencyAmount * -1))
								initialize SecondaryWithholdingTransactionAmount1								
								initialize SecondaryWithholdingBaseAmount1	
						else									
							if (SecondaryWithholdingCode1.MinimumPaymentAmount > PaymentAmount.CurrencyAmount)	
								initialize SecondaryWithholdingTransactionAmount1								
								initialize SecondaryWithholdingBaseAmount1										


					LocalSecondaryWithholdingCode	= SecondaryWithholdingCode2
					LocalPaymentDate				= CheckDate
					if (DiscountLost)													
						LocalTranSecWth2			= PaymentAmount.CurrencyAmount		
					else																
						LocalTranSecWth2			= PaymentAmount.CurrencyAmount - DiscountAmount.CurrencyAmount
					LocalTranSecWth2				= LocalTranSecWth2 * (last PayablesSecondaryWithholdingRateRel.SecondaryWithholdingPercent)
					SecondaryWithholdingTransactionAmount2	= LocalTranSecWth2
					LocalCurrencyAmount						= SecondaryWithholdingTransactionAmount2
					SecondaryWithholdingTransactionAmount2	= RoundedCurrencyAmount
					SecondaryWithholdingPercent2           	= last PayablesSecondaryWithholdingRateRel.SecondaryWithholdingPercent
					if (InvoiceCurrency	!= CashCode.Currency)
						LocalExchangeDate													= LocalPaymentDate
						LocalSecondaryWithholdingExchange2.TransactionAmount				= SecondaryWithholdingTransactionAmount2
						LocalSecondaryWithholdingExchange2.BaseAmount.EnteredCurrencyRate	= CashLedgerPayablesPaymentRel.PaymentAmountBankAccountCurrency.EnteredCurrencyRate	
						LocalSecondaryWithholdingExchange2.BaseAmount.ToCurrency			= CashCode.Currency
						SecondaryWithholdingBaseAmount2										= LocalSecondaryWithholdingExchange2.BaseAmount.OutputCurrencyAmount
					else
						SecondaryWithholdingBaseAmount2										= SecondaryWithholdingTransactionAmount2




					if (SecondaryWithholdingCode2.MinimumPaymentAmount entered)							
						if (PaymentAmount.CurrencyAmount < 0)
							if (SecondaryWithholdingCode2.MinimumPaymentAmount > (PaymentAmount.CurrencyAmount * -1))
								initialize SecondaryWithholdingTransactionAmount2								
								initialize SecondaryWithholdingBaseAmount2	
						else									
							if (SecondaryWithholdingCode1.MinimumPaymentAmount > PaymentAmount.CurrencyAmount)	
								initialize SecondaryWithholdingTransactionAmount2								
								initialize SecondaryWithholdingBaseAmount2										


					LocalSecondaryWithholdingCode	= SecondaryWithholdingCode3
					LocalPaymentDate				= CheckDate
					if (DiscountLost)													
						LocalTranSecWth3			= PaymentAmount.CurrencyAmount		
					else																
						LocalTranSecWth3			= PaymentAmount.CurrencyAmount - DiscountAmount.CurrencyAmount
					LocalTranSecWth3				= LocalTranSecWth3 * (last PayablesSecondaryWithholdingRateRel.SecondaryWithholdingPercent)
					SecondaryWithholdingTransactionAmount3	= LocalTranSecWth3
					LocalCurrencyAmount						= SecondaryWithholdingTransactionAmount3
					SecondaryWithholdingTransactionAmount3	= RoundedCurrencyAmount
					SecondaryWithholdingPercent3           	= last PayablesSecondaryWithholdingRateRel.SecondaryWithholdingPercent
					if (InvoiceCurrency	!= CashCode.Currency)
						LocalExchangeDate													= LocalPaymentDate
						LocalSecondaryWithholdingExchange3.TransactionAmount				= SecondaryWithholdingTransactionAmount3
						LocalSecondaryWithholdingExchange3.BaseAmount.EnteredCurrencyRate	= CashLedgerPayablesPaymentRel.PaymentAmountBankAccountCurrency.EnteredCurrencyRate	
						LocalSecondaryWithholdingExchange3.BaseAmount.ToCurrency			= CashCode.Currency
						SecondaryWithholdingBaseAmount3										= LocalSecondaryWithholdingExchange3.BaseAmount.OutputCurrencyAmount
					else
						SecondaryWithholdingBaseAmount3										= SecondaryWithholdingTransactionAmount3




					if (SecondaryWithholdingCode3.MinimumPaymentAmount entered)							
						if (PaymentAmount.CurrencyAmount < 0)
							if (SecondaryWithholdingCode3.MinimumPaymentAmount > (PaymentAmount.CurrencyAmount * -1))
								initialize SecondaryWithholdingTransactionAmount3								
								initialize SecondaryWithholdingBaseAmount3	
						else									
							if (SecondaryWithholdingCode1.MinimumPaymentAmount > PaymentAmount.CurrencyAmount)	
								initialize SecondaryWithholdingTransactionAmount3								
								initialize SecondaryWithholdingBaseAmount3							
			if (Anticipation
			and CheckDate < DueDate)
				if (Vendor.PrimeRate not entered)
					DiscountAmount.CurrencyAmount	= blank
					DiscountDate					= CheckDate
				else
					WsdrNbrDays = DueDate - CheckDate
					DiscountAmount.CurrencyAmount	= WsdrNbrDays * PaymentAmount.CurrencyAmount * (Vendor.PrimeRate / 100 / 365)
					LocalCurrencyAmount				= DiscountAmount.CurrencyAmount
					DiscountAmount.CurrencyAmount	= RoundedCurrencyAmount
					DiscountDate					= CheckDate
					if (DiscountLost
					and DiscountAmount.CurrencyAmount entered)
						DiscountLost				= false

			if (Vendor.IncomeWithholding
			and IncomeCode entered
			and !Company.GlobalWithholding)
				if (Vendor.AllowWithholdingCodeOverride)
					if (ReportableIncomeAmount not entered)
						WithholdingAmount = PaymentAmount.CurrencyAmount - DerivedDiscountAmount
						WithholdingAmount = WithholdingAmount * VendorWithholdingCodeRel.IncomeWithholdingPercent
					else
						WithholdingAmount = ReportableIncomeAmount - DerivedDiscountAmount
						WithholdingAmount = WithholdingAmount * VendorWithholdingCodeRel.IncomeWithholdingPercent
				else
					if (ReportableIncomeAmount not entered)
						WithholdingAmount = PaymentAmount.CurrencyAmount - DerivedDiscountAmount
						WithholdingAmount = WithholdingAmount * Company.IncomeWithholdingPercent
					else
						WithholdingAmount = ReportableIncomeAmount - DerivedDiscountAmount
						WithholdingAmount = WithholdingAmount * Company.IncomeWithholdingPercent
				LocalCurrencyAmount	= WithholdingAmount
				WithholdingAmount	= RoundedCurrencyAmount

			if (Vendor.IncomeWithholding
			and Company.GlobalWithholding)
				CheckDate											= CheckDate
				CalculateWithholdingAmount.PayablesCompany			= Company
				CalculateWithholdingAmount.PayablesInvoice			= PayablesInvoice
				CalculateWithholdingAmount.PayablesInvoicePayment	= PayablesInvoicePayment
				if (CashCode.Currency	= InvoiceCurrency)
					CalculateWithholdingAmount.PaymentExchangeRate	= 1
				else





					CalculateWithholdingAmount.PaymentExchangeRate		= CashLedgerPayablesPaymentRel.PaymentAmountBankAccountCurrency.EnteredCurrencyRate
				WithholdingAmount									= CalculateWithholdingAmount.WithholdingAmount



			LocalCurrencyAmount				= DiscountAmount.CurrencyAmount
			DiscountAmount.CurrencyAmount	= RoundedCurrencyAmount

			if (DiscountLost)
				NetPaymentAmount.CurrencyAmount = PaymentAmount.CurrencyAmount - WithholdingAmount - FATCATransactionIncomeAmount - SecondaryWithholdingBaseAmount1 - SecondaryWithholdingBaseAmount2 - SecondaryWithholdingBaseAmount3
			else
				NetPaymentAmount.CurrencyAmount = PaymentAmount.CurrencyAmount - DerivedDiscountAmount - WithholdingAmount - FATCATransactionIncomeAmount - SecondaryWithholdingBaseAmount1 - SecondaryWithholdingBaseAmount2 - SecondaryWithholdingBaseAmount3

			if (WithholdingAmount entered
			and IncomeCode entered
			and IncomeWithholdingCode not entered)
				IncomeWithholdingCode = ProcessLevel.IncomeWithholdingCode
				if (IncomeWithholdingCode not entered)
					IncomeWithholdingCode = Company.IncomeWithholdingCode

			if (WithholdingAmount not entered
			and BaseWithholdingAmount not entered
			and IncomeCode not entered
			and FATCAIncomeCode entered
			and IncomeWithholdingCode not entered)
				IncomeWithholdingCode = ProcessLevel.IncomeWithholdingCode
				if (IncomeWithholdingCode not entered)
					IncomeWithholdingCode = Company.IncomeWithholdingCode

			if (CashCode.Currency	= InvoiceCurrency)
				BankCheckAmount												= NetPaymentAmount.CurrencyAmount
			else
				LocalExchangeDate											= CheckDate
				LocalCurrencyTable											= PayablesInvoice.CurrencyTable
				LocalCashCodePaymentExchange.TransactionAmount				= NetPaymentAmount.CurrencyAmount
				LocalCashCodePaymentExchange.BaseAmount.EnteredCurrencyRate = CashLedgerPayablesPaymentRel.PaymentAmountBankAccountCurrency.EnteredCurrencyRate	
				LocalCashCodePaymentExchange.BaseAmount.ToCurrency			= CashCode.Currency
				BankCheckAmount												= LocalCashCodePaymentExchange.BaseAmount.OutputCurrencyAmount

			if (VendorPaymentCurrency !entered)
				if (Vendor.DefaultVendorPaymentCurrency.Invoice)		
					VendorPaymentCurrency	= InvoiceCurrency
				else
					VendorPaymentCurrency	= CashCode.Currency

			if (PaymentPriority !entered)		
				PaymentPriority		= "1"

			if (CashCode.ReturnOnInvestmentRate entered)
				if (DiscountDate = DueDate)
					WSRoiAmt = blank
				else
					WSRoiAmt = DueDate - CheckDate
					WSRoiAmt = WSRoiAmt * (CashCode.ReturnOnInvestmentRate / 100 / 365)
					WSRoiAmt = WSRoiAmt * (PaymentAmount.CurrencyAmount - DiscountAmount.CurrencyAmount)
					LocalCurrencyAmount	= WSRoiAmt
					WSRoiAmt			= RoundedCurrencyAmount

				if (DiscountAmount.CurrencyAmount <= WSRoiAmt)
					invoke RestrictedPutOnHold
						invoked.InvoiceHoldCode = VendorGroupRel.ReturnOnInvestmentHoldCode

		SetBankCheckAmount		
			if (CashCode.Currency != InvoiceCurrency)
				if (CashCode.Currency = GeneralLedgerCompanyRel.AccountingEntity.FunctionalCurrency)
					BankCheckAmount = NetPaymentAmount.FunctionalAmount.EnteredCurrencyAmount
				else
					LocalCurrencyTable									= PayablesInvoice.CurrencyTable
					LocalExchangeDate									= CheckDate
					LocalCashCodePaymentExchange.TransactionAmount		= NetPaymentAmount.CurrencyAmount
					LocalCashCodePaymentExchange.BaseAmount.ToCurrency	= CashCode.Currency
					BankCheckAmount										= LocalCashCodePaymentExchange.BaseAmount.OutputCurrencyAmount
			else
				BankCheckAmount = NetPaymentAmount.CurrencyAmount

		SetLocalCurrencyAmountFields
			LocalCurrencyTable														= PayablesInvoice.CurrencyTable
			LocalCurrencyCalculationGroup.FinanceEnterpriseGroup					= GeneralLedgerCompanyRel.FinanceEnterpriseGroup
			LocalCurrencyCalculationGroup.ExchangeDate								= CheckDate
			LocalCurrencyCalculationGroup.FromCurrency								= InvoiceCurrency
			LocalCurrencyCalculationGroup.FunctionalAmount.ToCurrency				= GeneralLedgerCompanyRel.AccountingEntity.FunctionalCurrency
			LocalCurrencyCalculationGroup.AlternateAmount.ToCurrency				= GeneralLedgerCompanyRel.AccountingEntity.AlternateCurrency
			LocalCurrencyCalculationGroup.AlternateAmount2.ToCurrency				= GeneralLedgerCompanyRel.AccountingEntity.AlternateCurrency2
			LocalCurrencyCalculationGroup.AlternateAmount3.ToCurrency				= GeneralLedgerCompanyRel.AccountingEntity.AlternateCurrency3
			LocalCurrencyCalculationGroup.ReportAmount1.ToCurrency					= GeneralLedgerCompanyRel.FinanceEnterpriseGroup.ReportCurrencyOne
			LocalCurrencyCalculationGroup.ReportAmount2.ToCurrency					= GeneralLedgerCompanyRel.FinanceEnterpriseGroup.ReportCurrencyTwo
			LocalCurrencyCalculationGroup.ReportAmount3.ToCurrency					= GeneralLedgerCompanyRel.FinanceEnterpriseGroup.ReportCurrencyThree
			LocalCurrencyCalculationGroup.ReportAmount4.ToCurrency					= GeneralLedgerCompanyRel.FinanceEnterpriseGroup.ReportCurrencyFour
			LocalCurrencyCalculationGroup.ReportAmount5.ToCurrency					= GeneralLedgerCompanyRel.FinanceEnterpriseGroup.ReportCurrencyFive

		SetNetPaymentCurrencyAmounts
			LocalCurrencyCalculationGroup.CurrencyAmount				= NetPaymentAmount.CurrencyAmount
			NetPaymentAmount.ExchangeDate								= CheckDate
			if (InvoiceCurrency = CashRequirementsResult.InvoiceCurrency
			and CashCode 		= CashRequirementsResult.CashCode
			and CashRequirementsResult.OverridePaymentRate entered
			and CashCode.Currency = GeneralLedgerCompanyRel.AccountingEntity.FunctionalCurrency)
				LocalCurrencyCalculationGroup.FunctionalAmount.EnteredCurrencyRate = CashRequirementsResult.OverridePaymentRate 
			NetPaymentAmount.FunctionalAmount.EnteredCurrencyAmount		= LocalCurrencyCalculationGroup.FunctionalAmount.OutputCurrencyAmount
			NetPaymentAmount.FunctionalAmount.EnteredCurrencyRate		= LocalCurrencyCalculationGroup.FunctionalAmount.OutputCurrencyRate
			if (GeneralLedgerCompanyRel.AccountingEntity.AlternateCurrency entered)
				NetPaymentAmount.AlternateAmount.EnteredCurrencyAmount	= LocalCurrencyCalculationGroup.AlternateAmount.OutputCurrencyAmount
				NetPaymentAmount.AlternateAmount.EnteredCurrencyRate	= LocalCurrencyCalculationGroup.AlternateAmount.OutputCurrencyRate
			if (GeneralLedgerCompanyRel.AccountingEntity.AlternateCurrency2 entered)
				NetPaymentAmount.AlternateAmount2.EnteredCurrencyAmount	= LocalCurrencyCalculationGroup.AlternateAmount2.OutputCurrencyAmount
				NetPaymentAmount.AlternateAmount2.EnteredCurrencyRate  	= LocalCurrencyCalculationGroup.AlternateAmount2.OutputCurrencyRate
			if (GeneralLedgerCompanyRel.AccountingEntity.AlternateCurrency3 entered)
				NetPaymentAmount.AlternateAmount3.EnteredCurrencyAmount	= LocalCurrencyCalculationGroup.AlternateAmount3.OutputCurrencyAmount
				NetPaymentAmount.AlternateAmount3.EnteredCurrencyRate	= LocalCurrencyCalculationGroup.AlternateAmount3.OutputCurrencyRate
			if (GeneralLedgerCompanyRel.FinanceEnterpriseGroup.ReportCurrencyOne entered)
				NetPaymentAmount.ReportAmount1.EnteredCurrencyAmount  	= LocalCurrencyCalculationGroup.ReportAmount1.OutputCurrencyAmount
				NetPaymentAmount.ReportAmount1.EnteredCurrencyRate    	= LocalCurrencyCalculationGroup.ReportAmount1.OutputCurrencyRate
			if (GeneralLedgerCompanyRel.FinanceEnterpriseGroup.ReportCurrencyTwo entered)
				NetPaymentAmount.ReportAmount2.EnteredCurrencyAmount  	= LocalCurrencyCalculationGroup.ReportAmount2.OutputCurrencyAmount
				NetPaymentAmount.ReportAmount2.EnteredCurrencyRate    	= LocalCurrencyCalculationGroup.ReportAmount2.OutputCurrencyRate
			if (GeneralLedgerCompanyRel.FinanceEnterpriseGroup.ReportCurrencyThree entered)
				NetPaymentAmount.ReportAmount3.EnteredCurrencyAmount	= LocalCurrencyCalculationGroup.ReportAmount3.OutputCurrencyAmount
				NetPaymentAmount.ReportAmount3.EnteredCurrencyRate		= LocalCurrencyCalculationGroup.ReportAmount3.OutputCurrencyRate
			if (GeneralLedgerCompanyRel.FinanceEnterpriseGroup.ReportCurrencyFour entered)
				NetPaymentAmount.ReportAmount4.EnteredCurrencyAmount	= LocalCurrencyCalculationGroup.ReportAmount4.OutputCurrencyAmount
				NetPaymentAmount.ReportAmount4.EnteredCurrencyRate		= LocalCurrencyCalculationGroup.ReportAmount4.OutputCurrencyRate
			if (GeneralLedgerCompanyRel.FinanceEnterpriseGroup.ReportCurrencyFive entered)
				NetPaymentAmount.ReportAmount5.EnteredCurrencyAmount	= LocalCurrencyCalculationGroup.ReportAmount5.OutputCurrencyAmount
				NetPaymentAmount.ReportAmount5.EnteredCurrencyRate		= LocalCurrencyCalculationGroup.ReportAmount5.OutputCurrencyRate

		SetDiscountCurrencyAmounts
			LocalCurrencyCalculationGroup.CurrencyAmount				= DiscountAmount.CurrencyAmount
			DiscountAmount.ExchangeDate									= CheckDate
			if (InvoiceCurrency = CashRequirementsResult.InvoiceCurrency
			and CashCode 		= CashRequirementsResult.CashCode
			and CashRequirementsResult.OverridePaymentRate entered
			and CashCode.Currency = GeneralLedgerCompanyRel.AccountingEntity.FunctionalCurrency)
				LocalCurrencyCalculationGroup.FunctionalAmount.EnteredCurrencyRate = CashRequirementsResult.OverridePaymentRate 
			DiscountAmount.FunctionalAmount.EnteredCurrencyAmount		= LocalCurrencyCalculationGroup.FunctionalAmount.OutputCurrencyAmount
			DiscountAmount.FunctionalAmount.EnteredCurrencyRate			= LocalCurrencyCalculationGroup.FunctionalAmount.OutputCurrencyRate
			if (GeneralLedgerCompanyRel.AccountingEntity.AlternateCurrency entered)
				DiscountAmount.AlternateAmount.EnteredCurrencyAmount	= LocalCurrencyCalculationGroup.AlternateAmount.OutputCurrencyAmount
				DiscountAmount.AlternateAmount.EnteredCurrencyRate		= LocalCurrencyCalculationGroup.AlternateAmount.OutputCurrencyRate
			if (GeneralLedgerCompanyRel.AccountingEntity.AlternateCurrency2 entered)
				DiscountAmount.AlternateAmount2.EnteredCurrencyAmount	= LocalCurrencyCalculationGroup.AlternateAmount2.OutputCurrencyAmount
				DiscountAmount.AlternateAmount2.EnteredCurrencyRate  	= LocalCurrencyCalculationGroup.AlternateAmount2.OutputCurrencyRate
			if (GeneralLedgerCompanyRel.AccountingEntity.AlternateCurrency3 entered)
				DiscountAmount.AlternateAmount3.EnteredCurrencyAmount	= LocalCurrencyCalculationGroup.AlternateAmount3.OutputCurrencyAmount
				DiscountAmount.AlternateAmount3.EnteredCurrencyRate		= LocalCurrencyCalculationGroup.AlternateAmount3.OutputCurrencyRate
			if (GeneralLedgerCompanyRel.FinanceEnterpriseGroup.ReportCurrencyOne entered)
				DiscountAmount.ReportAmount1.EnteredCurrencyAmount  	= LocalCurrencyCalculationGroup.ReportAmount1.OutputCurrencyAmount
				DiscountAmount.ReportAmount1.EnteredCurrencyRate    	= LocalCurrencyCalculationGroup.ReportAmount1.OutputCurrencyRate
			if (GeneralLedgerCompanyRel.FinanceEnterpriseGroup.ReportCurrencyTwo entered)
				DiscountAmount.ReportAmount2.EnteredCurrencyAmount  	= LocalCurrencyCalculationGroup.ReportAmount2.OutputCurrencyAmount
				DiscountAmount.ReportAmount2.EnteredCurrencyRate    	= LocalCurrencyCalculationGroup.ReportAmount2.OutputCurrencyRate
			if (GeneralLedgerCompanyRel.FinanceEnterpriseGroup.ReportCurrencyThree entered)
				DiscountAmount.ReportAmount3.EnteredCurrencyAmount		= LocalCurrencyCalculationGroup.ReportAmount3.OutputCurrencyAmount
				DiscountAmount.ReportAmount3.EnteredCurrencyRate		= LocalCurrencyCalculationGroup.ReportAmount3.OutputCurrencyRate
			if (GeneralLedgerCompanyRel.FinanceEnterpriseGroup.ReportCurrencyFour entered)
				DiscountAmount.ReportAmount4.EnteredCurrencyAmount		= LocalCurrencyCalculationGroup.ReportAmount4.OutputCurrencyAmount
				DiscountAmount.ReportAmount4.EnteredCurrencyRate		= LocalCurrencyCalculationGroup.ReportAmount4.OutputCurrencyRate
			if (GeneralLedgerCompanyRel.FinanceEnterpriseGroup.ReportCurrencyFive entered)
				DiscountAmount.ReportAmount5.EnteredCurrencyAmount		= LocalCurrencyCalculationGroup.ReportAmount5.OutputCurrencyAmount
				DiscountAmount.ReportAmount5.EnteredCurrencyRate		= LocalCurrencyCalculationGroup.ReportAmount5.OutputCurrencyRate

		SetWithholdingCurrencyAmounts
			if (WithholdingAmount entered)
				if (Company.GlobalWithholding)
					CalculateWithholdingAmount.PayablesCompany								= Company
					CalculateWithholdingAmount.PayablesInvoice								= PayablesInvoice
					CalculateWithholdingAmount.PayablesInvoicePayment						= PayablesInvoicePayment
					LocalPerformCalculation													= CalculateWithholdingAmount.SummarizePaymentWithholdingAmounts
					BaseWithholdingAmount													= CalculateWithholdingAmount.TotalWithholdingAmount.FunctionalAmount.EnteredCurrencyAmount
				else
					BaseWithholdingAmount = (WithholdingAmount * NetPaymentAmount.FunctionalAmount.EnteredCurrencyRate)		
			else
				initialize BaseWithholdingAmount

		ProcessPaymentExitRules
			if (NumberOfPayments > 0)
				CreateCashLedgerPayablesPayment = true

				if (PayVendor.VendorClass.MaximumPaymentHoldCode entered
				and TotalPaymentAmount > PayVendor.VendorClass.MaximumPaymentAmount)
					RelLocalTransactionIDNumber = LocalTransactionIDNumber
					invoke RestrictedPutOnHold PaymentForTransactionIDNumberRel
						invoked.InvoiceHoldCode = PayVendor.VendorClass.MaximumPaymentHoldCode
					CreateCashLedgerPayablesPayment = false

				if (TotalPaymentAmount < 0		
				or (TotalPaymentAmount = 0
				and !PayVendor.VendorClass.ZeroPaymentAllowed))
					RelLocalTransactionIDNumber = LocalTransactionIDNumber
					invoke RestrictedPutOnHold PaymentForTransactionIDNumberRel
						invoked.InvoiceHoldCode = PrmVendorGroup.CreditBalanceHoldCode
					CreateCashLedgerPayablesPayment = false
				else
					if (PayVendor.VendorClass.MinimumPaymentHoldCode entered
					and TotalPaymentAmount < PayVendor.VendorClass.MinimumPaymentAmount
					and TotalPaymentAmount > 0)
						RelLocalTransactionIDNumber = LocalTransactionIDNumber
						invoke RestrictedPutOnHold PaymentForTransactionIDNumberRel
							invoked.InvoiceHoldCode = PayVendor.VendorClass.MinimumPaymentHoldCode
						CreateCashLedgerPayablesPayment = false

				if (CreateCashLedgerPayablesPayment)
					if  (PrmCashRequirementsResult.AddendaOption.Yes
					and (PrmCashRequirementsResult.EditPaymentCode not entered				
					or   PrmCashRequirementsResult.EditPaymentCode = BankTransactionCode)	
					and (BankTransactionCodeRel.PaymentOutputOption.ElectronicFile		
					or   BankTransactionCodeRel.PaymentOutputOption.Swift
					or   BankTransactionCodeRel.PaymentOutputOption.WireTransfer)
					and (NumberOfPayments > 9999
					or	 TotalPaymentAmount	> 99999999.99))
						invoke SplitACHPayments PayablesInvoicePayment in background group(PrmBackgroundGroup)
							invoked.PrmVendorGroup				= VendorGroup
							invoked.PrmPayGroup					= PayGroup
							invoked.PrmCashRequirementsResult	= CashRequirementsResult
							invoked.PrmPayVendor				= PayVendor
							invoked.PrmBankTransactionCode		= BankTransactionCode
							invoked.PrmTransactionIDNumber		= LocalTransactionIDNumber
					else
						if (TotalPaymentAmount = 0
						and PayVendor.VendorClass.ZeroPaymentCode entered)
							RelLocalTransactionIDNumber			= LocalTransactionIDNumber

							invoke IncrementTransactionIDNumber PayVendor.VendorClass.ZeroPaymentCode
							LocalTransactionIDNumber			= PayVendor.VendorClass.ZeroPaymentCode.TransactionIDNumber  

							for each PaymentForTransactionIDNumberRel
								invoke Create CashRequirementsProcessing		
									invoked.VendorGroup 				= each.VendorGroup
									invoked.PayGroup					= each.PayGroup
									invoked.CashRequirementsResult		= each.CashRequirementsResult
									invoked.PayablesCompany				= each.Company
									invoked.PayablesInvoice				= each.PayablesInvoice
									invoked.PayablesInvoicePayment		= each.PayablesInvoicePayment
									invoked.OldBankTransactionCode		= each.BankTransactionCode
									invoked.NewBankTransactionCode		= each.PayVendor.VendorClass.ZeroPaymentCode

							invoke Delete CashRequirementsReportRel		

							invoke UpdateZeroPayment PaymentForTransactionIDNumberRel
								invoked.PrmBankTransactionCode	= PayVendor.VendorClass.ZeroPaymentCode
								invoked.PrmTransactionIDNumber	= LocalTransactionIDNumber

							LocalBankTransactionCode			= PayVendor.VendorClass.ZeroPaymentCode

							if (CashRequirementsReportRel	!exists)		
								invoke Create CashRequirementsReportRel		
									invoked.TotalPaymentAmount			= 0
									invoked.TotalDiscountAmount			= 0
									invoked.TotalNetPaymentAmount		= 0
									invoked.TotalBankCheckAmount		= 0
						else
							LocalBankTransactionCode			= BankTransactionCode

						invoke CreateFromBatch CashLedgerPayablesPayment
							invoked.CashManagementGroup	= PrmVendorGroup.BusinessGroup.FinanceEnterpriseGroup
							invoked.PayGroup			= PrmPayGroup
							invoked.Company				= DerivedCashPostingCompany 
							invoked.PaidVendor			= PayVendor
							invoked.TransactionNumber	= blank
							invoked.PayablesCompanyProcessLevel.PayablesCompany				= PrmCashRequirementsResult.Company
							invoked.PayablesCompanyProcessLevel.PayablesProcessLevel		= PrmCashRequirementsResult.ProcessLevel
							invoked.VendorGroup			= PrmPayGroup.VendorGroup
							invoked.InvoiceVendor		= Vendor
							invoked.InvoiceVendorName	= Vendor.VendorName
							invoked.Status				= blank
							if (PrmCashRequirementsResult.OverrideCashCode entered)
								invoked.CashCode			= PrmCashRequirementsResult.OverrideCashCode
							else
								invoked.CashCode			= CashCode
							invoked.CashLedgerSourceRecord	= CashLedgerSourceRecord.CashLedgerPayablesPayment

							invoked.PayCurrency			= InvoiceCurrency
							invoked.InvoiceGroup		= InvoiceGroup




							invoked.PayablesProcessGroup	= PrmCashRequirementsResult.ProcessGroup

							invoked.CashLedgerPayablesPayment.BankTransactionCode			= LocalBankTransactionCode
							invoked.CashLedgerPayablesPayment.TransactionIDNumber			= LocalTransactionIDNumber

							invoked.PaymentDate			= PrmCashRequirementsResult.PaymentDate
							if (RemitToCode	entered)								
								invoked.PaidName			= RemitToCode.VendorName
							else
								invoked.PaidName			= PayVendor.VendorName 
							invoked.RemitToCode			= RemitToCode
							invoked.CheckType			= blank
							if (PayablesInvoice.HasBankInstructions)		
								invoked.TransactionData1		= PayablesInvoice.BankInstructions1
								invoked.TransactionData2		= PayablesInvoice.BankInstructions2
								invoked.TransactionData3		= PayablesInvoice.BankInstructions3
								invoked.TransactionData4		= PayablesInvoice.BankInstructions4
							else
								if (RemitToCode entered)
									invoked.TransactionData1		= RemitToCode.BankInstruction1
									invoked.TransactionData2		= RemitToCode.BankInstruction2
									invoked.TransactionData3		= RemitToCode.BankInstruction3
									invoked.TransactionData4		= RemitToCode.BankInstruction4
								else
									invoked.TransactionData1		= Vendor.BankInstructions1
									invoked.TransactionData2		= Vendor.BankInstructions2
									invoked.TransactionData3		= Vendor.BankInstructions3
									invoked.TransactionData4		= Vendor.BankInstructions4

							invoked.BasePaymentAmount.EnteredCurrencyAmount					= TotalBasePaymentAmount
							invoked.AppliedBaseAmount.TransactionAmount						= TotalBasePaymentAmount

							invoked.PaymentAmount											= TotalPaymentAmount
							invoked.PaidAmountInvoiceCurrency								= TotalPaymentAmount

							invoked.BankAmount												= TotalVendorPaymentAmount
							invoked.BankCurrency											= VendorPaymentCurrency
							invoked.PaymentAmountBankAccountCurrency.EnteredCurrencyAmount				= TotalPaymentAmountBankAccountCurrency
							invoked.AppliedAmountBankAccountCurrency.BaseAmount.EnteredCurrencyAmount	= TotalPaymentAmountBankAccountCurrency
							invoked.VATSplitAmount														= TotalVATSplitAmount		
							invoked.VendorGroup 														= PrmCashRequirementsResult.VendorGroup
							invoked.CashRequirementsResult												= PrmCashRequirementsResult

			initialize TotalPaymentAmount
			initialize TotalPaymentAmountBankAccountCurrency
			initialize TotalVendorPaymentAmount
			initialize TotalVATSplitAmount		

		ProcessPaymentInstanceRules


			NumberOfPayments += 1
			TotalPaymentAmount						+= NetPaymentAmount.CurrencyAmount
			TotalPaymentAmountBankAccountCurrency	+= BankCheckAmount
			TotalVendorPaymentAmount				+= NetVendorPaymentAmount
			TransactionIDNumber 					= LocalTransactionIDNumber
			TotalVATSplitAmount						+= DerivedVATSplitAmount		

			if (Company.GlobalWithholding)
				invoke UpdatePaymentInformation PayablesInvoiceWithholdingForPaymentRel
					invoked.PrmCashCode						= CashCode
					invoked.PrmBankTransactionCode			= BankTransactionCode
					invoked.PrmTransactionIDNumber			= TransactionIDNumber
					invoked.PrmPayGroup						= PayGroup
					invoked.PrmCashRequirementsResult		= PrmCashRequirementsResult
			

			if (PrmCashRequirementsResult.Comment entered)
				if (VendorCommentCashReqRel not exists)
					invoke Create VendorCommentCashReqRel
						invoked.DateEntered		= current corporate date
						invoked.PayGroup		= PrmCashRequirementsResult.PayGroup
						invoked.PrintCode		= "C"
						invoked.Title			= "CashRequirements"
						invoked.CommentText 	= PrmCashRequirementsResult.Comment
						if (PrmCashRequirementsResult.PayThroughDate < PrmCashRequirementsResult.PaymentDate)		
							invoked.DateRange.Begin	= PrmCashRequirementsResult.PayThroughDate
						else
							invoked.DateRange.Begin	= PrmCashRequirementsResult.PaymentDate
						invoked.DateRange.End	= PrmCashRequirementsResult.PayThroughDate
				else
					invoke Update VendorCommentCashReqRel
						invoked.PayGroup		= PrmCashRequirementsResult.PayGroup
						invoked.CommentText 	= PrmCashRequirementsResult.Comment
						if (PrmCashRequirementsResult.PayThroughDate < PrmCashRequirementsResult.PaymentDate)		
							invoked.DateRange.Begin	= PrmCashRequirementsResult.PayThroughDate
						else
							invoked.DateRange.Begin	= PrmCashRequirementsResult.PaymentDate
						invoked.DateRange.End	= PrmCashRequirementsResult.PayThroughDate
			else
				invoke Delete VendorCommentCashReqRel

			invoke FastUpdate

		ProcessRealizedGainLossDistributions
			if (GainLossCalculation.GainLossFound)
				if (PrmVoidDate entered)
					NegativeFinanceCurrencyAmount = GainLossCalculation.GainAmount
					LocalBoolean = NegativeFinanceCurrencyAmount.PerformCalculation
					GainLossCalculation.GainAmount.FunctionalAmount	    = NegativeFinanceCurrencyAmount.FunctionalAmount
					GainLossCalculation.GainAmount.AlternateAmount      = NegativeFinanceCurrencyAmount.AlternateAmount
					GainLossCalculation.GainAmount.AlternateAmount2     = NegativeFinanceCurrencyAmount.AlternateAmount2
					GainLossCalculation.GainAmount.AlternateAmount3		= NegativeFinanceCurrencyAmount.AlternateAmount3
					GainLossCalculation.GainAmount.ToFunctionalAmount	= NegativeFinanceCurrencyAmount.ToFunctionalAmount
					GainLossCalculation.GainAmount.ToAlternateAmount    = NegativeFinanceCurrencyAmount.ToAlternateAmount
					GainLossCalculation.GainAmount.ToAlternateAmount2   = NegativeFinanceCurrencyAmount.ToAlternateAmount2
					GainLossCalculation.GainAmount.ToAlternateAmount3	= NegativeFinanceCurrencyAmount.ToAlternateAmount3
					GainLossCalculation.GainAmount.ProjectAmount		= NegativeFinanceCurrencyAmount.ProjectAmount
					GainLossCalculation.GainAmount.ReportAmount1     	= NegativeFinanceCurrencyAmount.ReportAmount1
					GainLossCalculation.GainAmount.ReportAmount2      	= NegativeFinanceCurrencyAmount.ReportAmount2
					GainLossCalculation.GainAmount.ReportAmount3		= NegativeFinanceCurrencyAmount.ReportAmount3
					GainLossCalculation.GainAmount.ReportAmount4		= NegativeFinanceCurrencyAmount.ReportAmount4
					GainLossCalculation.GainAmount.ReportAmount5		= NegativeFinanceCurrencyAmount.ReportAmount5

					NegativeFinanceCurrencyAmount = GainLossCalculation.LossAmount
					LocalBoolean = NegativeFinanceCurrencyAmount.PerformCalculation
					GainLossCalculation.LossAmount.FunctionalAmount	    = NegativeFinanceCurrencyAmount.FunctionalAmount
					GainLossCalculation.LossAmount.AlternateAmount      = NegativeFinanceCurrencyAmount.AlternateAmount
					GainLossCalculation.LossAmount.AlternateAmount2     = NegativeFinanceCurrencyAmount.AlternateAmount2
					GainLossCalculation.LossAmount.AlternateAmount3		= NegativeFinanceCurrencyAmount.AlternateAmount3
					GainLossCalculation.LossAmount.ToFunctionalAmount	= NegativeFinanceCurrencyAmount.ToFunctionalAmount
					GainLossCalculation.LossAmount.ToAlternateAmount    = NegativeFinanceCurrencyAmount.ToAlternateAmount
					GainLossCalculation.LossAmount.ToAlternateAmount2   = NegativeFinanceCurrencyAmount.ToAlternateAmount2
					GainLossCalculation.LossAmount.ToAlternateAmount3	= NegativeFinanceCurrencyAmount.ToAlternateAmount3
					GainLossCalculation.LossAmount.ProjectAmount		= NegativeFinanceCurrencyAmount.ProjectAmount
					GainLossCalculation.LossAmount.ReportAmount1     	= NegativeFinanceCurrencyAmount.ReportAmount1
					GainLossCalculation.LossAmount.ReportAmount2      	= NegativeFinanceCurrencyAmount.ReportAmount2
					GainLossCalculation.LossAmount.ReportAmount3		= NegativeFinanceCurrencyAmount.ReportAmount3
					GainLossCalculation.LossAmount.ReportAmount4		= NegativeFinanceCurrencyAmount.ReportAmount4
					GainLossCalculation.LossAmount.ReportAmount5		= NegativeFinanceCurrencyAmount.ReportAmount5
				if (Company.ProrateGainLossToDistributions)
					include CalculateProratedDistributionAmount

				if (GainLossCalculation.SingleSystemAccount)
					invoke CreateGainLossFromBatchNoParms PayablesInvoiceDistribution
						invoked.Company					= Company
						invoked.PayablesInvoice			= PayablesInvoice
						invoked.DistributionType 		= "G"
						invoked.PostingOption			= "S"
						invoked.Status					= 1
						if (PrmVoidDate entered)
							invoked.DistributionDate		= PrmVoidDate
							invoked.GLTPostingDate			= PrmVoidDate
							invoked.GLTGeneralLedgerEvent	= "VP"
						else
							invoked.GLTPostingDate			= CheckDate
							invoked.DistributionDate		= CheckDate
							invoked.GLTGeneralLedgerEvent	= "AP"
						if (AccrualCode entered)
							invoked.AccrualCode 			= AccrualCode 
						else 
							invoked.AccrualCode 			= PayablesInvoice.AccrualCode 
						invoked.GLTControlDocumentNumber	= PrmControlDocumentNumber
						invoked.Description					= RealizedCurrencyGainLossMessage 
						invoked.DistributionReference		= PrmReference
						invoked.GLTCurrencyCode				= InvoiceCurrency
						invoked.InvoiceCurrency							= InvoiceCurrency
						invoked.GLTransactionAmount						= blank
						invoked.DistributionAmount.ExchangeDate	    	= CheckDate
						invoked.DistributionAmount.CurrencyAmount	    = blank
						invoked.DistributionAmount.FunctionalAmount	    = GainLossCalculation.GainAmount.FunctionalAmount
						invoked.DistributionAmount.AlternateAmount      = GainLossCalculation.GainAmount.AlternateAmount
						invoked.DistributionAmount.AlternateAmount2     = GainLossCalculation.GainAmount.AlternateAmount2
						invoked.DistributionAmount.AlternateAmount3		= GainLossCalculation.GainAmount.AlternateAmount3
						invoked.DistributionAmount.ToFunctionalAmount	= GainLossCalculation.GainAmount.ToFunctionalAmount
						invoked.DistributionAmount.ToAlternateAmount    = GainLossCalculation.GainAmount.ToAlternateAmount
						invoked.DistributionAmount.ToAlternateAmount2   = GainLossCalculation.GainAmount.ToAlternateAmount2
						invoked.DistributionAmount.ToAlternateAmount3	= GainLossCalculation.GainAmount.ToAlternateAmount3
						invoked.DistributionAmount.ProjectAmount		= GainLossCalculation.GainAmount.ProjectAmount
						invoked.DistributionAmount.ReportAmount1     	= GainLossCalculation.GainAmount.ReportAmount1
						invoked.DistributionAmount.ReportAmount2      	= GainLossCalculation.GainAmount.ReportAmount2
						invoked.DistributionAmount.ReportAmount3		= GainLossCalculation.GainAmount.ReportAmount3
						invoked.DistributionAmount.ReportAmount4		= GainLossCalculation.GainAmount.ReportAmount4
						invoked.DistributionAmount.ReportAmount5		= GainLossCalculation.GainAmount.ReportAmount5
						invoked.GLFinanceCodeBlock			= GainLossCalculation.GainAccount
						invoked.GLTTransactionCodeBlock		= GainLossCalculation.GainAccount
						invoked.DistributionAccount			= GainLossCalculation.GainAccount
						invoked.GLTJournalizeGroup			= PrmJournalizeGroup
				else
					if (GainLossCalculation.AmountType.Positive
					or  GainLossCalculation.AmountType.NegativeAndPositive)
						invoke CreateGainLossFromBatchNoParms PayablesInvoiceDistribution
							invoked.Company					= Company
							invoked.PayablesInvoice			= PayablesInvoice
							invoked.DistributionType 		= "G"
							invoked.PostingOption			= "S"
							invoked.Status					= 1
							if (PrmVoidDate entered)
								invoked.DistributionDate		= PrmVoidDate
								invoked.GLTPostingDate			= PrmVoidDate
								invoked.GLTGeneralLedgerEvent	= "VP"
							else
								invoked.GLTPostingDate			= CheckDate
								invoked.DistributionDate		= CheckDate
								invoked.GLTGeneralLedgerEvent	= "AP"
							if (AccrualCode entered)
								invoked.AccrualCode 			= AccrualCode 
							else 
								invoked.AccrualCode 			= PayablesInvoice.AccrualCode 
							invoked.GLTControlDocumentNumber	= PrmControlDocumentNumber
							invoked.Description					= RealizedCurrencyGainMessage 
							invoked.DistributionReference		= PrmReference
							invoked.GLTCurrencyCode				= InvoiceCurrency
							invoked.InvoiceCurrency							= InvoiceCurrency
							invoked.GLTransactionAmount						= blank
							invoked.DistributionAmount.ExchangeDate	    	= CheckDate
							invoked.DistributionAmount.CurrencyAmount	    = blank
							invoked.DistributionAmount.FunctionalAmount	    = GainLossCalculation.GainAmount.FunctionalAmount
							invoked.DistributionAmount.AlternateAmount      = GainLossCalculation.GainAmount.AlternateAmount
							invoked.DistributionAmount.AlternateAmount2     = GainLossCalculation.GainAmount.AlternateAmount2
							invoked.DistributionAmount.AlternateAmount3		= GainLossCalculation.GainAmount.AlternateAmount3
							invoked.DistributionAmount.ToFunctionalAmount	= GainLossCalculation.GainAmount.ToFunctionalAmount
							invoked.DistributionAmount.ToAlternateAmount    = GainLossCalculation.GainAmount.ToAlternateAmount
							invoked.DistributionAmount.ToAlternateAmount2   = GainLossCalculation.GainAmount.ToAlternateAmount2
							invoked.DistributionAmount.ToAlternateAmount3	= GainLossCalculation.GainAmount.ToAlternateAmount3
							invoked.DistributionAmount.ProjectAmount		= GainLossCalculation.GainAmount.ProjectAmount
							invoked.DistributionAmount.ReportAmount1     	= GainLossCalculation.GainAmount.ReportAmount1
							invoked.DistributionAmount.ReportAmount2      	= GainLossCalculation.GainAmount.ReportAmount2
							invoked.DistributionAmount.ReportAmount3		= GainLossCalculation.GainAmount.ReportAmount3
							invoked.DistributionAmount.ReportAmount4		= GainLossCalculation.GainAmount.ReportAmount4
							invoked.DistributionAmount.ReportAmount5		= GainLossCalculation.GainAmount.ReportAmount5
							invoked.GLFinanceCodeBlock			= GainLossCalculation.GainAccount
							invoked.GLTTransactionCodeBlock		= GainLossCalculation.GainAccount
							invoked.DistributionAccount			= GainLossCalculation.GainAccount
							invoked.GLTJournalizeGroup			= PrmJournalizeGroup
					if (GainLossCalculation.AmountType.Negative
					or  GainLossCalculation.AmountType.NegativeAndPositive)
						invoke CreateGainLossFromBatchNoParms PayablesInvoiceDistribution
							invoked.Company					= Company
							invoked.PayablesInvoice			= PayablesInvoice
							invoked.DistributionType 		= "G"
							invoked.PostingOption			= "S"
							invoked.Status					= 1
							if (PrmVoidDate entered)
								invoked.DistributionDate		= PrmVoidDate
								invoked.GLTPostingDate			= PrmVoidDate
								invoked.GLTGeneralLedgerEvent	= "VP"
							else
								invoked.GLTPostingDate			= CheckDate
								invoked.DistributionDate		= CheckDate
								invoked.GLTGeneralLedgerEvent	= "AP"
							if (AccrualCode entered)
								invoked.AccrualCode 			= AccrualCode 
							else 
								invoked.AccrualCode 			= PayablesInvoice.AccrualCode 
							invoked.GLTControlDocumentNumber	= PrmControlDocumentNumber
							invoked.Description					= RealizedCurrencyLossMessage 
							invoked.DistributionReference		= PrmReference
							invoked.GLTCurrencyCode				= InvoiceCurrency
							invoked.InvoiceCurrency							= InvoiceCurrency
							invoked.GLTransactionAmount						= blank
							invoked.DistributionAmount.ExchangeDate	    	= CheckDate
							invoked.DistributionAmount.CurrencyAmount	    = blank
							invoked.DistributionAmount.FunctionalAmount	    = GainLossCalculation.LossAmount.FunctionalAmount
							invoked.DistributionAmount.AlternateAmount      = GainLossCalculation.LossAmount.AlternateAmount
							invoked.DistributionAmount.AlternateAmount2     = GainLossCalculation.LossAmount.AlternateAmount2
							invoked.DistributionAmount.AlternateAmount3		= GainLossCalculation.LossAmount.AlternateAmount3
							invoked.DistributionAmount.ToFunctionalAmount	= GainLossCalculation.LossAmount.ToFunctionalAmount
							invoked.DistributionAmount.ToAlternateAmount    = GainLossCalculation.LossAmount.ToAlternateAmount
							invoked.DistributionAmount.ToAlternateAmount2   = GainLossCalculation.LossAmount.ToAlternateAmount2
							invoked.DistributionAmount.ToAlternateAmount3	= GainLossCalculation.LossAmount.ToAlternateAmount3
							invoked.DistributionAmount.ProjectAmount		= GainLossCalculation.LossAmount.ProjectAmount
							invoked.DistributionAmount.ReportAmount1     	= GainLossCalculation.LossAmount.ReportAmount1
							invoked.DistributionAmount.ReportAmount2      	= GainLossCalculation.LossAmount.ReportAmount2
							invoked.DistributionAmount.ReportAmount3		= GainLossCalculation.LossAmount.ReportAmount3
							invoked.DistributionAmount.ReportAmount4		= GainLossCalculation.LossAmount.ReportAmount4
							invoked.DistributionAmount.ReportAmount5		= GainLossCalculation.LossAmount.ReportAmount5
							invoked.GLFinanceCodeBlock			= GainLossCalculation.LossAccount
							invoked.GLTTransactionCodeBlock		= GainLossCalculation.LossAccount
							invoked.DistributionAccount			= GainLossCalculation.LossAccount
							invoked.GLTJournalizeGroup			= PrmJournalizeGroup

		CalculateProratedDistributionAmount
			if (LocalLastDistribution)
				if (GainLossCalculation.GainAmount.FunctionalAmount.EnteredCurrencyAmount	entered)
					GainLossCalculation.GainAmount.FunctionalAmount.EnteredCurrencyAmount	= LocalDistributionAmount.FunctionalAmount.EnteredCurrencyAmount
				if (GainLossCalculation.GainAmount.AlternateAmount.EnteredCurrencyAmount	entered)
					GainLossCalculation.GainAmount.AlternateAmount.EnteredCurrencyAmount	= LocalDistributionAmount.AlternateAmount.EnteredCurrencyAmount
				if (GainLossCalculation.GainAmount.AlternateAmount2.EnteredCurrencyAmount	entered)
					GainLossCalculation.GainAmount.AlternateAmount2.EnteredCurrencyAmount	= LocalDistributionAmount.AlternateAmount2.EnteredCurrencyAmount
				if (GainLossCalculation.GainAmount.AlternateAmount3.EnteredCurrencyAmount	entered)
					GainLossCalculation.GainAmount.AlternateAmount3.EnteredCurrencyAmount	= LocalDistributionAmount.AlternateAmount3.EnteredCurrencyAmount
				if (GainLossCalculation.GainAmount.ReportAmount1.EnteredCurrencyAmount	entered)
					GainLossCalculation.GainAmount.ReportAmount1.EnteredCurrencyAmount	= LocalDistributionAmount.ReportAmount1.EnteredCurrencyAmount
				if (GainLossCalculation.GainAmount.ReportAmount2.EnteredCurrencyAmount	entered)
					GainLossCalculation.GainAmount.ReportAmount2.EnteredCurrencyAmount	= LocalDistributionAmount.ReportAmount2.EnteredCurrencyAmount
				if (GainLossCalculation.GainAmount.ReportAmount3.EnteredCurrencyAmount	entered)
					GainLossCalculation.GainAmount.ReportAmount3.EnteredCurrencyAmount	= LocalDistributionAmount.ReportAmount3.EnteredCurrencyAmount
				if (GainLossCalculation.GainAmount.ReportAmount4.EnteredCurrencyAmount	entered)
					GainLossCalculation.GainAmount.ReportAmount4.EnteredCurrencyAmount	= LocalDistributionAmount.ReportAmount4.EnteredCurrencyAmount
				if (GainLossCalculation.GainAmount.ReportAmount5.EnteredCurrencyAmount	entered)
					GainLossCalculation.GainAmount.ReportAmount5.EnteredCurrencyAmount	= LocalDistributionAmount.ReportAmount5.EnteredCurrencyAmount
				if (GainLossCalculation.LossAmount.FunctionalAmount.EnteredCurrencyAmount	entered)
					GainLossCalculation.LossAmount.FunctionalAmount.EnteredCurrencyAmount	= LocalDistributionAmount.FunctionalAmount.EnteredCurrencyAmount
				if (GainLossCalculation.LossAmount.AlternateAmount.EnteredCurrencyAmount	entered)
					GainLossCalculation.LossAmount.AlternateAmount.EnteredCurrencyAmount	= LocalDistributionAmount.AlternateAmount.EnteredCurrencyAmount
				if (GainLossCalculation.LossAmount.AlternateAmount2.EnteredCurrencyAmount	entered)
					GainLossCalculation.LossAmount.AlternateAmount2.EnteredCurrencyAmount	= LocalDistributionAmount.AlternateAmount2.EnteredCurrencyAmount
				if (GainLossCalculation.LossAmount.AlternateAmount3.EnteredCurrencyAmount	entered)
					GainLossCalculation.LossAmount.AlternateAmount3.EnteredCurrencyAmount	= LocalDistributionAmount.AlternateAmount3.EnteredCurrencyAmount
				if (GainLossCalculation.LossAmount.ReportAmount1.EnteredCurrencyAmount	entered)
					GainLossCalculation.LossAmount.ReportAmount1.EnteredCurrencyAmount	= LocalDistributionAmount.ReportAmount1.EnteredCurrencyAmount
				if (GainLossCalculation.LossAmount.ReportAmount2.EnteredCurrencyAmount	entered)
					GainLossCalculation.LossAmount.ReportAmount2.EnteredCurrencyAmount	= LocalDistributionAmount.ReportAmount2.EnteredCurrencyAmount
				if (GainLossCalculation.LossAmount.ReportAmount3.EnteredCurrencyAmount	entered)
					GainLossCalculation.LossAmount.ReportAmount3.EnteredCurrencyAmount	= LocalDistributionAmount.ReportAmount3.EnteredCurrencyAmount
				if (GainLossCalculation.LossAmount.ReportAmount4.EnteredCurrencyAmount	entered)
					GainLossCalculation.LossAmount.ReportAmount4.EnteredCurrencyAmount	= LocalDistributionAmount.ReportAmount4.EnteredCurrencyAmount
				if (GainLossCalculation.LossAmount.ReportAmount5.EnteredCurrencyAmount	entered)
					GainLossCalculation.LossAmount.ReportAmount5.EnteredCurrencyAmount	= LocalDistributionAmount.ReportAmount5.EnteredCurrencyAmount
			else
				LocalDistributionAmount.FunctionalAmount.EnteredCurrencyAmount		-= GainLossCalculation.GainAmount.FunctionalAmount.EnteredCurrencyAmount + GainLossCalculation.LossAmount.FunctionalAmount.EnteredCurrencyAmount
				LocalDistributionAmount.AlternateAmount.EnteredCurrencyAmount		-= GainLossCalculation.GainAmount.AlternateAmount.EnteredCurrencyAmount + GainLossCalculation.LossAmount.AlternateAmount.EnteredCurrencyAmount
				LocalDistributionAmount.AlternateAmount2.EnteredCurrencyAmount		-= GainLossCalculation.GainAmount.AlternateAmount2.EnteredCurrencyAmount + GainLossCalculation.LossAmount.AlternateAmount2.EnteredCurrencyAmount
				LocalDistributionAmount.AlternateAmount3.EnteredCurrencyAmount		-= GainLossCalculation.GainAmount.AlternateAmount3.EnteredCurrencyAmount + GainLossCalculation.LossAmount.AlternateAmount3.EnteredCurrencyAmount
				LocalDistributionAmount.ToFunctionalAmount.EnteredCurrencyAmount	-= GainLossCalculation.GainAmount.ToFunctionalAmount.EnteredCurrencyAmount + GainLossCalculation.LossAmount.ToFunctionalAmount.EnteredCurrencyAmount
				LocalDistributionAmount.ToAlternateAmount.EnteredCurrencyAmount		-= GainLossCalculation.GainAmount.ToAlternateAmount.EnteredCurrencyAmount + GainLossCalculation.LossAmount.ToAlternateAmount.EnteredCurrencyAmount
				LocalDistributionAmount.ToAlternateAmount2.EnteredCurrencyAmount	-= GainLossCalculation.GainAmount.ToAlternateAmount2.EnteredCurrencyAmount + GainLossCalculation.LossAmount.ToAlternateAmount2.EnteredCurrencyAmount
				LocalDistributionAmount.ToAlternateAmount3.EnteredCurrencyAmount	-= GainLossCalculation.GainAmount.ToAlternateAmount3.EnteredCurrencyAmount + GainLossCalculation.LossAmount.ToAlternateAmount3.EnteredCurrencyAmount
				LocalDistributionAmount.ProjectAmount.EnteredCurrencyAmount			-= GainLossCalculation.GainAmount.ProjectAmount.EnteredCurrencyAmount + GainLossCalculation.LossAmount.ProjectAmount.EnteredCurrencyAmount
				LocalDistributionAmount.ReportAmount1.EnteredCurrencyAmount			-= GainLossCalculation.GainAmount.ReportAmount1.EnteredCurrencyAmount + GainLossCalculation.LossAmount.ReportAmount1.EnteredCurrencyAmount
				LocalDistributionAmount.ReportAmount2.EnteredCurrencyAmount			-= GainLossCalculation.GainAmount.ReportAmount2.EnteredCurrencyAmount + GainLossCalculation.LossAmount.ReportAmount2.EnteredCurrencyAmount
				LocalDistributionAmount.ReportAmount3.EnteredCurrencyAmount			-= GainLossCalculation.GainAmount.ReportAmount3.EnteredCurrencyAmount + GainLossCalculation.LossAmount.ReportAmount3.EnteredCurrencyAmount
				LocalDistributionAmount.ReportAmount4.EnteredCurrencyAmount			-= GainLossCalculation.GainAmount.ReportAmount4.EnteredCurrencyAmount + GainLossCalculation.LossAmount.ReportAmount4.EnteredCurrencyAmount
				LocalDistributionAmount.ReportAmount5.EnteredCurrencyAmount			-= GainLossCalculation.GainAmount.ReportAmount5.EnteredCurrencyAmount + GainLossCalculation.LossAmount.ReportAmount5.EnteredCurrencyAmount


		ProcessUnrealizedGainLossDistributions
			if (GainLossCalculation.GainLossFound)

				if (PrmReversal.Yes)
					NegativeFinanceCurrencyAmount = GainLossCalculation.GainAmount
					LocalBoolean = NegativeFinanceCurrencyAmount.PerformCalculation
					GainLossCalculation.GainAmount.FunctionalAmount	    = NegativeFinanceCurrencyAmount.FunctionalAmount
					GainLossCalculation.GainAmount.AlternateAmount      = NegativeFinanceCurrencyAmount.AlternateAmount
					GainLossCalculation.GainAmount.AlternateAmount2     = NegativeFinanceCurrencyAmount.AlternateAmount2
					GainLossCalculation.GainAmount.AlternateAmount3		= NegativeFinanceCurrencyAmount.AlternateAmount3
					GainLossCalculation.GainAmount.ToFunctionalAmount	= NegativeFinanceCurrencyAmount.ToFunctionalAmount
					GainLossCalculation.GainAmount.ToAlternateAmount    = NegativeFinanceCurrencyAmount.ToAlternateAmount
					GainLossCalculation.GainAmount.ToAlternateAmount2   = NegativeFinanceCurrencyAmount.ToAlternateAmount2
					GainLossCalculation.GainAmount.ToAlternateAmount3	= NegativeFinanceCurrencyAmount.ToAlternateAmount3
					GainLossCalculation.GainAmount.ProjectAmount		= NegativeFinanceCurrencyAmount.ProjectAmount
					GainLossCalculation.GainAmount.ReportAmount1     	= NegativeFinanceCurrencyAmount.ReportAmount1
					GainLossCalculation.GainAmount.ReportAmount2      	= NegativeFinanceCurrencyAmount.ReportAmount2
					GainLossCalculation.GainAmount.ReportAmount3		= NegativeFinanceCurrencyAmount.ReportAmount3
					GainLossCalculation.GainAmount.ReportAmount4		= NegativeFinanceCurrencyAmount.ReportAmount4
					GainLossCalculation.GainAmount.ReportAmount5		= NegativeFinanceCurrencyAmount.ReportAmount5

					NegativeFinanceCurrencyAmount = GainLossCalculation.LossAmount
					LocalBoolean = NegativeFinanceCurrencyAmount.PerformCalculation
					GainLossCalculation.LossAmount.FunctionalAmount	    = NegativeFinanceCurrencyAmount.FunctionalAmount
					GainLossCalculation.LossAmount.AlternateAmount      = NegativeFinanceCurrencyAmount.AlternateAmount
					GainLossCalculation.LossAmount.AlternateAmount2     = NegativeFinanceCurrencyAmount.AlternateAmount2
					GainLossCalculation.LossAmount.AlternateAmount3		= NegativeFinanceCurrencyAmount.AlternateAmount3
					GainLossCalculation.LossAmount.ToFunctionalAmount	= NegativeFinanceCurrencyAmount.ToFunctionalAmount
					GainLossCalculation.LossAmount.ToAlternateAmount    = NegativeFinanceCurrencyAmount.ToAlternateAmount
					GainLossCalculation.LossAmount.ToAlternateAmount2   = NegativeFinanceCurrencyAmount.ToAlternateAmount2
					GainLossCalculation.LossAmount.ToAlternateAmount3	= NegativeFinanceCurrencyAmount.ToAlternateAmount3
					GainLossCalculation.LossAmount.ProjectAmount		= NegativeFinanceCurrencyAmount.ProjectAmount
					GainLossCalculation.LossAmount.ReportAmount1     	= NegativeFinanceCurrencyAmount.ReportAmount1
					GainLossCalculation.LossAmount.ReportAmount2      	= NegativeFinanceCurrencyAmount.ReportAmount2
					GainLossCalculation.LossAmount.ReportAmount3		= NegativeFinanceCurrencyAmount.ReportAmount3
					GainLossCalculation.LossAmount.ReportAmount4		= NegativeFinanceCurrencyAmount.ReportAmount4
					GainLossCalculation.LossAmount.ReportAmount5		= NegativeFinanceCurrencyAmount.ReportAmount5

				if (GainLossCalculation.SingleSystemAccount)
					invoke CreateGainLossFromBatchNoParms PayablesInvoiceDistribution
						invoked.Company					= Company
						invoked.PayablesInvoice			= PayablesInvoice
						invoked.DistributionType 		= "G"
						invoked.PostingOption			= "S"
						invoked.Status					= 1
						invoked.DistributionDate		= PrmRevalueDate
						invoked.Description				= UnrealizedCurrencyGainLossMessage 
						invoked.DistributionReference	= PrmDistributionReference
						invoked.AccrualCode				= PrmAccrualCode
						invoked.GLTransactionAmount						= blank
						invoked.DistributionAmount.ExchangeDate			= LocalExchangeDate 
						invoked.DistributionAmount.CurrencyAmount		= blank
						invoked.DistributionAmount.FunctionalAmount	    = GainLossCalculation.GainAmount.FunctionalAmount
						invoked.DistributionAmount.AlternateAmount      = GainLossCalculation.GainAmount.AlternateAmount
						invoked.DistributionAmount.AlternateAmount2     = GainLossCalculation.GainAmount.AlternateAmount2
						invoked.DistributionAmount.AlternateAmount3		= GainLossCalculation.GainAmount.AlternateAmount3
						invoked.DistributionAmount.ToFunctionalAmount	= GainLossCalculation.GainAmount.ToFunctionalAmount
						invoked.DistributionAmount.ToAlternateAmount    = GainLossCalculation.GainAmount.ToAlternateAmount
						invoked.DistributionAmount.ToAlternateAmount2   = GainLossCalculation.GainAmount.ToAlternateAmount2
						invoked.DistributionAmount.ToAlternateAmount3	= GainLossCalculation.GainAmount.ToAlternateAmount3
						invoked.DistributionAmount.ProjectAmount		= GainLossCalculation.GainAmount.ProjectAmount
						invoked.DistributionAmount.ReportAmount1     	= GainLossCalculation.GainAmount.ReportAmount1
						invoked.DistributionAmount.ReportAmount2      	= GainLossCalculation.GainAmount.ReportAmount2
						invoked.DistributionAmount.ReportAmount3		= GainLossCalculation.GainAmount.ReportAmount3
						invoked.DistributionAmount.ReportAmount4		= GainLossCalculation.GainAmount.ReportAmount4
						invoked.DistributionAmount.ReportAmount5		= GainLossCalculation.GainAmount.ReportAmount5
						invoked.GLFinanceCodeBlock		= GainLossCalculation.GainAccount
						invoked.GLTTransactionCodeBlock	= GainLossCalculation.GainAccount
						invoked.DistributionAccount		= GainLossCalculation.GainAccount
						invoked.GLTJournalizeGroup		= PrmJournalizeGroup
						if (!PrmAPPaymentClose)
							invoked.GLTGeneralLedgerEvent	= "AU"

					NegativeFinanceCurrencyAmount = GainLossCalculation.GainAmount
					LocalBoolean = NegativeFinanceCurrencyAmount.PerformCalculation

					LocalDistributionAmount.FunctionalAmount.EnteredCurrencyAmount		+= NegativeFinanceCurrencyAmount.FunctionalAmount.EnteredCurrencyAmount
					LocalDistributionAmount.AlternateAmount.EnteredCurrencyAmount		+= NegativeFinanceCurrencyAmount.AlternateAmount.EnteredCurrencyAmount
					LocalDistributionAmount.AlternateAmount2.EnteredCurrencyAmount		+= NegativeFinanceCurrencyAmount.AlternateAmount2.EnteredCurrencyAmount
					LocalDistributionAmount.AlternateAmount3.EnteredCurrencyAmount		+= NegativeFinanceCurrencyAmount.AlternateAmount3.EnteredCurrencyAmount
					LocalDistributionAmount.ToFunctionalAmount.EnteredCurrencyAmount	+= NegativeFinanceCurrencyAmount.ToFunctionalAmount.EnteredCurrencyAmount
					LocalDistributionAmount.ToAlternateAmount.EnteredCurrencyAmount		+= NegativeFinanceCurrencyAmount.ToAlternateAmount.EnteredCurrencyAmount
					LocalDistributionAmount.ToAlternateAmount2.EnteredCurrencyAmount	+= NegativeFinanceCurrencyAmount.ToAlternateAmount2.EnteredCurrencyAmount
					LocalDistributionAmount.ToAlternateAmount3.EnteredCurrencyAmount	+= NegativeFinanceCurrencyAmount.ToAlternateAmount3.EnteredCurrencyAmount
					LocalDistributionAmount.ProjectAmount.EnteredCurrencyAmount			+= NegativeFinanceCurrencyAmount.ProjectAmount.EnteredCurrencyAmount
					LocalDistributionAmount.ReportAmount1.EnteredCurrencyAmount			+= NegativeFinanceCurrencyAmount.ReportAmount1.EnteredCurrencyAmount
					LocalDistributionAmount.ReportAmount2.EnteredCurrencyAmount			+= NegativeFinanceCurrencyAmount.ReportAmount2.EnteredCurrencyAmount
					LocalDistributionAmount.ReportAmount3.EnteredCurrencyAmount			+= NegativeFinanceCurrencyAmount.ReportAmount3.EnteredCurrencyAmount
					LocalDistributionAmount.ReportAmount4.EnteredCurrencyAmount			+= NegativeFinanceCurrencyAmount.ReportAmount4.EnteredCurrencyAmount
					LocalDistributionAmount.ReportAmount5.EnteredCurrencyAmount			+= NegativeFinanceCurrencyAmount.ReportAmount5.EnteredCurrencyAmount
				else
					if (GainLossCalculation.AmountType.Positive
					or  GainLossCalculation.AmountType.NegativeAndPositive)

						invoke CreateGainLossFromBatchNoParms PayablesInvoiceDistribution
							invoked.Company					= Company
							invoked.PayablesInvoice			= PayablesInvoice
							invoked.DistributionType 		= "G"
							invoked.PostingOption			= "S"
							invoked.Status					= 1
							invoked.DistributionDate		= PrmRevalueDate
							invoked.Description				= UnrealizedCurrencyGainMessage 
							invoked.DistributionReference	= PrmDistributionReference
							invoked.AccrualCode				= PrmAccrualCode
							invoked.GLTransactionAmount						= blank
							invoked.DistributionAmount.ExchangeDate		    = LocalExchangeDate 
							invoked.DistributionAmount.CurrencyAmount		= blank
							invoked.DistributionAmount.FunctionalAmount	    = GainLossCalculation.GainAmount.FunctionalAmount
							invoked.DistributionAmount.AlternateAmount      = GainLossCalculation.GainAmount.AlternateAmount
							invoked.DistributionAmount.AlternateAmount2     = GainLossCalculation.GainAmount.AlternateAmount2
							invoked.DistributionAmount.AlternateAmount3		= GainLossCalculation.GainAmount.AlternateAmount3
							invoked.DistributionAmount.ToFunctionalAmount	= GainLossCalculation.GainAmount.ToFunctionalAmount
							invoked.DistributionAmount.ToAlternateAmount    = GainLossCalculation.GainAmount.ToAlternateAmount
							invoked.DistributionAmount.ToAlternateAmount2   = GainLossCalculation.GainAmount.ToAlternateAmount2
							invoked.DistributionAmount.ToAlternateAmount3	= GainLossCalculation.GainAmount.ToAlternateAmount3
							invoked.DistributionAmount.ProjectAmount		= GainLossCalculation.GainAmount.ProjectAmount
							invoked.DistributionAmount.ReportAmount1     	= GainLossCalculation.GainAmount.ReportAmount1
							invoked.DistributionAmount.ReportAmount2      	= GainLossCalculation.GainAmount.ReportAmount2
							invoked.DistributionAmount.ReportAmount3		= GainLossCalculation.GainAmount.ReportAmount3
							invoked.DistributionAmount.ReportAmount4		= GainLossCalculation.GainAmount.ReportAmount4
							invoked.DistributionAmount.ReportAmount5		= GainLossCalculation.GainAmount.ReportAmount5
							invoked.GLFinanceCodeBlock		= GainLossCalculation.GainAccount
							invoked.GLTTransactionCodeBlock	= GainLossCalculation.GainAccount
							invoked.DistributionAccount		= GainLossCalculation.GainAccount
							invoked.GLTJournalizeGroup		= PrmJournalizeGroup
							if (!PrmAPPaymentClose)
								invoked.GLTGeneralLedgerEvent	= "AU"

						NegativeFinanceCurrencyAmount = GainLossCalculation.GainAmount
						LocalBoolean = NegativeFinanceCurrencyAmount.PerformCalculation

						LocalDistributionAmount.FunctionalAmount.EnteredCurrencyAmount		+= NegativeFinanceCurrencyAmount.FunctionalAmount.EnteredCurrencyAmount
						LocalDistributionAmount.AlternateAmount.EnteredCurrencyAmount		+= NegativeFinanceCurrencyAmount.AlternateAmount.EnteredCurrencyAmount
						LocalDistributionAmount.AlternateAmount2.EnteredCurrencyAmount		+= NegativeFinanceCurrencyAmount.AlternateAmount2.EnteredCurrencyAmount
						LocalDistributionAmount.AlternateAmount3.EnteredCurrencyAmount		+= NegativeFinanceCurrencyAmount.AlternateAmount3.EnteredCurrencyAmount
						LocalDistributionAmount.ToFunctionalAmount.EnteredCurrencyAmount	+= NegativeFinanceCurrencyAmount.ToFunctionalAmount.EnteredCurrencyAmount
						LocalDistributionAmount.ToAlternateAmount.EnteredCurrencyAmount		+= NegativeFinanceCurrencyAmount.ToAlternateAmount.EnteredCurrencyAmount
						LocalDistributionAmount.ToAlternateAmount2.EnteredCurrencyAmount	+= NegativeFinanceCurrencyAmount.ToAlternateAmount2.EnteredCurrencyAmount
						LocalDistributionAmount.ToAlternateAmount3.EnteredCurrencyAmount	+= NegativeFinanceCurrencyAmount.ToAlternateAmount3.EnteredCurrencyAmount
						LocalDistributionAmount.ProjectAmount.EnteredCurrencyAmount			+= NegativeFinanceCurrencyAmount.ProjectAmount.EnteredCurrencyAmount
						LocalDistributionAmount.ReportAmount1.EnteredCurrencyAmount			+= NegativeFinanceCurrencyAmount.ReportAmount1.EnteredCurrencyAmount
						LocalDistributionAmount.ReportAmount2.EnteredCurrencyAmount			+= NegativeFinanceCurrencyAmount.ReportAmount2.EnteredCurrencyAmount
						LocalDistributionAmount.ReportAmount3.EnteredCurrencyAmount			+= NegativeFinanceCurrencyAmount.ReportAmount3.EnteredCurrencyAmount
						LocalDistributionAmount.ReportAmount4.EnteredCurrencyAmount			+= NegativeFinanceCurrencyAmount.ReportAmount4.EnteredCurrencyAmount
						LocalDistributionAmount.ReportAmount5.EnteredCurrencyAmount			+= NegativeFinanceCurrencyAmount.ReportAmount5.EnteredCurrencyAmount

					if (GainLossCalculation.AmountType.Negative
					or  GainLossCalculation.AmountType.NegativeAndPositive)

						invoke CreateGainLossFromBatchNoParms PayablesInvoiceDistribution
							invoked.Company					= Company
							invoked.PayablesInvoice			= PayablesInvoice
							invoked.DistributionType 		= "G"
							invoked.PostingOption			= "S"
							invoked.Status					= 1
							invoked.DistributionDate		= PrmRevalueDate
							invoked.Description				= UnrealizedCurrencyLossMessage 
							invoked.DistributionReference	= PrmDistributionReference
							invoked.AccrualCode				= PrmAccrualCode
							invoked.GLTransactionAmount						= blank
							invoked.DistributionAmount.ExchangeDate		    = LocalExchangeDate 
							invoked.DistributionAmount.CurrencyAmount		= blank
							invoked.DistributionAmount.FunctionalAmount	    = GainLossCalculation.LossAmount.FunctionalAmount
							invoked.DistributionAmount.AlternateAmount      = GainLossCalculation.LossAmount.AlternateAmount
							invoked.DistributionAmount.AlternateAmount2     = GainLossCalculation.LossAmount.AlternateAmount2
							invoked.DistributionAmount.AlternateAmount3		= GainLossCalculation.LossAmount.AlternateAmount3
							invoked.DistributionAmount.ToFunctionalAmount	= GainLossCalculation.LossAmount.ToFunctionalAmount
							invoked.DistributionAmount.ToAlternateAmount    = GainLossCalculation.LossAmount.ToAlternateAmount
							invoked.DistributionAmount.ToAlternateAmount2   = GainLossCalculation.LossAmount.ToAlternateAmount2
							invoked.DistributionAmount.ToAlternateAmount3	= GainLossCalculation.LossAmount.ToAlternateAmount3
							invoked.DistributionAmount.ProjectAmount		= GainLossCalculation.LossAmount.ProjectAmount
							invoked.DistributionAmount.ReportAmount1     	= GainLossCalculation.LossAmount.ReportAmount1
							invoked.DistributionAmount.ReportAmount2      	= GainLossCalculation.LossAmount.ReportAmount2
							invoked.DistributionAmount.ReportAmount3		= GainLossCalculation.LossAmount.ReportAmount3
							invoked.DistributionAmount.ReportAmount4		= GainLossCalculation.LossAmount.ReportAmount4
							invoked.DistributionAmount.ReportAmount5		= GainLossCalculation.LossAmount.ReportAmount5
							invoked.GLFinanceCodeBlock		= GainLossCalculation.LossAccount
							invoked.GLTTransactionCodeBlock	= GainLossCalculation.LossAccount
							invoked.DistributionAccount		= GainLossCalculation.LossAccount
							invoked.GLTJournalizeGroup		= PrmJournalizeGroup
							if (!PrmAPPaymentClose)
								invoked.GLTGeneralLedgerEvent	= "AU"

						NegativeFinanceCurrencyAmount = GainLossCalculation.LossAmount
						LocalBoolean = NegativeFinanceCurrencyAmount.PerformCalculation

						LocalDistributionAmount.FunctionalAmount.EnteredCurrencyAmount		+= NegativeFinanceCurrencyAmount.FunctionalAmount.EnteredCurrencyAmount
						LocalDistributionAmount.AlternateAmount.EnteredCurrencyAmount		+= NegativeFinanceCurrencyAmount.AlternateAmount.EnteredCurrencyAmount
						LocalDistributionAmount.AlternateAmount2.EnteredCurrencyAmount		+= NegativeFinanceCurrencyAmount.AlternateAmount2.EnteredCurrencyAmount
						LocalDistributionAmount.AlternateAmount3.EnteredCurrencyAmount		+= NegativeFinanceCurrencyAmount.AlternateAmount3.EnteredCurrencyAmount
						LocalDistributionAmount.ToFunctionalAmount.EnteredCurrencyAmount	+= NegativeFinanceCurrencyAmount.ToFunctionalAmount.EnteredCurrencyAmount
						LocalDistributionAmount.ToAlternateAmount.EnteredCurrencyAmount		+= NegativeFinanceCurrencyAmount.ToAlternateAmount.EnteredCurrencyAmount
						LocalDistributionAmount.ToAlternateAmount2.EnteredCurrencyAmount	+= NegativeFinanceCurrencyAmount.ToAlternateAmount2.EnteredCurrencyAmount
						LocalDistributionAmount.ToAlternateAmount3.EnteredCurrencyAmount	+= NegativeFinanceCurrencyAmount.ToAlternateAmount3.EnteredCurrencyAmount
						LocalDistributionAmount.ProjectAmount.EnteredCurrencyAmount			+= NegativeFinanceCurrencyAmount.ProjectAmount.EnteredCurrencyAmount
						LocalDistributionAmount.ReportAmount1.EnteredCurrencyAmount			+= NegativeFinanceCurrencyAmount.ReportAmount1.EnteredCurrencyAmount
						LocalDistributionAmount.ReportAmount2.EnteredCurrencyAmount			+= NegativeFinanceCurrencyAmount.ReportAmount2.EnteredCurrencyAmount
						LocalDistributionAmount.ReportAmount3.EnteredCurrencyAmount			+= NegativeFinanceCurrencyAmount.ReportAmount3.EnteredCurrencyAmount
						LocalDistributionAmount.ReportAmount4.EnteredCurrencyAmount			+= NegativeFinanceCurrencyAmount.ReportAmount4.EnteredCurrencyAmount
						LocalDistributionAmount.ReportAmount5.EnteredCurrencyAmount			+= NegativeFinanceCurrencyAmount.ReportAmount5.EnteredCurrencyAmount


		UpdateFundBalances					
			invoke CancelCommittedFunds CashCodeFundEditRel
			for each PaymentsNotVoidedRel
				if (each.CashCode.EditAvailableFunds
				or  each.CashCode.RestrictedFunds)
					LocalCashCode		= each.CashCode
					LocalPaymentPercent	= each.PaymentAmount.CurrencyAmount / each.DerivedInvoiceAmountDivisor 
					if (each.AccrualCode entered)
						LocalAccrualCode	= each.AccrualCode
					else
						LocalAccrualCode	= PayablesInvoice.AccrualCode
					for each ProrateDistributionsRel
						initialize LocalCalculatePayablesFinanceStructure
						LocalCalculatePayablesFinanceStructure.InputPayablesCompany					= Company
						LocalCalculatePayablesFinanceStructure.InputPayablesInvoice					= PayablesInvoice
						LocalCalculatePayablesFinanceStructure.InputPayablesInvoiceDistribution		= each.PayablesInvoiceDistribution
						LocalCalculatePayablesFinanceStructure.InputPayablesFinanceStructureType	= PayablesFinanceStructureType.Payment
						LocalCalculatePayablesFinanceStructure.InputFinanceCodeBlock				= PayablesAccrualCodeDetailRel.DistributionAccount
						LocalAnswer = LocalCalculatePayablesFinanceStructure.CalculatePayablesFinanceStructure
		
						LocalToAccountingEntity		= LocalCalculatePayablesFinanceStructure.OutputFinanceCodeBlock.ToAccountingEntity
						if (GeneralLedgerCompanyRel.FinanceEnterpriseGroup.FundDimension.AccountingUnit)
							LocalAccountingUnit			= LocalCalculatePayablesFinanceStructure.OutputFinanceCodeBlock.AccountingUnit
						else
							LocalFinanceDimension1		= LocalCalculatePayablesFinanceStructure.OutputFinanceCodeBlock.FinanceDimension1
		
						if (LocalCashCode.EditAvailableFunds)
							invoke Update CashCodeFundEditByFundRel
								invoked.EditAmount += each.DistributionAmount.CurrencyAmount * LocalPaymentPercent
						else
							if (CashCodeFundRel !exists)
								invoke Update CashCodeFundEditByFundRel
		
			constraint (ExceedesCashCodeFundBalanceRel !exists)
				"CannotUpdatePaymentToCashCode<CashCode>;<first ExceedesCashCodeFundBalanceRel.ErrorMessage>"

			invoke UpdateCommittedFunds CashCodeFundEditRel

		UpdateICBDistributionSet 
			if (!TransientBypassUpdateEdit)
				constraint (Status.Released)
					"Payment_Record<PayablesInvoicePayment.PaymentSequence>For_Invoice<Invoice>IsIn_Status<Status>AndMustBe_ReleasedToSelectAnAmount"
				constraint (ContextSettlementDetailRel.IntercompanyBillingSettlementHeader.Status.Unreleased)
					"SettlementMustBeUnreleasedToEditDistributionSet"

				if (TransientICBPaymentSelectAmount entered)
					if (PaymentAmount.CurrencyAmount > 0)
						constraint (TransientICBPaymentSelectAmount > 0)
							"Selected_\AmountMustHaveTheSameSignAs_\Transaction_\Amount"
						constraint (TransientICBPaymentSelectAmount <= PaymentAmount.CurrencyAmount)
							"Selected_\Amount<TransientICBPaymentSelectAmount>CannotExceedThe_\Transaction_\Amount"
					else
					if (PaymentAmount.CurrencyAmount < 0)
						constraint (TransientICBPaymentSelectAmount < 0)
							"Selected_\AmountMustHaveTheSameSignAs_\Transaction_\Amount"
						constraint (TransientICBPaymentSelectAmount >= PaymentAmount.CurrencyAmount)
							"Selected_\Amount<TransientICBPaymentSelectAmount>CannotExceedThe_\Transaction_\Amount"

					if (ContextSettlementDetailLineRel exists)
						invoke Update ContextSettlementDetailLineRel
							invoked.SelectedAmount = TransientICBPaymentSelectAmount
					else
						invoke Create IntercompanyBillingSettlementDetailLine
							invoked.IntercompanyBillingGroup			= ContextSettlementDetailRel.IntercompanyBillingGroup
							invoked.IntercompanyBillingSettlementHeader	= ContextSettlementDetailRel.IntercompanyBillingSettlementHeader
							invoked.IntercompanyBillingSettlementDetail	= ContextSettlementDetailRel.IntercompanyBillingSettlementDetail
							invoked.IntercompanyBillingDocumentHeader	= ContextSettlementDetailRel.IntercompanyBillingDocumentHeader
							invoked.Type								= "P"
							invoked.InvoiceLine							= PayablesInvoicePayment.PaymentSequence
							invoked.VoidSequence						= PayablesInvoicePayment.VoidSequence
							invoked.SelectedAmount						= TransientICBPaymentSelectAmount

		ProratePayablesInvoiceDistributions 
			if (instance count of ProrateDistributionsRel > 25)				
				LocalPaymentPercent	= PaymentAmount.CurrencyAmount / DerivedInvoiceAmountDivisor
				if (PrmVoidDate entered)
					LocalRunProgram = RunProgram.InvoiceReinstatement
				else
					LocalRunProgram 	= RunProgram.PaymentClosing
				LocalProcessGroup	= PrmProcessGroup
				LocalAsyncId = PayablesProcessingMonitorRel.AsyncId
				invoke CreatePaymentAccrualBackground PayablesInvoiceDistribution
					run after LocalAsyncId
					assign async action request id to LocalAsyncId
					invoked.PrmPayablesCompany			= Company
					invoked.PrmPayablesInvoice			= PayablesInvoice
					invoked.PrmJournalizeGroup       	= PrmJournalizeGroup
					invoked.PrmPaymentPercent			= LocalPaymentPercent
					invoked.PrmNumberOfDistributions	= LocalNumberOfDistributions
					invoked.PrmCheckDate				= CheckDate
					invoked.PrmVoidDate					= PrmVoidDate
					invoked.PrmPostDate					= PrmPostDate
					invoked.PrmAmendedReallocation		= PrmAmendedReallocation
					invoked.PrmAccrualCode				= LocalAccrualCode 
					invoked.PrmTotalDistributionAmount	= LocalTotalDistributionAmount
					invoked.PrmControlDocumentNumber	= PrmControlDocumentNumber
					invoked.PrmDescription           	= PrmDescription
					invoked.PrmReference             	= PrmReference

				invoke Update PayablesProcessingMonitorRel
					invoked.AsyncId		= LocalAsyncId
			else
				for each ProrateDistributionsRel 


					initialize LocalCalculatePayablesFinanceStructure
					LocalCalculatePayablesFinanceStructure.InputPayablesCompany					= Company
					LocalCalculatePayablesFinanceStructure.InputPayablesInvoice					= PayablesInvoice
					LocalCalculatePayablesFinanceStructure.InputPayablesInvoiceDistribution		= each.PayablesInvoiceDistribution
					LocalCalculatePayablesFinanceStructure.InputPayablesFinanceStructureType	= PayablesFinanceStructureType.ExpenseAccrual
					LocalCalculatePayablesFinanceStructure.InputFinanceCodeBlock				= PayablesAccrualCodeDetailRel.DistributionAccount

					LocalAnswer = LocalCalculatePayablesFinanceStructure.CalculatePayablesFinanceStructure


					initialize LocalDistributionAmount
					LocalPaymentPercent	= PaymentAmount.CurrencyAmount / DerivedInvoiceAmountDivisor 

					LocalDistributionAmount.CurrencyAmount								= each.DistributionAmount.CurrencyAmount * LocalPaymentPercent
					LocalDistributionAmount.FunctionalAmount.EnteredCurrencyAmount		= each.DistributionAmount.FunctionalAmount.EnteredCurrencyAmount * LocalPaymentPercent
					LocalDistributionAmount.AlternateAmount.EnteredCurrencyAmount		= each.DistributionAmount.AlternateAmount.EnteredCurrencyAmount * LocalPaymentPercent
					LocalDistributionAmount.AlternateAmount2.EnteredCurrencyAmount		= each.DistributionAmount.AlternateAmount2.EnteredCurrencyAmount * LocalPaymentPercent
					LocalDistributionAmount.AlternateAmount3.EnteredCurrencyAmount		= each.DistributionAmount.AlternateAmount3.EnteredCurrencyAmount * LocalPaymentPercent
					LocalDistributionAmount.ToFunctionalAmount.EnteredCurrencyAmount	= each.DistributionAmount.ToFunctionalAmount.EnteredCurrencyAmount * LocalPaymentPercent
					LocalDistributionAmount.ToAlternateAmount.EnteredCurrencyAmount		= each.DistributionAmount.ToAlternateAmount.EnteredCurrencyAmount * LocalPaymentPercent
					LocalDistributionAmount.ToAlternateAmount2.EnteredCurrencyAmount	= each.DistributionAmount.ToAlternateAmount2.EnteredCurrencyAmount * LocalPaymentPercent
					LocalDistributionAmount.ToAlternateAmount3.EnteredCurrencyAmount	= each.DistributionAmount.ToAlternateAmount3.EnteredCurrencyAmount * LocalPaymentPercent
					LocalDistributionAmount.ProjectAmount.EnteredCurrencyAmount			= each.DistributionAmount.ProjectAmount.EnteredCurrencyAmount * LocalPaymentPercent
					LocalDistributionAmount.ReportAmount1.EnteredCurrencyAmount			= each.DistributionAmount.ReportAmount1.EnteredCurrencyAmount * LocalPaymentPercent
					LocalDistributionAmount.ReportAmount2.EnteredCurrencyAmount			= each.DistributionAmount.ReportAmount2.EnteredCurrencyAmount * LocalPaymentPercent
					LocalDistributionAmount.ReportAmount3.EnteredCurrencyAmount			= each.DistributionAmount.ReportAmount3.EnteredCurrencyAmount * LocalPaymentPercent
					LocalDistributionAmount.ReportAmount4.EnteredCurrencyAmount			= each.DistributionAmount.ReportAmount4.EnteredCurrencyAmount * LocalPaymentPercent
					LocalDistributionAmount.ReportAmount5.EnteredCurrencyAmount			= each.DistributionAmount.ReportAmount5.EnteredCurrencyAmount * LocalPaymentPercent

					if (LocalPaymentPercent != 1)
						LocalNumberOfDecimals	= InvoiceCurrency.NumberOfDecimals
						round LocalDistributionAmount.CurrencyAmount to nearest DerivedLocalRoundTo
						LocalNumberOfDecimals	= GeneralLedgerCompanyRel.AccountingEntity.FunctionalCurrency.NumberOfDecimals
						round LocalDistributionAmount.FunctionalAmount.EnteredCurrencyAmount to nearest DerivedLocalRoundTo
						LocalNumberOfDecimals	= GeneralLedgerCompanyRel.AccountingEntity.AlternateCurrency.NumberOfDecimals
						round LocalDistributionAmount.AlternateAmount.EnteredCurrencyAmount to nearest DerivedLocalRoundTo
						LocalNumberOfDecimals	= GeneralLedgerCompanyRel.AccountingEntity.AlternateCurrency2.NumberOfDecimals
						round LocalDistributionAmount.AlternateAmount2.EnteredCurrencyAmount to nearest DerivedLocalRoundTo
						LocalNumberOfDecimals	= GeneralLedgerCompanyRel.AccountingEntity.AlternateCurrency3.NumberOfDecimals
						round LocalDistributionAmount.AlternateAmount3.EnteredCurrencyAmount to nearest DerivedLocalRoundTo
						LocalNumberOfDecimals	= each.DistributionAccount.ToAccountingEntity.FunctionalCurrency.NumberOfDecimals
						round LocalDistributionAmount.ToFunctionalAmount.EnteredCurrencyAmount to nearest DerivedLocalRoundTo
						LocalNumberOfDecimals	= each.DistributionAccount.ToAccountingEntity.AlternateCurrency.NumberOfDecimals
						round LocalDistributionAmount.ToAlternateAmount.EnteredCurrencyAmount to nearest DerivedLocalRoundTo
						LocalNumberOfDecimals	= each.DistributionAccount.ToAccountingEntity.AlternateCurrency2.NumberOfDecimals
						round LocalDistributionAmount.ToAlternateAmount2.EnteredCurrencyAmount to nearest DerivedLocalRoundTo
						LocalNumberOfDecimals	= each.DistributionAccount.ToAccountingEntity.AlternateCurrency3.NumberOfDecimals
						round LocalDistributionAmount.ToAlternateAmount3.EnteredCurrencyAmount to nearest DerivedLocalRoundTo
						LocalNumberOfDecimals	= each.DistributionAccount.Project.Currency.NumberOfDecimals
						round LocalDistributionAmount.ProjectAmount.EnteredCurrencyAmount to nearest DerivedLocalRoundTo
						LocalNumberOfDecimals	= GeneralLedgerCompanyRel.FinanceEnterpriseGroup.ReportCurrencyOne.NumberOfDecimals
						round LocalDistributionAmount.ReportAmount1.EnteredCurrencyAmount to nearest DerivedLocalRoundTo
						LocalNumberOfDecimals	= GeneralLedgerCompanyRel.FinanceEnterpriseGroup.ReportCurrencyTwo.NumberOfDecimals
						round LocalDistributionAmount.ReportAmount2.EnteredCurrencyAmount to nearest DerivedLocalRoundTo
						LocalNumberOfDecimals	= GeneralLedgerCompanyRel.FinanceEnterpriseGroup.ReportCurrencyThree.NumberOfDecimals
						round LocalDistributionAmount.ReportAmount3.EnteredCurrencyAmount to nearest DerivedLocalRoundTo
						LocalNumberOfDecimals	= GeneralLedgerCompanyRel.FinanceEnterpriseGroup.ReportCurrencyFour.NumberOfDecimals
						round LocalDistributionAmount.ReportAmount4.EnteredCurrencyAmount to nearest DerivedLocalRoundTo
						LocalNumberOfDecimals	= GeneralLedgerCompanyRel.FinanceEnterpriseGroup.ReportCurrencyFive.NumberOfDecimals
						round LocalDistributionAmount.ReportAmount5.EnteredCurrencyAmount to nearest DerivedLocalRoundTo

					LocalDistributionCount += 1


					if (LocalDistributionCount < LocalNumberOfDistributions)
						if (PrmVoidDate entered)
							NegativeFinanceCurrencyAmountGroup = LocalDistributionAmount
							LocalBoolean = NegativeFinanceCurrencyAmountGroup.PerformCalculation
							LocalDistributionAmount = NegativeFinanceCurrencyAmountGroup
						else
							LocalDistributionAmount = LocalDistributionAmount
					else						
						if (PrmVoidDate entered)
							NegativeFinanceCurrencyAmountGroup = LocalTotalDistributionAmount
							LocalBoolean = NegativeFinanceCurrencyAmountGroup.PerformCalculation
							LocalDistributionAmount = NegativeFinanceCurrencyAmountGroup
						else
							LocalDistributionAmount = LocalTotalDistributionAmount

					invoke CreateFromBatchNoParms PayablesInvoiceDistribution
						invoked.CreateAlternateGLTransDetail = true
						if (PrmVoidDate entered)
							invoked.GLTPostingDate = PrmVoidDate
							invoked.DistributionDate = PrmVoidDate
							invoked.GLTGeneralLedgerEvent = "VP"
						else
							if (PrmPostDate entered)
								invoked.GLTPostingDate = PrmPostDate
								invoked.DistributionDate = PrmPostDate
							else
								invoked.GLTPostingDate = CheckDate
								invoked.DistributionDate = CheckDate
							invoked.GLTGeneralLedgerEvent = "AP"
						invoked.DistributionAmount = LocalDistributionAmount
						invoked.GLTTransactionDate = CheckDate
						invoked.GLTCurrencyCode = InvoiceCurrency
						invoked.Company = Company
						invoked.PayablesInvoice = PayablesInvoice
						invoked.DistributionType = PayablesDistributionType.PaymentAccrual
						invoked.AccrualCode		 = LocalAccrualCode
						invoked.PostingOption = "S"
						invoked.Status = 1
						invoked.GLTControlDocumentNumber = PrmControlDocumentNumber
						invoked.GLTDocumentNumber = PrmControlDocumentNumber
						invoked.Description = PrmDescription
						invoked.DistributionReference = PrmReference
						invoked.InvoiceCurrency = InvoiceCurrency
						invoked.DistributionAmount.ExchangeDate = PayablesInvoice.InvoiceDate
						invoked.DistributionAmount.KeepRateAndAmount = true
						invoked.GLFinanceCodeBlock		= LocalCalculatePayablesFinanceStructure.OutputFinanceCodeBlock
						invoked.DistributionAccount		= LocalCalculatePayablesFinanceStructure.OutputFinanceCodeBlock
						invoked.GLTTransactionCodeBlock	= LocalCalculatePayablesFinanceStructure.OutputFinanceCodeBlock
						invoked.GLTJournalizeGroup		= PrmJournalizeGroup
						invoked.BypassActiveCodeBlockEdit 	= true		


					if (PrmVoidDate entered)
						LocalTotalDistributionAmount.CurrencyAmount								+= LocalDistributionAmount.CurrencyAmount
						LocalTotalDistributionAmount.FunctionalAmount.EnteredCurrencyAmount		+= LocalDistributionAmount.FunctionalAmount.EnteredCurrencyAmount
						LocalTotalDistributionAmount.AlternateAmount.EnteredCurrencyAmount		+= LocalDistributionAmount.AlternateAmount.EnteredCurrencyAmount
						LocalTotalDistributionAmount.AlternateAmount2.EnteredCurrencyAmount		+= LocalDistributionAmount.AlternateAmount2.EnteredCurrencyAmount
						LocalTotalDistributionAmount.AlternateAmount3.EnteredCurrencyAmount		+= LocalDistributionAmount.AlternateAmount3.EnteredCurrencyAmount
						LocalTotalDistributionAmount.ToFunctionalAmount.EnteredCurrencyAmount	+= LocalDistributionAmount.ToFunctionalAmount.EnteredCurrencyAmount
						LocalTotalDistributionAmount.ReportAmount1.EnteredCurrencyAmount		+= LocalDistributionAmount.ReportAmount1.EnteredCurrencyAmount
						LocalTotalDistributionAmount.ReportAmount2.EnteredCurrencyAmount		+= LocalDistributionAmount.ReportAmount2.EnteredCurrencyAmount
						LocalTotalDistributionAmount.ReportAmount3.EnteredCurrencyAmount		+= LocalDistributionAmount.ReportAmount3.EnteredCurrencyAmount
						LocalTotalDistributionAmount.ReportAmount4.EnteredCurrencyAmount		+= LocalDistributionAmount.ReportAmount4.EnteredCurrencyAmount
						LocalTotalDistributionAmount.ReportAmount5.EnteredCurrencyAmount		+= LocalDistributionAmount.ReportAmount5.EnteredCurrencyAmount
					else
						LocalTotalDistributionAmount.CurrencyAmount								-= LocalDistributionAmount.CurrencyAmount
						LocalTotalDistributionAmount.FunctionalAmount.EnteredCurrencyAmount		-= LocalDistributionAmount.FunctionalAmount.EnteredCurrencyAmount
						LocalTotalDistributionAmount.AlternateAmount.EnteredCurrencyAmount		-= LocalDistributionAmount.AlternateAmount.EnteredCurrencyAmount
						LocalTotalDistributionAmount.AlternateAmount2.EnteredCurrencyAmount		-= LocalDistributionAmount.AlternateAmount2.EnteredCurrencyAmount
						LocalTotalDistributionAmount.AlternateAmount3.EnteredCurrencyAmount		-= LocalDistributionAmount.AlternateAmount3.EnteredCurrencyAmount
						LocalTotalDistributionAmount.ToFunctionalAmount.EnteredCurrencyAmount	-= LocalDistributionAmount.ToFunctionalAmount.EnteredCurrencyAmount
						LocalTotalDistributionAmount.ReportAmount1.EnteredCurrencyAmount		-= LocalDistributionAmount.ReportAmount1.EnteredCurrencyAmount
						LocalTotalDistributionAmount.ReportAmount2.EnteredCurrencyAmount		-= LocalDistributionAmount.ReportAmount2.EnteredCurrencyAmount
						LocalTotalDistributionAmount.ReportAmount3.EnteredCurrencyAmount		-= LocalDistributionAmount.ReportAmount3.EnteredCurrencyAmount
						LocalTotalDistributionAmount.ReportAmount4.EnteredCurrencyAmount		-= LocalDistributionAmount.ReportAmount4.EnteredCurrencyAmount
						LocalTotalDistributionAmount.ReportAmount5.EnteredCurrencyAmount		-= LocalDistributionAmount.ReportAmount5.EnteredCurrencyAmount



			initialize LocalTotalDistributionAmount
			if (CashCode.Currency = InvoiceCurrency)
				LocalTotalDistributionAmount	= NetPaymentAmount
			else
				LocalCurrencyTable = PayablesInvoice.CurrencyTable
				LocalCurrencyCalculationGroup.FinanceEnterpriseGroup = GeneralLedgerCompanyRel.FinanceEnterpriseGroup
				LocalCurrencyCalculationGroup.ExchangeDate = CheckDate
				LocalCurrencyCalculationGroup.FromCurrency = CashCode.Currency
				LocalCurrencyCalculationGroup.FunctionalAmount.ToCurrency = GeneralLedgerCompanyRel.AccountingEntity.FunctionalCurrency
				LocalCurrencyCalculationGroup.AlternateAmount.ToCurrency = GeneralLedgerCompanyRel.AccountingEntity.AlternateCurrency
				LocalCurrencyCalculationGroup.AlternateAmount2.ToCurrency = GeneralLedgerCompanyRel.AccountingEntity.AlternateCurrency2
				LocalCurrencyCalculationGroup.AlternateAmount3.ToCurrency = GeneralLedgerCompanyRel.AccountingEntity.AlternateCurrency3
				LocalCurrencyCalculationGroup.ReportAmount1.ToCurrency = GeneralLedgerCompanyRel.FinanceEnterpriseGroup.ReportCurrencyOne
				LocalCurrencyCalculationGroup.ReportAmount2.ToCurrency = GeneralLedgerCompanyRel.FinanceEnterpriseGroup.ReportCurrencyTwo
				LocalCurrencyCalculationGroup.ReportAmount3.ToCurrency = GeneralLedgerCompanyRel.FinanceEnterpriseGroup.ReportCurrencyThree
				LocalCurrencyCalculationGroup.ReportAmount4.ToCurrency = GeneralLedgerCompanyRel.FinanceEnterpriseGroup.ReportCurrencyFour
				LocalCurrencyCalculationGroup.ReportAmount5.ToCurrency = GeneralLedgerCompanyRel.FinanceEnterpriseGroup.ReportCurrencyFive
				LocalCashCodePaymentAmount.CurrencyAmount = BankCheckAmount
				LocalCashCodePaymentAmount.FunctionalAmount.EnteredCurrencyAmount = LocalCurrencyCalculationGroup.FunctionalAmount.OutputCurrencyAmount
				LocalCashCodePaymentAmount.FunctionalAmount.EnteredCurrencyRate = LocalCurrencyCalculationGroup.FunctionalAmount.OutputCurrencyRate
				if (GeneralLedgerCompanyRel.AccountingEntity.AlternateCurrency entered)
					LocalCashCodePaymentAmount.AlternateAmount.EnteredCurrencyAmount = LocalCurrencyCalculationGroup.AlternateAmount.OutputCurrencyAmount
					LocalCashCodePaymentAmount.AlternateAmount.EnteredCurrencyRate = LocalCurrencyCalculationGroup.AlternateAmount.OutputCurrencyRate
				if (GeneralLedgerCompanyRel.AccountingEntity.AlternateCurrency2 entered)
					LocalCashCodePaymentAmount.AlternateAmount2.EnteredCurrencyAmount = LocalCurrencyCalculationGroup.AlternateAmount2.OutputCurrencyAmount
					LocalCashCodePaymentAmount.AlternateAmount2.EnteredCurrencyRate = LocalCurrencyCalculationGroup.AlternateAmount2.OutputCurrencyRate
				if (GeneralLedgerCompanyRel.AccountingEntity.AlternateCurrency3 entered)
					LocalCashCodePaymentAmount.AlternateAmount3.EnteredCurrencyAmount = LocalCurrencyCalculationGroup.AlternateAmount3.OutputCurrencyAmount
					LocalCashCodePaymentAmount.AlternateAmount3.EnteredCurrencyRate = LocalCurrencyCalculationGroup.AlternateAmount3.OutputCurrencyRate
				if (GeneralLedgerCompanyRel.FinanceEnterpriseGroup.ReportCurrencyOne entered)
					LocalCashCodePaymentAmount.ReportAmount1.EnteredCurrencyAmount = LocalCurrencyCalculationGroup.ReportAmount1.OutputCurrencyAmount
					LocalCashCodePaymentAmount.ReportAmount1.EnteredCurrencyRate = LocalCurrencyCalculationGroup.ReportAmount1.OutputCurrencyRate
				if (GeneralLedgerCompanyRel.FinanceEnterpriseGroup.ReportCurrencyTwo entered)
					LocalCashCodePaymentAmount.ReportAmount2.EnteredCurrencyAmount = LocalCurrencyCalculationGroup.ReportAmount2.OutputCurrencyAmount
					LocalCashCodePaymentAmount.ReportAmount2.EnteredCurrencyRate = LocalCurrencyCalculationGroup.ReportAmount2.OutputCurrencyRate
				if (GeneralLedgerCompanyRel.FinanceEnterpriseGroup.ReportCurrencyThree entered)
					LocalCashCodePaymentAmount.ReportAmount3.EnteredCurrencyAmount = LocalCurrencyCalculationGroup.ReportAmount3.OutputCurrencyAmount
					LocalCashCodePaymentAmount.ReportAmount3.EnteredCurrencyRate = LocalCurrencyCalculationGroup.ReportAmount3.OutputCurrencyRate
				if (GeneralLedgerCompanyRel.FinanceEnterpriseGroup.ReportCurrencyFour entered)
					LocalCashCodePaymentAmount.ReportAmount4.EnteredCurrencyAmount = LocalCurrencyCalculationGroup.ReportAmount4.OutputCurrencyAmount
					LocalCashCodePaymentAmount.ReportAmount4.EnteredCurrencyRate = LocalCurrencyCalculationGroup.ReportAmount4.OutputCurrencyRate
				if (GeneralLedgerCompanyRel.FinanceEnterpriseGroup.ReportCurrencyFive entered)
					LocalCashCodePaymentAmount.ReportAmount5.EnteredCurrencyAmount = LocalCurrencyCalculationGroup.ReportAmount5.OutputCurrencyAmount
					LocalCashCodePaymentAmount.ReportAmount5.EnteredCurrencyRate = LocalCurrencyCalculationGroup.ReportAmount5.OutputCurrencyRate
				LocalTotalDistributionAmount = LocalCashCodePaymentAmount
			
			if (PrmAmendedReallocation)			
				initialize LocalTotalDistributionAmount 
			initialize LocalDistributionCount
			if (instance count of ProrateDistributionsRel > 25)				
				LocalPaymentPercent	= NetPaymentAmount.CurrencyAmount / DerivedInvoiceAmountDivisor
				if (PrmVoidDate entered)
					LocalCashCodePaymentExchange.BaseAmount.EnteredCurrencyRate = (BankCheckAmount / NetPaymentAmount.CurrencyAmount)
				else
					if (InvoiceCurrency = CashRequirementsResult.InvoiceCurrency
					and CashCode 		= CashRequirementsResult.CashCode
					and CashRequirementsResult.OverridePaymentRate entered)
						LocalCashCodePaymentExchange.BaseAmount.EnteredCurrencyRate = CashRequirementsResult.OverridePaymentRate 
				if (PrmVoidDate entered)
					LocalRunProgram = RunProgram.InvoiceReinstatement
				else
					LocalRunProgram 	= RunProgram.PaymentClosing
				LocalProcessGroup	= PrmProcessGroup
				LocalAsyncId = PayablesProcessingMonitorRel.AsyncId
				invoke CreateCashDistributionBackground PayablesInvoiceDistribution
					run after LocalAsyncId
					assign async action request id to LocalAsyncId
					invoked.PrmPayablesCompany			= Company
					invoked.PrmPayablesInvoice			= PayablesInvoice
					invoked.PrmJournalizeGroup       	= PrmJournalizeGroup
					invoked.PrmPaymentPercent			= LocalPaymentPercent
					invoked.PrmNumberOfDistributions	= LocalNumberOfDistributions
					invoked.PrmCheckDate				= CheckDate
					invoked.PrmVoidDate					= PrmVoidDate
					invoked.PrmPostDate					= PrmPostDate
					invoked.PrmAmendedReallocation		= PrmAmendedReallocation
					invoked.PrmAccrualCode				= LocalAccrualCode 
					invoked.PrmTotalDistributionAmount	= LocalTotalDistributionAmount
					invoked.PrmControlDocumentNumber	= PrmControlDocumentNumber
					invoked.PrmDescription           	= PrmDescription
					invoked.PrmReference             	= PrmReference
					invoked.PrmCashCode					= CashCode
					invoked.PrmCashAccount				= CompanyCashCodeRel.CashAccount
					invoked.PrmCashCodeCurrency			= CashCode.Currency
					invoked.PrmBankCheckExchangeRate	= LocalCashCodePaymentExchange.BaseAmount.EnteredCurrencyRate
					invoked.PrmStaleDateAccount		 	= PrmStaleDateAccount
					invoked.PrmPayablesInvoicePayment	= PayablesInvoicePayment
					invoked.PrmPaymentSequence			= PayablesInvoicePayment.PaymentSequence
					invoked.PrmBankTransactionCode		= BankTransactionCode
					invoked.PrmTransactionIDNumber		= TransactionIDNumber
					invoked.PrmTransactionNumber		= TransactionNumber
					if (PrmPaymentClose)
						invoked.PrmPayGroup				= PayGroup

				invoke Update PayablesProcessingMonitorRel
					invoked.AsyncId		= LocalAsyncId
			else
				for each ProrateDistributionsRel

					initialize LocalCalculatePayablesFinanceStructure
					LocalCalculatePayablesFinanceStructure.InputPayablesCompany					= Company
					LocalCalculatePayablesFinanceStructure.InputPayablesInvoice					= PayablesInvoice
					LocalCalculatePayablesFinanceStructure.InputPayablesInvoiceDistribution		= each.PayablesInvoiceDistribution
					LocalCalculatePayablesFinanceStructure.InputPayablesFinanceStructureType	= PayablesDistributionType.Payment
					LocalCalculatePayablesFinanceStructure.InputFinanceCodeBlock				= CompanyCashCodeRel.CashAccount

					LocalAnswer = LocalCalculatePayablesFinanceStructure.CalculatePayablesFinanceStructure


					initialize LocalDistributionAmount
					LocalPaymentPercent	= NetPaymentAmount.CurrencyAmount / DerivedInvoiceAmountDivisor 

					LocalDistributionAmount.CurrencyAmount								= each.DistributionAmount.CurrencyAmount * LocalPaymentPercent
					LocalDistributionAmount.FunctionalAmount.EnteredCurrencyAmount		= each.DistributionAmount.FunctionalAmount.EnteredCurrencyAmount * LocalPaymentPercent
					LocalDistributionAmount.AlternateAmount.EnteredCurrencyAmount		= each.DistributionAmount.AlternateAmount.EnteredCurrencyAmount * LocalPaymentPercent
					LocalDistributionAmount.AlternateAmount2.EnteredCurrencyAmount		= each.DistributionAmount.AlternateAmount2.EnteredCurrencyAmount * LocalPaymentPercent
					LocalDistributionAmount.AlternateAmount3.EnteredCurrencyAmount		= each.DistributionAmount.AlternateAmount3.EnteredCurrencyAmount * LocalPaymentPercent
					LocalDistributionAmount.ToFunctionalAmount.EnteredCurrencyAmount	= each.DistributionAmount.ToFunctionalAmount.EnteredCurrencyAmount * LocalPaymentPercent
					LocalDistributionAmount.ToAlternateAmount.EnteredCurrencyAmount		= each.DistributionAmount.ToAlternateAmount.EnteredCurrencyAmount * LocalPaymentPercent
					LocalDistributionAmount.ToAlternateAmount2.EnteredCurrencyAmount	= each.DistributionAmount.ToAlternateAmount2.EnteredCurrencyAmount * LocalPaymentPercent
					LocalDistributionAmount.ToAlternateAmount3.EnteredCurrencyAmount	= each.DistributionAmount.ToAlternateAmount3.EnteredCurrencyAmount * LocalPaymentPercent
					LocalDistributionAmount.ProjectAmount.EnteredCurrencyAmount			= each.DistributionAmount.ProjectAmount.EnteredCurrencyAmount * LocalPaymentPercent
					LocalDistributionAmount.ReportAmount1.EnteredCurrencyAmount			= each.DistributionAmount.ReportAmount1.EnteredCurrencyAmount * LocalPaymentPercent
					LocalDistributionAmount.ReportAmount2.EnteredCurrencyAmount			= each.DistributionAmount.ReportAmount2.EnteredCurrencyAmount * LocalPaymentPercent
					LocalDistributionAmount.ReportAmount3.EnteredCurrencyAmount			= each.DistributionAmount.ReportAmount3.EnteredCurrencyAmount * LocalPaymentPercent
					LocalDistributionAmount.ReportAmount4.EnteredCurrencyAmount			= each.DistributionAmount.ReportAmount4.EnteredCurrencyAmount * LocalPaymentPercent
					LocalDistributionAmount.ReportAmount5.EnteredCurrencyAmount			= each.DistributionAmount.ReportAmount5.EnteredCurrencyAmount * LocalPaymentPercent

					if (LocalPaymentPercent != 1)
						LocalNumberOfDecimals	= InvoiceCurrency.NumberOfDecimals
						round LocalDistributionAmount.CurrencyAmount to nearest DerivedLocalRoundTo
						LocalNumberOfDecimals	= GeneralLedgerCompanyRel.AccountingEntity.FunctionalCurrency.NumberOfDecimals
						round LocalDistributionAmount.FunctionalAmount.EnteredCurrencyAmount to nearest DerivedLocalRoundTo
						LocalNumberOfDecimals	= GeneralLedgerCompanyRel.AccountingEntity.AlternateCurrency.NumberOfDecimals
						round LocalDistributionAmount.AlternateAmount.EnteredCurrencyAmount to nearest DerivedLocalRoundTo
						LocalNumberOfDecimals	= GeneralLedgerCompanyRel.AccountingEntity.AlternateCurrency2.NumberOfDecimals
						round LocalDistributionAmount.AlternateAmount2.EnteredCurrencyAmount to nearest DerivedLocalRoundTo
						LocalNumberOfDecimals	= GeneralLedgerCompanyRel.AccountingEntity.AlternateCurrency3.NumberOfDecimals
						round LocalDistributionAmount.AlternateAmount3.EnteredCurrencyAmount to nearest DerivedLocalRoundTo
						LocalNumberOfDecimals	= each.DistributionAccount.ToAccountingEntity.FunctionalCurrency.NumberOfDecimals
						round LocalDistributionAmount.ToFunctionalAmount.EnteredCurrencyAmount to nearest DerivedLocalRoundTo
						LocalNumberOfDecimals	= each.DistributionAccount.ToAccountingEntity.AlternateCurrency.NumberOfDecimals
						round LocalDistributionAmount.ToAlternateAmount.EnteredCurrencyAmount to nearest DerivedLocalRoundTo
						LocalNumberOfDecimals	= each.DistributionAccount.ToAccountingEntity.AlternateCurrency2.NumberOfDecimals
						round LocalDistributionAmount.ToAlternateAmount2.EnteredCurrencyAmount to nearest DerivedLocalRoundTo
						LocalNumberOfDecimals	= each.DistributionAccount.ToAccountingEntity.AlternateCurrency3.NumberOfDecimals
						round LocalDistributionAmount.ToAlternateAmount3.EnteredCurrencyAmount to nearest DerivedLocalRoundTo
						LocalNumberOfDecimals	= each.DistributionAccount.Project.Currency.NumberOfDecimals
						round LocalDistributionAmount.ProjectAmount.EnteredCurrencyAmount to nearest DerivedLocalRoundTo
						LocalNumberOfDecimals	= GeneralLedgerCompanyRel.FinanceEnterpriseGroup.ReportCurrencyOne.NumberOfDecimals
						round LocalDistributionAmount.ReportAmount1.EnteredCurrencyAmount to nearest DerivedLocalRoundTo
						LocalNumberOfDecimals	= GeneralLedgerCompanyRel.FinanceEnterpriseGroup.ReportCurrencyTwo.NumberOfDecimals
						round LocalDistributionAmount.ReportAmount2.EnteredCurrencyAmount to nearest DerivedLocalRoundTo
						LocalNumberOfDecimals	= GeneralLedgerCompanyRel.FinanceEnterpriseGroup.ReportCurrencyThree.NumberOfDecimals
						round LocalDistributionAmount.ReportAmount3.EnteredCurrencyAmount to nearest DerivedLocalRoundTo
						LocalNumberOfDecimals	= GeneralLedgerCompanyRel.FinanceEnterpriseGroup.ReportCurrencyFour.NumberOfDecimals
						round LocalDistributionAmount.ReportAmount4.EnteredCurrencyAmount to nearest DerivedLocalRoundTo
						LocalNumberOfDecimals	= GeneralLedgerCompanyRel.FinanceEnterpriseGroup.ReportCurrencyFive.NumberOfDecimals
						round LocalDistributionAmount.ReportAmount5.EnteredCurrencyAmount to nearest DerivedLocalRoundTo

					LocalDistributionCount += 1


					initialize LocalCashCodePaymentAmount
					LocalCurrencyTable = PayablesInvoice.CurrencyTable
					LocalCurrencyCalculationGroup.FinanceEnterpriseGroup = GeneralLedgerCompanyRel.FinanceEnterpriseGroup
					LocalCurrencyCalculationGroup.ExchangeDate = CheckDate
					LocalCurrencyCalculationGroup.FromCurrency = CashCode.Currency
					LocalCurrencyCalculationGroup.FunctionalAmount.ToCurrency = GeneralLedgerCompanyRel.AccountingEntity.FunctionalCurrency
					LocalCurrencyCalculationGroup.AlternateAmount.ToCurrency = GeneralLedgerCompanyRel.AccountingEntity.AlternateCurrency
					LocalCurrencyCalculationGroup.AlternateAmount2.ToCurrency = GeneralLedgerCompanyRel.AccountingEntity.AlternateCurrency2
					LocalCurrencyCalculationGroup.AlternateAmount3.ToCurrency = GeneralLedgerCompanyRel.AccountingEntity.AlternateCurrency3
					LocalCurrencyCalculationGroup.ToFunctionalAmount.ToCurrency = each.DistributionAccount.ToAccountingEntity.FunctionalCurrency
					LocalCurrencyCalculationGroup.ToAlternateAmount.ToCurrency = each.DistributionAccount.ToAccountingEntity.AlternateCurrency
					LocalCurrencyCalculationGroup.ToAlternateAmount2.ToCurrency = each.DistributionAccount.ToAccountingEntity.AlternateCurrency2
					LocalCurrencyCalculationGroup.ToAlternateAmount3.ToCurrency = each.DistributionAccount.ToAccountingEntity.AlternateCurrency3
					LocalCurrencyCalculationGroup.ReportAmount1.ToCurrency = GeneralLedgerCompanyRel.FinanceEnterpriseGroup.ReportCurrencyOne
					LocalCurrencyCalculationGroup.ReportAmount2.ToCurrency = GeneralLedgerCompanyRel.FinanceEnterpriseGroup.ReportCurrencyTwo
					LocalCurrencyCalculationGroup.ReportAmount3.ToCurrency = GeneralLedgerCompanyRel.FinanceEnterpriseGroup.ReportCurrencyThree
					LocalCurrencyCalculationGroup.ReportAmount4.ToCurrency = GeneralLedgerCompanyRel.FinanceEnterpriseGroup.ReportCurrencyFour
					LocalCurrencyCalculationGroup.ReportAmount5.ToCurrency = GeneralLedgerCompanyRel.FinanceEnterpriseGroup.ReportCurrencyFive
					LocalExchangeDate = CheckDate
					LocalCashCodePaymentExchange.TransactionAmount = LocalDistributionAmount.CurrencyAmount 
					LocalCashCodePaymentExchange.BaseAmount.ToCurrency = CashCode.Currency
					if (PrmVoidDate entered)
						LocalCashCodePaymentExchange.BaseAmount.EnteredCurrencyRate = (BankCheckAmount / NetPaymentAmount.CurrencyAmount)
					else
						if (InvoiceCurrency = CashRequirementsResult.InvoiceCurrency
						and CashCode 		= CashRequirementsResult.CashCode
						and CashRequirementsResult.OverridePaymentRate entered)
							LocalCashCodePaymentExchange.BaseAmount.EnteredCurrencyRate = CashRequirementsResult.OverridePaymentRate 
					OldPaymentAmount = LocalCashCodePaymentExchange.BaseAmount.OutputCurrencyAmount
					LocalCurrencyCalculationGroup.CurrencyAmount = OldPaymentAmount
					LocalCashCodePaymentAmount.CurrencyAmount = OldPaymentAmount
					LocalCashCodePaymentAmount.FunctionalAmount.EnteredCurrencyAmount = LocalCurrencyCalculationGroup.FunctionalAmount.OutputCurrencyAmount
					LocalCashCodePaymentAmount.FunctionalAmount.EnteredCurrencyRate = LocalCurrencyCalculationGroup.FunctionalAmount.OutputCurrencyRate
					if (GeneralLedgerCompanyRel.AccountingEntity.AlternateCurrency entered)
						LocalCashCodePaymentAmount.AlternateAmount.EnteredCurrencyAmount = LocalCurrencyCalculationGroup.AlternateAmount.OutputCurrencyAmount
						LocalCashCodePaymentAmount.AlternateAmount.EnteredCurrencyRate = LocalCurrencyCalculationGroup.AlternateAmount.OutputCurrencyRate
					if (GeneralLedgerCompanyRel.AccountingEntity.AlternateCurrency2 entered)
						LocalCashCodePaymentAmount.AlternateAmount2.EnteredCurrencyAmount = LocalCurrencyCalculationGroup.AlternateAmount2.OutputCurrencyAmount
						LocalCashCodePaymentAmount.AlternateAmount2.EnteredCurrencyRate = LocalCurrencyCalculationGroup.AlternateAmount2.OutputCurrencyRate
					if (GeneralLedgerCompanyRel.AccountingEntity.AlternateCurrency3 entered)
						LocalCashCodePaymentAmount.AlternateAmount3.EnteredCurrencyAmount = LocalCurrencyCalculationGroup.AlternateAmount3.OutputCurrencyAmount
						LocalCashCodePaymentAmount.AlternateAmount3.EnteredCurrencyRate = LocalCurrencyCalculationGroup.AlternateAmount3.OutputCurrencyRate
					if (GeneralLedgerCompanyRel.AccountingEntity != each.DistributionAccount.ToAccountingEntity)
						LocalCashCodePaymentAmount.ToFunctionalAmount.EnteredCurrencyAmount = LocalCurrencyCalculationGroup.ToFunctionalAmount.OutputCurrencyAmount
						LocalCashCodePaymentAmount.ToFunctionalAmount.EnteredCurrencyRate = LocalCurrencyCalculationGroup.ToFunctionalAmount.OutputCurrencyRate
					if (each.DistributionAccount.ToAccountingEntity.AlternateCurrency entered)
						LocalCashCodePaymentAmount.ToAlternateAmount.EnteredCurrencyAmount = LocalCurrencyCalculationGroup.ToAlternateAmount.OutputCurrencyAmount
						LocalCashCodePaymentAmount.ToAlternateAmount.EnteredCurrencyRate = LocalCurrencyCalculationGroup.ToAlternateAmount.OutputCurrencyRate
					if (each.DistributionAccount.ToAccountingEntity.AlternateCurrency2 entered)
						LocalCashCodePaymentAmount.ToAlternateAmount2.EnteredCurrencyAmount = LocalCurrencyCalculationGroup.ToAlternateAmount2.OutputCurrencyAmount
						LocalCashCodePaymentAmount.ToAlternateAmount2.EnteredCurrencyRate = LocalCurrencyCalculationGroup.ToAlternateAmount2.OutputCurrencyRate
					if (each.DistributionAccount.ToAccountingEntity.AlternateCurrency3 entered)
						LocalCashCodePaymentAmount.ToAlternateAmount3.EnteredCurrencyAmount = LocalCurrencyCalculationGroup.ToAlternateAmount3.OutputCurrencyAmount
						LocalCashCodePaymentAmount.ToAlternateAmount3.EnteredCurrencyRate = LocalCurrencyCalculationGroup.ToAlternateAmount3.OutputCurrencyRate
					if (each.DistributionAccount.Project entered)
						LocalCashCodePaymentAmount.ProjectAmount.EnteredCurrencyAmount = LocalCurrencyCalculationGroup.ProjectAmount.OutputCurrencyAmount
						LocalCashCodePaymentAmount.ProjectAmount.EnteredCurrencyRate = LocalCurrencyCalculationGroup.ProjectAmount.OutputCurrencyRate
					if (GeneralLedgerCompanyRel.FinanceEnterpriseGroup.ReportCurrencyOne entered)
						LocalCashCodePaymentAmount.ReportAmount1.EnteredCurrencyAmount = LocalCurrencyCalculationGroup.ReportAmount1.OutputCurrencyAmount
						LocalCashCodePaymentAmount.ReportAmount1.EnteredCurrencyRate = LocalCurrencyCalculationGroup.ReportAmount1.OutputCurrencyRate
					if (GeneralLedgerCompanyRel.FinanceEnterpriseGroup.ReportCurrencyTwo entered)
						LocalCashCodePaymentAmount.ReportAmount2.EnteredCurrencyAmount = LocalCurrencyCalculationGroup.ReportAmount2.OutputCurrencyAmount
						LocalCashCodePaymentAmount.ReportAmount2.EnteredCurrencyRate = LocalCurrencyCalculationGroup.ReportAmount2.OutputCurrencyRate
					if (GeneralLedgerCompanyRel.FinanceEnterpriseGroup.ReportCurrencyThree entered)
						LocalCashCodePaymentAmount.ReportAmount3.EnteredCurrencyAmount = LocalCurrencyCalculationGroup.ReportAmount3.OutputCurrencyAmount
						LocalCashCodePaymentAmount.ReportAmount3.EnteredCurrencyRate = LocalCurrencyCalculationGroup.ReportAmount3.OutputCurrencyRate
					if (GeneralLedgerCompanyRel.FinanceEnterpriseGroup.ReportCurrencyFour entered)
						LocalCashCodePaymentAmount.ReportAmount4.EnteredCurrencyAmount = LocalCurrencyCalculationGroup.ReportAmount4.OutputCurrencyAmount
						LocalCashCodePaymentAmount.ReportAmount4.EnteredCurrencyRate = LocalCurrencyCalculationGroup.ReportAmount4.OutputCurrencyRate
					if (GeneralLedgerCompanyRel.FinanceEnterpriseGroup.ReportCurrencyFive entered)
						LocalCashCodePaymentAmount.ReportAmount5.EnteredCurrencyAmount = LocalCurrencyCalculationGroup.ReportAmount5.OutputCurrencyAmount
						LocalCashCodePaymentAmount.ReportAmount5.EnteredCurrencyRate = LocalCurrencyCalculationGroup.ReportAmount5.OutputCurrencyRate
					LocalDistributionAmount	= LocalCashCodePaymentAmount



					if (LocalDistributionCount < LocalNumberOfDistributions)
						if (PrmVoidDate not entered)
							NegativeFinanceCurrencyAmountGroup = LocalDistributionAmount
							LocalBoolean = NegativeFinanceCurrencyAmountGroup.PerformCalculation
							LocalDistributionAmount = NegativeFinanceCurrencyAmountGroup
						else
							LocalDistributionAmount = LocalDistributionAmount
					else						
						if (PrmVoidDate not entered)
							NegativeFinanceCurrencyAmountGroup = LocalTotalDistributionAmount
							LocalBoolean = NegativeFinanceCurrencyAmountGroup.PerformCalculation
							LocalDistributionAmount = NegativeFinanceCurrencyAmountGroup
						else
							LocalDistributionAmount = LocalTotalDistributionAmount

					if (PrmStaleDateAccount entered)
						LocalCalculatePayablesFinanceStructure.OutputFinanceCodeBlock.GeneralLedgerChartAccount = PrmStaleDateAccount.GeneralLedgerChartAccount

					invoke CreateFromBatchNoParms PayablesInvoiceDistribution
						invoked.CreateAlternateGLTransDetail = true
						if (PrmVoidDate entered)
							invoked.GLTPostingDate = PrmVoidDate
							invoked.DistributionDate = PrmVoidDate
							invoked.GLTGeneralLedgerEvent = "VP"
						else
							if (PrmPostDate entered)
								invoked.GLTPostingDate = PrmPostDate
								invoked.DistributionDate = PrmPostDate
							else
								invoked.GLTPostingDate = CheckDate
								invoked.DistributionDate = CheckDate
							invoked.GLTGeneralLedgerEvent = "AP"
						invoked.DistributionAmount = LocalDistributionAmount
						invoked.GLTTransactionDate = CheckDate
						invoked.GLTCurrencyCode = CashCode.Currency
						invoked.Company = Company
						invoked.PayablesInvoice = PayablesInvoice
						invoked.DistributionType = PayablesDistributionType.Payment
						invoked.AccrualCode = LocalAccrualCode 
						invoked.PostingOption = "S"
						invoked.Status = 1
						invoked.GLTControlDocumentNumber = PrmControlDocumentNumber
						invoked.GLTDocumentNumber = PrmControlDocumentNumber
						invoked.Description = "Cash Disbursement"
						invoked.DistributionReference = PrmReference
						invoked.InvoiceCurrency = CashCode.Currency
						invoked.DistributionAmount.ExchangeDate = CheckDate
						invoked.GLFinanceCodeBlock		= LocalCalculatePayablesFinanceStructure.OutputFinanceCodeBlock
						invoked.DistributionAccount		= LocalCalculatePayablesFinanceStructure.OutputFinanceCodeBlock
						invoked.GLTTransactionCodeBlock	= LocalCalculatePayablesFinanceStructure.OutputFinanceCodeBlock
						invoked.GLTJournalizeGroup = PrmJournalizeGroup
						invoked.BypassActiveCodeBlockEdit 	= true		

					if (PrmStaleDateAccount !entered) 
						LocalToAccountingEntity	= LocalCalculatePayablesFinanceStructure.OutputFinanceCodeBlock.ToAccountingEntity
						if (GeneralLedgerCompanyRel.FinanceEnterpriseGroup.FundDimension.AccountingUnit)
							LocalAccountingUnit		= LocalCalculatePayablesFinanceStructure.OutputFinanceCodeBlock.AccountingUnit
						else
							LocalFinanceDimension1	= LocalCalculatePayablesFinanceStructure.OutputFinanceCodeBlock.FinanceDimension1

						if (PrmPaymentClose)
							invoke Create CashCodeFundConsolidatedUpdate
								invoked.CashManagementGroup		= GeneralLedgerCompanyRel.FinanceEnterpriseGroup
								invoked.PayGroup				= PayGroup
								invoked.CashCode				= CashCode
								invoked.AccountingEntity		= LocalToAccountingEntity
								invoked.AccountingUnit			= LocalAccountingUnit
								invoked.FinanceDimension1		= LocalFinanceDimension1
								invoked.PostedAmount			= LocalDistributionAmount.CurrencyAmount
						else
							if (CashCodeFundRel !exist)
								invoke Create CashCodeFundRel
									invoked.PostedAmount = LocalDistributionAmount.CurrencyAmount
							else
								invoke UpdatePostedAmount CashCodeFundRel
									invoked.PrmPostedAmount = LocalDistributionAmount.CurrencyAmount

#ifdef module cam						
						if(GeneralLedgerCompanyRel.FinanceEnterpriseGroup.CustodialAccountManagement)	
							LocalCustodialPosting	= LocalCalculatePayablesFinanceStructure.OutputFinanceCodeBlock.FinanceDimension10
							if (LocalCustodialPosting entered)
								constraint (CustodialDetailAmountRel exist)
									"<GeneralLedgerCompanyRel.FinanceEnterpriseGroup.FinanceDimension10Label>:_<LocalCustodialPosting>_MustBeSetupAS_A_CustodialAccount"
								if (Vendor != CustodialDetailAmountRel.CustodialAccountManagement.Vendor)
									constraint (LocalCustodialPosting.Expendable)
										"<GeneralLedgerCompanyRel.FinanceEnterpriseGroup.FinanceDimension10Label>:_<LocalCustodialPosting>_IsNotExpendable"
								if(CustodialAccountEditRel2 exists)
									LocalTitle = PayablesInvoicePayment.PaymentSequence+"_"+PayablesInvoice.Invoice
									invoke UpdateDisbursements CustodialDetailAmountRel
										invoked.PrmDisbursements = LocalDistributionAmount.CurrencyAmount * -1
									if (Vendor = CustodialDetailAmountRel.CustodialAccountManagement.Vendor)
										LocalActivityType = 10
									else
										LocalActivityType = 2
									if (CustodialActivityRel exists)
										invoke Update CustodialActivityRel
											invoked.Amount += LocalDistributionAmount.CurrencyAmount
									else
										invoke Create CustodialActivity
											invoked.FinanceEnterpriseGroup  		= GeneralLedgerCompanyRel.FinanceEnterpriseGroup
											invoked.CustodialCompany			 	= Company
											invoked.CustodialActivity.CustodialAccountManagement	 = CustodialDetailAmountRel.CustodialAccountManagement
											invoked.CustodialPosting			 	= LocalCustodialPosting
											if(PrmVoidDate entered)
												invoked.ActivityDate				 	= PrmVoidDate
												invoked.ActivityType 					= 6
												invoked.Description 				 	= "Stop/Void Payables Invoice Payment"
											else
												invoked.ActivityDate				 	= CheckDate
												invoked.ActivityType 					= LocalActivityType
												invoked.Description 				 	= "Payables Invoice Payment"												
											invoked.Amount						 	= LocalDistributionAmount.CurrencyAmount
											invoked.DocumentNumber				 	= PayablesInvoicePayment.PaymentSequence+"_"+PayablesInvoice.Invoice
											invoked.Vendor						 	= Vendor	
											invoked.PayablesInvoice				 	= PayablesInvoice
											invoked.PayablesInvoicePayment		 	= PayablesInvoicePayment
											invoked.CustodialCashCode			 	= CashCode
											invoked.CustodialTransactionCode		= BankTransactionCode
											invoked.TransactionIDNumber				= TransactionIDNumber
#endif

					if (PrmVoidDate not entered)
						if (CashLedgerGLDistributionByAccountRel exists)
							invoke AddAmountsToExistingDistribution CashLedgerGLDistributionByAccountRel
								invoked.PrmDistributionAmount				= LocalDistributionAmount
								invoked.PrmDistributionAmount.ExchangeDate	= CheckDate
						else
							invoke CreateFundHistoryDistribution CashLedgerGLDistribution
								invoked.CashManagementGroup										= GeneralLedgerCompanyRel.FinanceEnterpriseGroup
								invoked.CashCode												= CashCode
								invoked.CashLedgerSourceRecord									= "CHK"
								invoked.CashLedgerGLDistribution.BankTransactionCode			= BankTransactionCode
								invoked.CashLedgerGLDistribution.TransactionIDNumber			= TransactionIDNumber
								invoked.CashLedgerGLDistribution.DistributionType   			= "F"
								invoked.CashLedgerGLDistribution.SequenceNumber					= (last CashLedgerGLDistributionsRel.CashLedgerGLDistribution.SequenceNumber + 1)
								invoked.Company                                     			= Company
								invoked.Status 	 												= Status.Historical
								invoked.Reference                                   			= PrmReference
								invoked.PostDate												= CheckDate
								invoked.Description												= "Cash Disbursement"
								invoked.GLFinanceCodeBlock										= LocalCalculatePayablesFinanceStructure.OutputFinanceCodeBlock
								invoked.TransactionNumber                           			= TransactionNumber
								invoked.GeneralLedgerSourceCode									= "AP"
								invoked.GLTransactionAmount    					    			= LocalDistributionAmount.CurrencyAmount
								invoked.GLBaseAmount.FunctionalAmount.EnteredCurrencyAmount 	= LocalDistributionAmount.FunctionalAmount.EnteredCurrencyAmount
								invoked.GLBaseAmount.AlternateAmount.EnteredCurrencyAmount 		= LocalDistributionAmount.AlternateAmount.EnteredCurrencyAmount
								invoked.GLBaseAmount.AlternateAmount2.EnteredCurrencyAmount 	= LocalDistributionAmount.AlternateAmount2.EnteredCurrencyAmount
								invoked.GLBaseAmount.AlternateAmount3.EnteredCurrencyAmount 	= LocalDistributionAmount.AlternateAmount3.EnteredCurrencyAmount
								invoked.GLBaseAmount.ToFunctionalAmount.EnteredCurrencyAmount 	= LocalDistributionAmount.ToFunctionalAmount.EnteredCurrencyAmount
								invoked.GLBaseAmount.ToAlternateAmount.EnteredCurrencyAmount 	= LocalDistributionAmount.ToAlternateAmount.EnteredCurrencyAmount
								invoked.GLBaseAmount.ToAlternateAmount2.EnteredCurrencyAmount 	= LocalDistributionAmount.ToAlternateAmount2.EnteredCurrencyAmount
								invoked.GLBaseAmount.ToAlternateAmount3.EnteredCurrencyAmount 	= LocalDistributionAmount.ToAlternateAmount3.EnteredCurrencyAmount
								invoked.GLBaseAmount.ProjectAmount.EnteredCurrencyAmount	 	= LocalDistributionAmount.ProjectAmount.EnteredCurrencyAmount
								invoked.GLBaseAmount.ReportAmount1.EnteredCurrencyAmount	 	= LocalDistributionAmount.ReportAmount1.EnteredCurrencyAmount
								invoked.GLBaseAmount.ReportAmount2.EnteredCurrencyAmount	 	= LocalDistributionAmount.ReportAmount2.EnteredCurrencyAmount
								invoked.GLBaseAmount.ReportAmount3.EnteredCurrencyAmount	 	= LocalDistributionAmount.ReportAmount3.EnteredCurrencyAmount
								invoked.GLBaseAmount.ReportAmount4.EnteredCurrencyAmount		= LocalDistributionAmount.ReportAmount4.EnteredCurrencyAmount
								invoked.GLBaseAmount.ReportAmount5.EnteredCurrencyAmount		= LocalDistributionAmount.ReportAmount5.EnteredCurrencyAmount
								invoked.LocalExchangeDate										= CheckDate
								invoked.LocalCurrencyTable										= PayablesInvoice.CurrencyTable
								invoked.LocalControlDocumentNumber								= PrmControlDocumentNumber
								invoked.LocalDocumentNumber										= PrmControlDocumentNumber


					if (PrmVoidDate entered)
						LocalTotalDistributionAmount.CurrencyAmount								-= LocalDistributionAmount.CurrencyAmount
						LocalTotalDistributionAmount.FunctionalAmount.EnteredCurrencyAmount		-= LocalDistributionAmount.FunctionalAmount.EnteredCurrencyAmount
						LocalTotalDistributionAmount.AlternateAmount.EnteredCurrencyAmount		-= LocalDistributionAmount.AlternateAmount.EnteredCurrencyAmount
						LocalTotalDistributionAmount.AlternateAmount2.EnteredCurrencyAmount		-= LocalDistributionAmount.AlternateAmount2.EnteredCurrencyAmount
						LocalTotalDistributionAmount.AlternateAmount3.EnteredCurrencyAmount		-= LocalDistributionAmount.AlternateAmount3.EnteredCurrencyAmount
						LocalTotalDistributionAmount.ToFunctionalAmount.EnteredCurrencyAmount	-= LocalDistributionAmount.ToFunctionalAmount.EnteredCurrencyAmount
						LocalTotalDistributionAmount.ReportAmount1.EnteredCurrencyAmount		-= LocalDistributionAmount.ReportAmount1.EnteredCurrencyAmount
						LocalTotalDistributionAmount.ReportAmount2.EnteredCurrencyAmount		-= LocalDistributionAmount.ReportAmount2.EnteredCurrencyAmount
						LocalTotalDistributionAmount.ReportAmount3.EnteredCurrencyAmount		-= LocalDistributionAmount.ReportAmount3.EnteredCurrencyAmount
						LocalTotalDistributionAmount.ReportAmount4.EnteredCurrencyAmount		-= LocalDistributionAmount.ReportAmount4.EnteredCurrencyAmount
						LocalTotalDistributionAmount.ReportAmount5.EnteredCurrencyAmount		-= LocalDistributionAmount.ReportAmount5.EnteredCurrencyAmount
					else
						LocalTotalDistributionAmount.CurrencyAmount								+= LocalDistributionAmount.CurrencyAmount
						LocalTotalDistributionAmount.FunctionalAmount.EnteredCurrencyAmount		+= LocalDistributionAmount.FunctionalAmount.EnteredCurrencyAmount
						LocalTotalDistributionAmount.AlternateAmount.EnteredCurrencyAmount		+= LocalDistributionAmount.AlternateAmount.EnteredCurrencyAmount
						LocalTotalDistributionAmount.AlternateAmount2.EnteredCurrencyAmount		+= LocalDistributionAmount.AlternateAmount2.EnteredCurrencyAmount
						LocalTotalDistributionAmount.AlternateAmount3.EnteredCurrencyAmount		+= LocalDistributionAmount.AlternateAmount3.EnteredCurrencyAmount
						LocalTotalDistributionAmount.ToFunctionalAmount.EnteredCurrencyAmount	+= LocalDistributionAmount.ToFunctionalAmount.EnteredCurrencyAmount
						LocalTotalDistributionAmount.ReportAmount1.EnteredCurrencyAmount		+= LocalDistributionAmount.ReportAmount1.EnteredCurrencyAmount
						LocalTotalDistributionAmount.ReportAmount2.EnteredCurrencyAmount		+= LocalDistributionAmount.ReportAmount2.EnteredCurrencyAmount
						LocalTotalDistributionAmount.ReportAmount3.EnteredCurrencyAmount		+= LocalDistributionAmount.ReportAmount3.EnteredCurrencyAmount
						LocalTotalDistributionAmount.ReportAmount4.EnteredCurrencyAmount		+= LocalDistributionAmount.ReportAmount4.EnteredCurrencyAmount
						LocalTotalDistributionAmount.ReportAmount5.EnteredCurrencyAmount		+= LocalDistributionAmount.ReportAmount5.EnteredCurrencyAmount

		UsePayablesFundApplyDistributions 
			for each PayablesFundApplyDistributionRel 

				initialize LocalCalculatePayablesFinanceStructure
				LocalCalculatePayablesFinanceStructure.InputPayablesCompany					= Company
				LocalCalculatePayablesFinanceStructure.InputPayablesInvoice					= PayablesInvoice
				LocalCalculatePayablesFinanceStructure.InputPayablesInvoiceDistribution		= each.OriginalPayablesInvoiceDistribution
				LocalCalculatePayablesFinanceStructure.InputPayablesFinanceStructureType	= PayablesFinanceStructureType.ExpenseAccrual
				LocalCalculatePayablesFinanceStructure.InputFinanceCodeBlock				= PayablesAccrualCodeDetailRel.DistributionAccount

				LocalAnswer = LocalCalculatePayablesFinanceStructure.CalculatePayablesFinanceStructure

				initialize LocalDistributionAmount

				LocalDistributionAmount.CurrencyAmount								= each.DistributionAmount.CurrencyAmount
				LocalDistributionAmount.FunctionalAmount.EnteredCurrencyAmount		= each.DistributionAmount.FunctionalAmount.EnteredCurrencyAmount
				LocalDistributionAmount.AlternateAmount.EnteredCurrencyAmount		= each.DistributionAmount.AlternateAmount.EnteredCurrencyAmount
				LocalDistributionAmount.AlternateAmount2.EnteredCurrencyAmount		= each.DistributionAmount.AlternateAmount2.EnteredCurrencyAmount
				LocalDistributionAmount.AlternateAmount3.EnteredCurrencyAmount		= each.DistributionAmount.AlternateAmount3.EnteredCurrencyAmount
				LocalDistributionAmount.ToFunctionalAmount.EnteredCurrencyAmount	= each.DistributionAmount.ToFunctionalAmount.EnteredCurrencyAmount
				LocalDistributionAmount.ToAlternateAmount.EnteredCurrencyAmount		= each.DistributionAmount.ToAlternateAmount.EnteredCurrencyAmount
				LocalDistributionAmount.ToAlternateAmount2.EnteredCurrencyAmount	= each.DistributionAmount.ToAlternateAmount2.EnteredCurrencyAmount
				LocalDistributionAmount.ToAlternateAmount3.EnteredCurrencyAmount	= each.DistributionAmount.ToAlternateAmount3.EnteredCurrencyAmount
				LocalDistributionAmount.ProjectAmount.EnteredCurrencyAmount			= each.DistributionAmount.ProjectAmount.EnteredCurrencyAmount
				LocalDistributionAmount.ReportAmount1.EnteredCurrencyAmount			= each.DistributionAmount.ReportAmount1.EnteredCurrencyAmount
				LocalDistributionAmount.ReportAmount2.EnteredCurrencyAmount			= each.DistributionAmount.ReportAmount2.EnteredCurrencyAmount
				LocalDistributionAmount.ReportAmount3.EnteredCurrencyAmount			= each.DistributionAmount.ReportAmount3.EnteredCurrencyAmount
				LocalDistributionAmount.ReportAmount4.EnteredCurrencyAmount			= each.DistributionAmount.ReportAmount4.EnteredCurrencyAmount
				LocalDistributionAmount.ReportAmount5.EnteredCurrencyAmount			= each.DistributionAmount.ReportAmount5.EnteredCurrencyAmount




				LocalNumberOfDecimals	= GeneralLedgerCompanyRel.AccountingEntity.FunctionalCurrency.NumberOfDecimals
				round LocalDistributionAmount.FunctionalAmount.EnteredCurrencyAmount to nearest DerivedLocalRoundTo
				LocalNumberOfDecimals	= GeneralLedgerCompanyRel.AccountingEntity.AlternateCurrency.NumberOfDecimals
				round LocalDistributionAmount.AlternateAmount.EnteredCurrencyAmount to nearest DerivedLocalRoundTo
				LocalNumberOfDecimals	= GeneralLedgerCompanyRel.AccountingEntity.AlternateCurrency2.NumberOfDecimals
				round LocalDistributionAmount.AlternateAmount2.EnteredCurrencyAmount to nearest DerivedLocalRoundTo
				LocalNumberOfDecimals	= GeneralLedgerCompanyRel.AccountingEntity.AlternateCurrency3.NumberOfDecimals
				round LocalDistributionAmount.AlternateAmount3.EnteredCurrencyAmount to nearest DerivedLocalRoundTo
				LocalNumberOfDecimals	= each.DistributionAccount.ToAccountingEntity.FunctionalCurrency.NumberOfDecimals
				round LocalDistributionAmount.ToFunctionalAmount.EnteredCurrencyAmount to nearest DerivedLocalRoundTo
				LocalNumberOfDecimals	= each.DistributionAccount.ToAccountingEntity.AlternateCurrency.NumberOfDecimals
				round LocalDistributionAmount.ToAlternateAmount.EnteredCurrencyAmount to nearest DerivedLocalRoundTo
				LocalNumberOfDecimals	= each.DistributionAccount.ToAccountingEntity.AlternateCurrency2.NumberOfDecimals
				round LocalDistributionAmount.ToAlternateAmount2.EnteredCurrencyAmount to nearest DerivedLocalRoundTo
				LocalNumberOfDecimals	= each.DistributionAccount.ToAccountingEntity.AlternateCurrency3.NumberOfDecimals
				round LocalDistributionAmount.ToAlternateAmount3.EnteredCurrencyAmount to nearest DerivedLocalRoundTo
				LocalNumberOfDecimals	= each.DistributionAccount.Project.Currency.NumberOfDecimals
				round LocalDistributionAmount.ProjectAmount.EnteredCurrencyAmount to nearest DerivedLocalRoundTo
				LocalNumberOfDecimals	= GeneralLedgerCompanyRel.FinanceEnterpriseGroup.ReportCurrencyOne.NumberOfDecimals
				round LocalDistributionAmount.ReportAmount1.EnteredCurrencyAmount to nearest DerivedLocalRoundTo
				LocalNumberOfDecimals	= GeneralLedgerCompanyRel.FinanceEnterpriseGroup.ReportCurrencyTwo.NumberOfDecimals
				round LocalDistributionAmount.ReportAmount2.EnteredCurrencyAmount to nearest DerivedLocalRoundTo
				LocalNumberOfDecimals	= GeneralLedgerCompanyRel.FinanceEnterpriseGroup.ReportCurrencyThree.NumberOfDecimals
				round LocalDistributionAmount.ReportAmount3.EnteredCurrencyAmount to nearest DerivedLocalRoundTo
				LocalNumberOfDecimals	= GeneralLedgerCompanyRel.FinanceEnterpriseGroup.ReportCurrencyFour.NumberOfDecimals
				round LocalDistributionAmount.ReportAmount4.EnteredCurrencyAmount to nearest DerivedLocalRoundTo
				LocalNumberOfDecimals	= GeneralLedgerCompanyRel.FinanceEnterpriseGroup.ReportCurrencyFive.NumberOfDecimals
				round LocalDistributionAmount.ReportAmount5.EnteredCurrencyAmount to nearest DerivedLocalRoundTo

				LocalDistributionCount += 1


				if (LocalDistributionCount < LocalNumberOfDistributions)
					if (PrmVoidDate entered)
						NegativeFinanceCurrencyAmountGroup = LocalDistributionAmount
						LocalBoolean = NegativeFinanceCurrencyAmountGroup.PerformCalculation
						LocalDistributionAmount = NegativeFinanceCurrencyAmountGroup
					else
						LocalDistributionAmount = LocalDistributionAmount
				else						
					if (PrmVoidDate entered)
						NegativeFinanceCurrencyAmountGroup = LocalTotalDistributionAmount
						LocalBoolean = NegativeFinanceCurrencyAmountGroup.PerformCalculation
						LocalDistributionAmount = NegativeFinanceCurrencyAmountGroup
					else
						LocalDistributionAmount = LocalTotalDistributionAmount

				invoke CreateFromBatchNoParms PayablesInvoiceDistribution
					invoked.CreateAlternateGLTransDetail = true
					if (PrmVoidDate entered)
						invoked.GLTPostingDate = PrmVoidDate
						invoked.DistributionDate = PrmVoidDate
						invoked.GLTGeneralLedgerEvent = "VP"
					else
						if (PrmPostDate entered)
							invoked.GLTPostingDate = PrmPostDate
							invoked.DistributionDate = PrmPostDate
						else
							invoked.GLTPostingDate = CheckDate
							invoked.DistributionDate = CheckDate
						invoked.GLTGeneralLedgerEvent = "AP"
					invoked.DistributionAmount = LocalDistributionAmount
					invoked.GLTTransactionDate = CheckDate
					invoked.GLTCurrencyCode = InvoiceCurrency
					invoked.Company = Company
					invoked.PayablesInvoice = PayablesInvoice
					invoked.DistributionType = PayablesDistributionType.PaymentAccrual
					invoked.PostingOption = "S"
					invoked.Status = 1
					invoked.GLTControlDocumentNumber = PrmControlDocumentNumber
					invoked.GLTDocumentNumber = PrmControlDocumentNumber
					invoked.Description = PrmDescription
					invoked.DistributionReference = PrmReference
					invoked.InvoiceCurrency = InvoiceCurrency
					invoked.DistributionAmount.ExchangeDate = PayablesInvoice.InvoiceDate
					invoked.DistributionAmount.KeepRateAndAmount = true
					invoked.GLFinanceCodeBlock		= LocalCalculatePayablesFinanceStructure.OutputFinanceCodeBlock
					invoked.DistributionAccount		= LocalCalculatePayablesFinanceStructure.OutputFinanceCodeBlock
					invoked.GLTTransactionCodeBlock	= LocalCalculatePayablesFinanceStructure.OutputFinanceCodeBlock
					invoked.GLTJournalizeGroup		= PrmJournalizeGroup
					invoked.BypassActiveCodeBlockEdit 		= true		


				if (PrmVoidDate entered)
					LocalTotalDistributionAmount.CurrencyAmount								+= LocalDistributionAmount.CurrencyAmount
					LocalTotalDistributionAmount.FunctionalAmount.EnteredCurrencyAmount		+= LocalDistributionAmount.FunctionalAmount.EnteredCurrencyAmount
					LocalTotalDistributionAmount.AlternateAmount.EnteredCurrencyAmount		+= LocalDistributionAmount.AlternateAmount.EnteredCurrencyAmount
					LocalTotalDistributionAmount.AlternateAmount2.EnteredCurrencyAmount		+= LocalDistributionAmount.AlternateAmount2.EnteredCurrencyAmount
					LocalTotalDistributionAmount.AlternateAmount3.EnteredCurrencyAmount		+= LocalDistributionAmount.AlternateAmount3.EnteredCurrencyAmount
					LocalTotalDistributionAmount.ToFunctionalAmount.EnteredCurrencyAmount	+= LocalDistributionAmount.ToFunctionalAmount.EnteredCurrencyAmount
					LocalTotalDistributionAmount.ReportAmount1.EnteredCurrencyAmount		+= LocalDistributionAmount.ReportAmount1.EnteredCurrencyAmount
					LocalTotalDistributionAmount.ReportAmount2.EnteredCurrencyAmount		+= LocalDistributionAmount.ReportAmount2.EnteredCurrencyAmount
					LocalTotalDistributionAmount.ReportAmount3.EnteredCurrencyAmount		+= LocalDistributionAmount.ReportAmount3.EnteredCurrencyAmount
					LocalTotalDistributionAmount.ReportAmount4.EnteredCurrencyAmount		+= LocalDistributionAmount.ReportAmount4.EnteredCurrencyAmount
					LocalTotalDistributionAmount.ReportAmount5.EnteredCurrencyAmount		+= LocalDistributionAmount.ReportAmount5.EnteredCurrencyAmount
				else
					LocalTotalDistributionAmount.CurrencyAmount								-= LocalDistributionAmount.CurrencyAmount
					LocalTotalDistributionAmount.FunctionalAmount.EnteredCurrencyAmount		-= LocalDistributionAmount.FunctionalAmount.EnteredCurrencyAmount
					LocalTotalDistributionAmount.AlternateAmount.EnteredCurrencyAmount		-= LocalDistributionAmount.AlternateAmount.EnteredCurrencyAmount
					LocalTotalDistributionAmount.AlternateAmount2.EnteredCurrencyAmount		-= LocalDistributionAmount.AlternateAmount2.EnteredCurrencyAmount
					LocalTotalDistributionAmount.AlternateAmount3.EnteredCurrencyAmount		-= LocalDistributionAmount.AlternateAmount3.EnteredCurrencyAmount
					LocalTotalDistributionAmount.ToFunctionalAmount.EnteredCurrencyAmount	-= LocalDistributionAmount.ToFunctionalAmount.EnteredCurrencyAmount
					LocalTotalDistributionAmount.ReportAmount1.EnteredCurrencyAmount		-= LocalDistributionAmount.ReportAmount1.EnteredCurrencyAmount
					LocalTotalDistributionAmount.ReportAmount2.EnteredCurrencyAmount		-= LocalDistributionAmount.ReportAmount2.EnteredCurrencyAmount
					LocalTotalDistributionAmount.ReportAmount3.EnteredCurrencyAmount		-= LocalDistributionAmount.ReportAmount3.EnteredCurrencyAmount
					LocalTotalDistributionAmount.ReportAmount4.EnteredCurrencyAmount		-= LocalDistributionAmount.ReportAmount4.EnteredCurrencyAmount
					LocalTotalDistributionAmount.ReportAmount5.EnteredCurrencyAmount		-= LocalDistributionAmount.ReportAmount5.EnteredCurrencyAmount



			initialize LocalTotalDistributionAmount
			if (CashCode.Currency = InvoiceCurrency)
				LocalTotalDistributionAmount	= NetPaymentAmount
			else
				LocalCurrencyTable = PayablesInvoice.CurrencyTable
				LocalCurrencyCalculationGroup.FinanceEnterpriseGroup = GeneralLedgerCompanyRel.FinanceEnterpriseGroup
				LocalCurrencyCalculationGroup.ExchangeDate = CheckDate
				LocalCurrencyCalculationGroup.FromCurrency = CashCode.Currency
				LocalCurrencyCalculationGroup.FunctionalAmount.ToCurrency = GeneralLedgerCompanyRel.AccountingEntity.FunctionalCurrency
				LocalCurrencyCalculationGroup.AlternateAmount.ToCurrency = GeneralLedgerCompanyRel.AccountingEntity.AlternateCurrency
				LocalCurrencyCalculationGroup.AlternateAmount2.ToCurrency = GeneralLedgerCompanyRel.AccountingEntity.AlternateCurrency2
				LocalCurrencyCalculationGroup.AlternateAmount3.ToCurrency = GeneralLedgerCompanyRel.AccountingEntity.AlternateCurrency3
				LocalCurrencyCalculationGroup.ReportAmount1.ToCurrency = GeneralLedgerCompanyRel.FinanceEnterpriseGroup.ReportCurrencyOne
				LocalCurrencyCalculationGroup.ReportAmount2.ToCurrency = GeneralLedgerCompanyRel.FinanceEnterpriseGroup.ReportCurrencyTwo
				LocalCurrencyCalculationGroup.ReportAmount3.ToCurrency = GeneralLedgerCompanyRel.FinanceEnterpriseGroup.ReportCurrencyThree
				LocalCurrencyCalculationGroup.ReportAmount4.ToCurrency = GeneralLedgerCompanyRel.FinanceEnterpriseGroup.ReportCurrencyFour
				LocalCurrencyCalculationGroup.ReportAmount5.ToCurrency = GeneralLedgerCompanyRel.FinanceEnterpriseGroup.ReportCurrencyFive
				LocalCashCodePaymentAmount.CurrencyAmount = BankCheckAmount
				LocalCashCodePaymentAmount.FunctionalAmount.EnteredCurrencyAmount = LocalCurrencyCalculationGroup.FunctionalAmount.OutputCurrencyAmount
				LocalCashCodePaymentAmount.FunctionalAmount.EnteredCurrencyRate = LocalCurrencyCalculationGroup.FunctionalAmount.OutputCurrencyRate
				if (GeneralLedgerCompanyRel.AccountingEntity.AlternateCurrency entered)
					LocalCashCodePaymentAmount.AlternateAmount.EnteredCurrencyAmount = LocalCurrencyCalculationGroup.AlternateAmount.OutputCurrencyAmount
					LocalCashCodePaymentAmount.AlternateAmount.EnteredCurrencyRate = LocalCurrencyCalculationGroup.AlternateAmount.OutputCurrencyRate
				if (GeneralLedgerCompanyRel.AccountingEntity.AlternateCurrency2 entered)
					LocalCashCodePaymentAmount.AlternateAmount2.EnteredCurrencyAmount = LocalCurrencyCalculationGroup.AlternateAmount2.OutputCurrencyAmount
					LocalCashCodePaymentAmount.AlternateAmount2.EnteredCurrencyRate = LocalCurrencyCalculationGroup.AlternateAmount2.OutputCurrencyRate
				if (GeneralLedgerCompanyRel.AccountingEntity.AlternateCurrency3 entered)
					LocalCashCodePaymentAmount.AlternateAmount3.EnteredCurrencyAmount = LocalCurrencyCalculationGroup.AlternateAmount3.OutputCurrencyAmount
					LocalCashCodePaymentAmount.AlternateAmount3.EnteredCurrencyRate = LocalCurrencyCalculationGroup.AlternateAmount3.OutputCurrencyRate
				if (GeneralLedgerCompanyRel.FinanceEnterpriseGroup.ReportCurrencyOne entered)
					LocalCashCodePaymentAmount.ReportAmount1.EnteredCurrencyAmount = LocalCurrencyCalculationGroup.ReportAmount1.OutputCurrencyAmount
					LocalCashCodePaymentAmount.ReportAmount1.EnteredCurrencyRate = LocalCurrencyCalculationGroup.ReportAmount1.OutputCurrencyRate
				if (GeneralLedgerCompanyRel.FinanceEnterpriseGroup.ReportCurrencyTwo entered)
					LocalCashCodePaymentAmount.ReportAmount2.EnteredCurrencyAmount = LocalCurrencyCalculationGroup.ReportAmount2.OutputCurrencyAmount
					LocalCashCodePaymentAmount.ReportAmount2.EnteredCurrencyRate = LocalCurrencyCalculationGroup.ReportAmount2.OutputCurrencyRate
				if (GeneralLedgerCompanyRel.FinanceEnterpriseGroup.ReportCurrencyThree entered)
					LocalCashCodePaymentAmount.ReportAmount3.EnteredCurrencyAmount = LocalCurrencyCalculationGroup.ReportAmount3.OutputCurrencyAmount
					LocalCashCodePaymentAmount.ReportAmount3.EnteredCurrencyRate = LocalCurrencyCalculationGroup.ReportAmount3.OutputCurrencyRate
				if (GeneralLedgerCompanyRel.FinanceEnterpriseGroup.ReportCurrencyFour entered)
					LocalCashCodePaymentAmount.ReportAmount4.EnteredCurrencyAmount = LocalCurrencyCalculationGroup.ReportAmount4.OutputCurrencyAmount
					LocalCashCodePaymentAmount.ReportAmount4.EnteredCurrencyRate = LocalCurrencyCalculationGroup.ReportAmount4.OutputCurrencyRate
				if (GeneralLedgerCompanyRel.FinanceEnterpriseGroup.ReportCurrencyFive entered)
					LocalCashCodePaymentAmount.ReportAmount5.EnteredCurrencyAmount = LocalCurrencyCalculationGroup.ReportAmount5.OutputCurrencyAmount
					LocalCashCodePaymentAmount.ReportAmount5.EnteredCurrencyRate = LocalCurrencyCalculationGroup.ReportAmount5.OutputCurrencyRate
				LocalTotalDistributionAmount = LocalCashCodePaymentAmount
			
			if (PrmAmendedReallocation)			
				initialize LocalTotalDistributionAmount 
			initialize LocalDistributionCount
			for each PayablesFundApplyDistributionRel

				initialize LocalCalculatePayablesFinanceStructure
				LocalCalculatePayablesFinanceStructure.InputPayablesCompany					= Company
				LocalCalculatePayablesFinanceStructure.InputPayablesInvoice					= PayablesInvoice
				LocalCalculatePayablesFinanceStructure.InputPayablesInvoiceDistribution		= each.OriginalPayablesInvoiceDistribution
				LocalCalculatePayablesFinanceStructure.InputPayablesFinanceStructureType	= PayablesDistributionType.Payment
				LocalCalculatePayablesFinanceStructure.InputFinanceCodeBlock				= CompanyCashCodeRel.CashAccount

				LocalAnswer = LocalCalculatePayablesFinanceStructure.CalculatePayablesFinanceStructure

				initialize LocalDistributionAmount

				LocalDistributionAmount.CurrencyAmount								= each.DistributionAmount.CurrencyAmount
				LocalDistributionAmount.FunctionalAmount.EnteredCurrencyAmount		= each.DistributionAmount.FunctionalAmount.EnteredCurrencyAmount
				LocalDistributionAmount.AlternateAmount.EnteredCurrencyAmount		= each.DistributionAmount.AlternateAmount.EnteredCurrencyAmount
				LocalDistributionAmount.AlternateAmount2.EnteredCurrencyAmount		= each.DistributionAmount.AlternateAmount2.EnteredCurrencyAmount
				LocalDistributionAmount.AlternateAmount3.EnteredCurrencyAmount		= each.DistributionAmount.AlternateAmount3.EnteredCurrencyAmount
				LocalDistributionAmount.ToFunctionalAmount.EnteredCurrencyAmount	= each.DistributionAmount.ToFunctionalAmount.EnteredCurrencyAmount
				LocalDistributionAmount.ToAlternateAmount.EnteredCurrencyAmount		= each.DistributionAmount.ToAlternateAmount.EnteredCurrencyAmount
				LocalDistributionAmount.ToAlternateAmount2.EnteredCurrencyAmount	= each.DistributionAmount.ToAlternateAmount2.EnteredCurrencyAmount
				LocalDistributionAmount.ToAlternateAmount3.EnteredCurrencyAmount	= each.DistributionAmount.ToAlternateAmount3.EnteredCurrencyAmount
				LocalDistributionAmount.ProjectAmount.EnteredCurrencyAmount			= each.DistributionAmount.ProjectAmount.EnteredCurrencyAmount
				LocalDistributionAmount.ReportAmount1.EnteredCurrencyAmount			= each.DistributionAmount.ReportAmount1.EnteredCurrencyAmount
				LocalDistributionAmount.ReportAmount2.EnteredCurrencyAmount			= each.DistributionAmount.ReportAmount2.EnteredCurrencyAmount
				LocalDistributionAmount.ReportAmount3.EnteredCurrencyAmount			= each.DistributionAmount.ReportAmount3.EnteredCurrencyAmount
				LocalDistributionAmount.ReportAmount4.EnteredCurrencyAmount			= each.DistributionAmount.ReportAmount4.EnteredCurrencyAmount
				LocalDistributionAmount.ReportAmount5.EnteredCurrencyAmount			= each.DistributionAmount.ReportAmount5.EnteredCurrencyAmount

				if (NetPaymentAmount.CurrencyAmount = 0)
					LocalDistributionAmount.CurrencyAmount 								= 0
					LocalDistributionAmount.FunctionalAmount.EnteredCurrencyAmount 		= 0
					LocalDistributionAmount.AlternateAmount.EnteredCurrencyAmount 		= 0	
					LocalDistributionAmount.AlternateAmount2.EnteredCurrencyAmount 		= 0	
					LocalDistributionAmount.AlternateAmount3.EnteredCurrencyAmount 		= 0	
					LocalDistributionAmount.ToFunctionalAmount.EnteredCurrencyAmount 	= 0	
					LocalDistributionAmount.ToAlternateAmount.EnteredCurrencyAmount 	= 0
					LocalDistributionAmount.ToAlternateAmount2.EnteredCurrencyAmount 	= 0	
					LocalDistributionAmount.ToAlternateAmount3.EnteredCurrencyAmount 	= 0	
					LocalDistributionAmount.ProjectAmount.EnteredCurrencyAmount 		= 0	
					LocalDistributionAmount.ReportAmount1.EnteredCurrencyAmount 		= 0	
					LocalDistributionAmount.ReportAmount2.EnteredCurrencyAmount 		= 0	
					LocalDistributionAmount.ReportAmount3.EnteredCurrencyAmount 		= 0	
					LocalDistributionAmount.ReportAmount4.EnteredCurrencyAmount 		= 0	
					LocalDistributionAmount.ReportAmount5.EnteredCurrencyAmount 		= 0	
				



				LocalNumberOfDecimals	= GeneralLedgerCompanyRel.AccountingEntity.FunctionalCurrency.NumberOfDecimals
				round LocalDistributionAmount.FunctionalAmount.EnteredCurrencyAmount to nearest DerivedLocalRoundTo
				LocalNumberOfDecimals	= GeneralLedgerCompanyRel.AccountingEntity.AlternateCurrency.NumberOfDecimals
				round LocalDistributionAmount.AlternateAmount.EnteredCurrencyAmount to nearest DerivedLocalRoundTo
				LocalNumberOfDecimals	= GeneralLedgerCompanyRel.AccountingEntity.AlternateCurrency2.NumberOfDecimals
				round LocalDistributionAmount.AlternateAmount2.EnteredCurrencyAmount to nearest DerivedLocalRoundTo
				LocalNumberOfDecimals	= GeneralLedgerCompanyRel.AccountingEntity.AlternateCurrency3.NumberOfDecimals
				round LocalDistributionAmount.AlternateAmount3.EnteredCurrencyAmount to nearest DerivedLocalRoundTo
				LocalNumberOfDecimals	= each.DistributionAccount.ToAccountingEntity.FunctionalCurrency.NumberOfDecimals
				round LocalDistributionAmount.ToFunctionalAmount.EnteredCurrencyAmount to nearest DerivedLocalRoundTo
				LocalNumberOfDecimals	= each.DistributionAccount.ToAccountingEntity.AlternateCurrency.NumberOfDecimals
				round LocalDistributionAmount.ToAlternateAmount.EnteredCurrencyAmount to nearest DerivedLocalRoundTo
				LocalNumberOfDecimals	= each.DistributionAccount.ToAccountingEntity.AlternateCurrency2.NumberOfDecimals
				round LocalDistributionAmount.ToAlternateAmount2.EnteredCurrencyAmount to nearest DerivedLocalRoundTo
				LocalNumberOfDecimals	= each.DistributionAccount.ToAccountingEntity.AlternateCurrency3.NumberOfDecimals
				round LocalDistributionAmount.ToAlternateAmount3.EnteredCurrencyAmount to nearest DerivedLocalRoundTo
				LocalNumberOfDecimals	= each.DistributionAccount.Project.Currency.NumberOfDecimals
				round LocalDistributionAmount.ProjectAmount.EnteredCurrencyAmount to nearest DerivedLocalRoundTo
				LocalNumberOfDecimals	= GeneralLedgerCompanyRel.FinanceEnterpriseGroup.ReportCurrencyOne.NumberOfDecimals
				round LocalDistributionAmount.ReportAmount1.EnteredCurrencyAmount to nearest DerivedLocalRoundTo
				LocalNumberOfDecimals	= GeneralLedgerCompanyRel.FinanceEnterpriseGroup.ReportCurrencyTwo.NumberOfDecimals
				round LocalDistributionAmount.ReportAmount2.EnteredCurrencyAmount to nearest DerivedLocalRoundTo
				LocalNumberOfDecimals	= GeneralLedgerCompanyRel.FinanceEnterpriseGroup.ReportCurrencyThree.NumberOfDecimals
				round LocalDistributionAmount.ReportAmount3.EnteredCurrencyAmount to nearest DerivedLocalRoundTo
				LocalNumberOfDecimals	= GeneralLedgerCompanyRel.FinanceEnterpriseGroup.ReportCurrencyFour.NumberOfDecimals
				round LocalDistributionAmount.ReportAmount4.EnteredCurrencyAmount to nearest DerivedLocalRoundTo
				LocalNumberOfDecimals	= GeneralLedgerCompanyRel.FinanceEnterpriseGroup.ReportCurrencyFive.NumberOfDecimals
				round LocalDistributionAmount.ReportAmount5.EnteredCurrencyAmount to nearest DerivedLocalRoundTo

				LocalDistributionCount += 1


				initialize LocalCashCodePaymentAmount
				LocalCurrencyTable = PayablesInvoice.CurrencyTable
				LocalCurrencyCalculationGroup.FinanceEnterpriseGroup = GeneralLedgerCompanyRel.FinanceEnterpriseGroup
				LocalCurrencyCalculationGroup.ExchangeDate = CheckDate
				LocalCurrencyCalculationGroup.FromCurrency = CashCode.Currency
				LocalCurrencyCalculationGroup.FunctionalAmount.ToCurrency = GeneralLedgerCompanyRel.AccountingEntity.FunctionalCurrency
				LocalCurrencyCalculationGroup.AlternateAmount.ToCurrency = GeneralLedgerCompanyRel.AccountingEntity.AlternateCurrency
				LocalCurrencyCalculationGroup.AlternateAmount2.ToCurrency = GeneralLedgerCompanyRel.AccountingEntity.AlternateCurrency2
				LocalCurrencyCalculationGroup.AlternateAmount3.ToCurrency = GeneralLedgerCompanyRel.AccountingEntity.AlternateCurrency3
				LocalCurrencyCalculationGroup.ToFunctionalAmount.ToCurrency = each.DistributionAccount.ToAccountingEntity.FunctionalCurrency
				LocalCurrencyCalculationGroup.ToAlternateAmount.ToCurrency = each.DistributionAccount.ToAccountingEntity.AlternateCurrency
				LocalCurrencyCalculationGroup.ToAlternateAmount2.ToCurrency = each.DistributionAccount.ToAccountingEntity.AlternateCurrency2
				LocalCurrencyCalculationGroup.ToAlternateAmount3.ToCurrency = each.DistributionAccount.ToAccountingEntity.AlternateCurrency3
				LocalCurrencyCalculationGroup.ReportAmount1.ToCurrency = GeneralLedgerCompanyRel.FinanceEnterpriseGroup.ReportCurrencyOne
				LocalCurrencyCalculationGroup.ReportAmount2.ToCurrency = GeneralLedgerCompanyRel.FinanceEnterpriseGroup.ReportCurrencyTwo
				LocalCurrencyCalculationGroup.ReportAmount3.ToCurrency = GeneralLedgerCompanyRel.FinanceEnterpriseGroup.ReportCurrencyThree
				LocalCurrencyCalculationGroup.ReportAmount4.ToCurrency = GeneralLedgerCompanyRel.FinanceEnterpriseGroup.ReportCurrencyFour
				LocalCurrencyCalculationGroup.ReportAmount5.ToCurrency = GeneralLedgerCompanyRel.FinanceEnterpriseGroup.ReportCurrencyFive
				LocalExchangeDate = CheckDate
				LocalCashCodePaymentExchange.TransactionAmount = (each.DistributionAmount.CurrencyAmount)
				LocalCashCodePaymentExchange.BaseAmount.ToCurrency = CashCode.Currency
				if (PrmVoidDate entered)
					LocalCashCodePaymentExchange.BaseAmount.EnteredCurrencyRate = (BankCheckAmount / NetPaymentAmount.CurrencyAmount)
				else
					if (InvoiceCurrency = CashRequirementsResult.InvoiceCurrency
					and CashCode 		= CashRequirementsResult.CashCode
					and CashRequirementsResult.OverridePaymentRate entered)
						LocalCashCodePaymentExchange.BaseAmount.EnteredCurrencyRate = CashRequirementsResult.OverridePaymentRate 
				OldPaymentAmount = LocalCashCodePaymentExchange.BaseAmount.OutputCurrencyAmount
				LocalCurrencyCalculationGroup.CurrencyAmount = OldPaymentAmount
				LocalCashCodePaymentAmount.CurrencyAmount = OldPaymentAmount
				LocalCashCodePaymentAmount.FunctionalAmount.EnteredCurrencyAmount = LocalCurrencyCalculationGroup.FunctionalAmount.OutputCurrencyAmount
				LocalCashCodePaymentAmount.FunctionalAmount.EnteredCurrencyRate = LocalCurrencyCalculationGroup.FunctionalAmount.OutputCurrencyRate
				if (GeneralLedgerCompanyRel.AccountingEntity.AlternateCurrency entered)
					LocalCashCodePaymentAmount.AlternateAmount.EnteredCurrencyAmount = LocalCurrencyCalculationGroup.AlternateAmount.OutputCurrencyAmount
					LocalCashCodePaymentAmount.AlternateAmount.EnteredCurrencyRate = LocalCurrencyCalculationGroup.AlternateAmount.OutputCurrencyRate
				if (GeneralLedgerCompanyRel.AccountingEntity.AlternateCurrency2 entered)
					LocalCashCodePaymentAmount.AlternateAmount2.EnteredCurrencyAmount = LocalCurrencyCalculationGroup.AlternateAmount2.OutputCurrencyAmount
					LocalCashCodePaymentAmount.AlternateAmount2.EnteredCurrencyRate = LocalCurrencyCalculationGroup.AlternateAmount2.OutputCurrencyRate
				if (GeneralLedgerCompanyRel.AccountingEntity.AlternateCurrency3 entered)
					LocalCashCodePaymentAmount.AlternateAmount3.EnteredCurrencyAmount = LocalCurrencyCalculationGroup.AlternateAmount3.OutputCurrencyAmount
					LocalCashCodePaymentAmount.AlternateAmount3.EnteredCurrencyRate = LocalCurrencyCalculationGroup.AlternateAmount3.OutputCurrencyRate
				if (GeneralLedgerCompanyRel.AccountingEntity != each.DistributionAccount.ToAccountingEntity)
					LocalCashCodePaymentAmount.ToFunctionalAmount.EnteredCurrencyAmount = LocalCurrencyCalculationGroup.ToFunctionalAmount.OutputCurrencyAmount
					LocalCashCodePaymentAmount.ToFunctionalAmount.EnteredCurrencyRate = LocalCurrencyCalculationGroup.ToFunctionalAmount.OutputCurrencyRate
				if (each.DistributionAccount.ToAccountingEntity.AlternateCurrency entered)
					LocalCashCodePaymentAmount.ToAlternateAmount.EnteredCurrencyAmount = LocalCurrencyCalculationGroup.ToAlternateAmount.OutputCurrencyAmount
					LocalCashCodePaymentAmount.ToAlternateAmount.EnteredCurrencyRate = LocalCurrencyCalculationGroup.ToAlternateAmount.OutputCurrencyRate
				if (each.DistributionAccount.ToAccountingEntity.AlternateCurrency2 entered)
					LocalCashCodePaymentAmount.ToAlternateAmount2.EnteredCurrencyAmount = LocalCurrencyCalculationGroup.ToAlternateAmount2.OutputCurrencyAmount
					LocalCashCodePaymentAmount.ToAlternateAmount2.EnteredCurrencyRate = LocalCurrencyCalculationGroup.ToAlternateAmount2.OutputCurrencyRate
				if (each.DistributionAccount.ToAccountingEntity.AlternateCurrency3 entered)
					LocalCashCodePaymentAmount.ToAlternateAmount3.EnteredCurrencyAmount = LocalCurrencyCalculationGroup.ToAlternateAmount3.OutputCurrencyAmount
					LocalCashCodePaymentAmount.ToAlternateAmount3.EnteredCurrencyRate = LocalCurrencyCalculationGroup.ToAlternateAmount3.OutputCurrencyRate
				if (each.DistributionAccount.Project entered)
					LocalCashCodePaymentAmount.ProjectAmount.EnteredCurrencyAmount = LocalCurrencyCalculationGroup.ProjectAmount.OutputCurrencyAmount
					LocalCashCodePaymentAmount.ProjectAmount.EnteredCurrencyRate = LocalCurrencyCalculationGroup.ProjectAmount.OutputCurrencyRate
				if (GeneralLedgerCompanyRel.FinanceEnterpriseGroup.ReportCurrencyOne entered)
					LocalCashCodePaymentAmount.ReportAmount1.EnteredCurrencyAmount = LocalCurrencyCalculationGroup.ReportAmount1.OutputCurrencyAmount
					LocalCashCodePaymentAmount.ReportAmount1.EnteredCurrencyRate = LocalCurrencyCalculationGroup.ReportAmount1.OutputCurrencyRate
				if (GeneralLedgerCompanyRel.FinanceEnterpriseGroup.ReportCurrencyTwo entered)
					LocalCashCodePaymentAmount.ReportAmount2.EnteredCurrencyAmount = LocalCurrencyCalculationGroup.ReportAmount2.OutputCurrencyAmount
					LocalCashCodePaymentAmount.ReportAmount2.EnteredCurrencyRate = LocalCurrencyCalculationGroup.ReportAmount2.OutputCurrencyRate
				if (GeneralLedgerCompanyRel.FinanceEnterpriseGroup.ReportCurrencyThree entered)
					LocalCashCodePaymentAmount.ReportAmount3.EnteredCurrencyAmount = LocalCurrencyCalculationGroup.ReportAmount3.OutputCurrencyAmount
					LocalCashCodePaymentAmount.ReportAmount3.EnteredCurrencyRate = LocalCurrencyCalculationGroup.ReportAmount3.OutputCurrencyRate
				if (GeneralLedgerCompanyRel.FinanceEnterpriseGroup.ReportCurrencyFour entered)
					LocalCashCodePaymentAmount.ReportAmount4.EnteredCurrencyAmount = LocalCurrencyCalculationGroup.ReportAmount4.OutputCurrencyAmount
					LocalCashCodePaymentAmount.ReportAmount4.EnteredCurrencyRate = LocalCurrencyCalculationGroup.ReportAmount4.OutputCurrencyRate
				if (GeneralLedgerCompanyRel.FinanceEnterpriseGroup.ReportCurrencyFive entered)
					LocalCashCodePaymentAmount.ReportAmount5.EnteredCurrencyAmount = LocalCurrencyCalculationGroup.ReportAmount5.OutputCurrencyAmount
					LocalCashCodePaymentAmount.ReportAmount5.EnteredCurrencyRate = LocalCurrencyCalculationGroup.ReportAmount5.OutputCurrencyRate



				if (LocalDistributionCount < LocalNumberOfDistributions)
					if (PrmVoidDate not entered)
						NegativeFinanceCurrencyAmountGroup = LocalDistributionAmount
						LocalBoolean = NegativeFinanceCurrencyAmountGroup.PerformCalculation
						LocalDistributionAmount = NegativeFinanceCurrencyAmountGroup
					else
						LocalDistributionAmount = LocalDistributionAmount
				else						
					if (PrmVoidDate not entered)
						NegativeFinanceCurrencyAmountGroup = LocalTotalDistributionAmount
						LocalBoolean = NegativeFinanceCurrencyAmountGroup.PerformCalculation
						LocalDistributionAmount = NegativeFinanceCurrencyAmountGroup
					else
						LocalDistributionAmount = LocalTotalDistributionAmount

				if (PrmStaleDateAccount entered)
					LocalCalculatePayablesFinanceStructure.OutputFinanceCodeBlock.GeneralLedgerChartAccount = PrmStaleDateAccount.GeneralLedgerChartAccount

				invoke CreateFromBatchNoParms PayablesInvoiceDistribution
					invoked.CreateAlternateGLTransDetail = true
					if (PrmVoidDate entered)
						invoked.GLTPostingDate = PrmVoidDate
						invoked.DistributionDate = PrmVoidDate
						invoked.GLTGeneralLedgerEvent = "VP"
					else
						if (PrmPostDate entered)
							invoked.GLTPostingDate = PrmPostDate
							invoked.DistributionDate = PrmPostDate
						else
							invoked.GLTPostingDate = CheckDate
							invoked.DistributionDate = CheckDate
						invoked.GLTGeneralLedgerEvent = "AP"
					invoked.DistributionAmount = LocalDistributionAmount
					invoked.GLTTransactionDate = CheckDate
					invoked.GLTCurrencyCode = CashCode.Currency
					invoked.Company = Company
					invoked.PayablesInvoice = PayablesInvoice
					invoked.DistributionType = PayablesDistributionType.Payment
					invoked.PostingOption = "S"
					invoked.Status = 1
					invoked.GLTControlDocumentNumber = PrmControlDocumentNumber
					invoked.GLTDocumentNumber = PrmControlDocumentNumber
					invoked.Description = "Cash Disbursement"
					invoked.DistributionReference = PrmReference
					invoked.InvoiceCurrency = CashCode.Currency
					invoked.DistributionAmount.ExchangeDate = CheckDate
					invoked.GLFinanceCodeBlock		= LocalCalculatePayablesFinanceStructure.OutputFinanceCodeBlock
					invoked.DistributionAccount		= LocalCalculatePayablesFinanceStructure.OutputFinanceCodeBlock
					invoked.GLTTransactionCodeBlock	= LocalCalculatePayablesFinanceStructure.OutputFinanceCodeBlock
					invoked.GLTJournalizeGroup = PrmJournalizeGroup
					invoked.BypassActiveCodeBlockEdit 	= true		

				if (PrmStaleDateAccount !entered) 
					LocalToAccountingEntity	= LocalCalculatePayablesFinanceStructure.OutputFinanceCodeBlock.ToAccountingEntity
					if (GeneralLedgerCompanyRel.FinanceEnterpriseGroup.FundDimension.AccountingUnit)
						LocalAccountingUnit		= LocalCalculatePayablesFinanceStructure.OutputFinanceCodeBlock.AccountingUnit
					else
						LocalFinanceDimension1	= LocalCalculatePayablesFinanceStructure.OutputFinanceCodeBlock.FinanceDimension1

					if (PrmPaymentClose)
						invoke Create CashCodeFundConsolidatedUpdate
							invoked.CashManagementGroup		= GeneralLedgerCompanyRel.FinanceEnterpriseGroup
							invoked.PayGroup				= PayGroup
							invoked.CashCode				= CashCode
							invoked.AccountingEntity		= LocalToAccountingEntity
							invoked.AccountingUnit			= LocalAccountingUnit
							invoked.FinanceDimension1		= LocalFinanceDimension1
							invoked.PostedAmount			= LocalDistributionAmount.CurrencyAmount
					else
						if (CashCodeFundRel !exist)
							invoke Create CashCodeFundRel
								invoked.PostedAmount = LocalDistributionAmount.CurrencyAmount
						else
							invoke UpdatePostedAmount CashCodeFundRel
								invoked.PrmPostedAmount = LocalDistributionAmount.CurrencyAmount

#ifdef module cam						
					if(GeneralLedgerCompanyRel.FinanceEnterpriseGroup.CustodialAccountManagement)	
						LocalCustodialPosting	= LocalCalculatePayablesFinanceStructure.OutputFinanceCodeBlock.FinanceDimension10
						if (LocalCustodialPosting entered)
							constraint (CustodialDetailAmountRel exist)
								"<GeneralLedgerCompanyRel.FinanceEnterpriseGroup.FinanceDimension10Label>:_<LocalCustodialPosting>_MustBeSetupAS_A_CustodialAccount"
							if (Vendor != CustodialDetailAmountRel.CustodialAccountManagement.Vendor)
								constraint (LocalCustodialPosting.Expendable)
									"<GeneralLedgerCompanyRel.FinanceEnterpriseGroup.FinanceDimension10Label>:_<LocalCustodialPosting>_IsNotExpendable"
							if(CustodialAccountEditRel2 exists)
								LocalTitle = PayablesInvoicePayment.PaymentSequence+"_"+PayablesInvoice.Invoice
								invoke UpdateDisbursements CustodialDetailAmountRel
									invoked.PrmDisbursements = LocalDistributionAmount.CurrencyAmount * -1
								if (Vendor = CustodialDetailAmountRel.CustodialAccountManagement.Vendor)
									LocalActivityType = 10
								else
									LocalActivityType = 2
								if (CustodialActivityRel exists)
									invoke Update CustodialActivityRel
										invoked.Amount += LocalDistributionAmount.CurrencyAmount
								else
									invoke Create CustodialActivity
										invoked.FinanceEnterpriseGroup  		= GeneralLedgerCompanyRel.FinanceEnterpriseGroup
										invoked.CustodialCompany			 	= Company
										invoked.CustodialActivity.CustodialAccountManagement	 = CustodialDetailAmountRel.CustodialAccountManagement
										invoked.CustodialPosting			 	= LocalCustodialPosting
										if(PrmVoidDate entered)
											invoked.ActivityDate				 	= PrmVoidDate
											invoked.ActivityType 					= 6
											invoked.Description 				 	= "Stop/Void Payables Invoice Payment"
										else
											invoked.ActivityDate				 	= CheckDate
											invoked.ActivityType 					= LocalActivityType
											invoked.Description 				 	= "Payables Invoice Payment"												
										invoked.Amount						 	= LocalDistributionAmount.CurrencyAmount
										invoked.DocumentNumber				 	= PayablesInvoicePayment.PaymentSequence+"_"+PayablesInvoice.Invoice
										invoked.Vendor						 	= Vendor	
										invoked.PayablesInvoice				 	= PayablesInvoice
										invoked.PayablesInvoicePayment		 	= PayablesInvoicePayment
										invoked.CustodialCashCode			 	= CashCode
										invoked.CustodialTransactionCode		= BankTransactionCode
										invoked.TransactionIDNumber				= TransactionIDNumber
#endif

				if (PrmVoidDate not entered)
					if (CashLedgerGLDistributionByAccountRel exists)
						invoke AddAmountsToExistingDistribution CashLedgerGLDistributionByAccountRel
							invoked.PrmDistributionAmount				= LocalDistributionAmount
							invoked.PrmDistributionAmount.ExchangeDate	= CheckDate
					else
						invoke CreateFundHistoryDistribution CashLedgerGLDistribution
							invoked.CashManagementGroup										= GeneralLedgerCompanyRel.FinanceEnterpriseGroup
							invoked.CashCode												= CashCode
							invoked.CashLedgerSourceRecord									= "CHK"
							invoked.CashLedgerGLDistribution.BankTransactionCode			= BankTransactionCode
							invoked.CashLedgerGLDistribution.TransactionIDNumber			= TransactionIDNumber
							invoked.CashLedgerGLDistribution.DistributionType   			= "F"
							invoked.CashLedgerGLDistribution.SequenceNumber					= (last CashLedgerGLDistributionsRel.CashLedgerGLDistribution.SequenceNumber + 1)
							invoked.Company                                     			= Company
							invoked.Status 	 												= Status.Historical
							invoked.Reference                                   			= PrmReference
							invoked.PostDate												= CheckDate
							invoked.Description												= "Cash Disbursement"
							invoked.GLFinanceCodeBlock										= LocalCalculatePayablesFinanceStructure.OutputFinanceCodeBlock
							invoked.TransactionNumber                           			= TransactionNumber
							invoked.GeneralLedgerSourceCode									= "AP"
							invoked.GLTransactionAmount    					    			= LocalDistributionAmount.CurrencyAmount
							invoked.GLBaseAmount.FunctionalAmount.EnteredCurrencyAmount 	= LocalDistributionAmount.FunctionalAmount.EnteredCurrencyAmount
							invoked.GLBaseAmount.AlternateAmount.EnteredCurrencyAmount 		= LocalDistributionAmount.AlternateAmount.EnteredCurrencyAmount
							invoked.GLBaseAmount.AlternateAmount2.EnteredCurrencyAmount 	= LocalDistributionAmount.AlternateAmount2.EnteredCurrencyAmount
							invoked.GLBaseAmount.AlternateAmount3.EnteredCurrencyAmount 	= LocalDistributionAmount.AlternateAmount3.EnteredCurrencyAmount
							invoked.GLBaseAmount.ToFunctionalAmount.EnteredCurrencyAmount 	= LocalDistributionAmount.ToFunctionalAmount.EnteredCurrencyAmount
							invoked.GLBaseAmount.ToAlternateAmount.EnteredCurrencyAmount 	= LocalDistributionAmount.ToAlternateAmount.EnteredCurrencyAmount
							invoked.GLBaseAmount.ToAlternateAmount2.EnteredCurrencyAmount 	= LocalDistributionAmount.ToAlternateAmount2.EnteredCurrencyAmount
							invoked.GLBaseAmount.ToAlternateAmount3.EnteredCurrencyAmount 	= LocalDistributionAmount.ToAlternateAmount3.EnteredCurrencyAmount
							invoked.GLBaseAmount.ProjectAmount.EnteredCurrencyAmount	 	= LocalDistributionAmount.ProjectAmount.EnteredCurrencyAmount
							invoked.GLBaseAmount.ReportAmount1.EnteredCurrencyAmount	 	= LocalDistributionAmount.ReportAmount1.EnteredCurrencyAmount
							invoked.GLBaseAmount.ReportAmount2.EnteredCurrencyAmount	 	= LocalDistributionAmount.ReportAmount2.EnteredCurrencyAmount
							invoked.GLBaseAmount.ReportAmount3.EnteredCurrencyAmount	 	= LocalDistributionAmount.ReportAmount3.EnteredCurrencyAmount
							invoked.GLBaseAmount.ReportAmount4.EnteredCurrencyAmount		= LocalDistributionAmount.ReportAmount4.EnteredCurrencyAmount
							invoked.GLBaseAmount.ReportAmount5.EnteredCurrencyAmount		= LocalDistributionAmount.ReportAmount5.EnteredCurrencyAmount
							invoked.LocalExchangeDate										= CheckDate
							invoked.LocalCurrencyTable										= PayablesInvoice.CurrencyTable
							invoked.LocalControlDocumentNumber								= PrmControlDocumentNumber
							invoked.LocalDocumentNumber										= PrmControlDocumentNumber


				if (PrmVoidDate entered)
					LocalTotalDistributionAmount.CurrencyAmount								-= LocalDistributionAmount.CurrencyAmount
					LocalTotalDistributionAmount.FunctionalAmount.EnteredCurrencyAmount		-= LocalDistributionAmount.FunctionalAmount.EnteredCurrencyAmount
					LocalTotalDistributionAmount.AlternateAmount.EnteredCurrencyAmount		-= LocalDistributionAmount.AlternateAmount.EnteredCurrencyAmount
					LocalTotalDistributionAmount.AlternateAmount2.EnteredCurrencyAmount		-= LocalDistributionAmount.AlternateAmount2.EnteredCurrencyAmount
					LocalTotalDistributionAmount.AlternateAmount3.EnteredCurrencyAmount		-= LocalDistributionAmount.AlternateAmount3.EnteredCurrencyAmount
					LocalTotalDistributionAmount.ToFunctionalAmount.EnteredCurrencyAmount	-= LocalDistributionAmount.ToFunctionalAmount.EnteredCurrencyAmount
					LocalTotalDistributionAmount.ReportAmount1.EnteredCurrencyAmount		-= LocalDistributionAmount.ReportAmount1.EnteredCurrencyAmount
					LocalTotalDistributionAmount.ReportAmount2.EnteredCurrencyAmount		-= LocalDistributionAmount.ReportAmount2.EnteredCurrencyAmount
					LocalTotalDistributionAmount.ReportAmount3.EnteredCurrencyAmount		-= LocalDistributionAmount.ReportAmount3.EnteredCurrencyAmount
					LocalTotalDistributionAmount.ReportAmount4.EnteredCurrencyAmount		-= LocalDistributionAmount.ReportAmount4.EnteredCurrencyAmount
					LocalTotalDistributionAmount.ReportAmount5.EnteredCurrencyAmount		-= LocalDistributionAmount.ReportAmount5.EnteredCurrencyAmount
				else
					LocalTotalDistributionAmount.CurrencyAmount								+= LocalDistributionAmount.CurrencyAmount
					LocalTotalDistributionAmount.FunctionalAmount.EnteredCurrencyAmount		+= LocalDistributionAmount.FunctionalAmount.EnteredCurrencyAmount
					LocalTotalDistributionAmount.AlternateAmount.EnteredCurrencyAmount		+= LocalDistributionAmount.AlternateAmount.EnteredCurrencyAmount
					LocalTotalDistributionAmount.AlternateAmount2.EnteredCurrencyAmount		+= LocalDistributionAmount.AlternateAmount2.EnteredCurrencyAmount
					LocalTotalDistributionAmount.AlternateAmount3.EnteredCurrencyAmount		+= LocalDistributionAmount.AlternateAmount3.EnteredCurrencyAmount
					LocalTotalDistributionAmount.ToFunctionalAmount.EnteredCurrencyAmount	+= LocalDistributionAmount.ToFunctionalAmount.EnteredCurrencyAmount
					LocalTotalDistributionAmount.ReportAmount1.EnteredCurrencyAmount		+= LocalDistributionAmount.ReportAmount1.EnteredCurrencyAmount
					LocalTotalDistributionAmount.ReportAmount2.EnteredCurrencyAmount		+= LocalDistributionAmount.ReportAmount2.EnteredCurrencyAmount
					LocalTotalDistributionAmount.ReportAmount3.EnteredCurrencyAmount		+= LocalDistributionAmount.ReportAmount3.EnteredCurrencyAmount
					LocalTotalDistributionAmount.ReportAmount4.EnteredCurrencyAmount		+= LocalDistributionAmount.ReportAmount4.EnteredCurrencyAmount
					LocalTotalDistributionAmount.ReportAmount5.EnteredCurrencyAmount		+= LocalDistributionAmount.ReportAmount5.EnteredCurrencyAmount

#ifdef module cam		
		UpdateCustodialAccountBalances
			invoke CancelCommittedAmount CustodialAccountEditRel
			for each PaymentsNotVoidedRel
				LocalPaymentPercent	= each.PaymentAmount.CurrencyAmount / each.DerivedInvoiceAmountDivisor 
				if (each.AccrualCode entered)
					LocalAccrualCode	= each.AccrualCode
				else
					LocalAccrualCode	= PayablesInvoice.AccrualCode
				for each ProrateDistributionsRel
					initialize LocalCalculatePayablesFinanceStructure
					LocalCalculatePayablesFinanceStructure.InputPayablesCompany					= Company
					LocalCalculatePayablesFinanceStructure.InputPayablesInvoice					= PayablesInvoice
					LocalCalculatePayablesFinanceStructure.InputPayablesInvoiceDistribution		= each.PayablesInvoiceDistribution
					LocalCalculatePayablesFinanceStructure.InputPayablesFinanceStructureType	= PayablesFinanceStructureType.Payment
					LocalCalculatePayablesFinanceStructure.InputFinanceCodeBlock				= PayablesAccrualCodeDetailRel.DistributionAccount
					LocalAnswer = LocalCalculatePayablesFinanceStructure.CalculatePayablesFinanceStructure
		
					LocalToAccountingEntity		= LocalCalculatePayablesFinanceStructure.OutputFinanceCodeBlock.ToAccountingEntity
					LocalCustodialPosting		= LocalCalculatePayablesFinanceStructure.OutputFinanceCodeBlock.FinanceDimension10
					if (LocalCustodialPosting entered)
						constraint (CustodialDetailAmountRel exist)
							"<GeneralLedgerCompanyRel.FinanceEnterpriseGroup.FinanceDimension10Label>:_<LocalCustodialPosting>_MustBeSetupAS_A_CustodialAccount"
						if (Vendor != CustodialDetailAmountRel.CustodialAccountManagement.Vendor)
							constraint (LocalCustodialPosting.Expendable)
								"<GeneralLedgerCompanyRel.FinanceEnterpriseGroup.FinanceDimension10Label>:_<LocalCustodialPosting>_IsNotExpendable"
						invoke Update CustodialAccountEditRel2
							invoked.EditAmount += each.DistributionAmount.CurrencyAmount * LocalPaymentPercent
		
			constraint (ExceedsCustodialAccountBalanceRel !exists)
				"CannotUpdatePaymentForCustodialAccount<LocalCustodialPosting>;<first ExceedsCustodialAccountBalanceRel.ErrorMessage>"
			invoke UpdateCommittedAmount CustodialAccountEditRel
			for each CustodialAccountEditRel
				LocalToAccountingEntity		= each.AccountingEntity
				LocalCustodialPosting 		= each.FinanceDimension10
				LocalCommittedAmount		= each.EditAmount
				LocalCustodialAccountEdit 	= each.CustodialAccountEdit
				if (CustodialDetailAmountRel exists)
					if (Vendor = CustodialDetailAmountRel.CustodialAccountManagement.Vendor)
						LocalActivityType = 10
					else
						LocalActivityType = 2
					LocalTitle = PayablesInvoicePayment.PaymentSequence+"_"+PayablesInvoice.Invoice
					invoke UpdateCommittedAmount LocalCustodialAccountEdit
					invoke Create CustodialActivity
						invoked.FinanceEnterpriseGroup  		= GeneralLedgerCompanyRel.FinanceEnterpriseGroup
						invoked.CustodialCompany			 	= Company
						invoked.CustodialActivity.CustodialAccountManagement	 = CustodialDetailAmountRel.CustodialAccountManagement
						invoked.CustodialPosting			 	= LocalCustodialPosting
						invoked.ActivityDate				 	= CheckDate
						invoked.ActivityType 				 	= LocalActivityType
						invoked.Description 				 	= "Payables Invoice Payment"
						invoked.Amount						 	= LocalCommittedAmount *-1
						invoked.DocumentNumber				 	= PayablesInvoicePayment.PaymentSequence+"_"+PayablesInvoice.Invoice
						invoked.Vendor						 	= Vendor	
						invoked.PayablesInvoice				 	= PayablesInvoice

						invoked.CustodialCashCode			 	= CashCode
						invoked.CustodialTransactionCode		= BankTransactionCode
						invoked.TransactionIDNumber				= TransactionIDNumber
#endif


		TriggerPayablesTransactionRules
			if(LocalMassBODTrigger)
				LocalTitle = "MassBOD:"+MassBODTitleDate+": EG:"+GeneralLedgerCompanyRel.FinanceEnterpriseGroup+" CO:"+PayablesInvoice.Company+" INV:"+Invoice+" SF:"+Suffix+" PS:"+PayablesInvoicePayment.PaymentSequence
			else
				LocalTitle = "EG:"+GeneralLedgerCompanyRel.FinanceEnterpriseGroup+" CO:"+PayablesInvoice.Company+" INV:"+Invoice+" SF:"+Suffix+" PS:"+PayablesInvoicePayment.PaymentSequence
			trigger "PayablesInvoicePaymentService" PA service
				resume on error
				title is "<LocalTitle>"
				Criteria
					GeneralLedgerCompanyRel.FinanceEnterpriseGroup
					PayablesInvoice.Company
					GeneralLedgerCompanyRel.AccountingEntity
				Variables
					include persistent fields from PayablesInvoicePayment
					include persistent fields from Company
					include persistent fields from Company.GeneralLedgerCompany
					include persistent fields from PayablesInvoice
					include persistent fields from Vendor
					include persistent fields from VendorLocationRel
					include persistent fields from Vendor.VendorContactRel
					include persistent fields from Vendor.CurrentAddressRel
					include persistent fields from VendorLocationRel.CurrentAddressRel
					include persistent fields from Vendor.CurrentAddressRel.VendorAddress
					include persistent fields from PayablesInvoice.TermsCode
					include persistent fields from PayablesInvoice.TaxEntityRel
					include persistent fields from VendorContactsLocRel
					include persistent fields from CashLedgerPayablesPaymentRel.CashLedgerPayablesPayment.CbtransRel
					Company.VendorGroup
					Vendor
					TransactionNetPayment
						variable name is TransactionNetPayment
					BaseNetPayment
						variable name is BaseNetPayment
					OpenTransactionPayment
						variable name is OpenTransactionPayment
					CashCode.Currency
						variable name is ToCurrency
					OpenBasePayment
						variable name is OpenBasePayment
					ActionCode
					bod id.VariationID
						variable name is BODVariationId
					LocalBODCurrentTimeStamp.OutputBODCurrentTimeStamp
						variable name is CurrentTimeStamp
					PayablesInvoice.Company
						variable name is LawsonCompany
					GeneralLedgerCompanyRel.AccountingEntity
						variable name is Accountingentity
					GeneralLedgerCompanyRel.AccountingEntity.AlternateCurrency
						variable name is AlternateCurrency

			

		NativeLPLBODTriggerChecksRuleBlock
			if(CashLedgerPayablesPaymentRel.DerivedWithholding > 0)
				LocalNounTemplate = "IONPayableTracker_PayablesTrackerHeaderWT_ST"
			else
				LocalNounTemplate = "IONPayableTracker_PayablesTrackerHeader_ST"
			invoke NativeLPLBODTriggerChecks CashLedgerPayablesPaymentRel.FSMBODConfigurationRelForPayableTracker
				invoked.PrmVerb 					= 1
				invoked.PrmNoun						= "PayableTracker"
				invoked.PrmDirection				= 1
				invoked.PrmTriggerFrom				= LocalTriggerFrom
				invoked.PrmFinanceEnterpriseGroup	= GeneralLedgerCompanyRel.FinanceEnterpriseGroup
				invoked.PrmAccountingEntity 		= GeneralLedgerCompanyRel.AccountingEntity
				invoked.PrmCompany 					= Company
				invoked.PrmMainUserTemplate			= LocalNounTemplate
			NativeLPLBODTrigger = CashLedgerPayablesPaymentRel.FSMBODConfigurationRelForPayableTracker.NativeLPLBODTrigger

	Create Rules		
		LocalCurrencyTable			= PayablesInvoice.CurrencyTable


	Delete Rules
		if(action not = "Purge")
			decrement PayablesInvoice.TotalPaymentAmount.TransactionTotal by PaymentAmount.CurrencyAmount
			include DeleteAmountFromDocumentTotals
			decrement PayablesInvoice.DiscountAmount.CurrencyAmount by DiscountAmount.CurrencyAmount
			decrement PayablesInvoice.DiscountAmount.FunctionalAmount.EnteredCurrencyAmount by DiscountAmount.FunctionalAmount.EnteredCurrencyAmount
			if (action not = "RestrictedDelete" 
			and initiating action != "PayablesInvoice.CancelUnreleasedInvoiceUnreleased")		
				invoke UpdateErrorRecordsAction PayablesInvoice		

	Action Exit Rules
		if (!BypassRuleForTheseFiles)
			if (CashRequirementsResult changed)
				if (CashRequirementsResult entered)
					if (CashRequirementsReportRel not exists)
						invoke Create CashRequirementsReportRel
							invoked.TotalPaymentAmount			= PaymentAmount.CurrencyAmount
							invoked.TotalDiscountAmount			= DiscountAmount.CurrencyAmount
							invoked.TotalNetPaymentAmount		= NetPaymentAmount.CurrencyAmount
							invoked.TotalBankCheckAmount		= BankCheckAmount
					else
						invoke UpdateAmounts CashRequirementsReportRel
							invoked.PrmPaymentAmount		= PaymentAmount.CurrencyAmount
							invoked.PrmDiscountAmount		= DiscountAmount.CurrencyAmount
							invoked.PrmNetPaymentAmount		= NetPaymentAmount.CurrencyAmount
							invoked.PrmNetCheckAmount		= BankCheckAmount
							invoked.AddToAmounts			= true
				else
					LocalCashRequirementsResult = old CashRequirementsResult
					LocalBankTransactionCode	= old BankTransactionCode
					if (OldCashRequirementsReportRel.SelectedPayablesInvoicePaymentRel not exists)
						invoke Delete OldCashRequirementsReportRel
					else
						invoke UpdateAmounts OldCashRequirementsReportRel
							invoked.PrmPaymentAmount		= old PaymentAmount.CurrencyAmount
							invoked.PrmDiscountAmount		= old DiscountAmount.CurrencyAmount
							invoked.PrmNetPaymentAmount		= old NetPaymentAmount.CurrencyAmount
							invoked.PrmNetCheckAmount		= old BankCheckAmount
							invoked.AddToAmounts			= false
			else
				if (CashRequirementsResult entered
				and OnHold changed)
					if (OnHold)
						if (CashRequirementsReportRel.SelectedPayablesInvoicePaymentRel not exists)
							invoke Delete CashRequirementsReportRel
						else
							invoke UpdateAmounts CashRequirementsReportRel
								invoked.PrmPaymentAmount		= PaymentAmount.CurrencyAmount
								invoked.PrmDiscountAmount		= DiscountAmount.CurrencyAmount
								invoked.PrmNetPaymentAmount		= NetPaymentAmount.CurrencyAmount
								invoked.PrmNetCheckAmount		= BankCheckAmount
								invoked.AddToAmounts			= false
					else
						if (CashRequirementsReportRel not exists)
							invoke Create CashRequirementsReportRel
								invoked.TotalPaymentAmount			= PaymentAmount.CurrencyAmount
								invoked.TotalDiscountAmount			= DiscountAmount.CurrencyAmount
								invoked.TotalNetPaymentAmount		= NetPaymentAmount.CurrencyAmount
								invoked.TotalBankCheckAmount		= BankCheckAmount
						else
							invoke UpdateAmounts CashRequirementsReportRel
								invoked.PrmPaymentAmount		= PaymentAmount.CurrencyAmount
								invoked.PrmDiscountAmount		= DiscountAmount.CurrencyAmount
								invoked.PrmNetPaymentAmount		= NetPaymentAmount.CurrencyAmount
								invoked.PrmNetCheckAmount		= BankCheckAmount
								invoked.AddToAmounts			= true

	Actions




		TriggerPayableTransactionNativeLPLBOD is an Instance Action
			default label is untranslatable
			restricted
			Parameters
				PrmTriggerFrom 	is Alpha size 100
			Local Fields
				LocalTriggerFrom	is Alpha size 100
			Entrance Rules
			Action Rules
				LocalTriggerFrom = PrmTriggerFrom
				invoke NativeLPLBODTriggerChecks FSMBODConfigurationRel
					invoked.PrmVerb 					= 1
					invoked.PrmNoun						= "PayableTransaction"
					invoked.PrmDirection				= 1
					invoked.PrmTriggerFrom				= LocalTriggerFrom
					invoked.PrmFinanceEnterpriseGroup	= GeneralLedgerCompanyRel.FinanceEnterpriseGroup
					invoked.PrmAccountingEntity 		= GeneralLedgerCompanyRel.AccountingEntity
					invoked.PrmCompany 					= Company
					invoked.PrmMainUserTemplate			= "IONSyncPayableTransaction_PayablesInvoicePayment_Header_XML_ST"
				NativeLPLBODTrigger = FSMBODConfigurationRel.NativeLPLBODTrigger
				if(GeneralLedgerCompanyRel.FinanceEnterpriseGroup.BODTrigger  and NativeLPLBODTrigger and LocalNativeTriggerCount != true)
					LocalNativeTriggerCount = true
					if(FSMInboundBODTracker not entered)
						invoke Create FSMInboundBODTracker
							assign result to NewBODTracker
							invoked.Verb 					= 1
							invoked.Noun 					= "PayableTransaction"						
							invoked.BODDocumentID			= DerivedDocumentID
							invoked.BODVariationID			= DerivedBODVariationID
							invoked.Status					= 1
							invoked.Direction				= 1
							invoked.StartDate				= system current timestamp
							invoked.FinanceEnterpriseGroup	= DerivedFinanceEnterpriseGroup
							invoked.BODAccountingEntity		= DerivedAccountingEntity
							invoked.Company					= Company
							invoked.Reference1				= PayablesInvoice
							invoked.Reference2				= PayablesInvoicePayment.PaymentSequence
							invoked.Reference3				= LocalTriggerFrom
							initialize invoked.Error			
							initialize invoked.ErrorMessage					
						LocalFSMInboundBODTracker	= NewBODTracker.FSMInboundBODTracker
					else
						LocalFSMInboundBODTracker		= FSMInboundBODTracker
						invoke Update FSMInboundBODTrackerRel
							invoked.FinanceEnterpriseGroup	= DerivedFinanceEnterpriseGroup
							invoked.BODDocumentID			= DerivedDocumentID
							invoked.BODVariationID			= DerivedBODVariationID
							invoked.Status					= 1
							invoked.StartDate				= system current timestamp
							invoked.Direction				= 1
							invoked.BODAccountingEntity		= DerivedAccountingEntity
							invoked.Company					= Company
							invoked.Reference1				= PayablesInvoice
							invoked.Reference2				= PayablesInvoicePayment.PaymentSequence
							invoked.Reference3				= LocalTriggerFrom
							initialize invoked.Error			
							initialize invoked.ErrorMessage
					invoke SendPayableTransactionNativeLPLBOD
						resume on error
	                   		Error            							= true
	                        ErrorMessage     							= error message
	                if(Error)
						invoke Update FSMInboundBODTrackerRel
							invoked.Error 								= Error
							invoked.ErrorMessage 						= ErrorMessage
							invoked.Status								= 2
							invoked.CloseDate							= system current timestamp
							invoked.BODID								= DerivedBODID
							invoked.BODXML								= PayableTransactionXMLBOD
					else
						invoke Update FSMInboundBODTrackerRel
							invoked.Status								= 3
							invoked.CloseDate							= system current timestamp
							invoked.BODID								= DerivedBODID
							invoked.BODXML							    = PayableTransactionXMLBOD
									
		SendPayableTransactionNativeLPLBOD is an Instance Action
			restricted
			Entrance Rules
			Parameters
			Action Rules
				send ion bod
					bod is PayableTransactionXMLBOD
					bod type is "Sync.PayableTransaction"
					accounting entity is DerivedAccountingEntity
					document id is DerivedDocumentID
					variation id is DerivedBODVariationID
		
		TriggerPayablesInvoicePayment is an Instance Action  
		 	default label is untranslatable
		 	restricted
			Action Rules
				if (GeneralLedgerCompanyRel.FinanceEnterpriseGroup.BODTrigger)
					if (!action type.Delete)
						if (action != "UpdateBODIdFields") 
							ActionCode = ActionCode.Update
							if (action type.Create)
								ActionCode = ActionCode.Create

							increment bod id.VariationID

							include TriggerPayablesTransactionRules





		TriggerPayablesInvoicePaymentBatch is a Set Action
			default label is untranslatable
			restricted
			Parameters
				PrmVendorGroup				is a VendorGroup
				PrmPayGroup             is a PayGroup
				PrmBankTransactionCode		is a BankTransactionCode
				PrmTransactionIDNumber		is a TransactionIDNumber

			Instance Selection                  
				where  (PayGroup              = PrmPayGroup
				and     BankTransactionCode   = PrmBankTransactionCode
				and     TransactionIDNumber   = PrmTransactionIDNumber)

			Sort Order
				PayGroup
				BankTransactionCode
				TransactionIDNumber
				Vendor
				PayablesInvoice
				PayablesInvoicePayment
				Company

			Action Rules
				Instance Rules
					invoke TriggerPayablesInvoicePayment


								
		TriggerNativeLPLPayablesInvoicePaymentBatch is a Set Action
			default label is untranslatable
			restricted
			Parameters
				PrmVendorGroup				is a VendorGroup
				PrmPayGroup             is a PayGroup
				PrmBankTransactionCode		is a BankTransactionCode
				PrmTransactionIDNumber		is a TransactionIDNumber
				PrmTriggerFromBatch			is Alpha size 100
			Instance Selection                  
				where  (PayGroup              = PrmPayGroup
				and     BankTransactionCode   = PrmBankTransactionCode
				and     TransactionIDNumber   = PrmTransactionIDNumber)

			Sort Order
				PayGroup
				BankTransactionCode
				TransactionIDNumber
				Vendor
				PayablesInvoice
				PayablesInvoicePayment
				Company

			Action Rules
				Instance Rules

					invoke TriggerPayableTransactionNativeLPLBOD
						invoked.PrmTriggerFrom = PrmTriggerFromBatch
		
		BODDataInitialLoadPayableTransactionCriteria is a Set Action
			default label is untranslatable
			restricted
			Parameters
				PrmVendorGroup					is a VendorGroup
				PrmFromCompany					is a PayablesCompany
				PrmToCompany 					is a PayablesCompany
				PrmFromVendor					is a Vendor
					context of PrmVendorGroup
				PrmToVendor						is a Vendor
					context of PrmVendorGroup
				PrmFromPayablesInvoice			is a PayablesInvoice
					context of PrmFromCompany
				PrmToPayablesInvoice			is a PayablesInvoice
					context of PrmFromCompany
				PrmCheckDateRange				is a DateRange
				PrmCreateDateRange				is a DateRange



			Parameter Rules
			Instance Selection
				where  (((PrmVendorGroup entered
				and		  PrmVendorGroup = VendorGroup)
				or        PrmVendorGroup not entered)
				and    ((PrmFromCompany entered
				and		  PrmFromCompany <= Company)
				or		  PrmFromCompany not entered)
				and    ((PrmToCompany entered
				and		  PrmToCompany >= Company)
				or		  PrmToCompany not entered)
				and		((PrmFromVendor entered
				and		  PrmFromVendor <= Vendor)
				or        PrmFromVendor not entered)
				and		((PrmToVendor entered
				and		  PrmToVendor >= Vendor)
				or        PrmToVendor not entered)
				and		((PrmFromPayablesInvoice entered
				and		  PrmFromPayablesInvoice <= PayablesInvoice)
				or        PrmFromPayablesInvoice not entered)
				and		((PrmToPayablesInvoice entered
				and		  PrmToPayablesInvoice >= PayablesInvoice)
				or        PrmToPayablesInvoice not entered)
				and     ( CheckDate within PrmCheckDateRange
				or 	    PrmCheckDateRange not entered)
				and     (create date within PrmCreateDateRange
				or 	    PrmCreateDateRange not entered)
				and     (Status.Historical))

			Action Rules
				Instance Rules
					if (GeneralLedgerCompanyRel.FinanceEnterpriseGroup.BODTrigger)
						ActionCode = ActionCode.Create
						increment bod id.VariationID
						LocalMassBODTrigger = true
						include TriggerPayablesTransactionRules




		UpdateBODIdFields is an Instance Action
			default label is untranslatable
			restricted
			Parameters
				PrmAccountingEntity  is Alpha size 22
					default label is "AccountingEntity"
				PrmLocation          is Alpha size 22
					default label is "Location"
				PrmDocumentID        is Alpha size 100
					default label is "DocumentID"
				PrmRevision          is Alpha size 22
					default label is "Revision"
				PrmVariationID       is Alpha size 22
					default label is "VariationID"
				PrmSystemOfRecord    is Alpha size 1
					default label is "SystemOfRecord"
			Action Rules
				if (bod id.AccountingEntity != PrmAccountingEntity)
					bod id.AccountingEntity 	= PrmAccountingEntity
				if (bod id.Location != PrmLocation)
					bod id.Location				= PrmLocation
				if (bod id.DocumentID != PrmDocumentID)
					bod id.DocumentID			= PrmDocumentID
				if (bod id.Revision != PrmRevision)
					bod id.Revision				= PrmRevision
				if (bod id.SystemOfRecord != PrmSystemOfRecord)
					bod id.SystemOfRecord		= PrmSystemOfRecord
				if (bod id.VariationID != PrmVariationID)
					bod id.VariationID			= PrmVariationID


		UpdateZeroPayment is an Instance Action
			default label is untranslatable
			restricted
			Parameters
  				PrmBankTransactionCode	is like BankTransactionCode
				PrmTransactionIDNumber	is like TransactionIDNumber
			Action Rules
				BankTransactionCode		= PrmBankTransactionCode
				TransactionIDNumber		= PrmTransactionIDNumber

		Create is a Create Action
			valid when (CreateActionValid)
			Entrance Rules
				ActionType = ActionType.CreateType
				include SaveDocumentTotalsEntranceRules
				BypassActiveCodeBlockEdit = true
				
			Action Rules
				include SetCurrencyContext
				include UpdateLastDateTimeActor
				include UpdateIncomeCode
				if (PayablesInvoice.Status.Unreleased
				or  PayablesInvoice.Status.Approved
				or  PayablesInvoice.Status.Amended)
					Status		= 0
				else
				if (PayablesInvoice.Status.Historical)
					Status		= 9
				else
					Status		= 1





				CreatedBy		= actor
				if (InvoiceGroup 				not entered
				and PayablesInvoice.InvoiceGroup 	entered)
					InvoiceGroup	= PayablesInvoice.InvoiceGroup

			Exit Rules
				if (ManualPaymentInformationEntered)		
					include SetBankCheckAmount
				LocalDocumentCurrencyTotals.TransactionTotal += PaymentAmount.CurrencyAmount
				include UpdateBaseTotalPaymentAmount
				if (PayablesInvoice.IsCreditInvoice)		
					constraint (PayablesInvoice.TotalPaymentAmount.TransactionTotal >= PayablesInvoice.InvoiceAmount.CurrencyAmount)
						"TotalPaymentAmount<PayablesInvoice.TotalPaymentAmount.TransactionTotal>CannotBeGreaterThanInvoiceAmount<PayablesInvoice.InvoiceAmount.CurrencyAmount>"	     
				else
					constraint (PayablesInvoice.TotalPaymentAmount.TransactionTotal <= PayablesInvoice.InvoiceAmount.CurrencyAmount)
						"TotalPaymentAmount<PayablesInvoice.TotalPaymentAmount.TransactionTotal>CannotBeGreaterThanInvoiceAmount<PayablesInvoice.InvoiceAmount.CurrencyAmount>"	     

				if  (PayablesInvoice.InterfaceInProcess
				and (DiscountAmount.CurrencyAmount entered
				or   DiscountPercent entered
				or	 DiscountDate entered)
				and (!PayablesInvoice.DiscountAmount.CurrencyAmount entered
				or   !PayablesInvoice.DiscountPercent entered
				or	 !PayablesInvoice.DiscountDate entered))
					invoke SyncAllowableAmountFromPayments PayablesInvoice

				if (TransientReleaseAfterCreate
				and Status.Unreleased)
					invoke Unreleased.Release

				if (!CreateFromBatchSwitch
				and !PayablesInvoice.InterfaceInProcess
				and !PayablesInvoice.IsPOCancel
				and !PayablesInvoice.IsChargeback
				and initiating action != "PayablesInvoice.CreateInvoiceUnreleased")
					invoke UpdateErrorRecordsAction PayablesInvoice

				if  (initiating action = "Create"				
				and  GeneralLedgerCompanyRel.FinanceEnterpriseGroup.FundAccounting
				and  Status.Released
				and  PayablesInvoice.TotalPaymentAmount.TransactionTotal = PayablesInvoice.InvoiceAmount.CurrencyAmount)
					include UpdateFundBalances

#ifdef module cam
				if  (initiating action = "Create"
				and  GeneralLedgerCompanyRel.FinanceEnterpriseGroup.CustodialAccountManagement
				and  Status.Released
				and  PayablesInvoice.TotalPaymentAmount.TransactionTotal = PayablesInvoice.InvoiceAmount.CurrencyAmount)
					include UpdateCustodialAccountBalances
#endif


		CancelPayablesBillOfExchangeCreate is a Create Action										
			default label is untranslatable
			restricted 																				
			Entrance Rules																			
				ActionType = ActionType.CreateType													
			Action Rules																			
				include SetCurrencyContext															
				include UpdateLastDateTimeActor														
				include UpdateIncomeCode															
				Status	= 1																			
				CreatedBy		= actor																

		Update is an Update Action
			valid when (UpdateActionValid)
			completion message is "<CompletionMessage>"
			Entrance Rules
				ActionType = ActionType.UpdateType
				include SaveDocumentTotalsEntranceRules
				LocalCurrencyTable	= PayablesInvoice.CurrencyTable

			Action Rules
				if (!TransientCurrencyRefresh)
					include UpdateLastDateTimeActor
					include UpdateIncomeCode
			
				if (PayablesInvoice.Status.Released			
				and old Status.Released)					
					constraint (!Status.Unreleased)			
						"CannotChange;PleaseRefresh"		
			
			Exit Rules
				if (ManualPaymentInformationEntered)		
					include SetBankCheckAmount
				if (PaymentAmount.CurrencyAmount changed
				or	TransEnableAPToARInterface
				or  TransientCurrencyRefresh)
					LocalDocumentCurrencyTotals.TransactionTotal += (PaymentAmount.CurrencyAmount - OldPaymentAmount)
					include UpdateBaseTotalPaymentAmount
					if  (PayablesInvoice.Status.Released
					and !TransientBypassUpdateEdit)
						if (PayablesInvoice.IsCreditInvoice)		
							constraint (PayablesInvoice.TotalPaymentAmount.TransactionTotal >= PayablesInvoice.InvoiceAmount.CurrencyAmount)
								"TotalPaymentAmount<PayablesInvoice.TotalPaymentAmount.TransactionTotal>CannotBeGreaterThanInvoiceAmount<PayablesInvoice.InvoiceAmount.CurrencyAmount>"	     
						else
							constraint (PayablesInvoice.TotalPaymentAmount.TransactionTotal <= PayablesInvoice.InvoiceAmount.CurrencyAmount)
								"TotalPaymentAmount<PayablesInvoice.TotalPaymentAmount.TransactionTotal>CannotBeGreaterThanInvoiceAmount<PayablesInvoice.InvoiceAmount.CurrencyAmount>"	     




				if  (GeneralLedgerCompanyRel.FinanceEnterpriseGroup.FundAccounting				
				and  Status.Released
				and (CashCode changed
				or   PaymentAmount.CurrencyAmount changed)
				and  PayablesInvoice.TotalPaymentAmount.TransactionTotal = PayablesInvoice.InvoiceAmount.CurrencyAmount)
					include UpdateFundBalances

				if (PayablesInvoice.InvoiceSource.IntercompanyBilling) 
					if (ICBAllowSelectDistributionSet)
						include UpdateICBDistributionSet

#ifdef module cam
				if  (GeneralLedgerCompanyRel.FinanceEnterpriseGroup.CustodialAccountManagement
				and  Status.Released
				and (CashCode changed
				or   PaymentAmount.CurrencyAmount changed)
				and  PayablesInvoice.TotalPaymentAmount.TransactionTotal = PayablesInvoice.InvoiceAmount.CurrencyAmount)
					include UpdateCustodialAccountBalances
#endif

				if (!TransientCurrencyRefresh)
					if ((DiscountAmount.CurrencyAmount changed
					or   DiscountPercent changed
					or	 DiscountDate changed)
					and !SkipPayablesDiscount)
						invoke SyncAllowableAmountFromPayments PayablesInvoice
					if (!Status.Historical)
						if (PayablesOnHoldRel exist  
						and ProcessLevel changed)
							invoke Update PayablesOnHoldRel
								invoked.ProcessLevel	= ProcessLevel
				if  ((Status.Released					
				or   Status.Unreleased)					
				and (BankTransactionCode changed		
				or   CashCode changed
				or   PayImmediately changed
				or   InvoiceGroup changed
				or   PaymentPriority changed
				or   DueDate changed)
				and (IsAppliedToInvoice
				or   IsAppliedToCredit))
					invoke SyncFieldsAmongInvoiceAndCredits
				if (DueDate	changed
				and !DerivedSplitInvoice)	
					invoke SyncDueDateFromPayments PayablesInvoice
				if (!PayablesInvoice.InterfaceInProcess
				and !PayablesInvoice.IsChargebackSubType 
				and !PayablesInvoice.IsMatched)
					invoke UpdateErrorRecordsAction PayablesInvoice
					
				if(!PayablesInvoice.Status.Unreleased and !PayablesInvoice.Status.Approved and !PayablesInvoice.Status.PendingApproval)
					if (!PayablesInvoice.InvoiceType.MatchPrepayment and !PayablesInvoice.MatchStatus.Unmatched)
						invoke TriggerSupplierInvoiceBOD PayablesInvoice 




					
		CreateFromUnmatch is a Create Action
			restricted
			Entrance Rules
				increment PayablesInvoice.LastPaymentSequence
				PayablesInvoicePayment.PaymentSequence =PayablesInvoice.LastPaymentSequence
				LocalCurrencyTable			= PayablesInvoice.CurrencyTable
				ActionType = ActionType.CreateType
				include SaveDocumentTotalsEntranceRules
			Action Rules
				include SetCurrencyContext
				include UpdateLastDateTimeActor
				InvoiceGroup	= PayablesInvoice.InvoiceGroup
				CreatedBy		= actor
			Exit Rules
				LocalDocumentCurrencyTotals.TransactionTotal += PaymentAmount.CurrencyAmount
				include UpdateBaseTotalPaymentAmount


		FastUpdate is an Update Action
			restricted
			bypass field rules
			Action Rules
				if (SeparatePayment)
					LocalAlphaPayablesCompany	= Company
					LocalAlphaPayablesInvoice	= PayablesInvoice
					LocalAlphaPaymentSequence	= PayablesInvoicePayment.PaymentSequence
					SeparatePaymentSequence 	= LocalAlphaPayablesCompany + LocalAlphaPayablesInvoice + LocalAlphaPaymentSequence
				else
					initialize SeparatePaymentSequence

		UpdateAfterMatch is an Update Action
			restricted
			bypass field rules
			Entrance Rules
				ActionType = ActionType.UpdateType
				include SaveDocumentTotalsEntranceRules

			Action Rules
				include UpdateLastDateTimeActor
				include UpdateIncomeCode

			Exit Rules
				if (PaymentAmount.CurrencyAmount changed)
					LocalDocumentCurrencyTotals.TransactionTotal += (PaymentAmount.CurrencyAmount - old PaymentAmount.CurrencyAmount)
					include UpdateBaseTotalPaymentAmount

				if (!Status.Historical)
					if (PayablesOnHoldRel exist  
					and ProcessLevel changed)
						invoke Update PayablesOnHoldRel
							invoked.ProcessLevel		 	= ProcessLevel

		UpdatePaymentAmt is an Update Action
			restricted




			Action Rules
				include UpdateLastDateTimeActor






		Delete is a Delete Action
			valid when (DeleteActionValid)
			Entrance Rules
				ActionType = ActionType.DeleteType
				if (!Status.Unreleased)
					constraint (LastCurrencyRevaluationDate = blank
					or          TransientDeleteFromHeader)			
						"InvoiceHasBeenRevalued"	     
					constraint (!MatchDiscountTaken.Yes)
						"CannotDelete,MatchDiscountTaken"	  
				if (PayablesInvoice.Status.Released
				and Status.Released
				and PayablesInvoice.CancelDate not entered)		
					constraint (!PayablesInvoice.IsRecurringInvoice)
						"CannotDeletePaymentsForARecurringInvoice"	 
					constraint (!PayablesInvoice.InvoiceType.CreditMemo
					and			!PayablesInvoice.InvoiceType.Prepayment
					and 		!PayablesInvoice.InvoiceType.PrepaymentCredit)
						"CannotDeletePaymentsForThisInvoiceType"	
					constraint (!PayablesInvoice.IsRetainageInvoice)
						"CannotDeletePaymentsForARetainageInvoice"
				if (RetainagePayment) 
					constraint (initiating action not = "Delete")
						"CannotDeleteRetainagePayment"
				if (PayablesInvoice.Status.Released									
				and initiating action = "Delete")									
					constraint (instance count of PayablesInvoicePaymentRel > 1)	
						"InvoiceIsReleased;CannotDeleteLastPaymentRecord"			
				if (PayablesInvoice.Status.Amended									
				and initiating action = "Delete")
					constraint (instance count of PayablesInvoicePaymentRel > 1)
						"InvoiceIsAmended;CannotDeleteLastPaymentRecord"			
				if (TransactionNumber entered
				and CashLedgerPayablesPaymentRel exists)
					if (IsManuallyCreated)
						invoke UndoManuallyReservedChecks CashLedgerPayablesPaymentRel
							invoked.PrmPaymentAmount				= NetPaymentAmount.CurrencyAmount
							invoked.PrmBasePaymentAmount			= NetPaymentAmount.FunctionalAmount.EnteredCurrencyAmount
							invoked.PrmPaidAmountInvoiceCurrency	= BankCheckAmount
							invoked.PrmAppliedBaseAmount			= NetPaymentAmount.CurrencyAmount
					else
						invoke Delete CashLedgerPayablesPaymentRel

				if (PayablesInvoice.NumberOfSplitPayments > 1)
					decrement PayablesInvoice.NumberOfSplitPayments by 1

				if (TransactionNumber entered
				and BankTransactionCode.BankTransactionType.CashPayment)
					include 445DeleteCBCheck

				if (PayablesBillOfExchangeRel exists)
					invoke Delete PayablesBillOfExchangeRel

				if (DeleteCashRequirementsErrorRel exists)
					invoke Purge DeleteCashRequirementsErrorRel
			Action Rules

			Exit Rules
				if (initiating action != "PayablesInvoice.CancelUnreleasedInvoiceUnreleased")		
					invoke UpdateErrorRecordsAction PayablesInvoice



		DeleteFromHeader is an Instance Action		
			restricted
			Parameters
				PrmVoidDate	is Date

			Action Rules
				if (LastCurrencyRevaluationDate entered)		
					invoke CreateGainLossDistribution						
						invoked.PrmRevalueDate				= PrmVoidDate 
						invoked.PrmDescription				= PayablesInvoice.Description
						invoked.PrmDistributionReference	= TransactionNumber
						if (AccrualCode entered)
							invoked.PrmAccrualCode			= AccrualCode
						else
							invoked.PrmAccrualCode			= PayablesInvoice.AccrualCode
						invoked.PrmDefaultSystemAccount		= 1		
						invoked.PrmReversal					= 1		

				TransientDeleteFromHeader = true
				invoke Delete


		RestrictedDelete is a Delete Action
			restricted

		RestrictedUpdate is an Instance Action
			restricted
			Parameters
				PrmStatus is Numeric size 1
			Action Rules
				Status = PrmStatus

		UpdateDiscountCode is an Instance Action
			restricted
			valid when (Status.Unreleased)
			Parameters
				PrmDiscountCode is a PayablesDiscountCode
			Parameter Rules
				PrmDiscountCode
					required
			Action Rules
				DiscountCode	= PrmDiscountCode
				DiscountAccount	= PayablesDiscountCodeDetailRel.DiscountAccount

		SelectForSettlementDetail is an Instance Action 
			default label is "SelectTransactionAmount"
			valid when (AllowSelectOpenAmountForSettlementDetail)
			Action Rules

				invoke Create IntercompanyBillingSettlementDetailLine
					invoked.IntercompanyBillingGroup			= ContextSettlementDetailRel.IntercompanyBillingGroup
					invoked.IntercompanyBillingSettlementHeader	= ContextSettlementDetailRel.IntercompanyBillingSettlementHeader
					invoked.IntercompanyBillingSettlementDetail	= ContextSettlementDetailRel.IntercompanyBillingSettlementDetail
					invoked.IntercompanyBillingDocumentHeader	= ContextSettlementDetailRel.IntercompanyBillingDocumentHeader
					invoked.Type								= "P"
					invoked.InvoiceLine							= PayablesInvoicePayment.PaymentSequence
					invoked.VoidSequence						= PayablesInvoicePayment.VoidSequence
					invoked.SelectedAmount						= PaymentAmount.CurrencyAmount

		UnselectForSettlementDetail is an Instance Action 
			default label is "Unselect"
			valid when (AllowUnselectForSettlementDetail)
			Action Rules
				invoke Delete ContextSettlementDetailLineRel

		ProrateAndSelectAllForSettlementDetail is an Instance Action 
			default label is "ProrateThisLine"
			valid when (AllowProrateAndSelectAllForSettlementDetail)
			Action Rules
				invoke ProrateAndSelectAllForSettlementDetail ContextSettlementDetailLineRel

		UpdateIncomeCodeAndReportableAmount is an Instance Action	
			default label is "UpdateIncomeCode_andReportableAmount"
			Parameters
				InvoiceIncomeCode						is a PayablesIncomeCode
				InvoiceReportableIncomeAmount			is an InternationalAmount
				ClearReportableIncomeAmount				is Boolean									
				CopyPaymentAmountToReportableAmount		is Boolean									

			Parameter Rules
				InvoiceReportableIncomeAmount

					if (PayablesInvoice.InvoiceType.CreditMemo
					or  PayablesInvoice.InvoiceType.PrepaymentCredit)
						constraint (InvoiceReportableIncomeAmount >= PaymentAmount.CurrencyAmount)
							"ReportableIncomeAmountCannotBeMoreThanPaymentAmount"
					else
						constraint (InvoiceReportableIncomeAmount <= PaymentAmount.CurrencyAmount)
							"ReportableIncomeAmountCannotBeMoreThanPaymentAmount"
					if (ClearReportableIncomeAmount)
						cannot be entered
							"CannotEnterReportableIncomeAmountWhenClearingAmounts"
					if (CopyPaymentAmountToReportableAmount)
						cannot be entered
							"CannotEnterReportableIncomeAmountWhenCopyingPaymentAmount"

				InvoiceIncomeCode
					initial value is IncomeCode
					if (InvoiceReportableIncomeAmount entered)
						required
							"IncomeCodeRequiredIfReportableAmountEntered"

				CopyPaymentAmountToReportableAmount
					if (ClearReportableIncomeAmount)
						constraint (not CopyPaymentAmountToReportableAmount)
							"CannotCopyPaymentAmountIfClearingReportableAmount"


			Action Rules
				if (PayablesInvoice.IncomeCode not entered
				and !PayablesInvoice.TransientChangingVendor)

					invoke UpdateDefaultIncomeCode PayablesInvoice
						invoked.DefaultIncomeCode 	= InvoiceIncomeCode
				if (PayablesInvoice.TransientChangingVendor)
					initialize IncomeCode
					initialize ReportableIncomeAmount
				else
					IncomeCode 				= InvoiceIncomeCode
					if (ClearReportableIncomeAmount)								
						initialize	ReportableIncomeAmount
					else
						if (InvoiceReportableIncomeAmount entered) 
							ReportableIncomeAmount	= InvoiceReportableIncomeAmount			
						else 
							if (CopyPaymentAmountToReportableAmount)
								ReportableIncomeAmount	= PaymentAmount.CurrencyAmount 
				if (Status.Unreleased												
				and !PayablesInvoice.MultiplePayablesInvoicePaymentRelExists
				and InvoiceIncomeCode !entered)
					invoke UpdateDefaultIncomeCode PayablesInvoice
						invoked.DefaultIncomeCode = InvoiceIncomeCode

		PutOnHold is an Instance Action
			default label is "Put_onHold"
			valid when (IsHoldable)
			Parameters
				InvoiceHoldCode is a PayablesHoldCode
					default label is "HoldCode"
			Parameter Rules
				InvoiceHoldCode
					required
					constraint (InvoiceHoldCode.HoldOnInvoice entered)
						"HoldCodeTypeIsNotForInvoicesOrPayments"			
					constraint (PayablesPaymentCreditMemo2Rel not exists)
						"InvoiceIsAppliedToACreditMemo;CannotPutOnHold"
					constraint (PayablesPaymentCreditMemoRel not exists)
						"CreditMemoIsAppliedToAnInvoice;CannotPutOnHold"
			Local Fields
				LocalBoolean			 	is Boolean
			Action Rules
				constraint (IsHoldable)				
					"PaymentIsNotEligibleToBePutOnHold"
				constraint (!CashRequirementsResult.Status.Processing) 
					"CannotPutInvoiceOnHold;PaymentIsBeingProcessedByCashRequirementsResult:<CashRequirementsResult>"
				OnHold = true
				invoke Delete PayablesInvoicePaymentsOnHoldRel
				invoke Create PayablesInvoicePaymentsOnHoldRel
					invoked.VendorGroup				= Company.VendorGroup
					invoked.HoldCode 				= InvoiceHoldCode
					invoked.ProcessLevel		 	= PayablesInvoice.ProcessLevel
					invoked.PayablesInvoice			= PayablesInvoice
					invoked.PayablesInvoicePayment	= PayablesInvoicePayment
				OnHoldDate	  = current timestamp		
				initialize OffHoldDate	  				
				LocalHoldCode = InvoiceHoldCode
				if (!PayablesHoldCodeRel.InUse)
					invoke SetAsInUse PayablesHoldCodeRel
				if (CashRequirementsResult entered)
					initialize TransactionIDNumber
					initialize CheckDate		
					if (InvoiceHoldCode.HoldOnInvoice.PermanentHold)					
						if (invoking action != "PayablesInvoice.PutInvoiceOnHold")		
							confirmation required										
								"InvoiceIsIncludedInPaymentCycle.PuttingItOnPermanentHoldWillRemoveItFromThePaymentCycle.Continue?"
							initialize CashRequirementsResult							
						else															
							initialize CashRequirementsResult							
					if (Vendor.IncomeWithholding				
					and Company.GlobalWithholding)
						CalculateWithholdingAmount.PayablesCompany			= Company
						CalculateWithholdingAmount.PayablesInvoice			= PayablesInvoice
						CalculateWithholdingAmount.PayablesInvoicePayment	= PayablesInvoicePayment
						LocalBoolean										= CalculateWithholdingAmount.RemoveWithholding
				if (Status = Status.SelectedForPayment)
					Status = Status.Released

				if (InvoiceHoldCode.HoldOnInvoice.PermanentHold)		
					if(!PayablesInvoice.Status.Unreleased and !PayablesInvoice.Status.Approved and !PayablesInvoice.Status.PendingApproval)
						increment PayablesInvoice.bod id.VariationID
						invoke TriggerSupplierInvoiceBOD PayablesInvoice
							invoked.PrmCreateTimeStamp = current timestamp
							invoked.PrmInvoiceOnHold   = true
							invoked.PrmHoldAction      = "C"				





		RestrictedPutOnHold is an Instance Action
			restricted
			Parameters
				InvoiceHoldCode is a PayablesHoldCode
					default label is "HoldCode"
			Parameter Rules
				InvoiceHoldCode
					required
			Local Fields
				LocalBoolean			 	is Boolean
			Action Rules
				OnHold = true
				invoke Delete PayablesInvoicePaymentsOnHoldRel
				invoke Create PayablesInvoicePaymentsOnHoldRel
					invoked.VendorGroup				= Company.VendorGroup
					invoked.HoldCode 				= InvoiceHoldCode
					invoked.ProcessLevel		 	= PayablesInvoice.ProcessLevel
					invoked.PayablesInvoice			= PayablesInvoice
					invoked.PayablesInvoicePayment	= PayablesInvoicePayment
				LocalHoldCode = InvoiceHoldCode
				if (!PayablesHoldCodeRel.InUse)
					invoke SetAsInUse PayablesHoldCodeRel
				if (CashRequirementsResult entered)
					initialize TransactionIDNumber
					initialize CheckDate		
				if (Status = Status.SelectedForPayment)		
					Status = Status.Released
				if (Vendor.IncomeWithholding				
				and Company.GlobalWithholding)
					CalculateWithholdingAmount.PayablesCompany			= Company
					CalculateWithholdingAmount.PayablesInvoice			= PayablesInvoice
					CalculateWithholdingAmount.PayablesInvoicePayment	= PayablesInvoicePayment
					LocalBoolean										= CalculateWithholdingAmount.RemoveWithholding

		UpdateHoldCode is an Instance Action
			valid when (IsHoldUpdatable)
			Parameters
				InvoiceHoldCode is a PayablesHoldCode
					default label is "HoldCode"
			Parameter Rules
				InvoiceHoldCode
					required
					constraint (InvoiceHoldCode.HoldOnInvoice entered)
						"HoldCodeTypeIsNotForInvoicesOrPayments"			
					constraint (InvoiceHoldCode not = PayablesInvoicePaymentsOnHoldRel.HoldCode)
						"NewHoldCodeCannotBeTheSameAsTheCurrentHoldCode"
			Action Rules
				constraint (IsHoldUpdatable)			
					"PaymentIsNotEligibleToBePutOnHold"
				OnHold = true
				invoke Delete PayablesInvoicePaymentsOnHoldRel
				invoke Create PayablesInvoicePaymentsOnHoldRel
					invoked.VendorGroup				= Company.VendorGroup
					invoked.HoldCode 				= InvoiceHoldCode
					invoked.ProcessLevel		 	= PayablesInvoice.ProcessLevel
					invoked.PayablesInvoice			= PayablesInvoice
					invoked.PayablesInvoicePayment	= PayablesInvoicePayment
				OnHoldDate	  = current timestamp		
				initialize OffHoldDate	  				
				LocalHoldCode = InvoiceHoldCode
				if (!PayablesHoldCodeRel.InUse)
					invoke SetAsInUse PayablesHoldCodeRel

				if (InvoiceHoldCode.HoldOnInvoice.PermanentHold)		
					if(!PayablesInvoice.Status.Unreleased and !PayablesInvoice.Status.Approved and !PayablesInvoice.Status.PendingApproval)
						increment PayablesInvoice.bod id.VariationID
						invoke TriggerSupplierInvoiceBOD PayablesInvoice
							invoked.PrmCreateTimeStamp = current timestamp
							invoked.PrmInvoiceOnHold   = true
							invoked.PrmHoldAction      = "C"				




					
		TakeOffHoldFromPaymentClose is an Instance Action
			default label is untranslatable
			restricted
			Action Rules
				OnHold = false
				initialize CashRequirementsResult
				include UpdateLastDateTimeActor
				if (OnHoldDate entered)
					OffHoldDate		= current timestamp

		TakeOffHold is an Instance Action
			default label is "Take_offHold"
			valid when (IsOnHold)
			Action Rules
				constraint (!CashRequirementsResult.Status.Processing)
					"CannotRemoveHold;PaymentIsBeingProcessedByCashRequirementsResult:<CashRequirementsResult>"
				OnHold = false
				if (CashRequirementsResult.Status.Selected)		
					CheckDate = CashRequirementsResult.PaymentDate
					if (Vendor.IncomeWithholding				
					and Company.GlobalWithholding)
						CalculateWithholdingAmount.PayablesCompany			= Company
						CalculateWithholdingAmount.PayablesInvoice			= PayablesInvoice
						CalculateWithholdingAmount.PayablesInvoicePayment	= PayablesInvoicePayment
						if (CashCode.Currency	= InvoiceCurrency)
							CalculateWithholdingAmount.PaymentExchangeRate	= 1
						else
							if (InvoiceCurrency = CashRequirementsResult.InvoiceCurrency
							and CashCode 		= CashRequirementsResult.CashCode
							and CashRequirementsResult.OverridePaymentRate entered)
								CalculateWithholdingAmount.PaymentExchangeRate		= CashRequirementsResult.OverridePaymentRate 
							else	
								LocalExchangeDate									= CheckDate
								LocalCurrencyTable									= PayablesInvoice.CurrencyTable
								LocalCashCodePaymentExchange.TransactionAmount		= PaymentAmount.CurrencyAmount
								LocalCashCodePaymentExchange.BaseAmount.ToCurrency	= CashCode.Currency
								CalculateWithholdingAmount.PaymentExchangeRate		= LocalCashCodePaymentExchange.BaseAmount.OutputCurrencyRate
						WithholdingAmount									= CalculateWithholdingAmount.WithholdingAmount
				if (CashRequirementsResult.Status.Completed)
					initialize CashRequirementsResult
				if (OnHoldDate entered)						
					OffHoldDate		= current timestamp		
				invoke Delete PayablesInvoicePaymentsOnHoldRel


		RemoveManualPaymentInfo is an Instance Action
			restricted
			valid when (IsManuallyCreated)
			Action Rules
				invoke UndoManuallyReservedChecks CashLedgerPayablesPaymentRel		
					invoked.PrmPaymentAmount				= NetPaymentAmount.CurrencyAmount
					invoked.PrmBasePaymentAmount			= NetPaymentAmount.FunctionalAmount.EnteredCurrencyAmount
					invoked.PrmPaidAmountInvoiceCurrency	= BankCheckAmount
					invoked.PrmAppliedBaseAmount			= NetPaymentAmount.CurrencyAmount
				initialize TransactionNumber
				initialize TransactionIDNumber
				initialize CheckDate
				initialize BankCheckAmount
				initialize NetPaymentAmount
				initialize DiscountLost
				initialize ReportableIncomeAmount


		ApplyACreditToThisPayment is an Instance Action

			valid when (IsInvoicePaymentAvailableForCreditApplication)	
			Parameters
				PrmCompany					is a PayablesCompany
				PrmVendor					is a Vendor
				PrmPayablesInvoice			is a PayablesInvoice
				PrmInvoiceNumber			is like Invoice		
				PrmAppliedAmount			is an InternationalAmount	
				PrmEnableAPToARInterface	is Boolean
				PrmBypassCMDueDateChange    is Boolean			
			Parameter Rules
				PrmCompany
					required
					initial value is this instance.Company
					force default to this instance.Company
				PrmVendor
					required
					initial value is this instance.Vendor
					force default to this instance.Vendor
				PrmPayablesInvoice		


					constraint (PrmPayablesInvoice != this instance.PayablesInvoice)					
						"CannotApplyAnInvoiceToItself"
					constraint (PrmPayablesInvoice.Vendor = this instance.Vendor)	
						"CreditMustBeForSameVendorAsInvoice"
					constraint (!IsOnHold)
						"CannotApply;InvoiceIsOnHold"		
					if (PrmPayablesInvoice.IsOnHold)
						constraint (PrmPayablesInvoice.InvoiceHoldCode = Company.VendorGroup.PrepaymentHoldCode)
							"CannotApply;CreditIsOnHold"	
					LocalInvoiceNumber			= PrmPayablesInvoice.PayablesInvoice.Invoice
					LocalInvoiceDate			= PrmPayablesInvoice.PayablesInvoice.InvoiceDate			
					LocalInvoiceSuffix			= PrmPayablesInvoice.PayablesInvoice.Suffix
					LocalPayablesInvoice		= PrmPayablesInvoice.PayablesInvoice										
					LocalPayablesInvoicePayment	= PrmPayablesInvoice.first CreditNotAppliedRel.PayablesInvoicePayment	
					LocalPayablesCreditMemoCredit	= PrmPayablesInvoice.PayablesInvoice.Invoice							
					LocalPayablesCreditMemoCrdSuf	= PrmPayablesInvoice.PayablesInvoice.Suffix								
					LocalPayablesCreditMemoCrdSeq	= PrmPayablesInvoice.first CreditNotAppliedRel.PayablesInvoicePayment.PaymentSequence		
					LocalPayablesCreditMemoCrdPI    = PrmPayablesInvoice.PayablesInvoice			
					LocalPayablesCreditMemoInvoice	= PayablesInvoice.Invoice						
					LocalPayablesCreditMemoInvSuf	= PayablesInvoice.Suffix						
					LocalPayablesCreditMemoInvSeq	= PayablesInvoicePayment.PaymentSequence		
					LocalPayablesCreditMemoInvPI    = PayablesInvoice								
				PrmInvoiceNumber		
					constraint (PrmPayablesInvoice !entered)
						"CannotSelectInvoiceRecordAndEnterInvoiceNumber"
				PrmAppliedAmount
					required
					initial value is PrmPayablesInvoice.first CreditNotAppliedRel.PaymentAmount.CurrencyAmount	
					if (PrmAppliedAmount < 0)		
						PrmAppliedAmount *= -1		

			Entrance Rules
				if (PrmInvoiceNumber entered)			
					LocalInvoiceNumber = PrmInvoiceNumber
					LocalInvoiceDate   = PrmPayablesInvoice.InvoiceDate				
					constraint (LocalPayablesInvoiceNumberRel exists)
						"InvoiceNumberDoesNotExist"
					PrmPayablesInvoice	= first LocalPayablesInvoiceNumberRel.PayablesInvoice		



					constraint (PrmPayablesInvoice != this instance.PayablesInvoice)					
						"CannotApplyAnInvoiceToItself"
					constraint (PrmPayablesInvoice.Vendor = this instance.Vendor)
						"CreditMustBeForSameVendorAsInvoice"
					constraint (!IsOnHold)
						"CannotApply;InvoiceIsOnHold"
					if (PrmPayablesInvoice.IsOnHold)
						constraint (PrmPayablesInvoice.InvoiceHoldCode = Company.VendorGroup.PrepaymentHoldCode)
							"CannotApply;CreditIsOnHold"
					LocalInvoiceNumber			= PrmPayablesInvoice.PayablesInvoice.Invoice
					LocalInvoiceSuffix			= PrmPayablesInvoice.PayablesInvoice.Suffix
					LocalPayablesInvoice		= PrmPayablesInvoice.PayablesInvoice										
					LocalPayablesInvoicePayment	= PrmPayablesInvoice.first CreditNotAppliedRel.PayablesInvoicePayment		
					LocalPayablesCreditMemoCredit	= PrmPayablesInvoice.PayablesInvoice.Invoice							
					LocalPayablesCreditMemoCrdSuf	= PrmPayablesInvoice.PayablesInvoice.Suffix								
					LocalPayablesCreditMemoCrdPI    = PrmPayablesInvoice.PayablesInvoice			
					LocalPayablesCreditMemoCrdSeq	= PrmPayablesInvoice.first CreditNotAppliedRel.PayablesInvoicePayment.PaymentSequence		
					LocalPayablesCreditMemoInvoice	= PayablesInvoice.Invoice						
					LocalPayablesCreditMemoInvSuf	= PayablesInvoice.Suffix						
					LocalPayablesCreditMemoInvSeq	= PayablesInvoicePayment.PaymentSequence		
					LocalPayablesCreditMemoInvPI	= PayablesInvoice								
			Action Rules
				if (PrmPayablesInvoice.InvoiceDate > PayablesInvoice.DueDate			
				and !PrmBypassCMDueDateChange)
					confirmation required
						"InvoiceDueDateOf<PayablesInvoice.DueDate>IsBeforeCreditMemoDateOf<PrmPayablesInvoice.InvoiceDate>.InvoiceDueDateWillBeUpdatedToTheCreditMemoDueDateOf<PrmPayablesInvoice.DueDate>."
						DueDate = PrmPayablesInvoice.DueDate
					invoke FastUpdate PayablesInvoice
						invoked.DueDate = PrmPayablesInvoice.DueDate
					invoke FastUpdate CreditInvoicePayablePaymentRel
    					invoked.DueDate = PayablesInvoice.DueDate
					PrmBypassCMDueDateChange = true
				LocalRunProgram = LocalRunProgram.CreditMemoApplication
				include VerifyProcessingMonitorRule
				include CreditMemoApplyRules	








				constraint (CreditInvoicePayablePaymentRel.PayablesInvoice.InvoiceType.CreditMemo
				or			CreditInvoicePayablePaymentRel.PayablesInvoice.InvoiceType.PrepaymentCredit)
					"EnteredInvoiceMustBeCreditMemoOrPrepaymentCredit"		
				constraint (PayablesCreditMemoCreditFlexRel not exists)
					"Credit<LocalPayablesCreditMemoCredit>-<LocalPayablesCreditMemoCrdSeq>IsAlreadyFullyAppliedToInvoice<first PayablesCreditMemoCreditFlexRel.PayablesCreditMemo.Invoice>"
				constraint ((PrmAppliedAmount * -1) >= CreditInvoicePayablePaymentRel.PaymentAmount.CurrencyAmount)	
					"AppliedAmount<PrmAppliedAmount>CannotBeGreaterThanUnappliedCreditPaymentAmount<CreditInvoicePayablePaymentRel.PaymentAmount.CurrencyAmount>"
				constraint (PaymentAmount.CurrencyAmount >= PrmAppliedAmount)
					"AmountBeingApplied<PrmAppliedAmount>,ExceedsTheUnappliedAmountOfTheInvoice<PaymentAmount.CurrencyAmount>"	 
				LocalPayablesCreditMemoCredit		= CreditInvoicePayablePaymentRel.PayablesInvoice.Invoice
				LocalPayablesCreditMemoCrdSuf		= CreditInvoicePayablePaymentRel.PayablesInvoice.Suffix
				LocalPayablesCreditMemoCrdPI		= CreditInvoicePayablePaymentRel.PayablesInvoice		
				LocalPayablesCreditMemoInvoice		= PayablesInvoice.Invoice
				LocalPayablesCreditMemoInvSuf		= PayablesInvoice.Suffix
				LocalPayablesCreditMemoInvPI		= PayablesInvoice										

				if (SeparatePayment)										
					confirmation required
						"ThisInvoiceIsFlaggedForSeparatePayment.Select_'Yes'_toRemoveThe_\Separate_\PaymentFlagAndApplyTheSelectedCreditToThisInvoice"
					SeparatePayment				= false


				if (CreditInvoicePayablePaymentRel.PayablesInvoicePayment.PaymentSequence = 1)	
					if (PrmAppliedAmount = CreditInvoicePayablePaymentRel.PaymentAmount.CurrencyAmount * -1)	
						if (PayablesInvoicePayment.PaymentSequence = 1)		
							if (PrmAppliedAmount = PaymentAmount.CurrencyAmount)	
								invoke Update CreditInvoicePayablePaymentRel		
									invoked.SeparatePayment		= false
									invoked.PayImmediately		= PayImmediately
									invoked.CashCode			= CashCode
									invoked.BankTransactionCode	= BankTransactionCode
									invoked.InvoiceGroup		= InvoiceGroup
									invoked.PaymentPriority		= PaymentPriority		
									if (!PrmBypassCMDueDateChange)						
										invoked.DueDate			= DueDate				

								LocalCreditPaymentSequence	= CreditInvoicePayablePaymentRel.PayablesInvoicePayment.PaymentSequence
								LocalInvoicePaymentSequence	= PayablesInvoicePayment.PaymentSequence
								include CreatePayablesCreditMemoBlock
							else		
								invoke Update CreditInvoicePayablePaymentRel		
									invoked.SeparatePayment					= false
									invoked.PayImmediately					= PayImmediately
									invoked.CashCode						= CashCode
									invoked.BankTransactionCode				= BankTransactionCode
									invoked.InvoiceGroup					= InvoiceGroup
									invoked.PaymentPriority					= PaymentPriority		
									if (!PrmBypassCMDueDateChange)									
										invoked.DueDate						= DueDate				

								LocalCreditPaymentSequence	= CreditInvoicePayablePaymentRel.PayablesInvoicePayment.PaymentSequence
								LocalInvoicePaymentSequence	= PayablesInvoicePayment.PaymentSequence	
								include CreatePayablesCreditMemoBlock
						else	
							if (PrmAppliedAmount = PaymentAmount.CurrencyAmount)
								invoke Update CreditInvoicePayablePaymentRel		
									invoked.SeparatePayment					= false
									invoked.PayImmediately					= PayImmediately
									invoked.CashCode						= CashCode
									invoked.BankTransactionCode				= BankTransactionCode
									invoked.InvoiceGroup					= InvoiceGroup
									invoked.PaymentPriority					= PaymentPriority		
									if (!PrmBypassCMDueDateChange)									
										invoked.DueDate						= DueDate				

								LocalCreditPaymentSequence	= CreditInvoicePayablePaymentRel.PayablesInvoicePayment.PaymentSequence
								LocalInvoicePaymentSequence	= PayablesInvoicePayment.PaymentSequence
								include CreatePayablesCreditMemoBlock
							else
								invoke Update CreditInvoicePayablePaymentRel		
									invoked.SeparatePayment					= false
									invoked.PayImmediately					= PayImmediately
									invoked.CashCode						= CashCode
									invoked.BankTransactionCode				= BankTransactionCode
									invoked.InvoiceGroup					= InvoiceGroup
									invoked.PaymentPriority					= PaymentPriority		
									if (!PrmBypassCMDueDateChange)									
										invoked.DueDate						= DueDate				

								LocalCreditPaymentSequence	= CreditInvoicePayablePaymentRel.PayablesInvoicePayment.PaymentSequence
								LocalInvoicePaymentSequence	= PayablesInvoicePayment.PaymentSequence	
								include CreatePayablesCreditMemoBlock
					else	
						if (PayablesInvoicePayment.PaymentSequence = 1)
							if (PrmAppliedAmount = PaymentAmount.CurrencyAmount)


								invoke Update CreditInvoicePayablePaymentRel
									invoked.PaymentAmount.CurrencyAmount   -= PrmAppliedAmount * -1
									invoked.PaymentAmount.KeepRateOnly		= true
									invoked.TransientBypassUpdateEdit 		= true
									invoked.TransientAllowChange 			= true
									invoked.SeparatePayment					= false
									invoked.TransEnableAPToARInterface		= PrmEnableAPToARInterface
								invoke Create PayablesInvoicePayment
									fill in fields from CreditInvoicePayablePaymentRel
										except invoked.PaymentAmount
									invoked.PaymentAmount.CurrencyAmount	= PrmAppliedAmount * -1
									invoked.SeparatePayment					= false
									invoked.PayImmediately					= PayImmediately
									invoked.CashCode						= CashCode
									invoked.BankTransactionCode				= BankTransactionCode
									invoked.InvoiceGroup					= InvoiceGroup
									invoked.PaymentPriority					= PaymentPriority		
									if (!PrmBypassCMDueDateChange)									
										invoked.DueDate						= DueDate				
									invoked.TransientReleaseAfterCreate		= true

								LocalCreditPaymentSequence	= CreditInvoicePayablePaymentRel.last PayablesInvoicePaymentRel.PayablesInvoicePayment.PaymentSequence
								LocalInvoicePaymentSequence	= PayablesInvoicePayment.PaymentSequence
								include CreatePayablesCreditMemoBlock
							else


								invoke Update CreditInvoicePayablePaymentRel
									invoked.PaymentAmount.CurrencyAmount   -= PrmAppliedAmount * -1
									invoked.PaymentAmount.KeepRateOnly		= true
									invoked.TransientBypassUpdateEdit 		= true
									invoked.SeparatePayment					= false
									initialize invoked.ReportableIncomeAmount
									invoked.TransientAllowChange 			= true
								invoke Create PayablesInvoicePayment
									fill in fields from CreditInvoicePayablePaymentRel
										except invoked.PaymentAmount
										except invoked.ReportableIncomeAmount
									invoked.PaymentAmount.CurrencyAmount	= PrmAppliedAmount * -1
									invoked.SeparatePayment					= false
									invoked.PayImmediately					= PayImmediately
									invoked.CashCode						= CashCode
									invoked.BankTransactionCode				= BankTransactionCode
									invoked.InvoiceGroup					= InvoiceGroup
									invoked.PaymentPriority					= PaymentPriority		
									if (!PrmBypassCMDueDateChange)									
										invoked.DueDate						= DueDate				

									invoked.TransientReleaseAfterCreate		= true

								LocalCreditPaymentSequence	= CreditInvoicePayablePaymentRel.last PayablesInvoicePaymentRel.PayablesInvoicePayment.PaymentSequence
								LocalInvoicePaymentSequence	= PayablesInvoicePayment.PaymentSequence	
								include CreatePayablesCreditMemoBlock
						else	
							if (PrmAppliedAmount = PaymentAmount.CurrencyAmount)


								invoke Update CreditInvoicePayablePaymentRel
									invoked.PaymentAmount.CurrencyAmount   -= PrmAppliedAmount * -1
									invoked.PaymentAmount.KeepRateOnly		= true
									invoked.TransientBypassUpdateEdit 		= true
									invoked.TransientAllowChange 			= true
									invoked.SeparatePayment					= false
								invoke Create PayablesInvoicePayment
									fill in fields from CreditInvoicePayablePaymentRel
										except invoked.PaymentAmount
									invoked.PaymentAmount.CurrencyAmount	= PrmAppliedAmount * -1
									invoked.SeparatePayment					= false
									invoked.PayImmediately					= PayImmediately
									invoked.CashCode						= CashCode
									invoked.BankTransactionCode				= BankTransactionCode
									invoked.InvoiceGroup					= InvoiceGroup
									invoked.PaymentPriority					= PaymentPriority		
									if (!PrmBypassCMDueDateChange)									
										invoked.DueDate						= DueDate				
									invoked.TransientReleaseAfterCreate		= true

								LocalCreditPaymentSequence	= CreditInvoicePayablePaymentRel.last PayablesInvoicePaymentRel.PayablesInvoicePayment.PaymentSequence
								LocalInvoicePaymentSequence	= PayablesInvoicePayment.PaymentSequence
								include CreatePayablesCreditMemoBlock
							else


								invoke Update CreditInvoicePayablePaymentRel
									invoked.PaymentAmount.CurrencyAmount   -= PrmAppliedAmount * -1
									invoked.PaymentAmount.KeepRateOnly		= true
									invoked.TransientBypassUpdateEdit 		= true
									invoked.SeparatePayment					= false
									initialize invoked.ReportableIncomeAmount
									invoked.TransientAllowChange 			= true
								invoke Create PayablesInvoicePayment
									fill in fields from CreditInvoicePayablePaymentRel
										except invoked.PaymentAmount
										except invoked.ReportableIncomeAmount
									invoked.PaymentAmount.CurrencyAmount	= PrmAppliedAmount * -1
									invoked.SeparatePayment					= false
									invoked.PayImmediately					= PayImmediately
									invoked.CashCode						= CashCode
									invoked.BankTransactionCode				= BankTransactionCode
									invoked.InvoiceGroup					= InvoiceGroup
									invoked.PaymentPriority					= PaymentPriority		
									if (!PrmBypassCMDueDateChange)									
										invoked.DueDate						= DueDate				

									invoked.TransientReleaseAfterCreate		= true

								LocalCreditPaymentSequence	= CreditInvoicePayablePaymentRel.last PayablesInvoicePaymentRel.PayablesInvoicePayment.PaymentSequence
								LocalInvoicePaymentSequence	= PayablesInvoicePayment.PaymentSequence	
								include CreatePayablesCreditMemoBlock
				else	
					if (PrmAppliedAmount = CreditInvoicePayablePaymentRel.PaymentAmount.CurrencyAmount * -1)
						if (PayablesInvoicePayment.PaymentSequence = 1)
							if (PrmAppliedAmount = PaymentAmount.CurrencyAmount)
								invoke Update CreditInvoicePayablePaymentRel		
									invoked.SeparatePayment					= false
									invoked.PayImmediately					= PayImmediately
									invoked.CashCode						= CashCode
									invoked.BankTransactionCode				= BankTransactionCode
									invoked.InvoiceGroup					= InvoiceGroup
									invoked.PaymentPriority					= PaymentPriority		
									if (!PrmBypassCMDueDateChange)									
										invoked.DueDate						= DueDate				

								LocalCreditPaymentSequence	= CreditInvoicePayablePaymentRel.PayablesInvoicePayment.PaymentSequence
								LocalInvoicePaymentSequence	= PayablesInvoicePayment.PaymentSequence
								include CreatePayablesCreditMemoBlock
							else
								invoke Update CreditInvoicePayablePaymentRel		
									invoked.SeparatePayment					= false
									invoked.PayImmediately					= PayImmediately
									invoked.CashCode						= CashCode
									invoked.BankTransactionCode				= BankTransactionCode
									invoked.InvoiceGroup					= InvoiceGroup
									invoked.PaymentPriority					= PaymentPriority		
									if (!PrmBypassCMDueDateChange)									
										invoked.DueDate						= DueDate				

								LocalCreditPaymentSequence	= CreditInvoicePayablePaymentRel.PayablesInvoicePayment.PaymentSequence
								LocalInvoicePaymentSequence	= PayablesInvoicePayment.PaymentSequence	
								include CreatePayablesCreditMemoBlock
						else
							if (PrmAppliedAmount = PaymentAmount.CurrencyAmount)
								invoke Update CreditInvoicePayablePaymentRel		
									invoked.SeparatePayment					= false
									invoked.PayImmediately					= PayImmediately
									invoked.CashCode						= CashCode
									invoked.BankTransactionCode				= BankTransactionCode
									invoked.InvoiceGroup					= InvoiceGroup
									invoked.PaymentPriority					= PaymentPriority		
									if (!PrmBypassCMDueDateChange)									
										invoked.DueDate						= DueDate				

								LocalCreditPaymentSequence	= CreditInvoicePayablePaymentRel.PayablesInvoicePayment.PaymentSequence
								LocalInvoicePaymentSequence	= PayablesInvoicePayment.PaymentSequence
								include CreatePayablesCreditMemoBlock
							else
								invoke Update CreditInvoicePayablePaymentRel		
									invoked.SeparatePayment					= false
									invoked.PayImmediately					= PayImmediately
									invoked.CashCode						= CashCode
									invoked.BankTransactionCode				= BankTransactionCode
									invoked.InvoiceGroup					= InvoiceGroup
									invoked.PaymentPriority					= PaymentPriority		
									if (!PrmBypassCMDueDateChange)									
										invoked.DueDate						= DueDate				

								LocalCreditPaymentSequence	= CreditInvoicePayablePaymentRel.PayablesInvoicePayment.PaymentSequence
								LocalInvoicePaymentSequence	= PayablesInvoicePayment.PaymentSequence	
								include CreatePayablesCreditMemoBlock
					else	
						if (PayablesInvoicePayment.PaymentSequence = 1)
							if (PrmAppliedAmount = PaymentAmount.CurrencyAmount)


								invoke Update CreditInvoicePayablePaymentRel
									invoked.PaymentAmount.CurrencyAmount   -= PrmAppliedAmount * -1
									invoked.PaymentAmount.KeepRateOnly		= true
									invoked.TransientBypassUpdateEdit 		= true
									invoked.TransientAllowChange 			= true
									invoked.SeparatePayment					= false
								invoke Create PayablesInvoicePayment
									fill in fields from CreditInvoicePayablePaymentRel
										except invoked.PaymentAmount
									invoked.PaymentAmount.CurrencyAmount	= PrmAppliedAmount * -1
									invoked.SeparatePayment					= false
									invoked.PayImmediately					= PayImmediately
									invoked.CashCode						= CashCode
									invoked.BankTransactionCode				= BankTransactionCode
									invoked.InvoiceGroup					= InvoiceGroup
									invoked.PaymentPriority					= PaymentPriority		
									if (!PrmBypassCMDueDateChange)									
										invoked.DueDate						= DueDate				
									invoked.TransientReleaseAfterCreate		= true

								LocalCreditPaymentSequence	= CreditInvoicePayablePaymentRel.last PayablesInvoicePaymentRel.PayablesInvoicePayment.PaymentSequence
								LocalInvoicePaymentSequence	= PayablesInvoicePayment.PaymentSequence
								include CreatePayablesCreditMemoBlock
							else


								invoke Update CreditInvoicePayablePaymentRel
									invoked.PaymentAmount.CurrencyAmount   -= PrmAppliedAmount * -1
									invoked.PaymentAmount.KeepRateOnly		= true
									invoked.TransientBypassUpdateEdit 		= true
									invoked.SeparatePayment					= false
									initialize invoked.ReportableIncomeAmount
									invoked.TransientAllowChange 			= true
								invoke Create PayablesInvoicePayment
									fill in fields from CreditInvoicePayablePaymentRel
										except invoked.PaymentAmount
										except invoked.ReportableIncomeAmount
									invoked.PaymentAmount.CurrencyAmount	= PrmAppliedAmount * -1
									invoked.SeparatePayment					= false
									invoked.PayImmediately					= PayImmediately
									invoked.CashCode						= CashCode
									invoked.BankTransactionCode				= BankTransactionCode
									invoked.InvoiceGroup					= InvoiceGroup
									invoked.PaymentPriority					= PaymentPriority		
									if (!PrmBypassCMDueDateChange)									
										invoked.DueDate						= DueDate				

									invoked.TransientReleaseAfterCreate		= true

								LocalCreditPaymentSequence	= CreditInvoicePayablePaymentRel.last PayablesInvoicePaymentRel.PayablesInvoicePayment.PaymentSequence
								LocalInvoicePaymentSequence	= PayablesInvoicePayment.PaymentSequence	
								include CreatePayablesCreditMemoBlock
						else
							if (PrmAppliedAmount = PaymentAmount.CurrencyAmount)


								invoke Update CreditInvoicePayablePaymentRel
									invoked.PaymentAmount.CurrencyAmount   -= PrmAppliedAmount * -1
									invoked.PaymentAmount.KeepRateOnly		= true
									invoked.TransientBypassUpdateEdit 		= true
									invoked.TransientAllowChange 			= true
									invoked.SeparatePayment					= false
								invoke Create PayablesInvoicePayment
									fill in fields from CreditInvoicePayablePaymentRel
										except invoked.PaymentAmount
									invoked.PaymentAmount.CurrencyAmount	= PrmAppliedAmount * -1
									invoked.SeparatePayment					= false
									invoked.PayImmediately					= PayImmediately
									invoked.CashCode						= CashCode
									invoked.BankTransactionCode				= BankTransactionCode
									invoked.InvoiceGroup					= InvoiceGroup
									invoked.PaymentPriority					= PaymentPriority		
									if (!PrmBypassCMDueDateChange)									
										invoked.DueDate						= DueDate				
									invoked.TransientReleaseAfterCreate		= true

								LocalCreditPaymentSequence	= CreditInvoicePayablePaymentRel.last PayablesInvoicePaymentRel.PayablesInvoicePayment.PaymentSequence
								LocalInvoicePaymentSequence	= PayablesInvoicePayment.PaymentSequence	
								include CreatePayablesCreditMemoBlock
							else


								invoke Update CreditInvoicePayablePaymentRel
									invoked.PaymentAmount.CurrencyAmount   -= PrmAppliedAmount * -1
									invoked.PaymentAmount.KeepRateOnly		= true
									invoked.TransientBypassUpdateEdit 		= true
									invoked.SeparatePayment					= false
									initialize invoked.ReportableIncomeAmount
									invoked.TransientAllowChange 			= true
								invoke Create PayablesInvoicePayment
									fill in fields from CreditInvoicePayablePaymentRel
										except invoked.PaymentAmount
										except invoked.ReportableIncomeAmount
									invoked.PaymentAmount.CurrencyAmount	= PrmAppliedAmount * -1
									invoked.SeparatePayment					= false
									invoked.PayImmediately					= PayImmediately
									invoked.CashCode						= CashCode
									invoked.BankTransactionCode				= BankTransactionCode
									invoked.InvoiceGroup					= InvoiceGroup
									invoked.PaymentPriority					= PaymentPriority		
									if (!PrmBypassCMDueDateChange)									
										invoked.DueDate						= DueDate				

									invoked.TransientReleaseAfterCreate		= true

								LocalCreditPaymentSequence	= CreditInvoicePayablePaymentRel.last PayablesInvoicePaymentRel.PayablesInvoicePayment.PaymentSequence
								LocalInvoicePaymentSequence	= PayablesInvoicePayment.PaymentSequence	
								include CreatePayablesCreditMemoBlock
				initialize TransientBypassUpdateEdit










		ApplyAnInvoiceToThisCredit is an Instance Action
			restricted
			valid when (IsCreditAvailableForInvoiceApplication)
			Parameters
				PrmCompany					is a PayablesCompany
				PrmVendor					is a Vendor
				PrmPayablesInvoice			is a PayablesInvoice		
				PrmAppliedAmount			is an InternationalAmount	
				PrmBypassCMDueDateChange	is Boolean					
			Parameter Rules
				PrmCompany
					required
				PrmVendor
					required
				PrmPayablesInvoice
					required
					LocalInvoiceNumber			= PrmPayablesInvoice.PayablesInvoice.Invoice
					LocalInvoiceDate			= PrmPayablesInvoice.PayablesInvoice.InvoiceDate	
					LocalInvoiceSuffix			= PrmPayablesInvoice.PayablesInvoice.Suffix
					LocalPayablesInvoice		= PrmPayablesInvoice.PayablesInvoice
					LocalPayablesInvoicePayment	= PrmPayablesInvoice.first PayablesInvoicePaymentRel.PayablesInvoicePayment

					LocalPayablesCreditMemoInvoice	= PrmPayablesInvoice.PayablesInvoice.Invoice	
					LocalPayablesCreditMemoInvSuf	= PrmPayablesInvoice.PayablesInvoice.Suffix		
					LocalPayablesCreditMemoInvSeq	= PrmPayablesInvoice.first PayablesInvoicePaymentRel.PayablesInvoicePayment.PaymentSequence		
					LocalPayablesCreditMemoInvPI	= PrmPayablesInvoice							
					LocalPayablesCreditMemoCredit	= PayablesInvoice.Invoice						
					LocalPayablesCreditMemoCrdSuf	= PayablesInvoice.Suffix						
					LocalPayablesCreditMemoCrdPI	= PayablesInvoice								
					LocalPayablesCreditMemoCrdSeq	= PayablesInvoice.first CreditNotAppliedRel.PayablesInvoicePayment.PaymentSequence		
				PrmAppliedAmount
					required

			Local Fields
				ClearSeparatePay	is Boolean

			Action Rules

				if (PrmPayablesInvoice.DueDate < PayablesInvoice.InvoiceDate			
				and !PrmBypassCMDueDateChange)
					confirmation required
						"InvoiceDueDateOf<PrmPayablesInvoice.DueDate>IsBeforeCreditMemoDateOf<PayablesInvoice.InvoiceDate>.InvoiceDueDateWillBeUpdatedToTheCreditMemoDueDateOf<PayablesInvoice.DueDate>."
					invoke FastUpdate PrmPayablesInvoice		
						invoked.DueDate = PayablesInvoice.DueDate
					invoke FastUpdate CreditInvoicePayablePaymentRel
    					invoked.DueDate = PayablesInvoice.DueDate
					PrmBypassCMDueDateChange = true
				LocalRunProgram	 = LocalRunProgram.CreditMemoApplication
				include VerifyProcessingMonitorRule
				include CreditMemoApplyRules	








				constraint (!CreditInvoicePayablePaymentRel.PayablesInvoice.InvoiceType.CreditMemo
				and			!CreditInvoicePayablePaymentRel.PayablesInvoice.InvoiceType.PrepaymentCredit)
					"EnteredInvoiceCannotBeCreditMemoOrPrepaymentCredit"		

				constraint (PayablesCreditMemoCreditFlexRel not exists)
					"Credit<LocalPayablesCreditMemoCredit>-<LocalPayablesCreditMemoCrdSeq>IsAlreadyFullyAppliedToInvoice<first PayablesCreditMemoCreditFlexRel.PayablesCreditMemo.Invoice>"

				constraint (PrmAppliedAmount <= CreditInvoicePayablePaymentRel.PaymentAmount.CurrencyAmount)
					"AppliedAmount<PrmAppliedAmount>CannotBeGreaterThanTheUnappliedInvoicePaymentAmount<CreditInvoicePayablePaymentRel.PaymentAmount.CurrencyAmount>"
				constraint (PaymentAmount.CurrencyAmount <= (PrmAppliedAmount * -1))
					"AmountBeingApplied<PrmAppliedAmount>ExceedsTheUnappliedAmountOfThisCredit<PaymentAmount.CurrencyAmount>"	
				LocalPayablesCreditMemoCredit		= PayablesInvoice.Invoice
				LocalPayablesCreditMemoCrdSuf		= PayablesInvoice.Suffix
				LocalPayablesCreditMemoCrdPI		= PayablesInvoice						
				LocalPayablesCreditMemoInvoice		= CreditInvoicePayablePaymentRel.PayablesInvoice.Invoice
				LocalPayablesCreditMemoInvSuf		= CreditInvoicePayablePaymentRel.PayablesInvoice.Suffix
				LocalPayablesCreditMemoInvPI		= CreditInvoicePayablePaymentRel.PayablesInvoice		


				if (CreditInvoicePayablePaymentRel.SeparatePayment)		
					confirmation required
						"TheSelectedInvoiceIsFlaggedForSeparatePayment.Selecting_'Yes'_willRemoveThe_\Separate_\PaymentFlagFromTheInvoiceAndApplyThisCreditToTheInvoice"
					ClearSeparatePay	= true


				if (CreditInvoicePayablePaymentRel.PayablesInvoicePayment.PaymentSequence = 1)	
					if (PrmAppliedAmount = CreditInvoicePayablePaymentRel.PaymentAmount.CurrencyAmount)	
						if (PayablesInvoicePayment.PaymentSequence = 1)		
							if (PrmAppliedAmount = PaymentAmount.CurrencyAmount * -1)	
								if (ClearSeparatePay)
									invoke FastUpdate CreditInvoicePayablePaymentRel
										invoked.SeparatePayment		= false
								if (CashCode			!= CreditInvoicePayablePaymentRel.CashCode
								or  BankTransactionCode	!= CreditInvoicePayablePaymentRel.BankTransactionCode
								or  PayImmediately		!= CreditInvoicePayablePaymentRel.PayImmediately
								or  InvoiceGroup		!= CreditInvoicePayablePaymentRel.InvoiceGroup
								or  PaymentPriority		!= CreditInvoicePayablePaymentRel.PaymentPriority		
								or  DueDate				!= CreditInvoicePayablePaymentRel.DueDate)				
									invoke Update
										invoked.CashCode			= CreditInvoicePayablePaymentRel.CashCode
										invoked.BankTransactionCode	= CreditInvoicePayablePaymentRel.BankTransactionCode
										invoked.PayImmediately		= CreditInvoicePayablePaymentRel.PayImmediately
										invoked.InvoiceGroup		= CreditInvoicePayablePaymentRel.InvoiceGroup
										invoked.PaymentPriority		= CreditInvoicePayablePaymentRel.PaymentPriority		
										if (!PrmBypassCMDueDateChange)														
											invoked.DueDate			= CreditInvoicePayablePaymentRel.DueDate				
										invoked.SeparatePayment		= false

								LocalInvoicePaymentSequence	= CreditInvoicePayablePaymentRel.PayablesInvoicePayment.PaymentSequence
								LocalCreditPaymentSequence	= PayablesInvoicePayment.PaymentSequence
								include CreatePayablesCreditMemoBlock
							else
								if (ClearSeparatePay)
									invoke FastUpdate CreditInvoicePayablePaymentRel
										invoked.SeparatePayment		= false


								invoke Update		
									invoked.PaymentAmount.CurrencyAmount   += PrmAppliedAmount
									invoked.PaymentAmount.KeepRateOnly    	= true
									invoked.TransientBypassUpdateEdit 		= true
									initialize invoked.ReportableIncomeAmount
								invoke Create		
									fill in fields from this instance
										except invoked.PaymentAmount
										except invoked.ReportableIncomeAmount
									invoked.PaymentAmount.CurrencyAmount	= PrmAppliedAmount * -1

									invoked.TransientReleaseAfterCreate		= true
									invoked.CashCode						= CreditInvoicePayablePaymentRel.CashCode
									invoked.BankTransactionCode				= CreditInvoicePayablePaymentRel.BankTransactionCode
									invoked.PayImmediately					= CreditInvoicePayablePaymentRel.PayImmediately
									invoked.InvoiceGroup					= CreditInvoicePayablePaymentRel.InvoiceGroup
									invoked.PaymentPriority					= CreditInvoicePayablePaymentRel.PaymentPriority		
									if (!PrmBypassCMDueDateChange)																	
										invoked.DueDate						= CreditInvoicePayablePaymentRel.DueDate				
									invoked.SeparatePayment					= false

								LocalInvoicePaymentSequence	= CreditInvoicePayablePaymentRel.PayablesInvoicePayment.PaymentSequence
								LocalCreditPaymentSequence	= last PayablesInvoicePaymentRel.PayablesInvoicePayment.PaymentSequence
								include CreatePayablesCreditMemoBlock
						else		
							if (PrmAppliedAmount = PaymentAmount.CurrencyAmount * -1)
								if (ClearSeparatePay)
									invoke FastUpdate CreditInvoicePayablePaymentRel
										invoked.SeparatePayment		= false
								if (CashCode				!= CreditInvoicePayablePaymentRel.CashCode
								or  BankTransactionCode		!= CreditInvoicePayablePaymentRel.BankTransactionCode
								or  PayImmediately			!= CreditInvoicePayablePaymentRel.PayImmediately
								or  InvoiceGroup			!= CreditInvoicePayablePaymentRel.InvoiceGroup
								or  PaymentPriority			!= CreditInvoicePayablePaymentRel.PaymentPriority		
								or  DueDate					!= CreditInvoicePayablePaymentRel.DueDate				
								or  ClearSeparatePay)
									invoke Update
										invoked.CashCode			= CreditInvoicePayablePaymentRel.CashCode
										invoked.BankTransactionCode	= CreditInvoicePayablePaymentRel.BankTransactionCode
										invoked.PayImmediately		= CreditInvoicePayablePaymentRel.PayImmediately
										invoked.InvoiceGroup		= CreditInvoicePayablePaymentRel.InvoiceGroup
										invoked.PaymentPriority		= CreditInvoicePayablePaymentRel.PaymentPriority		
										if (!PrmBypassCMDueDateChange)														
											invoked.DueDate			= CreditInvoicePayablePaymentRel.DueDate				
										invoked.SeparatePayment		= false

								LocalInvoicePaymentSequence	= CreditInvoicePayablePaymentRel.PayablesInvoicePayment.PaymentSequence
								LocalCreditPaymentSequence	= PayablesInvoicePayment.PaymentSequence
								include CreatePayablesCreditMemoBlock
							else
								if (ClearSeparatePay)
									invoke FastUpdate CreditInvoicePayablePaymentRel
										invoked.SeparatePayment		= false


								invoke Update
									invoked.PaymentAmount.CurrencyAmount   += PrmAppliedAmount
									invoked.PaymentAmount.KeepRateOnly    	= true
									invoked.TransientBypassUpdateEdit 		= true
									initialize invoked.ReportableIncomeAmount
								invoke Create
									fill in fields from this instance
										except invoked.PaymentAmount
										except invoked.ReportableIncomeAmount
									invoked.PaymentAmount.CurrencyAmount	= PrmAppliedAmount * -1

									invoked.TransientReleaseAfterCreate		= true
									invoked.CashCode						= CreditInvoicePayablePaymentRel.CashCode
									invoked.BankTransactionCode				= CreditInvoicePayablePaymentRel.BankTransactionCode
									invoked.PayImmediately					= CreditInvoicePayablePaymentRel.PayImmediately
									invoked.InvoiceGroup					= CreditInvoicePayablePaymentRel.InvoiceGroup
									invoked.PaymentPriority					= CreditInvoicePayablePaymentRel.PaymentPriority		
									if (!PrmBypassCMDueDateChange)																	
										invoked.DueDate						= CreditInvoicePayablePaymentRel.DueDate				
									invoked.SeparatePayment					= false

								LocalInvoicePaymentSequence	= CreditInvoicePayablePaymentRel.PayablesInvoicePayment.PaymentSequence
								LocalCreditPaymentSequence	= last PayablesInvoicePaymentRel.PayablesInvoicePayment.PaymentSequence
								include CreatePayablesCreditMemoBlock
					else	
						if (PayablesInvoicePayment.PaymentSequence = 1)		
							if (PrmAppliedAmount = PaymentAmount.CurrencyAmount * -1)	
								if (ClearSeparatePay)
									invoke FastUpdate CreditInvoicePayablePaymentRel
										invoked.SeparatePayment		= false
								if (CashCode				!= CreditInvoicePayablePaymentRel.CashCode
								or  BankTransactionCode		!= CreditInvoicePayablePaymentRel.BankTransactionCode
								or  PayImmediately			!= CreditInvoicePayablePaymentRel.PayImmediately
								or  InvoiceGroup			!= CreditInvoicePayablePaymentRel.InvoiceGroup
								or  PaymentPriority			!= CreditInvoicePayablePaymentRel.PaymentPriority		
								or  DueDate					!= CreditInvoicePayablePaymentRel.DueDate)				
									invoke Update
										invoked.CashCode			= CreditInvoicePayablePaymentRel.CashCode
										invoked.BankTransactionCode	= CreditInvoicePayablePaymentRel.BankTransactionCode
										invoked.PayImmediately		= CreditInvoicePayablePaymentRel.PayImmediately
										invoked.InvoiceGroup		= CreditInvoicePayablePaymentRel.InvoiceGroup
										invoked.PaymentPriority		= CreditInvoicePayablePaymentRel.PaymentPriority		
										if (!PrmBypassCMDueDateChange)														
											invoked.DueDate			= CreditInvoicePayablePaymentRel.DueDate				
										invoked.SeparatePayment		= false


								LocalInvoicePaymentSequence	= CreditInvoicePayablePaymentRel.PayablesInvoicePayment.PaymentSequence
								LocalCreditPaymentSequence	= PayablesInvoicePayment.PaymentSequence
								include CreatePayablesCreditMemoBlock
							else	
								if (ClearSeparatePay)
									invoke FastUpdate CreditInvoicePayablePaymentRel
										invoked.SeparatePayment		= false


								invoke Update
									invoked.PaymentAmount.CurrencyAmount   += PrmAppliedAmount
									invoked.PaymentAmount.KeepRateOnly    	= true
									invoked.TransientBypassUpdateEdit 		= true
									initialize invoked.ReportableIncomeAmount
								invoke Create
									fill in fields from this instance
										except invoked.PaymentAmount
										except invoked.ReportableIncomeAmount
									invoked.PaymentAmount.CurrencyAmount	= PrmAppliedAmount * -1

									invoked.CashCode						= CreditInvoicePayablePaymentRel.CashCode
									invoked.BankTransactionCode				= CreditInvoicePayablePaymentRel.BankTransactionCode
									invoked.PayImmediately					= CreditInvoicePayablePaymentRel.PayImmediately
									invoked.InvoiceGroup					= CreditInvoicePayablePaymentRel.InvoiceGroup
									invoked.PaymentPriority					= CreditInvoicePayablePaymentRel.PaymentPriority		
									if (!PrmBypassCMDueDateChange)																	
										invoked.DueDate						= CreditInvoicePayablePaymentRel.DueDate				
									invoked.SeparatePayment					= false
									invoked.TransientReleaseAfterCreate		= true


								LocalInvoicePaymentSequence	= CreditInvoicePayablePaymentRel.PayablesInvoicePayment.PaymentSequence
								LocalCreditPaymentSequence	= last PayablesInvoicePaymentRel.PayablesInvoicePayment.PaymentSequence
								include CreatePayablesCreditMemoBlock
						else	
							if (PrmAppliedAmount = PaymentAmount.CurrencyAmount * -1)
								if (ClearSeparatePay)
									invoke FastUpdate CreditInvoicePayablePaymentRel
										invoked.SeparatePayment		= false
								if (CashCode				!= CreditInvoicePayablePaymentRel.CashCode
								or  BankTransactionCode		!= CreditInvoicePayablePaymentRel.BankTransactionCode
								or  PayImmediately			!= CreditInvoicePayablePaymentRel.PayImmediately
								or  InvoiceGroup			!= CreditInvoicePayablePaymentRel.InvoiceGroup
								or  PaymentPriority			!= CreditInvoicePayablePaymentRel.PaymentPriority		
								or  DueDate					!= CreditInvoicePayablePaymentRel.DueDate)				
									invoke Update
										invoked.CashCode			= CreditInvoicePayablePaymentRel.CashCode
										invoked.BankTransactionCode	= CreditInvoicePayablePaymentRel.BankTransactionCode
										invoked.PayImmediately		= CreditInvoicePayablePaymentRel.PayImmediately
										invoked.InvoiceGroup		= CreditInvoicePayablePaymentRel.InvoiceGroup
										invoked.PaymentPriority		= CreditInvoicePayablePaymentRel.PaymentPriority		
										if (!PrmBypassCMDueDateChange)														
											invoked.DueDate			= CreditInvoicePayablePaymentRel.DueDate				
										invoked.SeparatePayment		= false


								LocalInvoicePaymentSequence	= CreditInvoicePayablePaymentRel.PayablesInvoicePayment.PaymentSequence
								LocalCreditPaymentSequence	= PayablesInvoicePayment.PaymentSequence
								include CreatePayablesCreditMemoBlock
							else
								if (ClearSeparatePay)
									invoke FastUpdate CreditInvoicePayablePaymentRel
										invoked.SeparatePayment		= false


								invoke Update
									invoked.PaymentAmount.CurrencyAmount   += PrmAppliedAmount
									invoked.PaymentAmount.KeepRateOnly    	= true
									invoked.TransientBypassUpdateEdit 		= true
									initialize invoked.ReportableIncomeAmount
								invoke Create
									fill in fields from this instance
										except invoked.PaymentAmount
										except invoked.ReportableIncomeAmount
									invoked.PaymentAmount.CurrencyAmount	= PrmAppliedAmount * -1

									invoked.CashCode						= CreditInvoicePayablePaymentRel.CashCode
									invoked.BankTransactionCode				= CreditInvoicePayablePaymentRel.BankTransactionCode
									invoked.PayImmediately					= CreditInvoicePayablePaymentRel.PayImmediately
									invoked.InvoiceGroup					= CreditInvoicePayablePaymentRel.InvoiceGroup
									invoked.PaymentPriority					= CreditInvoicePayablePaymentRel.PaymentPriority		
									if (!PrmBypassCMDueDateChange)																	
										invoked.DueDate						= CreditInvoicePayablePaymentRel.DueDate				
									invoked.SeparatePayment					= false
									invoked.TransientReleaseAfterCreate		= true


								LocalInvoicePaymentSequence	= CreditInvoicePayablePaymentRel.PayablesInvoicePayment.PaymentSequence
								LocalCreditPaymentSequence	= last PayablesInvoicePaymentRel.PayablesInvoicePayment.PaymentSequence
								include CreatePayablesCreditMemoBlock
				else	
					if (PrmAppliedAmount = CreditInvoicePayablePaymentRel.PaymentAmount.CurrencyAmount)	
						if (PayablesInvoicePayment.PaymentSequence = 1)	
							if (PrmAppliedAmount = PaymentAmount.CurrencyAmount * -1)	
								if (ClearSeparatePay)
									invoke FastUpdate CreditInvoicePayablePaymentRel
										invoked.SeparatePayment		= false
								if (CashCode				!= CreditInvoicePayablePaymentRel.CashCode
								or  BankTransactionCode		!= CreditInvoicePayablePaymentRel.BankTransactionCode
								or  PayImmediately			!= CreditInvoicePayablePaymentRel.PayImmediately
								or  InvoiceGroup			!= CreditInvoicePayablePaymentRel.InvoiceGroup
								or  PaymentPriority			!= CreditInvoicePayablePaymentRel.PaymentPriority		
								or  DueDate					!= CreditInvoicePayablePaymentRel.DueDate)				
									invoke Update
										invoked.CashCode			= CreditInvoicePayablePaymentRel.CashCode
										invoked.BankTransactionCode	= CreditInvoicePayablePaymentRel.BankTransactionCode
										invoked.PayImmediately		= CreditInvoicePayablePaymentRel.PayImmediately
										invoked.InvoiceGroup		= CreditInvoicePayablePaymentRel.InvoiceGroup
										invoked.PaymentPriority		= CreditInvoicePayablePaymentRel.PaymentPriority		
										if (!PrmBypassCMDueDateChange)														
											invoked.DueDate			= CreditInvoicePayablePaymentRel.DueDate				
										invoked.SeparatePayment		= false

								LocalInvoicePaymentSequence	= CreditInvoicePayablePaymentRel.PayablesInvoicePayment.PaymentSequence
								LocalCreditPaymentSequence	= PayablesInvoicePayment.PaymentSequence
								include CreatePayablesCreditMemoBlock
							else
								if (ClearSeparatePay)
									invoke FastUpdate CreditInvoicePayablePaymentRel
										invoked.SeparatePayment		= false


								invoke Update
									invoked.PaymentAmount.CurrencyAmount   += PrmAppliedAmount
									invoked.PaymentAmount.KeepRateOnly    	= true
									invoked.TransientBypassUpdateEdit 		= true
									initialize invoked.ReportableIncomeAmount
								invoke Create
									fill in fields from this instance
										except invoked.PaymentAmount
										except invoked.ReportableIncomeAmount
									invoked.PaymentAmount.CurrencyAmount	= PrmAppliedAmount * -1

									invoked.CashCode						= CreditInvoicePayablePaymentRel.CashCode
									invoked.BankTransactionCode				= CreditInvoicePayablePaymentRel.BankTransactionCode
									invoked.PayImmediately					= CreditInvoicePayablePaymentRel.PayImmediately
									invoked.InvoiceGroup					= CreditInvoicePayablePaymentRel.InvoiceGroup
									invoked.PaymentPriority					= CreditInvoicePayablePaymentRel.PaymentPriority		
									if (!PrmBypassCMDueDateChange)																	
										invoked.DueDate						= CreditInvoicePayablePaymentRel.DueDate				
									invoked.SeparatePayment					= false
									invoked.TransientReleaseAfterCreate		= true

								LocalInvoicePaymentSequence	= CreditInvoicePayablePaymentRel.PayablesInvoicePayment.PaymentSequence
								LocalCreditPaymentSequence	= last PayablesInvoicePaymentRel.PayablesInvoicePayment.PaymentSequence
								include CreatePayablesCreditMemoBlock
						else
							if (PrmAppliedAmount = PaymentAmount.CurrencyAmount * -1)
								if (ClearSeparatePay)
									invoke FastUpdate CreditInvoicePayablePaymentRel
										invoked.SeparatePayment		= false
								if (CashCode				!= CreditInvoicePayablePaymentRel.CashCode
								or  BankTransactionCode		!= CreditInvoicePayablePaymentRel.BankTransactionCode
								or  PayImmediately			!= CreditInvoicePayablePaymentRel.PayImmediately
								or  InvoiceGroup			!= CreditInvoicePayablePaymentRel.InvoiceGroup
								or  PaymentPriority			!= CreditInvoicePayablePaymentRel.PaymentPriority		
								or  DueDate					!= CreditInvoicePayablePaymentRel.DueDate)				
									invoke Update
										invoked.CashCode			= CreditInvoicePayablePaymentRel.CashCode
										invoked.BankTransactionCode	= CreditInvoicePayablePaymentRel.BankTransactionCode
										invoked.PayImmediately		= CreditInvoicePayablePaymentRel.PayImmediately
										invoked.InvoiceGroup		= CreditInvoicePayablePaymentRel.InvoiceGroup
										invoked.PaymentPriority		= CreditInvoicePayablePaymentRel.PaymentPriority		
										if (!PrmBypassCMDueDateChange)														
											invoked.DueDate			= CreditInvoicePayablePaymentRel.DueDate				
										invoked.SeparatePayment		= false

								LocalInvoicePaymentSequence	= CreditInvoicePayablePaymentRel.PayablesInvoicePayment.PaymentSequence
								LocalCreditPaymentSequence	= PayablesInvoicePayment.PaymentSequence
								include CreatePayablesCreditMemoBlock
							else
								if (ClearSeparatePay)
									invoke FastUpdate CreditInvoicePayablePaymentRel
										invoked.SeparatePayment		= false


								invoke Update
									invoked.PaymentAmount.CurrencyAmount   += PrmAppliedAmount
									invoked.PaymentAmount.KeepRateOnly    	= true
									invoked.TransientBypassUpdateEdit 		= true
									initialize invoked.ReportableIncomeAmount
								invoke Create
									fill in fields from this instance
										except invoked.PaymentAmount
										except invoked.ReportableIncomeAmount
									invoked.PaymentAmount.CurrencyAmount	= PrmAppliedAmount * -1

									invoked.CashCode						= CreditInvoicePayablePaymentRel.CashCode
									invoked.BankTransactionCode				= CreditInvoicePayablePaymentRel.BankTransactionCode
									invoked.PayImmediately					= CreditInvoicePayablePaymentRel.PayImmediately
									invoked.InvoiceGroup					= CreditInvoicePayablePaymentRel.InvoiceGroup
									invoked.PaymentPriority					= CreditInvoicePayablePaymentRel.PaymentPriority		
									if (!PrmBypassCMDueDateChange)																	
										invoked.DueDate						= CreditInvoicePayablePaymentRel.DueDate				
									invoked.SeparatePayment					= false
									invoked.TransientReleaseAfterCreate		= true

								LocalInvoicePaymentSequence	= CreditInvoicePayablePaymentRel.PayablesInvoicePayment.PaymentSequence
								LocalCreditPaymentSequence	= last PayablesInvoicePaymentRel.PayablesInvoicePayment.PaymentSequence
								include CreatePayablesCreditMemoBlock
					else	
						if (PayablesInvoicePayment.PaymentSequence = 1)
							if (PrmAppliedAmount = PaymentAmount.CurrencyAmount * -1)
								if (ClearSeparatePay)
									invoke FastUpdate CreditInvoicePayablePaymentRel
										invoked.SeparatePayment		= false
								if (CashCode				!= CreditInvoicePayablePaymentRel.CashCode
								or  BankTransactionCode		!= CreditInvoicePayablePaymentRel.BankTransactionCode
								or  PayImmediately			!= CreditInvoicePayablePaymentRel.PayImmediately
								or  InvoiceGroup			!= CreditInvoicePayablePaymentRel.InvoiceGroup
								or  PaymentPriority			!= CreditInvoicePayablePaymentRel.PaymentPriority		
								or  DueDate					!= CreditInvoicePayablePaymentRel.DueDate)				
									invoke Update
										invoked.CashCode			= CreditInvoicePayablePaymentRel.CashCode
										invoked.BankTransactionCode	= CreditInvoicePayablePaymentRel.BankTransactionCode
										invoked.PayImmediately		= CreditInvoicePayablePaymentRel.PayImmediately
										invoked.InvoiceGroup		= CreditInvoicePayablePaymentRel.InvoiceGroup
										invoked.PaymentPriority		= CreditInvoicePayablePaymentRel.PaymentPriority		
										if (!PrmBypassCMDueDateChange)														
											invoked.DueDate			= CreditInvoicePayablePaymentRel.DueDate				
										invoked.SeparatePayment		= false


								LocalInvoicePaymentSequence	= CreditInvoicePayablePaymentRel.PayablesInvoicePayment.PaymentSequence
								LocalCreditPaymentSequence	= PayablesInvoicePayment.PaymentSequence
								include CreatePayablesCreditMemoBlock
							else
								if (ClearSeparatePay)
									invoke FastUpdate CreditInvoicePayablePaymentRel
										invoked.SeparatePayment		= false


								invoke Update
									invoked.PaymentAmount.CurrencyAmount   += PrmAppliedAmount
									invoked.PaymentAmount.KeepRateOnly    	= true
									invoked.TransientBypassUpdateEdit 		= true
									initialize invoked.ReportableIncomeAmount
								invoke Create
									fill in fields from this instance
										except invoked.PaymentAmount
										except invoked.ReportableIncomeAmount
									invoked.PaymentAmount.CurrencyAmount	= PrmAppliedAmount * -1

									invoked.CashCode						= CreditInvoicePayablePaymentRel.CashCode
									invoked.BankTransactionCode				= CreditInvoicePayablePaymentRel.BankTransactionCode
									invoked.PayImmediately					= CreditInvoicePayablePaymentRel.PayImmediately
									invoked.InvoiceGroup					= CreditInvoicePayablePaymentRel.InvoiceGroup
									invoked.PaymentPriority					= CreditInvoicePayablePaymentRel.PaymentPriority		
									if (!PrmBypassCMDueDateChange)																	
										invoked.DueDate						= CreditInvoicePayablePaymentRel.DueDate				
									invoked.SeparatePayment					= false
									invoked.TransientReleaseAfterCreate		= true


								LocalInvoicePaymentSequence	= CreditInvoicePayablePaymentRel.PayablesInvoicePayment.PaymentSequence
								LocalCreditPaymentSequence	= last PayablesInvoicePaymentRel.PayablesInvoicePayment.PaymentSequence
								include CreatePayablesCreditMemoBlock
						else
							if (PrmAppliedAmount = PaymentAmount.CurrencyAmount * -1)
								if (ClearSeparatePay)
									invoke FastUpdate CreditInvoicePayablePaymentRel
										invoked.SeparatePayment		= false
								if (CashCode				!= CreditInvoicePayablePaymentRel.CashCode
								or  BankTransactionCode		!= CreditInvoicePayablePaymentRel.BankTransactionCode
								or  PayImmediately			!= CreditInvoicePayablePaymentRel.PayImmediately
								or  InvoiceGroup			!= CreditInvoicePayablePaymentRel.InvoiceGroup
								or  PaymentPriority			!= CreditInvoicePayablePaymentRel.PaymentPriority		
								or  DueDate					!= CreditInvoicePayablePaymentRel.DueDate)				
									invoke Update
										invoked.CashCode			= CreditInvoicePayablePaymentRel.CashCode
										invoked.BankTransactionCode	= CreditInvoicePayablePaymentRel.BankTransactionCode
										invoked.PayImmediately		= CreditInvoicePayablePaymentRel.PayImmediately
										invoked.InvoiceGroup		= CreditInvoicePayablePaymentRel.InvoiceGroup
										invoked.PaymentPriority		= CreditInvoicePayablePaymentRel.PaymentPriority		
										if (!PrmBypassCMDueDateChange)														
											invoked.DueDate			= CreditInvoicePayablePaymentRel.DueDate				
										invoked.SeparatePayment		= false


								LocalInvoicePaymentSequence	= CreditInvoicePayablePaymentRel.PayablesInvoicePayment.PaymentSequence
								LocalCreditPaymentSequence	= last PayablesInvoicePaymentRel.PayablesInvoicePayment.PaymentSequence
								include CreatePayablesCreditMemoBlock
							else
								if (ClearSeparatePay)
									invoke FastUpdate CreditInvoicePayablePaymentRel
										invoked.SeparatePayment		= false


								invoke Update
									invoked.PaymentAmount.CurrencyAmount   += PrmAppliedAmount
									invoked.PaymentAmount.KeepRateOnly      = true
									invoked.TransientBypassUpdateEdit 		= true
									initialize invoked.ReportableIncomeAmount
								invoke Create PayablesInvoicePayment
									fill in fields from this instance
										except invoked.PaymentAmount
										except invoked.ReportableIncomeAmount
									invoked.PaymentAmount.CurrencyAmount	= PrmAppliedAmount * -1

									invoked.CashCode						= CreditInvoicePayablePaymentRel.CashCode
									invoked.BankTransactionCode				= CreditInvoicePayablePaymentRel.BankTransactionCode
									invoked.PayImmediately					= CreditInvoicePayablePaymentRel.PayImmediately
									invoked.InvoiceGroup					= CreditInvoicePayablePaymentRel.InvoiceGroup
									invoked.PaymentPriority					= CreditInvoicePayablePaymentRel.PaymentPriority		
									if (!PrmBypassCMDueDateChange)																	
										invoked.DueDate						= CreditInvoicePayablePaymentRel.DueDate				
									invoked.SeparatePayment					= false
									invoked.TransientReleaseAfterCreate		= true


								LocalInvoicePaymentSequence	= CreditInvoicePayablePaymentRel.PayablesInvoicePayment.PaymentSequence
								LocalCreditPaymentSequence	= last PayablesInvoicePaymentRel.PayablesInvoicePayment.PaymentSequence
								include CreatePayablesCreditMemoBlock
				initialize TransientBypassUpdateEdit








		UnapplyCreditsFromThisPayment is an Instance Action

			valid when (IsAppliedToCredit)
			Action Rules
				LocalRunProgram = LocalRunProgram.CreditMemoApplication
				include VerifyProcessingMonitorRule
				LocalPayablesCreditMemoInvoice		= PayablesInvoice.Invoice
				LocalPayablesCreditMemoInvSuf		= PayablesInvoice.Suffix
				LocalPayablesCreditMemoInvSeq		= PayablesInvoicePayment.PaymentSequence
				LocalPayablesCreditMemoInvPI		= PayablesInvoice				
				for each PayablesCreditMemoInvoiceFlexRel	


					LocalInvoiceNumber = PayablesInvoice.Invoice
					LocalInvoiceDate   = PayablesInvoice.InvoiceDate				
					LocalInvoiceSuffix = PayablesInvoice.Suffix
					LocalPayablesInvoice = PayablesInvoice							
					LocalCreditNumber  = each.PayablesInvoicePaymentCreditPayablesCreditMemoRel.PayablesInvoice.Invoice
					LocalCreditSuffix  = each.PayablesInvoicePaymentCreditPayablesCreditMemoRel.PayablesInvoice.Suffix
					LocalCreditPayablesInvoice = each.PayablesInvoicePaymentCreditPayablesCreditMemoRel.PayablesInvoice		
					LocalCreditPaymentSequence	= each.PayablesInvoicePaymentCreditPayablesCreditMemoRel.PayablesInvoicePayment.PaymentSequence
					if (PayablesInvoicePayment.PaymentSequence = 1)	
						if (each.PayablesInvoicePaymentCreditPayablesCreditMemoRel.PayablesInvoicePayment.PaymentSequence = 1		
						or (each.PayablesInvoicePaymentCreditPayablesCreditMemoRel.PayablesInvoicePayment.PaymentSequence = 2		
						and each.PayablesInvoicePaymentCreditPayablesCreditMemoRel.Suffix = 999))
							invoke Delete each		
						else	
							if (FirstPayablesPaymentCreditMemoRel exists)		













								invoke Create PayablesInvoicePayment					

									fill in fields from each.PayablesInvoicePaymentSeq1CreditPayablesCreditMemoRel.first PayablesInvoicePaymentRel	
									invoked.TransientReleaseAfterCreate 	= true


								invoke Update each.PayablesInvoicePaymentSeq1CreditPayablesCreditMemoRel.first PayablesInvoicePaymentRel	
									invoked.PaymentAmount.CurrencyAmount 	= each.AmountApplied * -1
									invoked.PaymentAmount.KeepRateOnly	 	= true
									invoked.TransientBypassUpdateEdit 		= true
								invoke CommitTransaction		

								invoke Create PayablesCreditMemo								
									fill in fields from first FirstPayablesPaymentCreditMemoRel
									invoked.PayablesCreditMemo.CreditMemoSequence = each.PayablesInvoicePaymentCreditPayablesCreditMemoRel.last PayablesInvoicePaymentRel.PayablesInvoicePayment.PaymentSequence		
								invoke Delete first FirstPayablesPaymentCreditMemoRel										
								invoke Released.DeleteCredit each.PayablesInvoicePaymentCreditPayablesCreditMemoRel		
								invoke Delete each					
							else	
								invoke Update each.PayablesInvoicePaymentCreditPayablesCreditMemoRel.first PayablesInvoicePaymentRel	
									invoked.PaymentAmount.CurrencyAmount   -= each.AmountApplied
									invoked.PaymentAmount.KeepRateOnly	  	= true
									invoked.TransientBypassUpdateEdit 		= true
								invoke CommitTransaction		

								invoke Released.DeleteCredit each.PayablesInvoicePaymentCreditPayablesCreditMemoRel 	
								invoke Delete each																		
					else	
						if (FirstPayablesPaymentCreditMemo2Rel exists)	
							if (each.PayablesInvoicePaymentCreditPayablesCreditMemoRel.PayablesInvoicePayment.PaymentSequence = 1)			
								invoke Delete each																		
							else	
								if (FirstPayablesPaymentCreditMemoRel exists)		
									invoke Create PayablesInvoicePayment																		
										fill in fields from each.PayablesInvoicePaymentCreditPayablesCreditMemoRel.first PayablesInvoicePaymentRel
										invoked.TransientReleaseAfterCreate 	= true
									invoke Update each.PayablesInvoicePaymentCreditPayablesCreditMemoRel.first PayablesInvoicePaymentRel		
										invoked.PaymentAmount.CurrencyAmount 	= each.AmountApplied * -1
										invoked.PaymentAmount.KeepRateOnly	 	= true
										invoked.TransientBypassUpdateEdit 		= true
									invoke CommitTransaction		
									invoke Create PayablesCreditMemo													
										fill in fields from first FirstPayablesPaymentCreditMemoRel
										invoked.PayablesCreditMemo.CreditMemoSequence = each.PayablesInvoicePaymentCreditPayablesCreditMemoRel.last PayablesInvoicePaymentRel.PayablesInvoicePayment.PaymentSequence		
									invoke Delete first FirstPayablesPaymentCreditMemoRel										
									invoke Released.DeleteCredit each.PayablesInvoicePaymentCreditPayablesCreditMemoRel	
									invoke Delete each																		
								else	
									invoke Update each.PayablesInvoicePaymentCreditPayablesCreditMemoRel.first PayablesInvoicePaymentRel	
										invoked.PaymentAmount.CurrencyAmount   -= each.AmountApplied
										invoked.PaymentAmount.KeepRateOnly	  	= true
										invoked.TransientBypassUpdateEdit 		= true
									invoke CommitTransaction		
									invoke Released.DeleteCredit each.PayablesInvoicePaymentCreditPayablesCreditMemoRel 	
									invoke Delete each																		
						else	
							if (each.PayablesInvoicePaymentCreditPayablesCreditMemoRel.PayablesInvoicePayment.PaymentSequence = 1)		
								invoke Delete each																			
							else	
								if (FirstPayablesPaymentCreditMemoRel exists)			
									invoke Create PayablesInvoicePayment																		
										fill in fields from each.PayablesInvoicePaymentCreditPayablesCreditMemoRel.first PayablesInvoicePaymentRel
										invoked.TransientReleaseAfterCreate 	= true
									invoke Update each.PayablesInvoicePaymentCreditPayablesCreditMemoRel.first PayablesInvoicePaymentRel		
										invoked.PaymentAmount.CurrencyAmount 	= each.AmountApplied * -1
										invoked.PaymentAmount.KeepRateOnly	 	= true
										invoked.TransientBypassUpdateEdit 		= true
									invoke CommitTransaction		
									invoke Create PayablesCreditMemo													
										fill in fields from first FirstPayablesPaymentCreditMemoRel
										invoked.PayablesCreditMemo.CreditMemoSequence = each.PayablesInvoicePaymentCreditPayablesCreditMemoRel.last PayablesInvoicePaymentRel.PayablesInvoicePayment.PaymentSequence		
									invoke Delete first FirstPayablesPaymentCreditMemoRel									
									invoke Released.DeleteCredit each.PayablesInvoicePaymentCreditPayablesCreditMemoRel	
									invoke Delete each																		
								else	
									invoke Update each.PayablesInvoicePaymentCreditPayablesCreditMemoRel.first PayablesInvoicePaymentRel	
										invoked.PaymentAmount.CurrencyAmount   -= each.AmountApplied
										invoked.PaymentAmount.KeepRateOnly	  	= true
										invoked.TransientBypassUpdateEdit 		= true
									invoke CommitTransaction		
									invoke Released.DeleteCredit each.PayablesInvoicePaymentCreditPayablesCreditMemoRel	
									invoke Delete each		
				initialize TransientBypassUpdateEdit








		UnapplyPaymentsFromThisCredit is an Instance Action

			valid when (IsAppliedToInvoice)
			Local Fields
				DoDeleteCredit	is Boolean
			Action Rules
				LocalRunProgram = LocalRunProgram.CreditMemoApplication
				include VerifyProcessingMonitorRule
				for each PayablesPaymentCreditMemoRel		



					LocalInvoiceNumber = each.PayablesInvoicePaymentInvoicePayablesCreditMemoRel.PayablesInvoice.Invoice
					LocalInvoiceDate   = each.PayablesInvoicePaymentInvoicePayablesCreditMemoRel.PayablesInvoice.InvoiceDate		
					LocalInvoiceSuffix = each.PayablesInvoicePaymentInvoicePayablesCreditMemoRel.PayablesInvoice.Suffix
					LocalPayablesInvoice = each.PayablesInvoicePaymentInvoicePayablesCreditMemoRel.PayablesInvoice					
					LocalCreditNumber  = PayablesInvoice.Invoice
					LocalCreditSuffix  = PayablesInvoice.Suffix
					LocalCreditPayablesInvoice = PayablesInvoice																	
					if (PayablesInvoicePayment.PaymentSequence = 1		
					or	(PayablesInvoicePayment.PaymentSequence = 2
					and Suffix = 999))
						if (each.PayablesInvoicePaymentInvoicePayablesCreditMemoRel.PayablesInvoicePayment.PaymentSequence = 1)		
							invoke Delete each																				
						else	
							DoDeleteCredit = false		
							invoke Delete each																		
					else	
						if (FirstPayablesPaymentCreditMemoRel exists)	
							invoke Create PayablesInvoicePayment 						
								fill in fields from first PayablesInvoicePaymentRel
								invoked.TransientReleaseAfterCreate 	= true
							invoke Create PayablesCreditMemo							
								fill in fields from first FirstPayablesPaymentCreditMemoRel
								invoked.PayablesCreditMemo.CreditMemoSequence = last PayablesInvoicePaymentRel.PayablesInvoicePayment.PaymentSequence
							invoke Update first PayablesInvoicePaymentRel				
								invoked.PaymentAmount.CurrencyAmount 	= each.AmountApplied * -1
								invoked.PaymentAmount.KeepRateOnly	 	= true
								invoked.TransientBypassUpdateEdit 		= true
							invoke Delete FirstPayablesPaymentCreditMemoRel				
							if (each.PayablesInvoicePaymentInvoicePayablesCreditMemoRel.PayablesInvoicePayment.PaymentSequence = 1)			
								DoDeleteCredit = true		
								invoke Delete each										
							else	
								if (FirstPayablesPaymentCreditMemo2Rel exists)		
									DoDeleteCredit = true		
									invoke Released.DeleteCredit each.PayablesInvoicePaymentInvoicePayablesCreditMemoRel	
									invoke Delete each																		
								else	
									DoDeleteCredit = true		
									invoke Delete each																		
						else	
							invoke Update first PayablesInvoicePaymentRel													
								invoked.PaymentAmount.CurrencyAmount   -= each.AmountApplied
								invoked.PaymentAmount.KeepRateOnly	  	= true
								invoked.TransientBypassUpdateEdit 		= true
							if (each.PayablesInvoicePaymentInvoicePayablesCreditMemoRel.PayablesInvoicePayment.PaymentSequence = 1)		
								DoDeleteCredit = true		
								invoke Delete each																			
							else	
								if (FirstPayablesPaymentCreditMemo2Rel exists)			

									DoDeleteCredit = true		
									invoke Delete each																		
								else	
									DoDeleteCredit = true		
									invoke Delete each																		
				initialize TransientBypassUpdateEdit

				if (DoDeleteCredit)
					invoke Released.DeleteCredit

				invoke UpdateErrorRecordsAction PayablesInvoice



		MarkPaymentAsPaid is an Instance Action			
			restricted
			Parameters
				PrmCheckDate				is an ExchangeDate		
				PrmCheckNumber				is like TransactionNumber	
				PrmOverrideDefaultAccount	is a FinanceCodeBlockFull
				PrmReopenInvoice			is Boolean				
			Local Fields
				LocalBoolean			 	is Boolean
			Action Rules
				CheckDate				= PrmCheckDate
				TransactionNumber		= PrmCheckNumber

				if (OnHold)
					invoke TakeOffHold

				if (LastCurrencyRevaluationDate entered
				and !PrmReopenInvoice)					
					invoke CreateGainLossDistribution
						invoked.PrmRevalueDate				= PrmCheckDate		
						invoked.PrmDescription				= UnrealizedCurrencyGainLossMessage
						invoked.PrmDistributionReference	= TransactionNumber
						if (AccrualCode entered)
							invoked.PrmAccrualCode			= AccrualCode
						else
							invoked.PrmAccrualCode			= PayablesInvoice.AccrualCode
						invoked.PrmDefaultSystemAccount		= 1		
						invoked.PrmReversal					= 1		

				if (PayablesInvoice.InvoiceSource.IntercompanyBilling 
				and PayablesInvoice.IntercompanyBillingDocumentRel.AllowSelectDistributionSet)
					invoke ProratePayablesFundApplyDistributions

				invoke CreatePaymentAccrualDistribution
					invoked.PrmControlDocumentNumber		= TransactionNumber
					invoked.PrmDescription					= PaymentWriteOffAccrualOffsetMessage		
					if (PrmReopenInvoice)					
						invoked.PrmVoidDate					= PrmCheckDate				

				NegativeFinanceCurrencyAmountGroup = PaymentAmount
				LocalBoolean = NegativeFinanceCurrencyAmountGroup.PerformCalculation
				invoke CreateFromBatchNoParms PayablesInvoiceDistribution
					invoked.CreateAlternateGLTransDetail	= true
					invoked.GLTPostingDate				= CheckDate
					invoked.DistributionDate			= CheckDate
					invoked.GLTGeneralLedgerEvent		= "AP"
					if (PrmReopenInvoice)		
						invoked.DistributionAmount		= PaymentAmount
					else
						invoked.DistributionAmount		= NegativeFinanceCurrencyAmountGroup
					invoked.GLTTransactionDate			= PayablesInvoice.InvoiceDate
					invoked.GLTCurrencyCode				= InvoiceCurrency
					invoked.Company						= Company
					invoked.PayablesInvoice				= PayablesInvoice
					invoked.DistributionType			= "Y"
					if (AccrualCode entered)
						invoked.AccrualCode				= AccrualCode
					else
						invoked.AccrualCode				= PayablesInvoice.AccrualCode

					invoked.PostingOption				= "S"
					invoked.Status						= 1
					invoked.GLTControlDocumentNumber	= TransactionNumber
					invoked.GLTDocumentNumber			= TransactionNumber
					invoked.Description					= PaymentWriteOffMessage
					invoked.DistributionReference		= PayablesInvoiceRel.PayablesInvoice
					invoked.InvoiceCurrency				= InvoiceCurrency
					invoked.DistributionAmount.ExchangeDate			= PayablesInvoice.InvoiceDate
					invoked.DistributionAmount.KeepRateAndAmount	= true
					invoked.GLFinanceCodeBlock			= PrmOverrideDefaultAccount
					invoked.GLTTransactionCodeBlock		= PrmOverrideDefaultAccount
					invoked.DistributionAccount			= PrmOverrideDefaultAccount
					invoked.BypassActiveCodeBlockEdit 	= true		

			Exit Rules
				DiscountLost		= true
				NetPaymentAmount	= PaymentAmount
				if (Vendor = PayVendor)		
					LocalRemitToCode	= RemitToCode
				else
					initialize LocalRemitToCode
				if (VendorBalanceFlexRel not exist)
					invoke Create VendorBalanceFlexRel
						invoked.Company				= Company
						invoked.VendorGroup			= Company.VendorGroup
						invoked.Vendor				= Vendor
						invoked.VendorLocation		= LocalRemitToCode
						if (Vendor.BalanceCurrency not entered)
							invoked.BalanceCurrency	= Company.Currency
						else
							invoked.BalanceCurrency	= InvoiceCurrency
				if (Vendor.BalanceCurrency not entered)
					invoke UpdateHistoricalPaymentBalances VendorBalanceFlexRel
						invoked.PrmPaymentDate			= CheckDate
						if (PrmReopenInvoice)							
							invoked.PrmPaymentAmount	= NetPaymentAmount.FunctionalAmount.EnteredCurrencyAmount * -1
						else											
							invoked.PrmPaymentAmount	= NetPaymentAmount.FunctionalAmount.EnteredCurrencyAmount
					invoke UpdateCurrentBalance VendorBalanceFlexRel	
						if (PrmReopenInvoice)							
							invoked.UpdateAmount 		= NetPaymentAmount.FunctionalAmount.EnteredCurrencyAmount
						else											
							invoked.UpdateAmount 		= NetPaymentAmount.FunctionalAmount.EnteredCurrencyAmount * -1
				else
					invoke UpdateHistoricalPaymentBalances VendorBalanceFlexRel					
						invoked.PrmPaymentDate			= CheckDate
						if (PrmReopenInvoice)							
							invoked.PrmPaymentAmount	= NetPaymentAmount.CurrencyAmount * -1
						else											
							invoked.PrmPaymentAmount	= NetPaymentAmount.CurrencyAmount
					invoke UpdateCurrentBalance VendorBalanceFlexRel	
						if (PrmReopenInvoice)							
							invoked.UpdateAmount 		= NetPaymentAmount.CurrencyAmount
						else											
							invoked.UpdateAmount 		= NetPaymentAmount.CurrencyAmount * -1

				if (PrmReopenInvoice)	
					MarkedAsPaid = false
					initialize NetPaymentAmount
					initialize CheckDate
					initialize TransactionNumber
					DiscountLost = false
					make transition to Released
				else
					MarkedAsPaid = true
					make transition to Historical

		ClearPaymentFromCreditMemo is an Instance Action			
			restricted
			Parameters
				PrmCheckDate				is an ExchangeDate
				PrmCheckNumber				is like TransactionNumber
				PrmReopenInvoice			is Boolean
				PrmUpdateAmountPaid			is Boolean
			Local Fields
				LocalBoolean			 	is Boolean
			Action Rules
				invoke MarkPaymentAsPaid
					invoked.PrmCheckDate				= PrmCheckDate
					invoked.PrmCheckNumber				= PrmCheckNumber
					invoked.PrmOverrideDefaultAccount	= Company.MarkedAsPaidOffsetAccount
					invoked.PrmReopenInvoice			= PrmReopenInvoice

	
			Exit Rules

				if (PrmUpdateAmountPaid)
					invoke UpdateAmountPaid PayablesInvoice
						invoked.PrmPaymentAmount	=	PaymentAmount.CurrencyAmount
						invoked.PrmReopenInvoice	=	PrmReopenInvoice


		ApplySelectedPayablesToCheck is an Instance Action
			valid when (CanApplyPayablesToCheck)
			Parameters
				PrmCashCode						is a CashCode
				PrmCashLedgerSourceRecord		is a CashLedgerSourceRecord
				PrmCashLedgerPayablesPayment	is a CashLedgerPayablesPayment
			Parameter Rules
				PrmCashCode
					required


					default to CashLedgerPayablesPayment.CashCode	
				PrmCashLedgerSourceRecord
					default to "CHK"
				PrmCashLedgerPayablesPayment
					required
					default to CashLedgerPayablesPayment
			Entrance Rules
				constraint (Status.Released)

					"Payment_Record<PayablesInvoicePayment.PaymentSequence>For_Invoice<Invoice>IsIn_Status<Status>AndMustBe_ReleasedToApplyToACheck"	
				constraint (PrmCashLedgerPayablesPayment.PaymentDate within CompanySystemClosingControlRel.ValidEntryDate)
					"CheckDateOf<PrmCashLedgerPayablesPayment.PaymentDate>NotWithinValidEntryDatesForCompany<Company>;ValidDateRangeIs<CompanySystemClosingControlRel.ValidEntryDate.Begin>-<CompanySystemClosingControlRel.ValidEntryDate.End>"	
				if (PrmCashCode != CashCode					
				and PrmCashCode.DefaultPostCompany	entered
				and GeneralLedgerCompanyRel.AccountingEntity != PrmCashCode.DefaultPostCompany.AccountingEntity)			
					CashCode				= PrmCashCode			
					constraint (GLInterEntityRelationRel exists)
						"RelationshipBetweenCompanyAccountingEntityAndCashCodeDefaultPostCompanyAccountingEntityDoesNotExist"
					constraint (GLInterEntityRelationRel.Active)		
						"InactiveRelationBetween<GeneralLedgerCompanyRel.FinanceEnterpriseGroup.AccountingEntityLabel>_<GeneralLedgerCompanyRel.AccountingEntity>And<CashCode.DefaultPostCompany.AccountingEntity>"	
				constraint (PrmCashLedgerPayablesPayment.ReleasedStatus.Unreleased)		
					"CashLedgerPayablesPaymentNotInUnreleasedStatus"					
			Action Rules

				if (RemitToCode != PrmCashLedgerPayablesPayment.RemitToCode)
					invoke Released.Update PayablesInvoice		
						invoked.RemitToCode	= PrmCashLedgerPayablesPayment.RemitToCode
				CashCode				= PrmCashLedgerPayablesPayment.CashCode
				BankTransactionCode		= PrmCashLedgerPayablesPayment.BankTransactionCode
				TransactionIDNumber 	= PrmCashLedgerPayablesPayment.TransactionIDNumber 
				TransactionNumber		= PrmCashLedgerPayablesPayment.TransactionNumber 
				PayVendor				= PrmCashLedgerPayablesPayment.PaidVendor
				CheckDate				= PrmCashLedgerPayablesPayment.PaymentDate 

				if (DiscountDate entered)				
					if (DiscountDate >= CheckDate)		
						DiscountLost = false
					else
						DiscountLost = true
					
				include ManualMatchProcessingRules	

				if (Vendor.ValidateCertificationAmount)		
					constraint (ValidateVendorCertificationMaxSpendExistsRel exists)	
						"Vendor<Vendor>_-_<Vendor.VendorName>IsFlaggedForValidateCertificationAmount,ButNoCertificatesExistForThisVendor"		
					if (ValidateVendorValidCertificationDaysRel exists)
						constraint ((first ValidateVendorValidCertificationDaysRel.CurrentSpendAmount + NetPaymentAmount.CurrencyAmount) < first ValidateVendorValidCertificationDaysRel.MaximumSpendAmount)		
							"InvoiceAmountOf<NetPaymentAmount.CurrencyAmount>PlusCurrentSpendAmountOf<first ValidateVendorValidCertificationDaysRel.CurrentSpendAmount>ExceedsMaxSpendAmount;<first ValidateVendorValidCertificationDaysRel.MaximumSpendAmount>ForVendorCertificationCode;<first ValidateVendorValidCertificationDaysRel.PayablesCertificationCode>"	
					else
						if (ValidateVendorCertificationRel exists)
							constraint ((first ValidateVendorCertificationRel.CurrentSpendAmount + NetPaymentAmount.CurrencyAmount) < first ValidateVendorCertificationRel.MaximumSpendAmount)	
								"InvoiceAmountOf<NetPaymentAmount.CurrencyAmount>PlusCurrentSpendAmountOf<first ValidateVendorCertificationRel.CurrentSpendAmount>ExceedsMaxSpendAmount;<first ValidateVendorCertificationRel.MaximumSpendAmount>ForVendorCertificationCode;<first ValidateVendorCertificationRel.PayablesCertificationCode>"
					invoke FastUpdate first ValidateVendorCertificationRel
						invoked.CurrentSpendAmount += NetPaymentAmount.CurrencyAmount

				include SetLocalCurrencyAmountFields
				include SetNetPaymentCurrencyAmounts
				include SetDiscountCurrencyAmounts
				include SetWithholdingCurrencyAmounts

				invoke FastUpdate

				invoke UpdateNetAmounts CashLedgerPayablesPaymentRel
					invoked.PrmAction				= "Add"
					invoked.PrmPaymentAmount 		= NetPaymentAmount.CurrencyAmount 
					invoked.PrmBaseNetPaymentAmount = NetPaymentAmount.FunctionalAmount.EnteredCurrencyAmount			
					invoked.PrmBankCheckAmount 		= BankCheckAmount

				make transition to UnreleasedManualPayment


		TakeDiscountOnManualPayment is an Instance Action		
			valid when (ManualPaymentWithDiscountLost)
			Entrance Rules
				invoke UpdateNetAmounts CashLedgerPayablesPaymentRel
					invoked.PrmAction				= "Remove"
					invoked.PrmPaymentAmount		= NetPaymentAmount.CurrencyAmount
					invoked.PrmBaseNetPaymentAmount = NetPaymentAmount.FunctionalAmount.EnteredCurrencyAmount			
					invoked.PrmBankCheckAmount		= BankCheckAmount
			Action Rules
				DiscountLost = false
				include ComputeDiscountedAmounts
				include SetLocalCurrencyAmountFields
				include SetNetPaymentCurrencyAmounts

				if (CashCode.Currency != InvoiceCurrency)








					LocalExchangeDate											= CheckDate
					LocalCashCodePaymentExchange.TransactionAmount				= NetPaymentAmount.CurrencyAmount
					LocalCashCodePaymentExchange.BaseAmount.EnteredCurrencyRate	= CashLedgerPayablesPaymentRel.PaymentAmountBankAccountCurrency.EnteredCurrencyRate
					LocalCashCodePaymentExchange.BaseAmount.ToCurrency			= CashCode.Currency
					BankCheckAmount												= LocalCashCodePaymentExchange.BaseAmount.OutputCurrencyAmount
					if (CashCode.Currency = GeneralLedgerCompanyRel.AccountingEntity.FunctionalCurrency)		
						LocalCurrencyCalculationGroup.ExchangeDate							= CheckDate
						LocalCurrencyCalculationGroup.CurrencyAmount						= NetPaymentAmount.CurrencyAmount
						LocalCurrencyCalculationGroup.FunctionalAmount.EnteredCurrencyRate	= CashLedgerPayablesPaymentRel.PaymentAmountBankAccountCurrency.EnteredCurrencyRate
						LocalCurrencyCalculationGroup.FunctionalAmount.ToCurrency			= CashCode.Currency
						NetPaymentAmount.FunctionalAmount.EnteredCurrencyAmount				= LocalCurrencyCalculationGroup.FunctionalAmount.OutputCurrencyAmount

						DiscountAmount.ExchangeDate											= CheckDate
						LocalCurrencyCalculationGroup.CurrencyAmount						= DiscountAmount.CurrencyAmount
						LocalCurrencyCalculationGroup.FunctionalAmount.EnteredCurrencyRate	= CashLedgerPayablesPaymentRel.PaymentAmountBankAccountCurrency.EnteredCurrencyRate
						LocalCurrencyCalculationGroup.FunctionalAmount.ToCurrency			= CashCode.Currency
						DiscountAmount.FunctionalAmount.EnteredCurrencyAmount				= LocalCurrencyCalculationGroup.FunctionalAmount.OutputCurrencyAmount
				else
					BankCheckAmount			= NetPaymentAmount.CurrencyAmount

				invoke UpdateNetAmounts CashLedgerPayablesPaymentRel
					invoked.PrmAction				= "Add"
					invoked.PrmPaymentAmount		= NetPaymentAmount.CurrencyAmount
					invoked.PrmBaseNetPaymentAmount = NetPaymentAmount.FunctionalAmount.EnteredCurrencyAmount			
					invoked.PrmBankCheckAmount		= BankCheckAmount


		RemoveDiscountOnManualPayment is an Instance Action		
			valid when (ManualPaymentWithDiscountTaken)
			Entrance Rules
				invoke UpdateNetAmounts CashLedgerPayablesPaymentRel
					invoked.PrmAction				= "Remove"
					invoked.PrmPaymentAmount		= NetPaymentAmount.CurrencyAmount
					invoked.PrmBaseNetPaymentAmount = NetPaymentAmount.FunctionalAmount.EnteredCurrencyAmount			
					invoked.PrmBankCheckAmount		= BankCheckAmount
			Action Rules
				DiscountLost = true
				include ComputeDiscountedAmounts
				include SetLocalCurrencyAmountFields
				include SetNetPaymentCurrencyAmounts

				if (CashCode.Currency != InvoiceCurrency)







					LocalExchangeDate											= CheckDate
					LocalCashCodePaymentExchange.TransactionAmount				= NetPaymentAmount.CurrencyAmount
					LocalCashCodePaymentExchange.BaseAmount.EnteredCurrencyRate	= CashLedgerPayablesPaymentRel.PaymentAmountBankAccountCurrency.EnteredCurrencyRate
					LocalCashCodePaymentExchange.BaseAmount.ToCurrency			= CashCode.Currency
					BankCheckAmount												= LocalCashCodePaymentExchange.BaseAmount.OutputCurrencyAmount
					if (CashCode.Currency = GeneralLedgerCompanyRel.AccountingEntity.FunctionalCurrency)		
						LocalCurrencyCalculationGroup.ExchangeDate							= CheckDate
						LocalCurrencyCalculationGroup.CurrencyAmount						= NetPaymentAmount.CurrencyAmount
						LocalCurrencyCalculationGroup.FunctionalAmount.EnteredCurrencyRate	= CashLedgerPayablesPaymentRel.PaymentAmountBankAccountCurrency.EnteredCurrencyRate
						LocalCurrencyCalculationGroup.FunctionalAmount.ToCurrency			= CashCode.Currency
						NetPaymentAmount.FunctionalAmount.EnteredCurrencyAmount				= LocalCurrencyCalculationGroup.FunctionalAmount.OutputCurrencyAmount
				else
					BankCheckAmount			= NetPaymentAmount.CurrencyAmount

				invoke UpdateNetAmounts CashLedgerPayablesPaymentRel
					invoked.PrmAction				= "Add"
					invoked.PrmPaymentAmount		= NetPaymentAmount.CurrencyAmount
					invoked.PrmBaseNetPaymentAmount = NetPaymentAmount.FunctionalAmount.EnteredCurrencyAmount			
					invoked.PrmBankCheckAmount		= BankCheckAmount


		UnapplyFromCheck is an Instance Action
			valid when (IsUnapplyable)
			Local Fields
				LocalBoolean				is Boolean			
				LocalInvoiceCounter			is Numeric 6		
			Entrance Rules
				invoke UpdateNetAmounts CashLedgerPayablesPaymentRel
					invoked.PrmAction				= "Remove"
					invoked.PrmPaymentAmount 		= NetPaymentAmount.CurrencyAmount
					invoked.PrmBaseNetPaymentAmount = NetPaymentAmount.FunctionalAmount.EnteredCurrencyAmount			
					invoked.PrmBankCheckAmount 		= BankCheckAmount
			Action Rules
				if (Vendor.IncomeWithholding		
				and Company.GlobalWithholding)
					CalculateWithholdingAmount.PayablesCompany			= Company
					CalculateWithholdingAmount.PayablesInvoice			= PayablesInvoice
					CalculateWithholdingAmount.PayablesInvoicePayment	= PayablesInvoicePayment
					LocalBoolean										= CalculateWithholdingAmount.RemoveWithholding
					for each CashLedgerPayablesPaymentRel.AppaymentRel
						if (each.PayablesInvoicePayment != this instance.PayablesInvoicePayment)
							invoke InitializeWithholdingAmount each
							increment LocalInvoiceCounter
							if (LocalInvoiceCounter > 100)
								invoke CommitTransaction
								initialize LocalInvoiceCounter
						initialize LocalInvoiceCounter	
					for each CashLedgerPayablesPaymentRel.AppaymentRel
						if (each.PayablesInvoicePayment != this instance.PayablesInvoicePayment)
							invoke RecalculateWithholdingAmount each
							increment LocalInvoiceCounter
							if (LocalInvoiceCounter > 100)
								invoke CommitTransaction
								initialize LocalInvoiceCounter
				CashCode			= PayablesInvoice.CashCode
				BankTransactionCode	= PayablesInvoice.BankTransactionCode
				PayVendor			= PayablesInvoice.PayVendor



				initialize TransactionIDNumber
				initialize TransactionNumber
				initialize CheckDate
				initialize BankCheckAmount
				make transition to Released

		UpdateBankCheckAmount is an Instance Action
			restricted
			Parameters
				PrmCurrencyRate		is a CurrencyExchangeRate
			Action Rules












				LocalExchangeDate											= CheckDate
				LocalCashCodePaymentExchange.TransactionAmount				= NetPaymentAmount.CurrencyAmount
				LocalCashCodePaymentExchange.BaseAmount.EnteredCurrencyRate	= PrmCurrencyRate
				LocalCashCodePaymentExchange.BaseAmount.ToCurrency			= CashCode.Currency
				BankCheckAmount												= LocalCashCodePaymentExchange.BaseAmount.OutputCurrencyAmount
				if (CashCode.Currency = GeneralLedgerCompanyRel.AccountingEntity.FunctionalCurrency)		
					LocalCurrencyCalculationGroup.ExchangeDate							= CheckDate
					LocalCurrencyCalculationGroup.CurrencyAmount						= NetPaymentAmount.CurrencyAmount
					LocalCurrencyCalculationGroup.FunctionalAmount.EnteredCurrencyRate	= PrmCurrencyRate
					LocalCurrencyCalculationGroup.FunctionalAmount.ToCurrency			= CashCode.Currency
					NetPaymentAmount.FunctionalAmount.EnteredCurrencyAmount				= LocalCurrencyCalculationGroup.FunctionalAmount.OutputCurrencyAmount
					if (DiscountLost = false)
						DiscountAmount.ExchangeDate											= CheckDate
						LocalCurrencyCalculationGroup.CurrencyAmount						= DiscountAmount.CurrencyAmount
						LocalCurrencyCalculationGroup.FunctionalAmount.EnteredCurrencyRate	= PrmCurrencyRate
						LocalCurrencyCalculationGroup.FunctionalAmount.ToCurrency			= CashCode.Currency
						DiscountAmount.FunctionalAmount.EnteredCurrencyAmount				= LocalCurrencyCalculationGroup.FunctionalAmount.OutputCurrencyAmount


		IssueBillOfExchangePayment is an Instance Action
			valid when (AllowIssueBOEPayment)
			Parameters
				PrmBankTransactionCode		is a BankTransactionCode
					default label is "BankTransactionCode"
				PrmDraftNumber				is AlphaRight 20
					default label is "DraftNumber"
				PrmDraftSuffix				is a Suffix
					default label is "DraftSuffix"
				PrmDraftDate				is Date
					default label is "DraftDate"
			Parameter Rules
				PrmBankTransactionCode
					required
					constraint (PrmBankTransactionCode.BankTransactionType.BillOfExchangePayment)
						"BankTransactionCodeMustBeBillOfExchangeType"
				PrmDraftNumber
					required
				PrmDraftDate
					required
			Action Rules
				if (TransactionIDNumber not entered)
					if (BankTransactionCode.TransactionIDNumber entered)
						TransactionIDNumber = BankTransactionCode.TransactionIDNumber
					else
						invoke IncrementTransactionIDNumber BankTransactionCode
						TransactionIDNumber = BankTransactionCode.TransactionIDNumber
				BankTransactionCode 		= PrmBankTransactionCode
				TransactionNumber			= PrmDraftNumber
				initialize CheckDate
				invoke Create PayablesBillOfExchange
					fill in fields from PayablesInvoicePayment
					invoked.CashManagementGroup		= GeneralLedgerCompanyRel.FinanceEnterpriseGroup
					invoked.BankTransactionCode		= PrmBankTransactionCode
					invoked.PayablesBillOfExchange	= TransactionIDNumber
					invoked.DraftNumber				= PrmDraftNumber
					invoked.Suffix					= PrmDraftSuffix
					invoked.DraftDate				= PrmDraftDate
					invoked.DraftAmount				= PaymentAmount.CurrencyAmount
					invoked.MaturityDate			= DueDate
					if (Vendor != PayVendor)
						invoked.Vendor				= PayVendor
						invoked.VendorName			= PayVendor.VendorName

		DeleteBillOfExchange is an Instance Action
			valid when (HasDeletableBOE)
			Action Rules
				invoke Delete PayablesBillOfExchangeRel
				initialize TransactionNumber
				initialize CheckDate

		CreateRetainageSplit is an Instance Action
			restricted					
			Parameters
				RetainageAmount		is an InternationalAmount
			Action Rules
				LocalRetainagePercent						= RetainageAmount / PaymentAmount.CurrencyAmount

				LocalRetainagePaymentAmount					= PaymentAmount.CurrencyAmount * LocalRetainagePercent
				LocalRetainageDiscountAmount				= DiscountAmount.CurrencyAmount * LocalRetainagePercent
				LocalRetainageRevaluedBaseAmount			= RevaluedBaseAmount.CurrencyAmount * LocalRetainagePercent
				LocalRetainageBankCheckAmount				= BankCheckAmount * LocalRetainagePercent
				LocalRetainageWithholdingAmount				= WithholdingAmount * LocalRetainagePercent
				LocalRetainageGainLossAmount				= GainLossAmount * LocalRetainagePercent

				round LocalRetainagePaymentAmount      to nearest DerivedRoundTo  
				round LocalRetainageDiscountAmount     to nearest DerivedRoundTo
				round LocalRetainageRevaluedBaseAmount to nearest DerivedRoundTo
				round LocalRetainageBankCheckAmount    to nearest DerivedRoundTo
				round LocalRetainageWithholdingAmount  to nearest DerivedRoundTo
				round LocalRetainageGainLossAmount     to nearest DerivedRoundTo

				invoke Update
					invoked.PaymentAmount.CurrencyAmount		-= LocalRetainagePaymentAmount
					invoked.DiscountAmount.CurrencyAmount		-= LocalRetainageDiscountAmount
					invoked.RevaluedBaseAmount.CurrencyAmount	-= LocalRetainageRevaluedBaseAmount
					invoked.BankCheckAmount						-= LocalRetainageBankCheckAmount
					invoked.WithholdingAmount					-= LocalRetainageWithholdingAmount
					invoked.GainLossAmount						-= LocalRetainageGainLossAmount
					invoked.PaymentAmount.KeepRateOnly			= true
					invoked.TransientBypassUpdateEdit 			= true
					invoked.TransientBypassRevalueEdit 			= true
					invoked.TransientAllowChange 				= true
					invoked.SeparatePayment						= false

				invoke Create PayablesInvoicePayment
					assign result to NewPayablesInvoicePayment
					fill in fields from this instance
						except invoked.PaymentAmount
						except invoked.DiscountAmount
						except invoked.RevaluedBaseAmount
						except invoked.BankCheckAmount
						except invoked.WithholdingAmount
						except invoked.GainLossAmount
						except invoked.TransientAllowableAmount

					invoked.PaymentAmount.CurrencyAmount 		= LocalRetainagePaymentAmount
					invoked.DiscountAmount.CurrencyAmount		= LocalRetainageDiscountAmount
					invoked.RevaluedBaseAmount.CurrencyAmount	= LocalRetainageRevaluedBaseAmount
					invoked.BankCheckAmount						= LocalRetainageBankCheckAmount
					invoked.WithholdingAmount					= LocalRetainageWithholdingAmount
					invoked.GainLossAmount						= LocalRetainageGainLossAmount

					invoked.OnHold							= true
					invoked.RetainagePayment				= true
					invoked.AccrualCode						= PayablesInvoice.RetainageAccrualCode

				if (Company.VendorGroup.RetainageHoldCode entered)
					invoke Create PayablesOnHold
						invoked.HoldRecordType				= "P"
						invoked.VendorGroup					= Company.VendorGroup
						invoked.Company						= Company
						invoked.Vendor						= Vendor
						invoked.Invoice						= Invoice
						invoked.PayablesInvoice				= NewPayablesInvoicePayment.PayablesInvoice
						invoked.PayablesInvoicePayment.PaymentSequence		= NewPayablesInvoicePayment.PayablesInvoicePayment.PaymentSequence
						invoked.PayablesInvoicePayment.VoidSequence			= NewPayablesInvoicePayment.PayablesInvoicePayment.VoidSequence
						invoked.ProcessLevel				= ProcessLevel
						invoked.HoldCode					= Company.VendorGroup.RetainageHoldCode

			Exit Rules


				if (NewPayablesInvoicePayment.PayablesInvoicePayment.PaymentSequence > 2)
					invoke RebuildRetainage PayablesInvoice 

		LoadOpenPaymentDetails is a Set Action 
			restricted
			Parameters
				PrmCashManagementGroup	 	is a CashManagementGroup
				PrmCompany				 	is a GeneralLedgerCompany
				PrmLoadDate				 	is Date
				PrmRunForGroup			 	is Boolean
				PrmIncludeUnreleasedRecords is Boolean

			Parameter Rules
				PrmCashManagementGroup	required
				PrmCompany
					if (!PrmRunForGroup)
						required
				PrmLoadDate				required

			Local Fields
				LocalMonthCount				is Numeric 2
				LocalNewDueDate				is Date

			Instance Selection
				where (Company = PrmCompany
				and   ((!PrmIncludeUnreleasedRecords
				and   (Status > 0
				and    Status < 5))
				or    (PrmIncludeUnreleasedRecords
				and   (Status >= 0
				and    Status <= 7))))

			Sort Order
				Company
				Status

			Action Rules
				Empty Set Rules
					increment PrmCashManagementGroup.DirectForecastProcessesCompleted

					if (PrmCashManagementGroup.NumberOfForecastProcessesLeft !entered)
						invoke SummarizeDirectForecastDetail DirectForecastDetail
							if (PrmRunForGroup)
								invoked.PrmCashManagementGroup	= PrmCashManagementGroup
							else
								invoked.PrmCompany = PrmCompany

				Set Rules
					Exit Rules
						increment PrmCashManagementGroup.DirectForecastProcessesCompleted

						if (PrmCashManagementGroup.NumberOfForecastProcessesLeft !entered)
							invoke SummarizeDirectForecastDetail DirectForecastDetail
								if (PrmRunForGroup)
									invoked.PrmCashManagementGroup	= PrmCashManagementGroup
								else
									invoked.PrmCompany = PrmCompany

				Instance Rules
					LocalInvoiceSuffix = Suffix

					invoke Create DirectForecastDetail
						invoked.Company							  = Company
						invoked.DueDate							  = DueDate
						invoked.LoadDate						  = PrmLoadDate
						invoked.SystemCode						  = "AP"
						invoked.Vendor							  = Vendor
						invoked.Name							  = Vendor.VendorName		
						invoked.Invoice							  = Invoice
						invoked.InvoiceSequence					  = LocalInvoiceSuffix
						invoked.CashCode						  = CashCode
						invoked.CashManagementAccount			  = CashCode.BankAccountNumber
						invoked.ProcessLevel					  = ProcessLevel
						invoked.TransactionCurrency				  = InvoiceCurrency
						invoked.Amount.TransactionAmount		 -= PaymentAmount.CurrencyAmount
						invoked.DiscountAmount.TransactionAmount -= DiscountAmount.CurrencyAmount
						invoked.OriginatingTransaction 			  = reference to this instance

					if (PayablesInvoice.NumberOfRecurringInvoices > LocalInvoiceSuffix)
						if (PayablesInvoice.RecurringFrequency.Monthly)
							LocalMonthCount	= 1
						if (PayablesInvoice.RecurringFrequency.Quarterly)
							LocalMonthCount	= 3
						if (PayablesInvoice.RecurringFrequency.SemiAnnually)
							LocalMonthCount	= 6
						if (PayablesInvoice.RecurringFrequency.Yearly)
							LocalMonthCount	= 12
						if (PayablesInvoice.RecurringFrequency.EndOfMonth)
							LocalMonthCount	= 1
						if (PayablesInvoice.RecurringFrequency.Weekly)
							LocalNewDueDate	= DueDate + 7
						else
							LocalNewDueDate	= DueDate + LocalMonthCount as months

						if (PayablesInvoice.RecurringFrequency.EndOfMonth)
							LocalNewDueDate	= LocalNewDueDate + (LocalNewDueDate days in month -  LocalNewDueDate day)

						while (LocalInvoiceSuffix < PayablesInvoice.NumberOfRecurringInvoices)
							LocalInvoiceSuffix += 1
							invoke Create DirectForecastDetail
								invoked.Company							  = Company
								invoked.DueDate							  = LocalNewDueDate
								invoked.LoadDate						  = PrmLoadDate
								invoked.SystemCode						  = "AP"
								invoked.Vendor							  = Vendor
								invoked.Name							  = Vendor.VendorName		
								invoked.Invoice							  = Invoice
								invoked.InvoiceSequence					  = LocalInvoiceSuffix
								invoked.CashCode					  	  = CashCode
								invoked.CashManagementAccount			  = CashCode.BankAccountNumber
								invoked.ProcessLevel			  		  = ProcessLevel
								invoked.TransactionCurrency				  = InvoiceCurrency
								invoked.Amount.TransactionAmount		 -= PaymentAmount.CurrencyAmount
								invoked.DiscountAmount.TransactionAmount -= DiscountAmount.CurrencyAmount
								invoked.OriginatingTransaction			  = reference to this instance

							if (PayablesInvoice.RecurringFrequency.Weekly)
								LocalNewDueDate = LocalNewDueDate + 7
							else
								LocalNewDueDate = LocalNewDueDate + LocalMonthCount as months

							if (PayablesInvoice.RecurringFrequency.EndOfMonth)
								LocalNewDueDate	= LocalNewDueDate + (LocalNewDueDate days in month -  LocalNewDueDate day)

		CreateFromBatch is a Create Action
			restricted
			Action Rules
				initialize PaymentAmount.ExchangeDate
				initialize PaymentAmount.FunctionalAmount
				initialize PaymentAmount.AlternateAmount
				initialize PaymentAmount.AlternateAmount2
				initialize PaymentAmount.AlternateAmount3
				initialize PaymentAmount.ToFunctionalAmount
				initialize PaymentAmount.ToAlternateAmount
				initialize PaymentAmount.ToAlternateAmount2
				initialize PaymentAmount.ToAlternateAmount3
				initialize PaymentAmount.ProjectAmount
				initialize PaymentAmount.ReportAmount1
				initialize PaymentAmount.ReportAmount2
				initialize PaymentAmount.ReportAmount3
				initialize PaymentAmount.ReportAmount4
				initialize PaymentAmount.ReportAmount5
				initialize DiscountAmount.ExchangeDate
				initialize DiscountAmount.FunctionalAmount
				initialize DiscountAmount.AlternateAmount
				initialize DiscountAmount.AlternateAmount2
				initialize DiscountAmount.AlternateAmount3
				initialize DiscountAmount.ToFunctionalAmount
				initialize DiscountAmount.ToAlternateAmount
				initialize DiscountAmount.ToAlternateAmount2
				initialize DiscountAmount.ToAlternateAmount3
				initialize DiscountAmount.ProjectAmount
				initialize DiscountAmount.ReportAmount1
				initialize DiscountAmount.ReportAmount2
				initialize DiscountAmount.ReportAmount3
				initialize DiscountAmount.ReportAmount4
				initialize DiscountAmount.ReportAmount5
				initialize NetPaymentAmount
				initialize RevaluedBaseAmount
				initialize WithholdingAmount
				initialize SecondaryWithholdingTransactionAmount1
				initialize SecondaryWithholdingTransactionAmount2
				initialize SecondaryWithholdingTransactionAmount3
				if (IncomeCode !entered)					
					initialize ReportableIncomeAmount
				initialize DiscountLost
				initialize DiscountAccount
				initialize CheckDate
				initialize BankCheckAmount
				initialize TransactionIDNumber
				initialize TransactionNumber
				initialize GainLossAmount
				CreateFromBatchSwitch = true
				invoke Create this instance

		CreateMatchAccrualDistribution is an Instance Action		
			restricted
			Parameters
				PrmControlDocumentNumber	is Alpha 30
				PrmDescription				is Alpha up to 60
				PrmReference				is a Reference
				PrmJournalizeGroup			is like JournalizeGroup
				PrmVoidDate					is Date
			Action Rules
				LocalPayablesCompany		= Company
				if (AccrualCode entered)
					LocalAccrualCode		= AccrualCode
				else
					LocalAccrualCode		= PayablesInvoice.AccrualCode
				invoke CreateFromBatchNoParms PayablesInvoiceDistribution
					invoked.CreateAlternateGLTransDetail	= true
					invoked.GLTPostingDate				= PrmVoidDate
					invoked.DistributionDate			= PrmVoidDate
					invoked.GLTGeneralLedgerEvent		= "AC"
					invoked.DistributionAmount.CurrencyAmount		= (PayablesInvoiceDiscountRel.DiscountAmount.CurrencyAmount *-1)
					invoked.GLTTransactionDate			= PrmVoidDate
					invoked.GLTCurrencyCode				= InvoiceCurrency
					invoked.Company						= Company
					invoked.PayablesInvoice				= PayablesInvoice
					invoked.DistributionType			= "M"
					invoked.AccrualCode					= LocalAccrualCode
					invoked.PostingOption				= "S"
					invoked.Status						= 1
					invoked.GLTControlDocumentNumber	= PrmControlDocumentNumber
					invoked.GLTDocumentNumber			= PrmControlDocumentNumber
					invoked.Description					= PrmDescription
					invoked.DistributionReference		= PrmReference
					invoked.InvoiceCurrency				= InvoiceCurrency
					invoked.DistributionAmount.ExchangeDate			= PayablesInvoice.InvoiceDate 
					invoked.DistributionAmount.KeepRateAndAmount	= true
					invoked.GLFinanceCodeBlock			= PayablesAccrualCodeDetailRel.DistributionAccount
					invoked.GLTTransactionCodeBlock		= PayablesAccrualCodeDetailRel.DistributionAccount
					invoked.DistributionAccount			= PayablesAccrualCodeDetailRel.DistributionAccount
					invoked.GLTJournalizeGroup			= PrmJournalizeGroup
					invoked.BypassActiveCodeBlockEdit 	= true		

		CreateMatchDiscountAccrualDistribution is an Instance Action		
			default label is untranslatable
			restricted
			Parameters
				PrmControlDocumentNumber	is Alpha 30
				PrmDescription				is Alpha up to 60
				PrmReference				is a Reference
				PrmJournalizeGroup			is like JournalizeGroup
				PrmVoidDate					is Date
			Action Rules
				if (AccrualCode entered)
					LocalAccrualCode					= AccrualCode
				else 
					LocalAccrualCode					= PayablesInvoice.AccrualCode

				invoke CreateFromBatchNoParms PayablesInvoiceDistribution
					invoked.CreateAlternateGLTransDetail	= true
					invoked.GLTPostingDate				= PrmVoidDate
					invoked.DistributionDate			= PrmVoidDate
					invoked.GLTGeneralLedgerEvent		= "DS"
					invoked.DistributionAmount.CurrencyAmount		= PayablesInvoiceDiscountRel.DiscountAmount.CurrencyAmount
					invoked.GLTTransactionDate			= PrmVoidDate
					invoked.GLTCurrencyCode				= InvoiceCurrency
					invoked.Company						= Company
					invoked.PayablesInvoice				= PayablesInvoice
					invoked.DistributionType			= "M"
					invoked.AccrualCode					= LocalAccrualCode
					invoked.PostingOption				= "S"
					invoked.Status						= 1
					invoked.GLTControlDocumentNumber	= PrmControlDocumentNumber
					invoked.GLTDocumentNumber			= PrmControlDocumentNumber
					invoked.Description					= PrmDescription
					invoked.DistributionReference		= PrmReference
					invoked.InvoiceCurrency				= InvoiceCurrency
					invoked.DistributionAmount.ExchangeDate			= PayablesInvoice.InvoiceDate 
					invoked.DistributionAmount.KeepRateAndAmount	= true
					invoked.GLFinanceCodeBlock			= MatchCompanyRel.DiscountAccrualAccount
					invoked.GLTTransactionCodeBlock		= MatchCompanyRel.DiscountAccrualAccount
					invoked.DistributionAccount			= MatchCompanyRel.DiscountAccrualAccount
					invoked.GLTJournalizeGroup			= PrmJournalizeGroup
					invoked.BypassActiveCodeBlockEdit 	= true		

		CreatePaymentAccrualDistribution is an Instance Action
			restricted
			Parameters
				PrmControlDocumentNumber is Alpha 30
				PrmDescription           is Alpha up to 60
				PrmReference             is a Reference
				PrmJournalizeGroup       is like JournalizeGroup
				PrmVoidDate				 is Date 
				PrmStaleDateAccount		 is like FinanceCodeBlock
				PrmReallocate			 is Boolean
				PrmPostDate				 is Date
				PrmAmendedReallocation	 is Boolean			
				PrmProcessGroup			 is like PayablesProcessGroup
				PrmPaymentClose			 is Boolean
			Local Fields
				LocalBoolean			 is Boolean
			Action Rules

				if (GeneralLedgerCompanyRel.FinanceEnterpriseGroup.FundAccounting
				and !PayablesInvoice.InvoiceType.Prepayment 
				and !PayablesInvoice.InvoiceType.PrepaymentCredit 
				and !PayablesInvoice.InvoiceType.MatchPrepayment
				and !PrmReallocate)

					if (CashCodeFundEditRel exists)
						LocalPaymentPercent	= PaymentAmount.CurrencyAmount / PayablesInvoice.InvoiceAmount.CurrencyAmount
						if (PrmAmendedReallocation)
							invoke RelieveAmmendedCommittedFunds CashCodeFundEditRel
								invoked.PrmPaymentPercent	= LocalPaymentPercent
								if (LocalPaymentPercent != 1)
									invoked.PrmNumberOfDecimals = InvoiceCurrency.NumberOfDecimals
						else
							invoke RelieveCommittedFunds CashCodeFundEditRel
								invoked.PrmPaymentPercent	= LocalPaymentPercent
								if (LocalPaymentPercent != 1)
									invoked.PrmNumberOfDecimals = InvoiceCurrency.NumberOfDecimals
								if (PrmVoidDate entered)
									invoked.PrmVoidReinstatement = true
								if (PrmPaymentClose)
									invoked.PrmPayGroup	= PayGroup							
							
#ifdef module cam
					if(GeneralLedgerCompanyRel.FinanceEnterpriseGroup.CustodialAccountManagement)
						if (CustodialAccountEditRel exists)
							LocalPaymentPercent	= PaymentAmount.CurrencyAmount / PayablesInvoice.InvoiceAmount.CurrencyAmount







							if (PrmAmendedReallocation)
								invoke RelieveAmmendedCommittedAmount CustodialAccountEditRel
									invoked.PrmPaymentPercent	= LocalPaymentPercent
									if (LocalPaymentPercent != 1)
										invoked.PrmNumberOfDecimals = InvoiceCurrency.NumberOfDecimals
							else
								invoke RelieveCommittedAmount CustodialAccountEditRel
									invoked.PrmPaymentPercent	= LocalPaymentPercent
									if (LocalPaymentPercent != 1)
										invoked.PrmNumberOfDecimals = InvoiceCurrency.NumberOfDecimals
									if (PrmVoidDate entered)
										invoked.PrmVoidReinstatement = true
#endif

					if (PrmAmendedReallocation)		
						LocalAmendedReallocation = true
					LocalPayablesCompany = Company
					LocalAccrualCode = AccrualCode
					if (HasICBSelectDistributionSet) 
						LocalNumberOfDistributions = instance count of PayablesFundApplyDistributionRel 
					else
						LocalNumberOfDistributions = instance count of ProrateDistributionsRel


					initialize LocalTotalDistributionAmount
					if (CashCode.Currency = InvoiceCurrency)
						LocalTotalDistributionAmount = PaymentAmount
					else
						LocalCurrencyTable = PayablesInvoice.CurrencyTable
						LocalCurrencyCalculationGroup.FinanceEnterpriseGroup = GeneralLedgerCompanyRel.FinanceEnterpriseGroup
						LocalCurrencyCalculationGroup.ExchangeDate = CheckDate
						LocalCurrencyCalculationGroup.FromCurrency = CashCode.Currency
						LocalCurrencyCalculationGroup.FunctionalAmount.ToCurrency = GeneralLedgerCompanyRel.AccountingEntity.FunctionalCurrency
						LocalCurrencyCalculationGroup.AlternateAmount.ToCurrency = GeneralLedgerCompanyRel.AccountingEntity.AlternateCurrency
						LocalCurrencyCalculationGroup.AlternateAmount2.ToCurrency = GeneralLedgerCompanyRel.AccountingEntity.AlternateCurrency2
						LocalCurrencyCalculationGroup.AlternateAmount3.ToCurrency = GeneralLedgerCompanyRel.AccountingEntity.AlternateCurrency3
						LocalCurrencyCalculationGroup.ReportAmount1.ToCurrency = GeneralLedgerCompanyRel.FinanceEnterpriseGroup.ReportCurrencyOne
						LocalCurrencyCalculationGroup.ReportAmount2.ToCurrency = GeneralLedgerCompanyRel.FinanceEnterpriseGroup.ReportCurrencyTwo
						LocalCurrencyCalculationGroup.ReportAmount3.ToCurrency = GeneralLedgerCompanyRel.FinanceEnterpriseGroup.ReportCurrencyThree
						LocalCurrencyCalculationGroup.ReportAmount4.ToCurrency = GeneralLedgerCompanyRel.FinanceEnterpriseGroup.ReportCurrencyFour
						LocalCurrencyCalculationGroup.ReportAmount5.ToCurrency = GeneralLedgerCompanyRel.FinanceEnterpriseGroup.ReportCurrencyFive
						LocalCashCodePaymentAmount.CurrencyAmount = BankCheckAmount
						LocalCashCodePaymentAmount.FunctionalAmount.EnteredCurrencyAmount = LocalCurrencyCalculationGroup.FunctionalAmount.OutputCurrencyAmount
						LocalCashCodePaymentAmount.FunctionalAmount.EnteredCurrencyRate = LocalCurrencyCalculationGroup.FunctionalAmount.OutputCurrencyRate
						if (GeneralLedgerCompanyRel.AccountingEntity.AlternateCurrency entered)
							LocalCashCodePaymentAmount.AlternateAmount.EnteredCurrencyAmount = LocalCurrencyCalculationGroup.AlternateAmount.OutputCurrencyAmount
							LocalCashCodePaymentAmount.AlternateAmount.EnteredCurrencyRate = LocalCurrencyCalculationGroup.AlternateAmount.OutputCurrencyRate
						if (GeneralLedgerCompanyRel.AccountingEntity.AlternateCurrency2 entered)
							LocalCashCodePaymentAmount.AlternateAmount2.EnteredCurrencyAmount = LocalCurrencyCalculationGroup.AlternateAmount2.OutputCurrencyAmount
							LocalCashCodePaymentAmount.AlternateAmount2.EnteredCurrencyRate = LocalCurrencyCalculationGroup.AlternateAmount2.OutputCurrencyRate
						if (GeneralLedgerCompanyRel.AccountingEntity.AlternateCurrency3 entered)
							LocalCashCodePaymentAmount.AlternateAmount3.EnteredCurrencyAmount = LocalCurrencyCalculationGroup.AlternateAmount3.OutputCurrencyAmount
							LocalCashCodePaymentAmount.AlternateAmount3.EnteredCurrencyRate = LocalCurrencyCalculationGroup.AlternateAmount3.OutputCurrencyRate
						if (GeneralLedgerCompanyRel.FinanceEnterpriseGroup.ReportCurrencyOne entered)
							LocalCashCodePaymentAmount.ReportAmount1.EnteredCurrencyAmount = LocalCurrencyCalculationGroup.ReportAmount1.OutputCurrencyAmount
							LocalCashCodePaymentAmount.ReportAmount1.EnteredCurrencyRate = LocalCurrencyCalculationGroup.ReportAmount1.OutputCurrencyRate
						if (GeneralLedgerCompanyRel.FinanceEnterpriseGroup.ReportCurrencyTwo entered)
							LocalCashCodePaymentAmount.ReportAmount2.EnteredCurrencyAmount = LocalCurrencyCalculationGroup.ReportAmount2.OutputCurrencyAmount
							LocalCashCodePaymentAmount.ReportAmount2.EnteredCurrencyRate = LocalCurrencyCalculationGroup.ReportAmount2.OutputCurrencyRate
						if (GeneralLedgerCompanyRel.FinanceEnterpriseGroup.ReportCurrencyThree entered)
							LocalCashCodePaymentAmount.ReportAmount3.EnteredCurrencyAmount = LocalCurrencyCalculationGroup.ReportAmount3.OutputCurrencyAmount
							LocalCashCodePaymentAmount.ReportAmount3.EnteredCurrencyRate = LocalCurrencyCalculationGroup.ReportAmount3.OutputCurrencyRate
						if (GeneralLedgerCompanyRel.FinanceEnterpriseGroup.ReportCurrencyFour entered)
							LocalCashCodePaymentAmount.ReportAmount4.EnteredCurrencyAmount = LocalCurrencyCalculationGroup.ReportAmount4.OutputCurrencyAmount
							LocalCashCodePaymentAmount.ReportAmount4.EnteredCurrencyRate = LocalCurrencyCalculationGroup.ReportAmount4.OutputCurrencyRate
						if (GeneralLedgerCompanyRel.FinanceEnterpriseGroup.ReportCurrencyFive entered)
							LocalCashCodePaymentAmount.ReportAmount5.EnteredCurrencyAmount = LocalCurrencyCalculationGroup.ReportAmount5.OutputCurrencyAmount
							LocalCashCodePaymentAmount.ReportAmount5.EnteredCurrencyRate = LocalCurrencyCalculationGroup.ReportAmount5.OutputCurrencyRate
						LocalTotalDistributionAmount = LocalCashCodePaymentAmount

					if (PrmAmendedReallocation)			
						initialize LocalTotalDistributionAmount 

					initialize LocalDistributionCount
					if (HasICBSelectDistributionSet) 
						include UsePayablesFundApplyDistributions 
					else
						include ProratePayablesInvoiceDistributions 
				else
					
					LocalPayablesCompany		= Company
					if (AccrualCode entered)
						LocalAccrualCode		= AccrualCode
					else
						LocalAccrualCode		= PayablesInvoice.AccrualCode
					
					if (PrmVoidDate	entered
					or  PrmReallocate)
						NegativeFinanceCurrencyAmountGroup = PaymentAmount 
						LocalBoolean = NegativeFinanceCurrencyAmountGroup.PerformCalculation
					invoke CreateFromBatchNoParms PayablesInvoiceDistribution
						invoked.CreateAlternateGLTransDetail	= true
						if (PrmVoidDate	entered
						or  PrmReallocate)
							if (PrmReallocate)
								invoked.GLTPostingDate			= PrmPostDate
								invoked.DistributionDate		= PrmPostDate
							else
								invoked.GLTPostingDate			= PrmVoidDate
								invoked.DistributionDate		= PrmVoidDate
							invoked.GLTGeneralLedgerEvent	= "VP"
							invoked.DistributionAmount		= NegativeFinanceCurrencyAmountGroup
						else
							if (PrmPostDate entered)
								invoked.GLTPostingDate			= PrmPostDate
								invoked.DistributionDate		= PrmPostDate
							else
								invoked.GLTPostingDate			= CheckDate
								invoked.DistributionDate		= CheckDate
							invoked.GLTGeneralLedgerEvent	= "AP"
							invoked.DistributionAmount		= PaymentAmount	
						invoked.GLTTransactionDate			= CheckDate
						invoked.GLTCurrencyCode				= InvoiceCurrency	
						invoked.Company						= Company
						invoked.PayablesInvoice				= PayablesInvoice
						invoked.DistributionType 			= PayablesDistributionType.PaymentAccrual
						invoked.AccrualCode 				= LocalAccrualCode 
						invoked.PostingOption				= "S"
						invoked.Status						= 1
						invoked.GLTControlDocumentNumber	= PrmControlDocumentNumber
						invoked.GLTDocumentNumber           = PrmControlDocumentNumber
						invoked.Description					= PrmDescription
						invoked.DistributionReference		= PrmReference
						invoked.InvoiceCurrency				= InvoiceCurrency	
						invoked.DistributionAmount.ExchangeDate			= PayablesInvoice.InvoiceDate 
						invoked.DistributionAmount.KeepRateAndAmount	= true
						invoked.GLFinanceCodeBlock			= PayablesAccrualCodeDetailRel.DistributionAccount
						invoked.GLTTransactionCodeBlock		= PayablesAccrualCodeDetailRel.DistributionAccount
						invoked.DistributionAccount			= PayablesAccrualCodeDetailRel.DistributionAccount
						if (PayablesInvoice.InvoiceType.MatchPrepayment		
						and PayablesInvoice.AccrualCodeProjectOverride entered)
							invoked.GLFinanceCodeBlock.Project		= PayablesInvoice.AccrualCodeProjectOverride
							invoked.GLTTransactionCodeBlock.Project	= PayablesInvoice.AccrualCodeProjectOverride
							invoked.DistributionAccount.Project		= PayablesInvoice.AccrualCodeProjectOverride						
						invoked.GLTJournalizeGroup			= PrmJournalizeGroup
						invoked.BypassActiveCodeBlockEdit 	= true		

					if (PrmVoidDate	entered
					and !MarkedAsPaid)	
						include SetPaymentCurrencyAmountFields		
						include CalculateCashCodeCurrencyAmount		
						invoke CreateFromBatchNoParms PayablesInvoiceDistribution
							invoked.CreateAlternateGLTransDetail	= true
							invoked.GLTPostingDate				= PrmVoidDate
							invoked.DistributionDate			= PrmVoidDate
							invoked.GLTGeneralLedgerEvent		= "VP"
							invoked.DistributionAmount			= LocalCashCodePaymentAmount		
							invoked.GLTTransactionDate			= CheckDate
							invoked.GLTCurrencyCode				= CashCode.Currency
							invoked.Company						= Company
							invoked.PayablesInvoice				= PayablesInvoice
							invoked.DistributionType 			= "P"
							invoked.AccrualCode 				= LocalAccrualCode 
							invoked.PostingOption				= "S"
							invoked.Status						= 1
							invoked.GLTControlDocumentNumber	= PrmControlDocumentNumber
							invoked.GLTDocumentNumber           = PrmControlDocumentNumber
							invoked.Description					= PrmDescription
							invoked.DistributionReference		= PrmReference
							invoked.InvoiceCurrency				= CashCode.Currency
							invoked.DistributionAmount.ExchangeDate			= CheckDate 
							invoked.DistributionAmount.KeepRateAndAmount	= true
							if (PrmStaleDateAccount entered)
								invoked.GLFinanceCodeBlock			= PrmStaleDateAccount
								invoked.GLTTransactionCodeBlock		= PrmStaleDateAccount
								invoked.DistributionAccount			= PrmStaleDateAccount
							else
								invoked.GLFinanceCodeBlock			= CompanyCashCodeRel.CashAccount
								invoked.GLTTransactionCodeBlock		= CompanyCashCodeRel.CashAccount
								invoked.DistributionAccount			= CompanyCashCodeRel.CashAccount
							invoked.GLTJournalizeGroup			= PrmJournalizeGroup
							invoked.BypassActiveCodeBlockEdit 	= true		

		CreateDiscountDistribution is an Instance Action
			restricted
			Parameters
				PrmControlDocumentNumber is Alpha 30
				PrmDescription           is Alpha up to 60
				PrmReference             is a Reference
				PrmJournalizeGroup       is like JournalizeGroup
				PrmVoidDate				 is Date 
				PrmReallocate			 is Boolean
				PrmPostDate				 is Date
				PrmAmendedReallocation	 is Boolean			
				PrmProcessGroup			 is like PayablesProcessGroup
			Local Fields
				LocalBoolean			 is Boolean
			Action Rules
				include SetInvoicePaymentCurrencyAmountFields
				include SetPaymentCurrencyAmountFields
				include CalculateDiscountCurrencyAmount

				if (CurrencyEvaluation !entered)		
					if (LocalInvoiceCurrencyCalculationGroup.FunctionalAmount.OutputCurrencyRate	= LocalCurrencyCalculationGroup.FunctionalAmount.OutputCurrencyRate
					and LocalInvoiceCurrencyCalculationGroup.AlternateAmount.OutputCurrencyRate		= LocalCurrencyCalculationGroup.AlternateAmount.OutputCurrencyRate
					and LocalInvoiceCurrencyCalculationGroup.AlternateAmount2.OutputCurrencyRate	= LocalCurrencyCalculationGroup.AlternateAmount2.OutputCurrencyRate
					and LocalInvoiceCurrencyCalculationGroup.AlternateAmount3.OutputCurrencyRate	= LocalCurrencyCalculationGroup.AlternateAmount3.OutputCurrencyRate
					and LocalInvoiceCurrencyCalculationGroup.ReportAmount1.OutputCurrencyRate		= LocalCurrencyCalculationGroup.ReportAmount1.OutputCurrencyRate
					and LocalInvoiceCurrencyCalculationGroup.ReportAmount2.OutputCurrencyRate		= LocalCurrencyCalculationGroup.ReportAmount2.OutputCurrencyRate
					and LocalInvoiceCurrencyCalculationGroup.ReportAmount3.OutputCurrencyRate		= LocalCurrencyCalculationGroup.ReportAmount3.OutputCurrencyRate
					and LocalInvoiceCurrencyCalculationGroup.ReportAmount4.OutputCurrencyRate		= LocalCurrencyCalculationGroup.ReportAmount4.OutputCurrencyRate
					and LocalInvoiceCurrencyCalculationGroup.ReportAmount5.OutputCurrencyRate		= LocalCurrencyCalculationGroup.ReportAmount5.OutputCurrencyRate)
						include CalculateCashCodeCurrencyAmount
						include CalculatePaymentCurrencyDifference
						CurrencyEvaluation	= 1 
						if (CalculateFinanceCurrencyAmountGroup.TotalIsNonZero)
							LocalDiscountAmount.FunctionalAmount.EnteredCurrencyAmount	+= CalculateFinanceCurrencyAmountGroup.Total.FunctionalAmount.EnteredCurrencyAmount
							LocalDiscountAmount.AlternateAmount.EnteredCurrencyAmount	+= CalculateFinanceCurrencyAmountGroup.Total.AlternateAmount.EnteredCurrencyAmount
							LocalDiscountAmount.AlternateAmount2.EnteredCurrencyAmount	+= CalculateFinanceCurrencyAmountGroup.Total.AlternateAmount2.EnteredCurrencyAmount
							LocalDiscountAmount.AlternateAmount3.EnteredCurrencyAmount	+= CalculateFinanceCurrencyAmountGroup.Total.AlternateAmount3.EnteredCurrencyAmount
							LocalDiscountAmount.ReportAmount1.EnteredCurrencyAmount		+= CalculateFinanceCurrencyAmountGroup.Total.ReportAmount1.EnteredCurrencyAmount
							LocalDiscountAmount.ReportAmount2.EnteredCurrencyAmount		+= CalculateFinanceCurrencyAmountGroup.Total.ReportAmount2.EnteredCurrencyAmount
							LocalDiscountAmount.ReportAmount3.EnteredCurrencyAmount		+= CalculateFinanceCurrencyAmountGroup.Total.ReportAmount3.EnteredCurrencyAmount
							LocalDiscountAmount.ReportAmount4.EnteredCurrencyAmount		+= CalculateFinanceCurrencyAmountGroup.Total.ReportAmount4.EnteredCurrencyAmount
							LocalDiscountAmount.ReportAmount5.EnteredCurrencyAmount		+= CalculateFinanceCurrencyAmountGroup.Total.ReportAmount5.EnteredCurrencyAmount
					else
						CurrencyEvaluation	= 2 
					include CheckForRateChangesDuringPaymentCycle	
				LocalPayablesCompany	= Company
				if (AccrualCode entered)
					LocalAccrualCode		= AccrualCode
				else
					LocalAccrualCode		= PayablesInvoice.AccrualCode

				if (!GeneralLedgerCompanyRel.FinanceEnterpriseGroup.FundAccounting
				or  PayablesInvoice.InvoiceType.Prepayment 
				or  PayablesInvoice.InvoiceType.PrepaymentCredit 
				or  PayablesInvoice.InvoiceType.MatchPrepayment
				or  PrmReallocate)
					if (PayablesDiscountCodeDetailRel.Allocation.ToDiscountCode
					or  PayablesInvoice.InvoiceType.Prepayment
					or  PayablesInvoice.InvoiceType.MatchPrepayment
					or  PrmReallocate)
						NegativeFinanceCurrencyAmountGroup = LocalDiscountAmount
						LocalBoolean = NegativeFinanceCurrencyAmountGroup.PerformCalculation

						invoke CreateFromBatchNoParms PayablesInvoiceDistribution
							invoked.CreateAlternateGLTransDetail	= true
							if (PrmVoidDate	entered
							or  PrmReallocate)
								invoked.GLTPostingDate				= PrmVoidDate
								invoked.DistributionDate			= PrmVoidDate
								invoked.GLTGeneralLedgerEvent		= "VP"
								invoked.DistributionAmount			= LocalDiscountAmount
							else
								if (PrmPostDate entered)
									invoked.GLTPostingDate			= PrmPostDate
									invoked.DistributionDate		= PrmPostDate
								else
									invoked.GLTPostingDate			= CheckDate
									invoked.DistributionDate		= CheckDate
								invoked.GLTGeneralLedgerEvent	= "AP"
								invoked.DistributionAmount		= NegativeFinanceCurrencyAmountGroup
							invoked.GLTTransactionDate			= CheckDate
							invoked.GLTCurrencyCode				= CashCode.Currency
							invoked.Company						= Company
							invoked.PayablesInvoice				= PayablesInvoice
							invoked.DistributionType 			= "S"
							invoked.AccrualCode					= LocalAccrualCode
							invoked.PostingOption				= "S"
							invoked.Status						= 1
							invoked.GLTControlDocumentNumber	= PrmControlDocumentNumber
							invoked.GLTDocumentNumber           = PrmControlDocumentNumber
							invoked.Description					= PrmDescription
							invoked.DistributionReference		= PrmReference
							invoked.InvoiceCurrency				= CashCode.Currency
							invoked.DistributionAmount.ExchangeDate			= CheckDate
							invoked.DistributionAmount.KeepRateAndAmount	= true
							invoked.GLFinanceCodeBlock			= PayablesDiscountCodeDetailRel.DiscountAccount
							invoked.GLTTransactionCodeBlock		= PayablesDiscountCodeDetailRel.DiscountAccount
							invoked.DistributionAccount			= PayablesDiscountCodeDetailRel.DiscountAccount
							invoked.GLTJournalizeGroup			= PrmJournalizeGroup
							invoked.BypassActiveCodeBlockEdit 	= true		
					else

						initialize LocalDistributionCount
						initialize LocalNumberOfDistributions
						LocalLastDistribution			= false
						LocalTotalDistributionAmount	= LocalDiscountAmount 
						initialize LocalProrateDistributionAmount

						for each ProrateDiscountDistributionsRel
							if (PayablesInvoice.DiscountCode.DiscountPoint.CostOfGoodsAndAddOnCharge
							or  PayablesInvoice.DiscountCode.DiscountPoint not entered
							or (PayablesInvoice.DiscountCode.DiscountPoint.CostOfGoods
							and each.AddOnCharge not entered))
								LocalNumberOfDistributions += 1
								LocalProrateDistributionAmount += each.DistributionAmount.CurrencyAmount

						for each ProrateDiscountDistributionsRel  

							LocalDistributionCount += 1

							if (!LocalLastDistribution)
								if (PayablesInvoice.DiscountCode.DiscountPoint.CostOfGoodsAndAddOnCharge
								or  PayablesInvoice.DiscountCode.DiscountPoint not entered
								or (PayablesInvoice.DiscountCode.DiscountPoint.CostOfGoods
								and each.AddOnCharge not entered))

									if (LocalDistributionCount = LocalNumberOfDistributions)
										LocalLastDistribution = true

									include CalculateFundDiscountCurrencyAmount			


									if (LocalLastDistribution)
										NegativeFinanceCurrencyAmountGroup	= LocalTotalDistributionAmount
										LocalDiscountAmount					= LocalTotalDistributionAmount
									else
										NegativeFinanceCurrencyAmountGroup	= LocalDiscountAmount
									LocalBoolean = NegativeFinanceCurrencyAmountGroup.PerformCalculation

									if  (!PayablesInvoice.MatchProcessType.Expense
									and   each.PayablesInvoiceDetail.ItemType.Inventoried)
										if (PayablesDiscountCodeDetailRel.Allocation.ProrateByAccount)
											LocalFinanceCodeBlock = PayablesDiscountCodeDetailRel.DiscountAccount
										else
											if  (PayablesInvoice.ProcessLevel.CostVarianceAccount entered)
												LocalFinanceCodeBlock	= PayablesInvoice.ProcessLevel.CostVarianceAccount
											else
												LocalFinanceCodeBlock	= MatchCompanyRel.CostVarianceAccount
									else
									if  (!PayablesInvoice.MatchProcessType.Expense
									and   each.PayablesInvoiceDetail not entered)
										if  (each.DistributionAccount != MatchCompanyRel.ReceiptAccrualAccount
										and  each.DistributionAccount != PayablesInvoice.ProcessLevel.ReceiptAccrualAccount)
											LocalFinanceCodeBlock = each.DistributionAccount
	
											if (PayablesDiscountCodeDetailRel.Allocation.ProrateByAccount)
												LocalFinanceCodeBlock.GeneralLedgerChartAccount = PayablesDiscountCodeDetailRel.DiscountAccount.GeneralLedgerChartAccount
										else
											LocalFinanceCodeBlock = PayablesDiscountCodeDetailRel.DiscountAccount
									else
										LocalFinanceCodeBlock = each.DistributionAccount
	
										if (PayablesDiscountCodeDetailRel.Allocation.ProrateByAccount)
											LocalFinanceCodeBlock.GeneralLedgerChartAccount = PayablesDiscountCodeDetailRel.DiscountAccount.GeneralLedgerChartAccount

									invoke CreateFromBatchNoParms PayablesInvoiceDistribution
										invoked.CreateAlternateGLTransDetail	= true
										if (PrmVoidDate	entered)
											invoked.GLTPostingDate				= PrmVoidDate
											invoked.DistributionDate			= PrmVoidDate
											invoked.GLTGeneralLedgerEvent		= "VP"
											invoked.DistributionAmount			= LocalDiscountAmount
										else
											if (PrmPostDate entered)
												invoked.GLTPostingDate			= PrmPostDate
												invoked.DistributionDate		= PrmPostDate
											else
												invoked.GLTPostingDate			= CheckDate
												invoked.DistributionDate		= CheckDate
											invoked.GLTGeneralLedgerEvent	= "AP"
											invoked.DistributionAmount		= NegativeFinanceCurrencyAmountGroup
										invoked.GLTTransactionDate			= CheckDate
										invoked.GLTCurrencyCode				= CashCode.Currency
										invoked.Company						= Company
										invoked.PayablesInvoice				= PayablesInvoice
										invoked.DistributionType 			= "S"
										invoked.AccrualCode					= LocalAccrualCode
										invoked.PostingOption				= "S"
										invoked.Status						= 1
										invoked.GLTControlDocumentNumber	= PrmControlDocumentNumber
										invoked.GLTDocumentNumber           = PrmControlDocumentNumber
										invoked.Description					= PrmDescription
										invoked.DistributionReference		= PrmReference
										invoked.InvoiceCurrency				= CashCode.Currency
										invoked.DistributionAmount.ExchangeDate			= CheckDate
										invoked.DistributionAmount.KeepRateAndAmount	= true
										invoked.GLFinanceCodeBlock			= LocalFinanceCodeBlock
										invoked.GLTTransactionCodeBlock		= LocalFinanceCodeBlock
										invoked.DistributionAccount			= LocalFinanceCodeBlock
										invoked.GLTJournalizeGroup			= PrmJournalizeGroup
										invoked.BypassActiveCodeBlockEdit 	= true		

									if  (!PayablesInvoice.MatchProcessType.Expense
									and   PayablesDiscountCodeDetailRel.Allocation.LandToExpense
									and   each.PayablesInvoiceDetail.ItemType.Inventoried
									and   each.PayablesInvoiceDetail.PurchaseOrderReceiptLine entered)
										LocalItem	  = each.PayablesInvoiceDetail.Item
										LocalLocation = each.PayablesInvoiceDetail.Location
										if (each.PayablesInvoiceDetail.PurchaseOrderReceiptLine.ShipToLocation entered)
											LocalLocation = each.PayablesInvoiceDetail.PurchaseOrderReceiptLine.ShipToLocation
							
										if  (each.PayablesInvoiceDetail.EnteredUOM != each.PayablesInvoiceDetail.Item.StockUOM
										or   each.PayablesInvoiceDetail.EnteredUOM != each.PayablesInvoiceDetail.VendorPriceUOM)
											ConvertedCost	= ((NegativeFinanceCurrencyAmountGroup.FunctionalAmount.EnteredCurrencyAmount / each.PayablesInvoiceDetail.MatchedQuantity) / each.PayablesInvoiceDetail.PurchaseOrderReceiptLine.VendorPriceUOMMultiplier)
										else
											ConvertedCost	= NegativeFinanceCurrencyAmountGroup.FunctionalAmount.EnteredCurrencyAmount / each.PayablesInvoiceDetail.MatchedQuantity
						
										display "InvokeCostAdjust<ConvertedCost>Mult<each.PayablesInvoiceDetail.PurchaseOrderReceiptLine.VendorPriceUOMMultiplier>"

										if (ConvertedCost entered)		
											invoke UpdateForCostAdjustment ItemLocationRel
												invoked.PrmCostDifference				= ConvertedCost
												invoked.PrmQuantity						= each.PayablesInvoiceDetail.MatchedQuantity * each.PayablesInvoiceDetail.PurchaseOrderReceiptLine.VendorPriceUOMMultiplier
												if (PayablesInvoice.ProcessLevel.CostVarianceAccount entered)
													invoked.PrmOffsetAccount			= PayablesInvoice.ProcessLevel.CostVarianceAccount
												else
													invoked.PrmOffsetAccount			= MatchCompanyRel.CostVarianceAccount
												invoked.PrmDocumentNumber				= each.PayablesInvoiceDetail.PurchaseOrderReceiptLine.first InventoryTransactionLineRel.InventoryTransaction
												invoked.PrmLineNumber					= each.PayablesInvoiceDetail.PurchaseOrderReceiptLine
												invoked.PrmOriginatingPurchaseOrder		= each.PurchaseOrder

				else
				
					if (PrmAmendedReallocation) 	
						LocalAmendedReallocation = true
						initialize LocalTotalDistributionAmount
					initialize LocalDistributionCount
					LocalNumberOfDistributions		= instance count of ProrateDistributionsRel
					LocalLastDistribution			= false
					if (!PrmAmendedReallocation)	
						LocalTotalDistributionAmount	= LocalDiscountAmount 
					initialize LocalProrateDistributionAmount

					if (instance count of ProrateDistributionsRel > 25)				
						LocalPaymentPercent	= PaymentAmount.CurrencyAmount / DerivedInvoiceAmountDivisor
						if (PrmVoidDate entered)	
							LocalDiscountExchange.BaseAmount.EnteredCurrencyRate	= (BankCheckAmount / NetPaymentAmount.CurrencyAmount)
						else
							if (CashLedgerPayablesPaymentRel.IsManualPayment)
								LocalDiscountExchange.BaseAmount.EnteredCurrencyRate = CashLedgerPayablesPaymentRel.PaymentAmountBankAccountCurrency.EnteredCurrencyRate
							else
								if (InvoiceCurrency = CashRequirementsResult.InvoiceCurrency
								and CashCode 		= CashRequirementsResult.CashCode
								and CashRequirementsResult.OverridePaymentRate entered)
									LocalDiscountExchange.BaseAmount.EnteredCurrencyRate = CashRequirementsResult.OverridePaymentRate
						if (PrmVoidDate entered)
							LocalRunProgram = RunProgram.InvoiceReinstatement
						else
							LocalRunProgram 	= RunProgram.PaymentClosing
						LocalProcessGroup	= PrmProcessGroup
						LocalAsyncId = PayablesProcessingMonitorRel.AsyncId
						invoke CreatePaymentDistributionBackground PayablesInvoiceDistribution
							run after LocalAsyncId
							assign async action request id to LocalAsyncId
							invoked.PrmPayablesCompany			= Company
							invoked.PrmPayablesInvoice			= PayablesInvoice
							invoked.PrmJournalizeGroup       	= PrmJournalizeGroup
							invoked.PrmNumberOfDistributions	= LocalNumberOfDistributions
							invoked.PrmCheckDate				= CheckDate
							invoked.PrmVoidDate					= PrmVoidDate
							invoked.PrmPostDate					= PrmPostDate
							invoked.PrmAmendedReallocation		= PrmAmendedReallocation
							invoked.PrmAccrualCode				= LocalAccrualCode 
							invoked.PrmTotalDistributionAmount	= LocalTotalDistributionAmount
							invoked.PrmControlDocumentNumber	= PrmControlDocumentNumber
							invoked.PrmDescription           	= PrmDescription
							invoked.PrmReference             	= PrmReference
							invoked.PrmCashCode					= CashCode
							invoked.PrmPaymentAccount			= PayablesDiscountCodeDetailRel.DiscountAccount
							invoked.PrmCashCodeCurrency			= CashCode.Currency
							invoked.PrmBankCheckExchangeRate	= LocalDiscountExchange.BaseAmount.EnteredCurrencyRate
							invoked.PrmProrateAmount			= DiscountAmount.CurrencyAmount
							invoked.PrmDistributionType			= PayablesDistributionType.PaymentDiscount

						invoke Update PayablesProcessingMonitorRel
							invoked.AsyncId		= LocalAsyncId
					else
						for each ProrateDistributionsRel  

							LocalDistributionCount += 1
							if (LocalDistributionCount = LocalNumberOfDistributions)
								LocalLastDistribution = true

							include CalculateFundDiscountCurrencyAmount			

							if (LocalLastDistribution)
								NegativeFinanceCurrencyAmountGroup	= LocalTotalDistributionAmount
								LocalDiscountAmount					= LocalTotalDistributionAmount
							else
								NegativeFinanceCurrencyAmountGroup	= LocalDiscountAmount
							LocalBoolean = NegativeFinanceCurrencyAmountGroup.PerformCalculation

							initialize LocalCalculatePayablesFinanceStructure
							LocalCalculatePayablesFinanceStructure.InputPayablesCompany					= Company
							LocalCalculatePayablesFinanceStructure.InputPayablesInvoice					= PayablesInvoice
							LocalCalculatePayablesFinanceStructure.InputPayablesInvoiceDistribution		= each.PayablesInvoiceDistribution
							LocalCalculatePayablesFinanceStructure.InputPayablesFinanceStructureType	= PayablesFinanceStructureType.Payment
							LocalCalculatePayablesFinanceStructure.InputFinanceCodeBlock				= PayablesDiscountCodeDetailRel.DiscountAccount
							LocalAnswer = LocalCalculatePayablesFinanceStructure.CalculatePayablesFinanceStructure

							invoke CreateFromBatchNoParms PayablesInvoiceDistribution
								invoked.CreateAlternateGLTransDetail	= true
								if (PrmVoidDate	entered)
									invoked.GLTPostingDate				= PrmVoidDate
									invoked.DistributionDate			= PrmVoidDate
									invoked.GLTGeneralLedgerEvent		= "VP"
									invoked.DistributionAmount			= LocalDiscountAmount
								else
									if (PrmPostDate entered)
										invoked.GLTPostingDate			= PrmPostDate
										invoked.DistributionDate		= PrmPostDate
									else
										invoked.GLTPostingDate			= CheckDate
										invoked.DistributionDate		= CheckDate
									invoked.GLTGeneralLedgerEvent	= "AP"
									invoked.DistributionAmount		= NegativeFinanceCurrencyAmountGroup
								invoked.GLTTransactionDate			= CheckDate
								invoked.GLTCurrencyCode				= CashCode.Currency
								invoked.Company						= Company
								invoked.PayablesInvoice				= PayablesInvoice
								invoked.DistributionType 			= "S"
								invoked.AccrualCode					= LocalAccrualCode
								invoked.PostingOption				= "S"
								invoked.Status						= 1
								invoked.GLTControlDocumentNumber	= PrmControlDocumentNumber
								invoked.GLTDocumentNumber           = PrmControlDocumentNumber
								invoked.Description					= PrmDescription
								invoked.DistributionReference		= PrmReference
								invoked.InvoiceCurrency				= CashCode.Currency
								invoked.DistributionAmount.ExchangeDate			= CheckDate
								invoked.DistributionAmount.KeepRateAndAmount	= true
								invoked.GLFinanceCodeBlock			= LocalCalculatePayablesFinanceStructure.OutputFinanceCodeBlock
								invoked.GLTTransactionCodeBlock		= LocalCalculatePayablesFinanceStructure.OutputFinanceCodeBlock
								invoked.DistributionAccount			= LocalCalculatePayablesFinanceStructure.OutputFinanceCodeBlock
								invoked.GLTJournalizeGroup			= PrmJournalizeGroup
								invoked.BypassActiveCodeBlockEdit 	= true		

		CreateWithholdingDistribution is an Instance Action
			restricted
			Parameters
				PrmControlDocumentNumber is Alpha 30
				PrmDescription           is Alpha up to 60
				PrmReference             is a Reference
				PrmJournalizeGroup       is like JournalizeGroup
				PrmVoidDate				 is Date 
				PrmReallocate			 is Boolean
				PrmPostDate				 is Date
				PrmAmendedReallocation	 is Boolean			
				PrmProcessGroup			 is like PayablesProcessGroup
			Local Fields
				LocalBoolean			 is Boolean
				LocalUpdateForRounding	 is Boolean
			Action Rules

				include SetPaymentCurrencyAmountFields
				include CalculateWithholdingCurrencyAmount

				if (AccrualCode entered)
					LocalAccrualCode				= AccrualCode
				else 
					LocalAccrualCode				= PayablesInvoice.AccrualCode


				if (CurrencyEvaluation	!entered)
					include CalculateCashCodeCurrencyAmount
					include CalculatePaymentCurrencyDifference
					CurrencyEvaluation	= 1 

					if (CalculateFinanceCurrencyAmountGroup.TotalIsNonZero)
						if (Company.GlobalWithholding)
							LocalUpdateForRounding	= true
						else
							LocalWithholdingAmount.FunctionalAmount.EnteredCurrencyAmount	+= CalculateFinanceCurrencyAmountGroup.Total.FunctionalAmount.EnteredCurrencyAmount
							LocalWithholdingAmount.AlternateAmount.EnteredCurrencyAmount	+= CalculateFinanceCurrencyAmountGroup.Total.AlternateAmount.EnteredCurrencyAmount
							LocalWithholdingAmount.AlternateAmount2.EnteredCurrencyAmount	+= CalculateFinanceCurrencyAmountGroup.Total.AlternateAmount2.EnteredCurrencyAmount
							LocalWithholdingAmount.AlternateAmount3.EnteredCurrencyAmount	+= CalculateFinanceCurrencyAmountGroup.Total.AlternateAmount3.EnteredCurrencyAmount
							LocalWithholdingAmount.ReportAmount1.EnteredCurrencyAmount		+= CalculateFinanceCurrencyAmountGroup.Total.ReportAmount1.EnteredCurrencyAmount
							LocalWithholdingAmount.ReportAmount2.EnteredCurrencyAmount		+= CalculateFinanceCurrencyAmountGroup.Total.ReportAmount2.EnteredCurrencyAmount
							LocalWithholdingAmount.ReportAmount3.EnteredCurrencyAmount		+= CalculateFinanceCurrencyAmountGroup.Total.ReportAmount3.EnteredCurrencyAmount
							LocalWithholdingAmount.ReportAmount4.EnteredCurrencyAmount		+= CalculateFinanceCurrencyAmountGroup.Total.ReportAmount4.EnteredCurrencyAmount
							LocalWithholdingAmount.ReportAmount5.EnteredCurrencyAmount		+= CalculateFinanceCurrencyAmountGroup.Total.ReportAmount5.EnteredCurrencyAmount

				if (Company.GlobalWithholding)
					for each distinct CategoryAndCode in PayablesInvoiceWithholdingRel
						LocalWithholdingCategory	= each.WithholdingCategory
						LocalWithholdingCode		= each.IncomeWithholdingCode












						LocalWithholdingAmount.FunctionalAmount.EnteredCurrencyRate		= first PayablesInvoiceWithholdingByCodeRel.PaymentWithholdingAmount.FunctionalAmount.EnteredCurrencyRate
						LocalWithholdingAmount.AlternateAmount.EnteredCurrencyRate		= first PayablesInvoiceWithholdingByCodeRel.PaymentWithholdingAmount.AlternateAmount.EnteredCurrencyRate
						LocalWithholdingAmount.AlternateAmount2.EnteredCurrencyRate		= first PayablesInvoiceWithholdingByCodeRel.PaymentWithholdingAmount.AlternateAmount2.EnteredCurrencyRate
						LocalWithholdingAmount.AlternateAmount3.EnteredCurrencyRate		= first PayablesInvoiceWithholdingByCodeRel.PaymentWithholdingAmount.AlternateAmount3.EnteredCurrencyRate
						LocalWithholdingAmount.ReportAmount1.EnteredCurrencyRate		= first PayablesInvoiceWithholdingByCodeRel.PaymentWithholdingAmount.ReportAmount1.EnteredCurrencyRate
						LocalWithholdingAmount.ReportAmount2.EnteredCurrencyRate		= first PayablesInvoiceWithholdingByCodeRel.PaymentWithholdingAmount.ReportAmount2.EnteredCurrencyRate
						LocalWithholdingAmount.ReportAmount3.EnteredCurrencyRate		= first PayablesInvoiceWithholdingByCodeRel.PaymentWithholdingAmount.ReportAmount3.EnteredCurrencyRate
						LocalWithholdingAmount.ReportAmount4.EnteredCurrencyRate		= first PayablesInvoiceWithholdingByCodeRel.PaymentWithholdingAmount.ReportAmount4.EnteredCurrencyRate
						LocalWithholdingAmount.ReportAmount5.EnteredCurrencyRate		= first PayablesInvoiceWithholdingByCodeRel.PaymentWithholdingAmount.ReportAmount5.EnteredCurrencyRate
						LocalWithholdingAmount.CurrencyAmount							= sum PayablesInvoiceWithholdingByCodeRel.PaymentWithholdingAmount.CurrencyAmount
						LocalWithholdingAmount.FunctionalAmount.EnteredCurrencyAmount	= sum PayablesInvoiceWithholdingByCodeRel.PaymentWithholdingAmount.FunctionalAmount.EnteredCurrencyAmount
						LocalWithholdingAmount.AlternateAmount.EnteredCurrencyAmount	= sum PayablesInvoiceWithholdingByCodeRel.PaymentWithholdingAmount.AlternateAmount.EnteredCurrencyAmount
						LocalWithholdingAmount.AlternateAmount2.EnteredCurrencyAmount	= sum PayablesInvoiceWithholdingByCodeRel.PaymentWithholdingAmount.AlternateAmount2.EnteredCurrencyAmount
						LocalWithholdingAmount.AlternateAmount3.EnteredCurrencyAmount	= sum PayablesInvoiceWithholdingByCodeRel.PaymentWithholdingAmount.AlternateAmount3.EnteredCurrencyAmount
						LocalWithholdingAmount.ReportAmount1.EnteredCurrencyAmount		= sum PayablesInvoiceWithholdingByCodeRel.PaymentWithholdingAmount.ReportAmount1.EnteredCurrencyAmount
						LocalWithholdingAmount.ReportAmount2.EnteredCurrencyAmount		= sum PayablesInvoiceWithholdingByCodeRel.PaymentWithholdingAmount.ReportAmount2.EnteredCurrencyAmount
						LocalWithholdingAmount.ReportAmount3.EnteredCurrencyAmount		= sum PayablesInvoiceWithholdingByCodeRel.PaymentWithholdingAmount.ReportAmount3.EnteredCurrencyAmount
						LocalWithholdingAmount.ReportAmount4.EnteredCurrencyAmount		= sum PayablesInvoiceWithholdingByCodeRel.PaymentWithholdingAmount.ReportAmount4.EnteredCurrencyAmount
						LocalWithholdingAmount.ReportAmount5.EnteredCurrencyAmount		= sum PayablesInvoiceWithholdingByCodeRel.PaymentWithholdingAmount.ReportAmount5.EnteredCurrencyAmount
						if (LocalUpdateForRounding)
							LocalWithholdingAmount.FunctionalAmount.EnteredCurrencyAmount	+= CalculateFinanceCurrencyAmountGroup.Total.FunctionalAmount.EnteredCurrencyAmount
							LocalWithholdingAmount.AlternateAmount.EnteredCurrencyAmount	+= CalculateFinanceCurrencyAmountGroup.Total.AlternateAmount.EnteredCurrencyAmount
							LocalWithholdingAmount.AlternateAmount2.EnteredCurrencyAmount	+= CalculateFinanceCurrencyAmountGroup.Total.AlternateAmount2.EnteredCurrencyAmount
							LocalWithholdingAmount.AlternateAmount3.EnteredCurrencyAmount	+= CalculateFinanceCurrencyAmountGroup.Total.AlternateAmount3.EnteredCurrencyAmount
							LocalWithholdingAmount.ReportAmount1.EnteredCurrencyAmount		+= CalculateFinanceCurrencyAmountGroup.Total.ReportAmount1.EnteredCurrencyAmount
							LocalWithholdingAmount.ReportAmount2.EnteredCurrencyAmount		+= CalculateFinanceCurrencyAmountGroup.Total.ReportAmount2.EnteredCurrencyAmount
							LocalWithholdingAmount.ReportAmount3.EnteredCurrencyAmount		+= CalculateFinanceCurrencyAmountGroup.Total.ReportAmount3.EnteredCurrencyAmount
							LocalWithholdingAmount.ReportAmount4.EnteredCurrencyAmount		+= CalculateFinanceCurrencyAmountGroup.Total.ReportAmount4.EnteredCurrencyAmount
							LocalWithholdingAmount.ReportAmount5.EnteredCurrencyAmount		+= CalculateFinanceCurrencyAmountGroup.Total.ReportAmount5.EnteredCurrencyAmount
							initialize LocalUpdateForRounding

						if (LocalWithholdingAmount.CurrencyAmount entered)
							NegativeFinanceCurrencyAmountGroup = LocalWithholdingAmount
							LocalBoolean = NegativeFinanceCurrencyAmountGroup.PerformCalculation

							invoke CreateFromBatchNoParms PayablesInvoiceDistribution
								invoked.CreateAlternateGLTransDetail	= true
								if (PrmVoidDate	entered)
									invoked.GLTPostingDate				= PrmVoidDate
									invoked.DistributionDate			= PrmVoidDate
									invoked.GLTGeneralLedgerEvent		= "VP"
									invoked.DistributionAmount			= LocalWithholdingAmount
								else
									invoked.GLTPostingDate				= CheckDate
									invoked.DistributionDate			= CheckDate
									invoked.GLTGeneralLedgerEvent		= "AP"
									invoked.DistributionAmount			= NegativeFinanceCurrencyAmountGroup
								invoked.GLTTransactionDate			= CheckDate
								invoked.Company						= Company
								invoked.GLTCurrencyCode				= CashCode.Currency
								invoked.PayablesInvoice				= PayablesInvoice
								invoked.DistributionType 			= "W"
								invoked.AccrualCode					= LocalAccrualCode
								invoked.PostingOption				= "S"
								invoked.Status						= 1
								invoked.GLTControlDocumentNumber	= PrmControlDocumentNumber
								invoked.GLTDocumentNumber           = PrmControlDocumentNumber
								invoked.Description					= PrmDescription
								invoked.DistributionReference		= PrmReference
								invoked.InvoiceCurrency				= CashCode.Currency
								invoked.DistributionAmount.ExchangeDate			= CheckDate
								invoked.DistributionAmount.KeepRateAndAmount	= true
								invoked.GLFinanceCodeBlock			= first PayablesInvoiceWithholdingByCodeRel.WithholdingDistributionAccount
								invoked.GLTTransactionCodeBlock		= first PayablesInvoiceWithholdingByCodeRel.WithholdingDistributionAccount
								invoked.DistributionAccount			= first PayablesInvoiceWithholdingByCodeRel.WithholdingDistributionAccount
								invoked.GLTJournalizeGroup			= PrmJournalizeGroup
								invoked.BypassActiveCodeBlockEdit 	= true		

					if (AccruedPayablesInvoiceWithholdingRel exists)
						LocalPayablesCompany		= Company
						if (AccrualCode entered)
							LocalAccrualCode		= AccrualCode
						else
							LocalAccrualCode		= PayablesInvoice.AccrualCode
						CalculateWithholdingAmount.PayablesCompany			= Company
						CalculateWithholdingAmount.PayablesInvoice			= PayablesInvoice
						CalculateWithholdingAmount.PayablesInvoicePayment	= PayablesInvoicePayment
						LocalBoolean										= CalculateWithholdingAmount.SummarizeAccruedWithholdingAmounts

						if (CalculateWithholdingAmount.TotalWithholdingAmount.CurrencyAmount entered)
							NegativeFinanceCurrencyAmountGroup 					= CalculateWithholdingAmount.TotalWithholdingAmount
							LocalBoolean 										= NegativeFinanceCurrencyAmountGroup.PerformCalculation

							invoke CreateFromBatchNoParms PayablesInvoiceDistribution
								invoked.CreateAlternateGLTransDetail	= true
								if (PrmVoidDate	entered)
									invoked.GLTPostingDate			= PrmVoidDate
									invoked.DistributionDate		= PrmVoidDate
									invoked.GLTGeneralLedgerEvent	= "VP"
									invoked.DistributionAmount		= CalculateWithholdingAmount.TotalWithholdingAmount
								else
									invoked.GLTPostingDate			= CheckDate
									invoked.DistributionDate		= CheckDate
									invoked.GLTGeneralLedgerEvent	= "AP"
									invoked.DistributionAmount		= NegativeFinanceCurrencyAmountGroup	
								invoked.GLTTransactionDate			= CheckDate
								invoked.GLTCurrencyCode				= InvoiceCurrency	
								invoked.Company						= Company
								invoked.PayablesInvoice				= PayablesInvoice
								invoked.DistributionType 			= "Y"
								invoked.AccrualCode					= LocalAccrualCode
								invoked.PostingOption				= "S"
								invoked.Status						= 1
								invoked.GLTControlDocumentNumber	= PrmControlDocumentNumber
								invoked.GLTDocumentNumber           = PrmControlDocumentNumber
								invoked.Description					= PrmDescription
								invoked.DistributionReference		= PrmReference
								invoked.InvoiceCurrency				= InvoiceCurrency	
								invoked.DistributionAmount.ExchangeDate			= PayablesInvoice.InvoiceDate 
								invoked.DistributionAmount.KeepRateAndAmount	= true
								invoked.GLFinanceCodeBlock			= PayablesAccrualCodeDetailRel.DistributionAccount
								invoked.GLTTransactionCodeBlock		= PayablesAccrualCodeDetailRel.DistributionAccount
								invoked.DistributionAccount			= PayablesAccrualCodeDetailRel.DistributionAccount
								invoked.GLTJournalizeGroup			= PrmJournalizeGroup
								invoked.BypassActiveCodeBlockEdit 	= true		

							if (CashCode.Currency != InvoiceCurrency)									
								include SetupGainLossAccountForPaymentCurrencyAdjustment
								invoke CreateFromBatchNoParms PayablesInvoiceDistribution
									invoked.CreateAlternateGLTransDetail	= true
									if (PrmVoidDate	entered)
										invoked.GLTPostingDate			= PrmVoidDate
										invoked.DistributionDate		= PrmVoidDate
										invoked.GLTGeneralLedgerEvent	= "VP"
										invoked.DistributionAmount		= NegativeFinanceCurrencyAmountGroup 
									else
										invoked.GLTPostingDate			= CheckDate
										invoked.DistributionDate		= CheckDate
										invoked.GLTGeneralLedgerEvent	= "AP"
										invoked.DistributionAmount		= CalculateWithholdingAmount.TotalWithholdingAmount
									invoked.GLTTransactionDate			= CheckDate
									invoked.GLTCurrencyCode				= InvoiceCurrency	
									invoked.Company						= Company
									invoked.PayablesInvoice				= PayablesInvoice
									invoked.DistributionType 			= "G"
									invoked.AccrualCode					= LocalAccrualCode
									invoked.PostingOption				= "S"
									invoked.Status						= 1
									invoked.GLTControlDocumentNumber	= PrmControlDocumentNumber
									invoked.GLTDocumentNumber           = PrmControlDocumentNumber
									invoked.Description					= NonInvoiceCurrencyPaymentAccrualOffsetMessage
									invoked.DistributionReference		= PrmReference
									invoked.InvoiceCurrency				= InvoiceCurrency	
									invoked.DistributionAmount.ExchangeDate			= PayablesInvoice.InvoiceDate 
									invoked.DistributionAmount.KeepRateAndAmount	= true
									invoked.GLFinanceCodeBlock			= LocalFinanceCodeBlock	
									invoked.GLTTransactionCodeBlock		= LocalFinanceCodeBlock	
									invoked.DistributionAccount			= LocalFinanceCodeBlock	
									invoked.GLTJournalizeGroup			= PrmJournalizeGroup
									invoked.BypassActiveCodeBlockEdit 	= true		
				else

					if (WithholdingAmount entered)
						LocalPayablesCompany	= Company
						if (AccrualCode entered)
							LocalAccrualCode		= AccrualCode
						else
							LocalAccrualCode		= PayablesInvoice.AccrualCode

						NegativeFinanceCurrencyAmountGroup = LocalWithholdingAmount
						LocalBoolean = NegativeFinanceCurrencyAmountGroup.PerformCalculation

						if (!GeneralLedgerCompanyRel.FinanceEnterpriseGroup.FundAccounting
						or  PayablesInvoice.InvoiceType.Prepayment
						or  PayablesInvoice.InvoiceType.PrepaymentCredit 
						or  PayablesInvoice.InvoiceType.MatchPrepayment
						or  PrmReallocate)

							invoke CreateFromBatchNoParms PayablesInvoiceDistribution
								invoked.CreateAlternateGLTransDetail	= true
								if (PrmVoidDate	entered
								or  PrmReallocate)
									if (PrmReallocate)
										invoked.GLTPostingDate			= PrmPostDate
										invoked.DistributionDate		= PrmPostDate
										invoked.GLTGeneralLedgerEvent	= "AP"
									else
										invoked.GLTPostingDate				= PrmVoidDate
										invoked.DistributionDate			= PrmVoidDate
										invoked.GLTGeneralLedgerEvent		= "VP"
									invoked.DistributionAmount			= LocalWithholdingAmount
								else
									invoked.GLTPostingDate			= CheckDate
									invoked.DistributionDate		= CheckDate
									invoked.GLTGeneralLedgerEvent	= "AP"
									invoked.DistributionAmount		= NegativeFinanceCurrencyAmountGroup
								invoked.GLTTransactionDate			= CheckDate
								invoked.Company						= Company
								invoked.GLTCurrencyCode				= CashCode.Currency
								invoked.PayablesInvoice				= PayablesInvoice
								invoked.DistributionType 			= "W"
								invoked.AccrualCode					= LocalAccrualCode
								invoked.PostingOption				= "S"
								invoked.Status						= 1
								invoked.GLTControlDocumentNumber	= PrmControlDocumentNumber
								invoked.GLTDocumentNumber           = PrmControlDocumentNumber
								invoked.Description					= PrmDescription
								invoked.DistributionReference		= PrmReference
								invoked.InvoiceCurrency				= CashCode.Currency
								invoked.DistributionAmount.ExchangeDate			= CheckDate
								invoked.DistributionAmount.KeepRateAndAmount	= true
								invoked.GLFinanceCodeBlock			= IncomeWithholdingCodeDetailRel.WithholdingAccount
								invoked.GLTTransactionCodeBlock		= IncomeWithholdingCodeDetailRel.WithholdingAccount
								invoked.DistributionAccount			= IncomeWithholdingCodeDetailRel.WithholdingAccount
								invoked.GLTJournalizeGroup			= PrmJournalizeGroup
								invoked.BypassActiveCodeBlockEdit 	= true		
						else
							if (PrmAmendedReallocation) 	
								LocalAmendedReallocation = true
								initialize LocalTotalDistributionAmount
							initialize LocalDistributionCount
							LocalNumberOfDistributions		= instance count of ProrateDistributionsRel
							LocalLastDistribution			= false
							if (!PrmAmendedReallocation) 	
								LocalTotalDistributionAmount	= LocalWithholdingAmount 

							if (instance count of ProrateDistributionsRel > 25)				
								LocalPaymentPercent	= PaymentAmount.CurrencyAmount / DerivedInvoiceAmountDivisor
								if (PrmVoidDate entered)
									LocalFundWithholdingExchange.BaseAmount.EnteredCurrencyRate		= (BankCheckAmount / NetPaymentAmount.CurrencyAmount)
								else
									if (InvoiceCurrency = CashRequirementsResult.InvoiceCurrency
									and CashCode 		= CashRequirementsResult.CashCode
									and CashRequirementsResult.OverridePaymentRate entered)
										LocalFundWithholdingExchange.BaseAmount.EnteredCurrencyRate	= CashRequirementsResult.OverridePaymentRate
								if (PrmVoidDate entered)
									LocalRunProgram = RunProgram.InvoiceReinstatement
								else
									LocalRunProgram 	= RunProgram.PaymentClosing
								LocalProcessGroup	= PrmProcessGroup
								LocalAsyncId = PayablesProcessingMonitorRel.AsyncId
								invoke CreatePaymentDistributionBackground PayablesInvoiceDistribution
									run after LocalAsyncId
									assign async action request id to LocalAsyncId
									invoked.PrmPayablesCompany			= Company
									invoked.PrmPayablesInvoice			= PayablesInvoice
									invoked.PrmJournalizeGroup       	= PrmJournalizeGroup
									invoked.PrmNumberOfDistributions	= LocalNumberOfDistributions
									invoked.PrmCheckDate				= CheckDate
									invoked.PrmVoidDate					= PrmVoidDate
									invoked.PrmPostDate					= PrmPostDate
									invoked.PrmAmendedReallocation		= PrmAmendedReallocation
									invoked.PrmAccrualCode				= LocalAccrualCode 
									invoked.PrmTotalDistributionAmount	= LocalTotalDistributionAmount
									invoked.PrmControlDocumentNumber	= PrmControlDocumentNumber
									invoked.PrmDescription           	= PrmDescription
									invoked.PrmReference             	= PrmReference
									invoked.PrmCashCode					= CashCode
									invoked.PrmPaymentAccount			= IncomeWithholdingCodeDetailRel.WithholdingAccount
									invoked.PrmCashCodeCurrency			= CashCode.Currency
									invoked.PrmBankCheckExchangeRate	= LocalFundWithholdingExchange.BaseAmount.EnteredCurrencyRate
									invoked.PrmProrateAmount			= WithholdingAmount
									invoked.PrmDistributionType			= PayablesDistributionType.PaymentWithholding

								invoke Update PayablesProcessingMonitorRel
									invoked.AsyncId		= LocalAsyncId
							else
								for each ProrateDistributionsRel  
									LocalDistributionCount += 1
									if (LocalDistributionCount = LocalNumberOfDistributions)
										LocalLastDistribution = true

									include CalculateFundWithholdingCurrencyAmount

									if (LocalLastDistribution)
										NegativeFinanceCurrencyAmountGroup	= LocalTotalDistributionAmount
										LocalFundWithholdingAmount			= LocalTotalDistributionAmount
									else
										NegativeFinanceCurrencyAmountGroup	= LocalFundWithholdingAmount
									LocalBoolean = NegativeFinanceCurrencyAmountGroup.PerformCalculation

									initialize LocalCalculatePayablesFinanceStructure
									LocalCalculatePayablesFinanceStructure.InputPayablesCompany					= Company
									LocalCalculatePayablesFinanceStructure.InputPayablesInvoice					= PayablesInvoice
									LocalCalculatePayablesFinanceStructure.InputPayablesInvoiceDistribution		= each.PayablesInvoiceDistribution
									LocalCalculatePayablesFinanceStructure.InputPayablesFinanceStructureType	= PayablesFinanceStructureType.Payment
									LocalCalculatePayablesFinanceStructure.InputFinanceCodeBlock				= IncomeWithholdingCodeDetailRel.WithholdingAccount
									LocalAnswer = LocalCalculatePayablesFinanceStructure.CalculatePayablesFinanceStructure

									invoke CreateFromBatchNoParms PayablesInvoiceDistribution
										invoked.CreateAlternateGLTransDetail	= true
										if (PrmVoidDate	entered)
											invoked.GLTPostingDate				= PrmVoidDate
											invoked.DistributionDate			= PrmVoidDate
											invoked.GLTGeneralLedgerEvent		= "VP"
											invoked.DistributionAmount			= LocalFundWithholdingAmount
										else
											if (PrmPostDate entered)
												invoked.GLTPostingDate			= PrmPostDate
												invoked.DistributionDate		= PrmPostDate
											else
												invoked.GLTPostingDate			= CheckDate
												invoked.DistributionDate		= CheckDate
											invoked.GLTGeneralLedgerEvent	= "AP"
											invoked.DistributionAmount		= NegativeFinanceCurrencyAmountGroup
										invoked.GLTTransactionDate			= CheckDate
										invoked.Company						= Company
										invoked.GLTCurrencyCode				= CashCode.Currency
										invoked.PayablesInvoice				= PayablesInvoice
										invoked.DistributionType 			= "W"
										invoked.AccrualCode					= LocalAccrualCode
										invoked.PostingOption				= "S"
										invoked.Status						= 1
										invoked.GLTControlDocumentNumber	= PrmControlDocumentNumber
										invoked.GLTDocumentNumber           = PrmControlDocumentNumber
										invoked.Description					= PrmDescription
										invoked.DistributionReference		= PrmReference
										invoked.InvoiceCurrency				= CashCode.Currency
										invoked.DistributionAmount.ExchangeDate			= CheckDate
										invoked.DistributionAmount.KeepRateAndAmount	= true
										invoked.GLFinanceCodeBlock			= LocalCalculatePayablesFinanceStructure.OutputFinanceCodeBlock
										invoked.GLTTransactionCodeBlock		= LocalCalculatePayablesFinanceStructure.OutputFinanceCodeBlock
										invoked.DistributionAccount			= LocalCalculatePayablesFinanceStructure.OutputFinanceCodeBlock
										invoked.GLTJournalizeGroup			= PrmJournalizeGroup
										invoked.BypassActiveCodeBlockEdit 	= true		



				if (FATCAIncomeCode entered
				and FATCATransactionIncomeAmount entered)
					include CalculateFATCAWithholdingCurrencyAmount
					if (!GeneralLedgerCompanyRel.FinanceEnterpriseGroup.FundAccounting
					or  PayablesInvoice.InvoiceType.Prepayment 
					or  PayablesInvoice.InvoiceType.PrepaymentCredit 
					or  PayablesInvoice.InvoiceType.MatchPrepayment)

						NegativeFinanceCurrencyAmountGroup = LocalFATCAWithholdingAmount		
						LocalBoolean = NegativeFinanceCurrencyAmountGroup.PerformCalculation

						invoke CreateFromBatchNoParms PayablesInvoiceDistribution
							invoked.CreateAlternateGLTransDetail	= true
							if (PrmVoidDate	entered)
								invoked.GLTPostingDate				= PrmVoidDate
								invoked.DistributionDate			= PrmVoidDate
								invoked.GLTGeneralLedgerEvent		= "VP"
								invoked.DistributionAmount			= LocalFATCAWithholdingAmount
							else
								invoked.GLTPostingDate				= CheckDate
								invoked.DistributionDate			= CheckDate
								invoked.GLTGeneralLedgerEvent		= "AP"
								invoked.DistributionAmount			= NegativeFinanceCurrencyAmountGroup
							invoked.GLTTransactionDate			= CheckDate
							invoked.Company						= Company
							invoked.GLTCurrencyCode				= CashCode.Currency
							invoked.PayablesInvoice				= PayablesInvoice
							invoked.DistributionType 			= "W"
							invoked.AccrualCode					= LocalAccrualCode
							invoked.PostingOption				= "S"
							invoked.Status						= 1
							invoked.GLTControlDocumentNumber	= PrmControlDocumentNumber
							invoked.GLTDocumentNumber           = PrmControlDocumentNumber
							invoked.Description					= PrmDescription
							invoked.DistributionReference		= PrmReference
							invoked.InvoiceCurrency				= CashCode.Currency
							invoked.DistributionAmount.ExchangeDate			= CheckDate
							invoked.DistributionAmount.KeepRateAndAmount	= true
							invoked.GLFinanceCodeBlock			= Vendor.FATCAAccount
							invoked.GLTTransactionCodeBlock		= Vendor.FATCAAccount
							invoked.DistributionAccount			= Vendor.FATCAAccount
							invoked.GLTJournalizeGroup			= PrmJournalizeGroup
							invoked.BypassActiveCodeBlockEdit 	= true		
					else
						initialize LocalDistributionCount
						LocalNumberOfDistributions		= instance count of ProrateDistributionsRel
						LocalLastDistribution			= false
						LocalTotalDistributionAmount	= LocalFATCAWithholdingAmount 

						if (instance count of ProrateDistributionsRel > 25)				
							if (PrmVoidDate entered)
								LocalFATCAWithholdingExchange.BaseAmount.EnteredCurrencyRate	= (BankCheckAmount / NetPaymentAmount.CurrencyAmount)
							else
								if (InvoiceCurrency = CashRequirementsResult.InvoiceCurrency
								and CashCode 		= CashRequirementsResult.CashCode
								and CashRequirementsResult.OverridePaymentRate entered)
									LocalFATCAWithholdingExchange.BaseAmount.EnteredCurrencyRate	= CashRequirementsResult.OverridePaymentRate
							if (PrmVoidDate entered)
								LocalRunProgram = RunProgram.InvoiceReinstatement
							else
								LocalRunProgram 	= RunProgram.PaymentClosing
							LocalProcessGroup	= PrmProcessGroup
							LocalAsyncId = PayablesProcessingMonitorRel.AsyncId
							invoke CreatePaymentDistributionBackground PayablesInvoiceDistribution
								run after LocalAsyncId
								assign async action request id to LocalAsyncId
								invoked.PrmPayablesCompany			= Company
								invoked.PrmPayablesInvoice			= PayablesInvoice
								invoked.PrmJournalizeGroup       	= PrmJournalizeGroup
								invoked.PrmNumberOfDistributions	= LocalNumberOfDistributions
								invoked.PrmCheckDate				= CheckDate
								invoked.PrmVoidDate					= PrmVoidDate
								invoked.PrmPostDate					= PrmPostDate
								invoked.PrmAmendedReallocation		= PrmAmendedReallocation
								invoked.PrmAccrualCode				= LocalAccrualCode 
								invoked.PrmTotalDistributionAmount	= LocalTotalDistributionAmount
								invoked.PrmControlDocumentNumber	= PrmControlDocumentNumber
								invoked.PrmDescription           	= PrmDescription
								invoked.PrmReference             	= PrmReference
								invoked.PrmCashCode					= CashCode
								invoked.PrmPaymentAccount			= Vendor.FATCAAccount
								invoked.PrmCashCodeCurrency			= CashCode.Currency
								invoked.PrmBankCheckExchangeRate	= LocalFATCAWithholdingExchange.BaseAmount.EnteredCurrencyRate
								invoked.PrmProrateAmount			= FATCATransactionIncomeAmount
								invoked.PrmDistributionType			= PayablesDistributionType.PaymentWithholding

							invoke Update PayablesProcessingMonitorRel
								invoked.AsyncId		= LocalAsyncId
						else
							for each ProrateDistributionsRel  
								LocalDistributionCount += 1
								if (LocalDistributionCount = LocalNumberOfDistributions)
									LocalLastDistribution = true

								include CalculateFATCAFundWithholdingCurrencyAmount

								if (LocalLastDistribution)
									NegativeFinanceCurrencyAmountGroup	= LocalTotalDistributionAmount
									LocalFATCAWithholdingAmount			= LocalTotalDistributionAmount
								else
									NegativeFinanceCurrencyAmountGroup	= LocalFATCAWithholdingAmount
								LocalBoolean = NegativeFinanceCurrencyAmountGroup.PerformCalculation

								initialize LocalCalculatePayablesFinanceStructure
								LocalCalculatePayablesFinanceStructure.InputPayablesCompany					= Company
								LocalCalculatePayablesFinanceStructure.InputPayablesInvoice					= PayablesInvoice
								LocalCalculatePayablesFinanceStructure.InputPayablesInvoiceDistribution		= each.PayablesInvoiceDistribution
								LocalCalculatePayablesFinanceStructure.InputPayablesFinanceStructureType	= PayablesFinanceStructureType.Payment
								LocalCalculatePayablesFinanceStructure.InputFinanceCodeBlock				= Vendor.FATCAAccount
								LocalAnswer = LocalCalculatePayablesFinanceStructure.CalculatePayablesFinanceStructure

								invoke CreateFromBatchNoParms PayablesInvoiceDistribution
									invoked.CreateAlternateGLTransDetail	= true
									if (PrmVoidDate	entered)
										invoked.GLTPostingDate				= PrmVoidDate
										invoked.DistributionDate			= PrmVoidDate
										invoked.GLTGeneralLedgerEvent		= "VP"
										invoked.DistributionAmount			= LocalFATCAWithholdingAmount
									else
										invoked.GLTPostingDate				= CheckDate
										invoked.DistributionDate			= CheckDate
										invoked.GLTGeneralLedgerEvent		= "AP"
										invoked.DistributionAmount			= NegativeFinanceCurrencyAmountGroup
									invoked.GLTTransactionDate			= CheckDate
									invoked.Company						= Company
									invoked.GLTCurrencyCode				= CashCode.Currency
									invoked.PayablesInvoice				= PayablesInvoice
									invoked.DistributionType 			= PayablesDistributionType.PaymentWithholding
									invoked.AccrualCode					= LocalAccrualCode
									invoked.PostingOption				= "S"
									invoked.Status						= 1
									invoked.GLTControlDocumentNumber	= PrmControlDocumentNumber
									invoked.GLTDocumentNumber           = PrmControlDocumentNumber
									invoked.Description					= PrmDescription
									invoked.DistributionReference		= PrmReference
									invoked.InvoiceCurrency				= CashCode.Currency
									invoked.DistributionAmount.ExchangeDate			= CheckDate
									invoked.DistributionAmount.KeepRateAndAmount	= true
									invoked.GLFinanceCodeBlock			= LocalCalculatePayablesFinanceStructure.OutputFinanceCodeBlock
									invoked.GLTTransactionCodeBlock		= LocalCalculatePayablesFinanceStructure.OutputFinanceCodeBlock
									invoked.DistributionAccount			= LocalCalculatePayablesFinanceStructure.OutputFinanceCodeBlock
									invoked.GLTJournalizeGroup			= PrmJournalizeGroup
									invoked.BypassActiveCodeBlockEdit 	= true		




		CreateSecondaryWithholdingDistribution is an Instance Action
			restricted
			Parameters
				PrmControlDocumentNumber is Alpha 30
				PrmDescription           is Alpha up to 60
				PrmReference             is a Reference
				PrmJournalizeGroup       is like JournalizeGroup
				PrmSecondaryWithholding	 is Numeric size 1
					States
						One		value is "1"
						Two		value is "2"
						Three	value is "3"
				PrmVoidDate				 is Date 
				PrmReallocate			 is Boolean
				PrmPostDate				 is Date
				PrmAmendedReallocation	 is Boolean			
				PrmProcessGroup			 is like PayablesProcessGroup
			Local Fields
				LocalBoolean			  is Boolean
				LocalCurrencyAmountGroup  is a FinanceCurrencyAmountGroup
			Action Rules
				include SetPaymentCurrencyAmountFields
				if (PrmSecondaryWithholding.One)
					include CalculateSecondaryWithholdingCurrencyAmount1

					if (CurrencyEvaluation	!entered)
						include CalculateCashCodeCurrencyAmount
						include CalculatePaymentCurrencyDifference
						CurrencyEvaluation	= 1 
						if (CalculateFinanceCurrencyAmountGroup.TotalIsNonZero)
							LocalSecondaryWithholdingAmount1.FunctionalAmount.EnteredCurrencyAmount		+= CalculateFinanceCurrencyAmountGroup.Total.FunctionalAmount.EnteredCurrencyAmount
							LocalSecondaryWithholdingAmount1.AlternateAmount.EnteredCurrencyAmount		+= CalculateFinanceCurrencyAmountGroup.Total.AlternateAmount.EnteredCurrencyAmount
							LocalSecondaryWithholdingAmount1.AlternateAmount2.EnteredCurrencyAmount		+= CalculateFinanceCurrencyAmountGroup.Total.AlternateAmount2.EnteredCurrencyAmount
							LocalSecondaryWithholdingAmount1.AlternateAmount3.EnteredCurrencyAmount		+= CalculateFinanceCurrencyAmountGroup.Total.AlternateAmount3.EnteredCurrencyAmount
							LocalSecondaryWithholdingAmount1.ReportAmount1.EnteredCurrencyAmount		+= CalculateFinanceCurrencyAmountGroup.Total.ReportAmount1.EnteredCurrencyAmount
							LocalSecondaryWithholdingAmount1.ReportAmount2.EnteredCurrencyAmount		+= CalculateFinanceCurrencyAmountGroup.Total.ReportAmount2.EnteredCurrencyAmount
							LocalSecondaryWithholdingAmount1.ReportAmount3.EnteredCurrencyAmount		+= CalculateFinanceCurrencyAmountGroup.Total.ReportAmount3.EnteredCurrencyAmount
							LocalSecondaryWithholdingAmount1.ReportAmount4.EnteredCurrencyAmount		+= CalculateFinanceCurrencyAmountGroup.Total.ReportAmount4.EnteredCurrencyAmount
							LocalSecondaryWithholdingAmount1.ReportAmount5.EnteredCurrencyAmount		+= CalculateFinanceCurrencyAmountGroup.Total.ReportAmount5.EnteredCurrencyAmount

					LocalSecondaryWithholdingCode		= SecondaryWithholdingCode1
					LocalCurrencyAmountGroup			= LocalSecondaryWithholdingAmount1
					NegativeFinanceCurrencyAmountGroup	= LocalSecondaryWithholdingAmount1 
				if (PrmSecondaryWithholding.Two)
					include CalculateSecondaryWithholdingCurrencyAmount2
					LocalSecondaryWithholdingCode		= SecondaryWithholdingCode2
					LocalCurrencyAmountGroup			= LocalSecondaryWithholdingAmount2
					NegativeFinanceCurrencyAmountGroup	= LocalSecondaryWithholdingAmount2 
				if (PrmSecondaryWithholding.Three)
					include CalculateSecondaryWithholdingCurrencyAmount3
					LocalSecondaryWithholdingCode		= SecondaryWithholdingCode3
					LocalCurrencyAmountGroup			= LocalSecondaryWithholdingAmount3
					NegativeFinanceCurrencyAmountGroup	= LocalSecondaryWithholdingAmount3 

				LocalBoolean = NegativeFinanceCurrencyAmountGroup.PerformCalculation
				LocalPayablesCompany	= Company
				if (AccrualCode entered)
					LocalAccrualCode		= AccrualCode
				else
					LocalAccrualCode		= PayablesInvoice.AccrualCode

				if (NegativeFinanceCurrencyAmountGroup.IsNonZero)


					if (!GeneralLedgerCompanyRel.FinanceEnterpriseGroup.FundAccounting
					or  PayablesInvoice.InvoiceType.Prepayment 
					or  PayablesInvoice.InvoiceType.PrepaymentCredit 
					or  PayablesInvoice.InvoiceType.MatchPrepayment
					or  PrmReallocate)
						invoke CreateFromBatchNoParms PayablesInvoiceDistribution
							invoked.CreateAlternateGLTransDetail	= true
							if (PrmVoidDate	entered
							or  PrmReallocate)
								if (PrmReallocate)
									invoked.GLTPostingDate			= PrmPostDate
									invoked.DistributionDate		= PrmPostDate
									invoked.GLTGeneralLedgerEvent	= "AP"
								else
									invoked.GLTPostingDate				= PrmVoidDate
									invoked.DistributionDate			= PrmVoidDate
									invoked.GLTGeneralLedgerEvent		= "VP"
								invoked.DistributionAmount			= LocalCurrencyAmountGroup
							else
								invoked.GLTPostingDate				= CheckDate
								invoked.DistributionDate			= CheckDate
								invoked.GLTGeneralLedgerEvent		= "AP"
								invoked.DistributionAmount			= NegativeFinanceCurrencyAmountGroup
							invoked.GLTTransactionDate			= CheckDate
							invoked.GLTCurrencyCode				= CashCode.Currency
							invoked.Company						= Company
							invoked.PayablesInvoice				= PayablesInvoice
							invoked.DistributionType 			= "W"
							invoked.AccrualCode					= LocalAccrualCode
							invoked.PostingOption				= "S"
							invoked.Status						= 1
							invoked.GLTControlDocumentNumber	= PrmControlDocumentNumber
							invoked.GLTDocumentNumber           = PrmControlDocumentNumber
							invoked.Description					= PrmDescription
							invoked.DistributionReference		= PrmReference
							invoked.InvoiceCurrency				= CashCode.Currency
							invoked.DistributionAmount.ExchangeDate			= CheckDate
							invoked.DistributionAmount.KeepRateAndAmount	= true
							invoked.GLFinanceCodeBlock			= PayablesSecondaryWithholdingCodeDetailRel.WithholdingAccount
							invoked.GLTTransactionCodeBlock		= PayablesSecondaryWithholdingCodeDetailRel.WithholdingAccount
							invoked.DistributionAccount			= PayablesSecondaryWithholdingCodeDetailRel.WithholdingAccount
							invoked.GLTJournalizeGroup			= PrmJournalizeGroup
							invoked.BypassActiveCodeBlockEdit 	= true		
					else
						if (PrmAmendedReallocation) 	
							LocalAmendedReallocation = true
							initialize LocalTotalDistributionAmount
						initialize LocalDistributionCount
						LocalNumberOfDistributions		= instance count of ProrateDistributionsRel
						LocalLastDistribution			= false
						if (!PrmAmendedReallocation) 	
							LocalTotalDistributionAmount	= LocalCurrencyAmountGroup 

						if (instance count of ProrateDistributionsRel > 25)				
							if (PrmVoidDate entered) 
								LocalFundWithholdingExchange.BaseAmount.EnteredCurrencyRate		= (BankCheckAmount / NetPaymentAmount.CurrencyAmount)
							else
								if (InvoiceCurrency = CashRequirementsResult.InvoiceCurrency
								and CashCode 		= CashRequirementsResult.CashCode
								and CashRequirementsResult.OverridePaymentRate entered)
									LocalFundWithholdingExchange.BaseAmount.EnteredCurrencyRate	= CashRequirementsResult.OverridePaymentRate 
							if (PrmSecondaryWithholding.One)
								LocalSecondaryWithholdingTransactionAmount = SecondaryWithholdingTransactionAmount1
							else
								if (PrmSecondaryWithholding.Two)
									LocalSecondaryWithholdingTransactionAmount = SecondaryWithholdingTransactionAmount2
								else
									LocalSecondaryWithholdingTransactionAmount = SecondaryWithholdingTransactionAmount3
							if (PrmVoidDate entered)
								LocalRunProgram = RunProgram.InvoiceReinstatement
							else
								LocalRunProgram 	= RunProgram.PaymentClosing
							LocalProcessGroup	= PrmProcessGroup
							LocalAsyncId = PayablesProcessingMonitorRel.AsyncId
							invoke CreatePaymentDistributionBackground PayablesInvoiceDistribution
								run after LocalAsyncId
								assign async action request id to LocalAsyncId
								invoked.PrmPayablesCompany			= Company
								invoked.PrmPayablesInvoice			= PayablesInvoice
								invoked.PrmJournalizeGroup       	= PrmJournalizeGroup
								invoked.PrmNumberOfDistributions	= LocalNumberOfDistributions
								invoked.PrmCheckDate				= CheckDate
								invoked.PrmVoidDate					= PrmVoidDate
								invoked.PrmPostDate					= PrmPostDate
								invoked.PrmAmendedReallocation		= PrmAmendedReallocation
								invoked.PrmAccrualCode				= LocalAccrualCode 
								invoked.PrmTotalDistributionAmount	= LocalTotalDistributionAmount
								invoked.PrmControlDocumentNumber	= PrmControlDocumentNumber
								invoked.PrmDescription           	= PrmDescription
								invoked.PrmReference             	= PrmReference
								invoked.PrmCashCode					= CashCode
								invoked.PrmPaymentAccount			= PayablesSecondaryWithholdingCodeDetailRel.WithholdingAccount			
								invoked.PrmCashCodeCurrency			= CashCode.Currency
								invoked.PrmBankCheckExchangeRate	= LocalFundWithholdingExchange.BaseAmount.EnteredCurrencyRate
								invoked.PrmProrateAmount			= LocalSecondaryWithholdingTransactionAmount
								invoked.PrmDistributionType			= PayablesDistributionType.PaymentWithholding

							invoke Update PayablesProcessingMonitorRel
								invoked.AsyncId		= LocalAsyncId
						else
							for each ProrateDistributionsRel  
								LocalDistributionCount += 1
								if (LocalDistributionCount = LocalNumberOfDistributions)
									LocalLastDistribution = true

								if (PrmSecondaryWithholding.One)
									LocalSecondaryWithholdingTransactionAmount = SecondaryWithholdingTransactionAmount1
								else
									if (PrmSecondaryWithholding.Two)
										LocalSecondaryWithholdingTransactionAmount = SecondaryWithholdingTransactionAmount2
									else
										LocalSecondaryWithholdingTransactionAmount = SecondaryWithholdingTransactionAmount3
								
								include CalculateFundSecondaryWithholdingCurrencyAmount

								if (LocalLastDistribution)
									NegativeFinanceCurrencyAmountGroup	= LocalTotalDistributionAmount
									LocalFundWithholdingAmount			= LocalTotalDistributionAmount
								else
									NegativeFinanceCurrencyAmountGroup	= LocalFundWithholdingAmount
								LocalBoolean = NegativeFinanceCurrencyAmountGroup.PerformCalculation

								initialize LocalCalculatePayablesFinanceStructure
								LocalCalculatePayablesFinanceStructure.InputPayablesCompany					= Company
								LocalCalculatePayablesFinanceStructure.InputPayablesInvoice					= PayablesInvoice
								LocalCalculatePayablesFinanceStructure.InputPayablesInvoiceDistribution		= each.PayablesInvoiceDistribution
								LocalCalculatePayablesFinanceStructure.InputPayablesFinanceStructureType	= PayablesFinanceStructureType.Payment
								LocalCalculatePayablesFinanceStructure.InputFinanceCodeBlock				= PayablesSecondaryWithholdingCodeDetailRel.WithholdingAccount			
								LocalAnswer = LocalCalculatePayablesFinanceStructure.CalculatePayablesFinanceStructure

								invoke CreateFromBatchNoParms PayablesInvoiceDistribution
									invoked.CreateAlternateGLTransDetail	= true
									if (PrmVoidDate	entered)
										invoked.GLTPostingDate				= PrmVoidDate
										invoked.DistributionDate			= PrmVoidDate
										invoked.GLTGeneralLedgerEvent		= "VP"
										invoked.DistributionAmount			= LocalFundWithholdingAmount
									else
										if (PrmPostDate entered)
											invoked.GLTPostingDate			= PrmPostDate
											invoked.DistributionDate		= PrmPostDate
										else
											invoked.GLTPostingDate			= CheckDate
											invoked.DistributionDate		= CheckDate
										invoked.GLTGeneralLedgerEvent	= "AP"
										invoked.DistributionAmount		= NegativeFinanceCurrencyAmountGroup
									invoked.GLTTransactionDate			= CheckDate
									invoked.GLTCurrencyCode				= CashCode.Currency
									invoked.Company						= Company
									invoked.PayablesInvoice				= PayablesInvoice
									invoked.DistributionType 			= "W"
									invoked.AccrualCode					= LocalAccrualCode
									invoked.PostingOption				= "S"
									invoked.Status						= 1
									invoked.GLTControlDocumentNumber	= PrmControlDocumentNumber
									invoked.GLTDocumentNumber           = PrmControlDocumentNumber
									invoked.Description					= PrmDescription
									invoked.DistributionReference		= PrmReference
									invoked.InvoiceCurrency				= CashCode.Currency
									invoked.DistributionAmount.ExchangeDate			= CheckDate
									invoked.DistributionAmount.KeepRateAndAmount	= true
									invoked.GLFinanceCodeBlock			= LocalCalculatePayablesFinanceStructure.OutputFinanceCodeBlock
									invoked.GLTTransactionCodeBlock		= LocalCalculatePayablesFinanceStructure.OutputFinanceCodeBlock
									invoked.DistributionAccount			= LocalCalculatePayablesFinanceStructure.OutputFinanceCodeBlock
									invoked.GLTJournalizeGroup			= PrmJournalizeGroup
									invoked.BypassActiveCodeBlockEdit 	= true		



		ReverseDistributionsForPaymentReinstatement is an Instance Action
			restricted
			Parameters
				PrmVoidDate						is Date
				PrmDescription           		is a Description
				PrmStaleDateAccount				is like FinanceCodeBlock
				PrmJournalizeGroup       		is like JournalizeGroup
				PrmReallocate					is Boolean
				PrmPostDate						is Date

			Action Rules
				if (CurrencyEvaluation.CurrencyRounding)	
					initialize CurrencyEvaluation
				if (DiscountAmount.CurrencyAmount	entered
				and !DiscountLost)
					invoke CreateDiscountDistribution
						invoked.PrmControlDocumentNumber	= TransactionNumber
						invoked.PrmDescription				= PrmDescription
						invoked.PrmReference				= TransactionNumber
						invoked.PrmJournalizeGroup			= PrmJournalizeGroup
						invoked.PrmVoidDate					= PrmVoidDate
						invoked.PrmReallocate				= PrmReallocate
						invoked.PrmPostDate					= PrmPostDate
						if (PrmReallocate)
							invoked.PrmDescription			= GeneralLedgerCompanyRel.FinanceEnterpriseGroup.FundReallocatedDescription

				if (MatchDiscountTaken.Yes)		
					invoke CreateMatchAccrualDistribution
						invoked.PrmControlDocumentNumber	= TransactionNumber
						invoked.PrmDescription				= PrmDescription
						invoked.PrmReference				= TransactionNumber
						invoked.PrmJournalizeGroup			= PrmJournalizeGroup
						invoked.PrmVoidDate					= PrmVoidDate
					invoke CreateMatchDiscountAccrualDistribution
						invoked.PrmControlDocumentNumber	= TransactionNumber
						invoked.PrmDescription				= PrmDescription
						invoked.PrmReference				= TransactionNumber
						invoked.PrmJournalizeGroup			= PrmJournalizeGroup
						invoked.PrmVoidDate					= PrmVoidDate

				invoke CreatePaymentAccrualDistribution
					invoked.PrmControlDocumentNumber	= TransactionNumber
					invoked.PrmDescription				= PrmDescription
					invoked.PrmReference				= TransactionNumber
					invoked.PrmJournalizeGroup			= PrmJournalizeGroup
					invoked.PrmVoidDate					= PrmVoidDate
					invoked.PrmStaleDateAccount			= PrmStaleDateAccount
					invoked.PrmReallocate				= PrmReallocate
					invoked.PrmPostDate					= PrmPostDate
					if (PrmReallocate)
						invoked.PrmDescription			= GeneralLedgerCompanyRel.FinanceEnterpriseGroup.FundReallocatedDescription

				invoke CreateGainLossOffset
					invoked.PrmControlDocumentNumber	= TransactionNumber
					invoked.PrmDescription				= PrmDescription
					invoked.PrmReference				= TransactionNumber
					invoked.PrmJournalizeGroup			= PrmJournalizeGroup
					invoked.PrmVoidDate					= PrmVoidDate

				if (WithholdingAmount				entered
				or  FATCATransactionIncomeAmount	entered)
					invoke CreateWithholdingDistribution
						invoked.PrmControlDocumentNumber	= TransactionNumber
						invoked.PrmDescription				= PrmDescription
						invoked.PrmReference				= TransactionNumber
						invoked.PrmJournalizeGroup			= PrmJournalizeGroup
						invoked.PrmVoidDate					= PrmVoidDate
						invoked.PrmReallocate				= PrmReallocate
						invoked.PrmPostDate					= PrmPostDate
						if (PrmReallocate)
							invoked.PrmDescription			= GeneralLedgerCompanyRel.FinanceEnterpriseGroup.FundReallocatedDescription

				if (SecondaryWithholdingTransactionAmount1	entered)
					invoke CreateSecondaryWithholdingDistribution
						invoked.PrmControlDocumentNumber	= TransactionNumber
						invoked.PrmDescription				= PrmDescription
						invoked.PrmReference				= TransactionNumber
						invoked.PrmJournalizeGroup			= PrmJournalizeGroup
						invoked.PrmSecondaryWithholding		= 1
						invoked.PrmVoidDate					= PrmVoidDate
						invoked.PrmReallocate				= PrmReallocate
						invoked.PrmPostDate					= PrmPostDate
						if (PrmReallocate)
							invoked.PrmDescription			= GeneralLedgerCompanyRel.FinanceEnterpriseGroup.FundReallocatedDescription

				if (SecondaryWithholdingTransactionAmount2	entered)
					invoke CreateSecondaryWithholdingDistribution
						invoked.PrmControlDocumentNumber	= TransactionNumber
						invoked.PrmDescription				= PrmDescription
						invoked.PrmReference				= TransactionNumber
						invoked.PrmJournalizeGroup			= PrmJournalizeGroup
						invoked.PrmSecondaryWithholding		= 2
						invoked.PrmVoidDate					= PrmVoidDate
						invoked.PrmReallocate				= PrmReallocate
						invoked.PrmPostDate					= PrmPostDate
						if (PrmReallocate)
							invoked.PrmDescription			= GeneralLedgerCompanyRel.FinanceEnterpriseGroup.FundReallocatedDescription

				if (SecondaryWithholdingTransactionAmount3	entered)
					invoke CreateSecondaryWithholdingDistribution
						invoked.PrmControlDocumentNumber	= TransactionNumber
						invoked.PrmDescription				= PrmDescription
						invoked.PrmReference				= TransactionNumber
						invoked.PrmJournalizeGroup			= PrmJournalizeGroup
						invoked.PrmSecondaryWithholding		= 3
						invoked.PrmVoidDate					= PrmVoidDate
						invoked.PrmReallocate				= PrmReallocate
						invoked.PrmPostDate					= PrmPostDate
						if (PrmReallocate)
							invoked.PrmDescription			= GeneralLedgerCompanyRel.FinanceEnterpriseGroup.FundReallocatedDescription



		CreateGainLossOffsetSet is a Set Action		
			restricted
			Parameters
				PrmPayablesCompany			is a PayablesCompany
				PrmPayablesInvoice			is a PayablesInvoice
				PrmPayablesInvoicePayment	is a PayablesInvoicePayment
				PrmControlDocumentNumber 	is Alpha 30
				PrmDescription           	is Alpha up to 60
				PrmReference             	is a Reference
				PrmJournalizeGroup       	is like JournalizeGroup
				PrmVoidDate				 	is Date

			Instance Selection
				where (Company					= PrmPayablesCompany
				and    PayablesInvoice			= PrmPayablesInvoice
				and    PayablesInvoicePayment 	= PrmPayablesInvoicePayment)

			Action Rules
				Instance Rules




					invoke CreateGainLossOffset 
						invoked.PrmControlDocumentNumber	= PrmControlDocumentNumber
						invoked.PrmDescription				= PrmDescription
						invoked.PrmReference				= PrmReference
						invoked.PrmJournalizeGroup			= PrmJournalizeGroup
						invoked.PrmVoidDate					= PrmVoidDate
						invoked.PrmCalledFromSetAction		= true




		CreateGainLossOffset is an Instance Action
			restricted
			Parameters
				PrmControlDocumentNumber is Alpha 30
				PrmDescription           is Alpha up to 60
				PrmReference             is a Reference
				PrmJournalizeGroup       is like JournalizeGroup
				PrmVoidDate				 is Date 
				PrmCalledFromSetAction	 is Boolean		
				PrmSetActionThreshold	 is Numeric 3	

			Parameter Rules
				PrmSetActionThreshold
					default to config.ProrateGainLossOffsetSetActionThreshold
					default to 50

			Local Fields
				LocalPerformGainLoss		is Boolean
				LocalBoolean			 	is Boolean
				LocalDistPaymentAmount		is an InternationalAmount
			Action Rules






				if (!PrmCalledFromSetAction
				and Company.ProrateGainLossToDistributions
				and instance count of PayablesInvoice.PayablesInvoiceDistribution set > PrmSetActionThreshold)	

					invoke CreateGainLossOffsetSet 		
						invoked.PrmPayablesCompany			= Company
						invoked.PrmPayablesInvoice			= PayablesInvoice
						invoked.PrmPayablesInvoicePayment	= PayablesInvoicePayment
						invoked.PrmControlDocumentNumber	= PrmControlDocumentNumber
						invoked.PrmDescription				= PrmDescription
						invoked.PrmReference				= PrmReference
						invoked.PrmJournalizeGroup			= PrmJournalizeGroup
						invoked.PrmVoidDate					= PrmVoidDate

				else	


					initialize LocalDistributionAmount
					if (PrmVoidDate				!entered
					and LastCurrencyRevaluationDate	entered)


						invoke CreateGainLossDistribution
							invoked.PrmRevalueDate				= CheckDate
							invoked.PrmDescription				= PrmDescription
							invoked.PrmDistributionReference	= PrmReference
							if (AccrualCode entered)
								invoked.PrmAccrualCode			= AccrualCode
							else
								invoked.PrmAccrualCode			= PayablesInvoice.AccrualCode
							invoked.PrmDefaultSystemAccount		= 1		
							invoked.PrmReversal					= 1		
							invoked.PrmJournalizeGroup			= PrmJournalizeGroup
							invoked.PrmAPPaymentClose			= true

					if (LocalAccrualCode not entered)				
						LocalAccrualCode	= DerivedAccrualCode	
					if  (CurrencyEvaluation.CurrencyGainLoss)
						LocalPerformGainLoss	= true
						include SetPaymentCurrencyAmountFields
					else
						if (CurrencyEvaluation	!entered)
							if (CashCode.Currency = InvoiceCurrency)
								include SetInvoicePaymentCurrencyAmountFields	
								include SetPaymentCurrencyAmountFields			

								if (LocalInvoiceCurrencyCalculationGroup.FunctionalAmount.OutputCurrencyRate	!= LocalCurrencyCalculationGroup.FunctionalAmount.OutputCurrencyRate
								or  LocalInvoiceCurrencyCalculationGroup.AlternateAmount.OutputCurrencyRate		!= LocalCurrencyCalculationGroup.AlternateAmount.OutputCurrencyRate
								or  LocalInvoiceCurrencyCalculationGroup.AlternateAmount2.OutputCurrencyRate	!= LocalCurrencyCalculationGroup.AlternateAmount2.OutputCurrencyRate
								or  LocalInvoiceCurrencyCalculationGroup.AlternateAmount3.OutputCurrencyRate	!= LocalCurrencyCalculationGroup.AlternateAmount3.OutputCurrencyRate
								or  LocalInvoiceCurrencyCalculationGroup.ReportAmount1.OutputCurrencyRate		!= LocalCurrencyCalculationGroup.ReportAmount1.OutputCurrencyRate
								or  LocalInvoiceCurrencyCalculationGroup.ReportAmount2.OutputCurrencyRate		!= LocalCurrencyCalculationGroup.ReportAmount2.OutputCurrencyRate
								or  LocalInvoiceCurrencyCalculationGroup.ReportAmount3.OutputCurrencyRate		!= LocalCurrencyCalculationGroup.ReportAmount3.OutputCurrencyRate
								or  LocalInvoiceCurrencyCalculationGroup.ReportAmount4.OutputCurrencyRate		!= LocalCurrencyCalculationGroup.ReportAmount4.OutputCurrencyRate
								or  LocalInvoiceCurrencyCalculationGroup.ReportAmount5.OutputCurrencyRate		!= LocalCurrencyCalculationGroup.ReportAmount5.OutputCurrencyRate)
									LocalPerformGainLoss	= true

							else
								LocalPerformGainLoss	= true
							include CheckForRateChangesDuringPaymentCycle	

					if (DiscountLost)										
						RevaluedBaseAmount.FunctionalAmount.EnteredCurrencyAmount = NetPaymentAmount.FunctionalAmount.EnteredCurrencyAmount + BaseWithholdingAmount + FATCABaseIncomeAmount + SecondaryWithholdingBaseAmount1 + SecondaryWithholdingBaseAmount2 + SecondaryWithholdingBaseAmount3
					else
						RevaluedBaseAmount.FunctionalAmount.EnteredCurrencyAmount = NetPaymentAmount.FunctionalAmount.EnteredCurrencyAmount + DiscountAmount.FunctionalAmount.EnteredCurrencyAmount + BaseWithholdingAmount + FATCABaseIncomeAmount + SecondaryWithholdingBaseAmount1 + SecondaryWithholdingBaseAmount2 + SecondaryWithholdingBaseAmount3

					if (LocalPerformGainLoss)
						include CalculateCashCodeCurrencyAmount
						include CalculatePaymentCurrencyDifference

						NegativeFinanceCurrencyAmountGroup = CalculateFinanceCurrencyAmountGroup.Total
						LocalBoolean = NegativeFinanceCurrencyAmountGroup.PerformCalculation

						if  (Company.ProrateGainLossToDistributions
						and (LastCurrencyRevaluationDate	!entered
						or   PrmVoidDate					 entered)
						and  PaymentGainLossDistributionsRel exists)	

							for each PaymentGainLossDistributionsRel
								invoke Delete each





						if  (CalculateFinanceCurrencyAmountGroup.TotalIsNonZero
						and  CashCode.Currency = InvoiceCurrency)					
							LocalPayablesCompany	= Company
							if (AccrualCode entered)
								LocalAccrualCode	= AccrualCode
							else
								LocalAccrualCode	= PayablesInvoice.AccrualCode


							if (Company.ProrateGainLossToDistributions)
								if (PrmVoidDate entered)
									LocalDistributionAmount.FunctionalAmount.EnteredCurrencyAmount		= CalculateFinanceCurrencyAmountGroup.Total.FunctionalAmount.EnteredCurrencyAmount
									LocalDistributionAmount.AlternateAmount.EnteredCurrencyAmount		= CalculateFinanceCurrencyAmountGroup.Total.AlternateAmount.EnteredCurrencyAmount
									LocalDistributionAmount.AlternateAmount2.EnteredCurrencyAmount		= CalculateFinanceCurrencyAmountGroup.Total.AlternateAmount2.EnteredCurrencyAmount
									LocalDistributionAmount.AlternateAmount3.EnteredCurrencyAmount		= CalculateFinanceCurrencyAmountGroup.Total.AlternateAmount3.EnteredCurrencyAmount
									LocalDistributionAmount.ToFunctionalAmount.EnteredCurrencyAmount	= CalculateFinanceCurrencyAmountGroup.Total.ToFunctionalAmount.EnteredCurrencyAmount
									LocalDistributionAmount.ToAlternateAmount.EnteredCurrencyAmount		= CalculateFinanceCurrencyAmountGroup.Total.ToAlternateAmount.EnteredCurrencyAmount
									LocalDistributionAmount.ToAlternateAmount2.EnteredCurrencyAmount	= CalculateFinanceCurrencyAmountGroup.Total.ToAlternateAmount2.EnteredCurrencyAmount
									LocalDistributionAmount.ToAlternateAmount3.EnteredCurrencyAmount	= CalculateFinanceCurrencyAmountGroup.Total.ToAlternateAmount3.EnteredCurrencyAmount
									LocalDistributionAmount.ProjectAmount.EnteredCurrencyAmount			= CalculateFinanceCurrencyAmountGroup.Total.ProjectAmount.EnteredCurrencyAmount
									LocalDistributionAmount.ReportAmount1.EnteredCurrencyAmount			= CalculateFinanceCurrencyAmountGroup.Total.ReportAmount1.EnteredCurrencyAmount
									LocalDistributionAmount.ReportAmount2.EnteredCurrencyAmount			= CalculateFinanceCurrencyAmountGroup.Total.ReportAmount2.EnteredCurrencyAmount
									LocalDistributionAmount.ReportAmount3.EnteredCurrencyAmount			= CalculateFinanceCurrencyAmountGroup.Total.ReportAmount3.EnteredCurrencyAmount
									LocalDistributionAmount.ReportAmount4.EnteredCurrencyAmount			= CalculateFinanceCurrencyAmountGroup.Total.ReportAmount4.EnteredCurrencyAmount
									LocalDistributionAmount.ReportAmount5.EnteredCurrencyAmount			= CalculateFinanceCurrencyAmountGroup.Total.ReportAmount5.EnteredCurrencyAmount
								else
									LocalDistributionAmount.FunctionalAmount.EnteredCurrencyAmount		= NegativeFinanceCurrencyAmountGroup.FunctionalAmount.EnteredCurrencyAmount
									LocalDistributionAmount.AlternateAmount.EnteredCurrencyAmount		= NegativeFinanceCurrencyAmountGroup.AlternateAmount.EnteredCurrencyAmount
									LocalDistributionAmount.AlternateAmount2.EnteredCurrencyAmount		= NegativeFinanceCurrencyAmountGroup.AlternateAmount2.EnteredCurrencyAmount
									LocalDistributionAmount.AlternateAmount3.EnteredCurrencyAmount		= NegativeFinanceCurrencyAmountGroup.AlternateAmount3.EnteredCurrencyAmount
									LocalDistributionAmount.ToFunctionalAmount.EnteredCurrencyAmount	= NegativeFinanceCurrencyAmountGroup.ToFunctionalAmount.EnteredCurrencyAmount
									LocalDistributionAmount.ToAlternateAmount.EnteredCurrencyAmount		= NegativeFinanceCurrencyAmountGroup.ToAlternateAmount.EnteredCurrencyAmount
									LocalDistributionAmount.ToAlternateAmount2.EnteredCurrencyAmount	= NegativeFinanceCurrencyAmountGroup.ToAlternateAmount2.EnteredCurrencyAmount
									LocalDistributionAmount.ToAlternateAmount3.EnteredCurrencyAmount	= NegativeFinanceCurrencyAmountGroup.ToAlternateAmount3.EnteredCurrencyAmount
									LocalDistributionAmount.ProjectAmount.EnteredCurrencyAmount			= NegativeFinanceCurrencyAmountGroup.ProjectAmount.EnteredCurrencyAmount
									LocalDistributionAmount.ReportAmount1.EnteredCurrencyAmount			= NegativeFinanceCurrencyAmountGroup.ReportAmount1.EnteredCurrencyAmount
									LocalDistributionAmount.ReportAmount2.EnteredCurrencyAmount			= NegativeFinanceCurrencyAmountGroup.ReportAmount2.EnteredCurrencyAmount
									LocalDistributionAmount.ReportAmount3.EnteredCurrencyAmount			= NegativeFinanceCurrencyAmountGroup.ReportAmount3.EnteredCurrencyAmount
									LocalDistributionAmount.ReportAmount4.EnteredCurrencyAmount			= NegativeFinanceCurrencyAmountGroup.ReportAmount4.EnteredCurrencyAmount
									LocalDistributionAmount.ReportAmount5.EnteredCurrencyAmount			= NegativeFinanceCurrencyAmountGroup.ReportAmount5.EnteredCurrencyAmount
								initialize LocalDistributionCount

								LocalNumberOfDistributions = instance count of ProrateDistributionsRel
								LocalLastDistribution = false
								LocalPaymentPercent	= PaymentAmount.CurrencyAmount / DerivedInvoiceAmountDivisor 
								for each ProrateDistributionsRel
									initialize CalculateFinanceCurrencyAmountGroup
									initialize GainLossCalculation
									initialize LocalCashCodePaymentAmount
									LocalDistributionCount += 1
									if (LocalDistributionCount = LocalNumberOfDistributions)
										LocalLastDistribution = true

									LocalCurrencyTable														= PayablesInvoice.CurrencyTable
									LocalCurrencyCalculationGroup.FinanceEnterpriseGroup					= GeneralLedgerCompanyRel.FinanceEnterpriseGroup
									LocalCurrencyCalculationGroup.ExchangeDate								= CheckDate
									LocalCurrencyCalculationGroup.FromCurrency								= CashCode.Currency
									LocalCurrencyCalculationGroup.FunctionalAmount.ToCurrency				= GeneralLedgerCompanyRel.AccountingEntity.FunctionalCurrency
									LocalCurrencyCalculationGroup.AlternateAmount.ToCurrency				= GeneralLedgerCompanyRel.AccountingEntity.AlternateCurrency
									LocalCurrencyCalculationGroup.AlternateAmount2.ToCurrency				= GeneralLedgerCompanyRel.AccountingEntity.AlternateCurrency2
									LocalCurrencyCalculationGroup.AlternateAmount3.ToCurrency				= GeneralLedgerCompanyRel.AccountingEntity.AlternateCurrency3
									LocalCurrencyCalculationGroup.ToFunctionalAmount.ToCurrency				= each.DistributionAccount.ToAccountingEntity.FunctionalCurrency
									LocalCurrencyCalculationGroup.ToAlternateAmount.ToCurrency				= each.DistributionAccount.ToAccountingEntity.AlternateCurrency
									LocalCurrencyCalculationGroup.ToAlternateAmount2.ToCurrency				= each.DistributionAccount.ToAccountingEntity.AlternateCurrency2
									LocalCurrencyCalculationGroup.ToAlternateAmount3.ToCurrency				= each.DistributionAccount.ToAccountingEntity.AlternateCurrency3
									LocalCurrencyCalculationGroup.ReportAmount1.ToCurrency					= GeneralLedgerCompanyRel.FinanceEnterpriseGroup.ReportCurrencyOne
									LocalCurrencyCalculationGroup.ReportAmount2.ToCurrency					= GeneralLedgerCompanyRel.FinanceEnterpriseGroup.ReportCurrencyTwo
									LocalCurrencyCalculationGroup.ReportAmount3.ToCurrency					= GeneralLedgerCompanyRel.FinanceEnterpriseGroup.ReportCurrencyThree
									LocalCurrencyCalculationGroup.ReportAmount4.ToCurrency					= GeneralLedgerCompanyRel.FinanceEnterpriseGroup.ReportCurrencyFour
									LocalCurrencyCalculationGroup.ReportAmount5.ToCurrency					= GeneralLedgerCompanyRel.FinanceEnterpriseGroup.ReportCurrencyFive


									LocalDistPaymentAmount									= each.DistributionAmount.CurrencyAmount * LocalPaymentPercent
									LocalCurrencyCalculationGroup.CurrencyAmount			= LocalDistPaymentAmount
									LocalCashCodePaymentAmount.CurrencyAmount	    		= LocalDistPaymentAmount
									LocalCashCodePaymentAmount.FunctionalAmount.EnteredCurrencyAmount	= LocalCurrencyCalculationGroup.FunctionalAmount.OutputCurrencyAmount
									LocalCashCodePaymentAmount.FunctionalAmount.EnteredCurrencyRate		= LocalCurrencyCalculationGroup.FunctionalAmount.OutputCurrencyRate
									if (GeneralLedgerCompanyRel.AccountingEntity.AlternateCurrency entered)
										LocalCashCodePaymentAmount.AlternateAmount.EnteredCurrencyAmount   = LocalCurrencyCalculationGroup.AlternateAmount.OutputCurrencyAmount
										LocalCashCodePaymentAmount.AlternateAmount.EnteredCurrencyRate   	= LocalCurrencyCalculationGroup.AlternateAmount.OutputCurrencyRate
									if (GeneralLedgerCompanyRel.AccountingEntity.AlternateCurrency2 entered)
										LocalCashCodePaymentAmount.AlternateAmount2.EnteredCurrencyAmount  = LocalCurrencyCalculationGroup.AlternateAmount2.OutputCurrencyAmount
										LocalCashCodePaymentAmount.AlternateAmount2.EnteredCurrencyRate   	= LocalCurrencyCalculationGroup.AlternateAmount2.OutputCurrencyRate
									if (GeneralLedgerCompanyRel.AccountingEntity.AlternateCurrency3 entered)
										LocalCashCodePaymentAmount.AlternateAmount3.EnteredCurrencyAmount	= LocalCurrencyCalculationGroup.AlternateAmount3.OutputCurrencyAmount
										LocalCashCodePaymentAmount.AlternateAmount3.EnteredCurrencyRate	= LocalCurrencyCalculationGroup.AlternateAmount3.OutputCurrencyRate
									if (GeneralLedgerCompanyRel.AccountingEntity != each.DistributionAccount.ToAccountingEntity)
										LocalCashCodePaymentAmount.ToFunctionalAmount.EnteredCurrencyAmount  		= LocalCurrencyCalculationGroup.ToFunctionalAmount.OutputCurrencyAmount
										LocalCashCodePaymentAmount.ToFunctionalAmount.EnteredCurrencyRate   		= LocalCurrencyCalculationGroup.ToFunctionalAmount.OutputCurrencyRate
										if (each.DistributionAccount.ToAccountingEntity.AlternateCurrency entered)
											LocalCashCodePaymentAmount.ToAlternateAmount.EnteredCurrencyAmount  	= LocalCurrencyCalculationGroup.ToAlternateAmount.OutputCurrencyAmount
											LocalCashCodePaymentAmount.ToAlternateAmount.EnteredCurrencyRate   	= LocalCurrencyCalculationGroup.ToAlternateAmount.OutputCurrencyRate
										if (each.DistributionAccount.ToAccountingEntity.AlternateCurrency2 entered)
											LocalCashCodePaymentAmount.ToAlternateAmount2.EnteredCurrencyAmount  	= LocalCurrencyCalculationGroup.ToAlternateAmount2.OutputCurrencyAmount
											LocalCashCodePaymentAmount.ToAlternateAmount2.EnteredCurrencyRate   	= LocalCurrencyCalculationGroup.ToAlternateAmount2.OutputCurrencyRate
										if (each.DistributionAccount.ToAccountingEntity.AlternateCurrency3 entered)
											LocalCashCodePaymentAmount.ToAlternateAmount3.EnteredCurrencyAmount	= LocalCurrencyCalculationGroup.ToAlternateAmount3.OutputCurrencyAmount
											LocalCashCodePaymentAmount.ToAlternateAmount3.EnteredCurrencyRate		= LocalCurrencyCalculationGroup.ToAlternateAmount3.OutputCurrencyRate
									if (each.DistributionAccount.Project entered)
										LocalCashCodePaymentAmount.ProjectAmount.EnteredCurrencyAmount		= LocalCurrencyCalculationGroup.ProjectAmount.OutputCurrencyAmount
										LocalCashCodePaymentAmount.ProjectAmount.EnteredCurrencyRate		= LocalCurrencyCalculationGroup.ProjectAmount.OutputCurrencyRate
									if (GeneralLedgerCompanyRel.FinanceEnterpriseGroup.ReportCurrencyOne entered)
										LocalCashCodePaymentAmount.ReportAmount1.EnteredCurrencyAmount		= LocalCurrencyCalculationGroup.ReportAmount1.OutputCurrencyAmount
										LocalCashCodePaymentAmount.ReportAmount1.EnteredCurrencyRate   	= LocalCurrencyCalculationGroup.ReportAmount1.OutputCurrencyRate
									if (GeneralLedgerCompanyRel.FinanceEnterpriseGroup.ReportCurrencyTwo entered)
										LocalCashCodePaymentAmount.ReportAmount2.EnteredCurrencyAmount 	= LocalCurrencyCalculationGroup.ReportAmount2.OutputCurrencyAmount
										LocalCashCodePaymentAmount.ReportAmount2.EnteredCurrencyRate 		= LocalCurrencyCalculationGroup.ReportAmount2.OutputCurrencyRate
									if (GeneralLedgerCompanyRel.FinanceEnterpriseGroup.ReportCurrencyThree entered)
										LocalCashCodePaymentAmount.ReportAmount3.EnteredCurrencyAmount		= LocalCurrencyCalculationGroup.ReportAmount3.OutputCurrencyAmount
										LocalCashCodePaymentAmount.ReportAmount3.EnteredCurrencyRate		= LocalCurrencyCalculationGroup.ReportAmount3.OutputCurrencyRate
									if (GeneralLedgerCompanyRel.FinanceEnterpriseGroup.ReportCurrencyFour entered)
										LocalCashCodePaymentAmount.ReportAmount4.EnteredCurrencyAmount		= LocalCurrencyCalculationGroup.ReportAmount4.OutputCurrencyAmount
										LocalCashCodePaymentAmount.ReportAmount4.EnteredCurrencyRate		= LocalCurrencyCalculationGroup.ReportAmount4.OutputCurrencyRate
									if (GeneralLedgerCompanyRel.FinanceEnterpriseGroup.ReportCurrencyFive entered)
										LocalCashCodePaymentAmount.ReportAmount5.EnteredCurrencyAmount		= LocalCurrencyCalculationGroup.ReportAmount5.OutputCurrencyAmount
										LocalCashCodePaymentAmount.ReportAmount5.EnteredCurrencyRate		= LocalCurrencyCalculationGroup.ReportAmount5.OutputCurrencyRate

									CalculateFinanceCurrencyAmountGroup.Total		= LocalCashCodePaymentAmount

									CalculateFinanceCurrencyAmountGroup.Operand.FunctionalAmount.EnteredCurrencyAmount		= each.DistributionAmount.FunctionalAmount.EnteredCurrencyAmount * LocalPaymentPercent
									CalculateFinanceCurrencyAmountGroup.Operand.AlternateAmount.EnteredCurrencyAmount		= each.DistributionAmount.AlternateAmount.EnteredCurrencyAmount * LocalPaymentPercent
									CalculateFinanceCurrencyAmountGroup.Operand.AlternateAmount2.EnteredCurrencyAmount		= each.DistributionAmount.AlternateAmount2.EnteredCurrencyAmount * LocalPaymentPercent
									CalculateFinanceCurrencyAmountGroup.Operand.AlternateAmount3.EnteredCurrencyAmount		= each.DistributionAmount.AlternateAmount3.EnteredCurrencyAmount * LocalPaymentPercent
									CalculateFinanceCurrencyAmountGroup.Operand.ToFunctionalAmount.EnteredCurrencyAmount	= each.DistributionAmount.ToFunctionalAmount.EnteredCurrencyAmount * LocalPaymentPercent
									CalculateFinanceCurrencyAmountGroup.Operand.ToAlternateAmount.EnteredCurrencyAmount		= each.DistributionAmount.ToAlternateAmount.EnteredCurrencyAmount * LocalPaymentPercent
									CalculateFinanceCurrencyAmountGroup.Operand.ToAlternateAmount2.EnteredCurrencyAmount	= each.DistributionAmount.ToAlternateAmount2.EnteredCurrencyAmount * LocalPaymentPercent
									CalculateFinanceCurrencyAmountGroup.Operand.ToAlternateAmount3.EnteredCurrencyAmount	= each.DistributionAmount.ToAlternateAmount3.EnteredCurrencyAmount * LocalPaymentPercent
									CalculateFinanceCurrencyAmountGroup.Operand.ProjectAmount.EnteredCurrencyAmount			= each.DistributionAmount.ProjectAmount.EnteredCurrencyAmount * LocalPaymentPercent
									CalculateFinanceCurrencyAmountGroup.Operand.ReportAmount1.EnteredCurrencyAmount			= each.DistributionAmount.ReportAmount1.EnteredCurrencyAmount * LocalPaymentPercent
									CalculateFinanceCurrencyAmountGroup.Operand.ReportAmount2.EnteredCurrencyAmount			= each.DistributionAmount.ReportAmount2.EnteredCurrencyAmount * LocalPaymentPercent
									CalculateFinanceCurrencyAmountGroup.Operand.ReportAmount3.EnteredCurrencyAmount			= each.DistributionAmount.ReportAmount3.EnteredCurrencyAmount * LocalPaymentPercent
									CalculateFinanceCurrencyAmountGroup.Operand.ReportAmount4.EnteredCurrencyAmount			= each.DistributionAmount.ReportAmount4.EnteredCurrencyAmount * LocalPaymentPercent
									CalculateFinanceCurrencyAmountGroup.Operand.ReportAmount5.EnteredCurrencyAmount			= each.DistributionAmount.ReportAmount5.EnteredCurrencyAmount * LocalPaymentPercent

									if (LocalPaymentPercent != 1)
										LocalNumberOfDecimals	= GeneralLedgerCompanyRel.AccountingEntity.FunctionalCurrency.NumberOfDecimals
										round CalculateFinanceCurrencyAmountGroup.Operand.FunctionalAmount.EnteredCurrencyAmount to nearest DerivedLocalRoundTo
										LocalNumberOfDecimals	= GeneralLedgerCompanyRel.AccountingEntity.AlternateCurrency.NumberOfDecimals
										round CalculateFinanceCurrencyAmountGroup.Operand.AlternateAmount.EnteredCurrencyAmount to nearest DerivedLocalRoundTo
										LocalNumberOfDecimals	= GeneralLedgerCompanyRel.AccountingEntity.AlternateCurrency2.NumberOfDecimals
										round CalculateFinanceCurrencyAmountGroup.Operand.AlternateAmount2.EnteredCurrencyAmount to nearest DerivedLocalRoundTo
										LocalNumberOfDecimals	= GeneralLedgerCompanyRel.AccountingEntity.AlternateCurrency3.NumberOfDecimals
										round CalculateFinanceCurrencyAmountGroup.Operand.AlternateAmount3.EnteredCurrencyAmount to nearest DerivedLocalRoundTo
										LocalNumberOfDecimals	= each.DistributionAccount.ToAccountingEntity.FunctionalCurrency.NumberOfDecimals
										round CalculateFinanceCurrencyAmountGroup.Operand.ToFunctionalAmount.EnteredCurrencyAmount to nearest DerivedLocalRoundTo
										LocalNumberOfDecimals	= each.DistributionAccount.ToAccountingEntity.AlternateCurrency.NumberOfDecimals
										round CalculateFinanceCurrencyAmountGroup.Operand.ToAlternateAmount.EnteredCurrencyAmount to nearest DerivedLocalRoundTo
										LocalNumberOfDecimals	= each.DistributionAccount.ToAccountingEntity.AlternateCurrency2.NumberOfDecimals
										round CalculateFinanceCurrencyAmountGroup.Operand.ToAlternateAmount2.EnteredCurrencyAmount to nearest DerivedLocalRoundTo
										LocalNumberOfDecimals	= each.DistributionAccount.ToAccountingEntity.AlternateCurrency3.NumberOfDecimals
										round CalculateFinanceCurrencyAmountGroup.Operand.ToAlternateAmount3.EnteredCurrencyAmount to nearest DerivedLocalRoundTo
										LocalNumberOfDecimals	= each.DistributionAccount.Project.Currency.NumberOfDecimals
										round CalculateFinanceCurrencyAmountGroup.Operand.ProjectAmount.EnteredCurrencyAmount to nearest DerivedLocalRoundTo
										LocalNumberOfDecimals	= GeneralLedgerCompanyRel.FinanceEnterpriseGroup.ReportCurrencyOne.NumberOfDecimals
										round CalculateFinanceCurrencyAmountGroup.Operand.ReportAmount1.EnteredCurrencyAmount to nearest DerivedLocalRoundTo
										LocalNumberOfDecimals	= GeneralLedgerCompanyRel.FinanceEnterpriseGroup.ReportCurrencyTwo.NumberOfDecimals
										round CalculateFinanceCurrencyAmountGroup.Operand.ReportAmount2.EnteredCurrencyAmount to nearest DerivedLocalRoundTo
										LocalNumberOfDecimals	= GeneralLedgerCompanyRel.FinanceEnterpriseGroup.ReportCurrencyThree.NumberOfDecimals
										round CalculateFinanceCurrencyAmountGroup.Operand.ReportAmount3.EnteredCurrencyAmount to nearest DerivedLocalRoundTo
										LocalNumberOfDecimals	= GeneralLedgerCompanyRel.FinanceEnterpriseGroup.ReportCurrencyFour.NumberOfDecimals
										round CalculateFinanceCurrencyAmountGroup.Operand.ReportAmount4.EnteredCurrencyAmount to nearest DerivedLocalRoundTo
										LocalNumberOfDecimals	= GeneralLedgerCompanyRel.FinanceEnterpriseGroup.ReportCurrencyFive.NumberOfDecimals
										round CalculateFinanceCurrencyAmountGroup.Operand.ReportAmount5.EnteredCurrencyAmount to nearest DerivedLocalRoundTo

									CalculateFinanceCurrencyAmountGroup.Operand.FunctionalAmount.EnteredCurrencyRate	= each.DistributionAmount.FunctionalAmount.EnteredCurrencyRate
									CalculateFinanceCurrencyAmountGroup.Operand.AlternateAmount.EnteredCurrencyRate		= each.DistributionAmount.AlternateAmount.EnteredCurrencyRate
									CalculateFinanceCurrencyAmountGroup.Operand.AlternateAmount2.EnteredCurrencyRate	= each.DistributionAmount.AlternateAmount2.EnteredCurrencyRate
									CalculateFinanceCurrencyAmountGroup.Operand.AlternateAmount3.EnteredCurrencyRate	= each.DistributionAmount.AlternateAmount3.EnteredCurrencyRate
									CalculateFinanceCurrencyAmountGroup.Operand.ToFunctionalAmount.EnteredCurrencyRate	= each.DistributionAmount.ToFunctionalAmount.EnteredCurrencyRate
									CalculateFinanceCurrencyAmountGroup.Operand.ToAlternateAmount.EnteredCurrencyRate	= each.DistributionAmount.ToAlternateAmount.EnteredCurrencyRate
									CalculateFinanceCurrencyAmountGroup.Operand.ToAlternateAmount2.EnteredCurrencyRate	= each.DistributionAmount.ToAlternateAmount2.EnteredCurrencyRate
									CalculateFinanceCurrencyAmountGroup.Operand.ToAlternateAmount3.EnteredCurrencyRate	= each.DistributionAmount.ToAlternateAmount3.EnteredCurrencyRate
									CalculateFinanceCurrencyAmountGroup.Operand.ProjectAmount.EnteredCurrencyRate		= each.DistributionAmount.ProjectAmount.EnteredCurrencyRate
									CalculateFinanceCurrencyAmountGroup.Operand.ReportAmount1.EnteredCurrencyRate		= each.DistributionAmount.ReportAmount1.EnteredCurrencyRate
									CalculateFinanceCurrencyAmountGroup.Operand.ReportAmount2.EnteredCurrencyRate		= each.DistributionAmount.ReportAmount2.EnteredCurrencyRate
									CalculateFinanceCurrencyAmountGroup.Operand.ReportAmount3.EnteredCurrencyRate		= each.DistributionAmount.ReportAmount3.EnteredCurrencyRate
									CalculateFinanceCurrencyAmountGroup.Operand.ReportAmount4.EnteredCurrencyRate		= each.DistributionAmount.ReportAmount4.EnteredCurrencyRate
									CalculateFinanceCurrencyAmountGroup.Operand.ReportAmount5.EnteredCurrencyRate		= each.DistributionAmount.ReportAmount5.EnteredCurrencyRate

									LocalBoolean = CalculateFinanceCurrencyAmountGroup.PerformSubtraction

									initialize GainLossCalculation
									GainLossCalculation.DefaultSystemAccount 					= 2
									GainLossCalculation.AccountType								= 1
									GainLossCalculation.NewCurrencyAmount.FunctionalAmount		= CalculateFinanceCurrencyAmountGroup.Total.FunctionalAmount
									GainLossCalculation.NewCurrencyAmount.AlternateAmount		= CalculateFinanceCurrencyAmountGroup.Total.AlternateAmount
									GainLossCalculation.NewCurrencyAmount.AlternateAmount2		= CalculateFinanceCurrencyAmountGroup.Total.AlternateAmount2
									GainLossCalculation.NewCurrencyAmount.AlternateAmount3		= CalculateFinanceCurrencyAmountGroup.Total.AlternateAmount3
									GainLossCalculation.NewCurrencyAmount.ToFunctionalAmount	= CalculateFinanceCurrencyAmountGroup.Total.ToFunctionalAmount
									GainLossCalculation.NewCurrencyAmount.ToAlternateAmount		= CalculateFinanceCurrencyAmountGroup.Total.ToAlternateAmount
									GainLossCalculation.NewCurrencyAmount.ToAlternateAmount2	= CalculateFinanceCurrencyAmountGroup.Total.ToAlternateAmount2
									GainLossCalculation.NewCurrencyAmount.ToAlternateAmount3	= CalculateFinanceCurrencyAmountGroup.Total.ToAlternateAmount3
									GainLossCalculation.NewCurrencyAmount.ProjectAmount			= CalculateFinanceCurrencyAmountGroup.Total.ProjectAmount
									GainLossCalculation.NewCurrencyAmount.ReportAmount1			= CalculateFinanceCurrencyAmountGroup.Total.ReportAmount1
									GainLossCalculation.NewCurrencyAmount.ReportAmount2			= CalculateFinanceCurrencyAmountGroup.Total.ReportAmount2
									GainLossCalculation.NewCurrencyAmount.ReportAmount3			= CalculateFinanceCurrencyAmountGroup.Total.ReportAmount3
									GainLossCalculation.NewCurrencyAmount.ReportAmount4			= CalculateFinanceCurrencyAmountGroup.Total.ReportAmount4
									GainLossCalculation.NewCurrencyAmount.ReportAmount5			= CalculateFinanceCurrencyAmountGroup.Total.ReportAmount5
									if (PrmVoidDate	entered)	
										GainLossCalculation.NewCurrencyAmount.FunctionalAmount.EnteredCurrencyRate	= CashPaymentDistributionsRel.DistributionAmount.FunctionalAmount.EnteredCurrencyRate
										GainLossCalculation.NewCurrencyAmount.AlternateAmount.EnteredCurrencyRate	= CashPaymentDistributionsRel.DistributionAmount.AlternateAmount.EnteredCurrencyRate
										GainLossCalculation.NewCurrencyAmount.AlternateAmount2.EnteredCurrencyRate	= CashPaymentDistributionsRel.DistributionAmount.AlternateAmount2.EnteredCurrencyRate
										GainLossCalculation.NewCurrencyAmount.AlternateAmount3.EnteredCurrencyRate	= CashPaymentDistributionsRel.DistributionAmount.AlternateAmount3.EnteredCurrencyRate
										GainLossCalculation.NewCurrencyAmount.ReportAmount1.EnteredCurrencyRate		= CashPaymentDistributionsRel.DistributionAmount.ReportAmount1.EnteredCurrencyRate
										GainLossCalculation.NewCurrencyAmount.ReportAmount2.EnteredCurrencyRate		= CashPaymentDistributionsRel.DistributionAmount.ReportAmount2.EnteredCurrencyRate
										GainLossCalculation.NewCurrencyAmount.ReportAmount3.EnteredCurrencyRate		= CashPaymentDistributionsRel.DistributionAmount.ReportAmount3.EnteredCurrencyRate
										GainLossCalculation.NewCurrencyAmount.ReportAmount4.EnteredCurrencyRate		= CashPaymentDistributionsRel.DistributionAmount.ReportAmount4.EnteredCurrencyRate
										GainLossCalculation.NewCurrencyAmount.ReportAmount5.EnteredCurrencyRate		= CashPaymentDistributionsRel.DistributionAmount.ReportAmount5.EnteredCurrencyRate
									GainLossCalculation.SkipCurrencyExchange					= true
									GainLossCalculation.OriginFinanceCodeBlock					= each.DistributionAccount
									LocalBoolean = GainLossCalculation.DerivedCalculateAmount

									include ProcessRealizedGainLossDistributions




							else

								initialize GainLossCalculation
								GainLossCalculation.DefaultSystemAccount 					= 2
								GainLossCalculation.AccountType								= 1
								GainLossCalculation.NewCurrencyAmount.FunctionalAmount		= NegativeFinanceCurrencyAmountGroup.FunctionalAmount
								GainLossCalculation.NewCurrencyAmount.AlternateAmount		= NegativeFinanceCurrencyAmountGroup.AlternateAmount
								GainLossCalculation.NewCurrencyAmount.AlternateAmount2		= NegativeFinanceCurrencyAmountGroup.AlternateAmount2
								GainLossCalculation.NewCurrencyAmount.AlternateAmount3		= NegativeFinanceCurrencyAmountGroup.AlternateAmount3
								GainLossCalculation.NewCurrencyAmount.ToFunctionalAmount	= NegativeFinanceCurrencyAmountGroup.ToFunctionalAmount
								GainLossCalculation.NewCurrencyAmount.ToAlternateAmount		= NegativeFinanceCurrencyAmountGroup.ToAlternateAmount
								GainLossCalculation.NewCurrencyAmount.ToAlternateAmount2	= NegativeFinanceCurrencyAmountGroup.ToAlternateAmount2
								GainLossCalculation.NewCurrencyAmount.ToAlternateAmount3	= NegativeFinanceCurrencyAmountGroup.ToAlternateAmount3
								GainLossCalculation.NewCurrencyAmount.ProjectAmount			= NegativeFinanceCurrencyAmountGroup.ProjectAmount
								GainLossCalculation.NewCurrencyAmount.ReportAmount1			= NegativeFinanceCurrencyAmountGroup.ReportAmount1
								GainLossCalculation.NewCurrencyAmount.ReportAmount2			= NegativeFinanceCurrencyAmountGroup.ReportAmount2
								GainLossCalculation.NewCurrencyAmount.ReportAmount3			= NegativeFinanceCurrencyAmountGroup.ReportAmount3
								GainLossCalculation.NewCurrencyAmount.ReportAmount4			= NegativeFinanceCurrencyAmountGroup.ReportAmount4
								GainLossCalculation.NewCurrencyAmount.ReportAmount5			= NegativeFinanceCurrencyAmountGroup.ReportAmount5
								if (PrmVoidDate	entered)	
									GainLossCalculation.NewCurrencyAmount.FunctionalAmount.EnteredCurrencyRate	= CashPaymentDistributionsRel.DistributionAmount.FunctionalAmount.EnteredCurrencyRate
									GainLossCalculation.NewCurrencyAmount.AlternateAmount.EnteredCurrencyRate	= CashPaymentDistributionsRel.DistributionAmount.AlternateAmount.EnteredCurrencyRate
									GainLossCalculation.NewCurrencyAmount.AlternateAmount2.EnteredCurrencyRate	= CashPaymentDistributionsRel.DistributionAmount.AlternateAmount2.EnteredCurrencyRate
									GainLossCalculation.NewCurrencyAmount.AlternateAmount3.EnteredCurrencyRate	= CashPaymentDistributionsRel.DistributionAmount.AlternateAmount3.EnteredCurrencyRate
									GainLossCalculation.NewCurrencyAmount.ReportAmount1.EnteredCurrencyRate		= CashPaymentDistributionsRel.DistributionAmount.ReportAmount1.EnteredCurrencyRate
									GainLossCalculation.NewCurrencyAmount.ReportAmount2.EnteredCurrencyRate		= CashPaymentDistributionsRel.DistributionAmount.ReportAmount2.EnteredCurrencyRate
									GainLossCalculation.NewCurrencyAmount.ReportAmount3.EnteredCurrencyRate		= CashPaymentDistributionsRel.DistributionAmount.ReportAmount3.EnteredCurrencyRate
									GainLossCalculation.NewCurrencyAmount.ReportAmount4.EnteredCurrencyRate		= CashPaymentDistributionsRel.DistributionAmount.ReportAmount4.EnteredCurrencyRate
									GainLossCalculation.NewCurrencyAmount.ReportAmount5.EnteredCurrencyRate		= CashPaymentDistributionsRel.DistributionAmount.ReportAmount5.EnteredCurrencyRate
								GainLossCalculation.SkipCurrencyExchange					= true
								GainLossCalculation.OriginFinanceCodeBlock					= PayablesAccrualCodeDetailRel.DistributionAccount	
								LocalBoolean = GainLossCalculation.DerivedCalculateAmount

								include ProcessRealizedGainLossDistributions


						else
							if (CashCode.Currency != InvoiceCurrency)
								if (Company.ProrateGainLossToDistributions)
									include CalculateTotalPaymentAccrualAmount
									if (PrmVoidDate !entered)			
										RevaluedBaseAmount.FunctionalAmount.EnteredCurrencyAmount	= CalculateFinanceCurrencyAmountGroup.Total.FunctionalAmount.EnteredCurrencyAmount
										RevaluedBaseAmount.AlternateAmount.EnteredCurrencyAmount	= CalculateFinanceCurrencyAmountGroup.Total.AlternateAmount.EnteredCurrencyAmount
										RevaluedBaseAmount.AlternateAmount2.EnteredCurrencyAmount	= CalculateFinanceCurrencyAmountGroup.Total.AlternateAmount2.EnteredCurrencyAmount
										RevaluedBaseAmount.AlternateAmount3.EnteredCurrencyAmount	= CalculateFinanceCurrencyAmountGroup.Total.AlternateAmount3.EnteredCurrencyAmount
										RevaluedBaseAmount.ReportAmount1.EnteredCurrencyAmount		= CalculateFinanceCurrencyAmountGroup.Total.ReportAmount1.EnteredCurrencyAmount
										RevaluedBaseAmount.ReportAmount2.EnteredCurrencyAmount		= CalculateFinanceCurrencyAmountGroup.Total.ReportAmount2.EnteredCurrencyAmount
										RevaluedBaseAmount.ReportAmount3.EnteredCurrencyAmount		= CalculateFinanceCurrencyAmountGroup.Total.ReportAmount3.EnteredCurrencyAmount
										RevaluedBaseAmount.ReportAmount4.EnteredCurrencyAmount		= CalculateFinanceCurrencyAmountGroup.Total.ReportAmount4.EnteredCurrencyAmount
										RevaluedBaseAmount.ReportAmount5.EnteredCurrencyAmount		= CalculateFinanceCurrencyAmountGroup.Total.ReportAmount5.EnteredCurrencyAmount
									initialize LocalDistributionCount

									LocalNumberOfDistributions = instance count of ProrateDistributionsRel
									LocalPaymentPercent	= PaymentAmount.CurrencyAmount / DerivedInvoiceAmountDivisor 
									LocalTotalDistributionAmount	= PaymentAmount
									for each ProrateDistributionsRel
										initialize LocalDistributionAmount
										initialize LocalCashCodePaymentAmount
										LocalDistributionCount += 1
										if (LocalDistributionCount < LocalNumberOfDistributions)
											LocalDistributionAmount.CurrencyAmount								= each.DistributionAmount.CurrencyAmount * LocalPaymentPercent
											LocalDistributionAmount.FunctionalAmount.EnteredCurrencyAmount		= each.DistributionAmount.FunctionalAmount.EnteredCurrencyAmount * LocalPaymentPercent
											LocalDistributionAmount.AlternateAmount.EnteredCurrencyAmount		= each.DistributionAmount.AlternateAmount.EnteredCurrencyAmount * LocalPaymentPercent
											LocalDistributionAmount.AlternateAmount2.EnteredCurrencyAmount		= each.DistributionAmount.AlternateAmount2.EnteredCurrencyAmount * LocalPaymentPercent
											LocalDistributionAmount.AlternateAmount3.EnteredCurrencyAmount		= each.DistributionAmount.AlternateAmount3.EnteredCurrencyAmount * LocalPaymentPercent
											LocalDistributionAmount.ToFunctionalAmount.EnteredCurrencyAmount	= each.DistributionAmount.ToFunctionalAmount.EnteredCurrencyAmount * LocalPaymentPercent
											LocalDistributionAmount.ToAlternateAmount.EnteredCurrencyAmount		= each.DistributionAmount.ToAlternateAmount.EnteredCurrencyAmount * LocalPaymentPercent
											LocalDistributionAmount.ToAlternateAmount2.EnteredCurrencyAmount	= each.DistributionAmount.ToAlternateAmount2.EnteredCurrencyAmount * LocalPaymentPercent
											LocalDistributionAmount.ToAlternateAmount3.EnteredCurrencyAmount	= each.DistributionAmount.ToAlternateAmount3.EnteredCurrencyAmount * LocalPaymentPercent
											LocalDistributionAmount.ProjectAmount.EnteredCurrencyAmount			= each.DistributionAmount.ProjectAmount.EnteredCurrencyAmount * LocalPaymentPercent
											LocalDistributionAmount.ReportAmount1.EnteredCurrencyAmount			= each.DistributionAmount.ReportAmount1.EnteredCurrencyAmount * LocalPaymentPercent
											LocalDistributionAmount.ReportAmount2.EnteredCurrencyAmount			= each.DistributionAmount.ReportAmount2.EnteredCurrencyAmount * LocalPaymentPercent
											LocalDistributionAmount.ReportAmount3.EnteredCurrencyAmount			= each.DistributionAmount.ReportAmount3.EnteredCurrencyAmount * LocalPaymentPercent
											LocalDistributionAmount.ReportAmount4.EnteredCurrencyAmount			= each.DistributionAmount.ReportAmount4.EnteredCurrencyAmount * LocalPaymentPercent
											LocalDistributionAmount.ReportAmount5.EnteredCurrencyAmount			= each.DistributionAmount.ReportAmount5.EnteredCurrencyAmount * LocalPaymentPercent

											if (LocalPaymentPercent != 1)
												LocalNumberOfDecimals	= GeneralLedgerCompanyRel.AccountingEntity.FunctionalCurrency.NumberOfDecimals
												round LocalDistributionAmount.FunctionalAmount.EnteredCurrencyAmount to nearest DerivedLocalRoundTo
												LocalNumberOfDecimals	= GeneralLedgerCompanyRel.AccountingEntity.AlternateCurrency.NumberOfDecimals
												round LocalDistributionAmount.AlternateAmount.EnteredCurrencyAmount to nearest DerivedLocalRoundTo
												LocalNumberOfDecimals	= GeneralLedgerCompanyRel.AccountingEntity.AlternateCurrency2.NumberOfDecimals
												round LocalDistributionAmount.AlternateAmount2.EnteredCurrencyAmount to nearest DerivedLocalRoundTo
												LocalNumberOfDecimals	= GeneralLedgerCompanyRel.AccountingEntity.AlternateCurrency3.NumberOfDecimals
												round LocalDistributionAmount.AlternateAmount3.EnteredCurrencyAmount to nearest DerivedLocalRoundTo
												LocalNumberOfDecimals	= each.DistributionAccount.ToAccountingEntity.FunctionalCurrency.NumberOfDecimals
												round LocalDistributionAmount.ToFunctionalAmount.EnteredCurrencyAmount to nearest DerivedLocalRoundTo
												LocalNumberOfDecimals	= each.DistributionAccount.ToAccountingEntity.AlternateCurrency.NumberOfDecimals
												round LocalDistributionAmount.ToAlternateAmount.EnteredCurrencyAmount to nearest DerivedLocalRoundTo
												LocalNumberOfDecimals	= each.DistributionAccount.ToAccountingEntity.AlternateCurrency2.NumberOfDecimals
												round LocalDistributionAmount.ToAlternateAmount2.EnteredCurrencyAmount to nearest DerivedLocalRoundTo
												LocalNumberOfDecimals	= each.DistributionAccount.ToAccountingEntity.AlternateCurrency3.NumberOfDecimals
												round LocalDistributionAmount.ToAlternateAmount3.EnteredCurrencyAmount to nearest DerivedLocalRoundTo
												LocalNumberOfDecimals	= each.DistributionAccount.Project.Currency.NumberOfDecimals
												round LocalDistributionAmount.ProjectAmount.EnteredCurrencyAmount to nearest DerivedLocalRoundTo
												LocalNumberOfDecimals	= GeneralLedgerCompanyRel.FinanceEnterpriseGroup.ReportCurrencyOne.NumberOfDecimals
												round LocalDistributionAmount.ReportAmount1.EnteredCurrencyAmount to nearest DerivedLocalRoundTo
												LocalNumberOfDecimals	= GeneralLedgerCompanyRel.FinanceEnterpriseGroup.ReportCurrencyTwo.NumberOfDecimals
												round LocalDistributionAmount.ReportAmount2.EnteredCurrencyAmount to nearest DerivedLocalRoundTo
												LocalNumberOfDecimals	= GeneralLedgerCompanyRel.FinanceEnterpriseGroup.ReportCurrencyThree.NumberOfDecimals
												round LocalDistributionAmount.ReportAmount3.EnteredCurrencyAmount to nearest DerivedLocalRoundTo
												LocalNumberOfDecimals	= GeneralLedgerCompanyRel.FinanceEnterpriseGroup.ReportCurrencyFour.NumberOfDecimals
												round LocalDistributionAmount.ReportAmount4.EnteredCurrencyAmount to nearest DerivedLocalRoundTo
												LocalNumberOfDecimals	= GeneralLedgerCompanyRel.FinanceEnterpriseGroup.ReportCurrencyFive.NumberOfDecimals
												round LocalDistributionAmount.ReportAmount5.EnteredCurrencyAmount to nearest DerivedLocalRoundTo

											LocalTotalDistributionAmount.CurrencyAmount								-= LocalDistributionAmount.CurrencyAmount
											LocalTotalDistributionAmount.FunctionalAmount.EnteredCurrencyAmount		-= LocalDistributionAmount.FunctionalAmount.EnteredCurrencyAmount
											LocalTotalDistributionAmount.AlternateAmount.EnteredCurrencyAmount		-= LocalDistributionAmount.AlternateAmount.EnteredCurrencyAmount
											LocalTotalDistributionAmount.AlternateAmount2.EnteredCurrencyAmount		-= LocalDistributionAmount.AlternateAmount2.EnteredCurrencyAmount
											LocalTotalDistributionAmount.AlternateAmount3.EnteredCurrencyAmount		-= LocalDistributionAmount.AlternateAmount3.EnteredCurrencyAmount
											LocalTotalDistributionAmount.ToFunctionalAmount.EnteredCurrencyAmount	-= LocalDistributionAmount.ToFunctionalAmount.EnteredCurrencyAmount





											LocalTotalDistributionAmount.ReportAmount1.EnteredCurrencyAmount		-= LocalDistributionAmount.ReportAmount1.EnteredCurrencyAmount
											LocalTotalDistributionAmount.ReportAmount2.EnteredCurrencyAmount		-= LocalDistributionAmount.ReportAmount2.EnteredCurrencyAmount
											LocalTotalDistributionAmount.ReportAmount3.EnteredCurrencyAmount		-= LocalDistributionAmount.ReportAmount3.EnteredCurrencyAmount
											LocalTotalDistributionAmount.ReportAmount4.EnteredCurrencyAmount		-= LocalDistributionAmount.ReportAmount4.EnteredCurrencyAmount
											LocalTotalDistributionAmount.ReportAmount5.EnteredCurrencyAmount		-= LocalDistributionAmount.ReportAmount5.EnteredCurrencyAmount

											LocalCurrencyTable														= PayablesInvoice.CurrencyTable
											LocalCurrencyCalculationGroup.FinanceEnterpriseGroup					= GeneralLedgerCompanyRel.FinanceEnterpriseGroup
											LocalCurrencyCalculationGroup.ExchangeDate								= CheckDate
											LocalCurrencyCalculationGroup.FromCurrency								= CashCode.Currency
											LocalCurrencyCalculationGroup.FunctionalAmount.ToCurrency				= GeneralLedgerCompanyRel.AccountingEntity.FunctionalCurrency
											LocalCurrencyCalculationGroup.AlternateAmount.ToCurrency				= GeneralLedgerCompanyRel.AccountingEntity.AlternateCurrency
											LocalCurrencyCalculationGroup.AlternateAmount2.ToCurrency				= GeneralLedgerCompanyRel.AccountingEntity.AlternateCurrency2
											LocalCurrencyCalculationGroup.AlternateAmount3.ToCurrency				= GeneralLedgerCompanyRel.AccountingEntity.AlternateCurrency3
											LocalCurrencyCalculationGroup.ToFunctionalAmount.ToCurrency				= each.DistributionAccount.ToAccountingEntity.FunctionalCurrency
											LocalCurrencyCalculationGroup.ToAlternateAmount.ToCurrency				= each.DistributionAccount.ToAccountingEntity.AlternateCurrency
											LocalCurrencyCalculationGroup.ToAlternateAmount2.ToCurrency				= each.DistributionAccount.ToAccountingEntity.AlternateCurrency2
											LocalCurrencyCalculationGroup.ToAlternateAmount3.ToCurrency				= each.DistributionAccount.ToAccountingEntity.AlternateCurrency3
											LocalCurrencyCalculationGroup.ReportAmount1.ToCurrency					= GeneralLedgerCompanyRel.FinanceEnterpriseGroup.ReportCurrencyOne
											LocalCurrencyCalculationGroup.ReportAmount2.ToCurrency					= GeneralLedgerCompanyRel.FinanceEnterpriseGroup.ReportCurrencyTwo
											LocalCurrencyCalculationGroup.ReportAmount3.ToCurrency					= GeneralLedgerCompanyRel.FinanceEnterpriseGroup.ReportCurrencyThree
											LocalCurrencyCalculationGroup.ReportAmount4.ToCurrency					= GeneralLedgerCompanyRel.FinanceEnterpriseGroup.ReportCurrencyFour
											LocalCurrencyCalculationGroup.ReportAmount5.ToCurrency					= GeneralLedgerCompanyRel.FinanceEnterpriseGroup.ReportCurrencyFive

											LocalExchangeDate										= CheckDate
											LocalCashCodePaymentExchange.TransactionAmount			= each.DistributionAmount.CurrencyAmount * LocalPaymentPercent
											LocalCashCodePaymentExchange.BaseAmount.ToCurrency		= CashCode.Currency
											if (PrmVoidDate entered)	
												LocalCashCodePaymentExchange.BaseAmount.EnteredCurrencyRate	= (BankCheckAmount / NetPaymentAmount.CurrencyAmount)
											else
												if (InvoiceCurrency = CashRequirementsResult.InvoiceCurrency
												and CashCode 		= CashRequirementsResult.CashCode
												and CashRequirementsResult.OverridePaymentRate entered)
													LocalCashCodePaymentExchange.BaseAmount.EnteredCurrencyRate = CashRequirementsResult.OverridePaymentRate 
											LocalDistPaymentAmount									= LocalCashCodePaymentExchange.BaseAmount.OutputCurrencyAmount
											LocalCurrencyCalculationGroup.CurrencyAmount			= LocalDistPaymentAmount
											LocalCashCodePaymentAmount.CurrencyAmount	    		= LocalDistPaymentAmount
											LocalCashCodePaymentAmount.FunctionalAmount.EnteredCurrencyAmount	= LocalCurrencyCalculationGroup.FunctionalAmount.OutputCurrencyAmount
											LocalCashCodePaymentAmount.FunctionalAmount.EnteredCurrencyRate		= LocalCurrencyCalculationGroup.FunctionalAmount.OutputCurrencyRate
											if (GeneralLedgerCompanyRel.AccountingEntity.AlternateCurrency entered)
												LocalCashCodePaymentAmount.AlternateAmount.EnteredCurrencyAmount   = LocalCurrencyCalculationGroup.AlternateAmount.OutputCurrencyAmount
												LocalCashCodePaymentAmount.AlternateAmount.EnteredCurrencyRate   	= LocalCurrencyCalculationGroup.AlternateAmount.OutputCurrencyRate
											if (GeneralLedgerCompanyRel.AccountingEntity.AlternateCurrency2 entered)
												LocalCashCodePaymentAmount.AlternateAmount2.EnteredCurrencyAmount  = LocalCurrencyCalculationGroup.AlternateAmount2.OutputCurrencyAmount
												LocalCashCodePaymentAmount.AlternateAmount2.EnteredCurrencyRate   	= LocalCurrencyCalculationGroup.AlternateAmount2.OutputCurrencyRate
											if (GeneralLedgerCompanyRel.AccountingEntity.AlternateCurrency3 entered)
												LocalCashCodePaymentAmount.AlternateAmount3.EnteredCurrencyAmount	= LocalCurrencyCalculationGroup.AlternateAmount3.OutputCurrencyAmount
												LocalCashCodePaymentAmount.AlternateAmount3.EnteredCurrencyRate	= LocalCurrencyCalculationGroup.AlternateAmount3.OutputCurrencyRate
											if (GeneralLedgerCompanyRel.AccountingEntity != each.DistributionAccount.ToAccountingEntity)
												LocalCashCodePaymentAmount.ToFunctionalAmount.EnteredCurrencyAmount  		= LocalCurrencyCalculationGroup.ToFunctionalAmount.OutputCurrencyAmount
												LocalCashCodePaymentAmount.ToFunctionalAmount.EnteredCurrencyRate   		= LocalCurrencyCalculationGroup.ToFunctionalAmount.OutputCurrencyRate
												if (each.DistributionAccount.ToAccountingEntity.AlternateCurrency entered)
													LocalCashCodePaymentAmount.ToAlternateAmount.EnteredCurrencyAmount  	= LocalCurrencyCalculationGroup.ToAlternateAmount.OutputCurrencyAmount
													LocalCashCodePaymentAmount.ToAlternateAmount.EnteredCurrencyRate   	= LocalCurrencyCalculationGroup.ToAlternateAmount.OutputCurrencyRate
												if (each.DistributionAccount.ToAccountingEntity.AlternateCurrency2 entered)
													LocalCashCodePaymentAmount.ToAlternateAmount2.EnteredCurrencyAmount  	= LocalCurrencyCalculationGroup.ToAlternateAmount2.OutputCurrencyAmount
													LocalCashCodePaymentAmount.ToAlternateAmount2.EnteredCurrencyRate   	= LocalCurrencyCalculationGroup.ToAlternateAmount2.OutputCurrencyRate
												if (each.DistributionAccount.ToAccountingEntity.AlternateCurrency3 entered)
													LocalCashCodePaymentAmount.ToAlternateAmount3.EnteredCurrencyAmount	= LocalCurrencyCalculationGroup.ToAlternateAmount3.OutputCurrencyAmount
													LocalCashCodePaymentAmount.ToAlternateAmount3.EnteredCurrencyRate		= LocalCurrencyCalculationGroup.ToAlternateAmount3.OutputCurrencyRate
											if (each.DistributionAccount.Project entered)
												LocalCashCodePaymentAmount.ProjectAmount.EnteredCurrencyAmount		= LocalCurrencyCalculationGroup.ProjectAmount.OutputCurrencyAmount
												LocalCashCodePaymentAmount.ProjectAmount.EnteredCurrencyRate		= LocalCurrencyCalculationGroup.ProjectAmount.OutputCurrencyRate
											if (GeneralLedgerCompanyRel.FinanceEnterpriseGroup.ReportCurrencyOne entered)
												LocalCashCodePaymentAmount.ReportAmount1.EnteredCurrencyAmount		= LocalCurrencyCalculationGroup.ReportAmount1.OutputCurrencyAmount
												LocalCashCodePaymentAmount.ReportAmount1.EnteredCurrencyRate   	= LocalCurrencyCalculationGroup.ReportAmount1.OutputCurrencyRate
											if (GeneralLedgerCompanyRel.FinanceEnterpriseGroup.ReportCurrencyTwo entered)
												LocalCashCodePaymentAmount.ReportAmount2.EnteredCurrencyAmount 	= LocalCurrencyCalculationGroup.ReportAmount2.OutputCurrencyAmount
												LocalCashCodePaymentAmount.ReportAmount2.EnteredCurrencyRate 		= LocalCurrencyCalculationGroup.ReportAmount2.OutputCurrencyRate
											if (GeneralLedgerCompanyRel.FinanceEnterpriseGroup.ReportCurrencyThree entered)
												LocalCashCodePaymentAmount.ReportAmount3.EnteredCurrencyAmount		= LocalCurrencyCalculationGroup.ReportAmount3.OutputCurrencyAmount
												LocalCashCodePaymentAmount.ReportAmount3.EnteredCurrencyRate		= LocalCurrencyCalculationGroup.ReportAmount3.OutputCurrencyRate
											if (GeneralLedgerCompanyRel.FinanceEnterpriseGroup.ReportCurrencyFour entered)
												LocalCashCodePaymentAmount.ReportAmount4.EnteredCurrencyAmount		= LocalCurrencyCalculationGroup.ReportAmount4.OutputCurrencyAmount
												LocalCashCodePaymentAmount.ReportAmount4.EnteredCurrencyRate		= LocalCurrencyCalculationGroup.ReportAmount4.OutputCurrencyRate
											if (GeneralLedgerCompanyRel.FinanceEnterpriseGroup.ReportCurrencyFive entered)
												LocalCashCodePaymentAmount.ReportAmount5.EnteredCurrencyAmount		= LocalCurrencyCalculationGroup.ReportAmount5.OutputCurrencyAmount
												LocalCashCodePaymentAmount.ReportAmount5.EnteredCurrencyRate		= LocalCurrencyCalculationGroup.ReportAmount5.OutputCurrencyRate

											CalculateFinanceCurrencyAmountGroup.Operand	= LocalCashCodePaymentAmount
											LocalBoolean = CalculateFinanceCurrencyAmountGroup.PerformSubtraction
										else
											LocalDistributionAmount		= LocalTotalDistributionAmount

											if (GeneralLedgerCompanyRel.AccountingEntity != each.DistributionAccount.ToAccountingEntity)
												LocalDistributionAmount.ToFunctionalAmount.EnteredCurrencyAmount	= each.DistributionAmount.ToFunctionalAmount.EnteredCurrencyAmount * LocalPaymentPercent
												LocalDistributionAmount.ToAlternateAmount.EnteredCurrencyAmount		= each.DistributionAmount.ToAlternateAmount.EnteredCurrencyAmount * LocalPaymentPercent
												LocalDistributionAmount.ToAlternateAmount2.EnteredCurrencyAmount	= each.DistributionAmount.ToAlternateAmount2.EnteredCurrencyAmount * LocalPaymentPercent
												LocalDistributionAmount.ToAlternateAmount3.EnteredCurrencyAmount	= each.DistributionAmount.ToAlternateAmount3.EnteredCurrencyAmount * LocalPaymentPercent
												if (each.DistributionAccount.Project entered)
													LocalDistributionAmount.ProjectAmount.EnteredCurrencyAmount			= each.DistributionAmount.ProjectAmount.EnteredCurrencyAmount * LocalPaymentPercent
												if (LocalPaymentPercent != 1)
													LocalNumberOfDecimals	= each.DistributionAccount.ToAccountingEntity.FunctionalCurrency.NumberOfDecimals
													round LocalDistributionAmount.ToFunctionalAmount.EnteredCurrencyAmount to nearest DerivedLocalRoundTo
													LocalNumberOfDecimals	= each.DistributionAccount.ToAccountingEntity.AlternateCurrency.NumberOfDecimals
													round LocalDistributionAmount.ToAlternateAmount.EnteredCurrencyAmount to nearest DerivedLocalRoundTo
													LocalNumberOfDecimals	= each.DistributionAccount.ToAccountingEntity.AlternateCurrency2.NumberOfDecimals
													round LocalDistributionAmount.ToAlternateAmount2.EnteredCurrencyAmount to nearest DerivedLocalRoundTo
													LocalNumberOfDecimals	= each.DistributionAccount.ToAccountingEntity.AlternateCurrency3.NumberOfDecimals
													round LocalDistributionAmount.ToAlternateAmount3.EnteredCurrencyAmount to nearest DerivedLocalRoundTo
													if (each.DistributionAccount.Project entered)
														LocalNumberOfDecimals	= each.DistributionAccount.Project.Currency.NumberOfDecimals
														round LocalDistributionAmount.ProjectAmount.EnteredCurrencyAmount to nearest DerivedLocalRoundTo

											LocalCashCodePaymentAmount	= CalculateFinanceCurrencyAmountGroup.Total

											if (GeneralLedgerCompanyRel.AccountingEntity != each.DistributionAccount.ToAccountingEntity)
												LocalExchangeDate										= CheckDate
												LocalCashCodePaymentExchange.TransactionAmount			= each.DistributionAmount.CurrencyAmount * LocalPaymentPercent
												LocalCashCodePaymentExchange.BaseAmount.ToCurrency		= CashCode.Currency
												if (PrmVoidDate entered)	
													LocalCashCodePaymentExchange.BaseAmount.EnteredCurrencyRate	= (BankCheckAmount / NetPaymentAmount.CurrencyAmount)
												else
													if (InvoiceCurrency = CashRequirementsResult.InvoiceCurrency
													and CashCode 		= CashRequirementsResult.CashCode
													and CashRequirementsResult.OverridePaymentRate entered)
														LocalCashCodePaymentExchange.BaseAmount.EnteredCurrencyRate = CashRequirementsResult.OverridePaymentRate 
												LocalDistPaymentAmount									= LocalCashCodePaymentExchange.BaseAmount.OutputCurrencyAmount
												LocalCurrencyCalculationGroup.CurrencyAmount			= LocalDistPaymentAmount
												LocalCashCodePaymentAmount.CurrencyAmount	    		= LocalDistPaymentAmount
												LocalCashCodePaymentAmount.ToFunctionalAmount.EnteredCurrencyAmount  	= LocalCurrencyCalculationGroup.ToFunctionalAmount.OutputCurrencyAmount
												LocalCashCodePaymentAmount.ToFunctionalAmount.EnteredCurrencyRate   	= LocalCurrencyCalculationGroup.ToFunctionalAmount.OutputCurrencyRate
												if (each.DistributionAccount.ToAccountingEntity.AlternateCurrency entered)
													LocalCashCodePaymentAmount.ToAlternateAmount.EnteredCurrencyAmount  = LocalCurrencyCalculationGroup.ToAlternateAmount.OutputCurrencyAmount
													LocalCashCodePaymentAmount.ToAlternateAmount.EnteredCurrencyRate   	= LocalCurrencyCalculationGroup.ToAlternateAmount.OutputCurrencyRate
												if (each.DistributionAccount.ToAccountingEntity.AlternateCurrency2 entered)
													LocalCashCodePaymentAmount.ToAlternateAmount2.EnteredCurrencyAmount = LocalCurrencyCalculationGroup.ToAlternateAmount2.OutputCurrencyAmount
													LocalCashCodePaymentAmount.ToAlternateAmount2.EnteredCurrencyRate   = LocalCurrencyCalculationGroup.ToAlternateAmount2.OutputCurrencyRate
												if (each.DistributionAccount.ToAccountingEntity.AlternateCurrency3 entered)
													LocalCashCodePaymentAmount.ToAlternateAmount3.EnteredCurrencyAmount	= LocalCurrencyCalculationGroup.ToAlternateAmount3.OutputCurrencyAmount
													LocalCashCodePaymentAmount.ToAlternateAmount3.EnteredCurrencyRate	= LocalCurrencyCalculationGroup.ToAlternateAmount3.OutputCurrencyRate

												if (LocalPaymentPercent != 1)
													LocalNumberOfDecimals	= each.DistributionAccount.ToAccountingEntity.FunctionalCurrency.NumberOfDecimals
													round LocalCashCodePaymentAmount.ToFunctionalAmount.EnteredCurrencyAmount to nearest DerivedLocalRoundTo
													LocalNumberOfDecimals	= each.DistributionAccount.ToAccountingEntity.AlternateCurrency.NumberOfDecimals
													round LocalCashCodePaymentAmount.ToAlternateAmount.EnteredCurrencyAmount to nearest DerivedLocalRoundTo
													LocalNumberOfDecimals	= each.DistributionAccount.ToAccountingEntity.AlternateCurrency2.NumberOfDecimals
													round LocalCashCodePaymentAmount.ToAlternateAmount2.EnteredCurrencyAmount to nearest DerivedLocalRoundTo
													LocalNumberOfDecimals	= each.DistributionAccount.ToAccountingEntity.AlternateCurrency3.NumberOfDecimals
													round LocalCashCodePaymentAmount.ToAlternateAmount3.EnteredCurrencyAmount to nearest DerivedLocalRoundTo
													if (each.DistributionAccount.Project entered)
														LocalNumberOfDecimals	= each.DistributionAccount.Project.Currency.NumberOfDecimals
														round LocalCashCodePaymentAmount.ProjectAmount.EnteredCurrencyAmount to nearest DerivedLocalRoundTo

										NegativeFinanceCurrencyAmountGroup	= LocalDistributionAmount
										LocalBoolean = NegativeFinanceCurrencyAmountGroup.PerformCalculation
										include SetupGainLossAccountForProratedPaymentCurrencyAdjustment
										include AdjustAccrualForDifferentPaymentCurrency




								else
									include CalculateTotalPaymentAccrualAmount
									if (PrmVoidDate !entered)				
										RevaluedBaseAmount.FunctionalAmount.EnteredCurrencyAmount	= CalculateFinanceCurrencyAmountGroup.Total.FunctionalAmount.EnteredCurrencyAmount
										RevaluedBaseAmount.AlternateAmount.EnteredCurrencyAmount	= CalculateFinanceCurrencyAmountGroup.Total.AlternateAmount.EnteredCurrencyAmount
										RevaluedBaseAmount.AlternateAmount2.EnteredCurrencyAmount	= CalculateFinanceCurrencyAmountGroup.Total.AlternateAmount2.EnteredCurrencyAmount
										RevaluedBaseAmount.AlternateAmount3.EnteredCurrencyAmount	= CalculateFinanceCurrencyAmountGroup.Total.AlternateAmount3.EnteredCurrencyAmount
										RevaluedBaseAmount.ReportAmount1.EnteredCurrencyAmount		= CalculateFinanceCurrencyAmountGroup.Total.ReportAmount1.EnteredCurrencyAmount
										RevaluedBaseAmount.ReportAmount2.EnteredCurrencyAmount		= CalculateFinanceCurrencyAmountGroup.Total.ReportAmount2.EnteredCurrencyAmount
										RevaluedBaseAmount.ReportAmount3.EnteredCurrencyAmount		= CalculateFinanceCurrencyAmountGroup.Total.ReportAmount3.EnteredCurrencyAmount
										RevaluedBaseAmount.ReportAmount4.EnteredCurrencyAmount		= CalculateFinanceCurrencyAmountGroup.Total.ReportAmount4.EnteredCurrencyAmount
										RevaluedBaseAmount.ReportAmount5.EnteredCurrencyAmount		= CalculateFinanceCurrencyAmountGroup.Total.ReportAmount5.EnteredCurrencyAmount
									if (AccruedPayablesInvoiceWithholdingRel exists)
										CalculateWithholdingAmount.PayablesCompany			= Company				
										CalculateWithholdingAmount.PayablesInvoice			= PayablesInvoice
										CalculateWithholdingAmount.PayablesInvoicePayment	= PayablesInvoicePayment
										LocalBoolean										= CalculateWithholdingAmount.SummarizeAccruedWithholdingAmounts
										CalculateFinanceCurrencyAmountGroup.Operand			= CalculateWithholdingAmount.TotalWithholdingAmount       
										LocalBoolean = CalculateFinanceCurrencyAmountGroup.PerformSubtraction
									LocalCashCodePaymentAmount			= CalculateFinanceCurrencyAmountGroup.Total
									LocalDistributionAmount				= PaymentAmount
									NegativeFinanceCurrencyAmountGroup	= PaymentAmount 
									LocalBoolean = NegativeFinanceCurrencyAmountGroup.PerformCalculation
									include SetupGainLossAccountForPaymentCurrencyAdjustment
									include AdjustAccrualForDifferentPaymentCurrency
						CurrencyEvaluation		= 2 


		CreateGainLossDistribution is an Instance Action
			restricted
			Parameters
				PrmRevalueDate					is Date
				PrmDescription					is a Description
				PrmDistributionReference		is a Reference
				PrmAccrualCode					is a PayablesAccrualCode
				PrmDefaultSystemAccount			is Numeric 1
					States
						None					value is 0
						UnrealizedGainLoss		value is 1
						RealizedGainLoss		value is 2
				PrmReversal						is Numeric 1
					States
						No						value is 0
						Yes						value is 1
				PrmJournalizeGroup       		is like JournalizeGroup
				PrmAPPaymentClose				is Boolean
			Local Fields
				LocalAccountingEntity			is an AccountingEntity
				GainLossCurrency 				is a FromCurrency
				LocalBoolean					is Boolean
			Action Rules
				initialize LocalDistributionAmount
				LocalCurrencyTable											= PayablesInvoice.CurrencyTable
				LocalAccountingEntity										= GeneralLedgerCompanyRel.AccountingEntity
				GainLossCurrency											= InvoiceCurrency
				if (PrmReversal.Yes)
					LocalExchangeDate										= LastCurrencyRevaluationDate
					if (LastCurrencyRevaluationDate	= RevaluedBaseAmount.ExchangeDate)		
						LocalDistributionAmount.FunctionalAmount.EnteredCurrencyRate	= RevaluedBaseAmount.FunctionalAmount.EnteredCurrencyRate
						LocalDistributionAmount.AlternateAmount.EnteredCurrencyRate		= RevaluedBaseAmount.AlternateAmount.EnteredCurrencyRate
						LocalDistributionAmount.AlternateAmount2.EnteredCurrencyRate	= RevaluedBaseAmount.AlternateAmount2.EnteredCurrencyRate
						LocalDistributionAmount.AlternateAmount3.EnteredCurrencyRate	= RevaluedBaseAmount.AlternateAmount3.EnteredCurrencyRate
						LocalDistributionAmount.ReportAmount1.EnteredCurrencyRate		= RevaluedBaseAmount.ReportAmount1.EnteredCurrencyRate
						LocalDistributionAmount.ReportAmount2.EnteredCurrencyRate		= RevaluedBaseAmount.ReportAmount2.EnteredCurrencyRate
						LocalDistributionAmount.ReportAmount3.EnteredCurrencyRate		= RevaluedBaseAmount.ReportAmount3.EnteredCurrencyRate
						LocalDistributionAmount.ReportAmount4.EnteredCurrencyRate		= RevaluedBaseAmount.ReportAmount4.EnteredCurrencyRate
						LocalDistributionAmount.ReportAmount5.EnteredCurrencyRate		= RevaluedBaseAmount.ReportAmount5.EnteredCurrencyRate
				else
					LocalExchangeDate										= PrmRevalueDate


				LocalPayablesCompany										= Company			
				LocalAccrualCode											= PrmAccrualCode	
				if (Company.ProrateGainLossToDistributions)
					if ((PrmReversal.Yes
					or  (PrmReversal.No
					and  LastCurrencyRevaluationDate	!entered))
					and  PaymentGainLossDistributionsRel exists)	

						for each PaymentGainLossDistributionsRel
							invoke Delete each




					LocalPaymentPercent	= PaymentAmount.CurrencyAmount / DerivedInvoiceAmountDivisor 

					for each ProrateDistributionsRel
						initialize GainLossCalculation
						GainLossCalculation.DefaultSystemAccount					= PrmDefaultSystemAccount
						GainLossCalculation.AccountType								= 1
						GainLossCalculation.OrigCurrencyAmount.FunctionalAmount.EnteredCurrencyAmount	= each.DistributionAmount.FunctionalAmount.EnteredCurrencyAmount * LocalPaymentPercent
						GainLossCalculation.OrigCurrencyAmount.AlternateAmount.EnteredCurrencyAmount	= each.DistributionAmount.AlternateAmount.EnteredCurrencyAmount * LocalPaymentPercent
						GainLossCalculation.OrigCurrencyAmount.AlternateAmount2.EnteredCurrencyAmount	= each.DistributionAmount.AlternateAmount2.EnteredCurrencyAmount * LocalPaymentPercent
						GainLossCalculation.OrigCurrencyAmount.AlternateAmount3.EnteredCurrencyAmount	= each.DistributionAmount.AlternateAmount3.EnteredCurrencyAmount * LocalPaymentPercent
						GainLossCalculation.OrigCurrencyAmount.ToFunctionalAmount.EnteredCurrencyAmount	= each.DistributionAmount.ToFunctionalAmount.EnteredCurrencyAmount * LocalPaymentPercent
						GainLossCalculation.OrigCurrencyAmount.ToAlternateAmount.EnteredCurrencyAmount	= each.DistributionAmount.ToAlternateAmount.EnteredCurrencyAmount * LocalPaymentPercent
						GainLossCalculation.OrigCurrencyAmount.ToAlternateAmount2.EnteredCurrencyAmount	= each.DistributionAmount.ToAlternateAmount2.EnteredCurrencyAmount * LocalPaymentPercent
						GainLossCalculation.OrigCurrencyAmount.ToAlternateAmount3.EnteredCurrencyAmount	= each.DistributionAmount.ToAlternateAmount3.EnteredCurrencyAmount * LocalPaymentPercent
						GainLossCalculation.OrigCurrencyAmount.ProjectAmount.EnteredCurrencyAmount		= each.DistributionAmount.ProjectAmount.EnteredCurrencyAmount * LocalPaymentPercent
						GainLossCalculation.OrigCurrencyAmount.ReportAmount1.EnteredCurrencyAmount		= each.DistributionAmount.ReportAmount1.EnteredCurrencyAmount * LocalPaymentPercent
						GainLossCalculation.OrigCurrencyAmount.ReportAmount2.EnteredCurrencyAmount		= each.DistributionAmount.ReportAmount2.EnteredCurrencyAmount * LocalPaymentPercent
						GainLossCalculation.OrigCurrencyAmount.ReportAmount3.EnteredCurrencyAmount		= each.DistributionAmount.ReportAmount3.EnteredCurrencyAmount * LocalPaymentPercent
						GainLossCalculation.OrigCurrencyAmount.ReportAmount4.EnteredCurrencyAmount		= each.DistributionAmount.ReportAmount4.EnteredCurrencyAmount * LocalPaymentPercent
						GainLossCalculation.OrigCurrencyAmount.ReportAmount5.EnteredCurrencyAmount		= each.DistributionAmount.ReportAmount5.EnteredCurrencyAmount * LocalPaymentPercent

						if (LocalPaymentPercent != 1)
							LocalNumberOfDecimals	= GeneralLedgerCompanyRel.AccountingEntity.FunctionalCurrency.NumberOfDecimals
							round GainLossCalculation.OrigCurrencyAmount.FunctionalAmount.EnteredCurrencyAmount to nearest DerivedLocalRoundTo
							LocalNumberOfDecimals	= GeneralLedgerCompanyRel.AccountingEntity.AlternateCurrency.NumberOfDecimals
							round GainLossCalculation.OrigCurrencyAmount.AlternateAmount.EnteredCurrencyAmount to nearest DerivedLocalRoundTo
							LocalNumberOfDecimals	= GeneralLedgerCompanyRel.AccountingEntity.AlternateCurrency2.NumberOfDecimals
							round GainLossCalculation.OrigCurrencyAmount.AlternateAmount2.EnteredCurrencyAmount to nearest DerivedLocalRoundTo
							LocalNumberOfDecimals	= GeneralLedgerCompanyRel.AccountingEntity.AlternateCurrency3.NumberOfDecimals
							round GainLossCalculation.OrigCurrencyAmount.AlternateAmount3.EnteredCurrencyAmount to nearest DerivedLocalRoundTo
							LocalNumberOfDecimals	= each.DistributionAccount.ToAccountingEntity.FunctionalCurrency.NumberOfDecimals
							round GainLossCalculation.OrigCurrencyAmount.ToFunctionalAmount.EnteredCurrencyAmount to nearest DerivedLocalRoundTo
							LocalNumberOfDecimals	= each.DistributionAccount.ToAccountingEntity.AlternateCurrency.NumberOfDecimals
							round GainLossCalculation.OrigCurrencyAmount.ToAlternateAmount.EnteredCurrencyAmount to nearest DerivedLocalRoundTo
							LocalNumberOfDecimals	= each.DistributionAccount.ToAccountingEntity.AlternateCurrency2.NumberOfDecimals
							round GainLossCalculation.OrigCurrencyAmount.ToAlternateAmount2.EnteredCurrencyAmount to nearest DerivedLocalRoundTo
							LocalNumberOfDecimals	= each.DistributionAccount.ToAccountingEntity.AlternateCurrency3.NumberOfDecimals
							round GainLossCalculation.OrigCurrencyAmount.ToAlternateAmount3.EnteredCurrencyAmount to nearest DerivedLocalRoundTo
							LocalNumberOfDecimals	= each.DistributionAccount.Project.Currency.NumberOfDecimals
							round GainLossCalculation.OrigCurrencyAmount.ProjectAmount.EnteredCurrencyAmount to nearest DerivedLocalRoundTo
							LocalNumberOfDecimals	= GeneralLedgerCompanyRel.FinanceEnterpriseGroup.ReportCurrencyOne.NumberOfDecimals
							round GainLossCalculation.OrigCurrencyAmount.ReportAmount1.EnteredCurrencyAmount to nearest DerivedLocalRoundTo
							LocalNumberOfDecimals	= GeneralLedgerCompanyRel.FinanceEnterpriseGroup.ReportCurrencyTwo.NumberOfDecimals
							round GainLossCalculation.OrigCurrencyAmount.ReportAmount2.EnteredCurrencyAmount to nearest DerivedLocalRoundTo
							LocalNumberOfDecimals	= GeneralLedgerCompanyRel.FinanceEnterpriseGroup.ReportCurrencyThree.NumberOfDecimals
							round GainLossCalculation.OrigCurrencyAmount.ReportAmount3.EnteredCurrencyAmount to nearest DerivedLocalRoundTo
							LocalNumberOfDecimals	= GeneralLedgerCompanyRel.FinanceEnterpriseGroup.ReportCurrencyFour.NumberOfDecimals
							round GainLossCalculation.OrigCurrencyAmount.ReportAmount4.EnteredCurrencyAmount to nearest DerivedLocalRoundTo
							LocalNumberOfDecimals	= GeneralLedgerCompanyRel.FinanceEnterpriseGroup.ReportCurrencyFive.NumberOfDecimals
							round GainLossCalculation.OrigCurrencyAmount.ReportAmount5.EnteredCurrencyAmount to nearest DerivedLocalRoundTo

						GainLossCalculation.OrigCurrencyAmount.FunctionalAmount.EnteredCurrencyRate		= each.DistributionAmount.FunctionalAmount.EnteredCurrencyRate
						GainLossCalculation.OrigCurrencyAmount.AlternateAmount.EnteredCurrencyRate		= each.DistributionAmount.AlternateAmount.EnteredCurrencyRate
						GainLossCalculation.OrigCurrencyAmount.AlternateAmount2.EnteredCurrencyRate		= each.DistributionAmount.AlternateAmount2.EnteredCurrencyRate
						GainLossCalculation.OrigCurrencyAmount.AlternateAmount3.EnteredCurrencyRate		= each.DistributionAmount.AlternateAmount3.EnteredCurrencyRate
						GainLossCalculation.OrigCurrencyAmount.ToFunctionalAmount.EnteredCurrencyRate	= each.DistributionAmount.ToFunctionalAmount.EnteredCurrencyRate
						GainLossCalculation.OrigCurrencyAmount.ToAlternateAmount.EnteredCurrencyRate	= each.DistributionAmount.ToAlternateAmount.EnteredCurrencyRate
						GainLossCalculation.OrigCurrencyAmount.ToAlternateAmount2.EnteredCurrencyRate	= each.DistributionAmount.ToAlternateAmount2.EnteredCurrencyRate
						GainLossCalculation.OrigCurrencyAmount.ToAlternateAmount3.EnteredCurrencyRate	= each.DistributionAmount.ToAlternateAmount3.EnteredCurrencyRate
						GainLossCalculation.OrigCurrencyAmount.ProjectAmount.EnteredCurrencyRate		= each.DistributionAmount.ProjectAmount.EnteredCurrencyRate
						GainLossCalculation.OrigCurrencyAmount.ReportAmount1.EnteredCurrencyRate		= each.DistributionAmount.ReportAmount1.EnteredCurrencyRate
						GainLossCalculation.OrigCurrencyAmount.ReportAmount2.EnteredCurrencyRate		= each.DistributionAmount.ReportAmount2.EnteredCurrencyRate
						GainLossCalculation.OrigCurrencyAmount.ReportAmount3.EnteredCurrencyRate		= each.DistributionAmount.ReportAmount3.EnteredCurrencyRate
						GainLossCalculation.OrigCurrencyAmount.ReportAmount4.EnteredCurrencyRate		= each.DistributionAmount.ReportAmount4.EnteredCurrencyRate
						GainLossCalculation.OrigCurrencyAmount.ReportAmount5.EnteredCurrencyRate		= each.DistributionAmount.ReportAmount5.EnteredCurrencyRate

						LocalCurrencyAmount = each.DistributionAmount.CurrencyAmount * LocalPaymentPercent

						GainLossCalculation.OriginFinanceCodeBlock					= each.DistributionAccount	

						if (PrmReversal.Yes
						and LastCurrencyRevaluationDate	= RevaluedBaseAmount.ExchangeDate)		
							GainLossCalculation.NewCurrencyAmount.FunctionalAmount.EnteredCurrencyRate	= RevaluedBaseAmount.FunctionalAmount.EnteredCurrencyRate
							GainLossCalculation.NewCurrencyAmount.AlternateAmount.EnteredCurrencyRate	= RevaluedBaseAmount.AlternateAmount.EnteredCurrencyRate
							GainLossCalculation.NewCurrencyAmount.AlternateAmount2.EnteredCurrencyRate	= RevaluedBaseAmount.AlternateAmount2.EnteredCurrencyRate
							GainLossCalculation.NewCurrencyAmount.AlternateAmount3.EnteredCurrencyRate	= RevaluedBaseAmount.AlternateAmount3.EnteredCurrencyRate
							GainLossCalculation.NewCurrencyAmount.ReportAmount1.EnteredCurrencyRate		= RevaluedBaseAmount.ReportAmount1.EnteredCurrencyRate
							GainLossCalculation.NewCurrencyAmount.ReportAmount2.EnteredCurrencyRate		= RevaluedBaseAmount.ReportAmount2.EnteredCurrencyRate
							GainLossCalculation.NewCurrencyAmount.ReportAmount3.EnteredCurrencyRate		= RevaluedBaseAmount.ReportAmount3.EnteredCurrencyRate
							GainLossCalculation.NewCurrencyAmount.ReportAmount4.EnteredCurrencyRate		= RevaluedBaseAmount.ReportAmount4.EnteredCurrencyRate
							GainLossCalculation.NewCurrencyAmount.ReportAmount5.EnteredCurrencyRate		= RevaluedBaseAmount.ReportAmount5.EnteredCurrencyRate

						LocalBoolean = GainLossCalculation.DerivedCalculateAmount






















						include ProcessUnrealizedGainLossDistributions




					if (PrmReversal.No)	
						initialize RevaluedBaseAmount	
						RevaluedBaseAmount.CurrencyAmount							= PaymentAmount.CurrencyAmount		
						RevaluedBaseAmount.ExchangeDate								= PrmRevalueDate
						RevaluedBaseAmount.FunctionalAmount.EnteredCurrencyRate		= GainLossCalculation.NewCurrencyAmount.FunctionalAmount.EnteredCurrencyRate
						RevaluedBaseAmount.FunctionalAmount.EnteredCurrencyAmount	= PaymentAmount.FunctionalAmount.EnteredCurrencyAmount - LocalDistributionAmount.FunctionalAmount.EnteredCurrencyAmount
						RevaluedBaseAmount.AlternateAmount.EnteredCurrencyRate		= GainLossCalculation.NewCurrencyAmount.AlternateAmount.EnteredCurrencyRate
						RevaluedBaseAmount.AlternateAmount.EnteredCurrencyAmount	= PaymentAmount.AlternateAmount.EnteredCurrencyAmount - LocalDistributionAmount.AlternateAmount.EnteredCurrencyAmount
						RevaluedBaseAmount.AlternateAmount2.EnteredCurrencyRate		= GainLossCalculation.NewCurrencyAmount.AlternateAmount2.EnteredCurrencyRate
						RevaluedBaseAmount.AlternateAmount2.EnteredCurrencyAmount	= PaymentAmount.AlternateAmount2.EnteredCurrencyAmount - LocalDistributionAmount.AlternateAmount2.EnteredCurrencyAmount
						RevaluedBaseAmount.AlternateAmount3.EnteredCurrencyRate		= GainLossCalculation.NewCurrencyAmount.AlternateAmount3.EnteredCurrencyRate
						RevaluedBaseAmount.AlternateAmount3.EnteredCurrencyAmount	= PaymentAmount.AlternateAmount3.EnteredCurrencyAmount - LocalDistributionAmount.AlternateAmount3.EnteredCurrencyAmount
						RevaluedBaseAmount.ReportAmount1.EnteredCurrencyRate		= GainLossCalculation.NewCurrencyAmount.ReportAmount1.EnteredCurrencyRate
						RevaluedBaseAmount.ReportAmount1.EnteredCurrencyAmount		= PaymentAmount.ReportAmount1.EnteredCurrencyAmount - LocalDistributionAmount.ReportAmount1.EnteredCurrencyAmount
						RevaluedBaseAmount.ReportAmount2.EnteredCurrencyRate		= GainLossCalculation.NewCurrencyAmount.ReportAmount2.EnteredCurrencyRate
						RevaluedBaseAmount.ReportAmount2.EnteredCurrencyAmount		= PaymentAmount.ReportAmount2.EnteredCurrencyAmount - LocalDistributionAmount.ReportAmount2.EnteredCurrencyAmount
						RevaluedBaseAmount.ReportAmount3.EnteredCurrencyRate		= GainLossCalculation.NewCurrencyAmount.ReportAmount3.EnteredCurrencyRate
						RevaluedBaseAmount.ReportAmount3.EnteredCurrencyAmount		= PaymentAmount.ReportAmount3.EnteredCurrencyAmount - LocalDistributionAmount.ReportAmount3.EnteredCurrencyAmount
						RevaluedBaseAmount.ReportAmount4.EnteredCurrencyRate		= GainLossCalculation.NewCurrencyAmount.ReportAmount4.EnteredCurrencyRate
						RevaluedBaseAmount.ReportAmount4.EnteredCurrencyAmount		= PaymentAmount.ReportAmount4.EnteredCurrencyAmount - LocalDistributionAmount.ReportAmount4.EnteredCurrencyAmount
						RevaluedBaseAmount.ReportAmount5.EnteredCurrencyRate		= GainLossCalculation.NewCurrencyAmount.ReportAmount5.EnteredCurrencyRate
						RevaluedBaseAmount.ReportAmount5.EnteredCurrencyAmount		= PaymentAmount.ReportAmount5.EnteredCurrencyAmount - LocalDistributionAmount.ReportAmount5.EnteredCurrencyAmount

				else
					initialize GainLossCalculation			
					GainLossCalculation.DefaultSystemAccount					= PrmDefaultSystemAccount
					GainLossCalculation.AccountType								= 1
					GainLossCalculation.OrigCurrencyAmount.FunctionalAmount		= PaymentAmount.FunctionalAmount
					GainLossCalculation.OrigCurrencyAmount.AlternateAmount		= PaymentAmount.AlternateAmount
					GainLossCalculation.OrigCurrencyAmount.AlternateAmount2		= PaymentAmount.AlternateAmount2
					GainLossCalculation.OrigCurrencyAmount.AlternateAmount3		= PaymentAmount.AlternateAmount3
					GainLossCalculation.OrigCurrencyAmount.ToFunctionalAmount	= PaymentAmount.ToFunctionalAmount
					GainLossCalculation.OrigCurrencyAmount.ToAlternateAmount	= PaymentAmount.ToAlternateAmount
					GainLossCalculation.OrigCurrencyAmount.ToAlternateAmount2	= PaymentAmount.ToAlternateAmount2
					GainLossCalculation.OrigCurrencyAmount.ToAlternateAmount3	= PaymentAmount.ToAlternateAmount3
					GainLossCalculation.OrigCurrencyAmount.ProjectAmount		= PaymentAmount.ProjectAmount
					GainLossCalculation.OrigCurrencyAmount.ReportAmount1		= PaymentAmount.ReportAmount1
					GainLossCalculation.OrigCurrencyAmount.ReportAmount2		= PaymentAmount.ReportAmount2
					GainLossCalculation.OrigCurrencyAmount.ReportAmount3		= PaymentAmount.ReportAmount3
					GainLossCalculation.OrigCurrencyAmount.ReportAmount4		= PaymentAmount.ReportAmount4
					GainLossCalculation.OrigCurrencyAmount.ReportAmount5		= PaymentAmount.ReportAmount5
					GainLossCalculation.OriginFinanceCodeBlock					= PayablesAccrualCodeDetailRel.DistributionAccount	

					LocalCurrencyAmount = PaymentAmount.CurrencyAmount

					if (PrmReversal.Yes
					and LastCurrencyRevaluationDate	= RevaluedBaseAmount.ExchangeDate)	
						GainLossCalculation.NewCurrencyAmount.FunctionalAmount.EnteredCurrencyRate	= RevaluedBaseAmount.FunctionalAmount.EnteredCurrencyRate
						GainLossCalculation.NewCurrencyAmount.AlternateAmount.EnteredCurrencyRate	= RevaluedBaseAmount.AlternateAmount.EnteredCurrencyRate
						GainLossCalculation.NewCurrencyAmount.AlternateAmount2.EnteredCurrencyRate	= RevaluedBaseAmount.AlternateAmount2.EnteredCurrencyRate
						GainLossCalculation.NewCurrencyAmount.AlternateAmount3.EnteredCurrencyRate	= RevaluedBaseAmount.AlternateAmount3.EnteredCurrencyRate
						GainLossCalculation.NewCurrencyAmount.ReportAmount1.EnteredCurrencyRate		= RevaluedBaseAmount.ReportAmount1.EnteredCurrencyRate
						GainLossCalculation.NewCurrencyAmount.ReportAmount2.EnteredCurrencyRate		= RevaluedBaseAmount.ReportAmount2.EnteredCurrencyRate
						GainLossCalculation.NewCurrencyAmount.ReportAmount3.EnteredCurrencyRate		= RevaluedBaseAmount.ReportAmount3.EnteredCurrencyRate
						GainLossCalculation.NewCurrencyAmount.ReportAmount4.EnteredCurrencyRate		= RevaluedBaseAmount.ReportAmount4.EnteredCurrencyRate
						GainLossCalculation.NewCurrencyAmount.ReportAmount5.EnteredCurrencyRate		= RevaluedBaseAmount.ReportAmount5.EnteredCurrencyRate

					LocalBoolean = GainLossCalculation.DerivedCalculateAmount

					include ProcessUnrealizedGainLossDistributions

					if (PrmReversal.No)		
						initialize RevaluedBaseAmount	
						RevaluedBaseAmount.CurrencyAmount							= PaymentAmount.CurrencyAmount		
						RevaluedBaseAmount.ExchangeDate								= PrmRevalueDate
						RevaluedBaseAmount.FunctionalAmount.EnteredCurrencyRate		= GainLossCalculation.NewCurrencyAmount.FunctionalAmount.EnteredCurrencyRate
						RevaluedBaseAmount.FunctionalAmount.EnteredCurrencyAmount	= GainLossCalculation.NewCurrencyAmount.FunctionalAmount.EnteredCurrencyAmount
						RevaluedBaseAmount.AlternateAmount.EnteredCurrencyRate		= GainLossCalculation.NewCurrencyAmount.AlternateAmount.EnteredCurrencyRate
						RevaluedBaseAmount.AlternateAmount.EnteredCurrencyAmount	= GainLossCalculation.NewCurrencyAmount.AlternateAmount.EnteredCurrencyAmount
						RevaluedBaseAmount.AlternateAmount2.EnteredCurrencyRate		= GainLossCalculation.NewCurrencyAmount.AlternateAmount2.EnteredCurrencyRate
						RevaluedBaseAmount.AlternateAmount2.EnteredCurrencyAmount	= GainLossCalculation.NewCurrencyAmount.AlternateAmount2.EnteredCurrencyAmount
						RevaluedBaseAmount.AlternateAmount3.EnteredCurrencyRate		= GainLossCalculation.NewCurrencyAmount.AlternateAmount3.EnteredCurrencyRate
						RevaluedBaseAmount.AlternateAmount3.EnteredCurrencyAmount	= GainLossCalculation.NewCurrencyAmount.AlternateAmount3.EnteredCurrencyAmount
						RevaluedBaseAmount.ReportAmount1.EnteredCurrencyRate		= GainLossCalculation.NewCurrencyAmount.ReportAmount1.EnteredCurrencyRate
						RevaluedBaseAmount.ReportAmount1.EnteredCurrencyAmount		= GainLossCalculation.NewCurrencyAmount.ReportAmount1.EnteredCurrencyAmount
						RevaluedBaseAmount.ReportAmount2.EnteredCurrencyRate		= GainLossCalculation.NewCurrencyAmount.ReportAmount2.EnteredCurrencyRate
						RevaluedBaseAmount.ReportAmount2.EnteredCurrencyAmount		= GainLossCalculation.NewCurrencyAmount.ReportAmount2.EnteredCurrencyAmount
						RevaluedBaseAmount.ReportAmount3.EnteredCurrencyRate		= GainLossCalculation.NewCurrencyAmount.ReportAmount3.EnteredCurrencyRate
						RevaluedBaseAmount.ReportAmount3.EnteredCurrencyAmount		= GainLossCalculation.NewCurrencyAmount.ReportAmount3.EnteredCurrencyAmount
						RevaluedBaseAmount.ReportAmount4.EnteredCurrencyRate		= GainLossCalculation.NewCurrencyAmount.ReportAmount4.EnteredCurrencyRate
						RevaluedBaseAmount.ReportAmount4.EnteredCurrencyAmount		= GainLossCalculation.NewCurrencyAmount.ReportAmount4.EnteredCurrencyAmount
						RevaluedBaseAmount.ReportAmount5.EnteredCurrencyRate		= GainLossCalculation.NewCurrencyAmount.ReportAmount5.EnteredCurrencyRate
						RevaluedBaseAmount.ReportAmount5.EnteredCurrencyAmount		= GainLossCalculation.NewCurrencyAmount.ReportAmount5.EnteredCurrencyAmount

				LocalPayablesCompany	= Company
				LocalAccrualCode		= PrmAccrualCode

				invoke CreateGainLossFromBatchNoParms PayablesInvoiceDistribution
					invoked.Company					= Company
					invoked.PayablesInvoice			= PayablesInvoice
					invoked.DistributionType 		= "G"
					invoked.PostingOption			= "S"
					invoked.Status					= 1
					invoked.DistributionDate		= PrmRevalueDate
					invoked.Description				= PrmDescription
					invoked.DistributionReference	= PrmDistributionReference
					invoked.AccrualCode				= PrmAccrualCode
					invoked.GLTransactionAmount						= blank
					invoked.DistributionAmount.ExchangeDate		    = LocalExchangeDate 
					invoked.DistributionAmount.CurrencyAmount		= blank
					invoked.DistributionAmount.FunctionalAmount	    = LocalDistributionAmount.FunctionalAmount
					invoked.DistributionAmount.AlternateAmount      = LocalDistributionAmount.AlternateAmount
					invoked.DistributionAmount.AlternateAmount2     = LocalDistributionAmount.AlternateAmount2
					invoked.DistributionAmount.AlternateAmount3		= LocalDistributionAmount.AlternateAmount3
					invoked.DistributionAmount.ToFunctionalAmount	= LocalDistributionAmount.ToFunctionalAmount
					invoked.DistributionAmount.ToAlternateAmount    = LocalDistributionAmount.ToAlternateAmount
					invoked.DistributionAmount.ToAlternateAmount2   = LocalDistributionAmount.ToAlternateAmount2
					invoked.DistributionAmount.ToAlternateAmount3	= LocalDistributionAmount.ToAlternateAmount3
					invoked.DistributionAmount.ProjectAmount		= LocalDistributionAmount.ProjectAmount
					invoked.DistributionAmount.ReportAmount1     	= LocalDistributionAmount.ReportAmount1
					invoked.DistributionAmount.ReportAmount2      	= LocalDistributionAmount.ReportAmount2
					invoked.DistributionAmount.ReportAmount3		= LocalDistributionAmount.ReportAmount3
					invoked.DistributionAmount.ReportAmount4		= LocalDistributionAmount.ReportAmount4
					invoked.DistributionAmount.ReportAmount5		= LocalDistributionAmount.ReportAmount5
					invoked.GLFinanceCodeBlock		= PayablesAccrualCodeDetailRel.DistributionAccount
					invoked.GLTTransactionCodeBlock	= PayablesAccrualCodeDetailRel.DistributionAccount
					invoked.DistributionAccount		= PayablesAccrualCodeDetailRel.DistributionAccount
					invoked.GLTJournalizeGroup		= PrmJournalizeGroup
					if (!PrmAPPaymentClose)
						invoked.GLTGeneralLedgerEvent	= "AU"

		CommitTransaction is an Instance Action	
			restricted
			Action Rules
				commit transaction

		MatchRelease is an Update Action  
			restricted
			default label is untranslatable
			Action Rules
				TransientBypassRevalueEdit = true
				LocalCurrencyTable	= PayablesInvoice.CurrencyTable
				if ((Vendor.TermsCalculation.UseLatestReceiptDate
				or   Vendor.TermsCalculation.UseShipToArriveDate
				or   Vendor.TermsCalculation.UseEarliestReceiptDate)
				or  ((Company.TermsCalculation.UseLatestReceiptDate
				or   Company.TermsCalculation.UseShipToArriveDate)
				and  Vendor.TermsCalculation not entered))
					DiscountPercent				= PayablesInvoice.DiscountPercent
					DiscountDate				= PayablesInvoice.DiscountDate
					DueDate						= PayablesInvoice.DueDate

				if  (PayablesInvoice.MatchCompanyRel.DiscountRecognition.Match
				and	 DiscountAmount.CurrencyAmount entered)
					MatchDiscountTaken	= "Y"

				include ReleaseEditRules
			Exit Rules
				if (LocalStatus = 1)
					make transition to Released
				else
				if (LocalStatus = 4)
					make transition to ManuallyPaid
					if (PayablesInvoice exists) 
						invoke TriggerPayableTracker CashLedgerPayablesPaymentRel







								
		AdjustPaymentCurrencyAmounts is an Instance Action
			restricted
			Parameters
				PrmCurrencyAmountAdjustment	is a PayablesCurrencyGroupTotals
			Action Rules
				PaymentAmount.FunctionalAmount.EnteredCurrencyAmount 	+= PrmCurrencyAmountAdjustment.FunctionalTotal
				PaymentAmount.AlternateAmount.EnteredCurrencyAmount 	+= PrmCurrencyAmountAdjustment.AlternateTotal
				PaymentAmount.AlternateAmount2.EnteredCurrencyAmount 	+= PrmCurrencyAmountAdjustment.AlternateTotal2
				PaymentAmount.AlternateAmount3.EnteredCurrencyAmount 	+= PrmCurrencyAmountAdjustment.AlternateTotal3
				PaymentAmount.ToFunctionalAmount.EnteredCurrencyAmount 	+= PrmCurrencyAmountAdjustment.ToFunctionalTotal
				PaymentAmount.ToAlternateAmount.EnteredCurrencyAmount 	+= PrmCurrencyAmountAdjustment.ToAlternateTotal
				PaymentAmount.ToAlternateAmount2.EnteredCurrencyAmount 	+= PrmCurrencyAmountAdjustment.ToAlternateTotal2
				PaymentAmount.ToAlternateAmount3.EnteredCurrencyAmount 	+= PrmCurrencyAmountAdjustment.ToAlternateTotal3
				PaymentAmount.ProjectAmount.EnteredCurrencyAmount	 	+= PrmCurrencyAmountAdjustment.ProjectTotal
				PaymentAmount.ReportAmount1.EnteredCurrencyAmount	 	+= PrmCurrencyAmountAdjustment.ReportTotal1
				PaymentAmount.ReportAmount2.EnteredCurrencyAmount	 	+= PrmCurrencyAmountAdjustment.ReportTotal2
				PaymentAmount.ReportAmount3.EnteredCurrencyAmount	 	+= PrmCurrencyAmountAdjustment.ReportTotal3
				PaymentAmount.ReportAmount4.EnteredCurrencyAmount		+= PrmCurrencyAmountAdjustment.ReportTotal4
				PaymentAmount.ReportAmount5.EnteredCurrencyAmount		+= PrmCurrencyAmountAdjustment.ReportTotal5


		UpdatePayablesInvoiceWithholdingForVoid is an Instance Action
			default label is untranslatable
			restricted
			Action Rules
				invoke UpdateVoidDate PayablesInvoiceWithholdingForVoidRel
					invoked.PrmVoidSequence	= PayablesInvoicePayment.VoidSequence
					invoked.PrmVoidDate		= VoidDate

		UpdateIntercompanyBillingSettlementDetailLineVoidSequence is an Instance Action 
			default label is untranslatable
			restricted
			Parameters
				PrmSettlementID		is AlphaUpper 22
			Action Rules
				if (PayablesInvoice.InvoiceSource.IntercompanyBilling
				and PayablesInvoice.IntercompanyBillingDocumentRel.AllowSelectDistributionSet)
					LocalSettlementID = PrmSettlementID
					invoke UpdateVoidSequence LocalSettlementIDSettlementDetailLineRel
						invoked.PrmVoidSequence = PayablesInvoicePayment.VoidSequence

		ProratePayablesFundApplyDistributions is an Instance Action 
			default label is untranslatable
			restricted
			Local Fields
				LocalAdjustmentPercent 		is a Percent
				LocalInvoiceOpenAmount 		is an InternationalAmount
				LocalSumInvoiceFundApplied 	is an InternationalAmount
				LocalApplyAmount 			is an InternationalAmount
				LocalSumApplyAmounts 		is an InternationalAmount
				LocalNewAmount 				is an InternationalAmount
				LocalOldAmount 				is an InternationalAmount
				LocalPreviousFundApplied	is an InternationalAmount
				LocalApplicationAmount		is an InternationalAmount
				LocalDifference				is an InternationalAmount
				LocalSumRoundAmounts 		is an InternationalAmount
				LocalAmountToAdd			is an InternationalAmount
				LocalDistributionOpenAmount	is an InternationalAmount
			Action Rules

				invoke Delete PayablesFundApplyDistribution set

				LocalSumInvoiceFundApplied 	= 0
				for each ICBProrateDistributionsRel
					LocalSumInvoiceFundApplied += each.FundAppliedAmount

				LocalInvoiceOpenAmount 	= PayablesInvoice.InvoiceAmount.CurrencyAmount - LocalSumInvoiceFundApplied

				if (LocalInvoiceOpenAmount = PaymentAmount.CurrencyAmount)
					for each ICBProrateDistributionsRel
						if ((each.DistributionAmount.CurrencyAmount - each.FundAppliedAmount) != 0)
							invoke Create PayablesFundApplyDistribution
								invoked.Company									= Company
								invoked.PayablesInvoice 						= PayablesInvoice
								invoked.PayablesInvoicePayment.PaymentSequence	= PayablesInvoicePayment.PaymentSequence
								invoked.PayablesInvoicePayment.VoidSequence		= PayablesInvoicePayment.VoidSequence
								invoked.OriginalPayablesInvoiceDistribution		= each.PayablesInvoiceDistribution
								invoked.DistributionAccount						= each.GLFinanceCodeBlock
								invoked.OriginalCurrency						= each.InvoiceCurrency
								invoked.DistributionAmount.CurrencyAmount 		= each.DistributionAmount.CurrencyAmount - each.FundAppliedAmount
								invoked.DistributionAmount.ExchangeDate			= each.DistributionAmount.ExchangeDate
							invoke AddToFundAppliedAmount each
                    			invoked.PrmAmount = each.DistributionAmount.CurrencyAmount - each.FundAppliedAmount
				else
					for each ICBProrateDistributionsRel

						LocalAdjustmentPercent 	= ((each.DistributionAmount.CurrencyAmount - each.FundAppliedAmount) / LocalInvoiceOpenAmount)
						LocalApplyAmount		= PaymentAmount.CurrencyAmount * LocalAdjustmentPercent
						
						round LocalApplyAmount to nearest DerivedRoundTo

						if (LocalApplyAmount > 0
						and LocalApplyAmount > (each.DistributionAmount.CurrencyAmount - each.FundAppliedAmount))
							LocalApplyAmount	= each.DistributionAmount.CurrencyAmount - each.FundAppliedAmount
						
						if (LocalApplyAmount < 0
						and LocalApplyAmount < (each.DistributionAmount.CurrencyAmount - each.FundAppliedAmount))
							LocalApplyAmount	= each.DistributionAmount.CurrencyAmount - each.FundAppliedAmount

						if (LocalApplyAmount != 0)
							LocalSumApplyAmounts += LocalApplyAmount
							invoke Create PayablesFundApplyDistribution
								invoked.Company									= Company
								invoked.PayablesInvoice 						= PayablesInvoice
								invoked.PayablesInvoicePayment.PaymentSequence	= PayablesInvoicePayment.PaymentSequence
								invoked.PayablesInvoicePayment.VoidSequence		= PayablesInvoicePayment.VoidSequence
								invoked.OriginalPayablesInvoiceDistribution		= each.PayablesInvoiceDistribution
								invoked.DistributionAccount						= each.GLFinanceCodeBlock
								invoked.OriginalCurrency						= each.InvoiceCurrency
								invoked.DistributionAmount.CurrencyAmount 		= LocalApplyAmount
								invoked.DistributionAmount.ExchangeDate			= each.DistributionAmount.ExchangeDate
							invoke AddToFundAppliedAmount each
                    			invoked.PrmAmount = LocalApplyAmount

					LocalApplicationAmount = PaymentAmount.CurrencyAmount

					if (LocalSumApplyAmounts != LocalApplicationAmount)

						LocalDifference = LocalApplicationAmount - LocalSumApplyAmounts	
						
						for each PayablesFundApplyDistributionDescendingRel

							LocalDistributionOpenAmount  = each.PayablesInvoiceDistributionRel.DistributionAmount.CurrencyAmount - each.PayablesInvoiceDistributionRel.FundAppliedAmount
							
							if (each.PayablesInvoiceDistributionRel.DistributionAmount.CurrencyAmount > 0)
								if (LocalDifference <= LocalDistributionOpenAmount)
									LocalAmountToAdd	 = LocalDifference
									LocalDifference		 = 0
								else
									LocalAmountToAdd	 = LocalDistributionOpenAmount
									LocalDifference		-= LocalDistributionOpenAmount
							else
								if (LocalDifference >= LocalDistributionOpenAmount)
									LocalAmountToAdd	 = LocalDifference
									LocalDifference		 = 0
								else
									LocalAmountToAdd	 = LocalDistributionOpenAmount
									LocalDifference		-= LocalDistributionOpenAmount

							LocalOldAmount	= each.DistributionAmount.CurrencyAmount
							LocalNewAmount 	= LocalOldAmount + LocalAmountToAdd

							if (LocalNewAmount = 0)
								invoke Delete each
								invoke AddToFundAppliedAmount each.PayablesInvoiceDistributionRel
									invoked.PrmAmount = LocalOldAmount * -1
							else
								invoke Update each
									invoked.DistributionAmount.CurrencyAmount = LocalNewAmount
								invoke AddToFundAppliedAmount each.PayablesInvoiceDistributionRel
									invoked.PrmAmount = LocalNewAmount - LocalOldAmount

							if (LocalDifference = 0)
								end for each

		UpdateTransactionNumber is an Instance Action
			restricted
			Parameters
				PrmTransactionNumber	is like TransactionNumber
			Action Rules
				TransactionNumber	= PrmTransactionNumber

		UpdateSnapshotFields is an Instance Action
			restricted
			Action Rules
				Vendor				= PayablesInvoice.Vendor
				Invoice				= PayablesInvoice.Invoice
				Suffix				= PayablesInvoice.Suffix
				CancelSequence		= PayablesInvoice.CancelSequence
				if (Status < 2)			
					PayGroup		= PayablesInvoice.PayGroup	

		UpdatePayablesCube is a Set Action
			restricted
			completion message is "UpdatePayablesCubeSubmitted"
			Parameters
				PrmUpdatePayablesInvoicePayment		is Boolean

			Action Rules
				Set Rules
					Exit Rules
						if (PrmUpdatePayablesInvoicePayment)
							invoke Refresh PayablesInvoicePaymentAnalyticCubeRel in background


		RecheckForErrors is a Set Action
			default label is untranslatable
			restricted
			completion message is "RecheckForErrorsSubmitted"
			Parameters
				PrmVendorGroup				is a VendorGroup
				PrmPayGroup					is a PayGroup
				PrmCashRequirementsResult	is a CashRequirementsResult
			Instance Selection
				where (VendorGroup 						= PrmVendorGroup
				and    PayGroup							= PrmPayGroup
				and    CashRequirementsResult			= PrmCashRequirementsResult)





			Action Rules
				Instance Rules
					Skip = false

					include CreateCashRequirementsErrors

					if (Skip)
						invoke RemoveFromCashRequirementsResultBatch

		SelectPayablesPayments is a Set Action
			restricted
			completion message is "SelectPayablesPaymentsSubmitted"
			Parameters
				PrmVendorGroup				is a VendorGroup
				PrmPayGroup					is a PayGroup
				PrmCashRequirementsResult	is a CashRequirementsResult

			Local Fields
				UpdateThisPayment		is Boolean

			Accumulators
				VendorSpendAmount

			Instance Selection
				where (Company.VendorGroup	= PrmVendorGroup
				and    PayGroup				= PrmPayGroup
				and    Status.Released
				and    CancelSequence not entered
				and   (PrmCashRequirementsResult.ProcessGroup	not entered
				or     ProcessGroup								= PrmCashRequirementsResult.ProcessGroup
				or    (PrmCashRequirementsResult.ProcessGroup	= "NONE"
				and    ProcessGroup								not entered))
				and   (Company = PrmCashRequirementsResult.Company
				or     PrmCashRequirementsResult.Company not entered)
				and   (ProcessLevel = PrmCashRequirementsResult.ProcessLevel
				or     PrmCashRequirementsResult.ProcessLevel not entered)
				and   (BankTransactionCode = PrmCashRequirementsResult.PaymentCode
				or     PrmCashRequirementsResult.PaymentCode not entered)
				and   (PayImmediately													
				or    (PrmCashRequirementsResult.PayImmediatelyOnly.No
				and   (DueDate <= PrmCashRequirementsResult.PayThroughDate				
				or    (DiscountDate >= PrmCashRequirementsResult.PaymentDate
				and    DiscountDate <= PrmCashRequirementsResult.PayThroughDate)
				or     PayablesInvoice.DiscountDate2 entered
				or     PayablesInvoice.DiscountDate3 entered)))							
				and    PayablesInvoice.BackgroundProcessing not entered
				and   (TemporaryHold not entered
				or     TemporaryHold.ApprovedByEngine))									

			Sort Order
				CashCode
				Company
				PaymentPriority
				VendorGroup
				PayVendor
				RemitToCode
				BankTransactionCode
				InvoiceCurrency
				InvoiceGroup
				PayablesInvoice
				PayablesInvoicePayment

			Action Rules
				Empty Set Rules

				Set Rules

				Instance Rules
					Skip = false

					include MatchRules

					if (!Skip)
						include MatchProcessingRules

						if (!Skip)
							if (VendorGroup !entered)		
								VendorGroup 			= PrmCashRequirementsResult.VendorGroup
							CashRequirementsResult	= PrmCashRequirementsResult

							if ((PayablesInvoice.InvoiceType.CreditMemo
							or   PayablesInvoice.InvoiceType.PrepaymentCredit)
							and  InvoiceGroup entered)
								if (PrmCashRequirementsResult.InvoiceGroupPaymentsExistRel not exists)
									invoke Create CashRequirementsError
										invoked.VendorGroup 				= PrmVendorGroup
										invoked.PayGroup					= PrmPayGroup
										invoked.CashRequirementsResult		= PrmCashRequirementsResult
										invoked.ErrorMessage				= InvoiceGroupPaymentsExistMessage
										invoked.ErrorNumber					= CashRequirementsErrorNumber.InvoiceGroupPaymentsExist

							if (BankTransactionCode.ElectronicPrenotification
							and ((RemitToCode.ACHPrenotification.NotPrenotified
							or    RemitToCode.ACHPrenotification.Prenotified)
							or   (Vendor.ACHPrenotification.NotPrenotified
							or    Vendor.ACHPrenotification.Prenotified)))
								invoke Create CashRequirementsProcessing
									invoked.VendorGroup 				= VendorGroup
									invoked.PayGroup					= PayGroup
									invoked.CashRequirementsResult		= CashRequirementsResult
									invoked.PayablesCompany				= Company
									invoked.PayablesInvoice				= PayablesInvoice
									invoked.PayablesInvoicePayment		= PayablesInvoicePayment
									invoked.OldBankTransactionCode		= BankTransactionCode
									invoked.NewBankTransactionCode		= BankTransactionCode.ElectronicAlternateTransactionCode.BankTransactionCode

						if (UpdateThisPayment)
							include SetLocalCurrencyAmountFields
							include SetNetPaymentCurrencyAmounts
							include SetDiscountCurrencyAmounts
							include SetWithholdingCurrencyAmounts

							invoke FastUpdate

						if (!Skip)
							Status = Status.SelectedForPayment      

		ResetDiscountFromHeader is an Update Action
			restricted
			bypass field rules
			Action Rules
				if (PayablesInvoice.DiscountDate entered)
					if (PayablesInvoice.AllowableAmountForDiscount entered)

						LocalDiscountAmt				= PayablesInvoice.AllowableAmountForDiscount * DiscountPercent	
						DiscountAmount.CurrencyAmount	= LocalDiscountAmt 												
						if (DiscountAmount.ExchangeDate not entered)
							if (CheckDate entered)
								DiscountAmount.ExchangeDate = CheckDate
							else
								DiscountAmount.ExchangeDate	= PayablesInvoice.InvoiceAmount.ExchangeDate
						DiscountAmount.KeepRateOnly			= true
						DiscountAmount.FunctionalAmount.EnteredCurrencyRate		= PayablesInvoice.DiscountAmount.FunctionalAmount.EnteredCurrencyRate
						DiscountAmount.FunctionalAmount.EnteredCurrencyAmount	= PayablesInvoice.DiscountAmount.FunctionalAmount.EnteredCurrencyAmount
					else
						DiscountAmount											= PayablesInvoice.DiscountAmount
				else
					initialize DiscountAmount.CurrencyAmount
					initialize DiscountAmount.ExchangeDate
					initialize DiscountPercent

		UnselectPayablesPayments is a Set Action
			restricted
			completion message is "UnselectPayablesPaymentsSubmitted"
			Parameters
				PrmVendorGroup				is a VendorGroup
				PrmPayGroup					is a PayGroup
				PrmCashRequirementsResult	is like CashRequirementsResult
				PrmCancelDate				is Date		
			Local Fields
				LocalBoolean				is Boolean
			Instance Selection
				where (VendorGroup 				= PrmVendorGroup
				and    PayGroup					= PrmPayGroup
				and    CashRequirementsResult	= PrmCashRequirementsResult
				and    (Status.Released
				or     Status.SelectedForPayment))
			Action Rules
				Instance Rules

					if (CashRequirementsProcessingRelExists)
						BankTransactionCode = first CashRequirementsProcessingRel.OldBankTransactionCode
						invoke Purge first CashRequirementsProcessingRel

					if (Vendor.ValidateCertificationAmount	
					and !OnHold)
						invoke FastUpdate first ValidateVendorCertificationRel
							invoked.CurrentSpendAmount -= NetPaymentAmount.CurrencyAmount

					CashRequirementsResult		= blank
					if (OnHold)
						invoke TakeOffHold

					if (!DerivedSplitInvoice)
						invoke ResetDiscountFromHeader
							invoked.DiscountDate					= PayablesInvoice.DiscountDate
							invoked.DiscountPercent					= PayablesInvoice.DiscountPercent
							invoked.DiscountAmount.CurrencyAmount	= PayablesInvoice.DiscountAmount.CurrencyAmount
							invoked.DiscountAmount.KeepRateOnly		= true
							invoked.DiscountAmount.ExchangeDate		= PayablesInvoice.InvoiceAmount.ExchangeDate

					if (Vendor.IncomeWithholding
					and Company.GlobalWithholding)
						CalculateWithholdingAmount.PayablesCompany			= Company
						CalculateWithholdingAmount.PayablesInvoice			= PayablesInvoice
						CalculateWithholdingAmount.PayablesInvoicePayment	= PayablesInvoicePayment
						LocalBoolean										= CalculateWithholdingAmount.RemoveWithholding

					initialize TransactionIDNumber
					initialize BankCheckAmount
					initialize CheckDate
					initialize NetPaymentAmount								
					initialize WithholdingAmount							
					initialize BaseWithholdingAmount						
					initialize SecondaryWithholdingBaseAmount1				
					initialize SecondaryWithholdingBaseAmount2				
					initialize SecondaryWithholdingBaseAmount3				
					initialize SecondaryWithholdingTransactionAmount1		
					initialize SecondaryWithholdingTransactionAmount2		
					initialize SecondaryWithholdingTransactionAmount3		
					initialize SecondaryWithholdingPercent1					
					initialize SecondaryWithholdingPercent2					
					initialize SecondaryWithholdingPercent3					
					DiscountLost				= false
					Status						= Status.Released

					if (PayablesInvoice.InvoiceSource.DebtorCreditMemo)		
						for each ExpenseDistributionsRel
							LocalLikeAccountingEntity	= each.Description
							invoke UpdateAmountPaid VendorDebtByAccountingEntityRel
								invoked.PrmAmountPaid			= each.DistributionAmount.CurrencyAmount
						if (PayablesInvoice.IsValidForNonIDMCancel)
							invoke Released.Cancel PayablesInvoice
								invoked.subject					= "CancelInvoice"
								invoked.reason code				= reason code
								invoked.action comment			= "Cancel due to reset parameters"
								invoked.InvoiceCancelDate		= PrmCancelDate
						else
							invoke Released.IDMCancel PayablesInvoice
								invoked.PrmInvoiceCancelDate	= PrmCancelDate
								invoked.PrmReasonCode			= reason code
								invoked.PrmComment				= "Cancel due to reset parameters"

		SetCreditPaymentHold is a Set Action
			restricted
			completion message is "SetCreditPaymentHoldSubmitted"
			Parameters
				PrmVendorGroup				is a VendorGroup
				PrmPayGroup					is a PayGroup
				PrmCashRequirementsResult	is a CashRequirementsResult
				PrmPayVendor				is a Vendor
				PrmCashCode					is a CashCode

				PrmBankTransactionCode		is a BankTransactionCode	
				PrmInvoiceGroup				is a PayablesInvoiceGroup	
				PrmRemitToCode				is like VendorLocation
				PrmPaymentPriority			is like PaymentPriority
				PrmInvoiceCurrency			is like FromCurrency
				PrmVendorPaymentCurrency	is a Currency
			Instance Selection
				where (VendorGroup 				= PrmVendorGroup
				and    PayGroup					= PrmPayGroup
				and    CashRequirementsResult	= PrmCashRequirementsResult
				and    PayVendor				= PrmPayVendor
				and    CashCode					= PrmCashCode
				and    !IsOnHold
				and    !SeparatePayment

				and	   BankTransactionCode		= PrmBankTransactionCode	
				and    InvoiceGroup				= PrmInvoiceGroup
				and    RemitToCode				= PrmRemitToCode
				and    PaymentPriority			= PrmPaymentPriority
				and    InvoiceCurrency			= PrmInvoiceCurrency
				and    VendorPaymentCurrency	= PrmVendorPaymentCurrency)
			Action Rules
				Instance Rules
					invoke RestrictedPutOnHold
						invoked.InvoiceHoldCode = PrmVendorGroup.CreditBalanceHoldCode

		SetCreditPaymentHoldByCompany is a Set Action
			restricted
			completion message is "SetCreditPaymentHoldByCompanySubmitted"
			Parameters
				PrmVendorGroup				is a VendorGroup
				PrmPayGroup					is a PayGroup
				PrmCashRequirementsResult	is a CashRequirementsResult
				PrmPayVendor				is a Vendor
				PrmCashCode					is a CashCode
				PrmCompany					is like PayablesCompany

				PrmBankTransactionCode		is a BankTransactionCode	
				PrmRemitToCode				is like VendorLocation
				PrmPaymentPriority			is like PaymentPriority
				PrmInvoiceCurrency			is like FromCurrency
				PrmVendorPaymentCurrency	is a Currency
			Instance Selection
				where (VendorGroup 				= PrmVendorGroup
				and    PayGroup					= PrmPayGroup
				and    CashRequirementsResult	= PrmCashRequirementsResult
				and    PayVendor				= PrmPayVendor
				and    Company					= PrmCompany
				and    CashCode					= PrmCashCode
				and    !IsOnHold
				and    !SeparatePayment

				and	   BankTransactionCode		= PrmBankTransactionCode	
				and    RemitToCode				= PrmRemitToCode
				and    PaymentPriority			= PrmPaymentPriority
				and    InvoiceCurrency			= PrmInvoiceCurrency
				and    VendorPaymentCurrency	= PrmVendorPaymentCurrency)
			Action Rules
				Instance Rules
					invoke RestrictedPutOnHold
						invoked.InvoiceHoldCode = PrmVendorGroup.CreditBalanceHoldCode

		SelectSeparatePaymentCreditPayments is a Set Action
			restricted
			completion message is "SelectSeparatePaymentCreditPaymentsSubmitted"
			Parameters
				PrmVendorGroup				is a VendorGroup
				PrmPayGroup					is a PayGroup
				PrmCashRequirementsResult	is a CashRequirementsResult


			Instance Selection
				where (VendorGroup 				= PrmVendorGroup
				and    PayGroup					= PrmPayGroup
				and    CashRequirementsResult	= PrmCashRequirementsResult
				and    !IsOnHold
				and    SeparatePayment)



			Sort Order
				CashCode
				Company
				PaymentPriority
				VendorGroup
				PayVendor
				RemitToCode
				BankTransactionCode
				InvoiceCurrency
				InvoiceGroup
				PayablesInvoice
				PayablesInvoicePayment

			Action Rules

				Instance Rules
					if (NetPaymentAmount.CurrencyAmount < 0
					or (NetPaymentAmount.CurrencyAmount = 0
					and !PayVendor.VendorClass.ZeroPaymentAllowed))
						invoke RestrictedPutOnHold
							invoked.InvoiceHoldCode = PrmVendorGroup.CreditBalanceHoldCode

		SelectCreditPayments is a Set Action
			restricted
			completion message is "SelectCreditPaymentsSubmitted"
			Parameters
				PrmVendorGroup				is a VendorGroup
				PrmPayGroup					is a PayGroup
				PrmCashRequirementsResult	is a CashRequirementsResult

				PrmBackgroundGroup			is AlphaUpper up to 200




  			Accumulators
				TotalPaymentAmount
				TotalPaymentAmountBankAccountCurrency
				TotalVendorPaymentAmount

			Instance Selection
				where (VendorGroup 				= PrmVendorGroup
				and    PayGroup					= PrmPayGroup
				and    CashRequirementsResult	= PrmCashRequirementsResult
				and    !IsOnHold
				and    !SeparatePayment)



			Sort Order
				CashCode
				PaymentPriority
				VendorGroup
				PayVendor
				RemitToCode
				BankTransactionCode
				InvoiceCurrency
				VendorPaymentCurrency
				InvoiceGroup
				Company
				PayablesInvoice
				PayablesInvoicePayment

			Action Rules
				InvoiceGroup Set Rules

					Exit Rules
						if (TotalPaymentAmount < 0
						or (TotalPaymentAmount = 0
						and !PayVendor.VendorClass.ZeroPaymentAllowed))
							invoke SetCreditPaymentHold PayablesInvoicePayment in background group(PrmBackgroundGroup)
								invoked.PrmVendorGroup 				= PrmVendorGroup
								invoked.PrmPayGroup					= PrmPayGroup
								invoked.PrmCashRequirementsResult 	= PrmCashRequirementsResult
								invoked.PrmPayVendor				= PayVendor
								invoked.PrmRemitToCode				= RemitToCode
								invoked.PrmCashCode					= CashCode
								invoked.PrmInvoiceGroup				= InvoiceGroup
								invoked.PrmPaymentPriority			= PaymentPriority

								invoked.PrmBankTransactionCode		= BankTransactionCode		
								invoked.PrmInvoiceCurrency			= InvoiceCurrency
								invoked.PrmVendorPaymentCurrency	= VendorPaymentCurrency

				Instance Rules
					TotalPaymentAmount						+= NetPaymentAmount.CurrencyAmount
					TotalPaymentAmountBankAccountCurrency	+= BankCheckAmount
					TotalVendorPaymentAmount				+= NetVendorPaymentAmount

		SelectCreditPaymentsByCompany is a Set Action
			restricted
			completion message is "SelectCreditPaymentsSubmitted"
			Parameters
				PrmVendorGroup				is a VendorGroup
				PrmPayGroup					is a PayGroup
				PrmCashRequirementsResult	is a CashRequirementsResult

				PrmBackgroundGroup			is AlphaUpper up to 200




  			Accumulators
				TotalPaymentAmount
				TotalPaymentAmountBankAccountCurrency
				TotalVendorPaymentAmount

			Instance Selection
				where (VendorGroup 				= PrmVendorGroup
				and    PayGroup					= PrmPayGroup
				and    CashRequirementsResult	= PrmCashRequirementsResult
				and    !IsOnHold
				and    !SeparatePayment)



			Sort Order
				CashCode
				PaymentPriority
				VendorGroup
				PayVendor
				RemitToCode
				BankTransactionCode
				InvoiceCurrency
				VendorPaymentCurrency
				Company
				InvoiceGroup
				PayablesInvoice
				PayablesInvoicePayment

			Action Rules
				Company Set Rules

					Exit Rules
						if (TotalPaymentAmount < 0
						or (TotalPaymentAmount = 0
						and !PayVendor.VendorClass.ZeroPaymentAllowed))
							invoke SetCreditPaymentHoldByCompany PayablesInvoicePayment in background group(PrmBackgroundGroup)
								invoked.PrmVendorGroup 				= PrmVendorGroup
								invoked.PrmPayGroup					= PrmPayGroup
								invoked.PrmCashRequirementsResult 	= PrmCashRequirementsResult
								invoked.PrmPayVendor				= PayVendor
								invoked.PrmCashCode					= CashCode
								invoked.PrmCompany					= Company

								invoked.PrmBankTransactionCode		= BankTransactionCode		
								invoked.PrmPaymentPriority			= PaymentPriority
								invoked.PrmRemitToCode				= RemitToCode
								invoked.PrmInvoiceCurrency			= InvoiceCurrency
								invoked.PrmVendorPaymentCurrency	= VendorPaymentCurrency

				Instance Rules
					TotalPaymentAmount						+= NetPaymentAmount.CurrencyAmount
					TotalPaymentAmountBankAccountCurrency	+= BankCheckAmount
					TotalVendorPaymentAmount				+= NetVendorPaymentAmount


		PutVeryLargePaymentsOnHold is a Set Action
			restricted
			completion message is "PutVeryLargePaymentsOnHoldSubmitted"
			Parameters
				PrmVendorGroup				is a VendorGroup
				PrmPayGroup					is a PayGroup
				PrmCashRequirementsResult	is a CashRequirementsResult


			Instance Selection
				where (VendorGroup 						= PrmVendorGroup
				and    PayGroup							= PrmPayGroup
				and    CashRequirementsResult			= PrmCashRequirementsResult
				and    NetPaymentAmount.CurrencyAmount  > 99999999.99
				and    !IsOnHold)
			Action Rules
				Instance Rules
					if ((PrmCashRequirementsResult.AddendaOption.Yes				
					and (BankTransactionCodeRel.PaymentOutputOption.ElectronicFile	
					or	 BankTransactionCodeRel.PaymentOutputOption.Swift
					or   BankTransactionCodeRel.PaymentOutputOption.WireTransfer))
					or  ((BankTransactionCodeRel.PaymentOutputOption.ElectronicFile
					or	  BankTransactionCodeRel.PaymentOutputOption.Swift
					or    BankTransactionCodeRel.PaymentOutputOption.WireTransfer)
					and (CashPaymentFormatRel.PaymentFormat.AchFile
					or   CashPaymentFormatRel.PaymentFormat.BacsFile)))	
						invoke RestrictedPutOnHold
							invoked.InvoiceHoldCode = PrmVendorGroup.MaximumPaymentHoldCode


		SelectMaxPayments is a Set Action
			restricted
			completion message is "SelectMaxPaymentsSubmitted"
			Parameters
				PrmVendorGroup				is a VendorGroup
				PrmPayGroup					is a PayGroup
				PrmCashRequirementsResult	is a CashRequirementsResult
				PrmMaxCashOutlay			is an InternationalAmount
				PrmAddendaOption			is AlphaUpper size 1
					States
						Yes value is "Y"
						No  value is "N"
				PrmEditPaymentCode			is a BankTransactionCode

			Local Fields
				PutOnHold					is Boolean

  			Accumulators
				TotalPaymentAmount

			Instance Selection
				where (VendorGroup 				= PrmVendorGroup
				and    PayGroup					= PrmPayGroup
				and    CashRequirementsResult	= PrmCashRequirementsResult
				and    !IsOnHold)

			Sort Order
				CashCode
				Company
				PaymentPriority
				DueDate		
				VendorGroup
				PayVendor
				RemitToCode
				BankTransactionCode
				InvoiceCurrency
				InvoiceGroup
				PayablesInvoice
				PayablesInvoicePayment

			Action Rules
				Instance Rules

					PutOnHold = false

					if ((BankTransactionCodeRel.PaymentOutputOption.ElectronicFile	
					or	 BankTransactionCodeRel.PaymentOutputOption.Swift
					or   BankTransactionCodeRel.PaymentOutputOption.WireTransfer)
					and (CashPaymentFormatRel.PaymentFormat.AchFile
					or   CashPaymentFormatRel.PaymentFormat.BacsFile)
					and PaymentAmount.CurrencyAmount > 99999999.99)
						if (PrmCashRequirementsResult.AddendaOption.Yes)
							if (PrmCashRequirementsResult.EditPaymentCode not entered
							or  PrmCashRequirementsResult.EditPaymentCode = BankTransactionCode)
								PutOnHold = true

					if (!PutOnHold)
						if (DiscountLost)
							NetPaymentAmount.CurrencyAmount = PaymentAmount.CurrencyAmount - WithholdingAmount - FATCATransactionIncomeAmount - LocalTranSecWth1 - LocalTranSecWth2 - LocalTranSecWth3
						else
							NetPaymentAmount.CurrencyAmount = PaymentAmount.CurrencyAmount - DiscountAmount.CurrencyAmount - WithholdingAmount - FATCATransactionIncomeAmount - LocalTranSecWth1 - LocalTranSecWth2 - LocalTranSecWth3

						include SetNetPaymentCurrencyAmounts

						if (TotalPaymentAmount + BaseNetPayment > PrmMaxCashOutlay) 
							PutOnHold = true
						else
							TotalPaymentAmount	+= BaseNetPayment

					if (PutOnHold)
						invoke RestrictedPutOnHold
							invoked.InvoiceHoldCode = PrmVendorGroup.MaximumPaymentHoldCode

		CreateVendorOffsetCreditMemoByInvoiceGroup is a Set Action		
			default label is untranslatable
			restricted
			completion message is "CreateVendorOffsetSubmitted"
			Parameters
				PrmVendorGroup				is a VendorGroup
				PrmPayGroup					is a PayGroup
				PrmCashRequirementsResult	is a CashRequirementsResult
				PrmPaymentDate				is Date
			Local Fields
				VendorDebtCreditMemo		is a PayablesInvoice view
				LocalPriority				is Numeric size 8
				LocalOldPriority			is Numeric size 8
				LocalPercentAllowed			is a Percent
				LocalMaxAmount				is an InternationalAmount
				LocalBalanceDue				is an InternationalAmount
				LocalInterceptAmount		is an InternationalAmount
				LocalTotalInterceptAmount	is an InternationalAmount
				LocalRemainingPmtAmt		is an InternationalAmount
				LocalDuplicateCount			is Numeric 5
				LocalRemitAdvice			is Alpha size up to 50
				LocalComment				is a NewCommentText
			Accumulators
				TotalPaymentAmount
			Instance Selection
				where (VendorGroup				= PrmVendorGroup
				and    PayGroup					= PrmPayGroup
				and    PayVendor.VendorHasDebt
				and    CashRequirementsResult	= PrmCashRequirementsResult
				and    !IsOnHold)

			Sort Order is ByCashCodePriorityVendorInvoiceGroup

			Action Rules
				InvoiceGroup Set Rules
					Entrance Rules

					Exit Rules
						if (TotalPaymentAmount > 0)
							if (VendorDebtRel exists)
								invoke CreateVendorOffsetCreditMemo PayablesInvoice
									assign result to VendorDebtCreditMemo
									invoked.Company								= Company
									invoked.ProcessLevel						= ProcessLevel
									invoked.Vendor								= PayVendor
									invoked.PayVendor							= PayVendor
									invoked.RemitToCode							= RemitToCode
									invoked.InvoiceType							= "C"
									invoked.InvoiceDate							= PrmPaymentDate
									invoked.DueDate								= PrmPaymentDate
									invoked.InvoiceAmount.CurrencyAmount		= "-.01"
									invoked.InvoiceCurrency						= InvoiceCurrency
									invoked.VendorPaymentCurrency				= VendorPaymentCurrency
									invoked.CashCode							= CashCode
									invoked.PayGroup							= PrmPayGroup
									invoked.BankTransactionCode					= BankTransactionCode
									invoked.APClerk								= actor.agent(Employee).Employee
									invoked.AccrualCode							= AccrualCode
									invoked.DiscountCode						= DiscountCode
									invoked.InvoiceGroup						= InvoiceGroup

								for each VendorDebtRel
									LocalPriority				= each.Priority
									if (LocalPriority != LocalOldPriority)
										LocalOldPriority = LocalPriority
										LocalRemainingPmtAmt		= (TotalPaymentAmount - LocalTotalInterceptAmount)
									if (TotalPaymentAmount - LocalTotalInterceptAmount <= 0)
										end for each
									LocalLikeAccountingEntity	= each.VendorDebt.AccountingEntity
									LocalRemitAdvice			= each.RemittanceAdvice
									LocalPercentAllowed			= each.PercentAllowed
									LocalMaxAmount				= each.MaxAmountAllowed
									LocalBalanceDue				= each.BalanceDue
									if (each.VendorHasDuplicatePriority)
										if (LocalPercentAllowed < 100%)
											LocalInterceptAmount	= (LocalRemainingPmtAmt * LocalPercentAllowed)
										else
											if (each.LastDuplicatePriority)
												LocalInterceptAmount	= (LocalRemainingPmtAmt * LocalPercentAllowed)
											else
												LocalDuplicateCount		= each.DerivedDuplicatePriorityCount
												LocalPercentAllowed		= 100% / LocalDuplicateCount
												LocalInterceptAmount	= (LocalRemainingPmtAmt * LocalPercentAllowed)
									else
										LocalInterceptAmount	= (LocalRemainingPmtAmt * LocalPercentAllowed)
									round LocalInterceptAmount to nearest DerivedRoundTo
									if (LocalMaxAmount entered
									and LocalInterceptAmount > LocalMaxAmount)
										LocalInterceptAmount = LocalMaxAmount
									if (LocalInterceptAmount > LocalBalanceDue)
										LocalInterceptAmount = LocalBalanceDue
									if (LocalInterceptAmount > TotalPaymentAmount - LocalTotalInterceptAmount)
										LocalInterceptAmount = TotalPaymentAmount - LocalTotalInterceptAmount
									invoke Create PayablesInvoiceDistribution
										invoked.Company					= Company
										invoked.Vendor					= PayVendor
										invoked.PayablesInvoice			= VendorDebtCreditMemo.PayablesInvoice
										invoked.DistributionType 		= "D"
										invoked.GLTSystem				= "AP"
										invoked.GLTGeneralLedgerEvent	= "AP"
										invoked.TransactionDate			= PrmPaymentDate
										invoked.DistributionDate		= PrmPaymentDate
										invoked.PostingOption			= PayVendor.VendorClass.PostingOption
										invoked.GLTransactionAmount 	= LocalInterceptAmount *-1
										invoked.DistributionAmount.CurrencyAmount = LocalInterceptAmount *-1
										invoked.InvoiceCurrency			= InvoiceCurrency
										invoked.GLTCurrencyCode			= InvoiceCurrency
										invoked.DistributionAccount		= each.InterceptAccount
										invoked.GLFinanceCodeBlock		= each.InterceptAccount
										invoked.Description				= LocalLikeAccountingEntity
										invoked.TransientVendorOffsetCreditMemo = true 				
									invoke UpdateAmountPaid each
										invoked.PrmAmountPaid			= LocalInterceptAmount
									LocalTotalInterceptAmount += LocalInterceptAmount
									if (LocalRemitAdvice entered)
										invoke Create PayablesInvoiceComment
											invoked.Company			= Company
											invoked.PayablesInvoice	= VendorDebtCreditMemo.PayablesInvoice
											invoked.Title			= "Remit Advice"
											invoked.Comment			= LocalRemitAdvice
											invoked.Type			= "C"

								invoke Unreleased.Update VendorDebtCreditMemo.PayablesInvoice
									invoked.InvoiceAmount.CurrencyAmount = LocalTotalInterceptAmount *-1

								invoke Unreleased.Release VendorDebtCreditMemo.PayablesInvoice

								invoke Create PayablesInvoiceComment
									invoked.Company			= Company
									invoked.PayablesInvoice	= VendorDebtCreditMemo.PayablesInvoice
									invoked.Title			= "Related Invoices"
									invoked.Comment			= "Invoices related to this payment: " + LocalComment
									invoked.Type			= "N"

								invoke FastUpdate VendorDebtCreditMemo.PayablesInvoice.first PayablesInvoicePaymentRel
									invoked.CashRequirementsResult		= PrmCashRequirementsResult

								invoke AddToCashRequirementsResult VendorDebtCreditMemo.PayablesInvoice.first PayablesInvoicePaymentRel

							initialize VendorDebtCreditMemo
							initialize LocalPriority
							initialize LocalOldPriority
							initialize LocalPercentAllowed
							initialize LocalMaxAmount
							initialize LocalBalanceDue
							initialize LocalInterceptAmount
							initialize LocalTotalInterceptAmount
							initialize LocalRemainingPmtAmt
							initialize LocalDuplicateCount
							initialize LocalRemitAdvice
							initialize LocalComment
				Instance Rules
					LocalComment		+= Invoice + "; "
					TotalPaymentAmount	+= NetPaymentAmount.CurrencyAmount

		CreateVendorOffsetCreditMemoByCompany is a Set Action		
			default label is untranslatable
			restricted
			completion message is "CreateVendorOffsetSubmitted"
			Parameters
				PrmVendorGroup				is a VendorGroup
				PrmPayGroup					is a PayGroup
				PrmCashRequirementsResult	is a CashRequirementsResult
				PrmPaymentDate				is Date
			Local Fields
				VendorDebtCreditMemo		is a PayablesInvoice view
				LocalPriority				is Numeric size 8
				LocalOldPriority			is Numeric size 8
				LocalPercentAllowed			is a Percent
				LocalMaxAmount				is an InternationalAmount
				LocalBalanceDue				is an InternationalAmount
				LocalInterceptAmount		is an InternationalAmount
				LocalTotalInterceptAmount	is an InternationalAmount
				LocalRemainingPmtAmt		is an InternationalAmount
				LocalDuplicateCount			is Numeric 5
				LocalRemitAdvice			is Alpha size up to 50
				LocalComment				is a NewCommentText
			Accumulators
				TotalPaymentAmount
			Instance Selection
				where (VendorGroup				= PrmVendorGroup
				and    PayGroup					= PrmPayGroup
				and    PayVendor.VendorHasDebt
				and    CashRequirementsResult	= PrmCashRequirementsResult
				and    !IsOnHold)

			Sort Order is ByCashCodePriorityVendorCompany

			Action Rules
				Company Set Rules
					Entrance Rules

					Exit Rules
						if (TotalPaymentAmount > 0)
							if (VendorDebtRel exists)
								invoke CreateVendorOffsetCreditMemo PayablesInvoice
									assign result to VendorDebtCreditMemo
									invoked.Company								= Company
									invoked.ProcessLevel						= ProcessLevel
									invoked.Vendor								= PayVendor
									invoked.PayVendor							= PayVendor
									invoked.RemitToCode							= RemitToCode
									invoked.InvoiceType							= "C"
									invoked.InvoiceDate							= PrmPaymentDate
									invoked.DueDate								= PrmPaymentDate
									invoked.InvoiceAmount.CurrencyAmount		= "-.01"
									invoked.InvoiceCurrency						= InvoiceCurrency
									invoked.VendorPaymentCurrency				= VendorPaymentCurrency
									invoked.CashCode							= CashCode
									invoked.PayGroup							= PrmPayGroup
									invoked.BankTransactionCode					= BankTransactionCode
									invoked.APClerk								= actor.agent(Employee).Employee
									invoked.AccrualCode							= AccrualCode
									invoked.DiscountCode						= DiscountCode

								for each VendorDebtRel
									LocalPriority				= each.Priority
									if (LocalPriority != LocalOldPriority)
										LocalOldPriority = LocalPriority
										LocalRemainingPmtAmt		= (TotalPaymentAmount - LocalTotalInterceptAmount)
									if (TotalPaymentAmount - LocalTotalInterceptAmount <= 0)
										end for each
									LocalLikeAccountingEntity	= each.VendorDebt.AccountingEntity
									LocalRemitAdvice			= each.RemittanceAdvice
									LocalPercentAllowed			= each.PercentAllowed
									LocalMaxAmount				= each.MaxAmountAllowed
									LocalBalanceDue				= each.BalanceDue
									if (each.VendorHasDuplicatePriority)
										if (LocalPercentAllowed < 100%)
											LocalInterceptAmount	= (LocalRemainingPmtAmt * LocalPercentAllowed)
										else
											if (each.LastDuplicatePriority)
												LocalInterceptAmount	= (LocalRemainingPmtAmt * LocalPercentAllowed)
											else
												LocalDuplicateCount		= each.DerivedDuplicatePriorityCount
												LocalPercentAllowed		= 100% / LocalDuplicateCount
												LocalInterceptAmount	= (LocalRemainingPmtAmt * LocalPercentAllowed)
									else
										LocalInterceptAmount	= (LocalRemainingPmtAmt * LocalPercentAllowed)
									round LocalInterceptAmount to nearest DerivedRoundTo
									if (LocalMaxAmount entered
									and LocalInterceptAmount > LocalMaxAmount)
										LocalInterceptAmount = LocalMaxAmount
									if (LocalInterceptAmount > LocalBalanceDue)
										LocalInterceptAmount = LocalBalanceDue
									if (LocalInterceptAmount > TotalPaymentAmount - LocalTotalInterceptAmount)
										LocalInterceptAmount = TotalPaymentAmount - LocalTotalInterceptAmount
									invoke Create PayablesInvoiceDistribution
										invoked.Company					= Company
										invoked.Vendor					= PayVendor
										invoked.PayablesInvoice			= VendorDebtCreditMemo.PayablesInvoice
										invoked.DistributionType 		= "D"
										invoked.GLTSystem				= "AP"
										invoked.GLTGeneralLedgerEvent	= "AP"
										invoked.TransactionDate			= PrmPaymentDate
										invoked.DistributionDate		= PrmPaymentDate
										invoked.PostingOption			= PayVendor.VendorClass.PostingOption
										invoked.GLTransactionAmount 	= LocalInterceptAmount *-1
										invoked.DistributionAmount.CurrencyAmount = LocalInterceptAmount *-1
										invoked.InvoiceCurrency			= InvoiceCurrency
										invoked.GLTCurrencyCode			= InvoiceCurrency
										invoked.DistributionAccount		= each.InterceptAccount
										invoked.GLFinanceCodeBlock		= each.InterceptAccount
										invoked.Description				= LocalLikeAccountingEntity
										invoked.TransientVendorOffsetCreditMemo = true 				
									invoke UpdateAmountPaid each
										invoked.PrmAmountPaid			= LocalInterceptAmount
									LocalTotalInterceptAmount += LocalInterceptAmount
									if (LocalRemitAdvice entered)
										invoke Create PayablesInvoiceComment
											invoked.Company			= Company
											invoked.PayablesInvoice	= VendorDebtCreditMemo.PayablesInvoice
											invoked.Title			= "Remit Advice"
											invoked.Comment			= LocalRemitAdvice
											invoked.Type			= "C"

								invoke Unreleased.Update VendorDebtCreditMemo.PayablesInvoice
									invoked.InvoiceAmount.CurrencyAmount = LocalTotalInterceptAmount *-1

								invoke Unreleased.Release VendorDebtCreditMemo.PayablesInvoice

								invoke Create PayablesInvoiceComment
									invoked.Company			= Company
									invoked.PayablesInvoice	= VendorDebtCreditMemo.PayablesInvoice
									invoked.Title			= "Related Invoices"
									invoked.Comment			= "Invoices related to this payment: " + LocalComment
									invoked.Type			= "N"
								invoke FastUpdate VendorDebtCreditMemo.PayablesInvoice.first PayablesInvoicePaymentRel
									invoked.CashRequirementsResult		= PrmCashRequirementsResult

								invoke AddToCashRequirementsResult VendorDebtCreditMemo.PayablesInvoice.first PayablesInvoicePaymentRel

							initialize VendorDebtCreditMemo
							initialize LocalPriority
							initialize LocalOldPriority
							initialize LocalPercentAllowed
							initialize LocalMaxAmount
							initialize LocalBalanceDue
							initialize LocalInterceptAmount
							initialize LocalTotalInterceptAmount
							initialize LocalRemainingPmtAmt
							initialize LocalDuplicateCount
							initialize LocalRemitAdvice
							initialize LocalComment
				Instance Rules
					LocalComment		+= Invoice + "; "
					TotalPaymentAmount	+= NetPaymentAmount.CurrencyAmount


		ProcessPayablesPaymentsByCompany is a Set Action
			restricted
			completion message is "ProcessPayablesPaymentsByCompanySubmitted"
			Parameters
				PrmVendorGroup				is a VendorGroup
				PrmPayGroup					is a PayGroup
				PrmCashRequirementsResult	is a CashRequirementsResult
				PrmBackgroundGroup			is AlphaUpper up to 200

			Local Fields
				LocalTransactionIDNumber	is a TransactionIDNumber


			Accumulators
				NumberOfPayments
				TotalPaymentAmount
				TotalBasePaymentAmount
				TotalPaymentAmountBankAccountCurrency
				TotalVendorPaymentAmount
				TotalVATSplitAmount		

			Instance Selection
				where (VendorGroup 				= PrmVendorGroup
				and    PayGroup					= PrmPayGroup
				and    CashRequirementsResult	= PrmCashRequirementsResult
				and    !OnHold
				and    (Status.Released            
				or     Status.SelectedForPayment)) 

			Sort Order is ByCashCodePriorityVendorCompany		

			Action Rules
				Company Set Rules
					Entrance Rules
						invoke IncrementTransactionIDNumber BankTransactionCode
						LocalTransactionIDNumber = BankTransactionCode.TransactionIDNumber

					Exit Rules
						include ProcessPaymentExitRules

				Instance Rules
					include ProcessPaymentInstanceRules

		ProcessPayablesPaymentsByInvoiceGroup is a Set Action
			restricted
			completion message is "ProcessPayablesPaymentsByInvoiceGroupSubmitted"
			Parameters
				PrmVendorGroup				is a VendorGroup
				PrmPayGroup					is a PayGroup
				PrmCashRequirementsResult	is a CashRequirementsResult
				PrmBackgroundGroup			is AlphaUpper up to 200

			Local Fields
				LocalTransactionIDNumber	is a TransactionIDNumber



			Accumulators
				NumberOfPayments
				TotalPaymentAmount
				TotalBasePaymentAmount
				TotalPaymentAmountBankAccountCurrency
				TotalVendorPaymentAmount
				TotalVATSplitAmount		

			Instance Selection
				where (VendorGroup 				= PrmVendorGroup
				and    PayGroup					= PrmPayGroup
				and    CashRequirementsResult	= PrmCashRequirementsResult
				and    !OnHold
				and    (Status.Released            
				or     Status.SelectedForPayment)) 

			Sort Order is ByCashCodePriorityVendorInvoiceGroup		

			Action Rules
				InvoiceGroup Set Rules
					Entrance Rules
						invoke IncrementTransactionIDNumber BankTransactionCode
						LocalTransactionIDNumber = BankTransactionCode.TransactionIDNumber

					Exit Rules
						include ProcessPaymentExitRules

				Instance Rules
					include ProcessPaymentInstanceRules

		RemoveFromCashRequirementsResult is an Instance Action
			valid when (CanRemoveFromCashRequirementsResult)
			Local Fields
				LocalBoolean				is Boolean
				LocalInvoiceCounter			is Numeric 6
			Action Rules
				if (IsAppliedToInvoice)
					confirmation required
						"PaymentHasBeenAppliedTo<first PayablesPaymentCreditMemoRel.PayablesCreditMemo.Invoice>.RemovingSelectedCreditMemo<Invoice>WillNotRemoveLinkedInvoice.ContinueToRemoveFromResults?"

				if (IsAppliedToCredit)
					confirmation required
						"PaymentHasBeenAppliedTo<first PayablesPaymentCreditMemo2Rel.PayablesCreditMemo.CreditMemoNumber>.RemovingSelectedInvoice<Invoice>WillNotRemoveLinkedCreditMemo.ContinueToRemoveFromResults?"

				invoke SetManuallyChanged CashRequirementsResult


				if (CashRequirementsProcessingRelExists)
					BankTransactionCode = first CashRequirementsProcessingRel.OldBankTransactionCode
					invoke Purge first CashRequirementsProcessingRel

				if (Vendor.IncomeWithholding
				and Company.GlobalWithholding)
					CalculateWithholdingAmount.PayablesCompany			= Company
					CalculateWithholdingAmount.PayablesInvoice			= PayablesInvoice
					CalculateWithholdingAmount.PayablesInvoicePayment	= PayablesInvoicePayment
					LocalBoolean										= CalculateWithholdingAmount.RemoveWithholding
					for each SelectedPayablesInvoicePaymentRel
						invoke InitializeWithholdingAmount each
						increment LocalInvoiceCounter
						if (LocalInvoiceCounter > 100)
							invoke CommitTransaction
							initialize LocalInvoiceCounter
					initialize LocalInvoiceCounter	
					for each SelectedPayablesInvoicePaymentRel
						invoke RecalculateWithholdingAmount each
						increment LocalInvoiceCounter
						if (LocalInvoiceCounter > 100)
							invoke CommitTransaction
							initialize LocalInvoiceCounter

				if (Vendor.ValidateCertificationAmount	
				and !OnHold)
					invoke FastUpdate first ValidateVendorCertificationRel
						invoked.CurrentSpendAmount -= NetPaymentAmount.CurrencyAmount


				initialize CashRequirementsResult
				initialize NetPaymentAmount
				initialize CheckDate
				initialize BankCheckAmount		
				initialize WithholdingAmount						
				initialize BaseWithholdingAmount					
				initialize SecondaryWithholdingBaseAmount1			
				initialize SecondaryWithholdingBaseAmount2			
				initialize SecondaryWithholdingBaseAmount3			
				initialize SecondaryWithholdingTransactionAmount1	
				initialize SecondaryWithholdingTransactionAmount2	
				initialize SecondaryWithholdingTransactionAmount3	
				initialize SecondaryWithholdingPercent1				
				initialize SecondaryWithholdingPercent2				
				initialize SecondaryWithholdingPercent3				
				
				Status = Status.Released 

		InitializeWithholdingAmount is an Instance Action
			default label is untranslatable
			restricted
			Local Fields
				LocalBoolean				is Boolean
			Action Rules
				CalculateWithholdingAmount.PayablesCompany			= Company
				CalculateWithholdingAmount.PayablesInvoice			= PayablesInvoice
				CalculateWithholdingAmount.PayablesInvoicePayment	= PayablesInvoicePayment
				LocalBoolean										= CalculateWithholdingAmount.RemoveWithholding
				initialize WithholdingAmount
				initialize BaseWithholdingAmount
				initialize NetPaymentAmount
				
				
		RecalculateWithholdingAmount is an Instance Action
			default label is untranslatable
			restricted


			Action Rules
				CalculateWithholdingAmount.PayablesCompany			= Company
				CalculateWithholdingAmount.PayablesInvoice			= PayablesInvoice
				CalculateWithholdingAmount.PayablesInvoicePayment	= PayablesInvoicePayment
				if (InvoiceCurrency = CashRequirementsResult.InvoiceCurrency
				and CashCode 		= CashRequirementsResult.CashCode
				and CashRequirementsResult.OverridePaymentRate entered)
					CalculateWithholdingAmount.PaymentExchangeRate		= CashRequirementsResult.OverridePaymentRate 
				else
					if (IsManuallyCreated)	
						CalculateWithholdingAmount.PaymentExchangeRate		=	CashLedgerPayablesPaymentRel.PaymentAmountBankAccountCurrency.EnteredCurrencyRate
					else
						LocalExchangeDate									= CheckDate
						LocalCurrencyTable									= PayablesInvoice.CurrencyTable
						LocalCashCodePaymentExchange.TransactionAmount		= PaymentAmount.CurrencyAmount
						LocalCashCodePaymentExchange.BaseAmount.ToCurrency	= CashCode.Currency
						CalculateWithholdingAmount.PaymentExchangeRate		= LocalCashCodePaymentExchange.BaseAmount.OutputCurrencyRate
				WithholdingAmount									= CalculateWithholdingAmount.WithholdingAmount

				if (DiscountLost)
					NetPaymentAmount.CurrencyAmount = PaymentAmount.CurrencyAmount - WithholdingAmount - FATCATransactionIncomeAmount - SecondaryWithholdingTransactionAmount1 - SecondaryWithholdingTransactionAmount2 - SecondaryWithholdingTransactionAmount3
				else
					NetPaymentAmount.CurrencyAmount = PaymentAmount.CurrencyAmount - DerivedDiscountAmount - WithholdingAmount - FATCATransactionIncomeAmount - SecondaryWithholdingTransactionAmount1 - SecondaryWithholdingTransactionAmount2 - SecondaryWithholdingTransactionAmount3

				if (CashCode.Currency	= InvoiceCurrency)
					BankCheckAmount												= NetPaymentAmount.CurrencyAmount
				else
					LocalExchangeDate											= CheckDate
					LocalCurrencyTable											= PayablesInvoice.CurrencyTable
					LocalCashCodePaymentExchange.TransactionAmount				= NetPaymentAmount.CurrencyAmount
					LocalCashCodePaymentExchange.BaseAmount.ToCurrency			= CashCode.Currency
					if (InvoiceCurrency = CashRequirementsResult.InvoiceCurrency
					and CashCode 		= CashRequirementsResult.CashCode
					and CashRequirementsResult.OverridePaymentRate entered)
						LocalCashCodePaymentExchange.BaseAmount.EnteredCurrencyRate = CashRequirementsResult.OverridePaymentRate 
					else	
						if (IsManuallyCreated)
							LocalCashCodePaymentExchange.BaseAmount.EnteredCurrencyRate = CashLedgerPayablesPaymentRel.PaymentAmountBankAccountCurrency.EnteredCurrencyRate
					BankCheckAmount												= LocalCashCodePaymentExchange.BaseAmount.OutputCurrencyAmount

				include SetLocalCurrencyAmountFields
				include SetNetPaymentCurrencyAmounts
				include SetWithholdingCurrencyAmounts

				invoke FastUpdate
				

		RemoveFromCashRequirementsResultBatch is an Instance Action
			restricted
			Local Fields
				LocalBoolean				is Boolean
			Action Rules

				if (CashRequirementsProcessingRelExists)
					BankTransactionCode = first CashRequirementsProcessingRel.OldBankTransactionCode
					invoke Purge first CashRequirementsProcessingRel

				if (Vendor.IncomeWithholding
				and Company.GlobalWithholding)
					CalculateWithholdingAmount.PayablesCompany			= Company
					CalculateWithholdingAmount.PayablesInvoice			= PayablesInvoice
					CalculateWithholdingAmount.PayablesInvoicePayment	= PayablesInvoicePayment
					LocalBoolean										= CalculateWithholdingAmount.RemoveWithholding

				if (Vendor.ValidateCertificationAmount	
				and !OnHold)
					invoke FastUpdate first ValidateVendorCertificationRel
						invoked.CurrentSpendAmount -= NetPaymentAmount.CurrencyAmount


				initialize CashRequirementsResult
				initialize NetPaymentAmount
				initialize CheckDate
				initialize BankCheckAmount		
				initialize WithholdingAmount						
				initialize BaseWithholdingAmount					
				initialize SecondaryWithholdingBaseAmount1			
				initialize SecondaryWithholdingBaseAmount2			
				initialize SecondaryWithholdingBaseAmount3			
				initialize SecondaryWithholdingTransactionAmount1	
				initialize SecondaryWithholdingTransactionAmount2	
				initialize SecondaryWithholdingTransactionAmount3	
				initialize SecondaryWithholdingPercent1				
				initialize SecondaryWithholdingPercent2				
				initialize SecondaryWithholdingPercent3				
				
				Status = Status.Released 

		RemoveFromCashRequirementsResultBackground is a Set Action
			restricted
			completion message is "RemoveFromCashRequirementsResultSubmitted"
			Parameters
				PrmVendorGroup				is a VendorGroup
				PrmPayGroup					is a PayGroup
				PrmCashRequirementsResult	is a CashRequirementsResult
				PrmCashRequirementsReport	is a CashRequirementsReport

			Local Fields
				LocalBoolean				is Boolean

			Set Is
				PrmVendorGroup
				PrmPayGroup
				PrmCashRequirementsResult
				PrmCashRequirementsReport

			Instance Selection
				where (VendorGroup 				= PrmVendorGroup
				and    PayGroup					= PrmPayGroup
				and    CashRequirementsResult	= PrmCashRequirementsResult
				and    CashCode					= PrmCashRequirementsReport.CashCode
				and    BankTransactionCode		= PrmCashRequirementsReport.BankTransactionCode
				and    InvoiceCurrency			= PrmCashRequirementsReport.InvoiceCurrency
				and    PayVendor				= PrmCashRequirementsReport.PayVendor
				and    RemitToCode				= PrmCashRequirementsReport.RemitToCode
				and    !OnHold)

			Action Rules
				Instance Rules

					if (CashRequirementsProcessingRelExists)
						BankTransactionCode = first CashRequirementsProcessingRel.OldBankTransactionCode
						invoke Purge first CashRequirementsProcessingRel

					if (Vendor.IncomeWithholding
					and Company.GlobalWithholding)
						CalculateWithholdingAmount.PayablesCompany			= Company
						CalculateWithholdingAmount.PayablesInvoice			= PayablesInvoice
						CalculateWithholdingAmount.PayablesInvoicePayment	= PayablesInvoicePayment
						LocalBoolean										= CalculateWithholdingAmount.RemoveWithholding

					if (Vendor.ValidateCertificationAmount	
					and !OnHold)
						invoke FastUpdate first ValidateVendorCertificationRel
							invoked.CurrentSpendAmount -= NetPaymentAmount.CurrencyAmount


					initialize CashRequirementsResult
					initialize NetPaymentAmount
					initialize CheckDate
					initialize BankCheckAmount		
					initialize WithholdingAmount						
					initialize BaseWithholdingAmount					
					initialize SecondaryWithholdingBaseAmount1			
					initialize SecondaryWithholdingBaseAmount2			
					initialize SecondaryWithholdingBaseAmount3			
					initialize SecondaryWithholdingTransactionAmount1	
					initialize SecondaryWithholdingTransactionAmount2	
					initialize SecondaryWithholdingTransactionAmount3	
					initialize SecondaryWithholdingPercent1				
					initialize SecondaryWithholdingPercent2				
					initialize SecondaryWithholdingPercent3				
					
					Status = Status.Released 

		AddToCashRequirementsResult is an Instance Action
			valid when (CanAddToCashRequirementsResult)



















			Local Fields










				UpdateThisPayment			is Boolean


				PrmVendorGroup				is a VendorGroup	
				PrmPayGroup					is a PayGroup		
				PrmCashRequirementsResult	is a CashRequirementsResult		

			Action Rules
				PrmVendorGroup				= Company.VendorGroup	
				PrmPayGroup					= PayGroup				
				if (PayablesInvoice.InvoiceSource.DebtorCreditMemo)		
					PrmCashRequirementsResult = CashRequirementsResult
				else
					if (first ValidCashRequirementsResultByProcessGroupRel exists)		
						PrmCashRequirementsResult	= first ValidCashRequirementsResultByProcessGroupRel.CashRequirementsResult
					else
						if (first ValidCashRequirementsResultRel exists)
							PrmCashRequirementsResult	= first ValidCashRequirementsResultRel.CashRequirementsResult
				constraint (PrmCashRequirementsResult entered)		
					"PayablesPaymentForInvoiceNumber<Invoice>CannotBeAddedTo_Cash_Requirements_Result.Valid_Cash_Requirements_ResultNotFound."
				if (PrmCashRequirementsResult.CashCodeGroup entered)			
					constraint (CashCode = any PrmCashRequirementsResult.CashCodeGroup.CashCodeGroupDetailsRel.CashCode)
						"CashCode<CashCode>IsNotIncludedInCashCodeGroup<PrmCashRequirementsResult.CashCodeGroup>EnteredOnCashRequirement;CannotSelect"
				if (!Status.Historical	
				and Vendor.ValidateCertificationAmount)
					constraint (ValidateVendorCertificationNotExistsRel exists)
						"Vendor<Vendor>_-_<Vendor.VendorName>IsFlaggedForValidateCertificationAmount,ButNoCertificatesExistForThisVendor"	
				if (Vendor.ValidateCertificationAmount)		
					include ManualMatchProcessingRules
					CheckDate = PrmCashRequirementsResult.PaymentDate
					if (ValidateVendorValidCertificationDaysRel exists)
						constraint ((first ValidateVendorValidCertificationDaysRel.CurrentSpendAmount + NetPaymentAmount.CurrencyAmount) < first ValidateVendorValidCertificationDaysRel.MaximumSpendAmount)	
							"InvoiceAmountOf<NetPaymentAmount.CurrencyAmount>PlusCurrentSpendAmountOf<first ValidateVendorValidCertificationDaysRel.CurrentSpendAmount>ExceedsMaxSpendAmount;<first ValidateVendorValidCertificationDaysRel.MaximumSpendAmount>ForVendorCertificationCode;<first ValidateVendorValidCertificationDaysRel.PayablesCertificationCode>"	
					else
						if (ValidateVendorCertificationRel exists)
							constraint ((first ValidateVendorCertificationRel.CurrentSpendAmount + NetPaymentAmount.CurrencyAmount) < first ValidateVendorCertificationRel.MaximumSpendAmount)	
								"InvoiceAmountOf<NetPaymentAmount.CurrencyAmount>PlusCurrentSpendAmountOf<first ValidateVendorCertificationRel.CurrentSpendAmount>ExceedsMaxSpendAmount;<first ValidateVendorCertificationRel.MaximumSpendAmount>ForVendorCertificationCode;<first ValidateVendorCertificationRel.PayablesCertificationCode>"
					initialize CheckDate
				Skip = false
				if (!PayablesInvoice.InvoiceSource.DebtorCreditMemo)		
					include ManualAddMatchRules		
					include MatchRules

				if (Skip)
					if (ConfirmAdd)
						confirmation required
							"<SkipMessage>"
						Skip = false
					else
						constraint (!Skip)
							"<SkipMessage>"

				if (!Skip)
					include MatchProcessingRules					
					if (ConfirmAdd)
						confirmation required
							"<SkipMessage>"

					if (UpdateThisPayment)
						include SetLocalCurrencyAmountFields
						include SetNetPaymentCurrencyAmounts
						include SetDiscountCurrencyAmounts
						include SetWithholdingCurrencyAmounts

						invoke FastUpdate

					if (OnHold)
						invoke TakeOffHold

					if (VendorGroup !entered)		
						VendorGroup				= PrmVendorGroup
					CashRequirementsResult	= PrmCashRequirementsResult

					invoke CheckToRemoveAlert CashRequirementsError
						invoked.PrmVendorGroup 					= PrmVendorGroup
						invoked.PrmPayGroup						= PrmPayGroup
						invoked.PrmCashRequirementsResult		= PrmCashRequirementsResult
						invoked.PrmCashCode 					= CashCode
						invoked.PrmBankTransactionCode			= BankTransactionCode
						invoked.PrmAlternateBankTransactionCode	= BankTransactionCode.ElectronicAlternateTransactionCode.BankTransactionCode

					if (CashRequirementsErrorRel exists)
						invoke Purge CashRequirementsErrorRel

					if (BankTransactionCode.ElectronicPrenotification
					and ((RemitToCode.ACHPrenotification.NotPrenotified
					or    RemitToCode.ACHPrenotification.Prenotified)
					or   (Vendor.ACHPrenotification.NotPrenotified
					or    Vendor.ACHPrenotification.Prenotified)))
						invoke Create CashRequirementsProcessing
							invoked.VendorGroup 				= VendorGroup
							invoked.PayGroup					= PayGroup
							invoked.CashRequirementsResult		= CashRequirementsResult
							invoked.PayablesCompany				= Company
							invoked.PayablesInvoice				= PayablesInvoice
							invoked.PayablesInvoicePayment		= PayablesInvoicePayment
							invoked.OldBankTransactionCode		= BankTransactionCode
							invoked.NewBankTransactionCode		= BankTransactionCode.ElectronicAlternateTransactionCode.BankTransactionCode
						BankTransactionCode = BankTransactionCode.ElectronicAlternateTransactionCode.BankTransactionCode

					if ((PayablesInvoice.InvoiceType.CreditMemo
					or   PayablesInvoice.InvoiceType.PrepaymentCredit)
					and  InvoiceGroup entered)
						if (PrmCashRequirementsResult.InvoiceGroupPaymentsExistRel not exists)
							invoke Create CashRequirementsError
								invoked.VendorGroup 				= PrmVendorGroup
								invoked.PayGroup					= PrmPayGroup
								invoked.CashRequirementsResult		= PrmCashRequirementsResult
								invoked.ErrorMessage				= InvoiceGroupPaymentsExistMessage
								invoked.ErrorNumber					= CashRequirementsErrorNumber.InvoiceGroupPaymentsExist

					invoke SetManuallyChanged PrmCashRequirementsResult

				if (!Skip)
					Status = Status.SelectedForPayment      

		SetTransactionIDNumber is an Instance Action
			restricted
			Parameters
				PrmTransactionIDNumber		is a TransactionIDNumber
			Action Rules
				TransactionIDNumber = PrmTransactionIDNumber

		SetBankTransactionCode is an Instance Action
			restricted
			Parameters
				PrmBankTransactionCode		is a BankTransactionCode
			Action Rules

				if (CashRequirementsReportRel.TotalBankCheckAmount = BankCheckAmount)
					invoke Delete CashRequirementsReportRel
				else
					invoke UpdateAmounts CashRequirementsReportRel
						invoked.PrmPaymentAmount		= PaymentAmount.CurrencyAmount
						invoked.PrmDiscountAmount		= DiscountAmount.CurrencyAmount
						invoked.PrmNetPaymentAmount		= NetPaymentAmount.CurrencyAmount
						invoked.PrmNetCheckAmount		= BankCheckAmount
						invoked.AddToAmounts			= false


				BankTransactionCode = PrmBankTransactionCode
				if (CashRequirementsReportRel not exists)
					invoke Create CashRequirementsReportRel
						invoked.TotalPaymentAmount			= PaymentAmount.CurrencyAmount
						invoked.TotalDiscountAmount			= DiscountAmount.CurrencyAmount
						invoked.TotalNetPaymentAmount		= NetPaymentAmount.CurrencyAmount
						invoked.TotalBankCheckAmount		= BankCheckAmount
				else
					invoke UpdateAmounts CashRequirementsReportRel
						invoked.PrmPaymentAmount		= PaymentAmount.CurrencyAmount
						invoked.PrmDiscountAmount		= DiscountAmount.CurrencyAmount
						invoked.PrmNetPaymentAmount		= NetPaymentAmount.CurrencyAmount
						invoked.PrmNetCheckAmount		= BankCheckAmount
						invoked.AddToAmounts			= true

		SplitACHPayments is a Set Action
			restricted
			completion message is "ProcessPaymentsSubmitted"
			Parameters
				PrmVendorGroup				is a VendorGroup
				PrmPayGroup					is a PayGroup
				PrmCashRequirementsResult	is a CashRequirementsResult
				PrmPayVendor				is a PayVendor
				PrmBankTransactionCode		is a BankTransactionCode
				PrmTransactionIDNumber		is a TransactionIDNumber

			Local Fields
				LocalTransactionIDNumber	is a TransactionIDNumber
				NewTotalPaymentAmount 		is an InternationalAmount
				LastPayablesInvoicePayment	is a PayablesInvoicePayment view

  			Accumulators
  				NumberOfPayments
				TotalPaymentAmount
				TotalBasePaymentAmount
				TotalPaymentAmountBankAccountCurrency

			Instance Selection
				where (VendorGroup 				= PrmVendorGroup
				and    PayGroup					= PrmPayGroup
				and    CashRequirementsResult	= PrmCashRequirementsResult
				and    PayVendor				= PrmPayVendor
				and    BankTransactionCode		= PrmBankTransactionCode
				and    TransactionIDNumber		= PrmTransactionIDNumber)

			Sort Order
				VendorGroup
				PayGroup
				CashRequirementsResult
				BankTransactionCode
				TransactionIDNumber
				PaymentAmount.CurrencyAmount

			Action Rules
				Set Rules
					Entrance Rules
						LocalTransactionIDNumber = PrmTransactionIDNumber

					Exit Rules
						if (TotalPaymentAmount < 0
						or (TotalPaymentAmount = 0
						and !PrmPayVendor.VendorClass.ZeroPaymentAllowed))
							RelLocalTransactionIDNumber = LocalTransactionIDNumber
							invoke RestrictedPutOnHold PaymentForTransactionIDNumberRel
								invoked.InvoiceHoldCode = PrmVendorGroup.CreditBalanceHoldCode
						else
							if (TotalPaymentAmount = 0
							and LastPayablesInvoicePayment.PayVendor.VendorClass.ZeroPaymentCode entered)
								RelLocalTransactionIDNumber = LocalTransactionIDNumber

								invoke IncrementTransactionIDNumber LastPayablesInvoicePayment.PayVendor.VendorClass.ZeroPaymentCode
								LocalTransactionIDNumber			= LastPayablesInvoicePayment.PayVendor.VendorClass.ZeroPaymentCode.TransactionIDNumber

								invoke UpdateZeroPayment PaymentForTransactionIDNumberRel
									invoked.PrmBankTransactionCode	= LastPayablesInvoicePayment.PayVendor.VendorClass.ZeroPaymentCode
									invoked.PrmTransactionIDNumber	= LocalTransactionIDNumber

								PrmBankTransactionCode				= LastPayablesInvoicePayment.PayVendor.VendorClass.ZeroPaymentCode

							invoke CreateFromBatch CashLedgerPayablesPayment
								invoked.CashManagementGroup	= PrmVendorGroup.BusinessGroup.FinanceEnterpriseGroup
								invoked.PayGroup			= PrmPayGroup
								invoked.Company				= LastPayablesInvoicePayment.DerivedCashPostingCompany 
								invoked.PaidVendor			= PrmPayVendor
								invoked.TransactionNumber	= blank
								invoked.PayablesCompanyProcessLevel.PayablesCompany				= PrmCashRequirementsResult.Company
								invoked.PayablesCompanyProcessLevel.PayablesProcessLevel		= PrmCashRequirementsResult.ProcessLevel
								invoked.VendorGroup			= PrmPayGroup.VendorGroup
								invoked.InvoiceVendor		= LastPayablesInvoicePayment.Vendor
								invoked.InvoiceVendorName	= LastPayablesInvoicePayment.Vendor.VendorName
								invoked.Status				= blank
								if (PrmCashRequirementsResult.OverrideCashCode entered)
									invoked.CashCode			= PrmCashRequirementsResult.OverrideCashCode
								else
									invoked.CashCode			= LastPayablesInvoicePayment.CashCode
								invoked.CashLedgerSourceRecord	= LastPayablesInvoicePayment.CashLedgerSourceRecord.CashLedgerPayablesPayment

								invoked.InvoiceGroup		= LastPayablesInvoicePayment.InvoiceGroup




								invoked.PayablesProcessGroup	= PrmCashRequirementsResult.ProcessGroup

								invoked.CashLedgerPayablesPayment.BankTransactionCode			= PrmBankTransactionCode
								invoked.CashLedgerPayablesPayment.TransactionIDNumber			= LocalTransactionIDNumber

								invoked.PaymentDate			= PrmCashRequirementsResult.PaymentDate
								if (LastPayablesInvoicePayment.RemitToCode	entered)								
									invoked.PaidName			= LastPayablesInvoicePayment.RemitToCode.VendorName
								else
									invoked.PaidName			= PrmPayVendor.VendorName 
								invoked.RemitToCode			= LastPayablesInvoicePayment.RemitToCode
								invoked.CheckType			= blank
								if (PayablesInvoice.HasBankInstructions)		
									invoked.TransactionData1		= PayablesInvoice.BankInstructions1
									invoked.TransactionData2		= PayablesInvoice.BankInstructions2
									invoked.TransactionData3		= PayablesInvoice.BankInstructions3
									invoked.TransactionData4		= PayablesInvoice.BankInstructions4
								else
									if (RemitToCode entered)
										invoked.TransactionData1		= RemitToCode.BankInstruction1
										invoked.TransactionData2		= RemitToCode.BankInstruction2
										invoked.TransactionData3		= RemitToCode.BankInstruction3
										invoked.TransactionData4		= RemitToCode.BankInstruction4
									else
										invoked.TransactionData1		= Vendor.BankInstructions1
										invoked.TransactionData2		= Vendor.BankInstructions2
										invoked.TransactionData3		= Vendor.BankInstructions3
										invoked.TransactionData4		= Vendor.BankInstructions4

								invoked.BasePaymentAmount.EnteredCurrencyAmount					= TotalBasePaymentAmount
								invoked.AppliedBaseAmount.TransactionAmount						= TotalBasePaymentAmount

								invoked.PaymentAmount											= TotalPaymentAmount
								invoked.PaidAmountInvoiceCurrency								= TotalPaymentAmount

								invoked.PaymentAmountBankAccountCurrency.EnteredCurrencyAmount				= TotalPaymentAmountBankAccountCurrency
								invoked.AppliedAmountBankAccountCurrency.BaseAmount.EnteredCurrencyAmount	= TotalPaymentAmountBankAccountCurrency

								invoked.VendorGroup 											= PrmCashRequirementsResult.VendorGroup
								invoked.CashRequirementsResult									= PrmCashRequirementsResult

				Instance Rules
					if (PaymentAmount.CurrencyAmount < 0)
						for each PayablesInvoicePaymentDescendingAmountRel 
							if (NumberOfPayments < 9999
							and TotalPaymentAmount < 0)
								TotalPaymentAmount += each.PaymentAmount.CurrencyAmount
								NumberOfPayments += 1
								invoke SetTransactionIDNumber each
									invoked.PrmTransactionIDNumber	= LocalTransactionIDNumber

					NewTotalPaymentAmount = TotalPaymentAmount + PaymentAmount.CurrencyAmount
					if (NumberOfPayments = 9999
					or NewTotalPaymentAmount > 99999999.99)
						if (TotalPaymentAmount = 0
						and LastPayablesInvoicePayment.PayVendor.VendorClass.ZeroPaymentCode entered)
							RelLocalTransactionIDNumber = LocalTransactionIDNumber

							invoke IncrementTransactionIDNumber LastPayablesInvoicePayment.PayVendor.VendorClass.ZeroPaymentCode
							LocalTransactionIDNumber			= LastPayablesInvoicePayment.PayVendor.VendorClass.ZeroPaymentCode.TransactionIDNumber

							invoke UpdateZeroPayment PaymentForTransactionIDNumberRel
								invoked.PrmBankTransactionCode	= LastPayablesInvoicePayment.PayVendor.VendorClass.ZeroPaymentCode
								invoked.PrmTransactionIDNumber	= LocalTransactionIDNumber

							BankTransactionCode					= LastPayablesInvoicePayment.PayVendor.VendorClass.ZeroPaymentCode

						invoke CreateFromBatch CashLedgerPayablesPayment
							invoked.CashManagementGroup	= PrmVendorGroup.BusinessGroup.FinanceEnterpriseGroup
							invoked.PayGroup			= PrmPayGroup
							invoked.Company				= LastPayablesInvoicePayment.DerivedCashPostingCompany 
							invoked.PaidVendor			= PrmPayVendor
							invoked.TransactionNumber	= blank
							invoked.PayablesCompanyProcessLevel.PayablesCompany				= PrmCashRequirementsResult.Company
							invoked.PayablesCompanyProcessLevel.PayablesProcessLevel		= PrmCashRequirementsResult.ProcessLevel
							invoked.VendorGroup			= PrmPayGroup.VendorGroup
							invoked.InvoiceVendor		= LastPayablesInvoicePayment.Vendor
							invoked.InvoiceVendorName	= LastPayablesInvoicePayment.Vendor.VendorName
							invoked.Status				= blank
							if (PrmCashRequirementsResult.OverrideCashCode entered)
								invoked.CashCode			= PrmCashRequirementsResult.OverrideCashCode
							else
								invoked.CashCode			= LastPayablesInvoicePayment.CashCode
							invoked.CashLedgerSourceRecord	= LastPayablesInvoicePayment.CashLedgerSourceRecord.CashLedgerPayablesPayment

							invoked.InvoiceGroup		= LastPayablesInvoicePayment.InvoiceGroup




							invoked.PayablesProcessGroup	= PrmCashRequirementsResult.ProcessGroup

							invoked.CashLedgerPayablesPayment.BankTransactionCode			= LastPayablesInvoicePayment.BankTransactionCode
							invoked.CashLedgerPayablesPayment.TransactionIDNumber			= LocalTransactionIDNumber

							invoked.PaymentDate			= PrmCashRequirementsResult.PaymentDate
							if (LastPayablesInvoicePayment.RemitToCode	entered)								
								invoked.PaidName			= LastPayablesInvoicePayment.RemitToCode.VendorName
							else
								invoked.PaidName			= PrmPayVendor.VendorName  
							invoked.RemitToCode			= LastPayablesInvoicePayment.RemitToCode
							invoked.CheckType			= blank
							if (PayablesInvoice.HasBankInstructions)		
								invoked.TransactionData1		= PayablesInvoice.BankInstructions1
								invoked.TransactionData2		= PayablesInvoice.BankInstructions2
								invoked.TransactionData3		= PayablesInvoice.BankInstructions3
								invoked.TransactionData4		= PayablesInvoice.BankInstructions4
							else
								if (RemitToCode entered)
									invoked.TransactionData1		= RemitToCode.BankInstruction1
									invoked.TransactionData2		= RemitToCode.BankInstruction2
									invoked.TransactionData3		= RemitToCode.BankInstruction3
									invoked.TransactionData4		= RemitToCode.BankInstruction4
								else
									invoked.TransactionData1		= Vendor.BankInstructions1
									invoked.TransactionData2		= Vendor.BankInstructions2
									invoked.TransactionData3		= Vendor.BankInstructions3
									invoked.TransactionData4		= Vendor.BankInstructions4

							invoked.BasePaymentAmount.EnteredCurrencyAmount					= TotalBasePaymentAmount
							invoked.AppliedBaseAmount.TransactionAmount						= TotalBasePaymentAmount

							invoked.PaymentAmount											= TotalPaymentAmount
							invoked.PaidAmountInvoiceCurrency								= TotalPaymentAmount

							invoked.PaymentAmountBankAccountCurrency.EnteredCurrencyAmount				= TotalPaymentAmountBankAccountCurrency
							invoked.AppliedAmountBankAccountCurrency.BaseAmount.EnteredCurrencyAmount	= TotalPaymentAmountBankAccountCurrency

							invoked.VendorGroup 											= PrmCashRequirementsResult.VendorGroup
							invoked.CashRequirementsResult									= PrmCashRequirementsResult


						invoke IncrementTransactionIDNumber BankTransactionCode
						LocalTransactionIDNumber 	= BankTransactionCode.TransactionIDNumber
						TransactionIDNumber  		= LocalTransactionIDNumber
						TotalPaymentAmount			= PaymentAmount.CurrencyAmount
						NumberOfPayments			= 1
					else
						TransactionIDNumber  = LocalTransactionIDNumber
						TotalPaymentAmount	+= PaymentAmount.CurrencyAmount
						NumberOfPayments	+= 1

						if (NumberOfPayments = 9999
						and	TotalPaymentAmount	< 0)
							RelLocalTransactionIDNumber = LocalTransactionIDNumber
							invoke RestrictedPutOnHold PaymentForTransactionIDNumberRel
								invoked.InvoiceHoldCode = PrmVendorGroup.CreditBalanceHoldCode

					LastPayablesInvoicePayment = PayablesInvoicePayment

		MassIncomeCodeUpdate is a Set Action
			Parameters
				PrmVendorGroup			is a VendorGroup
				PrmFromVendor			is a Vendor
				PrmToVendor				is a Vendor
				PrmVendorSelectionRule	is a Vendor group
				PrmUpdatePaidInvoices	is Boolean
				PrmPaidDateRange		is a DateRange
				PrmUpdateUnpaidInvoices	is Boolean
				PrmInvoiceDateRange		is a DateRange
				PrmClearIncomeCode		is Boolean

			Parameter Rules
				PrmVendorGroup	required
				PrmToVendor
					constraint (PrmToVendor >= PrmFromVendor)
						"ToVendorMustBeGreaterThanFromVendor"
				PrmPaidDateRange
					if (PrmUpdatePaidInvoices)
						required
				PrmUpdateUnpaidInvoices
					if (!PrmUpdatePaidInvoices)
						required
							"MustSelectAPaidOrUnpaidInvoiceOption"
				PrmInvoiceDateRange
					if (PrmUpdateUnpaidInvoices)
						required
				PrmClearIncomeCode
					if (PrmClearIncomeCode)
						confirmation required
							"ClearIncomeCodeHasBeenSelected;ContinueWithEnteredParameters"
					if (PrmFromVendor			!entered
					and PrmVendorSelectionRule	!entered)
						constraint (PrmFromVendor	entered)
							"VendorRangeOrVendorSelectionRuleRequiredForClearIncomeCode"

			Instance Selection
				where (Company.VendorGroup 	= PrmVendorGroup
				and  ((PrmFromVendor			entered
				and    Vendor					>= PrmFromVendor
				and    Vendor					<= PrmToVendor)
				or     PrmFromVendor			!entered)
				and  ((PrmVendorSelectionRule	entered
				and    Vendor					within PrmVendorSelectionRule)
				or     PrmVendorSelectionRule	!entered)
				and  ((!PrmClearIncomeCode
				and    Vendor.IncomeCode		entered)
				or    (PrmClearIncomeCode
				and    IncomeCode				entered))
				and  ((PrmUpdatePaidInvoices
				and    Status.Historical
				and    CheckDate				within PrmPaidDateRange)
				or    (PrmUpdateUnpaidInvoices
				and    !Status.Historical
				and    PayablesInvoice.InvoiceDate	within PrmInvoiceDateRange)))

			Sort Order
				Company
				Status
				Vendor

			Action Rules
				Instance Rules
					if (PrmClearIncomeCode)
						confirmation required
							"ClearIncomeCodeHasBeenSelected;ContinueWithEnteredParameters"
						initialize IncomeCode
					else
						IncomeCode 				= Vendor.IncomeCode

					invoke UpdateDefaultIncomeCode PayablesInvoice
						invoked.DefaultIncomeCode 	= IncomeCode



















		SelectAllInvoicesForManualPaymentSet is a Set Action  	
			default label is untranslatable
			restricted
			Parameters
				PrmCashManagementGroup 		 is a CashManagementGroup 
				PrmPayGroup               	 is like PayGroup
				PrmPayCurrency           	 is a Currency
				PrmPayVendor              	 is like Vendor
				PrmCashCode                	 is a CashCode
				PrmCashLedgerSourceRecord 	 is a CashLedgerSourceRecord
				PrmCashLedgerPayablesPayment is a CashLedgerPayablesPayment
				PrmPayThroughDate			 is Date

			Instance Selection
				where (ValidForHelperList
				and   PayGroup 				= PrmPayGroup
				and   InvoiceCurrency 		= PrmPayCurrency
				and   PayVendor 			= PrmPayVendor
				and   CashCode 				= PrmCashCode
				and	  BankTransactionCode 	= PrmCashLedgerPayablesPayment.BankTransactionCode
				and   CashRequirementsResult not entered
				and   TransactionIDNumber 	 not entered
				and	  DueDate				<= PrmPayThroughDate)

			Sort Order is Set12

			Action Rules
				Instance Rules
					invoke ApplySelectedPayablesToCheck
						invoked.PrmCashCode 			  		= PrmCashCode
						invoked.PrmCashLedgerSourceRecord 		= PrmCashLedgerSourceRecord
						invoked.PrmCashLedgerPayablesPayment 	= PrmCashLedgerPayablesPayment

		RepairDiscount is an Update Action
			bypass field rules
			restricted
			Action Rules

				DiscountAmount.CurrencyAmount = DiscountPercent * TransientAllowableAmount

				initialize DiscountAmount.FunctionalAmount.EnteredCurrencyAmount
				initialize DiscountAmount.AlternateAmount.EnteredCurrencyAmount
				initialize DiscountAmount.AlternateAmount2.EnteredCurrencyAmount
				initialize DiscountAmount.AlternateAmount3.EnteredCurrencyAmount
				initialize DiscountAmount.ToFunctionalAmount.EnteredCurrencyAmount
				initialize DiscountAmount.ToAlternateAmount.EnteredCurrencyAmount
				initialize DiscountAmount.ToAlternateAmount2.EnteredCurrencyAmount
				initialize DiscountAmount.ToAlternateAmount3.EnteredCurrencyAmount
				initialize DiscountAmount.ProjectAmount.EnteredCurrencyAmount
				initialize DiscountAmount.ReportAmount1.EnteredCurrencyAmount
				initialize DiscountAmount.ReportAmount2.EnteredCurrencyAmount
				initialize DiscountAmount.ReportAmount3.EnteredCurrencyAmount
				initialize DiscountAmount.ReportAmount4.EnteredCurrencyAmount
				initialize DiscountAmount.ReportAmount5.EnteredCurrencyAmount

				if  (GeneralLedgerCompanyRel.AccountingEntity.FunctionalCurrency entered)
					DiscountAmount.FunctionalAmount.ToCurrency					= GeneralLedgerCompanyRel.AccountingEntity.FunctionalCurrency
					DiscountAmount.FunctionalAmount.EnteredCurrencyAmount		= DiscountAmount.FunctionalAmount.OutputCurrencyAmount

				if  (GeneralLedgerCompanyRel.AccountingEntity.AlternateCurrency entered)
					DiscountAmount.AlternateAmount.ToCurrency					= GeneralLedgerCompanyRel.AccountingEntity.AlternateCurrency
					DiscountAmount.AlternateAmount.EnteredCurrencyAmount		= DiscountAmount.AlternateAmount.OutputCurrencyAmount

				if  (GeneralLedgerCompanyRel.AccountingEntity.AlternateCurrency2 entered)
					DiscountAmount.AlternateAmount2.ToCurrency					= GeneralLedgerCompanyRel.AccountingEntity.AlternateCurrency2
					DiscountAmount.AlternateAmount2.EnteredCurrencyAmount		= DiscountAmount.AlternateAmount2.OutputCurrencyAmount

				if  (GeneralLedgerCompanyRel.AccountingEntity.AlternateCurrency3 entered)
					DiscountAmount.AlternateAmount3.ToCurrency					= GeneralLedgerCompanyRel.AccountingEntity.AlternateCurrency3
					DiscountAmount.AlternateAmount3.EnteredCurrencyAmount		= DiscountAmount.AlternateAmount3.OutputCurrencyAmount

				if  (GeneralLedgerCompanyRel.FinanceEnterpriseGroup.ReportCurrencyOne entered)
					DiscountAmount.ReportAmount1.ToCurrency						= GeneralLedgerCompanyRel.FinanceEnterpriseGroup.ReportCurrencyOne
					DiscountAmount.ReportAmount1.EnteredCurrencyAmount			= DiscountAmount.ReportAmount1.OutputCurrencyAmount

				if  (GeneralLedgerCompanyRel.FinanceEnterpriseGroup.ReportCurrencyTwo entered)
					DiscountAmount.ReportAmount2.ToCurrency						= GeneralLedgerCompanyRel.FinanceEnterpriseGroup.ReportCurrencyTwo
					DiscountAmount.ReportAmount2.EnteredCurrencyAmount			= DiscountAmount.ReportAmount2.OutputCurrencyAmount

				if  (GeneralLedgerCompanyRel.FinanceEnterpriseGroup.ReportCurrencyThree entered)
					DiscountAmount.ReportAmount3.ToCurrency						= GeneralLedgerCompanyRel.FinanceEnterpriseGroup.ReportCurrencyThree
					DiscountAmount.ReportAmount3.EnteredCurrencyAmount			= DiscountAmount.ReportAmount3.OutputCurrencyAmount

				if  (GeneralLedgerCompanyRel.FinanceEnterpriseGroup.ReportCurrencyFour entered)
					DiscountAmount.ReportAmount4.ToCurrency						= GeneralLedgerCompanyRel.FinanceEnterpriseGroup.ReportCurrencyFour
					DiscountAmount.ReportAmount4.EnteredCurrencyAmount			= DiscountAmount.ReportAmount4.OutputCurrencyAmount

				if  (GeneralLedgerCompanyRel.FinanceEnterpriseGroup.ReportCurrencyFive entered)
					DiscountAmount.ReportAmount5.ToCurrency						= GeneralLedgerCompanyRel.FinanceEnterpriseGroup.ReportCurrencyFive
					DiscountAmount.ReportAmount5.EnteredCurrencyAmount			= DiscountAmount.ReportAmount5.OutputCurrencyAmount

				for each PayablesInvoiceDiscountRel
					invoke RepairDiscount each
						invoked.DiscountAmount.CurrencyAmount							= DiscountAmount.CurrencyAmount * -1

		SyncFieldsAmongInvoiceAndCredits is an Instance Action		
			restricted
			Action Rules
				LocalRunProgram	 = LocalRunProgram.CreditMemoApplication
				if (Status.Released)	
					include VerifyProcessingMonitorRule

				if (IsAppliedToInvoice
				and !TransientBypassUpdateEdit)
					for each PayablesPaymentCreditMemoRel
						invoke Update each.PayablesInvoicePaymentInvoicePayablesCreditMemoRel
							invoked.BankTransactionCode			= BankTransactionCode
							invoked.CashCode					= CashCode
							invoked.PayImmediately				= PayImmediately
							invoked.InvoiceGroup				= InvoiceGroup
							invoked.PaymentPriority				= PaymentPriority		
							invoked.DueDate						= DueDate				
							invoked.TransientBypassUpdateEdit	= true

				if (IsAppliedToCredit
				and !TransientBypassUpdateEdit)
					for each PayablesPaymentCreditMemo2Rel
						invoke Update each.PayablesInvoicePaymentCreditPayablesCreditMemoRel
							invoked.BankTransactionCode			= BankTransactionCode
							invoked.CashCode					= CashCode
							invoked.PayImmediately				= PayImmediately
							invoked.InvoiceGroup				= InvoiceGroup
							invoked.PaymentPriority				= PaymentPriority		
							invoked.DueDate						= DueDate				
							invoked.TransientBypassUpdateEdit	= true

		Purge is a Purge Action
			restricted
			bypass relational integrity rules
			Entrance Rules
				invoke Purge PayablesInvoiceDiscountRel	
			
		PayablesPaymentClose is a Set Action	
			default label is untranslatable
			restricted
			Parameters
				PrmVendorGroup				is a VendorGroup
					default label is "VendorGroup"
				PrmPayGroup					is a PayGroup
					default label is "PayGroup"
				PrmProcessGroup				is a PayablesProcessGroup
					default label is "ProcessGroup"
				PrmBackgroundGroup			is AlphaUpper up to 60
				PrmPayablesJobResult		is a PayablesJobResult
				PrmCashRequirementsResult	is a CashRequirementsResult
				PrmRunGroup					is Numeric 3
				PrmNumberOfThreads			is Numeric 3
					default label is "NumberOfThreads"
				PrmLastAPJournalizeGroup	is AlphaUpper size 30

			Parameter Rules

			Local Fields
				Skip									is Boolean
				LocalDate								is Date
				MonthEndDate							is Boolean
				LocalNewDate							is Date
				LocalNumeric							is Numeric size 1
				LocalContinue							is Boolean
				LocalPmtPmtAmt							is an InternationalAmount
				LocalNewDueDate							is Date
				LocalMonthCount							is Numeric size 2
				LocalNextDueDate						is Date
				LocalBaseActAmt2						is an InternationalAmount
				LocalPmtTranIncWh						is an InternationalAmount
				LocalFatcaIncCode						is like PayablesIncomeCode
				LocalPmtTranSecWh						is an InternationalAmount
				LocalPmtDiscAmount						is an InternationalAmount
				LocalCurrentBalance						is an InternationalAmount
				LocalNextInvoiceDate					is Date
				LocalVenGainlosAccum					is an InternationalAmount
				LocalNextDiscountDate					is Date
				LocalVenDiscLostAccum					is an InternationalAmount
				LocalVenDiscTakeAccum					is an InternationalAmount
				LocalVenPaymentsAccum					is an InternationalAmount
				LocalNextRecurringDate					is Date
				LocalVenTranIncWhAccum					is an InternationalAmount
				LocalVenTranSecWhAccum					is an InternationalAmount
				LocalNextDistributionDateDate			is Date

			Instance Selection
				where ((PrmNumberOfThreads	<=1
				or    (PayVendor % PrmNumberOfThreads) = PrmRunGroup)
				and	  VendorGroup 		= PrmVendorGroup
				and   PayGroup			= PrmPayGroup
				and   (Status.SystemGeneratedPayment
				or    Status.ManuallyPaid)
				and   (PrmProcessGroup	not entered
				or    ProcessGroup		= PrmProcessGroup
				or    (PrmProcessGroup	= "NONE"
				and   ProcessGroup		not entered)))

			Sort Order is Set3

			Rule Blocks
				CreateSecondaryWithholdingDistribution   
					invoke CreateSecondaryWithholdingDistribution
						invoked.PrmControlDocumentNumber	= TransactionNumber
						invoked.PrmDescription				= "Secondary Withholding Accrual"
						invoked.PrmReference				= TransactionNumber
						invoked.PrmJournalizeGroup			= PrmLastAPJournalizeGroup
						invoked.PrmSecondaryWithholding		= LocalNumeric
						invoked.PrmProcessGroup				= PrmProcessGroup

				NextRecurrInvDates
					initialize MonthEndDate
					initialize LocalNewDate
					initialize LocalMonthCount
					initialize LocalNewDueDate
					initialize LocalNextRecurringDate
					if (PayablesInvoice.RecurringFrequency.Monthly)
						LocalMonthCount	= 1
					else
					if (PayablesInvoice.RecurringFrequency.Quarterly)
						LocalMonthCount	= 3
					else
					if (PayablesInvoice.RecurringFrequency.SemiAnnually)
						LocalMonthCount	= 6
					else
					if (PayablesInvoice.RecurringFrequency.Yearly)
						LocalMonthCount	= 12
					else
					if (PayablesInvoice.RecurringFrequency.EndOfMonth)
						if (LocalDate = LocalDate last date in month)
							MonthEndDate = true
						LocalMonthCount	= 1
					
					if (PayablesInvoice.RecurringFrequency.Weekly)
						LocalNewDate	= LocalDate + 7
					else
						LocalNewDate	= LocalDate + LocalMonthCount as months

					if (PayablesInvoice.RecurringFrequency.EndOfMonth)
						LocalNewDueDate	= LocalNewDate + (LocalNewDate days in month -  LocalNewDate day)
					if (MonthEndDate)
						LocalNextRecurringDate 	= LocalNewDueDate
					else
						LocalNextRecurringDate 	= LocalNewDate

			Action Rules
				Empty Set Rules

				Set Rules

				PayablesInvoice Set Rules
					Exit Rules
						if (LocalContinue)
							if (PayablesInvoice.AmountPaid = PayablesInvoice.InvoiceAmount.CurrencyAmount
							and PayablesInvoice.Status != 5)
								invoke FastUpdateFromPayment PayablesInvoice

							if (PayablesInvoice.Suffix < PayablesInvoice.NumberOfRecurringInvoices)
								LocalDate = PayablesInvoice.InvoiceDate
								include NextRecurrInvDates
								LocalNextInvoiceDate = LocalNextRecurringDate

								LocalDate = PayablesInvoice.DueDate
								include NextRecurrInvDates
								LocalNextDueDate = LocalNextRecurringDate

								if (PayablesInvoice.DiscountDate entered)
									LocalDate = PayablesInvoice.DiscountDate
									include NextRecurrInvDates
									LocalNextDiscountDate = LocalNextRecurringDate

								LocalDate = PayablesInvoice.DistributionDate
								include NextRecurrInvDates
								LocalNextDistributionDateDate = LocalNextRecurringDate

								invoke CreateNextRecurringInvoice PayablesInvoice
									invoked.PrmInvoiceDate 						= LocalNextInvoiceDate
									invoked.PrmDueDate 							= LocalNextDueDate
									invoked.PrmDiscountDate 					= LocalNextDiscountDate
									invoked.PrmDistributionDate 				= LocalNextDistributionDateDate

				Instance Rules
					initialize Skip
					initialize LocalVenDiscTakeAccum
					initialize LocalBankTransactionCode
					PayablesJobResult				= PrmPayablesJobResult
					LocalPayablesJobResult			= PrmPayablesJobResult
					LocalCashRequirementsResult 	= PrmCashRequirementsResult
					if (VendorGroup not entered)
						VendorGroup 				= PrmVendorGroup


					if (CashCode.DefaultPostCompany entered)
						LocalPayablesCompany	=	CashCode.DefaultPostCompany
					else
						LocalPayablesCompany	=	PayGroup.PostCompany
					if (LocalBankTransactionCode != BankTransactionCode)
						if (!BankTransactionCode.BankTransactionType.CashPayment)
							Skip = true
						else
						if (!BankTransactionCode.Active)
							if (PrmCashRequirementsResult entered
							and InactiveBankTransactionCodeErrorRel not exists)
								Skip = true
								invoke Create CashRequirementsError
									invoked.VendorGroup 				= PrmVendorGroup
									invoked.PayGroup					= PrmPayGroup
									invoked.CashRequirementsResult		= PrmCashRequirementsResult
									invoked.PayablesCompany				= Company
									invoked.PayablesInvoice				= PayablesInvoice
									invoked.PayablesInvoicePayment		= PayablesInvoicePayment
									invoked.ErrorMessage				= "Payments(s) for bank transaction code "+BankTransactionCode+" cannot be closed. Bank transaction code is inactive."
									invoked.ErrorNumber					= CashRequirementsErrorNumber.BankTransactionCodeInactive
									invoked.CashManagementGroup			= PrmVendorGroup.BusinessGroup.FinanceEnterpriseGroup
									invoked.BankTransactionCode			= BankTransactionCode

							else
							if (PrmPayablesJobResult entered
							and BankTransactionCodeInActiveErrorRel not exists)
								Skip = true
								invoke Create PayablesJobErrorResult
									invoked.VendorGroup 				= PrmVendorGroup
									invoked.PayablesJobResult			= PrmPayablesJobResult
									invoked.PayablesCompany				= Company
									invoked.PayablesInvoice				= PayablesInvoice
									invoked.PayablesInvoicePayment		= PayablesInvoicePayment
									invoked.ErrorMessage				= "Payments(s) for bank transaction code "+BankTransactionCode+" cannot be closed. Bank transaction code is inactive."
									invoked.ErrorNumber					= CashRequirementsErrorNumber.BankTransactionCodeInactive
									invoked.CashManagementGroup			= PrmVendorGroup.BusinessGroup.FinanceEnterpriseGroup
									invoked.BankTransactionCode			= BankTransactionCode

					if (LocalCashCode != CashCode)
						if	(!CashCode.Active)
							if (PrmCashRequirementsResult entered
							and InactiveCashCodeErrorRel not exists)
								Skip = true
								invoke Create CashRequirementsError
									invoked.VendorGroup 				= PrmVendorGroup
									invoked.PayGroup					= PrmPayGroup
									invoked.CashRequirementsResult		= PrmCashRequirementsResult
									invoked.PayablesCompany				= Company
									invoked.PayablesInvoice				= PayablesInvoice
									invoked.PayablesInvoicePayment		= PayablesInvoicePayment
									invoked.ErrorMessage				= "Payment(s) for cash code "+CashCode+" cannot be closed. Cash code is inactive."
									invoked.ErrorNumber					= CashRequirementsErrorNumber.CashCodeInactive
									invoked.CashManagementGroup			= PrmVendorGroup.BusinessGroup.FinanceEnterpriseGroup
									invoked.CashCode					= CashCode
							else
							if (PrmPayablesJobResult entered
							and CashCodeInactiveErrorRel not exists)
								Skip = true
								invoke Create PayablesJobErrorResult
									invoked.VendorGroup 				= PrmVendorGroup
									invoked.PayablesJobResult			= PrmPayablesJobResult
									invoked.PayablesCompany				= Company
									invoked.PayablesInvoice				= PayablesInvoice
									invoked.PayablesInvoicePayment		= PayablesInvoicePayment
									invoked.ErrorMessage				= "Payment(s) for cash code "+CashCode+" cannot be closed. Cash code is inactive."
									invoked.ErrorNumber					= CashRequirementsErrorNumber.CashCodeInactive
									invoked.CashManagementGroup			= PrmVendorGroup.BusinessGroup.FinanceEnterpriseGroup
									invoked.CashCode			= CashCode
					if (CompanyCashCodeRel not exists)
						if (PrmCashRequirementsResult entered
						and CompanyCashCodeRelationCashRequirementsErrorRel not exists)
							Skip = true
							invoke Create CashRequirementsError
								invoked.VendorGroup 				= PrmVendorGroup
								invoked.PayGroup					= PrmPayGroup
								invoked.CashRequirementsResult		= PrmCashRequirementsResult
								invoked.PayablesCompany				= Company
								invoked.PayablesInvoice				= PayablesInvoice
								invoked.PayablesInvoicePayment		= PayablesInvoicePayment
								invoked.ErrorMessage				= "Payment(s) for company "+LocalPayablesCompany+" cash code "+CashCode+" cannot be closed. CompanyCashCode relationship does not exist in company cash codes."
								invoked.ErrorNumber					= CashRequirementsErrorNumber.CompanyCashCodeRelationship
								invoked.CashManagementGroup			= PrmVendorGroup.BusinessGroup.FinanceEnterpriseGroup
								invoked.CashCode					= CashCode
						else
						if (PrmPayablesJobResult entered
						and CompanyCashCodeRelationPayablesJobErrorRel not exists)
							Skip = true
							invoke Create PayablesJobErrorResult
								invoked.VendorGroup 				= PrmVendorGroup
								invoked.PayablesJobResult			= PrmPayablesJobResult
								invoked.PayablesCompany				= Company
								invoked.PayablesInvoice				= PayablesInvoice
								invoked.PayablesInvoicePayment		= PayablesInvoicePayment
								invoked.ErrorMessage				= "Payment(s) for company "+LocalPayablesCompany+" cash code "+CashCode+" cannot be closed. CompanyCashCode relationship does not exist in company cash codes."
								invoked.ErrorNumber					= CashRequirementsErrorNumber.CompanyCashCodeRelationship
								invoked.CashManagementGroup			= PrmVendorGroup.BusinessGroup.FinanceEnterpriseGroup
								invoked.CashCode					= CashCode
					if (PayAccrualCodeDetailRel exists
					and PayAccrualCodeDetailRel.DistributionAccount.ToAccountingEntity != CashCodeDefaultPostCompanyRel.AccountingEntity
					and	GLInterEntityRel not exists)
						if (PrmCashRequirementsResult entered
						and GLInterEntityRelationshipCashRequirementsErrorRel not exists)
							Skip = true
							invoke Create CashRequirementsError
								invoked.VendorGroup 				= PrmVendorGroup
								invoked.PayGroup					= PrmPayGroup
								invoked.CashRequirementsResult		= PrmCashRequirementsResult
								invoked.PayablesCompany				= Company
								invoked.PayablesInvoice				= PayablesInvoice
								invoked.PayablesInvoicePayment		= PayablesInvoicePayment
								invoked.ErrorMessage				= "Invalid relation between accounting entity "+PayAccrualCodeDetailRel.DistributionAccount.ToAccountingEntity+" and "+CashCodeDefaultPostCompanyRel.AccountingEntity+"."
								invoked.ErrorNumber					= CashRequirementsErrorNumber.GLInterEntityRelationship
						else
						if (PrmPayablesJobResult entered
						and GLInterEntityRelationshipPayablesJobErrorRel not exists)
							Skip = true
							invoke Create PayablesJobErrorResult
								invoked.VendorGroup 				= PrmVendorGroup
								invoked.PayablesJobResult			= PrmPayablesJobResult
								invoked.PayablesCompany				= Company
								invoked.PayablesInvoice				= PayablesInvoice
								invoked.PayablesInvoicePayment		= PayablesInvoicePayment
								invoked.ErrorMessage				= "Invalid relation between accounting entity "+PayAccrualCodeDetailRel.DistributionAccount.ToAccountingEntity+" and "+CashCodeDefaultPostCompanyRel.AccountingEntity+"."
								invoked.ErrorNumber					= CashRequirementsErrorNumber.GLInterEntityRelationship
					if (!Skip)
						LocalContinue = true
						if (FATCAIncomeCode entered
						and FATCATransactionIncomeAmount entered)
							if (Vendor.FATCAPercentage not entered)
								LocalFatcaIncCode	= blank
							else
								LocalFatcaIncCode	= Vendor.FATCAIncomeCode
						if (Vendor.BalanceCurrency not entered)
							LocalPmtPmtAmt 			= RevaluedBaseAmount.FunctionalAmount.EnteredCurrencyAmount
							LocalPmtTranIncWh 		= FATCABaseIncomeAmount
							LocalPmtTranSecWh 		= SecondaryWithholdingBaseAmount1 + SecondaryWithholdingBaseAmount2 + SecondaryWithholdingBaseAmount3
							LocalPmtDiscAmount 		= DiscountAmount.FunctionalAmount.EnteredCurrencyAmount
						else
							LocalPmtPmtAmt 			= PaymentAmount.CurrencyAmount
							LocalPmtTranIncWh 		= FATCATransactionIncomeAmount
							LocalPmtTranSecWh 		= SecondaryWithholdingTransactionAmount1 + SecondaryWithholdingTransactionAmount2 + SecondaryWithholdingTransactionAmount3
							LocalPmtDiscAmount 		= DiscountAmount.CurrencyAmount

						if (!DiscountLost)
							LocalBaseActAmt2 		= NetPaymentAmount.FunctionalAmount.EnteredCurrencyAmount + DiscountAmount.FunctionalAmount.EnteredCurrencyAmount + BaseWithholdingAmount + FATCABaseIncomeAmount + SecondaryWithholdingBaseAmount1 + SecondaryWithholdingBaseAmount2 + SecondaryWithholdingBaseAmount3
							LocalVenDiscTakeAccum 	= LocalPmtDiscAmount
							LocalVenPaymentsAccum 	= LocalPmtPmtAmt - (LocalPmtDiscAmount + LocalPmtTranIncWh + LocalPmtTranSecWh)
						else
							LocalBaseActAmt2 		= NetPaymentAmount.FunctionalAmount.EnteredCurrencyAmount + BaseWithholdingAmount + FATCABaseIncomeAmount + SecondaryWithholdingBaseAmount1 + SecondaryWithholdingBaseAmount2 + SecondaryWithholdingBaseAmount3
							LocalVenDiscLostAccum 	= LocalPmtDiscAmount
							LocalVenPaymentsAccum 	= LocalPmtPmtAmt - (LocalPmtTranIncWh + LocalPmtTranSecWh)

						LocalVenTranIncWhAccum 		= LocalPmtTranIncWh
						LocalVenTranSecWhAccum 		= LocalPmtTranSecWh
						if (InvoiceCurrency entered
						and Vendor.BalanceCurrency not entered)
							LocalVenGainlosAccum 	= PaymentAmount.FunctionalAmount.EnteredCurrencyAmount - LocalBaseActAmt2	

						LocalCurrentBalance 		= (LocalVenPaymentsAccum + LocalVenDiscTakeAccum + LocalVenTranIncWhAccum + LocalVenTranSecWhAccum)

						if (RemitToCode entered
						and Vendor = PayVendor)
							LocalRemitToCode		= RemitToCode
						else
							initialize LocalRemitToCode
						if (PayablesInvoice.IsInvoiceType)
							invoke Create ConsolidatedPaymentCycleUpdate			
								invoked.VendorGroup 					= PrmVendorGroup
								invoked.Company 						= Company
								invoked.Vendor 							= Vendor
								invoked.VendorLocation 					= LocalRemitToCode
								invoked.BalanceCurrency					= Vendor.BalanceCurrency
								invoked.PaymentCheckDate 				= CheckDate
								invoked.CurrentBalance 					= LocalCurrentBalance
								invoked.CurrentPeriodPayments 			= LocalVenPaymentsAccum
								invoked.CurrentPeriodGainLoss 			= LocalVenGainlosAccum
								invoked.CurrentPeriodDiscountLost 		= LocalVenDiscLostAccum
								invoked.CurrentPeriodDiscountTaken 		= LocalVenDiscTakeAccum
								invoked.CurrentYearIncomeWithholding 	= LocalVenTranIncWhAccum

						if (PayablesInvoice.InvoiceType.Prepayment	
						and PayablesInvoiceSuffixRel not exists)
							invoke CreatePrepaymentCredit PayablesInvoice
								invoked.PrmPrepayCompany					= Company
								invoked.PrmPrepayInvoice					= PayablesInvoice

						invoke FastUpdate PayablesInvoice
							invoked.AmountPaid 														+= PaymentAmount.CurrencyAmount
							invoked.RevaluedBaseAmount.FunctionalAmount.EnteredCurrencyAmount 		-= RevaluedBaseAmount.FunctionalAmount.EnteredCurrencyAmount
							invoked.RevaluedBaseAmount.FunctionalAmount.EnteredCurrencyAmount 		+= LocalBaseActAmt2
							if (RetainagePayment)
								invoked.RetainagePaymentAmount 			+= PaymentAmount.CurrencyAmount
								invoked.BaseRetainagePaymentAmount 		+= PaymentAmount.FunctionalAmount.EnteredCurrencyAmount
							invoked.LastUpdateBy 		= actor
							invoked.LastUpdateDate 		= current timestamp


						if (PayablesInvoice.TaxPoint = "P"
						or (PayablesInvoice.TotalTaxAmount entered
						and PayablesInvoice.TaxCode not entered
						and !PayablesInvoice.IsPrepaymentOrPreCredit))
							invoke PerformTaxReversal PayablesInvoice	
								invoked.PrmTranTaxAmount				= PayablesInvoice.TaxAmount
								invoked.PrmPostDate						= CheckDate
								invoked.PrmJournalizeGroup				= PrmLastAPJournalizeGroup
								invoked.PrmDiscountLost					= DiscountLost
								invoked.PrmTranPmtAmount				= PaymentAmount.CurrencyAmount

						if (!DiscountLost
						and DiscountAmount.CurrencyAmount entered
						and DiscountAmount.FunctionalAmount.EnteredCurrencyAmount entered)
							if (Company.TaxRecoveryOnDiscount
							and PayablesInvoice.TaxAmount entered
							and PayablesInvoice.InvoiceAmount.CurrencyAmount entered
							and PayablesInvoice.DiscountPercent > 0)
								if (PayablesInvDistributionTaxRel exists)	
									invoke 4354ProcTaxDistrib PayablesInvDistributionTaxRel
										invoked.PrmPostDate					= PayablesInvoice.InvoiceDate
										invoked.PrmPaymentPerc				= (PaymentAmount.CurrencyAmount / PayablesInvoice.InvoiceAmount.CurrencyAmount)
										invoked.PrmTranDiscAmt				= DiscountAmount.CurrencyAmount
										invoked.PrmBaseDiscAmt				= DiscountAmount.FunctionalAmount.EnteredCurrencyAmount
										invoked.PrmTranPmtAmount			= PaymentAmount.CurrencyAmount

							invoke CreateDiscountDistribution	
								invoked.PrmControlDocumentNumber		= TransactionNumber
								invoked.PrmDescription					= "Cash Discount"
								invoked.PrmReference					= TransactionNumber
								invoked.PrmJournalizeGroup				= PrmLastAPJournalizeGroup
								invoked.PrmProcessGroup					= PrmProcessGroup


						if (PaymentAmount.CurrencyAmount entered
						and ((InvoiceCurrency = CashCode.Currency
						or	(InvoiceCurrency != CashCode.Currency
						and PaymentAmount.FunctionalAmount.EnteredCurrencyAmount entered))))
							invoke CreatePaymentAccrualDistribution	
								invoked.PrmControlDocumentNumber			= TransactionNumber
								invoked.PrmDescription						= "Payment Accrual"
								invoked.PrmReference						= TransactionNumber
								invoked.PrmJournalizeGroup					= PrmLastAPJournalizeGroup
								invoked.PrmProcessGroup						= PrmProcessGroup
								invoked.PrmPaymentClose						= true

							invoke CreateGainLossOffset
								invoked.PrmControlDocumentNumber		= TransactionNumber
								invoked.PrmDescription					= "Payment Accrual"
								invoked.PrmReference					= TransactionNumber
								invoked.PrmJournalizeGroup				= PrmLastAPJournalizeGroup
								invoked.PrmVoidDate						= blank

						if (MatchDiscountTaken.Yes
						and PaymentAmount.CurrencyAmount entered
						and PaymentAmount.FunctionalAmount.EnteredCurrencyAmount entered)
							invoke BypassCreateFromBatchAccrualCode PayablesInvoiceDistribution		
								invoked.PrmPayablesCompany						= PayablesInvoice.Company
								invoked.PrmPayablesInvoice						= PayablesInvoice
								invoked.PrmProcessLevel							= ProcessLevel
								invoked.PrmInvoiceType							= PayablesInvoice.InvoiceType
								invoked.PrmFromPayment							= true
								if (AccrualCode entered
								and PayAccrualCodeDetailRel exists)
									invoked.PrmPayablesAccrualCode				= AccrualCode
								else
									invoked.PrmPayablesAccrualCode				= blank
								invoked.PrmGLTransAmount						= PayablesInvoiceMatchDiscountRel.DiscountAmount.CurrencyAmount
								invoked.PrmCurrency								= CashCode.Currency
								invoked.PrmControlDocumentNumber				= blank
								invoked.PrmDocumentNumber						= TransactionNumber
								invoked.PrmTransactionDate						= CheckDate
								invoked.PrmPostingDate							= CheckDate
								invoked.PrmDescription							= "Match Discount Accrual"
								invoked.PrmReference							= TransactionNumber
								invoked.PrmJournalizeGroup						= PrmLastAPJournalizeGroup

							invoke BypassCreateFromBatchMatchDiscAccr PayablesInvoiceDistribution		
								invoked.PrmPayablesCompany						= PayablesInvoice.Company
								invoked.PrmMatchCompany							= PayablesInvoice.Company
								invoked.PrmPayablesInvoice						= PayablesInvoice
								invoked.PrmProcessLevel							= ProcessLevel
								invoked.PrmInvoiceType							= PayablesInvoice.InvoiceType
								invoked.PrmFromPayment							= true
								invoked.PrmGLTransAmount						= PayablesInvoiceMatchDiscountRel.DiscountAmount.CurrencyAmount * -1
								invoked.PrmCurrency								= CashCode.Currency
								invoked.PrmControlDocumentNumber				= blank
								invoked.PrmDocumentNumber						= TransactionNumber
								invoked.PrmTransactionDate						= CheckDate
								invoked.PrmPostingDate							= CheckDate
								invoked.PrmDescription							= "Match Discount Received"
								invoked.PrmReference							= TransactionNumber
								invoked.PrmJournalizeGroup						= PrmLastAPJournalizeGroup


						if (NetPaymentAmount.CurrencyAmount entered
						and (InvoiceCurrency = CashCode.Currency
						or (InvoiceCurrency != CashCode.Currency
						and NetPaymentAmount.FunctionalAmount.EnteredCurrencyAmount entered)))
							if (!GeneralLedgerCompanyRel.FinanceEnterpriseGroup.FundAccounting	
							or PayablesInvoice.IsPrepaymentOrMatch)
								invoke CreateFromBatchCashCode PayablesInvoiceDistribution
									invoked.PrmPayablesCompany					= PayablesInvoice.Company
									invoked.PrmPayablesInvoice					= PayablesInvoice
									invoked.PrmProcessLevel						= ProcessLevel 
									invoked.PrmInvoiceType						= PayablesInvoice.InvoiceType
									invoked.PrmFromPayment						= true
									if (CashCode not entered)
										invoked.PrmGeneralLedgerCompany			= blank
										invoked.PrmCashCode						= blank
									else
										if (CashCode.DefaultPostCompany entered)
											invoked.PrmGeneralLedgerCompany		= CashCode.DefaultPostCompany
										else
											invoked.PrmGeneralLedgerCompany		= PayGroup.PostCompany
										invoked.PrmCashCode						= CashCode
									invoked.PrmPaymentSequence					= PayablesInvoicePayment.PaymentSequence
									invoked.PrmVoidSequence						= PayablesInvoicePayment.VoidSequence
									if (InvoiceCurrency = CashCode.Currency)
										invoked.PrmGLTransAmount				= NetPaymentAmount.CurrencyAmount * -1
									else
										invoked.PrmGLTransAmount				= BankCheckAmount * -1
									invoked.PrmCurrency							= CashCode.Currency
									invoked.PrmControlDocumentNumber			= blank
									invoked.PrmDocumentNumber					= TransactionNumber
									invoked.PrmTransactionDate					= CheckDate
									invoked.PrmPostingDate						= CheckDate
									invoked.PrmDescription						= "Cash Disbursement"
									invoked.PrmReference						= TransactionNumber
									invoked.PrmJournalizeGroup					= PrmLastAPJournalizeGroup


						if ((WithholdingAmount entered
						and BaseWithholdingAmount entered)
						or LocalFatcaIncCode entered)
							invoke CreateWithholdingDistribution	
								invoked.PrmControlDocumentNumber				= TransactionNumber
								invoked.PrmDescription							= "Income Withholding Accrual"
								invoked.PrmReference							= TransactionNumber
								invoked.PrmJournalizeGroup						= PrmLastAPJournalizeGroup
								invoked.PrmProcessGroup							= PrmProcessGroup

						if (PayablesInvoice.SecondaryWithholding)
							LocalSecWthCode1 				= SecondaryWithholdingCode1
							LocalSecWthCode2 				= SecondaryWithholdingCode2
							LocalSecWthCode3 				= SecondaryWithholdingCode3
							LocalSecondaryWithholdingCode	= LocalSecWthCode1
							if (PayablesSecondaryWithholdingCodeDetailRel not exists)
								LocalSecWthCode1 = blank
							
							LocalSecondaryWithholdingCode	= LocalSecWthCode2
							if (PayablesSecondaryWithholdingCodeDetailRel not exists)
								LocalSecWthCode2 = blank

							LocalSecondaryWithholdingCode	= LocalSecWthCode3
							if (PayablesSecondaryWithholdingCodeDetailRel not exists)
								LocalSecWthCode3 = blank

							if (SecondaryWithholdingTransactionAmount1 entered
							and SecondaryWithholdingBaseAmount1 entered
							and LocalSecWthCode1 entered)
								LocalNumeric = 1
								include CreateSecondaryWithholdingDistribution	

							if (SecondaryWithholdingTransactionAmount2 entered
							and SecondaryWithholdingBaseAmount2 entered
							and LocalSecWthCode2 entered)
								LocalNumeric = 2
								include CreateSecondaryWithholdingDistribution	

							if (SecondaryWithholdingTransactionAmount3 entered
							and SecondaryWithholdingBaseAmount3 entered
							and LocalSecWthCode3 entered)
								LocalNumeric = 3
								include CreateSecondaryWithholdingDistribution	


						Status = 9
						DiscountAccount 	= PayablesDiscountCodeDetailRel.DiscountAccount
						GainLossAmount		= PaymentAmount.FunctionalAmount.EnteredCurrencyAmount - LocalBaseActAmt2
						if (ReportableIncomeAmount not entered)
							ReportableIncomeAmount = PaymentAmount.CurrencyAmount
							if (!DiscountLost)
								ReportableIncomeAmount -= DiscountAmount.CurrencyAmount
						include UpdateLastDateTimeActor
						if (GeneralLedgerCompanyRel.FinanceEnterpriseGroup.BODTrigger)
							invoke TriggerPayablesInvoicePayment



					LocalCashCode				= CashCode
					LocalBankTransactionCode	= BankTransactionCode

	StateCycles
		InvoicePaymentLifeCycle is a StateCycle
			state field is Status
			Unreleased is a State
				Release is an Instance Action
					restricted
					valid when (PayablesInvoice.Status.Released)
					Action Rules
						include ReleaseEditRules
						if (LocalStatus = 1)
							make transition to Released
						else
						if (LocalStatus = 4)
							make transition to ManuallyPaid
							if (PayablesInvoice exists) 
								invoke TriggerPayableTracker CashLedgerPayablesPaymentRel








				ApplyToBillOfExchange is an Instance Action
					Parameters
						FinanceEnterpriseGroup
						BankTransactionCode
						PayablesBillOfExchange

					Parameter Rules
						FinanceEnterpriseGroup
							required
						BankTransactionCode
							required
						PayablesBillOfExchange
							required
							constraint (InvoiceCurrency = PayablesBillOfExchange.CashCode.Currency)
								"InvoiceCurrencyNotEqualToBillOfExchangeCurrency"
							constraint (PayablesBillOfExchange.ProcessLevel		= blank
							or     		PayablesBillOfExchange.ProcessLevel		= ProcessLevel)
								"BillOfExchangeProcessLevelMustBeBlankOrMatchPaymentProcessLevel"
					Action Rules
						PayGroup				= PayablesBillOfExchange.PayGroup
						BankTransactionCode		= PayablesBillOfExchange.BankTransactionCode
						TransactionIDNumber		= PayablesBillOfExchange
						CashCode				= PayablesBillOfExchange.CashCode
						RemitToCode				= PayablesBillOfExchange.RemitToCode
						CheckSuffix				= PayablesBillOfExchange.Suffix
						PayVendor				= PayablesBillOfExchange.Vendor
						OnHold					= false
						TransactionNumber 		= PayablesBillOfExchange.DraftNumber

						invoke Delete PayablesInvoicePaymentsOnHoldRel

						invoke UpdateAppliedAmount PayablesBillOfExchange
							invoked.PrmAppliedAmount		= PaymentAmount.CurrencyAmount
							invoked.PrmBaseOriginalAmount	= PaymentAmount.FunctionalAmount.EnteredCurrencyAmount
							invoked.PrmRevaluedBaseAmount	= PaymentAmount.FunctionalAmount.EnteredCurrencyAmount

						make transition to ManuallyPaid


				UpdateDiscountFromHeader is an Update Action
					restricted
					bypass field rules
					Action Rules
						if (TransientAllowableAmount entered)
							LocalAllowAmt					= TransientAllowableAmount			
							LocalDiscountAmt				= LocalAllowAmt * DiscountPercent	

							DiscountAmount.CurrencyAmount	= LocalDiscountAmt					
							if (DiscountAmount.ExchangeDate not entered)
								if (CheckDate entered)
									DiscountAmount.ExchangeDate = CheckDate
								else
									DiscountAmount.ExchangeDate	= PayablesInvoice.InvoiceAmount.ExchangeDate 
							DiscountAmount.KeepRateOnly			= true
							DiscountAmount.FunctionalAmount.EnteredCurrencyRate		= PayablesInvoice.DiscountAmount.FunctionalAmount.EnteredCurrencyRate
							DiscountAmount.FunctionalAmount.EnteredCurrencyAmount	= PayablesInvoice.DiscountAmount.FunctionalAmount.EnteredCurrencyAmount
						else
							initialize DiscountAmount.CurrencyAmount
							initialize DiscountAmount.ExchangeDate
							initialize DiscountPercent

					Exit Rules 
						if (PayablesInvoice.InterfaceInProcess)
							initialize TransientAllowableAmount

			Released is a State

				DeleteCredit is a Delete Action
					restricted
					Action Rules


				Unrelease is an Instance Action
					restricted
					valid when (PayablesInvoice.Status.Unreleased)
					Action Rules
						make transition to Unreleased



				SplitRetainagePayment is an Instance Action		//	"Released" State
					valid when (IsRetainagePayment)				
					Parameters
						PrmSplitAmount			is an InternationalAmount
							default label is "SplitAmount"
						PrmSplitPercent			is a Pct
							default label is "Or_SplitPercent"

					Parameter Rules
						PrmSplitAmount
							if (PrmSplitPercent not entered)
								required
									"EitherSplitAmountOrSplitPercentIsRequired"	
							else
								cannot be entered
									"CannotEnterSplitAmountIfUsingSplitPercent"		

							constraint (PrmSplitAmount < PaymentAmount.CurrencyAmount)
								"SplitAmountMustBeLessThanPaymentAmount"

						PrmSplitPercent
							if (PrmSplitAmount not entered)
								required
									"EitherSplitAmountOrSplitPercentIsRequired"
								for each PayablesInvoiceRetainageDistributionsRel
									constraint (PrmSplitPercent < each.RetainagePercentage)
										"SplitPercent<PrmSplitPercent>CannotBeGreaterThanOrEqualToCurrentPercent<each.RetainagePercentage>"	
									end for each 
							else
								cannot be entered
									"CannotEnterSplitPercentIfUsingSplitAmount"	
					Action Rules
						constraint (PayablesInvoice.Suffix != 999)
							"CannotMaintainACancelledPOInvoice"	

						constraint (IsRetainagePayment)
							"ActionIsOnlyValidForRetainagePayment"

						LocalRetainagePercent = first PayablesInvoiceRetainageDistributionsRel.RetainagePercentage

						if (PrmSplitAmount not entered)
							PrmSplitAmount = PaymentAmount.CurrencyAmount * (PrmSplitPercent / LocalRetainagePercent)

			            if (PrmSplitPercent not entered)
               				PrmSplitPercent = ((PrmSplitAmount / PaymentAmount.CurrencyAmount) * LocalRetainagePercent)

						LocalRetainagePaymentTotal	= (PaymentAmount.CurrencyAmount	- PrmSplitAmount)		

						invoke Update 
							invoked.PaymentAmount.CurrencyAmount	= PrmSplitAmount
							invoked.TransientCurrencyRefresh		= true

						invoke Create PayablesInvoicePayment
							assign result to NewPayablesInvoicePayment
							fill in fields from this instance
								except invoked.PaymentAmount
							invoked.PaymentAmount.CurrencyAmount 	= LocalRetainagePaymentTotal
							invoked.OnHold							= true
							invoked.RetainagePayment				= true
							invoked.AccrualCode						= PayablesInvoice.RetainageAccrualCode

						if (Company.VendorGroup.RetainageHoldCode entered)
							invoke Create PayablesOnHold
								invoked.HoldRecordType				= "P"
								invoked.VendorGroup					= Company.VendorGroup
								invoked.Company						= Company
								invoked.Vendor						= Vendor
								invoked.Invoice						= Invoice
								invoked.PayablesInvoice				= NewPayablesInvoicePayment.PayablesInvoice
								invoked.PayablesInvoicePayment.PaymentSequence		= NewPayablesInvoicePayment.PayablesInvoicePayment.PaymentSequence
								invoked.PayablesInvoicePayment.VoidSequence			= NewPayablesInvoicePayment.PayablesInvoicePayment.VoidSequence
								invoked.ProcessLevel				= ProcessLevel
								invoked.HoldCode					= Company.VendorGroup.RetainageHoldCode

						for each PayablesInvoiceRetainageDistributionsRel
							LocalRetainAdjustRetPmtAmt				= each.RetainageCalculatedAmount * PrmSplitPercent
							LocalRetainAdjustRelPmtAmt				= each.PaymentAmount - LocalRetainAdjustRetPmtAmt
							LocalRetainAdjustRetPercent				= each.RetainagePercentage

							invoke Update each
								invoked.PaymentAmount 	   			= LocalRetainAdjustRetPmtAmt
								invoked.RetainagePercentage			= PrmSplitPercent

							invoke Create PayablesInvoiceRetainageDistribution
								assign result to NewRetainageDistribution
								fill in fields from each
								invoked.PayablesInvoiceRetainageDistribution.InvoicePaymentSequence = NewPayablesInvoicePayment.PayablesInvoicePayment.PaymentSequence
								invoked.PaymentAmount				= LocalRetainAdjustRelPmtAmt
								invoked.RetainagePercentage			= LocalRetainAdjustRetPercent - PrmSplitPercent 





				AdjustRetainagePayment is an Instance Action		//	"Released" State
					restricted										
					Parameters
						PrmLineNbr			is a PayablesMatchLine
						PrmMatchSeqNbr		is a MatchDistributionSequence
						PrmDistribSeq		is a DistributionSequence
						PrmSplitAmount		is an InternationalAmount
						PrmSplitPercent		is a Pct

					Parameter Rules
						PrmLineNbr
							required
							LocalRetainAdjustMatchLine					= PrmLineNbr
						PrmMatchSeqNbr
							LocalRetainAdjustMatchDistributionSequence	= PrmMatchSeqNbr
						PrmDistribSeq
							required
							LocalRetainAdjustDistributionSequence		= PrmDistribSeq
						PrmSplitAmount
							if (PrmSplitPercent not entered)
								required
									"EitherSplitAmountOrSplitPercentIsRequired"		
							else
								cannot be entered
									"CannotEnterSplitAmountIfUsingSplitPercent"		
						PrmSplitPercent
							if (PrmSplitAmount not entered)
								required
									"EitherSplitAmountOrSplitPercentIsRequired"		
							else
								cannot be entered
									"CannotEnterSplitPercentIfUsingSplitAmount"		

					Action Rules
						constraint (PayablesInvoice.Suffix != 999)
							"CannotMaintainACancelledPOInvoice"		
						if (PrmSplitAmount entered)
							constraint (PrmSplitAmount < PayablesInvoiceRetainageDistributionRel.PaymentAmount)
								"SplitAmount<PrmSplitAmount>CannotBeGreaterThanPaymentAmount<PayablesInvoiceRetainageDistributionRel.PaymentAmount>"		
						if (PrmSplitPercent entered)
							constraint (PrmSplitPercent < PayablesInvoiceRetainageDistributionRel.RetainagePercentage)
								"SplitPercent<PrmSplitPercent>CannotBeGreaterThanOrEqualToCurrentPercent<PayablesInvoiceRetainageDistributionRel.RetainagePercentage>"	

						LocalRetainAdjustRetPercent		= PrmSplitPercent
						LocalRetainAdjustRetCalcAmt		= PayablesInvoiceRetainageDistributionRel.RetainageCalculatedAmount
						if (PrmSplitPercent entered)
							LocalRetainAdjustRetPmtAmt	= LocalRetainAdjustRetCalcAmt * LocalRetainAdjustRetPercent
							LocalRetainAdjustRelPmtAmt	= PayablesInvoiceRetainageDistributionRel.PaymentAmount - LocalRetainAdjustRetPmtAmt
							LocalRetainAdjustRelPercent	= LocalRetainAdjustRetPercent
						else
							LocalRetainAdjustRetPmtAmt	= PrmSplitAmount
							LocalRetainAdjustRelPmtAmt	= PayablesInvoiceRetainageDistributionRel.PaymentAmount - LocalRetainAdjustRetPmtAmt
							if (PayablesInvoiceRetainageDistributionRel.RetainagePercentage entered)
								LocalRetainAdjustRelPercent	= LocalRetainAdjustRetPmtAmt / LocalRetainAdjustRetCalcAmt
							else
								initialize LocalRetainAdjustRelPercent

						invoke Update PayablesInvoiceRetainageDistributionRel
							invoked.PaymentAmount 	   		= LocalRetainAdjustRetPmtAmt
							invoked.RetainagePercentage		= LocalRetainAdjustRelPercent

						invoke Create PayablesInvoiceRetainageDistribution
							assign result to NewRetainageDistribution
							fill in fields from PayablesInvoiceRetainageDistributionRel
							invoked.PayablesInvoiceRetainageDistribution.InvoicePaymentSequence	= PayablesInvoice.LastPaymentSequence + 1
							invoked.PaymentAmount		= LocalRetainAdjustRelPmtAmt
							initialize invoked.RetainagePercentage

						PaymentAmount.CurrencyAmount	-= LocalRetainAdjustRetPmtAmt

						invoke Create PayablesInvoicePayment
							assign result to NewPayablesInvoicePayment
							fill in fields from this instance
							invoked.PaymentAmount.CurrencyAmount = LocalRetainAdjustRelPmtAmt
							initialize invoked.OnHold




			SelectedForPayment is a State
				UnselectForPayment is an Instance Action	
					restricted					
					Action Rules
						constraint (Invoice !entered)		
							"UnselectForPaymentIsNoLongerValid."		




			SystemGeneratedPayment is a State

			ManuallyPaid is a State
				Entrance Rules
					if (OnHold)
						invoke TakeOffHold

				UnapplyFromBOE is an Instance Action
					valid when (IsDraftPayment)
					Parameters
						FinanceEnterpriseGroup
						BankTransactionCode
						PayablesBillOfExchange

					Parameter Rules
						FinanceEnterpriseGroup
							required
						BankTransactionCode
							required
						PayablesBillOfExchange
							required
							constraint (InvoiceCurrency = PayablesBillOfExchange.CashCode.Currency)
								"InvoiceCurrencyNotEqualToBillOfExchangeCurrency"
					Action Rules

						BankTransactionCode		= PayablesInvoice.BankTransactionCode
						CashCode				= PayablesInvoice.CashCode
						RemitToCode				= PayablesInvoice.RemitToCode
						PayVendor				= PayablesInvoice.PayVendor

						TransactionIDNumber		= blank
						TransactionNumber 		= blank
						CheckSuffix				= blank

						invoke Delete PayablesInvoicePaymentsOnHoldRel

						invoke UpdateAppliedAmount PayablesBillOfExchange
							invoked.PrmAppliedAmount		= PaymentAmount.CurrencyAmount * -1
							invoked.PrmBaseOriginalAmount	= PaymentAmount.FunctionalAmount.EnteredCurrencyAmount * -1
							invoked.PrmRevaluedBaseAmount	= PaymentAmount.FunctionalAmount.EnteredCurrencyAmount * -1

						make transition to Unreleased

			DraftPayable is a State
			UnreleasedManualPayment is a State
				Release is an Instance Action
					restricted
					valid when (PayablesInvoice.Status.Released)
					Action Rules
						make transition to ManuallyPaid
						if ((CashCode != PayablesInvoice.CashCode							
						or BankTransactionCode != PayablesInvoice.BankTransactionCode)
						and !PayablesInvoice.MultiplePayablesInvoicePaymentRelExists)
							invoke FastUpdate PayablesInvoice
								invoked.BankTransactionCode = BankTransactionCode
								invoked.CashCode = CashCode		
			Cancelled is a State
			Historical is a State
				InterfaceCreate is a Create Action
					restricted
					Entrance Rules
						constraint (CheckDate entered)
							"CheckDateRequiredWhenCreatingHistoricalPayment"
						constraint (TransactionNumber entered)
							"TransactionNumberRequiredWhenCreatingHistoricalPayment"
						ActionType = ActionType.CreateType
						include SaveDocumentTotalsEntranceRules
					Action Rules
						include SetCurrencyContext
						include UpdateLastDateTimeActor
						include UpdateIncomeCode
						include ComputeDiscountedAmounts		




						InvoiceGroup	= PayablesInvoice.InvoiceGroup
						CreatedBy		= actor

					Exit Rules
						if (TransactionIDNumber not entered
						and CashLedgerPayablesPaymentRel4 exists)
							TransactionIDNumber = first CashLedgerPayablesPaymentRel4.CashLedgerPayablesPayment.TransactionIDNumber
						if (BankCheckAmount !entered)



							if (CashCode.Currency	= InvoiceCurrency)
								BankCheckAmount		= NetPaymentAmount.CurrencyAmount
							else
								LocalExchangeDate									= CheckDate
								LocalCashCodePaymentExchange.TransactionAmount		= NetPaymentAmount.CurrencyAmount
								LocalCashCodePaymentExchange.BaseAmount.ToCurrency	= CashCode.Currency
								BankCheckAmount										= LocalCashCodePaymentExchange.BaseAmount.OutputCurrencyAmount

						LocalDocumentCurrencyTotals.TransactionTotal += PaymentAmount.CurrencyAmount
						include UpdateBaseTotalPaymentAmount

						if (TransientUpdatePaymentBalance)
							if (Vendor = PayVendor)		
								LocalRemitToCode	= RemitToCode
							else
								initialize LocalRemitToCode
							if (VendorBalanceFlexRel not exist)
								invoke Create VendorBalanceFlexRel
									invoked.Company				= Company
									invoked.VendorGroup			= Company.VendorGroup
									invoked.Vendor				= Vendor
									invoked.VendorLocation		= LocalRemitToCode
									if (Vendor.BalanceCurrency not entered)
										invoked.BalanceCurrency	= Company.Currency
									else
										invoked.BalanceCurrency	= InvoiceCurrency
							if (Vendor.BalanceCurrency not entered)
								invoke UpdateHistoricalPaymentBalances VendorBalanceFlexRel
									invoked.PrmPaymentDate			= CheckDate
									invoked.PrmPaymentAmount 		= NetPaymentAmount.FunctionalAmount.EnteredCurrencyAmount
									if (DiscountLost)
										invoked.PrmDiscountLost 	= DiscountAmount.FunctionalAmount.EnteredCurrencyAmount
									else
										invoked.PrmDiscountTaken	= DiscountAmount.FunctionalAmount.EnteredCurrencyAmount
									invoked.PrmIncomeWithholding	= BaseWithholdingAmount
							else
								invoke UpdateHistoricalPaymentBalances VendorBalanceFlexRel
									invoked.PrmPaymentDate			= CheckDate
									invoked.PrmPaymentAmount 		= NetPaymentAmount.CurrencyAmount
									if (DiscountLost)
										invoked.PrmDiscountLost 	= DiscountAmount.CurrencyAmount
									else
										invoked.PrmDiscountTaken	= DiscountAmount.CurrencyAmount
									invoked.PrmIncomeWithholding	= WithholdingAmount


				Update is an Update Action
					restricted

				Delete is a Delete Action
					restricted

FileCreationLogic.PayablesInvoicePayment is a BusinessClass

	Persistent Fields
	
	Local Fields

		LocalFinanceEnterpriseGroup is like FinanceEnterpriseGroup
		LocalFileCreationSetup		is like FileCreationSetup
					
	Relations

		FileCreationRecordNotProcessedRel
			one-to-many relation to FileCreationRecord
			Field Mapping uses ByStatus
				related.FinanceEnterpriseGroup 	= LocalFinanceEnterpriseGroup
				related.FileCreationSetup		= LocalFileCreationSetup
				related.Status					= 1
				related.Key1					= LocalPayablesCompany
				related.Key2					= LocalPayablesInvoice

		FileCreationRecordErrorRel
			one-to-many relation to FileCreationRecord
			Field Mapping uses ByStatus
				related.FinanceEnterpriseGroup 	= LocalFinanceEnterpriseGroup
				related.FileCreationSetup		= LocalFileCreationSetup
				related.Status					= 2
				related.Key1					= LocalPayablesCompany
				related.Key2					= LocalPayablesInvoice
		
	Derived Fields
				
	Actions
	
		GeneratePreviewRecordsForRunGroup is a Set Action
			restricted
			synchronized on untranslatable:"PayablesInvoicePayment_GeneratePreviewRecordsForRunGroup_<FinanceEnterpriseGroupPrm>_<PrmRunGroup>"

			Parameters
				FinanceEnterpriseGroupPrm		is a FinanceEnterpriseGroup
				FileCreationSetupPrm	is a FileCreationSetup
				BeginTimeStamp			is TimeStamp
				EndTimeStamp			is TimeStamp
				PrmNumberOfRunGroups	is Numeric 3
				PrmRunGroup				is Numeric 3

			Local Fields
				InPayablesInvoiceGroup					is Boolean
				LocalPayablesInvoiceGroupSelection		is a PayablesInvoice group in subject FileCreationPayablesInvoice

			Instance Selection
				where (GeneralLedgerCompanyRel.FinanceEnterpriseGroup = FinanceEnterpriseGroupPrm
				and    (PrmNumberOfRunGroups <= 1
				or      PayablesInvoice % PrmNumberOfRunGroups = PrmRunGroup)
				and	   update stamp > BeginTimeStamp
				and	   update stamp <= EndTimeStamp)

			Action Rules
				Instance Rules
					LocalFinanceEnterpriseGroup		= FinanceEnterpriseGroupPrm
					LocalFileCreationSetup	= FileCreationSetupPrm
					LocalPayablesCompany		= Company
					LocalPayablesInvoice		= PayablesInvoice
					if (FileCreationRecordNotProcessedRel not exist
					and	FileCreationRecordErrorRel not exist)	
						LocalPayablesInvoiceGroupSelection = FileCreationSetupPrm.EligibilityGroup
						if (LocalPayablesInvoiceGroupSelection entered)
							InPayablesInvoiceGroup = false
							if (PayablesInvoice within LocalPayablesInvoiceGroupSelection)
								InPayablesInvoiceGroup = true

						if (LocalPayablesInvoiceGroupSelection not entered
						or	InPayablesInvoiceGroup)											
							invoke Create FileCreationRecord
								invoked.FinanceEnterpriseGroup		= FinanceEnterpriseGroupPrm
								invoked.FileCreationSetup	= FileCreationSetupPrm
								invoked.Key1				= Company
								invoked.Key2				= PayablesInvoice
								invoked.SystemTimeStamp		= EndTimeStamp
								invoked.EffectiveDate		= system current corporate date
								invoked.Status				= 1
