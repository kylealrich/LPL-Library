ProjectUpload is a BusinessClass
	owned by Projects
	prefix is PRJUP   
    
    Ontology
    	symbolic key is ProjectUpload

    Patterns
 		disable Auditing 
 		disable EffectiveDated
 		disable AsOfDateProcessing
		implements InlineUserFields
			size is 3000
			
    Persistent Fields
    	ParentProject				is like Project
    	Project						is like Project
		RecordType					is Numeric 1
		    States	    
		    	Summary	value is 2
		    	Posting	value is 1		
		Description					
		Active
		SystemProject				is Boolean
		ProjectStatus
		BudgetIdentifier
    	IncludeInBudgetEdit			is Boolean     			
    	ProjectDateRange
		ErrorMessage				is Alpha 150
        Currency
		Billable					is Boolean
		Capital						is Boolean		
		Watch						is Boolean	
		WatchedBy   			    is an Employee				
		Contract					is Boolean
		ContractAmount				is an InternationalAmount
		ContractCurrency			is a Currency
		ContractBillingMethod		is Numeric size 1
			States
				CostReimbursement	value is 1
				CostPlus			value is 2
				TimeAndMaterials	value is 3
				Milestone			value is 4
				Installment			value is 5
				RateTable			value is 6
		ContractMarkupPercent		is Percent size 5.2
		ContractBillingRateTable	is a ProjectBillingRateTable
		ContractAllocateExpenditures is Boolean
		ContractRevenueRecognition	is Numeric size 1
			States
				Combined				value is 1
				Separate				value is 2
		ContractRevenueMethod		is Numeric size 1
			States
				FullAccrual				value is 1
				Milestone				value is 2
				PercentageOfCompletion	value is 3
				Installment				value is 4
		ContractExcludeAP			is Boolean
		ContractMaximumFees			is an InternationalAmount	
		ContractID					is Alpha size up to 30		
		ContractType				is a ProjectContractType
		PersonResponsible			is an Employee
        SalaryCap					is a ProjectSalaryCap
        	version is DerivedSalaryCapVersionDate
        SalaryCapDate				is Numeric size 1
        	States
        		ProjectStartDate		value is 1
        		LaborPeriodEndingDate	value is 2
		OverageCodeBlock			is a FinanceCodeBlockOverage
			default label is "SalaryCapOverageFinanceStructure"
        BillingMethod				is a ProjectBillingMethod
		MarkupPercent				is Percent size 5.2
		BillingRateTable			is a ProjectBillingRateTable		
		FinanceCodeBlock			is a FinanceCodeBlockNoProject 
			default label is "LaborDistributionFinanceStructure"
		BurdenCode					is a ProjectBurdenCode
		FringeBurden				is Numeric size 1
			States
				No					value is 0
				DefaultFromEmployee	value is 1
				DefaultFromProject	value is 2
		BurdenCodeBlock				is a FinanceCodeBlockNoProject 
			default label is "FringeBurdenFinanceStructure"			
		TaxExempt					is Boolean
#ifdef module tx
		TaxCode
			default label is "ServiceLocationTaxCode"		
		BuyerTaxCode				is a TaxCode
#endif
#ifndef module tx
		TaxCode 					is AlphaUpper size 15
			default label is "ServiceLocationTaxCode"		
		BuyerTaxCode	 			is AlphaUpper size 15
#endif
		ProjectServiceLocation
			default label is "ServiceLocation"
		BuyerTaxLocation	is a ProjectServiceLocation	
		RevenueAccountOnly	is a GeneralLedgerChartAccount	
		RevenueDimension	is a ProjectCodeBlock			
		RevenueCodeBlockOption
		RevenueFullAccount		is a FinanceCodeBlockFullNoProjectFD2
			default label is "FullRevenueFinanceStructure"
		RevenuePartialAccount	is a FinanceCodeBlockNoProjectFD2
			default label is "PartialRevenueFinanceStructure"
		AddressCode
		FeesExempt				is Boolean
			default label is "ExcludeFees"
		ProjectTeam
		ExpenseManagement		is Boolean		
		BillingMaximum			is an InternationalAmount
		WorkType				is a ProjectWorkType
		ServiceType				is a ProjectServiceType
		UsageType				is a ProjectUsageType		
		CertificationRequired	is Boolean
    	PreAwardID 				is Alpha size 25
    		default label is "Pre-AwardID"
		FrontEndSplits			is Boolean
			default label is "FrontEndSplit"
		ProgramIncome					is Boolean
		ProgramIncomeType				is Numeric size 1
			States
				Additive	    value is 1
				Deductive		value is 2
				CostShare		value is 3

		ExcludeFromFES			is Boolean
		DeferAndHoldRemainder	is Boolean
		DefaultCodeBlock		is a FinanceCodeBlockNoProject
			default label is "DefaultFinanceStructure"
		RemainderOption			is Numeric size 1
			default label is "DeferAndHoldRemainder"
			States
				DeferOnly		value is 1
				DeferAndHold	value is 2
		SingleProjectInvoice			is Boolean
			default label is "SingleProjectInvoices"
		SingleProjectRevenue			is Boolean
			default label is "SingleProjectRevenueRecognition"
		SequenceProject			is like Project
		ParentSequenceProject	is like Project
		LikeProjectField		is a Project
		FinanceDimension2		
		PreAwardAssignmentDays	is Numeric size 3

   	Context Fields
   		
    Transient Fields
		BypassEdits
		
	Derived Fields
		SummaryPrefix			is a StringField
			type is AlphaUpper 15
			restricted			
			ProjectStructure.StructureSequence
			"_*"
				
		DerivedParentProject is a DerivedField
			type is like Project

			if (ParentProject entered)
				return DerivedParentProjectString
			else
				return TopNodeString

		DerivedSequenceParentProject is a DerivedField
			type is like Project
			restricted
			if (ParentSequenceProject entered)
				return ParentSequenceProject
			else
				return DerivedParentProject  
				
		TopNodeString			is a StringField
			type is AlphaUpper 25
			restricted			
			ProjectStructure.StructureSequence
			"_TOP_NODE"
							
		DerivedParentProjectString is a StringField
			type is AlphaUpper 25
			restricted			
			ProjectStructure.StructureSequence
			"_"
			ParentProject
		
		DerivedSummaryProject is a StringField
			type is AlphaUpper 25
			restricted			
			ProjectStructure.StructureSequence
			"_"
			Project
				
		DerivedSalaryCapVersionDate is a DerivedField
			type is Date
			restricted
			if (SalaryCapDate.ProjectStartDate)
				return ProjectDateRange.BeginDate
			else
				return current corporate date
				
		ActorSecurityGroup is a DerivedField
			type is like ProjectSecurityGroup
			return actor.context.ProjectSecurityGroup
				
		DerivedSecurityGroupAllowsAccess is a DerivedField
			type is Boolean
			if (ActorSecurityGroup not entered)
				LocalSecurityGroupAllowsMaintenance = true
				return true
			if (SecurityGroupDetailRel exists)
				if (parentcontext.name != "AccountAnalysisSettings")
					if (!SecurityGroupDetailRel.CreatedForHierarchyAccess)
						LocalSecurityGroupAllowsMaintenance = true
					return true
				else
					if (!SecurityGroupDetailRel.CreatedForHierarchyAccess)
						return true	
			return false
		
		DerivedSummarySequenceProject is a DerivedField
			type is like Project
			restricted
			if (SequenceProject entered)
				return SequenceProject
			else 
				return DerivedSummaryProject
				
	Local Fields
		LocalCodeBlockRelation						is a CodeBlockRelation

		LocalSecurityGroupAllowsMaintenance 		is Boolean
					
	Conditions

 		ErrorTransaction
			restricted 		
 			when (ErrorMessage entered)

 		InEnterpriseStructure
 			restricted
 			when (ProjectStructure = FinanceEnterpriseGroup.EnterpriseProjectStructure)

 		NotInEnterpriseStructure
 			restricted
 			when (!InEnterpriseStructure
			and  !ProjectHierarchyEnterpriseRel exists)
		
		HasSalaryCap
			restricted
			when (SalaryCap entered)
			
		ValidDateRange
			when (GeneralLedgerPeriodShadowStartDatesRel exists
			and   GeneralLedgerPeriodShadowEndDatesRel exists)

		FromOrToRelationExists
 			restricted
 			when (CodeBlockRelationFromRel exists
 			or    CodeBlockRelationToRel exists)
 			
 		SecurityGroupAllowsAccess
			when ((FinanceEnterpriseGroup.ProjectEntry = false)
			or    (actor.context.ProjectSecurityGroup = "")
			or    (actor.context.ProjectSecurityGroup != ""
			and    DerivedSecurityGroupAllowsAccess = true))
 			
 	Sets
 		ByDimension
			Sort Order
				FinanceEnterpriseGroup
				ProjectStructure
				Project
				ProjectUpload.RunGroup
				ProjectUpload.Sequence
					
	Relations
		ProjectHierarchyRel
			one-to-one relation to ProjectHierarchy
			Field Mapping uses symbolic key
				related.FinanceEnterpriseGroup  = FinanceEnterpriseGroup
				related.ProjectStructure 		= ProjectStructure
				related.Project		   			= Project
		ProjectHierarchyEnterpriseRel
			one-to-one relation to ProjectHierarchy
			Field Mapping uses symbolic key
				related.FinanceEnterpriseGroup  = FinanceEnterpriseGroup
				related.ProjectStructure 		= FinanceEnterpriseGroup.EnterpriseProjectStructure	
				related.Project		   			= Project

		OtherRecordsInRunGroupRel
			one-to-many relation to ProjectUpload
			Field Mapping uses symbolic key
				related.FinanceEnterpriseGroup  = FinanceEnterpriseGroup
				related.ProjectStructure 		= ProjectStructure
			Instance Selection
				where (related.ProjectUpload.RunGroup = ProjectUpload.RunGroup)
				
		ParentProjectRel
			one-to-one relation to Project
			Field Mapping uses symbolic key
				related.FinanceEnterpriseGroup	= FinanceEnterpriseGroup
				related.Project					= DerivedParentProject
				
		GeneralLedgerCalendarPeriodStartDateRel
			one-to-many relation to GeneralLedgerCalendarPeriod
			Field Mapping uses LeafRecords
				related.FinanceEnterpriseGroup = FinanceEnterpriseGroup
			Instance Selection
				where (related.DerivedBeginDateGregorian not > ProjectDateRange.BeginDate)

							
		GeneralLedgerCalendarPeriodEndDateRel
			one-to-many relation to GeneralLedgerCalendarPeriod
			Field Mapping uses LeafRecords
				related.FinanceEnterpriseGroup = FinanceEnterpriseGroup
			Instance Selection
				where (related.Date not < ProjectDateRange.EndDate)
							
		GeneralLedgerPeriodShadowStartDatesRel
			one-to-many relation to GeneralLedgerPeriodShadow
			Field Mapping uses symbolic key
				related.FinanceEnterpriseGroup			   = FinanceEnterpriseGroup
				related.GeneralLedgerCalendar			   = ProjectStructure.GeneralLedgerCalendar
				related.GeneralLedgerCalendarPeriod        = any GeneralLedgerCalendarPeriodStartDateRel.GeneralLedgerCalendarPeriod
				
		GeneralLedgerPeriodShadowEndDatesRel
			one-to-many relation to GeneralLedgerPeriodShadow
			Field Mapping uses symbolic key
				related.FinanceEnterpriseGroup			   = FinanceEnterpriseGroup
				related.GeneralLedgerCalendar			   = ProjectStructure.GeneralLedgerCalendar
				related.GeneralLedgerCalendarPeriod        = any GeneralLedgerCalendarPeriodEndDateRel.GeneralLedgerCalendarPeriod
				
		CodeBlockRelationFromRel
			one-to-many relation to CodeBlockRelation
			Field Mapping uses ByFromTo
				related.FinanceEnterpriseGroup		= FinanceEnterpriseGroup
				related.FromField					= 4
		CodeBlockRelationToRel
			one-to-many relation to CodeBlockRelation
			Field Mapping uses ByToFrom
				related.FinanceEnterpriseGroup		= FinanceEnterpriseGroup
				related.ToField						= 4
		CodeBlockRelationRuleDynamicRel
			one-to-many relation to CodeBlockRelationRule
			Field Mapping uses symbolic key
				related.FinanceEnterpriseGroup			= FinanceEnterpriseGroup
				related.CodeBlockRelation				= LocalCodeBlockRelation
			Instance Selection
				where (related.Active
				and    related.DynamicCreate)		

		DisplayProjectRel
			one-to-many relation to Project
			Field Mapping uses ByDisplayProject
				related.FinanceEnterpriseGroup 		= FinanceEnterpriseGroup
				related.DisplayProject   			= Project

		PostingProjectRel
			one-to-many relation to Project
			Field Mapping uses ByDisplayProject
				related.FinanceEnterpriseGroup 		= FinanceEnterpriseGroup	
				
		SecurityGroupDetailRel
			one-to-one relation to FinanceDimensionSecurityGroupDetail
			Field Mapping uses symbolic key
				related.FinanceEnterpriseGroup 		    	= FinanceEnterpriseGroup
				related.DimensionGroupType					= 13
				related.FinanceDimensionSecurityGroup   	= ActorSecurityGroup
				related.FinanceDimensionSecurityGroupDetail = DisplayProjectRel.Project	


	Field Rules
    	Project
    		required
		RecordType
			initial value is ProjectHierarchyEnterpriseRel.ProjectType
			default to ProjectHierarchyEnterpriseRel.ProjectType
		   	required
		   	if (RecordType.Posting)
		   		constraint (!NotInEnterpriseStructure)
		   			"PostingProjectsMustBePartOfTheEnterpriseProjectStructure"	
		   	cannot be changed
		   	
		Description
			initial value is ProjectHierarchyEnterpriseRel.Project.Description
			default to ProjectHierarchyEnterpriseRel.Project.Description
			required
			
		BudgetIdentifier
			constraint (RecordType.Summary)
				"BudgetIdentifierOnlyValidForSummaryProjects"			
				
		IncludeInBudgetEdit
			constraint (RecordType.Posting)
				"OnlyValidForExcludeFromBudgetEditPosting<FinanceEnterpriseGroup.ProjectLabel>"			

		WatchedBy
			constraint (Watch)	
				"WatchIsRequiredWhenWatchedByIsEntered"

		ProjectDateRange
			if (!BypassEdits)		
				if (SystemProject)
					initialize ProjectDateRange
				if (Contract)
					required
						"DateRangeRequiredWhenThisIsAContract<FinanceEnterpriseGroup.ProjectLabel>"
				else
					if (RecordType.Posting
					and InEnterpriseStructure
					and !SystemProject)
						required
							"DateRangeRequiredForPosting<FinanceEnterpriseGroup.ProjectLabel>"
			if (!BypassEdits)
				if (InEnterpriseStructure)	
					constraint (ValidDateRange)
						"DateRangeMustBeWithinProjectStructureCalendarDateRange"					

		PreAwardAssignmentDays
			if (!BypassEdits)		
				constraint (RecordType.Posting)
					"PreAwardAssignmentDaysValidOnlyForPosting<FinanceEnterpriseGroup.ProjectLabel>"				
				if (SystemProject)
					initialize PreAwardAssignmentDays

		ProjectStatus
        	if (RecordType.Posting)
				required
					"ProjectStatusRequiredForPosting<FinanceEnterpriseGroup.ProjectLabel>"				
			else
				cannot be entered
					"ProjectStatusValidOnlyForPosting<FinanceEnterpriseGroup.ProjectLabel>"				








										
		Contract
			if (!BypassEdits)	
				if (Contract)	
					constraint (RecordType.Summary)
						"NotValidForPostingProject"
					if (RecordType.Summary)
				   		constraint (InEnterpriseStructure)			
							"ContractValidForSummaryWithinEnterpriseStructureOnly<FinanceEnterpriseGroup.ProjectLabel>"

		ContractAmount
			if (!BypassEdits)		
		        if (Contract)		
					required
						"ContractAmountIsRequired"
					
		ContractCurrency
			if (!BypassEdits)		
		        if (Contract)	
					default to FinanceEnterpriseGroup.EnterpriseProjectStructure.Currency		        	
					required
						"CurrencyIsRequired"
					
		ContractBillingMethod
			if (!BypassEdits)		
		        if (Contract)		
					required
						"BillingMethodIsRequired"

		ContractRevenueRecognition
			if (!BypassEdits)		
		        if (Contract)		
					required
						"RevenueRecognitionIsRequired"

		ContractMarkupPercent
			if (!BypassEdits)		
		        if (Contract)	
		        	if (ContractMarkupPercent entered)	
						constraint (ContractBillingMethod.CostPlus or ContractBillingMethod.TimeAndMaterials or ContractBillingMethod.RateTable)
							"MarkupPercentValidForBillingMethodsCostPlus,TimeAndMaterials,AndRateTableOnly"

		ContractBillingRateTable
			if (!BypassEdits)		
		        if (Contract)	
		        	if (ContractBillingRateTable entered)	
						constraint (ContractBillingMethod.RateTable)
							"BillingRateTableOnlyValidWhenBillingMethodIsRateTable"
						constraint (ContractBillingRateTable.Currency = ContractCurrency)
							"BillingRateTableCurrencyMustMatchContractCurrency"
					if (ContractBillingMethod.RateTable)
						constraint (ContractBillingRateTable entered)					
							"BillingRateTableRequired"

		ContractRevenueMethod
			if (!BypassEdits)		
		        if (Contract)		
					if (ContractRevenueRecognition.Separate)
						required
							"RevenueMethodIsRequired"					
					else
						ContractRevenueMethod = blank

		Currency
			if (!BypassEdits)		
				if (RecordType.Posting)
					default to FinanceEnterpriseGroup.EnterpriseProjectStructure.Currency				
					required
						"CurrencyRequiredForPosting<FinanceEnterpriseGroup.ProjectLabel>"
				if (Currency entered)		
					constraint (RecordType.Posting)
						"CurrencyValidOnlyForPosting<FinanceEnterpriseGroup.ProjectLabel>"
				
		PersonResponsible
			if (!BypassEdits)	
				if (PersonResponsible entered)				
					constraint (RecordType.Summary)
						"NotValidForPostingProject"
				if (RecordType.Summary)
			   		constraint (InEnterpriseStructure)			
						"PersonResponsibleValidForSummaryWithinEnterpriseStructureOnly<FinanceEnterpriseGroup.ProjectLabel>"

		ProjectTeam
			if (!BypassEdits)	
				if (ProjectTeam entered)	
					constraint (RecordType.Summary)
						"NotValidForPostingProject"
				if (RecordType.Summary)
			   		constraint (InEnterpriseStructure)			
						"ResponsibleTeamValidForSummaryWithinEnterpriseStructureOnly<FinanceEnterpriseGroup.ProjectLabel>"

		SalaryCap
			if (!BypassEdits)
				if (SalaryCap entered)
					constraint (RecordType.Posting)
						"SalaryCapValidOnlyForPosting<FinanceEnterpriseGroup.ProjectLabel>"				
					constraint (SalaryCap.Currency = Currency)
						"SalaryCapCurrencyMustMatchProjectCurrency"

		SalaryCapDate
			if (!BypassEdits)		
				if (SalaryCap entered)
					default to SalaryCapDate.ProjectStartDate
				else
					cannot be entered
						"SalaryCapDateValidOnlyWhenSalaryCapEntered"

		OverageCodeBlock
			if (!BypassEdits)	
				if (OverageCodeBlock entered)				
					constraint (SalaryCap entered)
						"SalaryCapOverageFinanceStructureValidOnlyWhenSalaryCapEntered"

		BillingMethod
			if (!BypassEdits)
				if (BillingMethod entered)	
					constraint (RecordType.Posting)
						"BillingMethodValidOnlyForPosting<FinanceEnterpriseGroup.ProjectLabel>"

		MarkupPercent
			if (!BypassEdits)
				if (MarkupPercent entered)		
					constraint (BillingMethod.CostPlus or BillingMethod.TimeAndMaterials or BillingMethod.RateTable)
						"MarkupPercentValidForBillingMethodsCostPlus,TimeAndMaterials,AndRateTableOnly"

		BillingRateTable
			if (!BypassEdits)
				if (BillingRateTable entered)
					constraint (BillingMethod.RateTable)
						"BillingRateTableOnlyValidWhenBillingMethodIsRateTable"
					constraint (BillingRateTable.Currency = Currency)
						"BillingRateTableCurrencyMustMatchContractCurrency"
				if (BillingMethod.RateTable)
					required
						"BillingRateTableRequired"

		BillingMaximum
			if (!BypassEdits)
				if (BillingMaximum entered)		
					constraint (RecordType.Posting)
						"BillingMaximumValidOnlyForPosting<FinanceEnterpriseGroup.ProjectLabel>"

		FinanceCodeBlock
			if (!BypassEdits)
				if (FinanceCodeBlock entered)	
					constraint (RecordType.Posting)
						"FinanceStructureValidOnlyForPosting<FinanceEnterpriseGroup.ProjectLabel>"
				
		BurdenCode
			if (!BypassEdits)	
				if (BurdenCode entered)		
					constraint (RecordType.Posting)
						"BurdenCodeValidOnlyForPosting<FinanceEnterpriseGroup.ProjectLabel>"
				if (FringeBurden.DefaultFromProject)
					required
						"BurdenCodeRequiredWhenFringeBurdenIsDefaultFromProject"				
				else
					cannot be entered
						"BurdenCodeOnlyValidWhenBeingDefaultedFromProject"
				
		FringeBurden
			if (!BypassEdits)	
				if (FringeBurden entered)	
					constraint (RecordType.Posting)
						"FringeBurdenValidOnlyForPosting<FinanceEnterpriseGroup.ProjectLabel>"
				
		BurdenCodeBlock
			if (!BypassEdits)	
				if (BurdenCodeBlock entered)	
					constraint (RecordType.Posting)
						"FringeBurdenFinanceStructureValidOnlyForPosting<FinanceEnterpriseGroup.ProjectLabel>"
				if (FringeBurden.DefaultFromProject)
					required
						"FringeBurdenFinanceStructureRequiredWhenFringeBurdenIsDefaultFromProject"				
				else
					cannot be entered
						"FringeBurdenFinanceStructureOnlyValidWhenBeingDefaultedFromProject"

#ifdef module tx
		TaxExempt
			if (!BypassEdits)	
				if (TaxExempt)	
					constraint (RecordType.Posting)
						"TaxExemptStatusOnlyValidForPosting<FinanceEnterpriseGroup.ProjectLabel>"

		TaxCode
			if (!BypassEdits)
				if (TaxCode entered)					
					constraint (RecordType.Posting)
						"TaxCodeOnlyValidForPosting<FinanceEnterpriseGroup.ProjectLabel>"
					constraint (!TaxExempt)
						"TaxCodeOnlyValidWhenTaxable"

		ProjectServiceLocation
			if (!BypassEdits)		
				if (ProjectServiceLocation entered)			
					constraint (RecordType.Posting)
						"ServiceLocationOnlyValidForPosting<FinanceEnterpriseGroup.ProjectLabel>"
					constraint (!TaxExempt)
						"ServiceLocationOnlyValidWhenTaxable"
					constraint (TaxCode not entered)
						"CannotEnterBothTaxCodeAndServiceLocation"

		BuyerTaxCode
			if (!BypassEdits)
				if (BuyerTaxCode entered)					
					constraint (RecordType.Posting)
						"BuyerTaxCodeOnlyValidForPosting<FinanceEnterpriseGroup.ProjectLabel>"
					constraint (!TaxExempt)
						"BuyerTaxCodeOnlyValidWhenTaxable"

		BuyerTaxLocation
			if (!BypassEdits)		
				if (BuyerTaxLocation entered)			
					constraint (RecordType.Posting)
						"BuyerTaxLocationOnlyValidForPosting<FinanceEnterpriseGroup.ProjectLabel>"
					constraint (!TaxExempt)
						"BuyerTaxLocationOnlyValidWhenTaxable"
					constraint (BuyerTaxCode not entered)
						"CannotEnterBothBuyerTaxCodeAndTaxLocation"
#endif
		RevenueCodeBlockOption
			if (!BypassEdits)
				if (RevenueCodeBlockOption entered)
					constraint (RecordType.Posting)
						"RevenueStructureOptionOnlyValidForPosting<FinanceEnterpriseGroup.ProjectLabel>"

		RevenueFullAccount
			if (!BypassEdits)
				if (RevenueCodeBlockOption.FullStructure)
					required
						"FullRevenueFinanceStructureRequiredFor<FinanceEnterpriseGroup.ProjectLabel>Invoicing"
				else
					cannot be entered
						"CannotEnterFullRevenueFinanceStructureUnlessRevenueStructureOptionIs_Full"

		RevenuePartialAccount
			if (!BypassEdits)
				if (RevenueCodeBlockOption.PartialStructure)
					required
						"PartialRevenueFinanceStructureRequiredFor<FinanceEnterpriseGroup.ProjectLabel>Invoicing"
					constraint (RevenuePartialAccount.GeneralLedgerChartAccount entered)
						"Revenue<FinanceEnterpriseGroup.AccountLabel>Required"
				else
					cannot be entered
						"CannotEnterPartialRevenueFinanceStructureUnlessRevenueStructureOptionIs_Partial"

		FeesExempt
			if (!BypassEdits)
				if (FeesExempt)					
					constraint (RecordType.Posting)
						"ExcludeFeesOnlyValidForPosting<FinanceEnterpriseGroup.ProjectLabel>"

		WorkType
			if (!BypassEdits)
				if (WorkType entered)
					constraint (RecordType.Posting)
						"WorkTypeOnlyValidForPosting<FinanceEnterpriseGroup.ProjectLabel>"
		
		ServiceType
			if (!BypassEdits)
				if (ServiceType entered)
					constraint (RecordType.Posting)
						"ServiceTypeOnlyValidForPosting<FinanceEnterpriseGroup.ProjectLabel>"

		UsageType
			if (!BypassEdits)
				if (UsageType entered)
					constraint (RecordType.Posting)
						"UsageTypeOnlyValidForPosting<FinanceEnterpriseGroup.ProjectLabel>"
		CertificationRequired
			if (!BypassEdits)
				if (CertificationRequired)
					constraint (RecordType.Posting)
						"CertificationRequiredOnlyValidForPosting<FinanceEnterpriseGroup.ProjectLabel>"
		PreAwardID		
			if (!BypassEdits)		
				constraint (RecordType.Posting)
					"Pre-AwardIDOnlyValidForPosting<FinanceEnterpriseGroup.ProjectLabel>"

		ExcludeFromFES
			if (!BypassEdits)
				if (ExcludeFromFES)					
					constraint (RecordType.Posting)
						"ExcludeFromFrontEndSplitsOnlyValidForPosting<FinanceEnterpriseGroup.ProjectLabel>"

		DefaultCodeBlock
			if (!BypassEdits)
				if (DefaultCodeBlock entered)					
					constraint (RecordType.Posting)
						"DefaultFinanceStructureOnlyValidForPosting<FinanceEnterpriseGroup.ProjectLabel>"











						
		FinanceDimension2		
			constraint (FinanceEnterpriseGroup.ProjectInvoicing)
				"RelatedFundingSourceIsOnlyValidForProjectInvoicing"		
			constraint (RecordType.Posting)
				"RelatedFundingSourceIsOnlyValidForPostingProject"
			constraint (FinanceDimension2.PostingDimension)
				"RelatedFundingSourceMustBePostingDimension"	

    Actions
		Create is a Create Action
			Entrance Rules
				if (!ProjectUpload.Sequence entered)
					ProjectUpload.Sequence = (last OtherRecordsInRunGroupRel.ProjectUpload.Sequence + 1)


				if (LikeProjectField entered)
					constraint (RecordType.Posting)
							"ProjectInStructureValidOnlyForPosting<FinanceEnterpriseGroup.ProjectLabel>"
		Update is an Update Action

		Delete is a Delete Action

		Purge is a Purge Action
			restricted

		UploadHierarchy is a Set Action
			restricted
			
			Parameters
				PrmFinanceEnterpriseGroup	is a FinanceEnterpriseGroup
					default label is "FinanceEnterpriseGroup"				
				PrmProjectStructure			is a ProjectStructure
					default label is "ProjectStructure"				
				PrmRunGroup					is AlphaUpper 30
					default label is "RunGroup"
				
			Parameter Rules
				PrmFinanceEnterpriseGroup
					required
				PrmProjectStructure
					required
				PrmRunGroup
					required

			Local Fields	
				LocalRecordCreated	is Boolean
				LocalErrorMessage	is Alpha 150
				LocalProject		is a Project
				DynamicRulesExist	is Boolean		
				LocalRemainderOption is Numeric size 1
				
			Instance Selection
				where (FinanceEnterpriseGroup = PrmFinanceEnterpriseGroup
				and	   ProjectStructure		  = PrmProjectStructure
				and    ProjectUpload.RunGroup = PrmRunGroup)

			Set Is
				PrmFinanceEnterpriseGroup
				PrmProjectStructure
								
			Sort Order
				FinanceEnterpriseGroup
				ProjectStructure
				ProjectUpload.RunGroup
				ProjectUpload.Sequence

			Action Rules
				FinanceEnterpriseGroup Set Rules
					Entrance Rules
						DynamicRulesExist = false
						if (FromOrToRelationExists)
							if (CodeBlockRelationToRel exists)
								for each CodeBlockRelationToRel
									LocalCodeBlockRelation		= each.CodeBlockRelation
									if (CodeBlockRelationRuleDynamicRel exists)
										DynamicRulesExist = true
							if (!DynamicRulesExist
							and CodeBlockRelationFromRel exists)
								for each CodeBlockRelationFromRel
									LocalCodeBlockRelation		= each.CodeBlockRelation
									if (CodeBlockRelationRuleDynamicRel exists)
										DynamicRulesExist = true
										
					Exit Rules



								
				Instance Rules
					if (DeferAndHoldRemainder entered
					and RemainderOption not entered)
						LocalRemainderOption = 2
					else
						LocalRemainderOption = RemainderOption
					initialize LocalErrorMessage
					if (RecordType.Posting)
						LocalProject = Project
					else
						LocalProject = DerivedSummarySequenceProject
					if (LocalProject exists)
						if  (RecordType.Posting
						and !ProjectHierarchyRel exists)
							invoke AddPostingProjectToStructure LocalProject
								resume on error
									LocalErrorMessage		= error message	
								invoked.PrmStructure		= ProjectStructure						
								invoked.PrmParentProject    = DerivedSequenceParentProject
						else					
							if (DerivedSequenceParentProject != LocalProject.DerivedParentProject)
								invoke Move LocalProject
									resume on error
										LocalErrorMessage	= error message
									invoked.NewParent = DerivedParentProject
							if (!LocalErrorMessage entered)
								invoke Update LocalProject
									resume on error
										LocalErrorMessage	= error message							
									fill in fields from this instance
										except invoked.Project 
										except invoked.ParentProject
									invoked.BypassUpdateStructure = true
								if (ProjectStructure = FinanceEnterpriseGroup.EnterpriseProjectStructure
								and Contract
								and LocalErrorMessage not entered)
									invoke Update LocalProject.ProjectContract
										resume on error
											LocalErrorMessage	= error message							
										invoked.ContractAmount		 = ContractAmount
										invoked.Currency			 = ContractCurrency
										invoked.BillingMethod		 = ContractBillingMethod
										invoked.RevenueRecognition	 = ContractRevenueRecognition
										invoked.RevenueMethod		 = ContractRevenueMethod
										invoked.AllocateExpenditures = ContractAllocateExpenditures
										invoked.ExcludeAP			 = ContractExcludeAP
										invoked.MaximumFees			 = ContractMaximumFees
										invoked.MarkupPercent		 = ContractMarkupPercent
										invoked.BillingRateTable	 = ContractBillingRateTable
										invoked.ContractID			 = ContractID								
										invoked.ContractType		 = ContractType
										invoked.FrontEndSplits	     = FrontEndSplits
										invoked.RemainderOption 	 = LocalRemainderOption
										invoked.SingleProjectInvoice = SingleProjectInvoice
										invoked.SingleProjectRevenue = SingleProjectRevenue
								if (!LocalErrorMessage entered)
									invoke UpdateStructure LocalProject
										resume on error
											LocalErrorMessage	= error message											
					else
						LocalRecordCreated = true
						invoke Create Project
							resume on error
								LocalErrorMessage		= error message
							fill in fields from this instance
								except invoked.ParentProject
								except invoked.Contract
								except invoked.ContractAmount
								except invoked.ContractCurrency
								except invoked.ContractBillingMethod
								except invoked.ContractMarkupPercent
								except invoked.ContractBillingRateTable
								except invoked.ContractAllocateExpenditures
								except invoked.ContractRevenueRecognition
								except invoked.ContractRevenueMethod
								except invoked.ContractExcludeAP
								except invoked.ContractMaximumFees
								except invoked.ContractID
								except invoked.ContractType
								except invoked.FrontEndSplits
								except invoked.ProgramIncome
								except invoked.ProgramIncomeType
								except invoked.RemainderOption
								except invoked.SingleProjectInvoice
								except invoked.SingleProjectRevenue
								except invoked.LikeProjectField

							invoked.ProjectType 				   = RecordType
							if (!DynamicRulesExist)
								invoked.BypassNewStructureNotification = true
							else
								invoked.BypassNewStructureNotification = false
							invoked.Active						   = Active
							if(LikeProjectField entered)
								invoked.LikeProjectField    	   = LikeProjectField
							if (ProjectStructure = FinanceEnterpriseGroup.EnterpriseProjectStructure
							and Contract)
								invoked.Contract						= Contract
								invoked.ContractAmount		        	= ContractAmount
								invoked.ContractCurrency				= ContractCurrency
								invoked.ContractBillingMethod			= ContractBillingMethod
								invoked.ContractMarkupPercent			= ContractMarkupPercent
								invoked.ContractBillingRateTable		= ContractBillingRateTable
								invoked.ContractAllocateExpenditures	= ContractAllocateExpenditures
								invoked.ContractRevenueRecognition		= ContractRevenueRecognition
								invoked.ContractRevenueMethod			= ContractRevenueMethod
								invoked.ContractExcludeAP				= ContractExcludeAP
								invoked.ContractMaximumFees				= ContractMaximumFees
								invoked.ContractID					    = ContractID
								invoked.ContractType					= ContractType	
								invoked.FrontEndSplits                  = FrontEndSplits	
								invoked.ProgramIncome					= ProgramIncome
								invoked.ProgramIncomeType				= ProgramIncomeType
								invoked.RemainderOption					= LocalRemainderOption								
								invoked.SingleProjectInvoice			= SingleProjectInvoice
								invoked.SingleProjectRevenue			= SingleProjectRevenue
							if (ParentProject entered)
								invoked.ParentDimension = DerivedParentProject
					if (!LocalErrorMessage entered)
						invoke Delete
						if (DynamicRulesExist)
							commit transaction
					else
						ErrorMessage				= LocalErrorMessage

		ResetAllErrors is a Set Action
			restricted
		
			Parameters
				PrmFinanceEnterpriseGroup	is a FinanceEnterpriseGroup
				PrmProjectStructure			is a ProjectStructure
				PrmRunGroup					is AlphaUpper 30
					default label is "RunGroup"

			Parameter Rules
				PrmFinanceEnterpriseGroup
					required
				PrmProjectStructure
					required
				PrmRunGroup
					required
														
			Instance Selection
				where (FinanceEnterpriseGroup = PrmFinanceEnterpriseGroup
				and	   ProjectStructure	      = PrmProjectStructure
				and    ProjectUpload.RunGroup = PrmRunGroup
				and    ErrorMessage entered)
				
			Action Rules
			
				Instance Rules
					initialize ErrorMessage

		DeleteUploadRunGroup is a Set Action
			restricted		
			Parameters
				PrmFinanceEnterpriseGroup	is a FinanceEnterpriseGroup
				PrmProjectStructure			is a ProjectStructure
				PrmRunGroup					is AlphaUpper 30
					default label is "RunGroup"

			Instance Selection
				where (FinanceEnterpriseGroup = PrmFinanceEnterpriseGroup
				and	   ProjectStructure	      = PrmProjectStructure
				and    ProjectUpload.RunGroup = PrmRunGroup)
				
			Action Rules
			
				Instance Rules
					invoke Purge				

		SetRevenueFields is a Set Action
			restricted
			Parameters
				PrmFinanceEnterpriseGroup     is a FinanceEnterpriseGroup
					default label is "FinanceEnterpriseGroup"
			Instance Selection
				where ((FinanceEnterpriseGroup = PrmFinanceEnterpriseGroup
				or      PrmFinanceEnterpriseGroup not entered)
				and     RecordType.Posting
				and     RevenueCodeBlockOption not entered)
			Action Rules
				Instance Rules
					if (RevenueAccountOnly entered)
						RevenueCodeBlockOption = 2
						RevenuePartialAccount.GeneralLedgerChartAccount = RevenueAccountOnly
						RevenuePartialAccount.FinanceDimension1 = RevenueDimension.FinanceDimension1
						RevenuePartialAccount.FinanceDimension3 = RevenueDimension.FinanceDimension3
						RevenuePartialAccount.FinanceDimension4 = RevenueDimension.FinanceDimension4
						RevenuePartialAccount.FinanceDimension5 = RevenueDimension.FinanceDimension5
						RevenuePartialAccount.FinanceDimension6 = RevenueDimension.FinanceDimension6
						RevenuePartialAccount.FinanceDimension7 = RevenueDimension.FinanceDimension7
						RevenuePartialAccount.FinanceDimension8 = RevenueDimension.FinanceDimension8
						RevenuePartialAccount.FinanceDimension9 = RevenueDimension.FinanceDimension9
						RevenuePartialAccount.FinanceDimension10 = RevenueDimension.FinanceDimension10
					else
					if (RevenueFullAccount entered)
						RevenueCodeBlockOption = 1

		ConvertDeferAndHoldFlag is a Set Action
			restricted
			Instance Selection
				where (DeferAndHoldRemainder)
			Action Rules
				Instance Rules
					RemainderOption = 2
					DeferAndHoldRemainder = false
