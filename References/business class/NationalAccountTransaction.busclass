NationalAccountTransaction is a BusinessClass
	owned by ar
	prefix is PVT
	classic name is AROPIVOT

	Ontology
		symbolic key is NationalAccountTransaction
			classic set name is PVTSET1






	Patterns
		implements ContextualParent
		implements StaticJava
		disable AuditIndex

	Persistent Fields
		NationalAccount						is a CompanyAndCustomer
		CustomerPurchaseOrder
			classic name is CUST-PO-NBR
		TransactionDate						is Date
			classic name is TRANS-DATE
			default label is "InvoiceDate"
		DueDate
		DiscountDate						is a DiscDateX3InAropivot
			classic name is DISC-DATE
		DiscountPercent						is a DiscPctX3InAropivot
			classic name is DISC-PCT
		ReceivableProcessLevel				is a ProcessLevel
			classic name is PROCESS-LEVEL
		Project								is AlphaUpper 15
			classic name is ACTIVITY
		BaseAmount							is an InternationalAmount
			classic name is BASE-AMT
			precision is Company.Currency.NumberOfDecimals
		TransactionAmount					is an InternationalAmount
			classic name is TRAN-AMT
			default label is "InvoiceAmount"
		OpenBaseAmount						is an InternationalAmount
			classic name is OPEN-BASE
			precision is Company.Currency.NumberOfDecimals
		OpenTransactionAmount				is an InternationalAmount
			classic name is OPEN-TRAN
		OpenSortBaseAmount					is a SortAmount
			classic name is SORT-AMOUNT
		TransactionUserField1				is a TransUser1
			classic name is TRANS-USER1
		CrossReferenceReceivableInvoiceType	is a XrefType
			sql name is CRReceivableInvoiceType
			classic name is XREF-TYPE
		CrossReferenceReceivableInvoice		is a XrefNbr
			sql name is CReferenceReceivableInvoice
			classic name is XREF-NBR
		OriginalCurrency					is a Currency
			classic name is ORIG-CURRENCY
			default label is "TransactionCurrency"	
		CurrencyDecimalsNumber				is an OrigNd
			classic name is ORIG-ND
		CurrencyRate						is an OrigRate
			classic name is ORIG-RATE
		CurrencyMultiplicationOrDivision
			sql name is CMultiplicationOrDivision
			classic name is CURR-MUDV
		SummarizeDetail						is Boolean
			classic name is SUM-LINE
		NationalAccountIndicator			is a NatFlag
			classic name is NAT-FLAG
		LastApplicationSequence
			disable Auditing
			classic name is APPLIED-SEQ
		BankTransactionCode
			classic name is BANK-INST-CODE
		BankTransactionType					is a BankInstType
			classic name is BANK-INST-TYPE
		AlternateReceivableInvoiceType
			classic name is ALT-TYPE
		DiscountAmount						is an OrigDiscAmtX3InAropivot
			classic name is ORIG-DISC-AMT
		CustomerMajorClass
			classic name is MAJ-CLASS
		CustomerMinorClass
			classic name is MIN-CLASS
		RiskIndicator						is a RiskCd
			classic name is RISK-CD
		SalesRepresentative					is Numeric size 4
			classic name is SALESMAN
		TermsCode
			classic name is TERMS-CD
		ProjectContractCustomer				is an AcCustomerId
			classic name is AC-CUSTOMER-ID
		BatchNumber
			classic name is BATCH-NBR
		CustomerGroupField
		Actor								is like Actor






	Context Fields	
		BatchNumberRange								is a BatchRange
		CashCodeRange
		CompanyRange
		ContextCompanyCustomer							is a CompanyCustomer
		ContextCreditMemo								is a ReceivableInvoiceDetail

		ContextIsolatedReceivableCompany				is an IsolatedReceivableCompany 
		CurrencyRange
		CustomerPurchaseOrderRange
		CustomerRange
		CustomerRepresentative	
		CustomerRepresentativeContact	
		DiscountDateRange								is a DateRange5	
		DueDateRange									is a DateRange3

		OpenAmountRange									is an AmountRange3  
		ProjectRange
		ReceivableCompany
		ReceivableInvoiceRange							is an InvoiceRange
		ReceivablePayment 
		ReceivablePaymentHeader 
		ContextIsolatedPaymentCompany					is an IsolatedPaymentCompany 
		ReceivableProcessLevelRange
		SalesRepresentativeRange
		SelectedForGroupingFilter						is a FlagYN
		ContextReceivablePaymentCashDetail 				is a ReceivablePaymentCashDetail
		TermsCodeRange

		TransactionAmountRange							is an AmountRange4
		TransactionDateRange 							is a DateRange4	
		TransUser1Range
		XrefNbrRange									is an InvoiceRange2


	Transient Fields

		TransientDisplayCurrency					is a ToCurrency
			derive value from DerivedDisplayCurrency
		SelectedApplicationAmount 					is like InternationalAmount
			derive value from DerivedSelectApplicationAmount
		SelectedAdjustedAmount						is like InternationalAmount
			derive value from DerivedSelectDiscountAmount
		SelectedAdjustmentReason					is an ApplicationAdjustmentReason
			derive value from DerivedSelectDiscountReason

		AmountToApply			 					is like InternationalAmount
			derive value from DerivedSelectApplicationAmount
		AmountToAdjust								is like InternationalAmount
			derive value from DerivedSelectDiscountAmount
		AmountToAdjustReason						is an ApplicationAdjustmentReason
			derive value from DerivedSelectDiscountReason

		LineSelectedApplicationAmount 				is like InternationalAmount
			derive value from DerivedLineSelectApplicationAmount
		LineSelectedAdjustedAmount					is like InternationalAmount
			derive value from DerivedLineSelectDiscountAmount
		LineSelectedAdjustmentReason				is an ApplicationAdjustmentReason
			derive value from DerivedLineSelectDiscountReason	


		WriteoffAmount			 					is like InternationalAmount
			derive value from DerivedSelectApplicationAmount
		WriteoffReason								is an ApplicationAdjustmentReason
		WriteoffAccount								is a TransactionCodeBlock	
		WriteoffARIncomeWithholdingCode				is AlphaUpper size 10	
		WriteoffARIncomeWithholdingDocumentNumber	is AlphaUpper size 16	

		BypassProjectDateEdit	
		TransientGeneralLedgerDate					is Date	
			default label is "GlobalLedgerDate"
			derive value from DerivedGeneralLedgerDate
		TransientOperator							is like ReceivableOperator



		IncludeNationalAccountTransactions				is Numeric 1
			States
				No							value is 1
				Yes							value is 2
		DisplayCurrency									is Numeric 1
			States
				Transaction					value is 1
					default label is "Trans"
				Base						value is 2
					default label is "Base"
				BothAmounts					value is 3
					default label is "Both Amt"
				BothOpenAmounts				value is 4
					default label is "Both Open"
				CurrentRateOpenAmount		value is 5
					default label is "Current Rate Open"
		TransientNationalAccountIndicator			is a NatFlag
		TransientReceivableInvoiceDetailSelectDistributionSetState is AlphaUpper size 1 
			States
				Incomplete				value is "I"
				Complete				value is "C"
				NotApplicable			value is "N"
			derive value from DerivedReceivableInvoiceDetailSelectDistributionSetState
		TransientReceivableInvoiceDetailSelectDistributionSetStateNoSummarize is AlphaUpper size 1 
			States
				Incomplete				value is "I"
				Complete				value is "C"
				NotApplicable			value is "N"
			derive value from DerivedReceivableInvoiceDetailSelectDistributionSetStateNoSummarize
		TransientSignedBaseAmount						is like InternationalAmount	
			default label is "Amount"	
			precision is Company.Currency.NumberOfDecimals
			derive value from SignedBaseAmount
		TransientSignedBaseOpenAmount					is like InternationalAmount	
			default label is "OpenAmount"	
			precision is Company.Currency.NumberOfDecimals
			derive value from SignedBaseOpenAmount

		TransientApplicationDiscountDate			is Date	
			default label is "DiscountDate"
			derive value from DerivedApplicationDiscountDate


		TransientSelectSignedOpenAmount	is like InternationalAmount	
			derive value from DerivedSelectSignedOpenAmount
		TransientDerivedPortalSignedOpenAmount	is like InternationalAmount	
			derive value from DerivedPortalSignedOpenAmount
		TransientDerivedPortalDiscountDate	is Date	
			derive value from DerivedPortalDiscountDate
		TransientDerivedSignedPortalDiscountAmount is like InternationalAmount	
			derive value from DerivedSignedPortalDiscountAmount



	Local Fields
		I1												is Numeric 3

		I9												is Numeric 3
		PriorApplication								is Boolean
		LocalApplicationAmount							is like InternationalAmount
		LocalDiscountAmount								is like InternationalAmount
		CalculateDiscountDate							is Date



		WorkAmount										is like InternationalAmount
		Work2Amount										is like InternationalAmount

		LocalSequence									is a Sequence
		Done											is Boolean
		CreditOpenAmount								is like InternationalAmount

		WorkTotal										is like InternationalAmount
		NewReceivableApplication 						is a ReceivableApplication view
		AutoAdjustReason								is like ReceivableReason

		CurrencyWork									is a ReceivableExchange
		LocalCurrency									is like Currency



		LocalCurrentDate								is Date
		LocalDaysDifference								is Numeric size 5
		LocalOperator									is a ReceivableOperator
		LocalConvertedOpenAmount						is like InternationalAmount
		LocalDifferenceAmount							is like InternationalAmount
		LocalCurrencyTable								is a CurrencyTable
		LocalExchangeDate								is an ExchangeDate
		IsLineSelect									is Boolean
		LocalCreditMemoCompany							is like ReceivableCompany 
		LocalReceivablePaymentCompany					is like ReceivableCompany
		LocalPaymentDepositeDate						is Date	
		LocalGeneralLedgerSystemCode					is a GeneralLedgerSystemCode	

		SumOfAgingDisputeRelAmountsDone					is Boolean									
		SumOfAgingDisputeRelDisputedAmount				is like InternationalAmount					
		SumOfReceivableApplicationSelectRelAmountsDone	is Boolean									
		SumOfReceivableApplicationSelectRelTotalCreditAdjustments		is like InternationalAmount	
		SumOfUnappliedReceivablePaymentRemitDetailRelAmountstDone		is Boolean					
		SumOfUnappliedReceivablePaymentRemittanceDetailRelAppldAmt		is like InternationalAmount	


		LocalMainUserTemplate							is Alpha size 250
		LocalTriggerFrom								is Alpha size 100
		NativeLPLBODTrigger								is Boolean
		LocalReturnNoDiscount							is Boolean



	Rule Blocks
		EditTransientOperator
			if (Company.CashOperatorRequired)
				if (TransientOperator not entered)
					if (ContextReceivablePaymentRel.ReceivableOperator entered)
						TransientOperator = ContextReceivablePaymentRel.ReceivableOperator
					else
						TransientOperator = actor
				constraint (TransientOperator entered)
					"OperatorIsRequired"
				constraint (TransientOperatorRel exists)
					"OperatorDoesNotExist"
				constraint (TransientOperatorRel.ActiveStatus.Active)
					"OperatorIsNotActive"

		EditAllowSelectDistributionSetForApplyCredit
			if (AllowSelectDistributionSet)
				constraint (CreditMemoCompanyAllowSelectDistributionSet)
					"BothCreditMemoAndInvoiceCompaniesMustHave_Specify_Distribution_MixChecked"
				constraint (CreditAndInvoiceAreBothFundAccountingOrBothNot)
					"BothCreditMemoAndInvoiceMustSupport_Fund_Accounting"

			if (CreditMemoCompanyAllowSelectDistributionSet)
				constraint (AllowSelectDistributionSet)
					"BothCreditMemoAndInvoiceCompaniesMustHave_Specify_Distribution_MixChecked"

		CreateApplicationSelectForSummarizeDetail
			if  (LocalApplicationAmount > 0)

				if (LocalDiscountAmount >= each.OpenAmountDisplayCurrency)
					initialize WorkAmount
					Work2Amount										= each.OpenAmountDisplayCurrency
				else
				if ((LocalApplicationAmount + LocalDiscountAmount) < each.OpenAmountDisplayCurrency)
					WorkAmount										= LocalApplicationAmount
					Work2Amount										= LocalDiscountAmount
				else
					WorkAmount										= each.OpenAmountDisplayCurrency - LocalDiscountAmount
					Work2Amount										= LocalDiscountAmount

				invoke Create ReceivableApplicationSelect
					invoked.Company														= ReceivablePaymentGroup.Company
					invoked.ReceivablePaymentHeader										= ReceivablePaymentGroup.ReceivablePaymentHeader
					invoked.ReceivablePayment											= ReceivablePaymentGroup.ReceivablePayment
					invoked.ReceivableApplicationSelect.TransactionCompany				= each.Company
					invoked.ReceivableApplicationSelect.ReceivableInvoiceDetail			= each.ReceivableInvoiceDetail
					invoked.ReceivableOperator											= ApplyOperator


					invoked.GeneralLedgerDate										= ApplicationGeneralLedgerDate









					invoked.EnteredAmount												= WorkAmount
					invoked.ApplicationCurrency											= PrmCurrency

					if (Work2Amount entered)
						invoked.SelectedAdjustmentReason								= PrmAdjustReason
						invoked.SelectedAdjustedAmount									= Work2Amount

				LocalApplicationAmount													-= WorkAmount
				LocalDiscountAmount														-= Work2Amount


		SumAgingDisputeRelAmounts	
			if (!SumOfAgingDisputeRelAmountsDone)	
				initialize SumOfAgingDisputeRelDisputedAmount			
					for each AgingDisputeRel
						SumOfAgingDisputeRelDisputedAmount			 += each.DisputedAmount		
				SumOfAgingDisputeRelAmountsDone = true	


		SumReceivableApplicationSelectRelAmounts	
			if (!SumOfReceivableApplicationSelectRelAmountsDone)	
				initialize SumOfReceivableApplicationSelectRelTotalCreditAdjustments										
					for each ReceivableApplicationSelectRecordsExistRel	
						SumOfReceivableApplicationSelectRelTotalCreditAdjustments		 += each.TotalCreditAdjustments	
				SumOfReceivableApplicationSelectRelAmountsDone = true	


		SumUnappliedReceivablePaymentRemittanceDetailRelAmounts	
			if (!SumOfUnappliedReceivablePaymentRemitDetailRelAmountstDone)
				initialize SumOfUnappliedReceivablePaymentRemittanceDetailRelAppldAmt
					for each UnappliedReceivablePaymentRemittanceDetailRel
						SumOfUnappliedReceivablePaymentRemittanceDetailRelAppldAmt		 += each.AppldAmt
				SumOfUnappliedReceivablePaymentRemitDetailRelAmountstDone = true


	Derived Fields	

		AgingDisputeAmount is a DerivedField	
			type is like InternationalAmount
			restricted
			include SumAgingDisputeRelAmounts	

			return (SumOfAgingDisputeRelDisputedAmount)	


		BaseOpenAmount  is a DerivedField	
			type is like InternationalAmount
				precision is Company.Currency.NumberOfDecimals
			restricted
			return ReceivableInvoiceDetail.BaseOpenAmount	


		CountOfReceivableApplicationSelectRecordsExistRel is a DerivedField	
			type is Numeric size 3
			return instance count of ReceivableApplicationSelectRecordsExistRel


		CustomerGroupAgingPeriod is a DerivedField	
			type is Numeric 2
			restricted
			LocalCurrentDate = current corporate date
			if  (!ReceivableInvoiceDetail.ReceivableInvoiceDetailType.CreditMemo
			or   !Company.CustomerGroupField.CustomerGroup.AgeCreditsRule.AgedInCurrentColumn)
				if (Company.CustomerGroupField.CustomerGroup.AgingMethod.AgeByTransactionDate)
					LocalDaysDifference = LocalCurrentDate - TransactionDate
				else
					LocalDaysDifference = LocalCurrentDate - DueDate

			if  ((ReceivableInvoiceDetail.ReceivableInvoiceDetailType.CreditMemo
			and   Company.CustomerGroupField.CustomerGroup.AgeCreditsRule.AgedInCurrentColumn)
			or   LocalDaysDifference = 0)
				if (Company.CustomerGroupField.CustomerGroup.ExpandedAgingPeriods)
					return 3
				else
					return 2
			else
			if (LocalDaysDifference < 0)
				if (Company.CustomerGroupField.CustomerGroup.CurrentAgingPeriod entered
				and Company.CustomerGroupField.CustomerGroup.CurrentAgingPeriod >= (LocalDaysDifference * -1))
					if (Company.CustomerGroupField.CustomerGroup.ExpandedAgingPeriods)
						return 3
					else
						return 2
				else
					if (Company.CustomerGroupField.CustomerGroup.ExpandedAgingPeriods)
						if ((Company.CustomerGroupField.CustomerGroup.CurrentAgingPeriod + Company.CustomerGroupField.CustomerGroup.AgeFuture) >= (LocalDaysDifference * -1))
							return 2
						else
							return 1
					else
						return 1
			else
			if (LocalDaysDifference <= Company.CustomerGroupField.CustomerGroup.AgePeriodses.AgePeriods[1])
				if (Company.CustomerGroupField.CustomerGroup.ExpandedAgingPeriods)
					return 4
				else
					return 3
			else
			if (LocalDaysDifference <= Company.CustomerGroupField.CustomerGroup.AgePeriodses.AgePeriods[2])
				if (Company.CustomerGroupField.CustomerGroup.ExpandedAgingPeriods)
					return 5
				else
					return 4
			else
			if (LocalDaysDifference <= Company.CustomerGroupField.CustomerGroup.AgePeriodses.AgePeriods[3])
				if (Company.CustomerGroupField.CustomerGroup.ExpandedAgingPeriods)
					return 6
				else
					return 5
			else
			if (LocalDaysDifference <= Company.CustomerGroupField.CustomerGroup.AgePeriodses.AgePeriods[4])
				if (Company.CustomerGroupField.CustomerGroup.ExpandedAgingPeriods)
					return 7
				else
					return 6
			else
			if (Company.CustomerGroupField.CustomerGroup.ExpandedAgingPeriods)
				if (LocalDaysDifference <= Company.CustomerGroupField.CustomerGroup.AgePeriodses.AgePeriods[5])
					return 8
				else
				if (LocalDaysDifference <= Company.CustomerGroupField.CustomerGroup.AgePeriodses.AgePeriods[6])
					return 9
				else
				if (LocalDaysDifference <= Company.CustomerGroupField.CustomerGroup.AgePeriodses.AgePeriods[7])
					return 10
				else
					return 11
			else
				return 7


		DerivedAdjustAmount is a DerivedField	
			type is like InternationalAmount
			restricted
			if (SummarizeDetail)

				return ReceivableInvoiceDetail.DerivedAdjustAmount	
			else
				return ReceivableInvoiceDetail.AdjustmentAmount.CurrencyAmount


		DerivedApplicationDiscount is a DerivedField	
			type is like InternationalAmount
			restricted

			if (CalculateDiscountDate not entered)
				if (ReceivablePayment entered)
					CalculateDiscountDate = ContextReceivablePaymentRel.DepositDate
				else
				if (DerivedCompanyOnCreditMemoApplicationForm)
					CalculateDiscountDate = DerivedContextCompanyCreditMemoRel.TransactionDate
				else
					CalculateDiscountDate = current corporate date
			if  (AlternateReceivableInvoiceType.Mixed)
				PriorApplication	= false
				if (IsCreditMemo)
					if (SummarizeDetail)
						if (ReceivableInvoiceDetail.MixedSignCreditMemoPriorApplicationSumLineRel exists)
							PriorApplication = true
					else
						if (ReceivableInvoiceDetail.MixedSignCreditMemoPriorApplicationRel exists)
							PriorApplication = true
				if (SummarizeDetail)
					if (ReceivableInvoiceDetail.MixedSignPriorApplicationSumLineRel exists)
						PriorApplication = true
				else
					if (ReceivableInvoiceDetail.MixedSignPriorApplicationRel exists)
						PriorApplication = true

			if  ((!AlternateReceivableInvoiceType.Mixed
			and   TransactionAmount != OpenAmount)
			or   (AlternateReceivableInvoiceType.Mixed
			and   PriorApplication))
				
				LocalReturnNoDiscount = false
				if (AlternateReceivableInvoiceType.Mixed)

					if (IsCreditMemo)
						if (SummarizeDetail)
							for each ReceivableInvoiceDetail.MixedSignCreditMemoPriorApplicationSumLineRel
								for each each.ReceivableApplicationAdjustmentRel
									if (!(each.ReceivableApplication.Reverse
									or each.ReceivableApplication.ApplicationSource.ReversalOfApplications))
										return 0
								I9 = 1
								while (I9 < 4)
									if (DiscountDate.DiscDate[I9] entered)
										if (DiscountDate.DiscDate[I9] + CompanyCustomerRel.ApplicationDiscountGraceDays < each.DepositDate)
											if (!(each.Reverse or each.ApplicationSource.ReversalOfApplications))
												LocalReturnNoDiscount = true
										else
											LocalReturnNoDiscount = false
											end while
									I9 += 1
								if (LocalReturnNoDiscount)
									return 0
						else
							for each ReceivableInvoiceDetail.MixedSignCreditMemoPriorApplicationRel
								for each each.ReceivableApplicationAdjustmentRel
									if (!(each.ReceivableApplication.Reverse
									or each.ReceivableApplication.ApplicationSource.ReversalOfApplications))
										return 0
								I9 = 1
								while (I9 < 4)
									if (DiscountDate.DiscDate[I9] entered)
										if (DiscountDate.DiscDate[I9] + CompanyCustomerRel.ApplicationDiscountGraceDays < each.DepositDate)
											if (!(each.Reverse or each.ApplicationSource.ReversalOfApplications))
												LocalReturnNoDiscount = true
										else
											LocalReturnNoDiscount = false
											end while
									I9 += 1
								if (LocalReturnNoDiscount)
									return 0
					
					if (SummarizeDetail)
						for each ReceivableInvoiceDetail.MixedSignPriorApplicationSumLineRel
							for each each.ReceivableApplicationAdjustmentRel
								if (!(each.ReceivableApplication.Reverse
								or each.ReceivableApplication.ApplicationSource.ReversalOfApplications))
									return 0
							I9 = 1
							while (I9 < 4)
								if (DiscountDate.DiscDate[I9] entered)
									if (DiscountDate.DiscDate[I9] + CompanyCustomerRel.ApplicationDiscountGraceDays < each.DepositDate)
										if (!(each.Reverse or each.ApplicationSource.ReversalOfApplications))
											LocalReturnNoDiscount = true
									else
										LocalReturnNoDiscount = false
										end while
								I9 += 1
							if (LocalReturnNoDiscount)
								return 0
					else
						for each ReceivableInvoiceDetail.MixedSignPriorApplicationRel
							for each each.ReceivableApplicationAdjustmentRel
								if (!(each.ReceivableApplication.Reverse
								or each.ReceivableApplication.ApplicationSource.ReversalOfApplications))
									return 0
							I9 = 1
							while (I9 < 4)
								if (DiscountDate.DiscDate[I9] entered)
									if (DiscountDate.DiscDate[I9] + CompanyCustomerRel.ApplicationDiscountGraceDays < each.DepositDate)
										if (!(each.Reverse or each.ApplicationSource.ReversalOfApplications))
											LocalReturnNoDiscount = true
									else
										LocalReturnNoDiscount = false
										end while
								I9 += 1
							if (LocalReturnNoDiscount)
								return 0
				else
					for each ReceivableInvoiceDetail.ReceivableApplicationRel
						I9 = 1
						while (I9 < 4)
							if (DiscountDate.DiscDate[I9] entered)
								if (DiscountDate.DiscDate[I9] + CompanyCustomerRel.ApplicationDiscountGraceDays < each.DepositDate)
									if (!(each.Reverse or each.ApplicationSource.ReversalOfApplications))
										LocalReturnNoDiscount = true
								else
									LocalReturnNoDiscount = false
									end while
							I9 += 1
						
						if (LocalReturnNoDiscount)
							return 0

						for each each.ReceivableApplicationAdjustmentRel
							if (!(each.ReceivableApplication.Reverse
							or each.ReceivableApplication.ApplicationSource.ReversalOfApplications))
								return 0

			I9 = 1
			while (I9 < 4)
				if (DiscountDate.DiscDate[I9] + CompanyCustomerRel.ApplicationDiscountGraceDays >= CalculateDiscountDate) 
					if (DiscountAmount.OrigDiscAmt[I9] entered
					and not AlternateReceivableInvoiceType.Mixed)
						if (DiscountAmount.OrigDiscAmt[I9] >= OpenAmount)
							return 0
						else
							return DiscountAmount.OrigDiscAmt[I9]
					else
						if (DiscountPercent.DiscPct[I9] * TransactionAmount >= OpenAmount)
							return 0
						else
							if (AlternateReceivableInvoiceType.Mixed)	  
								return (DiscountPercent.DiscPct[I9] * OpenAmount)
							else
								return (DiscountPercent.DiscPct[I9] * TransactionAmount)
				I9 +=1

			if (ReceivableInvoiceDetail.Company.ApplyDisplayPastDueDiscount)
				I9 = 3
				while (I9 > 0)
					if (DiscountDate.DiscDate[I9] entered)
						if (DiscountAmount.OrigDiscAmt[I9] entered
						and not AlternateReceivableInvoiceType.Mixed)
							if (DiscountAmount.OrigDiscAmt[I9] >= OpenAmount)
								return 0
							else
								return DiscountAmount.OrigDiscAmt[I9]
						else
							if (DiscountPercent.DiscPct[I9] * TransactionAmount >= OpenAmount)
								return 0
							else
								if (AlternateReceivableInvoiceType.Mixed)  
									return (DiscountPercent.DiscPct[I9] * OpenAmount)
								else
									return (DiscountPercent.DiscPct[I9] * TransactionAmount)
					I9 -=1


		DerivedApplicationDiscountDate is a DerivedField	
			type is Date
			LocalPaymentDepositeDate = ContextReceivablePaymentRel.DepositDate
			if (LocalPaymentDepositeDate <= DiscountDate.DiscDate[1]
			or  (DiscountDate.DiscDate[2] not entered
			and  DiscountDate.DiscDate[3] not entered))
				return DiscountDate.DiscDate[1]
			else 
			if ((LocalPaymentDepositeDate > DiscountDate.DiscDate[1]
			and LocalPaymentDepositeDate <= DiscountDate.DiscDate[2])
			or  DiscountDate.DiscDate[3] not entered)
				return DiscountDate.DiscDate[2]
			else
			if (LocalPaymentDepositeDate > DiscountDate.DiscDate[2]
			and LocalPaymentDepositeDate <= DiscountDate.DiscDate[3])
				return DiscountDate.DiscDate[3]


		DerivedAppliedAmount is a DerivedField	
			type is like InternationalAmount
			restricted
			if (SummarizeDetail)

				return ReceivableInvoiceDetail.DerivedAppliedAmount 
			else
				return ReceivableInvoiceDetail.ApplicationAmount.CurrencyAmount


		DerivedDiscount1Amount is a DerivedField	
			type is like InternationalAmount
			restricted
			return (DiscountPercent.DiscPct[1] * ReceivableInvoiceRel.InvoiceAmount.CurrencyAmount)


		DerivedDiscount1Date is a DerivedField	
			type is Date
			restricted
			if (DiscountDate.DiscDate[1] entered)
				return DiscountDate.DiscDate[1]


		DerivedDiscount1Percent is a ComputeField	
			type is Decimal size 7.5
			restricted
			(DiscountPercent.DiscPct[1] * 100)


		DerivedDiscount2Amount is a DerivedField	
			type is like InternationalAmount
			restricted
			return (DiscountPercent.DiscPct[2] * ReceivableInvoiceRel.InvoiceAmount.CurrencyAmount)


		DerivedDiscount2Date is a DerivedField	
			type is Date
			restricted
			if (DiscountDate.DiscDate[2] entered)
				return DiscountDate.DiscDate[2]


		DerivedDiscount2Percent is a DerivedField	
			type is Decimal size 7.5
			restricted
			return (DiscountPercent.DiscPct[2] * 100)


		DerivedDiscount3Amount is a DerivedField	
			type is like InternationalAmount
			restricted
			return (DiscountPercent.DiscPct[3] * ReceivableInvoiceRel.InvoiceAmount.CurrencyAmount)


		DerivedDiscount3Date is a DerivedField	
			type is Date
			restricted
			if (DiscountDate.DiscDate[3] entered)
				return DiscountDate.DiscDate[3]


		DerivedDiscount3Percent is a DerivedField	
			type is Decimal size 7.5
			restricted
			return (DiscountPercent.DiscPct[3] * 100)


		DerivedDiscountAmount is a DerivedField	
			type is like InternationalAmount
			restricted
			default label is "CalculatedDiscount"
			if (SummarizeDetail)


				return ReceivableInvoiceDetail.DerivedDiscountAmount
			else
				return DerivedApplicationDiscount


		DerivedDiscountReason is a DerivedField	
			type is like ReceivableReason
			restricted
			if (DerivedDiscountAmount entered
			and CompanyCustomerRel.DiscountAdjustmentReason entered)
				return CompanyCustomerRel.DiscountAdjustmentReason

		DerivedCreditMemoContextCompany is a DerivedField 
			type is like Company
			restricted
			if (LocalCreditMemoCompany entered)
				return LocalCreditMemoCompany
			if (ContextIsolatedReceivableCompany entered)
				LocalCreditMemoCompany = ContextIsolatedReceivableCompany
				if (LocalContextCreditMemoRel exists
				and LocalContextCreditMemoRel.ReceivableInvoiceDetail.ReceivableInvoiceDetailType.CreditMemo
				and LocalContextCreditMemoRel.ReceivableInvoiceDetail != ReceivableInvoiceDetail.ReceivableInvoiceDetail)
					return LocalCreditMemoCompany
			LocalCreditMemoCompany = Company
			return LocalCreditMemoCompany

		DerivedReceivablePaymentContextCompany is a DerivedField
			type is like Company
			restricted
			if (LocalReceivablePaymentCompany entered)
				return LocalReceivablePaymentCompany
			if (ContextIsolatedPaymentCompany entered)
				LocalReceivablePaymentCompany = ContextIsolatedPaymentCompany
				if (LocalContextReceivablePaymentRel exists)
					return LocalReceivablePaymentCompany
			LocalReceivablePaymentCompany = ReceivablePayment.Company
			return LocalReceivablePaymentCompany

		DerivedDisplayCurrency			is a DerivedField	
			type is like Currency
			restricted
			LocalCurrency = actor.context.Currency
			if (LocalCurrency entered)
				return LocalCurrency
			else
			if (ContextReceivablePaymentRel.OriginalCurrency entered)
				return ContextReceivablePaymentRel.OriginalCurrency
			else
			if (DerivedContextCompanyCreditMemoRel.OriginalCurrency entered)
				return DerivedContextCompanyCreditMemoRel.OriginalCurrency
			else
			if (ContextCreditMemo.OriginalCurrency entered)
				return ContextCreditMemo.OriginalCurrency




		DerivedExchangeDate is a DerivedField	
			type is Date
			restricted
			if (ContextReceivablePaymentRel.DepositDate entered)
				return ContextReceivablePaymentRel.DepositDate
			if (DerivedContextCompanyCreditMemoRel.TransactionDate entered)
				return DerivedContextCompanyCreditMemoRel.TransactionDate
			if (TransactionDate entered)
				return TransactionDate


		DerivedGeneralLedgerDate is a DerivedField	
			type is Date
			restricted
			if (HasApplicationSelect
			and SummarizeDetail)
				return ReceivableInvoiceDetail.first SameInvoiceRel.ReceivableApplicationSelectRecordsExistRel.GeneralLedgerDate
			else
			if (HasReceivableApplicationSelect)
				if (SummarizeDetail)
					return ReceivableInvoiceDetail.first SameInvoiceRel.ReceivableApplicationSelectRel.GeneralLedgerDate
				else
					return ReceivableApplicationSelectRel.GeneralLedgerDate
			else
			if (ReceivablePayment in context
			and ContextReceivablePaymentRel exists)
				if (Company.DefaultApplicationDate.LatestTransactionPostDate)	
					if (ContextReceivablePaymentRel.GeneralLedgerDate > ReceivableInvoiceDetailRel.GeneralLedgerDate)
						if  (CompanySystemClosingControlRel.Control and Company.VerifyGLDateWithinGLDateRange
						and  ContextReceivablePaymentRel.GeneralLedgerDate not within CompanySystemClosingControlRel.ValidEntryDate)	
							return CompanySystemClosingControlRel.ValidEntryDate.Begin
						else
							return ContextReceivablePaymentRel.GeneralLedgerDate
					else
						if  (CompanySystemClosingControlRel.Control and Company.VerifyGLDateWithinGLDateRange
						and  ReceivableInvoiceDetailRel.GeneralLedgerDate not within CompanySystemClosingControlRel.ValidEntryDate)	
							return CompanySystemClosingControlRel.ValidEntryDate.Begin
						else
							return ReceivableInvoiceDetailRel.GeneralLedgerDate
				else
				if (Company.DefaultApplicationDate.PaymentCreditPostDate)
					if  (CompanySystemClosingControlRel.Control and Company.VerifyGLDateWithinGLDateRange
					and  ContextReceivablePaymentRel.GeneralLedgerDate not within CompanySystemClosingControlRel.ValidEntryDate)	
						return CompanySystemClosingControlRel.ValidEntryDate.Begin
					else
						return ContextReceivablePaymentRel.GeneralLedgerDate	
				else
					if  (CompanySystemClosingControlRel.Control and Company.VerifyGLDateWithinGLDateRange
					and  current corporate date not within CompanySystemClosingControlRel.ValidEntryDate)
						return CompanySystemClosingControlRel.ValidEntryDate.Begin
					else
						return current corporate date
			else
			if (ContextCreditMemo in context
			or  DerivedContextCompanyCreditMemoRel exists)
				if (Company.DefaultApplicationDate.LatestTransactionPostDate)	
					if (DerivedContextCompanyCreditMemoRel.GeneralLedgerDate > ReceivableInvoiceDetailRel.GeneralLedgerDate)
						if  (CompanySystemClosingControlRel.Control and Company.VerifyGLDateWithinGLDateRange
						and  DerivedContextCompanyCreditMemoRel.GeneralLedgerDate not within CompanySystemClosingControlRel.ValidEntryDate)	
							return CompanySystemClosingControlRel.ValidEntryDate.Begin
						else
							return DerivedContextCompanyCreditMemoRel.GeneralLedgerDate
					else
						if  (CompanySystemClosingControlRel.Control and Company.VerifyGLDateWithinGLDateRange
						and  ReceivableInvoiceDetailRel.GeneralLedgerDate not within CompanySystemClosingControlRel.ValidEntryDate)	
							return CompanySystemClosingControlRel.ValidEntryDate.Begin
						else
							return ReceivableInvoiceDetailRel.GeneralLedgerDate
				else
				if (Company.DefaultApplicationDate.PaymentCreditPostDate)
					if  (CompanySystemClosingControlRel.Control and Company.VerifyGLDateWithinGLDateRange
					and  DerivedContextCompanyCreditMemoRel.GeneralLedgerDate not within CompanySystemClosingControlRel.ValidEntryDate)	
						return CompanySystemClosingControlRel.ValidEntryDate.Begin
					else
						return DerivedContextCompanyCreditMemoRel.GeneralLedgerDate	
				else
					if  (CompanySystemClosingControlRel.Control and Company.VerifyGLDateWithinGLDateRange
					and  current corporate date not within CompanySystemClosingControlRel.ValidEntryDate)
						return CompanySystemClosingControlRel.ValidEntryDate.Begin
					else
						return current corporate date


		DerivedLineSelectApplicationAmount is a DerivedField	
			type is like InternationalAmount
			restricted
			if (HasReceivableApplicationSelect)
				return ReceivableApplicationSelectRel.PaymentApplicationAmount
			else
				CurrencyWork.TransactionAmount				= OpenAmount
				CurrencyWork.FromCurrency					= OriginalCurrency
				CurrencyWork.FinanceEnterpriseGroup			= GeneralLedgerCompanyRel.FinanceEnterpriseGroup
				CurrencyWork.ExchangeDate					= DerivedExchangeDate
				CurrencyWork.BaseAmount.ToCurrency			= DerivedDisplayCurrency

				return CurrencyWork.BaseAmount.OutputCurrencyAmount


		DerivedLineSelectDiscountAmount is a DerivedField	
			type is like InternationalAmount
			restricted
			default label is "LineSelectDiscountAmount"
			if (HasReceivableApplicationSelect)
				include SumReceivableApplicationSelectRelAmounts	

				return SumOfReceivableApplicationSelectRelTotalCreditAdjustments	
			else
			if  (OriginalCurrency = DerivedDisplayCurrency)
				return DerivedApplicationDiscount
			else

				CurrencyWork.TransactionAmount				= DerivedApplicationDiscount
				CurrencyWork.FromCurrency					= OriginalCurrency
				CurrencyWork.FinanceEnterpriseGroup			= GeneralLedgerCompanyRel.FinanceEnterpriseGroup
				CurrencyWork.ExchangeDate					= DerivedExchangeDate
				CurrencyWork.BaseAmount.ToCurrency			= DerivedDisplayCurrency

				return CurrencyWork.BaseAmount.OutputCurrencyAmount


		DerivedOpenAmount is a DerivedField
			type is like InternationalAmount
			default label is "OpenAmount"
			if (SummarizeDetail)

				return ReceivableInvoiceDetail.DerivedOpenAmount 
			else
				return ReceivableInvoiceDetail.OpenAmount


		DerivedSelectApplicationAmount is a DerivedField
			type is like InternationalAmount
			restricted
			initialize CurrencyWork.TransactionAmount
			if (HasApplicationSelect
			and SummarizeDetail)

				return ReceivableInvoiceDetail.DerivedSelectApplicationAmount	
			else
			if (HasReceivableApplicationSelect)
				if (SummarizeDetail)

					return ReceivableInvoiceDetail.DerivedSelectApplicationAmount	
				else
					return ReceivableApplicationSelectRel.PaymentApplicationAmount
			else
				CurrencyWork.FinanceEnterpriseGroup			= GeneralLedgerCompanyRel.FinanceEnterpriseGroup
				CurrencyWork.TransactionAmount				= DerivedOpenAmount
				CurrencyWork.FromCurrency					= OriginalCurrency
				CurrencyWork.ExchangeDate					= DerivedExchangeDate
				CurrencyWork.BaseAmount.ToCurrency			= DerivedDisplayCurrency

				return CurrencyWork.BaseAmount.OutputCurrencyAmount


		DerivedSelectDiscountAmount is a DerivedField
			type is like InternationalAmount
			restricted
			default label is "SelectDiscountAmount"
			if (HasApplicationSelect
			and SummarizeDetail)

				return ReceivableInvoiceDetail.DerivedSelectTotalCreditAdjustmentsAmount	
			else
			if (HasReceivableApplicationSelect)
				if (SummarizeDetail)
					return ReceivableInvoiceDetail.SameInvoiceRel.ReceivableApplicationSelectRel.TotalCreditAdjustments
				else
					return ReceivableInvoiceDetail.ReceivableApplicationSelectRel.TotalCreditAdjustments
			else
			if  (ReceivablePayment in context
			and  ContextReceivablePaymentRel.IsZeroPayment
			and !DerivedCompanyOnCreditMemoApplicationForm)
				return 0
			else
			if  (OriginalCurrency = DerivedDisplayCurrency)
				return DerivedDiscountAmount
			else

				CurrencyWork.FinanceEnterpriseGroup			= GeneralLedgerCompanyRel.FinanceEnterpriseGroup
				if (SummarizeDetail)

					CurrencyWork.TransactionAmount			= DerivedDiscountAmount 
				else
					CurrencyWork.TransactionAmount	= DerivedApplicationDiscount
				CurrencyWork.ExchangeDate					= DerivedExchangeDate
				CurrencyWork.FromCurrency					= OriginalCurrency
				CurrencyWork.BaseAmount.ToCurrency			= DerivedDisplayCurrency
				return CurrencyWork.BaseAmount.OutputCurrencyAmount








		DerivedSelectDiscountReason is a DerivedField
			type is like ReceivableReason
			restricted
			if (HasReceivableApplicationSelect)
				return ReceivableApplicationSelectRel.FirstAdjustmentReason
			else
			if (DerivedDiscountAmount entered
			and CompanyCustomerRel.DiscountAdjustmentReason entered)
				return CompanyCustomerRel.DiscountAdjustmentReason


		DerivedLineSelectDiscountReason is a DerivedField	
			type is like ReceivableReason
			restricted
			if (SummarizeDetail
			and DerivedLineSelectDiscountAmount entered
			and CompanyCustomerRel.DiscountAdjustmentReason entered)
				return CompanyCustomerRel.DiscountAdjustmentReason
			else
			if (DerivedDiscountAmount entered
			and CompanyCustomerRel.DiscountAdjustmentReason entered)
				return CompanyCustomerRel.DiscountAdjustmentReason


		DerivedTransactionAmount is a DerivedField
			type is like InternationalAmount
			if (SummarizeDetail)

				return ReceivableInvoiceDetail.DerivedTransactionAmount	
			else
				return ReceivableInvoiceDetail.InvoiceAmount.CurrencyAmount


		PortalListTitleWithTotal is a LabelField	
			restricted
			"Invoice_Detail_Available_For_Payment"	//_____Total_Selected_Value:_$_<CustomerRepresentativeContact.DerivedTotalPortalRequestedAppliedAmount>"

		DerivedPortalListTitle is a DerivedField
			type is MessageField

			return PortalListTitleWithTotal

		DerivedPortalPaymentSelected is a DerivedField	
			type is Boolean
			if (ReceivableInvoiceDetail.PortalPaymentSelected
			and UnappliedReceivablePaymentRemittanceDetailRel not exists)
				return true

		DerivedPortalDiscountDate is a DerivedField	
			type is Date
			if (current date <= DiscountDate.DiscDate[1]
			or  (DiscountDate.DiscDate[2] not entered
			and  DiscountDate.DiscDate[3] not entered))
				return DiscountDate.DiscDate[1]
			else
			if ((current date > DiscountDate.DiscDate[1]
			and current date <= DiscountDate.DiscDate[2])
			or  DiscountDate.DiscDate[3] not entered)
				return DiscountDate.DiscDate[2]
			else
			if (current date > DiscountDate.DiscDate[2]
			and current date <= DiscountDate.DiscDate[3])
				return DiscountDate.DiscDate[3]
			else
			if (DiscountDate.DiscDate[3] entered)
				return DiscountDate.DiscDate[3]
			else
			if (DiscountDate.DiscDate[3] not entered
			and	DiscountDate.DiscDate[2] entered)
				return DiscountDate.DiscDate[2]
			else
			if (DiscountDate.DiscDate[3] not entered
			and	DiscountDate.DiscDate[2] not entered
			and	DiscountDate.DiscDate[1] entered)
				return DiscountDate.DiscDate[1]

		DerivedPortalDiscountPercent is a DerivedField	
			type is Decimal size 7.5
			if (current corporate date <= DiscountDate.DiscDate[1])
				return (DiscountPercent.DiscPct[1] * 100)
			else
			if (current corporate date > DiscountDate.DiscDate[1]
			and current corporate date <= DiscountDate.DiscDate[2])
				return (DiscountPercent.DiscPct[2] * 100)
			else
			if (current corporate date > DiscountDate.DiscDate[2]
			and current corporate date <= DiscountDate.DiscDate[3])
				return (DiscountPercent.DiscPct[3] * 100)

		DerivedPortalDiscountAmount is a DerivedField	
			type is like InternationalAmount
			if (!HasDiscountReceivableApplicationAdjustments)
				if (ReceivableInvoiceDetail.DerivedPortalDiscountDate = DiscountDate.DiscDate[1])
					return (DiscountPercent.DiscPct[1] * ReceivableInvoiceDetail.InvoiceAmount.CurrencyAmount)
				else
				if (ReceivableInvoiceDetail.DerivedPortalDiscountDate = DiscountDate.DiscDate[2])
					return (DiscountPercent.DiscPct[2] * ReceivableInvoiceDetail.InvoiceAmount.CurrencyAmount)
				else
				if (ReceivableInvoiceDetail.DerivedPortalDiscountDate = DiscountDate.DiscDate[3])
					return (DiscountPercent.DiscPct[3] * ReceivableInvoiceDetail.InvoiceAmount.CurrencyAmount)
			else
				return 0

		DerivedPortalNetAmountAfterDiscount is a DerivedField	
			type is like InternationalAmount
			restricted
			if (DerivedDiscount1Date entered
			and DerivedPortalDiscountPercent entered
			and SignedOpenAmount >0)
				return SignedOpenAmount - DerivedPortalDiscountAmount
			else
			if (DerivedDiscount1Date entered
			and DerivedPortalDiscountPercent entered
			and SignedOpenAmount <0)
				return SignedOpenAmount + DerivedPortalDiscountAmount
			else
				return SignedOpenAmount


		DerivedSelectSignedOpenAmount is a DerivedField	
			type is like InternationalAmount
			if (ReceivablePortalPaymentDetailRel exists)
				return ReceivablePortalPaymentDetailRel.PortalRequestedAppliedAmount
			else
			if (UnappliedReceivablePaymentRemittanceDetailRel exists)
				include SumUnappliedReceivablePaymentRemittanceDetailRelAmounts
				return DerivedPortalNetAmountAfterDiscount - SumOfUnappliedReceivablePaymentRemittanceDetailRelAppldAmt	
			else
				return DerivedPortalNetAmountAfterDiscount


		DerivedUnappliedReceivablePaymentRemittanceDetailAppldAmt is a DerivedField	
			type is like InternationalAmount
			include SumUnappliedReceivablePaymentRemittanceDetailRelAmounts
			return SumOfUnappliedReceivablePaymentRemittanceDetailRelAppldAmt


		DerivedPortalSignedOpenAmount is a DerivedField	
			type is like InternationalAmount
			if (UnappliedReceivablePaymentRemittanceDetailRel not exists
			and not PartiallyApplied)
				return SignedOpenAmount - ReceivableInvoiceDetail.PortalRequestedAppliedAmount
			else
			if (UnappliedReceivablePaymentRemittanceDetailRel exists
			and not PartiallyApplied)
				return SignedOpenAmount - DerivedUnappliedReceivablePaymentRemittanceDetailAppldAmt	
			else
			if (PartiallyApplied)
				return SignedOpenAmount
			else
				return ReceivableInvoiceDetail.DerivedSignedOpenAmount

		DerivedSignedPortalDiscountAmount is a DerivedField	
			type is like InternationalAmount
			if (DerivedPortalDiscountPercent entered)
				if (IsCreditMemo)
					return DerivedPortalDiscountAmount
				else
					return DerivedPortalDiscountAmount * -1
			else
				return 0

		InvoiceDetailGroupFieldWithRecord is a LabelField	
			"<ReceivableInvoiceDetail.ReceivableInvoiceDetailType>_-_<ReceivableInvoiceDetail.Invoice>_-_<ReceivableInvoiceDetail.PaymentSeq>"	//FSM-6534 - Removing RepresentativeText as that took up too much space in the title//.RepresentativeText>"

		InvoiceDetailGroupField is a DerivedField	
			type is MessageField
			return InvoiceDetailGroupFieldWithRecord


		FilteredAmountCompanyCurrency is a DerivedField
			type is like InternationalAmount
				precision is Company.Currency.NumberOfDecimals
			restricted
			if (!ReceivableFilterMatch)
				return 0
			else
				if (OriginalCurrency = ReceivableInvoiceDetail.Company.Currency)
					WorkAmount = TransactionAmount
				else
					CurrencyWork.FinanceEnterpriseGroup			= GeneralLedgerCompanyRel.FinanceEnterpriseGroup
					CurrencyWork.ExchangeDate					= TransactionDate
					CurrencyWork.TransactionAmount				= TransactionAmount
					CurrencyWork.FromCurrency					= OriginalCurrency 
					CurrencyWork.BaseAmount.ToCurrency			= ReceivableInvoiceDetail.Company.Currency 
					WorkAmount									= CurrencyWork.BaseAmount.OutputCurrencyAmount

				if (IsCreditMemo)
					return WorkAmount * -1
				else
					return WorkAmount


		FilteredAmountCustomerCurrency is a DerivedField
			type is like InternationalAmount
			restricted
			if (!ReceivableFilterMatch)
				return 0
			else
				if (OriginalCurrency = CompanyCustomerRel.Currency)
					WorkAmount = TransactionAmount
				else
					CurrencyWork.FinanceEnterpriseGroup			= GeneralLedgerCompanyRel.FinanceEnterpriseGroup
					CurrencyWork.ExchangeDate					= TransactionDate
					CurrencyWork.TransactionAmount				= TransactionAmount
					CurrencyWork.FromCurrency					= OriginalCurrency 
					CurrencyWork.BaseAmount.ToCurrency			= CompanyCustomerRel.Currency 
					WorkAmount									= CurrencyWork.BaseAmount.OutputCurrencyAmount

				if (IsCreditMemo)
					return WorkAmount * -1
				else
					return WorkAmount


		FilteredAmountGroupCurrency is a DerivedField
			type is like InternationalAmount
			restricted
			if (!ReceivableFilterMatch)
				return 0
			else
				if (OriginalCurrency = Company.CustomerGroupField.CustomerGroup.Currency)
					WorkAmount = TransactionAmount
				else
					CurrencyWork.FinanceEnterpriseGroup			= GeneralLedgerCompanyRel.FinanceEnterpriseGroup
					CurrencyWork.ExchangeDate					= TransactionDate
					CurrencyWork.TransactionAmount				= TransactionAmount
					CurrencyWork.FromCurrency					= OriginalCurrency 
					CurrencyWork.BaseAmount.ToCurrency			= ReceivableInvoiceDetail.Company.CustomerGroupField.CustomerGroup.Currency 
					WorkAmount									= CurrencyWork.BaseAmount.OutputCurrencyAmount

				if (IsCreditMemo)
					return WorkAmount * -1
				else
					return WorkAmount


		NationalAccountAgingOpenAmount is a DerivedField
			type is like InternationalAmount
			if (OriginalCurrency = NationalAccount.Company.CustomerGroupField.CustomerGroup.Currency)
				return OpenTransactionAmount
			else
			if (Company.Currency = NationalAccount.Company.CustomerGroupField.CustomerGroup.Currency)
				return OpenBaseAmount
			else
				CurrencyWork.FinanceEnterpriseGroup						= GeneralLedgerCompanyRel.FinanceEnterpriseGroup
				CurrencyWork.ExchangeDate								= TransactionDate
				CurrencyWork.TransactionAmount							= OpenTransactionAmount
				CurrencyWork.FromCurrency								= OriginalCurrency 
				CurrencyWork.BaseAmount.ToCurrency						= NationalAccount.Company.CustomerGroupField.CustomerGroup.Currency 
				return CurrencyWork.BaseAmount.OutputCurrencyAmount

		NationalAccountAgingCustomerCurrencyOpenAmount is a DerivedField			
			type is like InternationalAmount
			initialize CurrencyWork
			if (OriginalCurrency != NationalCompanyCustomerRel.Currency)
				CurrencyWork.FinanceEnterpriseGroup						= GeneralLedgerCompanyRel.FinanceEnterpriseGroup
				CurrencyWork.ExchangeDate								= TransactionDate
				CurrencyWork.TransactionAmount							= OpenTransactionAmount
				CurrencyWork.FromCurrency								= OriginalCurrency 
				CurrencyWork.BaseAmount.ToCurrency						= NationalCompanyCustomerRel.Currency 
				return CurrencyWork.BaseAmount.OutputCurrencyAmount
			else
				return OpenTransactionAmount
		
		NationalAccountAgingOpenAmountLessDispute is a DerivedField
			type is like InternationalAmount
			if (OriginalCurrency = NationalAccount.Company.CustomerGroupField.CustomerGroup.Currency)
				if (ReceivableInvoiceDetail.DisputeSequence entered)

					return (OpenTransactionAmount - AgingDisputeAmount)	
				else
					return OpenTransactionAmount
			else
			if (Company.Currency = NationalAccount.Company.CustomerGroupField.CustomerGroup.Currency)
				if (ReceivableInvoiceDetail.DisputeSequence entered)

					return (OpenBaseAmount - AgingDisputeAmount)	
				else
					return OpenBaseAmount
			else
				CurrencyWork.FinanceEnterpriseGroup						= GeneralLedgerCompanyRel.FinanceEnterpriseGroup
				CurrencyWork.ExchangeDate								= TransactionDate
				CurrencyWork.TransactionAmount							= OpenTransactionAmount
				CurrencyWork.FromCurrency								= OriginalCurrency 
				CurrencyWork.BaseAmount.ToCurrency						= NationalAccount.Company.CustomerGroupField.CustomerGroup.Currency 
				if (ReceivableInvoiceDetail.DisputeSequence entered)

					return (CurrencyWork.BaseAmount.OutputCurrencyAmount - AgingDisputeAmount)	
				else
					return CurrencyWork.BaseAmount.OutputCurrencyAmount

		NationalAccountAgingCustomerCurrencyOpenAmountLessDispute is a DerivedField			
			type is like InternationalAmount
			initialize CurrencyWork
			if (OriginalCurrency != NationalCompanyCustomerRel.Currency)
				CurrencyWork.FinanceEnterpriseGroup						= GeneralLedgerCompanyRel.FinanceEnterpriseGroup
				CurrencyWork.ExchangeDate								= TransactionDate
				CurrencyWork.TransactionAmount							= OpenTransactionAmount
				CurrencyWork.FromCurrency								= OriginalCurrency 
				CurrencyWork.BaseAmount.ToCurrency						= NationalCompanyCustomerRel.Currency 
				if (ReceivableInvoiceDetail.DisputeSequence entered)
					return (CurrencyWork.BaseAmount.OutputCurrencyAmount - AgingDisputeAmount)	
				else
					return CurrencyWork.BaseAmount.OutputCurrencyAmount
			else 
				if (ReceivableInvoiceDetail.DisputeSequence entered)
					return (OpenTransactionAmount - AgingDisputeAmount)
				else
					return OpenTransactionAmount

		NationalAccountAmount is a DerivedField
			type is like InternationalAmount
			if (OriginalCurrency = NationalAccount.Company.CustomerGroupField.CustomerGroup.Currency)
				return TransactionAmount
			else
			if (Company.Currency = NationalAccount.Company.CustomerGroupField.CustomerGroup.Currency)
				return BaseAmount
			else
				CurrencyWork.FinanceEnterpriseGroup						= GeneralLedgerCompanyRel.FinanceEnterpriseGroup
				CurrencyWork.ExchangeDate								= TransactionDate
				CurrencyWork.TransactionAmount							= TransactionAmount
				CurrencyWork.FromCurrency								= OriginalCurrency 
				CurrencyWork.BaseAmount.ToCurrency						= NationalAccount.Company.CustomerGroupField.CustomerGroup.Currency 
				return CurrencyWork.BaseAmount.OutputCurrencyAmount


		OpenAmount  is a DerivedField
			type is like InternationalAmount
			return ReceivableInvoiceDetail.OpenAmount



		OpenAmountDisplayCurrency is a DerivedField
			type is like InternationalAmount
			restricted

			if (OriginalCurrency != DerivedDisplayCurrency)
				CurrencyWork.ExchangeDate								= DerivedExchangeDate
				CurrencyWork.TransactionAmount							= OpenAmount
				CurrencyWork.FromCurrency								= OriginalCurrency
				CurrencyWork.BaseAmount.ToCurrency						= DerivedDisplayCurrency 
				return CurrencyWork.BaseAmount.OutputCurrencyAmount
			else
				return OpenAmount


		OpenAmountDisplayCurrencyNA is a DerivedField
			type is like InternationalAmount
			restricted
			if (OriginalCurrency != ContextReceivablePaymentRel.OriginalCurrency)
				CurrencyWork.FinanceEnterpriseGroup						= GeneralLedgerCompanyRel.FinanceEnterpriseGroup
				CurrencyWork.ExchangeDate								= DerivedExchangeDate
				CurrencyWork.TransactionAmount							= OpenAmount
				CurrencyWork.FromCurrency								= OriginalCurrency
				CurrencyWork.BaseAmount.ToCurrency						= DerivedDisplayCurrency 
				return CurrencyWork.BaseAmount.OutputCurrencyAmount
			else
				return OpenAmount


		OverApplicationConditionalErrorMessage is a ConditionalField
			type is Text
			if (HasReceivableApplicationSelect)
				OverApplicationErrorMsg1
			else
			if (HasReceivableApplicationAdjustmentSelect)
				OverApplicationErrorMsg2
			else
			if (PartiallyApplied)
				OverApplicationErrorMsg3
			else
				OverApplicationErrorMsg4


		OverApplicationErrorMsg1 is a MessageField
			restricted
			"Invoice<ReceivableInvoiceDetail.Invoice>HasPendingSelectionRecords;NotEligibleForOverCashApplication"


		OverApplicationErrorMsg2 is a MessageField
			restricted
			"Invoice<ReceivableInvoiceDetail.Invoice>HasAdjustments;NotEligibleForOverCashApplication"


		OverApplicationErrorMsg3 is a MessageField
			restricted
			"Invoice<ReceivableInvoiceDetail.Invoice>IsPartiallyApplied;NotEligibleForOverCashApplication"


		OverApplicationErrorMsg4 is a MessageField
			restricted
			"NotEligibleForOverCashApplication"


		Selected is a DerivedField
			type is Alpha 3  
			restricted
			if (HasReceivableApplicationSelect)
				return "Yes"  


		SelectedForGrouping is a DerivedField
			type is Alpha 3   
			if (HasReceivableInvoiceObligationGroup)
				return "Yes"  


		Sign is a DerivedField
			type is Alpha 1
			restricted
			if (IsCreditMemo)
				return "-"
			else
				return "+"


		DerivedReceivableInvoiceDetailSelectDistributionSetState is a DerivedField 
			type is AlphaUpper size 1
			restricted
			if (AllowSelectDistributionSet)
				if (SummarizeDetail)
					if (any SameInvoiceRel.ReceivableApplicationSelectRel exists)
						if (any SameInvoiceRel.ReceivableApplicationSelectRel.TransientDistributionSetState.OutOfBalance)
							return "I"
						else
							return "C"
					else
						return ""
				else
					if (ReceivableApplicationSelectRel exists)
						if (ReceivableApplicationSelectRel.TransientDistributionSetState.OutOfBalance)
							return "I"
						else
						if (ReceivableApplicationSelectRel.TransientDistributionSetState.NotApplicable)
							return "N"
						else
							return "C"
					else
						return ""
			else
				return ""


		DerivedReceivableInvoiceDetailSelectDistributionSetStateNoSummarize is a DerivedField 
			type is AlphaUpper size 1
			restricted
			if (AllowSelectDistributionSet)
				if (ReceivableApplicationSelectRel exists)
					if (ReceivableApplicationSelectRel.TransientDistributionSetState.OutOfBalance)
						return "I"
					else
					if (ReceivableApplicationSelectRel.TransientDistributionSetState.NotApplicable)
						return "N"
					else
						return "C"
				else
					return ""
			else
				return ""


		SignedBaseAmount is a DerivedField
			type is like InternationalAmount
				precision is Company.Currency.NumberOfDecimals
			restricted
			if (IsCreditMemo)
				return BaseAmount * -1
			else
				return BaseAmount


		SignedBaseCurrentAmount is a DerivedField
			type is like InternationalAmount
				precision is Company.Currency.NumberOfDecimals
			restricted
			CurrencyWork.FinanceEnterpriseGroup						= GeneralLedgerCompanyRel.FinanceEnterpriseGroup
			CurrencyWork.ExchangeDate								= current corporate date
			CurrencyWork.TransactionAmount							= TransactionAmount
			CurrencyWork.FromCurrency								= OriginalCurrency 
			CurrencyWork.BaseAmount.ToCurrency						= ReceivableInvoiceDetail.Company.Currency 
			if (IsCreditMemo)
				return CurrencyWork.BaseAmount.OutputCurrencyAmount * -1
			else
				return CurrencyWork.BaseAmount.OutputCurrencyAmount


		SignedBaseOpenAmount is a DerivedField	
			type is like InternationalAmount
				precision is Company.Currency.NumberOfDecimals
			restricted
			if (IsCreditMemo)
				return BaseOpenAmount * -1
			else
				return BaseOpenAmount


		SignedOpenAmount is a DerivedField
			type is like InternationalAmount
			restricted
			if (IsCreditMemo)
				return OpenAmount * -1
			else
				return OpenAmount


		SignedTransactionAmount is a DerivedField
			type is like InternationalAmount
			restricted
			if (IsCreditMemo)
				return TransactionAmount * -1
			else
				return TransactionAmount


	Field Rules

		Actor
			initial value is actor
			default to actor


		SelectedAdjustmentReason
			constraint (SelectedAdjustmentReason != "CURR")
				"CURRIsAReservedReasonCode"
			if (!Company.OverApplyInvoice)
				constraint (!SelectedAdjustmentReason.ReceivableAdjustmentReasonType.OverApplied)
					"CannotUse_\Over_\Applied_\Reason_\Code;ReasonCodeIsReservedForOverApplicationOfInvoiceProcess."
			if (ContextReceivablePaymentRel.IsZeroPaymentAllowAdjustments
			and ReceivableInvoiceRel.IsZeroPaymentAdjustmentsAllowed)
					if (SelectedAdjustmentReason entered)
						constraint (SelectedAdjustmentReason.ReceivableAdjustmentReasonType.OverShort)
							"AdjustmentReasonCodeMustBeOverShortTypeForZeroPaymentAdjustments"
					else
						if (SelectedAdjustedAmount entered)
							required
								"AdjustmentReasonRequiredIfAdjustmentAmountEntered"	
			else
			if (ContextReceivablePaymentRel.IsZeroPaymentAllowAdjustments
			and !ReceivableInvoiceRel.IsZeroPaymentAdjustmentsAllowed)
				constraint(ReceivableInvoiceRel.IsZeroPaymentAdjustmentsAllowed)
					"Invoice_\Company<ReceivableInvoiceRel.Company>DoesNotAllowZeroPaymentAdjustments"	

		LineSelectedAdjustmentReason
			constraint (LineSelectedAdjustmentReason != "CURR")
				"CURRIsAReservedReasonCode"
			if (!Company.OverApplyInvoice)
				constraint (!LineSelectedAdjustmentReason.ReceivableAdjustmentReasonType.OverApplied)
					"CannotUse_\Over_\Applied_\Reason_\Code;ReasonCodeIsReservedForOverApplicationOfInvoiceProcess."

			if (ContextReceivablePaymentRel.IsZeroPaymentAllowAdjustments
			and ReceivableInvoiceRel.IsZeroPaymentAdjustmentsAllowed)
					if (LineSelectedAdjustmentReason entered)
						constraint (LineSelectedAdjustmentReason.ReceivableAdjustmentReasonType.OverShort)
							"AdjustmentReasonCodeMustBeOverShortTypeForZeroPaymentAdjustments"
					else
						if (LineSelectedAdjustedAmount entered)
							required
								"AdjustmentReasonRequiredIfAdjustmentAmountEntered"
			else
			if (ContextReceivablePaymentRel.IsZeroPaymentAllowAdjustments
			and !ReceivableInvoiceRel.IsZeroPaymentAdjustmentsAllowed)
				constraint(ReceivableInvoiceRel.IsZeroPaymentAdjustmentsAllowed)
					"Invoice_\Company<ReceivableInvoiceRel.Company>DoesNotAllowZeroPaymentAdjustments"


		AmountToAdjustReason
			constraint (AmountToAdjustReason != "CURR")
				"CURRIsAReservedReasonCode"
			if (!Company.OverApplyInvoice)
				constraint (!AmountToAdjustReason.ReceivableAdjustmentReasonType.OverApplied)
					"CannotUse_\Over_\Applied_\Reason_\Code;ReasonCodeIsReservedForOverApplicationOfInvoiceProcess."


		WriteoffAccount	
			BypassProjectDateEdit = true	

		WriteoffAmount	
			BypassProjectDateEdit = true	

		WriteoffReason
			BypassProjectDateEdit = true	
			constraint (WriteoffReason != "CURR")
				"CURRIsAReservedReasonCode"
			constraint (!WriteoffReason.ReceivableAdjustmentReasonType.OverApplied)
					"CannotUse_\Over_\Applied_\Reason_\Code;ReasonCodeIsReservedForOverApplicationOfInvoiceProcess."

		WriteoffARIncomeWithholdingCode	
			if (WriteoffReason.ReceivableAdjustmentReasonType.TaxWithholding)	
				required	
					"AR_\Income_\Withholding_\CodeIsRequiredWith_\Adjustment_\Reason<WriteoffReason>,SinceItIsDefinedAs_\Tax_\Withholding"	
			constraint (WriteoffReason.ReceivableAdjustmentReasonType.TaxWithholding)	
				"AR_\Income_\Withholding_\CodeCanNotBePopulatedWith_\Adjustment_\Reason<WriteoffReason>,SinceItIsNotDefinedAs_\Tax_\Withholding"	

		WriteoffARIncomeWithholdingDocumentNumber	
			if (WriteoffReason.ReceivableAdjustmentReasonType.TaxWithholding)	
				required	
					"AR_\Income_\Withholding_\Document_\NumberIsRequiredWith_\Adjustment_\Reason<WriteoffReason>,SinceItIsDefinedAs_\Tax_\Withholding"	
			constraint (WriteoffReason.ReceivableAdjustmentReasonType.TaxWithholding)	
				"AR_\Income_\Withholding_\Document_\NumberCanNotBePopulatedWith_\Adjustment_\Reason<WriteoffReason>,SinceItIsNotDefinedAs_\Tax_\Withholding"	







































	Conditions

		IsNatFlag
			restricted
			when (NationalAccountIndicator.ChildCustomerFlag)

		AvailableForCashApplication
			restricted
			when (!BankTransactionCodeRel.IsBankServiceTransaction	
			and   !ReceivableInvoiceDetail.EFTTransaction
			and   !ReceivableInvoiceDetail.HasARToAPApplicationSelect
			and   !ReceivableInvoiceDetail.HasReceivableApplicationSelect)


		AvailableForCashApplicationSelect
			restricted




			when (!BankTransactionCodeRel.IsBankServiceOrCashPaymentAndOriginReceivable				
			and  !HasARToAPApplicationSelect
			and  (!HasReceivableApplicationSelect
			or	(ReceivableApplicationSelectRel.Company = ContextReceivablePaymentRel.Company
			and	ReceivableApplicationSelectRel.ReceivablePaymentHeader = ReceivablePaymentHeader
			and	ReceivableApplicationSelectRel.ReceivablePayment = ReceivablePayment)))

		CurrencyNotEqualToReceivablePaymentCurrency	
			when (OriginalCurrency != ContextReceivablePaymentRel.OriginalCurrency)	

		IntercompanyBilling
			restricted
			when (ReceivableInvoiceDetail.Origin.IntercompanyBilling)

		PartiallyApplied
			when (DerivedOpenAmount != DerivedTransactionAmount)

		HasReceivableApplicationAdjustments
			restricted
			when (first ReceivableApplicationAdjustmentRel exists)

		HasReceivableApplications
			restricted
			when (first ReceivableApplicationRel exists)

		HasReceivableInvoiceDisputes
			classic name is ARDSPUTE-EXIST
			when (ReceivableInvoiceDisputeRel exists
			and   any ReceivableInvoiceDisputeRel.ResolveDate not entered)

		HasSameInvoiceRel
			restricted
			when (first SameInvoiceRel exists)

		CreditMemoHasApplications
			restricted
			when (ReceivableInvoiceDetail.ReceivableInvoiceDetail.ReceivableInvoiceDetailType.CreditMemo
			and   CreditMemoReceivableApplicationRel exists)

		WithinCompanyRange
			restricted
			when (CompanyRange not entered
			or	ReceivableInvoiceDetail.Company within CompanyRange)

		WithinCustomerRange
			restricted
			when (CustomerRange not entered
			or	ReceivableInvoiceDetail.Customer within CustomerRange)

		WithinDiscountDateRange
			restricted
			when (DiscountDateRange not entered
			or	DiscountDate.DiscDate[1] within DiscountDateRange
			or	DiscountDate.DiscDate[2] within DiscountDateRange
			or	DiscountDate.DiscDate[3] within DiscountDateRange)

		WithinDateRanges
			restricted
			when ((TransactionDateRange not entered
			or	 TransactionDate within TransactionDateRange)
			and   (DiscountDateRange not entered
			or	DiscountDate.DiscDate[1] within DiscountDateRange
			or	DiscountDate.DiscDate[2] within DiscountDateRange
			or	DiscountDate.DiscDate[3] within DiscountDateRange)
			and   (DueDateRange not entered
			or	 DueDate within DueDateRange))

		WithinOpenAmountRange
			restricted
			when (OpenAmountRange not entered
			or   DerivedOpenAmount within OpenAmountRange)

		WithinProcessLevelRange
			restricted
			when (ReceivableProcessLevelRange not entered
			or	ReceivableProcessLevel within ReceivableProcessLevelRange)

		WithinInvoiceRange
			restricted
			when (ReceivableInvoiceRange not entered
			or	ReceivableInvoiceDetail.ReceivableInvoiceDetail.Invoice within ReceivableInvoiceRange)

		WithinXrefNbrRange
			restricted
			when (XrefNbrRange not entered
			or	ReceivableInvoiceDetail.ReceivableCrossReference.ReceivableInvoice within XrefNbrRange)

		WithinInvoiceAndXrefNbrRange
			restricted
			when ((ReceivableInvoiceRange not entered
			or	 ReceivableInvoiceDetail.ReceivableInvoiceDetail.Invoice within ReceivableInvoiceRange)
			and   (XrefNbrRange not entered
			or	 ReceivableInvoiceDetail.ReceivableCrossReference.ReceivableInvoice within XrefNbrRange))

		WithinProjectRange
			restricted
			when (ProjectRange not entered
			or	Project within ProjectRange)

		WithinCustomerPurchaseOrderRange
			restricted
			when (CustomerPurchaseOrderRange not entered
			or   CustomerPurchaseOrder within CustomerPurchaseOrderRange)

		WithinCurrencyRange
			restricted
			when (CurrencyRange not entered
			or	OriginalCurrency within CurrencyRange)

		WithinTransUser1Range
			restricted
			when (TransUser1Range not entered
			or	TransactionUserField1 within TransUser1Range)

		WithinTransactionDateRange
			restricted
			when (TransactionDateRange not entered
			or   (TransactionDateRange entered
			and   TransactionDate within TransactionDateRange))

		WithinDueDateRange
			restricted
			when (DueDateRange not entered
			or   (DueDateRange entered
			and   DueDate within DueDateRange))

		ReceivableFilterMatch
			restricted
			when ((CompanyCustomerRel.ReceivableFilterRel.ReceivableProcessLevel not entered
			or	 CompanyCustomerRel.ReceivableFilterRel.ReceivableProcessLevel = ReceivableProcessLevel)
			and   (CompanyCustomerRel.ReceivableFilterRel.Currency not entered
			or	 CompanyCustomerRel.ReceivableFilterRel.Currency = OriginalCurrency)
			and   (CompanyCustomerRel.ReceivableFilterRel.ProjectRange not entered
			or	 Project within CompanyCustomerRel.ReceivableFilterRel.ProjectRange)
			and   (CompanyCustomerRel.ReceivableFilterRel.DueDateRange not entered
			or	 DueDate within CompanyCustomerRel.ReceivableFilterRel.DueDateRange)
			and   (CompanyCustomerRel.ReceivableFilterRel.TransactionAmountRange not entered
			or	 TransactionAmount within CompanyCustomerRel.ReceivableFilterRel.TransactionAmountRange)
			and   (CompanyCustomerRel.ReceivableFilterRel.OpenAmountRange not entered
			or	 OpenAmount within CompanyCustomerRel.ReceivableFilterRel.OpenAmountRange)
			and   (CompanyCustomerRel.ReceivableFilterRel.TransactionDateRange not entered
			or	 TransactionDate within CompanyCustomerRel.ReceivableFilterRel.TransactionDateRange)
			and   (CompanyCustomerRel.ReceivableFilterRel.XrefNbrRange not entered
			or	 ReceivableInvoiceDetail.ReceivableCrossReference.ReceivableInvoice within CompanyCustomerRel.ReceivableFilterRel.XrefNbrRange)
			and   (CompanyCustomerRel.ReceivableFilterRel.TransUser1Range not entered
			or	 TransactionUserField1 within CompanyCustomerRel.ReceivableFilterRel.TransUser1Range)
			and   (CompanyCustomerRel.ReceivableFilterRel.CustomerPurchaseOrderRange not entered
			or	 CustomerPurchaseOrder within CompanyCustomerRel.ReceivableFilterRel.CustomerPurchaseOrderRange))








		CashApplicationOperatorRequired
			restricted
			when (NationalAccount.Company.CashOperatorRequired)

		CreditApplicationOperatorRequired  
			restricted
			when (DerivedContextCompanyCreditMemoRel.Company.CashOperatorRequired)

		AvailableForApplication
			restricted
			when (ReceivablePayment entered or DerivedCompanyOnCreditMemoApplicationForm)


		AvailableForCreditApplication
			restricted
			when  (!ReceivableApplicationSelectRel exists)

		AllowSelectForApplication
			restricted
			when (AvailableForApplication)	


		NotSummarizedOrFirstSummarizedLine
			restricted
			when (!SummarizeDetail
			or	 ReceivableInvoiceDetail.LowestOpenSequence)

		HasReceivableInvoiceObligationGroup
			restricted
			when (ReceivableInvoiceObligationGroupRel exists)

		CustomerInContext
			restricted
			when (ContextCompanyCustomer in context)

		AllowSelectForGrouping
			restricted
			when (ContextCompanyCustomer in context
			and  !HasReceivableInvoiceObligationGroup)

		AllowUnSelectForGrouping
			restricted
			when (ContextCompanyCustomer in context
			and  HasReceivableInvoiceObligationGroup)

		SelectForApplicationOperator
			restricted
			when (AllowSelectForApplication
			and   CashApplicationOperatorRequired)

		SelectForApplicationNoOperator
			restricted
			when (AllowSelectForApplication
			and   !CashApplicationOperatorRequired)

		HasReceivableApplicationSelect
			classic name is ARSAPL-EXISTS
			when (ReceivableApplicationSelectRel exists)

		HasReceivableApplicationSelectForInvoiceList	
			when ((ReceivableApplicationSelectRel exists)
			or SummarizeDetail and SameInvoiceRel.HasApplicationSelect)

		HasApplicationSelect
			when (ReceivableApplicationSelectRecordsExistRel exists)

		HasReceivableApplicationAdjustmentSelect
			when (ReceivableApplicationSelectRel.ReceivableApplicationAdjustmentSelectRel exists)

		IsCreditMemo
			restricted
			when (ReceivableInvoiceDetail.ReceivableInvoiceDetailType.CreditMemo)

		IsDebitMemo
			restricted
			when (ReceivableInvoiceDetail.ReceivableInvoiceDetailType.DebitMemo)

		IsInvoice
			restricted
			when (ReceivableInvoiceDetail.ReceivableInvoiceDetailType.Invoice)

		IsOpenAndPortalPaymentUnSelected	
			restricted
			when (!ReceivableInvoiceDetail.PortalPaymentSelected)	

		IsOpenAndPortalPaymentSelected	
			restricted
			when (ReceivableInvoiceDetail.PortalPaymentSelected)

		IsOpenAndPortalPaymentSelectedByThisCustomerRepresentativeContact	
			restricted
			when (ReceivableInvoiceDetail.PortalPaymentSelected
			and ActorContextCustomerRepresentativeContactEqualsPortalSelectedCustomerRepresentativeContact
			and ActorContextCustomerRepresentativeEqualsPortalSelectedCustomerRepresentative)

		IsOpenAndPortalPaymentSelectedByCRCOrUnselected	
			restricted
			when (IsOpenAndPortalPaymentSelectedByThisCustomerRepresentativeContact
			or IsOpenAndPortalPaymentUnSelected)


		IsOpenAndPortalPaymentSelectedByThisCustomerRepresentativeContactOrUnSelected	
			restricted
			when (IsOpenAndPortalPaymentSelected
			or IsOpenAndPortalPaymentUnSelected)

		InvoicesForPortalCustomer	
			restricted
			when  ((NationalAccountCustomerCheck)
			or		(actor.agent(CustomerRepresentativeContact).IsActiveInvoiceCustomerAndNotAllowPortalApplyCashAcrossReceivableCompanies
			and		ReceivableInvoiceDetail.Company.CustomerGroupField.CustomerGroup = actor.agent(CustomerRepresentativeContact).CustomerGroup
			and		Company = actor.agent(CustomerRepresentativeContact).ReceivableCompany
			and		Customer = actor.agent(CustomerRepresentativeContact).Customer)
			or		(actor.agent(CustomerRepresentativeContact).IsActiveInvoiceCustomerAndAllowPortalApplyCashAcrossReceivableCompanies
			and		ReceivableInvoiceDetail.Company.CustomerGroupField.CustomerGroup = actor.agent(CustomerRepresentativeContact).CustomerGroup
			and		Customer = actor.agent(CustomerRepresentativeContact).Customer))

		NationalAccountCustomerCheck	
			when 	(actor.agent(CustomerRepresentativeContact).IsActiveNationalAccountParent
			and		ReceivableInvoiceDetail.DerivedNationalCompany = actor.agent(CustomerRepresentativeContact).ReceivableCompany
 			and		ReceivableInvoiceDetail.DerivedNationalCustomer = actor.agent(CustomerRepresentativeContact).Customer)

		PortalThirdPartyPaymentProcessingPaymentCurrency	
			when (ReceivableInvoiceDetail.DerivedThirdPartyPaymentProcessingPaymentCurrency = OriginalCurrency)

		DerivedSignedOpenAmountEntered	
			restricted
			when (DerivedPortalSignedOpenAmount != 0)

		HasReceivableApplicationSelectNotSumLine	
			restricted
			when (ReceivableApplicationSelectRel exists
			and  !SummarizeDetail)

		HasReceivableApplicationSelectSumLine	
			restricted
			when (ReceivableApplicationSelectRel exists
			and   SummarizeDetail)

		HasReceivableApplicationSelectSummarizeLine	
			restricted
			when (ReceivableApplicationSelectRecordsExistRel exists
			and SummarizeDetail)

		ShowPortalNetAmountAlert	
			restricted
			when (TransientSelectSignedOpenAmount != DerivedPortalSignedOpenAmount
			and	  DerivedPortalDiscountPercent not entered)

		HasDiscountReceivableApplicationAdjustments	
			restricted
			when (first DiscountReceivableApplicationAdjustmentRel exists)

		ActorContextCustomerRepresentativeContactEqualsPortalSelectedCustomerRepresentativeContact	
			restricted
			when ((ReceivablePortalPaymentDetailRel exists
			and	  actor.context.CustomerRepresentativeContact = ReceivablePortalPaymentDetailRel.CustomerRepresentativeContact)
			or	  UnappliedReceivablePaymentRemittanceDetailsExists)

		UnappliedReceivablePaymentRemittanceDetailsExists	
			restricted
			when (UnappliedReceivablePaymentRemittanceDetailRel exists
			and   DerivedPortalNetAmountAfterDiscount - DerivedUnappliedReceivablePaymentRemittanceDetailAppldAmt != 0)

		ActorContextCustomerRepresentativeEqualsPortalSelectedCustomerRepresentative	
			restricted
			when ((ReceivablePortalPaymentDetailRel exists
			and	  actor.context.CustomerRepresentative = ReceivablePortalPaymentDetailRel.CustomerRepresentative)
			or	  UnappliedReceivablePaymentRemittanceDetailsExists)


		OnCreditMemoApplicationForm
			restricted
			when (ContextCreditMemoRel exists
			and   ContextCreditMemoRel.ReceivableInvoiceDetail != ReceivableInvoiceDetail.ReceivableInvoiceDetail)

		DerivedCompanyOnCreditMemoApplicationForm 
			restricted
			when (DerivedContextCompanyCreditMemoRel exists
			and   DerivedContextCompanyCreditMemoRel.ReceivableInvoiceDetail != ReceivableInvoiceDetail.ReceivableInvoiceDetail)

		MatchesSelectedForGroupingFilterCriteria
			when (SelectedForGroupingFilter not entered
			or   (SelectedForGroupingFilter entered
			and   SelectedForGroupingFilter.No
			and  !HasReceivableInvoiceObligationGroup)
			or   (SelectedForGroupingFilter entered
			and   SelectedForGroupingFilter.Yes
			and   HasReceivableInvoiceObligationGroup))

		WithinObligationGroupingFilter
			restricted
			when ((TransactionDateRange not entered
			or	(TransactionDateRange entered
			and	TransactionDate within TransactionDateRange))
			and   (DueDateRange not entered
			or	(DueDateRange entered
			and	DueDate within DueDateRange))
			and   (OpenAmountRange not entered
			or	 DerivedOpenAmount within OpenAmountRange)
			and   (CurrencyRange not entered
			or	 OriginalCurrency within CurrencyRange)
			and   MatchesSelectedForGroupingFilterCriteria)

		IsEligibleForOverCashApplication
			restricted
			when (Company.OverApplyInvoice
			and DerivedOpenAmount = DerivedTransactionAmount
			and (!HasReceivableApplicationSelect
			or  (HasReceivableApplicationSelect
			and !IsOverApplied)))

		IsOverApplied
			restricted
			when (ReceivableApplicationSelectRel.IsOverApplied)

		ValidForUnselect
			when (HasReceivableApplicationSelect
			or (HasApplicationSelect
			and SummarizeDetail))

		AllowSelectDistributionSet 
			restricted
			when (ReceivableInvoiceDetail.AllowSelectDistributionSet)
		
		CreditMemoCompanyAllowSelectDistributionSet 
			restricted
			when (DerivedContextCompanyCreditMemoRel.Company.SelectFundDistributionSet
			and   DerivedContextCompanyCreditMemoRel.Company.CustomerBusinessGroup.FinanceEnterpriseGroup.FundAccounting)

		ContextCreditMemoIsFundAccountingSupported
			restricted
			when (DerivedContextCompanyCreditMemoRel.ReceivableInvoiceRel.OriginIsFundAccountingSupported
			and   DerivedContextCompanyCreditMemoRel.ReceivableInvoiceRel.ProrateDistributionsRel exists)

		InvoiceIsFundAccountingSupported
			restricted
			when (ReceivableInvoiceRel.OriginIsFundAccountingSupported
			and   ReceivableInvoiceRel.ProrateDistributionsRel exists)

		CreditAndInvoiceAreBothFundAccountingOrBothNot
			restricted
			when ((ContextCreditMemoIsFundAccountingSupported
			and	   InvoiceIsFundAccountingSupported)
			or   (!ContextCreditMemoIsFundAccountingSupported
			and   !InvoiceIsFundAccountingSupported))

		AllowProrateAndSelectAll 
			restricted
			when (AllowSelectDistributionSet
			and (HasReceivableApplicationSelect
			or (HasApplicationSelect
			and SummarizeDetail))
			and !TransientReceivableInvoiceDetailSelectDistributionSetState.Complete
			and !TransientReceivableInvoiceDetailSelectDistributionSetState.NotApplicable)

		AllowMatchDistributionsForFundAccounting 
			restricted
			when (AllowProrateAndSelectAll
			and  (ReceivableInvoiceDetail.IsBillingInvoice
			and   ReceivableInvoiceDetail.AssociatedLine entered))

		DistributionSetNeedsReviewAllowSummarizeComplete 
			restricted
			when (TransientReceivableInvoiceDetailSelectDistributionSetState.Complete)

		DistributionSetNeedsReviewAllowSummarizeIncomplete 
			restricted
			when (TransientReceivableInvoiceDetailSelectDistributionSetState.Incomplete)

		DistributionSetNeedsReviewAllowSummarizeNotApplicable 
			restricted
			when (TransientReceivableInvoiceDetailSelectDistributionSetState.NotApplicable)

		DistributionSetNeedsReviewNoSummarizeComplete 
			restricted
			when (TransientReceivableInvoiceDetailSelectDistributionSetStateNoSummarize.Complete)

		DistributionSetNeedsReviewNoSummarizeIncomplete 
			restricted
			when (TransientReceivableInvoiceDetailSelectDistributionSetStateNoSummarize.Incomplete)
		
		DistributionSetNeedsReviewNoSummarizeNotApplicable 
			restricted
			when (TransientReceivableInvoiceDetailSelectDistributionSetStateNoSummarize.NotApplicable)

		IsSummarizeDetailAndHasMultipleApplicationSelectRecords	
			when (SummarizeDetail
			and CountOfReceivableApplicationSelectRecordsExistRel >1)	


		WriteoffReasonIsOverShortOrTaxWithholding	
			restricted	
			when (WriteoffReason.ReceivableReason.ReceivableAdjustmentReasonType.OverShort
			or WriteoffReason.ReceivableReason.ReceivableAdjustmentReasonType.TaxWithholding)


		WriteoffReasonIsTaxWithholding	
			restricted	
			when (WriteoffReason.ReceivableReason.ReceivableAdjustmentReasonType.TaxWithholding)
		
		IsNationalAccountTransactionExist	
			restricted
			when(NationalAccountTransaction exists)

		IsValidForActorContext	
			restricted
			when (GeneralLedgerCompanyRel.FinanceEnterpriseGroup = actor.context.FinanceEnterpriseGroup)	

		SecurityGroupAllowsAccess	
			when (actor.context.CompanySecurityGroup = blank
			or	  CompanySecurityGroupMemberRel exists)

		HasARToAPApplicationSelect							
			restricted
			when (ARToAPApplicationSelectRel exists)
		
		IsAttachmentAlertRequired
			restricted
			when (IsValidForAddAttachment
			and !ReceivableApplicationSelectRel.IsAttachmentEntered)

		IsValidForAddAttachment
			restricted
			when (ReceivableApplicationSelectRel.IsAttachmentRequired)


	Relations	



		CompanyCustomerRel	
			one-to-one relation to CompanyCustomer
			Field Mapping uses symbolic key
				related.Company		 = Company
				related.Customer	 = Customer

		NationalCompanyCustomerRel	
			one-to-one relation to CompanyCustomer
			Field Mapping uses symbolic key
				related.Company		 = NationalAccount.Company
				related.Customer	 = NationalAccount.Customer



		CompanySystemClosingControlRel	
			one-to-one relation to CompanySystemClosingControl
			Field Mapping uses BySystemCode
				related.GeneralLedgerSystemCode	 = "AR"
				related.Company					 = Company


		CustomerRepresentativeContactWithPaymentInProgressRel	
			one-to-many relation to CustomerRepresentativeContact
			Field Mapping uses symbolic key
				related.CustomerGroup					 = Company.CustomerGroupField.CustomerGroup
				related.CustomerRepresentative			 = CustomerRepresentative
				related.CustomerRepresentativeContact	 = CustomerRepresentativeContact
			Instance Selection
				where (related.PaymentInProgress)




		GeneralLedgerCompanyRel	
			one-to-one relation to GeneralLedgerCompany
			Field Mapping uses symbolic key
				related.Company		= Company


		CompanySecurityGroupMemberRel	
			one-to-one relation to GeneralLedgerCompanyGroupMember
			Field Mapping uses symbolic key
				related.GeneralLedgerCompanyGroup	= actor.context.CompanySecurityGroup.FinanceDimensionStructure
				related.Company						= Company




		ReceivableApplicationRel	
			one-to-many relation to ReceivableApplication
			Field Mapping uses symbolic key
				related.Company										 = Company
				related.ReceivableApplication.TransType				 = ReceivableInvoiceDetail.ReceivableInvoiceDetailType	
				related.ReceivableApplication.Invoice				 = ReceivableInvoiceDetail.Invoice	
				related.ReceivableApplication.PaymentSeq			 = ReceivableInvoiceDetail.PaymentSeq	
				related.ReceivableApplication.BatchNumber			 = ReceivableInvoiceRel.BatchNumber	
				related.ReceivableApplication.ApplicationSequence	 = any ReceivableInvoiceDetailRel.LastApplicationSequence	





		CreditMemoReceivableApplicationRel	
			one-to-many relation to ReceivableApplication
			Field Mapping uses Set3	
				related.CreditTransaction.CreditCompany		 = Company
				related.CreditTransaction.CreditCustomer	 = Customer
				related.CreditTransaction.CreditType		 = ReceivableInvoiceDetail.ReceivableInvoiceDetailType
				related.CreditTransaction.CreditNumber		 = ReceivableInvoiceDetail.Invoice
				related.CreditTransaction.CreditSequence	 = ReceivableInvoiceDetail.PaymentSeq
			Instance Selection
				where (!related.Writeoff)




		DiscountReceivableApplicationAdjustmentRel	
			one-to-many relation to ReceivableApplicationAdjustment
			Field Mapping uses Set3	
				related.Company	 = Company
				related.ReceivableApplication.TransType				= ReceivableInvoiceDetail.ReceivableInvoiceDetailType
				related.ReceivableApplication.Invoice				= ReceivableInvoiceDetail.Invoice
				related.ReceivableApplication.PaymentSeq			= ReceivableInvoiceDetail.PaymentSeq
				related.ReceivableApplication.BatchNumber			= ReceivableInvoiceRel.BatchNumber
				related.ReceivableApplication.ApplicationSequence	<= 9999999

		ReceivableApplicationAdjustmentRel	
			classic name is ARADJUST
			one-to-many relation to ReceivableApplicationAdjustment

			Field Mapping uses symbolic key
				related.Company										 = Company
				related.ReceivableApplication.TransType				 = ReceivableInvoiceDetail.ReceivableInvoiceDetailType	
				related.ReceivableApplication.Invoice				 = ReceivableInvoiceDetail.Invoice	
				related.ReceivableApplication.PaymentSeq			 = ReceivableInvoiceDetail.PaymentSeq	
				related.ReceivableApplication.BatchNumber			 = ReceivableInvoiceRel.BatchNumber	
				related.ReceivableApplication.ApplicationSequence	 = any ReceivableApplicationRel.ReceivableApplication.ApplicationSequence	









		ReceivableApplicationSelectRel	
			one-to-one relation to ReceivableApplicationSelect
			Field Mapping uses Set2
				related.ReceivableApplicationSelect.TransactionCompany									 = Company
				related.ReceivableApplicationSelect.ReceivableInvoiceDetail.ReceivableInvoiceDetailType	 = ReceivableInvoiceDetail.ReceivableInvoiceDetailType
				related.ReceivableApplicationSelect.ReceivableInvoiceDetail.Invoice						 = ReceivableInvoiceDetail.Invoice
				related.ReceivableApplicationSelect.ReceivableInvoiceDetail.PaymentSeq					 = ReceivableInvoiceDetail.PaymentSeq

		ReceivableApplicationSelectRecordsExistRel	
			one-to-many relation to ReceivableApplicationSelect
			Field Mapping uses Set2




			Instance Selection
				where (related.ReceivableApplicationSelect.TransactionCompany									 = ReceivableInvoiceDetail.Company
				and	   related.ReceivableApplicationSelect.ReceivableInvoiceDetail.ReceivableInvoiceDetailType	 = ReceivableInvoiceDetail.ReceivableInvoiceDetailType
				and	   related.ReceivableApplicationSelect.ReceivableInvoiceDetail.Invoice						 = ReceivableInvoiceDetail.Invoice)




		ReceivableFilterRel	
			one-to-one relation to ReceivableFilter
			Field Mapping uses symbolic key
				related.FinanceEnterpriseGroup	= actor.context.FinanceEnterpriseGroup
				related.ReceivableFilter		= actor




		ReceivableInvoiceRel	
			one-to-one relation to ReceivableInvoice
			required
			Field Mapping uses symbolic key
				related.Company					 = Company
				related.ReceivableInvoiceType	 = AlternateReceivableInvoiceType
				related.ReceivableInvoice		 = ReceivableInvoiceDetail.Invoice




		AllSummarizedInvoicesRel	
			one-to-many relation to ReceivableInvoiceDetail
			Field Mapping uses Set8
				related.Company								= Company
				related.AlternateReceivableInvoiceType		= AlternateReceivableInvoiceType
				related.ReceivableInvoiceDetail.Invoice		= ReceivableInvoiceDetail.Invoice
			Instance Selection
				where (related.SummarizeDetail
				and	   related.ReceivableInvoiceDetail.PaymentSeq	!= ReceivableInvoiceDetail.PaymentSeq
				and	   related.OpenAmount = 0)


		ContextCreditMemoRel	
			one-to-one relation to ReceivableInvoiceDetail
			Field Mapping uses symbolic key
				related.Company					 = ReceivableCompany
				related.ReceivableInvoiceDetail	 = ContextCreditMemo

		LocalContextCreditMemoRel 
			one-to-one relation to ReceivableInvoiceDetail
			Field Mapping uses symbolic key
				related.Company					 = LocalCreditMemoCompany
				related.ReceivableInvoiceDetail	 = ContextCreditMemo

		DerivedContextCompanyCreditMemoRel 
			one-to-one relation to ReceivableInvoiceDetail
			Field Mapping uses symbolic key
				related.Company					 = DerivedCreditMemoContextCompany
				related.ReceivableInvoiceDetail	 = ContextCreditMemo
			
		LocalSequenceInvoiceDetailRel	
			one-to-one relation to ReceivableInvoiceDetail
			Field Mapping uses Set8
				related.Company								= Company
				related.AlternateReceivableInvoiceType		= AlternateReceivableInvoiceType
				related.ReceivableInvoiceDetail.Invoice		= ReceivableInvoiceDetail.Invoice
				related.ReceivableInvoiceDetail.PaymentSeq	= LocalSequence


		ReceivableInvoiceDetailRel	
			classic name is AROITEMS
			one-to-one relation to ReceivableInvoiceDetail

			Field Mapping uses symbolic key
				related.Company												 = Company
				related.ReceivableInvoiceDetail.ReceivableInvoiceDetailType	 = ReceivableInvoiceDetail.ReceivableInvoiceDetailType
				related.ReceivableInvoiceDetail.Invoice						 = ReceivableInvoiceDetail.Invoice
				related.ReceivableInvoiceDetail.PaymentSeq					 = ReceivableInvoiceDetail.PaymentSeq


		SameInvoiceByCustomerProjectRel	
			one-to-many relation to ReceivableInvoiceDetail
			Field Mapping uses Set7
				related.Company										= Company
			Instance Selection
				where (related.AlternateReceivableInvoiceType		= AlternateReceivableInvoiceType
				and	   related.ReceivableInvoiceDetail.Invoice		= ReceivableInvoiceDetail.Invoice
				and	 ((IsCreditMemo
				and    related.IsCreditMemo)
				or   (!IsCreditMemo
				and   !related.IsCreditMemo)))

		SameInvoiceOpenRel	
			one-to-many relation to ReceivableInvoiceDetail
			Field Mapping uses Set8
				related.Company								= Company
				related.AlternateReceivableInvoiceType		= AlternateReceivableInvoiceType
				related.ReceivableInvoiceDetail.Invoice		= ReceivableInvoiceDetail.Invoice
			Instance Selection
				where (related.Sign							 = Sign 
				and	   related.OpenAmount					 > 0)







		SameInvoicePaymentSeqByCustomerProjectRel	
			one-to-many relation to ReceivableInvoiceDetail
			Field Mapping uses Set7
				related.Company										= Company
			Instance Selection
				where (related.AlternateReceivableInvoiceType		= AlternateReceivableInvoiceType
				and	   related.ReceivableInvoiceDetail.Invoice		= ReceivableInvoiceDetail.Invoice
				and    related.ReceivableInvoiceDetail.PaymentSeq	= ReceivableInvoiceDetail.PaymentSeq
				and	 ((IsCreditMemo
				and    related.IsCreditMemo)
				or   (!IsCreditMemo
				and   !related.IsCreditMemo)))

		SameInvoiceRel	
			one-to-many relation to ReceivableInvoiceDetail
			Field Mapping uses Set8
				related.Company								= Company
				related.AlternateReceivableInvoiceType		= AlternateReceivableInvoiceType
				related.ReceivableInvoiceDetail.Invoice		= ReceivableInvoiceDetail.Invoice
			Instance Selection
				where ((IsCreditMemo
				and     related.IsCreditMemo)
				or     (!IsCreditMemo
				and     !related.IsCreditMemo))

		SameInvoiceWithPaymentSeqRel	
			one-to-many relation to ReceivableInvoiceDetail
			Field Mapping uses Set8
				related.Company								 = Company
				related.AlternateReceivableInvoiceType		 = AlternateReceivableInvoiceType
				related.ReceivableInvoiceDetail.Invoice		 = ReceivableInvoiceDetail.Invoice
				related.ReceivableInvoiceDetail.PaymentSeq	 = ReceivableInvoiceDetail.PaymentSeq
			Instance Selection
				where ((IsCreditMemo
				and     related.IsCreditMemo)
				or     (!IsCreditMemo
				and     !related.IsCreditMemo))




		AgingDisputeRel	
			one-to-many relation to ReceivableInvoiceDispute
			Field Mapping uses symbolic key
				related.Company  = Company
				related.Customer = Customer
				related.ReceivableInvoiceDetail.ReceivableInvoiceDetailType	= ReceivableInvoiceDetail.ReceivableInvoiceDetailType	
				related.ReceivableInvoiceDetail.Invoice						= ReceivableInvoiceDetail.Invoice	
				related.ReceivableInvoiceDetail.PaymentSeq					= ReceivableInvoiceDetail.PaymentSeq	
			Instance Selection



				where (related.DisputeDate												<= current corporate date
				and (related.ResolveDate												= blank	
				or   related.ResolveDate												> current corporate date))

		ReceivableInvoiceDisputeRel	
			one-to-many relation to ReceivableInvoiceDispute
			Field Mapping uses symbolic key
				related.Company  = Company
				related.Customer = Customer
			Instance Selection
				where (related.ReceivableInvoiceDetail.ReceivableInvoiceDetailType	= AlternateReceivableInvoiceType
				and   related.ReceivableInvoiceDetail.Invoice						= ReceivableInvoiceDetail.Invoice)




		ReceivableInvoiceObligationGroupRel	
			one-to-one relation to ReceivableInvoiceObligationGroup
			Field Mapping uses symbolic key
				related.Company															 = Company
				related.ReceivableInvoiceObligationGroup.ReceivableInvoiceDetailType	 = ReceivableInvoiceDetail.ReceivableInvoiceDetailType
				related.ReceivableInvoiceObligationGroup.Invoice						 = ReceivableInvoiceDetail.Invoice
				related.ReceivableInvoiceObligationGroup.PaymentSeq						 = ReceivableInvoiceDetail.PaymentSeq




		LocalOperatorRel	
			one-to-one relation to ReceivableOperator
			Field Mapping uses symbolic key
				related.Company					= Company
				related.ReceivableOperator		= LocalOperator

		TransientOperatorRel	
			one-to-one relation to ReceivableOperator
			Field Mapping uses symbolic key
				related.Company					= ReceivableInvoiceDetail.Company
				related.ReceivableOperator		= TransientOperator




		ContextReceivablePaymentRel	
			one-to-one relation to ReceivablePayment
			Field Mapping uses symbolic key
				related.Company					 = DerivedReceivablePaymentContextCompany
				related.ReceivablePaymentHeader	 = ReceivablePaymentHeader
				related.ReceivablePayment		 = ReceivablePayment

		LocalContextReceivablePaymentRel
			one-to-one relation to ReceivablePayment
			Field Mapping uses symbolic key
				related.Company					 = LocalReceivablePaymentCompany
				related.ReceivablePaymentHeader	 = ReceivablePaymentHeader
				related.ReceivablePayment		 = ReceivablePayment

		ContextReceivablePaymentCashDetailRel
			one-to-one relation to ReceivablePaymentCashDetail
			Field Mapping uses symbolic key
				related.Company					 	= DerivedReceivablePaymentContextCompany
				related.ReceivablePaymentHeader	 	= ReceivablePaymentHeader
				related.ReceivablePayment		 	= ReceivablePayment
				related.ReceivablePaymentCashDetail	= ContextReceivablePaymentCashDetail


		UnappliedReceivablePaymentRemittanceDetailRel	
			one-to-many relation to ReceivablePaymentRemittance
			Field Mapping uses Set4	
				related.Company								=	actor.context.CustomerGroup.DerivedThirdPartyPaymentProcessingCompany
				related.ReceivableInvoiceType				=	ReceivableInvoiceDetail.ReceivableInvoiceDetailType
				related.ReceivableInvoice					=	ReceivableInvoiceDetail.Invoice
			Instance Selection


				where ((related.Company.ApplyCashAcrossReceivableCompanies
				and	   related.InvoiceCompany 				=	Company)
				and	   related.InvoiceDetail				=	ReceivableInvoiceDetail.PaymentSeq)



		ReceivablePortalPaymentDetailRel	
			one-to-one relation to ReceivablePortalPaymentDetail
			Field Mapping uses Set2
				related.ReceivablePortalPaymentHeader	 = actor.context.CustomerRepresentativeContact.ReceivablePortalPaymentHeader
				related.Customer						 = Customer
				related.FromReceivableCompany			 = Company
				related.ReceivableInvoiceDetailType		 = ReceivableInvoiceDetail.ReceivableInvoiceDetailType
				related.Invoice							 = ReceivableInvoiceDetail.Invoice
				related.PaymentSeq						 = ReceivableInvoiceDetail.PaymentSeq


		ARToAPApplicationSelectRel													
			one-to-one relation to ARToAPApplicationSelect
			Field Mapping uses Set2
				related.Company									 = Company
				related.ARToAPApplicationSelect.TransactionType	 = ReceivableInvoiceDetail.ReceivableInvoiceDetailType
				related.ARToAPApplicationSelect.Invoice			 = ReceivableInvoiceDetail.Invoice
				related.ARToAPApplicationSelect.PaymentSeq		 = ReceivableInvoiceDetail.PaymentSeq

		BankTransactionCodeRel														
			one-to-one relation to BankTransactionCode
			Field Mapping uses symbolic key
				related.CashManagementGroup		= GeneralLedgerCompanyRel.FinanceEnterpriseGroup
				related.BankTransactionCode		= BankTransactionCode
		
		ReceivableApplicationAdjustmentSelectRel
			one-to-many relation to ReceivableApplicationAdjustmentSelect
			Field Mapping uses symbolic key
			Instance Selection
				where (related.ReceivableApplicationAdjustmentSelect.Company	 = Company
				and   related.ReceivableApplicationAdjustmentSelect.TransType	 = ReceivableInvoiceDetail.ReceivableInvoiceDetailType
				and   related.ReceivableApplicationAdjustmentSelect.Invoice		 = ReceivableInvoiceDetail.Invoice
				and   related.ReceivableApplicationAdjustmentSelect.PaymentSeq	 = ReceivableInvoiceDetail.PaymentSeq
				and   related.ReceivableApplicationAdjustmentSelect.BatchNumber	 = BatchNumber)

	Sets

		Set10
			indexed
			Instance Selection
				where (IsNatFlag)
			Sort Order
				NationalAccount.Company
				NationalAccount.Customer
				OpenSortBaseAmount descending
				ReceivableInvoiceDetail
				Company
				Customer

		Set11
			indexed
			Instance Selection
				where (IsNatFlag)
			Sort Order
				NationalAccount.Company
				NationalAccount.Customer
				ReceivableProcessLevel
				ReceivableInvoiceDetail
				Company
				Customer

		Set12
			indexed
			Instance Selection
				where (IsNatFlag)
			Sort Order
				NationalAccount.Company
				NationalAccount.Customer
				TransactionUserField1
				ReceivableInvoiceDetail
				Company
				Customer

		Set13
			indexed
			Instance Selection
				where (IsNatFlag)
			Sort Order
				NationalAccount.Company
				NationalAccount.Customer
				Project
				ReceivableInvoiceDetail
				Company
				Customer

		Set14
			indexed
			Instance Selection
				where (IsNatFlag)
			Sort Order
				NationalAccount.Company
				NationalAccount.Customer
				CustomerPurchaseOrder
				ReceivableInvoiceDetail
				Company
				Customer

		Set2
			indexed
			Sort Order
				NationalAccount.Company
				NationalAccount.Customer
				DueDate
				ReceivableInvoiceDetail
				Company
				Customer

		Set3
			indexed
			Sort Order
				NationalAccount.Company
				NationalAccount.Customer
				OpenSortBaseAmount descending
				ReceivableInvoiceDetail
				Company
				Customer

		Set4
			indexed
			Sort Order
				NationalAccount.Company
				NationalAccount.Customer
				ReceivableProcessLevel
				ReceivableInvoiceDetail
				Company
				Customer

		Set5
			indexed
			Sort Order
				NationalAccount.Company
				NationalAccount.Customer
				TransactionUserField1
				ReceivableInvoiceDetail
				Company
				Customer

		Set6
			indexed
			Sort Order
				NationalAccount.Company
				NationalAccount.Customer
				Project
				ReceivableInvoiceDetail
				Company
				Customer

		Set7
			indexed
			Sort Order
				NationalAccount.Company
				NationalAccount.Customer
				CustomerPurchaseOrder
				ReceivableInvoiceDetail
				Company
				Customer

		Set8
			indexed
			Instance Selection
				where (IsNatFlag)
			Sort Order
				NationalAccountTransaction

		Set9
			indexed
			Instance Selection
				where (IsNatFlag)
			Sort Order
				NationalAccount.Company
				NationalAccount.Customer
				DueDate
				ReceivableInvoiceDetail
				Company
				Customer


		ByNationalAccount
			not indexed
			Sort Order

				NationalAccount.Company
				NationalAccount.Customer
				Company
				Customer
				ReceivableInvoiceDetail


		ByNationalAccountTransaction
			indexed
			Sort Order
				NationalAccount.Company
				NationalAccount.Customer
				ReceivableInvoiceDetail.ReceivableInvoiceDetailType
				ReceivableInvoiceDetail.Invoice
				ReceivableInvoiceDetail.PaymentSeq


				Company
				Customer

		ByChildNationalAccountTransaction
			indexed
			Sort Order
				Company
				Customer
				ReceivableInvoiceDetail.ReceivableInvoiceDetailType
				ReceivableInvoiceDetail.Invoice
				ReceivableInvoiceDetail.PaymentSeq
				NationalAccount.Company
				NationalAccount.Customer

		ByTransactionDate
			indexed
			Sort Order
				NationalAccount.Company
				NationalAccount.Customer
				TransactionDate
				ReceivableInvoiceDetail
				Company
				Customer


	Actions
		Create is a Create Action
			restricted
			Exit Rules
				if (invoking action = "ReceivableInvoice.Transfer"
				and	TransientNationalAccountIndicator entered)
					NationalAccountIndicator = TransientNationalAccountIndicator


		Delete is a Delete Action
			restricted


		Update is an Update Action
			Entrance Rules



				LocalCurrencyTable = ContextReceivablePaymentRel.Company.CurrencyTable
				LocalExchangeDate = DerivedExchangeDate

				if (ContextReceivablePaymentRel.IsPrepaymentTaxWithHolding)			
					constraint (!ReceivableInvoiceDetail.ReceivableInvoiceDetailType.CreditMemo)
						"PaymentHasThePrepaymentTax;CreditMemoCannotBeSelectedForProcessing"

				if (ContextReceivablePaymentRel.IsZeroPaymentAllowAdjustments
				and ReceivableInvoiceRel.IsZeroPaymentAdjustmentsAllowed)
					if (SelectedAdjustedAmount entered)
						constraint (SelectedAdjustedAmount >= 0)
							"AdjustmentAmountMustBePositive"
					else
						if (SelectedAdjustmentReason entered
						and SelectedAdjustmentReason.ReceivableAdjustmentReasonType.OverShort)
							constraint (SelectedAdjustedAmount entered)
								"AdjustmentAmountRequiredIfAdjustmentReasonEntered"
				else
				if (ContextReceivablePaymentRel.IsZeroPaymentAllowAdjustments
				and !ReceivableInvoiceRel.IsZeroPaymentAdjustmentsAllowed)
					constraint(ReceivableInvoiceRel.IsZeroPaymentAdjustmentsAllowed)
						"Invoice_\Company<ReceivableInvoiceRel.Company>DoesNotAllowZeroPaymentAdjustments"


				if (ContextReceivablePaymentRel.IsZeroPaymentAllowAdjustments
				and ReceivableInvoiceRel.IsZeroPaymentAdjustmentsAllowed)
					if (LineSelectedAdjustedAmount entered)
						constraint (SelectedAdjustedAmount >= 0)
							"AdjustmentAmountMustBePositive"
					else
						if (LineSelectedAdjustmentReason entered
						and LineSelectedAdjustmentReason.ReceivableAdjustmentReasonType.OverShort)
							constraint (LineSelectedAdjustedAmount entered)
								"AdjustmentAmountRequiredIfAdjustmentReasonEntered"
				else
				if (ContextReceivablePaymentRel.IsZeroPaymentAllowAdjustments
				and !ReceivableInvoiceRel.IsZeroPaymentAdjustmentsAllowed)
					constraint(ReceivableInvoiceRel.IsZeroPaymentAdjustmentsAllowed)
						"Invoice_\Company<ReceivableInvoiceRel.Company>DoesNotAllowZeroPaymentAdjustments"


				if  (DerivedCompanyOnCreditMemoApplicationForm or ReceivablePayment entered)
					if (SelectedApplicationAmount entered
					or  SelectedAdjustedAmount entered
					or  SelectedAdjustmentReason entered)
						constraint (ReceivableApplicationSelectRel.NumberOfAdjustments <= 1)
							"MultipleAdjustmentsExist;UseDetailScreenToChange"

						if (ReceivableApplicationSelectRel exists)
							constraint (!SummarizeDetail)
								"InvoiceHasSummarizeDetailForDisplay;MustUnselectandSelect"
				if (Company.OverApplyInvoice
				and !DerivedCompanyOnCreditMemoApplicationForm)
					initialize LocalDifferenceAmount
					if (SelectedApplicationAmount > OpenAmountDisplayCurrencyNA
					or  AmountToApply > OpenAmountDisplayCurrencyNA
					or  LineSelectedApplicationAmount > OpenAmountDisplayCurrencyNA)
						constraint (IsEligibleForOverCashApplication)
							"<OverApplicationConditionalErrorMessage>"
					if (SelectedApplicationAmount entered
					and SelectedApplicationAmount > OpenAmountDisplayCurrencyNA)
						constraint (!SummarizeDetail)
							"CannotBeOverApplied;InvoiceHasSummarizeDetailForDisplay"
						constraint (SelectedApplicationAmount <= ContextReceivablePaymentRel.PendingDifferenceDisplayCurrency)
							"InvoiceIsOverApplied;ExceedingPaymentOpenAmount"
						if (SelectedAdjustmentReason entered)
							constraint (SelectedAdjustmentReason exists)
								"ReceivableReason-<SelectedAdjustmentReason>NotDefinedForCompany-<Company>"
							constraint (SelectedAdjustmentReason.ReceivableAdjustmentReasonType.OverApplied)
								"AdjustmentReasonCodeMustBe_\Over_\AppliedType."
							constraint (SelectedAdjustmentReason = Company.OverApplyReasonCode)
								"AdjustmentReasonCode-<SelectedAdjustmentReason>;MustBeSameAsCompanyOver/Apply/Reason/Code-<Company.OverApplyReasonCode>"
						LocalDifferenceAmount = OpenAmountDisplayCurrencyNA - SelectedApplicationAmount
						if (SelectedAdjustedAmount != LocalDifferenceAmount)
							constraint (SelectedAdjustedAmount not entered)
								"CannotEnterAdjustmentAmount,WillBeDerivedForOverAppliedInvoice"
					else
						constraint (!SelectedAdjustmentReason.ReceivableAdjustmentReasonType.OverApplied)
							"CannotUse_\Over_\Applied_\Reason_\Code;ReasonCodeIsReservedForOverApplicationOfInvoiceProcess."
					if (AmountToApply entered
					and AmountToApply > OpenAmountDisplayCurrencyNA)
						constraint (!SummarizeDetail)
							"CannotBeOverApplied;InvoiceHasSummarizeDetailForDisplay"
						constraint (AmountToApply <= ContextReceivablePaymentRel.PendingDifferenceDisplayCurrency)
							"InvoiceIsOverApplied;ExceedingPaymentOpenAmount"
						if (AmountToAdjustReason entered)
							constraint (AmountToAdjustReason exists)
								"ReceivableReason-<AmountToAdjustReason>NotDefinedForCompany-<Company>"
							constraint (AmountToAdjustReason.ReceivableAdjustmentReasonType.OverApplied)
								"AdjustmentReasonCodeMustBe_\Over_\AppliedType."
							constraint (AmountToAdjustReason = Company.OverApplyReasonCode)
								"AdjustmentReasonCode-<AmountToAdjustReason>;MustBeSameAsCompanyOver/Apply/Reason/Code-<Company.OverApplyReasonCode>"
						LocalDifferenceAmount = OpenAmountDisplayCurrencyNA - AmountToApply
						if (AmountToAdjust != LocalDifferenceAmount)
							constraint (AmountToAdjust not entered)
								"CannotEnterAdjustmentAmount,WillBeDerivedForOverAppliedInvoice"
					else
						constraint (!AmountToAdjustReason.ReceivableAdjustmentReasonType.OverApplied)
							"CannotUse_\Over_\Applied_\Reason_\Code;ReasonCodeIsReservedForOverApplicationOfInvoiceProcess."
					if (LineSelectedApplicationAmount entered
					and LineSelectedApplicationAmount > OpenAmountDisplayCurrencyNA)
						constraint (!SummarizeDetail)
							"CannotBeOverApplied;LinesAreSummarized"
						constraint (LineSelectedApplicationAmount <= ContextReceivablePaymentRel.PendingDifferenceDisplayCurrency)
							"InvoiceIsOverApplied;ExceedingPaymentOpenAmount"
						if (LineSelectedAdjustmentReason entered)
							constraint (LineSelectedAdjustmentReason exists)
								"ReceivableReason-<LineSelectedAdjustmentReason>NotDefinedForCompany-<Company>"
							constraint (LineSelectedAdjustmentReason.ReceivableAdjustmentReasonType.OverApplied)
								"AdjustmentReasonCodeMustBe_\Over_\AppliedType."
							constraint (LineSelectedAdjustmentReason = Company.OverApplyReasonCode)
								"AdjustmentReasonCode-<LineSelectedAdjustmentReason>;MustBeSameAsCompanyOver/Apply/Reason/Code-<Company.OverApplyReasonCode>"
						LocalDifferenceAmount = OpenAmountDisplayCurrencyNA - LineSelectedApplicationAmount
						if (LineSelectedAdjustedAmount != LocalDifferenceAmount)
							constraint (LineSelectedAdjustedAmount not entered)
								"CannotEnterAdjustmentAmount,WillBeDerivedForOverAppliedInvoice"
					else
						constraint (!LineSelectedAdjustmentReason.ReceivableAdjustmentReasonType.OverApplied)
							"CannotUse_\Over_\Applied_\Reason_\Code;ReasonCodeIsReservedForOverApplicationOfInvoiceProcess."
				else
					constraint (!SelectedAdjustmentReason.ReceivableAdjustmentReasonType.OverApplied)
						"CannotUse_\Over_\Applied_\Reason_\Code;ReasonCodeIsReservedForOverApplicationOfInvoiceProcess."
					constraint (!AmountToAdjustReason.ReceivableAdjustmentReasonType.OverApplied)
						"CannotUse_\Over_\Applied_\Reason_\Code;ReasonCodeIsReservedForOverApplicationOfInvoiceProcess."
					constraint (!LineSelectedAdjustmentReason.ReceivableAdjustmentReasonType.OverApplied)
						"CannotUse_\Over_\Applied_\Reason_\Code;ReasonCodeIsReservedForOverApplicationOfInvoiceProcess."

				if (Company.CustomerGroupField.CustomerGroup.UseBillingReceivablesPortal	
				and (Customer  = actor.agent(CustomerRepresentativeContact).Customer	
				or NationalAccountCustomerCheck)	
				and TransientSelectSignedOpenAmount changed)	
					if (DerivedPortalSignedOpenAmount <0)	
						constraint (TransientSelectSignedOpenAmount entered
						and			TransientSelectSignedOpenAmount < 0)
							"Since_\Open_\AmountIsLessThanZero,EnteredAmountShouldBeLessThanZero"
						constraint (TransientSelectSignedOpenAmount >= DerivedPortalSignedOpenAmount)
							"EnteredAmountCannotBeGreaterThan_\Open_\Amount"
						if (TransientSelectSignedOpenAmount > DerivedSelectSignedOpenAmount)
							if (DerivedPortalDiscountPercent entered)
								if (DerivedDiscount1Date entered)
									confirmation required
										"DiscountIsNotEligibleForThe_\PartialAmount,Proceed?"
					else
						constraint (TransientSelectSignedOpenAmount entered
						and			TransientSelectSignedOpenAmount > 0)
							"Since_\Open_\AmountIsGreaterThanZero,EnteredAmountShouldBeGreaterThanZero"
						constraint (TransientSelectSignedOpenAmount <= DerivedPortalSignedOpenAmount)
							"EnteredAmountCannotBeGreaterThan_\Open_\Amount"
						if (TransientSelectSignedOpenAmount < DerivedSelectSignedOpenAmount)
							if (DerivedPortalDiscountPercent entered)
								if (DerivedDiscount1Date entered)
									confirmation required
										"DiscountIsNotEligibleForThe_\PartialAmount,Proceed?"


			Action Rules

				if (Company.CustomerGroupField.CustomerGroup.UseBillingReceivablesPortal	
				and (Customer  = actor.agent(CustomerRepresentativeContact).Customer	
				or ReceivableInvoiceDetail.DerivedNationalCustomer  = actor.agent(CustomerRepresentativeContact).Customer)	
				and TransientSelectSignedOpenAmount changed)	
					if (ReceivablePortalPaymentDetailRel exists)	
						invoke Update ReceivablePortalPaymentDetailRel	
							invoked.PortalRequestedAppliedAmount = TransientSelectSignedOpenAmount	
					else	
						invoke SelectForCreditCardOrACHPayment	



				if  (DerivedCompanyOnCreditMemoApplicationForm or ReceivablePayment entered)


					if (SelectedApplicationAmount entered
					or  SelectedAdjustedAmount entered
					or  SelectedAdjustmentReason entered)

						if (SelectedApplicationAmount not entered)
							if (ReceivableApplicationSelectRel exists)
								invoke Unselect
						else
						if (!ReceivableApplicationSelectRel exists)
							include EditTransientOperator
							invoke InvoiceSelection
								invoked.ReceivablePaymentGroup.Company							= ContextReceivablePaymentRel.Company
								invoked.ReceivablePaymentGroup.ReceivablePaymentHeader			= ReceivablePaymentHeader
								invoked.ReceivablePaymentGroup.ReceivablePayment				= ContextReceivablePaymentRel.ReceivablePayment

								if  (SelectedAdjustmentReason entered
								and  SelectedApplicationAmount = DerivedSelectApplicationAmount)

									invoked.PrmAmount											= SelectedApplicationAmount - SelectedAdjustedAmount
								else

									invoked.PrmAmount											= SelectedApplicationAmount

								invoked.PrmCurrency												= DerivedDisplayCurrency
								invoked.ApplicationGeneralLedgerDate							= TransientGeneralLedgerDate
								if (!CashApplicationOperatorRequired)
									invoked.ApplyOperator										= actor
								else
									invoked.ApplyOperator										= TransientOperator
								if (IsEligibleForOverCashApplication
								and SelectedApplicationAmount > OpenAmountDisplayCurrencyNA
								and !DerivedCompanyOnCreditMemoApplicationForm
								and !SummarizeDetail)
									invoked.PrmAdjustAmount										= OpenAmountDisplayCurrencyNA - SelectedApplicationAmount
									invoked.PrmAdjustReason										= Company.OverApplyReasonCode
								else
								if  (SelectedAdjustedAmount entered
								or   SelectedAdjustmentReason entered)
									invoked.PrmAdjustAmount											= SelectedAdjustedAmount
									invoked.PrmAdjustReason											= SelectedAdjustmentReason
						else
							constraint (!SummarizeDetail)
								"CannotChangeInvoiceWhereInvoiceHasSummarizeDetailForDisplay,MustUnselectAndReselect"
							invoke CashApplicationUpdate ReceivableApplicationSelectRel
								invoked.EnteredAmount						= SelectedApplicationAmount
								invoked.ApplicationCurrency					= DerivedDisplayCurrency
								invoked.GeneralLedgerDate					= TransientGeneralLedgerDate
								if  (SelectedAdjustedAmount entered
								or   SelectedAdjustmentReason entered)
									invoked.SelectedAdjustedAmount				= SelectedAdjustedAmount
									invoked.SelectedAdjustmentReason			= SelectedAdjustmentReason
					else
					if (LineSelectedApplicationAmount entered
					or  LineSelectedAdjustedAmount entered
					or  LineSelectedAdjustmentReason entered)
						if (LineSelectedApplicationAmount not entered)
							if (ReceivableApplicationSelectRel exists)
								invoke Unselect
						else
						if (!ReceivableApplicationSelectRel exists)
							include EditTransientOperator
							IsLineSelect = true
							invoke InvoiceSelection
								invoked.ReceivablePaymentGroup.Company							= ContextReceivablePaymentRel.Company
								invoked.ReceivablePaymentGroup.ReceivablePaymentHeader			= ReceivablePaymentHeader
								invoked.ReceivablePaymentGroup.ReceivablePayment				= ContextReceivablePaymentRel.ReceivablePayment
								if  (LineSelectedApplicationAmount = DerivedLineSelectApplicationAmount
								and LineSelectedAdjustmentReason entered)
									invoked.PrmAmount											= LineSelectedApplicationAmount - LineSelectedAdjustedAmount
								else
									invoked.PrmAmount											= LineSelectedApplicationAmount
								invoked.PrmCurrency												= DerivedDisplayCurrency
								invoked.ApplicationGeneralLedgerDate							= TransientGeneralLedgerDate
								invoked.ApplyOperator											= TransientOperator
								if (IsEligibleForOverCashApplication
								and LineSelectedApplicationAmount > OpenAmountDisplayCurrencyNA
								and !DerivedCompanyOnCreditMemoApplicationForm
								and !SummarizeDetail)
									invoked.PrmAdjustAmount										= OpenAmountDisplayCurrencyNA - LineSelectedApplicationAmount
									invoked.PrmAdjustReason										= Company.OverApplyReasonCode

								else
								if  (LineSelectedAdjustedAmount entered
								or   LineSelectedAdjustmentReason entered)
									invoked.PrmAdjustAmount											= LineSelectedAdjustedAmount
									invoked.PrmAdjustReason											= LineSelectedAdjustmentReason
						else
							invoke CashApplicationUpdate ReceivableApplicationSelectRel
								invoked.EnteredAmount					 	= LineSelectedApplicationAmount
								invoked.ApplicationCurrency					= DerivedDisplayCurrency
								invoked.GeneralLedgerDate					= TransientGeneralLedgerDate
								if  (LineSelectedAdjustedAmount entered
								or   LineSelectedAdjustmentReason entered)
									invoked.SelectedAdjustedAmount				= LineSelectedAdjustedAmount
									invoked.SelectedAdjustmentReason			= LineSelectedAdjustmentReason

					else
					if (AmountToApply entered
					or  AmountToAdjust entered
					or  AmountToAdjustReason entered)
						constraint (DerivedContextCompanyCreditMemoRel exists or ReceivablePayment entered)
							"CannotFindPaymentOrCreditMemoForApplication"

						if (ReceivablePayment entered)
							include EditTransientOperator
							invoke ApplyInvoiceToPayment
								invoked.ReceivablePaymentGroup.Company							= ContextReceivablePaymentRel.Company
								invoked.ReceivablePaymentGroup.ReceivablePaymentHeader			= ReceivablePaymentHeader
								invoked.ReceivablePaymentGroup.ReceivablePayment				= ReceivablePayment
								if  (AmountToApply = DerivedSelectApplicationAmount
								and  AmountToAdjustReason entered)
									invoked.PrmAmount											= AmountToApply - AmountToAdjust
								else
									invoked.PrmAmount											= AmountToApply
								invoked.PrmCurrency												= DerivedDisplayCurrency
								invoked.ApplicationGeneralLedgerDate							= TransientGeneralLedgerDate
								invoked.ApplyOperator											= TransientOperator
								if (IsEligibleForOverCashApplication
								and AmountToApply > OpenAmountDisplayCurrencyNA
								and !DerivedCompanyOnCreditMemoApplicationForm
								and !SummarizeDetail)
									invoked.PrmAdjustAmount 										= OpenAmountDisplayCurrencyNA - AmountToApply
									invoked.PrmAdjustReason											= Company.OverApplyReasonCode
								else
								if (AmountToAdjust entered)
									invoked.PrmAdjustAmount											= AmountToAdjust
									invoked.PrmAdjustReason											= AmountToAdjustReason
						else
						if (DerivedContextCompanyCreditMemoRel.ReceivableInvoiceDetail.Invoice entered)

							include EditTransientOperator
							include EditAllowSelectDistributionSetForApplyCredit
							invoke ApplyInvoice
								invoked.ReceivableInvoiceDetailGroup.Company					= DerivedContextCompanyCreditMemoRel.Company
								invoked.ReceivableInvoiceDetailGroup.ReceivableInvoiceDetail	= DerivedContextCompanyCreditMemoRel.ReceivableInvoiceDetail
								if  (AmountToApply = DerivedSelectApplicationAmount)
									invoked.PrmAmount											= AmountToApply - AmountToAdjust
								else
									invoked.PrmAmount											= AmountToApply
								invoked.ApplicationGeneralLedgerDate							= TransientGeneralLedgerDate
								invoked.ApplyOperator											= TransientOperator
								if (AmountToAdjust entered)
									invoked.PrmAdjustAmount											= AmountToAdjust
									invoked.PrmAdjustReason											= AmountToAdjustReason

				else

					if (WriteoffAmount entered
					or WriteoffReason entered
					or WriteoffAccount entered)
						constraint (WriteoffAmount entered
						and		 WriteoffReason entered)
							"MustEnterBothAmountAndReasonForWriteoff"
						constraint (TransientGeneralLedgerDate entered)
							"MustEnterAWrite-OffPostDate"
						constraint (WriteoffAmount > 0)
							"WriteOffAmountMustBeGreaterThanZero"
						if (SummarizeDetail)
							constraint (WriteoffAmount <= DerivedOpenAmount)
								"WriteOffAmountCannotExceedOpenAmount"
						else
							constraint (WriteoffAmount <= OpenAmount)
								"WriteOffAmountCannotExceedOpenAmount"
						constraint (WriteoffReasonIsOverShortOrTaxWithholding)	
							"ReasonCodeMustBeTypeOver_\ShortOrTax_\WithholdingForWriteOff"	//IEFIN-86538 added to allow TaxWithholding- was"ReasonCodeMustBeTypeOver/ShortForWriteOff"	
						constraint (!ReceivableApplicationSelectRel exists)
							"Invoice<ReceivableInvoiceDetail.Invoice>AlreadySelectedForProcessing"
						if (Company.VendorCreateAndInterfaceToAP)
							if (SummarizeDetail)
								constraint (!ReceivableInvoiceDetail.ARToAPApplicationSelectSumLineRel exists)
									"CannotWriteOff;UnreleasedARToAPInterfaceRecordsExist"
							else
								constraint (!ReceivableInvoiceDetail.ARToAPApplicationSelectRel exists)
									"CannotWriteOff;UnreleasedARToAPInterfaceRecordsExist"

						invoke ApplyInvoice
							invoked.Writeoff												= true
							invoked.ReceivableInvoiceDetailGroup.Company					= Company
							invoked.ReceivableInvoiceDetailGroup.ReceivableInvoiceDetail	= ReceivableInvoiceDetail
							invoked.ApplicationGeneralLedgerDate							= TransientGeneralLedgerDate
							invoked.PrmAdjustAmount											= WriteoffAmount
							invoked.PrmAdjustReason											= WriteoffReason
							invoked.PrmAdjustAccount										= WriteoffAccount
							invoked.PrmWriteoffARIncomeWithholdingCode						= WriteoffARIncomeWithholdingCode	
							invoked.PrmWriteoffARIncomeWithholdingDocumentNumber			= WriteoffARIncomeWithholdingDocumentNumber	



			Exit Rules
				if (SummarizeDetail)
					for each AllSummarizedInvoicesRel
						invoke Delete each.NationalAccountTransactionRel 
						
				if (ReceivableInvoiceDetail.OpenAmount = 0)
					invoke Delete
				if (DerivedContextCompanyCreditMemoRel exists
				and DerivedContextCompanyCreditMemoRel.OpenAmount = 0)	
					invoke Delete DerivedContextCompanyCreditMemoRel.NationalAccountTransactionRel


		FastUpdate is an Update Action
			bypass field rules
			restricted

		SelectForApplicationNoOperator is an Instance Action
			default label is "SelectOpenAmountForApplication"
			valid when (SelectForApplicationNoOperator)
			Action Rules
				if (!HasReceivableApplicationSelect)	
					invoke SelectOpenAmountForApplication
						invoked.ApplyOperator = actor

		SelectForApplicationOperator is an Instance Action
			default label is "SelectOpenAmountForApplication"
			valid when (SelectForApplicationOperator)
			Parameters
				ApplyOperator			is like ReceivableOperator
			Action Rules
				if (!HasReceivableApplicationSelect)	
					invoke SelectOpenAmountForApplication
						invoked.ApplyOperator = ApplyOperator



		SelectOpenAmountForApplication is an Instance Action
			restricted

			Parameters
				ApplyGeneralLedgerDate	is Date
					default label is "ApplyGlobalLedgerDate"
				ApplyOperator			is a ReceivableOperator

			Parameter Rules
				ApplyOperator
					default to actor
					if (CashApplicationOperatorRequired)
						required
							"OperatorIsRequired"
						constraint (ApplyOperator exists)
							"OperatorDoesNotExist"
						constraint (ApplyOperator.ActiveStatus.Active)
							"OperatorIsNotActive"
			Action Rules
				if (ContextReceivablePaymentRel.IsPrepaymentTaxWithHolding)		
					constraint (!ReceivableInvoiceDetail.ReceivableInvoiceDetailType.CreditMemo)
						"PaymentHasThePrepaymentTax;CreditMemoCannotBeSelectedForProcessing"

				constraint (!ReceivableApplicationSelectRel exists)
					"Invoice<ReceivableInvoiceDetail.Invoice>AlreadySelectedForProcessing"

				constraint (ContextReceivablePaymentRel.ReceivablePayment entered)
					"MustSelectPaymentForApplication"
				SelectedApplicationAmount 					 = DerivedSelectApplicationAmount

				if  (CompanyCustomerRel.DiscountAdjustmentReason entered
				and  DerivedSelectDiscountAmount entered)
					SelectedApplicationAmount				-= DerivedSelectDiscountAmount

				if (!ReceivableInvoiceDetail.ReceivableInvoiceDetailType.CreditMemo
				and !Company.PaymentOverApplication
				and !Company.AllowZeroPayments
				and  SelectedApplicationAmount > ContextReceivablePaymentRel.CashApplicationPendingOpen)
					SelectedApplicationAmount				= ContextReceivablePaymentRel.CashApplicationPendingOpen

			Exit Rules
				invoke InvoiceSelection
					if  (ContextReceivablePaymentRel exists)
						invoked.ReceivablePaymentGroup.Company						= ContextReceivablePaymentRel.Company 
						invoked.ReceivablePaymentGroup.ReceivablePaymentHeader		= ContextReceivablePaymentRel.ReceivablePaymentHeader
						invoked.ReceivablePaymentGroup.ReceivablePayment			= ContextReceivablePaymentRel.ReceivablePayment




					invoked.PrmAmount												= SelectedApplicationAmount
					invoked.PrmCurrency												= DerivedDisplayCurrency
					invoked.ApplicationGeneralLedgerDate							= DerivedGeneralLedgerDate
					invoked.ApplyOperator											= ApplyOperator
					if  (DerivedSelectDiscountAmount entered)
						invoked.PrmAdjustAmount										= DerivedSelectDiscountAmount
						invoked.PrmAdjustReason										= CompanyCustomerRel.DiscountAdjustmentReason



		LineItemSelectForApplicationNoOperator is an Instance Action
			default label is "SelectOpenAmountForApplication"
			valid when (SelectForApplicationNoOperator)
			Action Rules
				if (!HasReceivableApplicationSelect)	
					invoke LineItemSelection
						invoked.ApplyOperator = actor



		LineItemSelectForApplicationOperator is an Instance Action
			default label is "SelectOpenAmountForApplication"
			valid when (SelectForApplicationOperator)
			Parameters
				ApplyOperator		   is like ReceivableOperator
			Action Rules
				if (!HasReceivableApplicationSelect)	
					invoke LineItemSelection
						invoked.ApplyOperator = ApplyOperator



		LineItemSelection is an Instance Action
			restricted

			Parameters
				ApplyGeneralLedgerDate is Date
					default label is "ApplyGlobalLedgerDate"
				ApplyOperator		  is a ReceivableOperator
			Parameter Rules
				ApplyGeneralLedgerDate
					initial value is ContextReceivablePaymentRel.GeneralLedgerDate	
					initial value is current corporate date
				ApplyOperator
					if (CashApplicationOperatorRequired)	
						required
							"OperatorIsRequired"
						constraint (ApplyOperator exists)
							"OperatorDoesNotExist"
						constraint (ApplyOperator.ActiveStatus.Active)
							"OperatorIsNotActive"
			Action Rules
				if (ContextReceivablePaymentRel.IsPrepaymentTaxWithHolding)			
					constraint (!ReceivableInvoiceDetail.ReceivableInvoiceDetailType.CreditMemo)
						"PaymentHasThePrepaymentTax;CreditMemoCannotBeSelectedForProcessing"

				constraint (!ReceivableApplicationSelectRel exists)
					"Invoice<ReceivableInvoiceDetail.Invoice>AlreadySelectedForProcessing"

				constraint (ReceivablePayment entered)
					"MustSelectPaymentForApplication"

				LineSelectedApplicationAmount 					 = DerivedLineSelectApplicationAmount

				if (CompanyCustomerRel.DiscountAdjustmentReason entered
				and DerivedLineSelectDiscountAmount entered)
					LineSelectedAdjustmentReason				 = CompanyCustomerRel.DiscountAdjustmentReason
					LineSelectedAdjustedAmount					 = DerivedLineSelectDiscountAmount

				if ((LineSelectedAdjustmentReason				 = CompanyCustomerRel.DiscountAdjustmentReason)
				and (LineSelectedAdjustedAmount					 = DerivedLineSelectDiscountAmount)
				and (LineSelectedApplicationAmount				 = DerivedLineSelectApplicationAmount))
					LineSelectedApplicationAmount				-= LineSelectedAdjustedAmount

				if (!ReceivableInvoiceDetail.ReceivableInvoiceDetailType.CreditMemo
				and !Company.PaymentOverApplication
				and  LineSelectedApplicationAmount > ContextReceivablePaymentRel.CashApplicationPendingOpen)
					LineSelectedApplicationAmount				= ContextReceivablePaymentRel.CashApplicationPendingOpen

				if (DerivedLineSelectDiscountAmount entered)
					constraint (DerivedSelectDiscountReason entered)
						"AdjustmentReasonRequiredIfAdjustmentAmountEntered"
				if (DerivedSelectDiscountReason entered)
					constraint (DerivedLineSelectDiscountAmount entered)
						"AdjustmentAmountRequiredIfAdjustmentReasonEntered"

			Exit Rules
				invoke Create ReceivableApplicationSelect
					invoked.Company														= ContextReceivablePaymentRel.Company
					invoked.ReceivablePaymentHeader										= ReceivablePaymentHeader
					invoked.ReceivablePayment											= ReceivablePayment
					invoked.ReceivableApplicationSelect.TransactionCompany				= Company
					invoked.ReceivableApplicationSelect.ReceivableInvoiceDetail			= ReceivableInvoiceDetail
					invoked.EnteredAmount												= LineSelectedApplicationAmount
					invoked.ApplicationCurrency											= DerivedDisplayCurrency
					invoked.ReceivableOperator											= ApplyOperator
					invoked.GeneralLedgerDate											= ApplyGeneralLedgerDate








					invoked.SelectedAdjustmentReason									= LineSelectedAdjustmentReason
					invoked.SelectedAdjustedAmount										= LineSelectedAdjustedAmount



		InvoiceSelection is an Instance Action  
			restricted

			Parameters
				ReceivablePaymentGroup
				PrmAmount									is an InternationalAmount
				PrmCurrency									is a Currency
				PrmAdjustAmount								is an InternationalAmount
				PrmAdjustReason								is like ReceivableReason
				ApplicationGeneralLedgerDate				is Date
					default label is "ApplicationGlobalLedgerDate"
				ApplyOperator								is a ReceivableOperator
				RangeApplication 							is Boolean
				CashApplicationOrder						is Alpha size 1
					States
						Transaction								value is "T"
						Project									value is "P"

			Parameter Rules
				PrmAdjustAmount
					if (PrmAdjustReason not entered)
						cannot be entered
							"ReasonCodeRequiredIfAdjustAmountEntered"
					else
						required
							"AdjustmentAmountRequiredIfAdjustmentReasonEntered"
				PrmAdjustReason
					if (PrmAdjustAmount entered)
						required
							"AdjustmentAmountRequiredIfAdjustmentReasonEntered"

			Action Rules


				constraint (PrmAmount entered)
					"ApplicationAmountNotEntered"







				LocalApplicationAmount						= PrmAmount
				LocalDiscountAmount							= PrmAdjustAmount

				if  (!ReceivableInvoiceDetail.ReceivableInvoiceDetailType.CreditMemo
				and	 !ReceivablePaymentGroup.Company.PaymentOverApplication
				and  LocalApplicationAmount > ReceivablePaymentGroup.ReceivablePayment.CashApplicationPendingOpen)
					if (!ReceivablePaymentGroup.ReceivablePayment.IsZeroPayment)
						LocalApplicationAmount							= ReceivablePaymentGroup.ReceivablePayment.CashApplicationPendingOpen

				if (SummarizeDetail
				and !RangeApplication)
					if (CashApplicationOrder.Project
					and !AlternateReceivableInvoiceType.Mixed)
						if (IsLineSelect)
							for each SameInvoicePaymentSeqByCustomerProjectRel
								include CreateApplicationSelectForSummarizeDetail
						else
							for each SameInvoiceByCustomerProjectRel
								include CreateApplicationSelectForSummarizeDetail


					else
						if (IsLineSelect)
							for each SameInvoiceWithPaymentSeqRel
								include CreateApplicationSelectForSummarizeDetail
						else
							for each SameInvoiceRel
								include CreateApplicationSelectForSummarizeDetail
				else
					invoke Create ReceivableApplicationSelect
						invoked.Company														= ReceivablePaymentGroup.Company
						invoked.ReceivablePaymentHeader										= ReceivablePaymentGroup.ReceivablePaymentHeader
						invoked.ReceivablePayment											= ReceivablePaymentGroup.ReceivablePayment
						invoked.ReceivableApplicationSelect.TransactionCompany				= Company
						invoked.ReceivableApplicationSelect.ReceivableInvoiceDetail			= ReceivableInvoiceDetail
						invoked.EnteredAmount												= LocalApplicationAmount
						invoked.ApplicationCurrency											= PrmCurrency
						invoked.ReceivableOperator											= ApplyOperator


						invoked.GeneralLedgerDate											= ApplicationGeneralLedgerDate








						invoked.SelectedAdjustmentReason									= PrmAdjustReason
						invoked.SelectedAdjustedAmount										= LocalDiscountAmount
						if (Company.OverApplyInvoice
						and PrmAdjustReason = Company.OverApplyReasonCode)
							invoked.TransientOverApplyInvoice							 = true



		Unselect is an Instance Action
			valid when (ValidForUnselect)
			Action Rules
				if (SummarizeDetail)
					for each SameInvoiceRel
						invoke Purge each.ReceivableApplicationSelectRel
				else
					invoke Purge ReceivableApplicationSelectRel



		UnselectLineItem is an Instance Action
			default label is "Unselect"
			valid when (HasReceivableApplicationSelect)
			Action Rules
				invoke Purge ReceivableApplicationSelectRel


		MatchDistributionsForFundAccounting is an Instance Action 
			default label is "MatchDistributions"
			valid when (AllowMatchDistributionsForFundAccounting)
			Action Rules
				if (SummarizeDetail)
					confirmation required
						"AllSelectionsForThisInvoiceWithAnIncompleteDistributionSetWillBeMatched.Continue?"
					for each SameInvoiceRel
						if (each.ReceivableApplicationSelectRel exists
						and each.ReceivableApplicationSelectRel.TransientDistributionSetState.OutOfBalance)
							invoke MatchDistributionsForFundAccounting each.ReceivableApplicationSelectRel
				else
					invoke MatchDistributionsForFundAccounting ReceivableApplicationSelectRel


		ProrateAndSelectAll is an Instance Action 
			valid when (AllowProrateAndSelectAll)
			Action Rules
				if (SummarizeDetail)
					confirmation required
						"AllSelectionsForThisInvoiceWithAnIncompleteDistributionSetWillBeProrated.Continue?"
					for each SameInvoiceRel
						if (each.ReceivableApplicationSelectRel exists
						and each.ReceivableApplicationSelectRel.TransientDistributionSetState.OutOfBalance)
							invoke ProrateAndSelectAll each.ReceivableApplicationSelectRel
				else
					invoke ProrateAndSelectAll ReceivableApplicationSelectRel


		UpdateApplicationGeneralLedgerDates is an Instance Action
			default label is "UpdateApplicationGlobalLedgerDates"	
			completion message is "GlobalLedgerDatesHaveBeenUpdated"
			valid when (ReceivableInvoiceDetail.HasUnpostedCreditApplications)
			Parameters
				PrmGeneralLedgerDate		is Date
					default label is "GlobalLedgerDate"
			Action Rules
				for each ReceivableInvoiceDetail.UnpostedCreditApplicationRel
					if (each.Status.UnreleasedCashApplication)
						invoke UnreleasedCashApplication.Update each
							invoked.GeneralLedgerDate		= PrmGeneralLedgerDate
					else
					if (each.Status.RequiresAuditListing)
						invoke RequiresAuditListing.Update each
							invoked.GeneralLedgerDate		= PrmGeneralLedgerDate
					else
					if (each.Status.AvailableForPosting)
						invoke AvailableForPosting.Update each
							invoked.GeneralLedgerDate		= PrmGeneralLedgerDate



		ApplyToPaymentNoOperator is an Instance Action
			default label is "ApplyToPayment"
			valid when (SelectForApplicationNoOperator)
			Action Rules
				invoke ApplyToPayment
					invoked.ApplyOperator = actor


		ApplyToPaymentOperator is an Instance Action
			default label is "ApplyToPayment"
			valid when (SelectForApplicationOperator)
			Parameters
				ApplyOperator		   is like ReceivableOperator
			Action Rules
				invoke ApplyToPayment
					invoked.ApplyOperator = ApplyOperator


		ApplyToPayment is an Instance Action
			restricted

			Parameters
				ApplyGeneralLedgerDate  is Date
					default label is "ApplyGlobalLedgerDate"
				ApplyOperator		   is a ReceivableOperator

			Parameter Rules
				ApplyOperator
					default to actor
					if (CashApplicationOperatorRequired)
						required
							"OperatorIsRequired"
						constraint (ApplyOperator exists)
							"OperatorDoesNotExist"
						constraint (ApplyOperator.ActiveStatus.Active)
							"OperatorIsNotActive"

			Action Rules
				if (ContextReceivablePaymentRel.IsPrepaymentTaxWithHolding)			
					constraint (!ReceivableInvoiceDetail.ReceivableInvoiceDetailType.CreditMemo)
						"PaymentHasThePrepaymentTax;CreditMemoCannotBeSelectedForProcessing"
				constraint (!ReceivableApplicationSelectRel exists)
					"Invoice<ReceivableInvoiceDetail.Invoice>AlreadySelectedForProcessing"

				constraint (ReceivablePayment entered)
					"MustSelectPaymentForApplication"

				if (CompanyCustomerRel.DiscountAdjustmentReason entered
				and DerivedSelectDiscountAmount entered)
					AmountToApply 							= DerivedSelectApplicationAmount - DerivedSelectDiscountAmount
				else
					AmountToApply 							= DerivedSelectApplicationAmount

				if (!ReceivableInvoiceDetail.ReceivableInvoiceDetailType.CreditMemo
				and !Company.PaymentOverApplication
				and  AmountToApply > ContextReceivablePaymentRel.CashApplicationPaymentOpen)
					AmountToApply							= ContextReceivablePaymentRel.CashApplicationPaymentOpen

				constraint (AmountToApply entered)
					"ApplicationAmountNotEntered"

				invoke ApplyInvoiceToPayment
					invoked.ReceivablePaymentGroup.Company							= ContextReceivablePaymentRel.Company
					invoked.ReceivablePaymentGroup.ReceivablePaymentHeader			= ReceivablePaymentHeader
					invoked.ReceivablePaymentGroup.ReceivablePayment				= ReceivablePayment
					invoked.PrmAmount												= AmountToApply
					invoked.PrmCurrency												= DerivedDisplayCurrency
					invoked.ApplicationGeneralLedgerDate							= DerivedGeneralLedgerDate
					invoked.ApplyOperator											= ApplyOperator	
					if (CompanyCustomerRel.DiscountAdjustmentReason entered
					and DerivedSelectDiscountAmount entered)
						invoked.PrmAdjustAmount										= AmountToAdjust
						invoked.PrmAdjustReason										= AmountToAdjustReason

			Exit Rules
				if (SummarizeDetail)
					for each AllSummarizedInvoicesRel
						invoke Delete each.NationalAccountTransactionRel 
				if (ReceivableInvoiceDetail.OpenAmount = 0)
					invoke Delete



		QuickWriteoff is an Instance Action
			valid when (!IsOverApplied)
			Parameters
				Amount					is an InternationalAmount
				Type					is a ReceivableReasonType
				Reason					is a ReceivableReason
				PrmGeneralLedgerDate	is Date
				PrmWriteoffARIncomeWithholdingCode				is AlphaUpper size 10	
					default label is "IncomeWithholdingCode"	
				PrmWriteoffARIncomeWithholdingDocumentNumber	is AlphaUpper size 16	
					default label is "IncomeWithholdingDocumentNumber"	
				PrmAttachment			is an Attachment
					default label is "Attachment"

			Parameter Rules
				Amount
					required
					initial value is DerivedOpenAmount
					constraint (Amount > 0)
						"WriteOffAmountMustBeGreaterThanZero"
					if (SummarizeDetail)
						constraint (Amount <= DerivedOpenAmount)
							"WriteOffAmountCannotExceedOpenAmount"
					else
						constraint (Amount <= OpenAmount)
							"WriteOffAmountCannotExceedOpenAmount"

				Type
					default to "AD"
					initial value is "AD"

				Reason
					required
					constraint (Reason != "CURR")
						"CURRIsAReservedReasonCode"
					constraint (Reason.ReceivableAdjustmentReasonType.OverShort or Reason.ReceivableAdjustmentReasonType.TaxWithholding)	
						"ReasonCodeMustBeType_\Over_\ShortOr_\Tax_\WithholdingForWriteOff"	//IEFIN-86538 added to allow TaxWithholding- was"ReasonCodeMustBeTypeOver/ShortForWriteOff"	

				PrmWriteoffARIncomeWithholdingCode	
					if (Reason.ReceivableAdjustmentReasonType.TaxWithholding)	
						required	
							"AR_\Income_\Withholding_\CodeIsRequiredWith_\Adjustment_\Reason<Reason>,SinceItIsDefinedAs_\Tax_\Withholding"	
					constraint (Reason.ReceivableAdjustmentReasonType.TaxWithholding)	
						"AR_\Income_\Withholding_\CodeCanNotBePopulatedWith_\Adjustment_\Reason<Reason>,SinceItIsNotDefinedAs_\Tax_\Withholding"	

				PrmWriteoffARIncomeWithholdingDocumentNumber	
					if (Reason.ReceivableAdjustmentReasonType.TaxWithholding)	
						required	
							"AR_\Income_\Withholding_\Document_\NumberIsRequiredWith_\Adjustment_\Reason<Reason>,SinceItIsDefinedAs_\Tax_\Withholding"	
					constraint (Reason.ReceivableAdjustmentReasonType.TaxWithholding)	
						"AR_\Income_\Withholding_\Document_\NumberCanNotBePopulatedWith_\Adjustment_\Reason<Reason>,SinceItIsNotDefinedAs_\Tax_\Withholding"	

				PrmAttachment
					if (Reason.AttachmentRequired)
						required
							"Receivable_\Reason_\CodeIsSetForAttachmentRequired;AddAnAttachment"

					if (!Reason.AttachmentRequired)
						cannot be entered
							"Receivable_\Reason_\CodeIsNotSetForAttachmentRequired;RemoveTheAttachment"
			
			Action Rules
				constraint (!IsOverApplied)
					"CannotWriteOffWhenOverApplied"
					
				if (SummarizeDetail)
					constraint (!ReceivableInvoiceDetail.ARToAPApplicationSelectSumLineRel exists)
						"CannotWriteOff;UnreleasedARToAPInterfaceRecordsExist"
				else
					constraint (!ReceivableInvoiceDetail.ARToAPApplicationSelectRel exists)
						"CannotWriteOff;UnreleasedARToAPInterfaceRecordsExist"

				invoke ApplyInvoice
					invoked.Writeoff												= true
					invoked.ReceivableInvoiceDetailGroup.Company					= Company
					invoked.ReceivableInvoiceDetailGroup.ReceivableInvoiceDetail	= ReceivableInvoiceDetail
					invoked.PrmAdjustAmount											= Amount
					invoked.PrmAdjustReason											= Reason
					if (PrmGeneralLedgerDate not entered)





						invoked.ApplicationGeneralLedgerDate						=   DerivedGeneralLedgerDate	
					else
						invoked.ApplicationGeneralLedgerDate							= PrmGeneralLedgerDate
					if (PrmWriteoffARIncomeWithholdingCode entered)	
						invoked.PrmWriteoffARIncomeWithholdingCode					= PrmWriteoffARIncomeWithholdingCode	
					if (PrmWriteoffARIncomeWithholdingDocumentNumber entered)	
						invoked.PrmWriteoffARIncomeWithholdingDocumentNumber		= PrmWriteoffARIncomeWithholdingDocumentNumber	
					if (Reason.AttachmentRequired
					and PrmAttachment entered)
						invoked.PrmAttachment									= PrmAttachment



























			Exit Rules
				if (ReceivableInvoiceDetail.OpenAmount = 0)
					invoke Delete



		WriteOff is an Instance Action
			valid when (!IsOverApplied)
			Parameters
				PrmOperator							is like ReceivableOperator
				PrmGeneralLedgerDate				is Date
				PrmReceivableDistributionArray		is a ReceivableDistributionArray

				PrmTransactionCodeBlock1			is a TransactionCodeBlock	
				PrmTransactionCodeBlock2			is a TransactionCodeBlock
				PrmTransactionCodeBlock3			is a TransactionCodeBlock
				PrmTransactionCodeBlock4			is a TransactionCodeBlock
				PrmTransactionCodeBlock5			is a TransactionCodeBlock
				PrmTransactionCodeBlock6			is a TransactionCodeBlock
				PrmTransactionCodeBlock7			is a TransactionCodeBlock
				PrmTransactionCodeBlock8			is a TransactionCodeBlock
				PrmTransactionCodeBlock9			is a TransactionCodeBlock
				PrmTransactionCodeBlock10			is a TransactionCodeBlock

			
			Local Fields
				I2 			is Numeric 3
				I3 			is Numeric 3

			Parameter Rules
				PrmOperator
					default to actor
					if (Company.CashOperatorRequired)
						LocalOperator		= PrmOperator
						constraint (LocalOperatorRel exists)
							"OperatorDoesNotExist"
						constraint (LocalOperatorRel.ActiveStatus.Active)
							"OperatorIsNotActive"

				PrmGeneralLedgerDate	
					initial value is DerivedGeneralLedgerDate	
					default to DerivedGeneralLedgerDate	










				PrmTransactionCodeBlock1	
					LocalGeneralLedgerSystemCode = "AR"	
					BypassProjectDateEdit = true	

				PrmReceivableDistributionArray
					LocalGeneralLedgerSystemCode = "AR"	
					BypassProjectDateEdit = true	

					initialize I1
					initialize I2
					I1 += 1
					while (I1 < 11)	
						if (I1=1)
							PrmReceivableDistributionArray.ReceivableDistributionInput[I1].FinanceCodeBlock = PrmTransactionCodeBlock1
						else
						if (I1=2)
							PrmReceivableDistributionArray.ReceivableDistributionInput[I1].FinanceCodeBlock = PrmTransactionCodeBlock2
						else
						if (I1=3)
							PrmReceivableDistributionArray.ReceivableDistributionInput[I1].FinanceCodeBlock = PrmTransactionCodeBlock3
						else
						if (I1=4)
							PrmReceivableDistributionArray.ReceivableDistributionInput[I1].FinanceCodeBlock = PrmTransactionCodeBlock4
						else
						if (I1=5)
							PrmReceivableDistributionArray.ReceivableDistributionInput[I1].FinanceCodeBlock = PrmTransactionCodeBlock5
						else
						if (I1=6)
							PrmReceivableDistributionArray.ReceivableDistributionInput[I1].FinanceCodeBlock = PrmTransactionCodeBlock6
						else
						if (I1=7)
							PrmReceivableDistributionArray.ReceivableDistributionInput[I1].FinanceCodeBlock = PrmTransactionCodeBlock7
						else
						if (I1=8)
							PrmReceivableDistributionArray.ReceivableDistributionInput[I1].FinanceCodeBlock = PrmTransactionCodeBlock8
						else
						if (I1=9)
							PrmReceivableDistributionArray.ReceivableDistributionInput[I1].FinanceCodeBlock = PrmTransactionCodeBlock9
						else
						if (I1=10)
							PrmReceivableDistributionArray.ReceivableDistributionInput[I1].FinanceCodeBlock = PrmTransactionCodeBlock10
						
						if (I2 >= 1
						and PrmReceivableDistributionArray.ReceivableDistributionInput[I1] entered)
							initialize I3
							I3 = I2 
							constraint ((PrmReceivableDistributionArray.ReceivableDistributionInput[I2].ReasonCode entered
							or PrmReceivableDistributionArray.ReceivableDistributionInput[I2].TransactionAmount entered)
							or PrmReceivableDistributionArray.ReceivableDistributionInput[I2].Description entered
							or PrmReceivableDistributionArray.ReceivableDistributionInput[I2].FinanceCodeBlock entered)
								"Occurrence<I3>MustHaveTheValueEntered"
						I2 = I1
						I1 += 1































































			Action Rules
				constraint (!IsOverApplied)
					"CannotWriteOffWhenOverApplied"

				if (PrmGeneralLedgerDate not entered)
					if (Company.DefaultApplicationDate.LatestTransactionPostDate
					or Company.DefaultApplicationDate.PaymentCreditPostDate)		
						PrmGeneralLedgerDate = ReceivableInvoiceDetail.GeneralLedgerDate
					else
						PrmGeneralLedgerDate = current corporate date

				constraint (!ReceivableApplicationSelectRel exists)
					"Invoice<ReceivableInvoiceDetail.Invoice>AlreadySelectedForProcessing"

				if (Company.VendorCreateAndInterfaceToAP)
					if (SummarizeDetail)
						constraint (!ReceivableInvoiceDetail.ARToAPApplicationSelectSumLineRel exists)
							"CannotWriteOff;UnreleasedARToAPInterfaceRecordsExist"
					else
						constraint (!ReceivableInvoiceDetail.ARToAPApplicationSelectRel exists)
							"CannotWriteOff;UnreleasedARToAPInterfaceRecordsExist"

				initialize WorkTotal
				I1 = 1
				while (I1 < 11)
					if (PrmReceivableDistributionArray.ReceivableDistributionInput[I1].ReasonCode entered
					or PrmReceivableDistributionArray.ReceivableDistributionInput[I1].TransactionAmount entered)
						constraint (PrmReceivableDistributionArray.ReceivableDistributionInput[I1].ReasonCode entered)
							"ReasonCodeIsRequired"
						constraint (PrmReceivableDistributionArray.ReceivableDistributionInput[I1].TransactionAmount entered)
							"TransactionAmountIsRequired"
						constraint (PrmReceivableDistributionArray.ReceivableDistributionInput[I1].TransactionAmount <= DerivedOpenAmount)
							"WriteOffsCannotExceedOpenAmountOf<DerivedOpenAmount>"
						constraint (PrmReceivableDistributionArray.ReceivableDistributionInput[I1].ReasonCode.ReceivableAdjustmentReasonType.OverShort)
							"ReasonCodeMustBeTypeOver/ShortForWriteOff"
						if (PrmReceivableDistributionArray.ReceivableDistributionInput[I1].ReasonCode.AttachmentRequired)
							constraint (PrmReceivableDistributionArray.ReceivableDistributionInput[I1].Attachment entered)
								"Receivable_\Reason_\Code_\<PrmReceivableDistributionArray.ReceivableDistributionInput[I1].ReasonCode>IsSetForAttachmentRequired;AddAnAttachment"
						if (!PrmReceivableDistributionArray.ReceivableDistributionInput[I1].ReasonCode.AttachmentRequired)
							constraint (PrmReceivableDistributionArray.ReceivableDistributionInput[I1].Attachment not entered)
								"Receivable_\Reason_\Code_\<PrmReceivableDistributionArray.ReceivableDistributionInput[I1].ReasonCode>IsNotSetForAttachmentRequired;RemoveTheAttachment"
						WorkTotal += PrmReceivableDistributionArray.ReceivableDistributionInput[I1].TransactionAmount

					I1 +=1

				constraint (WorkTotal <= DerivedOpenAmount)
					"TotalWriteOffsCannotExceedOpenAmount"

				I1 = 1
				while (I1 < 11)
					if (PrmReceivableDistributionArray.ReceivableDistributionInput[I1].ReasonCode entered
					or PrmReceivableDistributionArray.ReceivableDistributionInput[I1].TransactionAmount entered)

						invoke ApplyInvoice
							invoked.Writeoff												= true
							if (PrmGeneralLedgerDate not entered)	
								invoked.ApplicationGeneralLedgerDate						= DerivedGeneralLedgerDate
							else
								invoked.ApplicationGeneralLedgerDate						= PrmGeneralLedgerDate
							invoked.ApplyOperator											= PrmOperator
							invoked.ReceivableInvoiceDetailGroup.Company					= Company
							invoked.ReceivableInvoiceDetailGroup.ReceivableInvoiceDetail	= ReceivableInvoiceDetail
							invoked.PrmAdjustAmount											= PrmReceivableDistributionArray.ReceivableDistributionInput[I1].TransactionAmount
							invoked.PrmAdjustReason											= PrmReceivableDistributionArray.ReceivableDistributionInput[I1].ReasonCode
							invoked.PrmAdjustAccount										= PrmReceivableDistributionArray.ReceivableDistributionInput[I1].FinanceCodeBlock	
							invoked.PrmComment												= PrmReceivableDistributionArray.ReceivableDistributionInput[I1].Description	
							if (PrmReceivableDistributionArray.ReceivableDistributionInput[I1].ReasonCode.AttachmentRequired)
								invoked.PrmAttachment										= PrmReceivableDistributionArray.ReceivableDistributionInput[I1].Attachment
					I1 +=1

			Exit Rules
				if (ReceivableInvoiceDetail.OpenAmount = 0)
					invoke Delete



		ApplyToCredit is an Instance Action
			valid when (AvailableForCreditApplication)

			Action Rules
				constraint (!ReceivableApplicationSelectRel exists)
					"Invoice<ReceivableInvoiceDetail.Invoice>AlreadySelectedForProcessing"

				constraint (DerivedContextCompanyCreditMemoRel exists)
					"MustSelectCreditMemoForApplication"

				constraint (!DerivedContextCompanyCreditMemoRel.ReceivableApplicationSelectRel exists)
					"CreditMemoAlreadySelectedForProcessing"

				constraint (!ReceivableInvoiceDetail.ReceivableInvoiceDetailType.CreditMemo)
					"CannotApplyCreditMemoToCreditMemo"

				include EditAllowSelectDistributionSetForApplyCredit

				AmountToAdjust 								= DerivedSelectDiscountAmount
				AmountToAdjustReason 						= CompanyCustomerRel.DiscountAdjustmentReason
				if (AmountToAdjustReason not entered
				or  AmountToAdjust not entered)
					initialize AmountToAdjust
					initialize AmountToAdjustReason

				AmountToApply 								= DerivedSelectApplicationAmount - AmountToAdjust 

				if (AmountToApply > DerivedContextCompanyCreditMemoRel.DerivedOpenAmount)
					AmountToApply							= DerivedContextCompanyCreditMemoRel.DerivedOpenAmount

				constraint (AmountToApply entered)
					"ApplicationAmountNotEntered"

				invoke ApplyInvoice
					invoked.ApplicationGeneralLedgerDate							= TransientGeneralLedgerDate	
					invoked.ReceivableInvoiceDetailGroup.Company					= DerivedContextCompanyCreditMemoRel.Company
					invoked.ReceivableInvoiceDetailGroup.ReceivableInvoiceDetail	= DerivedContextCompanyCreditMemoRel.ReceivableInvoiceDetail
					invoked.PrmAmount												= AmountToApply
					invoked.PrmAdjustAmount											= AmountToAdjust
					invoked.PrmAdjustReason											= AmountToAdjustReason
			Exit Rules
				if (ReceivableInvoiceDetail.OpenAmount = 0)
					invoke Delete
				if (DerivedContextCompanyCreditMemoRel exists
				and DerivedContextCompanyCreditMemoRel.OpenAmount = 0)		
					invoke Delete DerivedContextCompanyCreditMemoRel.NationalAccountTransactionRel


		ApplyInvoiceToPayment is an Instance Action
			restricted

			Parameters
				ReceivablePaymentGroup
				PrmAmount									is an InternationalAmount
				PrmAdjustAmount								is an InternationalAmount
				PrmAdjustReason								is like ReceivableReason
				RangeApplication							is Boolean
				ApplicationGeneralLedgerDate				is Date
					default label is "ApplicationGlobalLedgerDate"
				ApplyOperator								is a ReceivableOperator
				PrmCurrency									is a Currency
				CashApplicationOrder						is Alpha size 1
					States
						Transaction								value is "T"
						Project									value is "P"

			Action Rules

				LocalApplicationAmount 						= PrmAmount
				LocalDiscountAmount 						= PrmAdjustAmount

				if  (!ReceivablePaymentGroup.Company.PaymentOverApplication
				and   LocalApplicationAmount > ReceivablePaymentGroup.ReceivablePayment.CashApplicationPaymentOpen)
					LocalApplicationAmount							= ReceivablePaymentGroup.ReceivablePayment.CashApplicationPaymentOpen

				if (SummarizeDetail
				and !RangeApplication)
					if (ReceivablePaymentGroup entered
					and CashApplicationOrder.Project
					and !AlternateReceivableInvoiceType.Mixed)
						for each SameInvoiceByCustomerProjectRel
							if  (LocalApplicationAmount > 0
							or   LocalDiscountAmount	> 0)

								if (LocalDiscountAmount >= each.OpenAmount)
									initialize WorkAmount
									Work2Amount										= each.OpenAmountDisplayCurrency
								else
								if ((LocalApplicationAmount + LocalDiscountAmount) < each.OpenAmountDisplayCurrency)
									WorkAmount										= LocalApplicationAmount
									Work2Amount										= LocalDiscountAmount
								else
									WorkAmount										= each.OpenAmountDisplayCurrency - LocalDiscountAmount
									Work2Amount										= LocalDiscountAmount

								invoke CreateReceivableApplication each
									invoked.ReceivablePaymentGroup									= ReceivablePaymentGroup
									invoked.ApplicationGeneralLedgerDate							= ApplicationGeneralLedgerDate
									invoked.ApplyOperator											= ApplyOperator
									invoked.PrmAmount												= WorkAmount
									invoked.PrmCurrency												= PrmCurrency

									if (LocalDiscountAmount entered)
										invoked.PrmAdjustReason										= PrmAdjustReason
										invoked.PrmAdjustAmount										= Work2Amount

								LocalApplicationAmount												-= WorkAmount
								LocalDiscountAmount													-= Work2Amount
					else
						for each SameInvoiceRel
							if  (LocalApplicationAmount > 0
							or   LocalDiscountAmount	> 0)

								if (LocalDiscountAmount >= each.OpenAmountDisplayCurrency)
									initialize WorkAmount
									Work2Amount										= each.OpenAmountDisplayCurrency
								else
								if ((LocalApplicationAmount + LocalDiscountAmount) < each.OpenAmountDisplayCurrency)
									WorkAmount										= LocalApplicationAmount
									Work2Amount										= LocalDiscountAmount
								else
									WorkAmount										= each.OpenAmountDisplayCurrency - LocalDiscountAmount
									Work2Amount										= LocalDiscountAmount

								invoke CreateReceivableApplication each
									invoked.ReceivablePaymentGroup									= ReceivablePaymentGroup
									invoked.ApplicationGeneralLedgerDate							= ApplicationGeneralLedgerDate
									invoked.ApplyOperator											= ApplyOperator
									invoked.PrmAmount												= WorkAmount
									invoked.PrmCurrency												= PrmCurrency
									if (LocalDiscountAmount entered)
										invoked.PrmAdjustReason										= PrmAdjustReason
										invoked.PrmAdjustAmount										= Work2Amount

								LocalApplicationAmount												-= WorkAmount
								LocalDiscountAmount													-= Work2Amount
				else
					invoke CreateReceivableApplication
						invoked.ReceivablePaymentGroup									= ReceivablePaymentGroup
						invoked.ApplicationGeneralLedgerDate							= ApplicationGeneralLedgerDate
						invoked.ApplyOperator											= ApplyOperator
						invoked.PrmAmount												= LocalApplicationAmount
						invoked.PrmCurrency												= PrmCurrency
						if (PrmAdjustAmount entered
						or  PrmAdjustReason entered)
							invoked.PrmAdjustReason										= PrmAdjustReason
							invoked.PrmAdjustAmount										= LocalDiscountAmount
					if(Company.FinanceEnterpriseGroup.BODTrigger)
						invoke TriggerReceivableTracker ContextReceivablePaymentRel







		ApplyInvoice is an Instance Action
			restricted

			Parameters
				ReceivableInvoiceDetailGroup
				PrmAmount										is an InternationalAmount
				PrmAdjustAmount									is an InternationalAmount
				PrmAdjustReason									is like ReceivableReason
				ApplicationGeneralLedgerDate					is Date
					default label is "ApplicationGlobalLedgerDate"
				ApplyOperator									is a ReceivableOperator
				Writeoff										is Boolean
				PrmAdjustAccount								is a FinanceCodeBlock
				PrmComment										is a Description	
				PrmWriteoffARIncomeWithholdingCode				is AlphaUpper size 10	
				PrmWriteoffARIncomeWithholdingDocumentNumber	is AlphaUpper size 16	
				PrmAttachment									is an Attachment
			
			Action Rules
				if (!Writeoff)
					if  (ReceivableInvoiceDetailGroup.ReceivableInvoiceDetail.DerivedDiscountAmount entered
					and  ReceivableInvoiceDetailGroup.ReceivableInvoiceDetail.CompanyCustomerRel.DiscountAdjustmentReason entered)

						invoke CreateReceivableApplication LocalSequenceInvoiceDetailRel
							invoked.ReceivableInvoiceDetailGroup.Company						= ReceivableInvoiceDetailGroup.Company
							invoked.ReceivableInvoiceDetailGroup.ReceivableInvoiceDetail		= ReceivableInvoiceDetailGroup.ReceivableInvoiceDetail
							invoked.ApplicationGeneralLedgerDate								= ApplicationGeneralLedgerDate
							invoked.ApplyOperator												= ApplyOperator
							invoked.PrmAmount													= WorkAmount
							if (Work2Amount entered)
								invoked.PrmAdjustReason											= PrmAdjustReason
								invoked.PrmAdjustAmount											= Work2Amount
								invoked.PrmAdjustAccount										= PrmAdjustAccount
								if (PrmWriteoffARIncomeWithholdingCode entered)	
									invoked.PrmWriteoffARIncomeWithholdingCode					= PrmWriteoffARIncomeWithholdingCode	
								if (PrmWriteoffARIncomeWithholdingDocumentNumber entered)	
									invoked.PrmWriteoffARIncomeWithholdingDocumentNumber		= PrmWriteoffARIncomeWithholdingDocumentNumber	
								if (PrmComment entered)	
									invoked.PrmComment											= PrmComment	


				LocalApplicationAmount 						= PrmAmount
				LocalDiscountAmount 						= PrmAdjustAmount

				if (LocalApplicationAmount > ReceivableInvoiceDetailGroup.ReceivableInvoiceDetail.DerivedOpenAmount)
					LocalApplicationAmount							= ReceivableInvoiceDetailGroup.ReceivableInvoiceDetail.DerivedOpenAmount

				Done = false


				while (!Done)

					if (!Writeoff)
						if (ReceivableInvoiceDetailGroup.ReceivableInvoiceDetail.SummarizeDetail)
							CreditOpenAmount = first ReceivableInvoiceDetailGroup.ReceivableInvoiceDetail.SameInvoiceOpenRel.OpenAmount
						else
							CreditOpenAmount = ReceivableInvoiceDetailGroup.ReceivableInvoiceDetail.OpenAmount

					if (SummarizeDetail)

						LocalConvertedOpenAmount	= first SameInvoiceOpenRel.ReceivableInvoiceDetail.OpenAmountDisplayCurrency
						CurrencyWork.FinanceEnterpriseGroup				= GeneralLedgerCompanyRel.FinanceEnterpriseGroup
						CurrencyWork.ExchangeDate						= DerivedExchangeDate
						CurrencyWork.TransactionAmount					= LocalConvertedOpenAmount
						CurrencyWork.FromCurrency						= first SameInvoiceOpenRel.ReceivableInvoiceDetail.OriginalCurrency
						CurrencyWork.BaseAmount.ToCurrency				= ReceivableInvoiceDetailGroup.ReceivableInvoiceDetail.OriginalCurrency 
						LocalConvertedOpenAmount						= CurrencyWork.BaseAmount.OutputCurrencyAmount

						if (LocalDiscountAmount >= LocalConvertedOpenAmount)
							initialize WorkAmount
							Work2Amount										= LocalConvertedOpenAmount
						else
						if ((LocalApplicationAmount + LocalDiscountAmount) < LocalConvertedOpenAmount)
							WorkAmount										= LocalApplicationAmount
							Work2Amount										= LocalDiscountAmount
						else
							WorkAmount										= LocalConvertedOpenAmount - LocalDiscountAmount
							Work2Amount										= LocalDiscountAmount

						if (!Writeoff)
							if (WorkAmount > CreditOpenAmount)
								WorkAmount = CreditOpenAmount

						LocalSequence	= first SameInvoiceOpenRel.ReceivableInvoiceDetail.PaymentSeq
						invoke CreateReceivableApplication LocalSequenceInvoiceDetailRel
							invoked.ReceivableInvoiceDetailGroup.Company						= ReceivableInvoiceDetailGroup.Company
							if (ReceivableInvoiceDetailGroup.ReceivableInvoiceDetail.SummarizeDetail)
								invoked.ReceivableInvoiceDetailGroup.ReceivableInvoiceDetail	= first ReceivableInvoiceDetailGroup.ReceivableInvoiceDetail.SameInvoiceOpenRel.ReceivableInvoiceDetail
							else
								invoked.ReceivableInvoiceDetailGroup.ReceivableInvoiceDetail	= ReceivableInvoiceDetailGroup.ReceivableInvoiceDetail
							invoked.ApplicationGeneralLedgerDate								= ApplicationGeneralLedgerDate
							invoked.ApplyOperator												= ApplyOperator
							invoked.PrmAmount													= WorkAmount
							invoked.PrmCurrency													= ReceivableInvoiceDetailGroup.ReceivableInvoiceDetail.OriginalCurrency
							if (Work2Amount entered)
								invoked.PrmAdjustReason											= PrmAdjustReason
								invoked.PrmAdjustAmount											= Work2Amount
								invoked.PrmAdjustAccount										= PrmAdjustAccount
								if (PrmWriteoffARIncomeWithholdingCode entered)	
									invoked.PrmWriteoffARIncomeWithholdingCode					= PrmWriteoffARIncomeWithholdingCode	
								if (PrmWriteoffARIncomeWithholdingDocumentNumber entered)	
									invoked.PrmWriteoffARIncomeWithholdingDocumentNumber		= PrmWriteoffARIncomeWithholdingDocumentNumber	
								if (PrmComment entered)	
									invoked.PrmComment											= PrmComment	
								if (PrmAttachment entered)
									PrmAttachment												= PrmAttachment
					else
						if (LocalDiscountAmount >= OpenAmountDisplayCurrency)
							initialize WorkAmount
							Work2Amount										= OpenAmountDisplayCurrency
						else
						if ((LocalApplicationAmount + LocalDiscountAmount) < OpenAmountDisplayCurrency)
							WorkAmount										= LocalApplicationAmount
							Work2Amount										= LocalDiscountAmount
						else
							WorkAmount										= OpenAmountDisplayCurrency - LocalDiscountAmount
							Work2Amount										= LocalDiscountAmount

						if (!Writeoff)
							if (WorkAmount > CreditOpenAmount)
								WorkAmount = CreditOpenAmount

						invoke CreateReceivableApplication
							invoked.ReceivableInvoiceDetailGroup.Company					= ReceivableInvoiceDetailGroup.Company
							if (ReceivableInvoiceDetailGroup.ReceivableInvoiceDetail.SummarizeDetail)
								invoked.ReceivableInvoiceDetailGroup.ReceivableInvoiceDetail	= first ReceivableInvoiceDetailGroup.ReceivableInvoiceDetail.SameInvoiceOpenRel.ReceivableInvoiceDetail
							else
								invoked.ReceivableInvoiceDetailGroup.ReceivableInvoiceDetail	= ReceivableInvoiceDetailGroup.ReceivableInvoiceDetail
							invoked.ApplicationGeneralLedgerDate							= ApplicationGeneralLedgerDate
							invoked.ApplyOperator											= ApplyOperator
							invoked.PrmAmount												= WorkAmount
							if (Work2Amount entered)
								invoked.PrmAdjustReason										= PrmAdjustReason
								invoked.PrmAdjustAmount										= Work2Amount
								invoked.PrmAdjustAccount									= PrmAdjustAccount
								if (PrmWriteoffARIncomeWithholdingCode entered)	
									invoked.PrmWriteoffARIncomeWithholdingCode					= PrmWriteoffARIncomeWithholdingCode	
								if (PrmWriteoffARIncomeWithholdingDocumentNumber entered)	
									invoked.PrmWriteoffARIncomeWithholdingDocumentNumber		= PrmWriteoffARIncomeWithholdingDocumentNumber	
								if (PrmComment entered)	
									invoked.PrmComment										= PrmComment	
								if (PrmAttachment entered)
									invoked.PrmAttachment								 	= PrmAttachment
					LocalApplicationAmount												-= WorkAmount
					LocalDiscountAmount													-= Work2Amount



					if  ((LocalApplicationAmount = 0
					and   LocalDiscountAmount	= 0)
					or	ReceivableInvoiceDetailGroup.ReceivableInvoiceDetail.DerivedOpenAmount = 0
					or	DerivedOpenAmount = 0)
						Done = true



		CreateReceivableApplication is an Instance Action
			restricted

			Parameters
				ReceivableInvoiceDetailGroup
				ReceivablePaymentGroup
				ApplicationGeneralLedgerDate				is Date
					default label is "ApplicationGlobalLedgerDate"
				ApplyOperator									is a ReceivableOperator
				PrmAmount										is an InternationalAmount
				PrmCurrency										is a Currency
				PrmAdjustAmount									is an InternationalAmount
				PrmAdjustReason									is like ReceivableReason
				AutoAdjustAmount								is an InternationalAmount
				PrmAdjustAccount								is a FinanceCodeBlock
				PrmComment										is a Description	
				PrmWriteoffARIncomeWithholdingCode				is AlphaUpper size 10	
				PrmWriteoffARIncomeWithholdingDocumentNumber	is AlphaUpper size 16	
				PrmAttachment									is an Attachment
			
			Entrance Rules




				if (PrmCurrency not entered)
					PrmCurrency = DerivedDisplayCurrency


				invoke UnreleasedCashApplication.Create ReceivableApplication
					assign result to NewReceivableApplication
					invoked.Company													= Company
					invoked.ReceivableApplication.TransType							= ReceivableInvoiceDetail.ReceivableInvoiceDetailType
					invoked.ReceivableApplication.Invoice							= ReceivableInvoiceDetail.Invoice
					invoked.ReceivableApplication.PaymentSeq						= ReceivableInvoiceDetail.PaymentSeq
					invoked.ReceivableApplication.BatchNumber						= ReceivableInvoiceDetail.BatchNumber

					invoked.EnteredAmount											= PrmAmount
					invoked.ApplicationCurrency										= PrmCurrency

					invoked.ReceivableOperator										= ApplyOperator
					invoked.ApplicationSource										= "M"
					invoked.ReceivableGeneralLedgerCode								= ReceivableInvoiceDetail.ReceivableGeneralLedgerCode

					if (ReceivablePaymentGroup entered)
						invoked.CreditTransaction.CreditType 						= "P"
						invoked.CreditTransaction.CreditCompany						= ReceivablePaymentGroup.Company
						invoked.CreditTransaction.CreditCustomer					= ReceivablePaymentGroup.ReceivablePayment.Customer
						invoked.CreditTransaction.CreditBatch						= ReceivablePaymentGroup.ReceivablePaymentHeader
						invoked.CreditTransaction.CreditSequence					= ReceivablePaymentGroup.ReceivablePayment
						invoked.CreditTransaction.CreditType						= ReceivablePaymentGroup.ReceivablePayment.TypeOfPayment
						invoked.CreditTransaction.CreditNumber						= ReceivablePaymentGroup.ReceivablePayment.PaymentNumber

						invoked.GeneralLedgerDate								= ApplicationGeneralLedgerDate









						invoked.DepositDate											= ReceivablePaymentGroup.ReceivablePaymentHeader.DepositDate
						invoked.GLOffsetCode										= ReceivablePaymentGroup.ReceivablePayment.ReceivedNotAppliedReceivableGeneralLedgerCode

						if (ReceivablePaymentGroup.ReceivablePayment.OriginalCurrency = Company.Currency)
							invoked.ApplicationCurrencyType							= "B"
						else
							invoked.ApplicationCurrencyType							= "N"
					else
					if (ReceivableInvoiceDetailGroup entered)
						invoked.CreditTransaction.CreditType 						= ReceivableInvoiceDetailGroup.ReceivableInvoiceDetail.ReceivableInvoiceDetailType
						invoked.CreditTransaction.CreditCompany						= ReceivableInvoiceDetailGroup.ReceivableInvoiceDetail.Company
						invoked.CreditTransaction.CreditCustomer					= ReceivableInvoiceDetailGroup.ReceivableInvoiceDetail.Customer
						invoked.CreditTransaction.CreditBatch						= ReceivableInvoiceDetailGroup.ReceivableInvoiceDetail.BatchNumber
						invoked.CreditTransaction.CreditSequence					= ReceivableInvoiceDetailGroup.ReceivableInvoiceDetail.PaymentSeq
						invoked.CreditTransaction.CreditNumber						= ReceivableInvoiceDetailGroup.ReceivableInvoiceDetail.Invoice
						invoked.GeneralLedgerDate									= ApplicationGeneralLedgerDate





						invoked.DepositDate											= ReceivableInvoiceDetailGroup.ReceivableInvoiceDetail.TransactionDate	
						invoked.ApplicationCurrency									= PrmCurrency
						if (ReceivableInvoiceDetail != ReceivableInvoiceDetailGroup.ReceivableInvoiceDetail)
							invoked.GLOffsetCode									= ReceivableInvoiceDetailGroup.ReceivableInvoiceDetail.ReceivableGeneralLedgerCode
						invoked.ApplicationCurrencyType								= "B"

					if (PrmAdjustAmount entered
					or  PrmAdjustReason entered)
						invoked.CreateAdjustReason									= PrmAdjustReason
						invoked.CreateAdjustAmount									= PrmAdjustAmount
						if (PrmAdjustAccount entered)
							invoked.AdjustAccount									= PrmAdjustAccount
						if (PrmComment entered)	
							invoked.LocalPrmComment									= PrmComment	
						if (PrmWriteoffARIncomeWithholdingCode entered)	
							invoked.TransientWriteoffARIncomeWithholdingCode			= PrmWriteoffARIncomeWithholdingCode	
						if (PrmWriteoffARIncomeWithholdingDocumentNumber entered)	
							invoked.TransientWriteoffARIncomeWithholdingDocumentNumber	= PrmWriteoffARIncomeWithholdingDocumentNumber	
						if (Company.OverApplyInvoice
						and PrmAdjustReason = Company.OverApplyReasonCode)
							invoked.TransientOverApplyInvoice							 = true
						if (PrmAttachment entered)
							invoked.TransientAttachment									 =	PrmAttachment
			Exit Rules

				if (AutoAdjustAmount entered)
					invoke Create ReceivableApplicationAdjustment
						invoked.Company 											= Company
						invoked.ReceivableApplication.TransType						= NewReceivableApplication.ReceivableApplication.TransType
						invoked.ReceivableApplication.Invoice						= NewReceivableApplication.ReceivableApplication.Invoice
						invoked.ReceivableApplication.PaymentSeq					= NewReceivableApplication.ReceivableApplication.PaymentSeq
						invoked.ReceivableApplication.BatchNumber					= NewReceivableApplication.ReceivableApplication.BatchNumber
						invoked.ReceivableApplication.ApplicationSequence			= NewReceivableApplication.ReceivableApplication.ApplicationSequence
						invoked.AdjustmentReason									= AutoAdjustReason
						invoked.ReceivableAdjustType								= "N"
						invoked.CreditAdjustAmount									= AutoAdjustAmount
						invoked.ApplicationCurrency									= OriginalCurrency
						invoked.CheckAccrual										= true



		SelectForGrouping is an Instance Action
			default label is "Select"
			valid when (AllowSelectForGrouping)
			Action Rules
				constraint (!ReceivableInvoiceDetail.ReceivablePendingAdjustment2Rel exists)
					"CannotProcess;PendingAdjustmentExistsForInvoice"
				invoke Create ReceivableInvoiceObligationGroupRel
					invoked.NationalAccount.Company							= NationalAccount.Company
					invoked.NationalAccount.Customer						= NationalAccount.Customer
					invoked.Customer										= Customer
					invoked.TransactionAmount 								= TransactionAmount
					invoked.AppliedAmount 									= ReceivableInvoiceDetail.ApplicationAmount.CurrencyAmount
					invoked.AdjustAmount 									= ReceivableInvoiceDetail.AdjustmentAmount.CurrencyAmount
					invoked.Actor											= Actor



		UnSelectForGrouping is an Instance Action
			default label is "Unselect" 
			valid when (AllowUnSelectForGrouping)
			Action Rules
				constraint (!ReceivableInvoiceDetail.ReceivablePendingAdjustment2Rel exists)
					"CannotProcess;PendingAdjustmentExistsForInvoice"
				invoke Purge ReceivableInvoiceObligationGroupRel



		CreateDetailDispute is an Instance Action
			valid when (ReceivableInvoiceDetailRel.IsDisputeEligible)
			completion message is "DisputeCreated"

			Parameters
				PrmDisputeAmount	is an UnsignedInternationalAmount
					default label is "DisputeAmount"
				PrmDisputeCode 		is a ReceivableInvoiceDisputeCode
					default label is "DisputeCode"
				PrmDisputeDate		is Date
					default label is "DisputeDate"
				PrmDescription		is a Description
					default label is "Description"

			Parameter Rules
				PrmDisputeAmount
					required
				PrmDisputeCode
					required
				PrmDisputeDate
					required
				PrmDescription

			Local Fields
				LocalDisputeAmount								is an InternationalAmount
				LocalOpenAmount									is an InternationalAmount

			Entrance Rules
				LocalOpenAmount = (TransactionAmount - sum ReceivableInvoiceDisputeRel.DisputedAmount)
				constraint (PrmDisputeAmount <= LocalOpenAmount)
					"DisputeAmountMustBeLessThanOrEqualToTheOpenInvoiceDetailTransactionAmount"
				constraint (PrmDisputeDate >= TransactionDate)
					"DisputeDateCannotBeLessThanTransactionDate"

			Action Rules
				LocalDisputeAmount = PrmDisputeAmount

				invoke CreateDetailDispute ReceivableInvoiceDetailRel
					invoked.PrmInvoiceDisputeAmount	= LocalDisputeAmount
					invoked.PrmDisputeCode			= PrmDisputeCode
					invoked.PrmDisputeDate			= PrmDisputeDate
					invoked.PrmDescription			= PrmDescription


		ModifyInvoiceAccrualAccount is an Instance Action
			valid when (ReceivableInvoiceDetailRel.AllowModifyInvoiceAccrualAccount)
			Parameters
				PrmGeneralLedgerDate is Date
					default label is "GlobalLedgerDate"
				PrmInvoiceFinanceCodeBlock	is a FinanceCodeBlockFull
					default label is "InvoiceAccrualAccount"
			
			Parameter Rules
				PrmGeneralLedgerDate
					required
					initial value is ReceivableInvoiceDetailRel.GeneralLedgerDate
					if (CompanySystemClosingControlRel.Control)
						constraint (PrmGeneralLedgerDate within CompanySystemClosingControlRel.ValidEntryDate)
							"PostDate<PrmGeneralLedgerDate>IsNotWithinValidEntryDatesForCompany<Company>;ValidDateRangeIs<CompanySystemClosingControlRel.ValidEntryDate.Begin>-<CompanySystemClosingControlRel.ValidEntryDate.End>"
				
				PrmInvoiceFinanceCodeBlock
					initial value is ReceivableInvoiceDetailRel.InvoiceFinanceCodeBlock
						when (ReceivableInvoiceDetailRel.InvoiceFinanceCodeBlock entered)
					initial value is ReceivableInvoiceDetailRel.ReceivableGeneralLedgerCode.DistributionAccount
						when (ReceivableInvoiceDetailRel.InvoiceFinanceCodeBlock not entered)
			
			Action Rules
				if (PrmInvoiceFinanceCodeBlock not entered)
					confirmation required
						"Invoice_\Accrual_\AccountNotEntered.The_\Receivable_\Global_\Ledger_\Code's_\Distribution_\AccountWillBeUsed.Continue?"
				invoke ModifyInvoiceAccrualAccount ReceivableInvoiceDetailRel
					invoked.PrmGeneralLedgerDate 		= PrmGeneralLedgerDate
					invoked.PrmInvoiceFinanceCodeBlock	= PrmInvoiceFinanceCodeBlock

		AddAttachment is an Instance Action
			default label is "AddAttachment"
			valid when (IsValidForAddAttachment)
			
			Parameters
				PrmAttachment	is an Attachment
			
			Parameter Rules
				PrmAttachment
					required
						"AttachmentIsRequired"
			
			Action Rules
				constraint (ReceivableApplicationSelectRel.NumberOfAdjustments <= 1)
					"MultipleAdjustmentsExist;UseDetailScreenToAddAttachments"
				
				invoke Update ReceivableApplicationAdjustmentSelectRel
					invoked.Attachment	= PrmAttachment	


		SelectForCreditCardOrACHPayment is an Instance Action	
			valid when (IsOpenAndPortalPaymentUnSelected)

			completion message is "Selected"

			Local Fields
				NewReceivablePortalPaymentHeader	is a ReceivablePortalPaymentHeader view


			Action Rules















				if (IsOpenAndPortalPaymentUnSelected)

					invoke FastUpdate ReceivableInvoiceDetailRel
						invoked.PortalPaymentSelected = true

					invoke InitializeThirdPartyPaymentProcessingGeneratedPayFormLink actor.context.CustomerRepresentativeContact.ReceivablePortalPaymentHeader1Rel
					if (!CustomerRepresentativeContactWithPaymentInProgressRel exists)



						invoke Create ReceivablePortalPaymentHeader
							assign result to NewReceivablePortalPaymentHeader
							invoked.CustomerGroup											= actor.context.CustomerGroup
							invoked.CustomerRepresentative									= actor.context.CustomerRepresentative
							invoked.CustomerRepresentativeContact							= actor.context.CustomerRepresentativeContact
							invoked.ThirdPartyPaymentProcessingCompany						= actor.context.CustomerGroup.DerivedThirdPartyPaymentProcessingCompany
							invoked.ThirdPartyPaymentProcessingCustomerId					= actor.context.CustomerRepresentativeContact.Customer	
							invoked.ThirdPartyPaymentProcessingLocationId					= actor.context.CustomerGroup.ThirdPartyPaymentProcessingLocationId
							invoked.ThirdPartyPaymentProcessingContactId					= actor.context.CustomerGroup.ThirdPartyPaymentProcessingContactId
							invoked.ThirdPartyPaymentProcessingUserApiKey					= actor.context.CustomerGroup.ThirdPartyPaymentProcessingUserApiKey
							invoked.ThirdPartyPaymentProcessingUserHashKey					= actor.context.CustomerGroup.ThirdPartyPaymentProcessingUserHashKey
							invoked.ThirdPartyPaymentProcessingUserId						= actor.context.CustomerGroup.ThirdPartyPaymentProcessingUserId
							invoked.ThirdPartyPaymentProcessingReceivableProcessLevel		= actor.context.CustomerGroup.DerivedThirdPartyPaymentProcessingCashManagementAccountSetupWithThirdPartyPaymentProcessingReceivableProcessLevelRelThirdPartyPaymentProcessingReceivableProcessLevel
















						invoke Update actor.context.CustomerRepresentativeContact	
							invoked.ReceivablePortalPaymentHeader			= NewReceivablePortalPaymentHeader.ReceivablePortalPaymentHeader	


						invoke Create ReceivablePortalPaymentDetail
							invoked.CustomerGroup							= actor.context.CustomerGroup
							invoked.CustomerRepresentative					= actor.context.CustomerRepresentative
							invoked.CustomerRepresentativeContact			= actor.context.CustomerRepresentativeContact
							invoked.ReceivablePortalPaymentHeader			= actor.context.CustomerRepresentativeContact.ReceivablePortalPaymentHeader
							invoked.FromReceivableCompany					= ReceivableInvoiceDetail.Company
							invoked.ReceivableInvoiceDetailType				= ReceivableInvoiceDetail.ReceivableInvoiceDetailType
							invoked.Invoice									= ReceivableInvoiceDetail.Invoice
							invoked.PaymentSeq								= ReceivableInvoiceDetail.PaymentSeq
							invoked.Description								= ReceivableInvoiceDetail.Description
							invoked.Customer								= Customer
							invoked.PortalRequestedAppliedAmount			= TransientSelectSignedOpenAmount	














					else
						invoke Create ReceivablePortalPaymentDetail
							invoked.CustomerGroup							= actor.context.CustomerGroup	
							invoked.CustomerRepresentative					= actor.context.CustomerRepresentative	
							invoked.CustomerRepresentativeContact			= actor.context.CustomerRepresentativeContact	
							invoked.ReceivablePortalPaymentHeader			= actor.context.CustomerRepresentativeContact.ReceivablePortalPaymentHeader	
							invoked.FromReceivableCompany					= ReceivableInvoiceDetail.Company
							invoked.ReceivableInvoiceDetailType				= ReceivableInvoiceDetail.ReceivableInvoiceDetailType
							invoked.Invoice									= ReceivableInvoiceDetail.Invoice
							invoked.PaymentSeq								= ReceivableInvoiceDetail.PaymentSeq
							invoked.Description								= ReceivableInvoiceDetail.Description
							invoked.Customer								= Customer
							invoked.PortalRequestedAppliedAmount			= TransientSelectSignedOpenAmount	



















		UnSelectForCreditCardOrACHPayment is an Instance Action	
			valid when (IsOpenAndPortalPaymentSelected)

			completion message is "Unselected"
			Action Rules
				if (IsOpenAndPortalPaymentSelected)
					invoke FastUpdate ReceivableInvoiceDetailRel
						invoked.PortalPaymentSelected = false
					invoke InitializeThirdPartyPaymentProcessingGeneratedPayFormLink actor.context.CustomerRepresentativeContact.ReceivablePortalPaymentHeader1Rel



					if (!CustomerRepresentativeContact.MultipleReceivablePortalPaymentDetail1RelExist)
						invoke InitializeReceivablePortalPaymentHeader actor.context.CustomerRepresentativeContact
						invoke Delete CustomerRepresentativeContact.ReceivablePortalPaymentHeaderRel
					else
						invoke Delete ReceivablePortalPaymentDetailRel

