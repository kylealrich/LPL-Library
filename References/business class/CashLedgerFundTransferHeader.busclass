CashLedgerFundTransferHeader is a BusinessClass
    owned by cb
    prefix is CBH
    classic name is CBTRFHDR

    Ontology
        symbolic key is CashLedgerFundTransferHeader
            classic set name is CBHSET1
            classic name is TRANSFER-NBR

    Patterns
        implements StaticJava
        disable AuditIndex

    Persistent Fields
        TransferType              is AlphaUpper size 1
        	default label is "Type"
            States
                MultipleDeposits    	value is "1"
                MultipleWithdrawals 	value is "2"
                CashCodeFundTransfer	value is "3"	
        Company                   is a CompanyIsolated  
        TransferDate              is an ExchangeDate
        CurrencyTable			  						
        TransferBankAmount        is an CurrencyAmount 
            classic name is TRANSFER-AMT
            default label is "Amount"
        AppliedBankAmount         is an InternationalAmount
            classic name is APPLIED-AMT
        TransferBaseAmount        is a FinanceCurrencyAmount  
            classic name is CPY-BASE-AMT
        AppliedBaseAmount         is an InternationalAmount  
            classic name is BASE-APPL-AMT
        PostDate                  is Date
        BankExpenseData			  is a FinanceCurrencyAmountGroup  

        	classic name for BankExpenseData.CurrencyAmount is BEXP-TRAN-AMT 

        	classic name for BankExpenseData.FunctionalAmount.EnteredCurrencyAmount is BEXP-BASE-AMT			       

        BankTransactionCode
            classic name is BANK-INST-CODE

        Status                    is Numeric size 1
            classic name is REC-STATUS
            States
                Unreleased value is 0
                Released   value is 1
        Description
        JournalBook
        	context of Company.OrigCompany
            classic name is JRNL-BOOK-NBR
            restricted
        JournalBookSequenceNumber is a JbkSeqNbr
            classic name is JBK-SEQ-NBR
            restricted
        BankExpenseAccount        is a TransactionCodeBlock  
            classic name for BankExpenseAccount.AccountingUnit is BEXP-ACCT-UNIT
            classic name for BankExpenseAccount.GeneralLedgerChartAccount is BEXP-ACCOUNT

        CompanyCashCode
			context of Company.OrigCompany
		BudgetEditProcessing 				is Numeric size 1
			States
                NotInProcessing value is 0
                InProcess  		value is 1
                Failure    		value is 2
                Success    		value is 3			
		CashLedgerMassReleaseResult			is Numeric size 12
		HeaderAccountingUnit				is like AccountingUnit
			default label is "<CashManagementGroup.FinanceEnterpriseGroup.AccountingUnitLabel>"
		HeaderFund							is a FinanceDimension1
			default label is "<CashManagementGroup.FinanceEnterpriseGroup.FinanceDimension1Label>"
			
    Local Fields
		CashLedgerSourceRecord
        NewCashLedgerTransaction    		is a  CashLedgerTransaction view
        SavedCashLedgerTransaction  		is a  CashLedgerTransaction
		LocalFinanceCurrencyAmount			is a  FinanceCurrencyAmount
		LocalFinanceCurrencyAmountGroup		is a  FinanceCurrencyAmountGroup
		LocalCashCodeGroup					is like CashCodeGroup

		LocalToAccountingEntity				is like AccountingEntity
		LocalAccountingUnit					is like AccountingUnit
		LocalFinanceDimension1				is a FinanceDimension1
		LocalTransferAmount					is an InternationalAmount	
		LocalCashManagementGroup			is like CashManagementGroup
		LocalCompany						is like Company
		LocalCashLedgerJobResult			is a CashLedgerJobResult
		LocalTransactionNumber          	is a CashLedgerFundTransferHeader
		LocalCashLedgerAutoTranNumber		is a CashLedgerAutoTranNumber view
		AutoNumberByCompany					is like GeneralLedgerCompany
		AutoNumberByCashCode				is like CashCode
		AutoNumberByBankTransactionCode		is like BankTransactionCode
		DuplicateTranNumberFound			is Boolean
		AutoNumberingAction			 		is Numeric 1
			States
				OverrideNumberWithAnAutoGeneratedNumber	value is 1
				BypassAutoTransactionNumbering			value is 2
		LocalMaxDuplicateNumberRange is Numeric 22
		LocalDuplicateTransactionNumber is Numeric 22
												
	Derived Fields
		DerivedTransactionIdentifier is a DerivedField
			type is like CashLedgerTransactionIdentifier
			return CashLedgerTransactionRel.CashLedgerTransactionIdentifier
			
		AppliedBankTotal 					is a DerivedField		
			type is like InternationalAmount
			restricted
			if (TransferType.CashCodeFundTransfer)							
				return (sum CashCodeFundTransferDetail set.TransferAmount)
			else
				return (sum CashLedgerFundTransferDetail set.HeaderAmountData.CurrencyAmount) 
			                                			
		AppliedBaseTotal 					is a DerivedField		
			type is like InternationalAmount
			restricted
			if (TransferType.CashCodeFundTransfer)							
				return (sum CashCodeFundTransferDetail set.TransferBaseAmount.FunctionalAmount.EnteredCurrencyAmount)
			else
				return (sum CashLedgerFundTransferDetail set.HeaderAmountData.FunctionalAmount.EnteredCurrencyAmount) 
			                                						                                				
        TrfDifference 				is a DerivedField 
            type is like InternationalAmount
            restricted
            return TransferBankAmount - AppliedBankAmount
		TrfTypeDesc 				is a ConditionalField
			type is Alpha size 12
			restricted
			if (IsManyDeposits2)
				"TransferFrom"
			else
				"TransferTo"
        BalanceAmount 				is a DerivedField
            type is like InternationalAmount
            return  TransferBankAmount - AppliedBankAmount
		OutOfBalanceMessage			is a MessageField
			restricted
			"UpdateComplete;CashReceiptIsOutOfBalance"    
		ActionCompleteMessage		is a MessageField
			restricted
			"ActionComplete"
		ReleaseCompleteMessage		is a MessageField
			restricted
			"ReleaseComplete"
		FromMessage 				is a LabelField
			restricted
			"From"
		ToMessage is a LabelField
			restricted
			"To"                  
		DerivedTransactionTypeLabel	is a DerivedField
			type is Alpha 13
			if (CashLedgerFundTransferHeader.TransferType.MultipleDeposits)
                return FromMessage
			if (CashLedgerFundTransferHeader.TransferType.MultipleWithdrawals)
                return ToMessage
 
 		DepositMessage is a LabelField
			restricted
			"BankFundTransferDeposit"
		WithdrawalMessage is a LabelField
			restricted
			"BankFundTransferWithdrawal"
		CashCodeFundTransferMessage is a LabelField		
			restricted
			"CashCodeFundTransfer"
		DerivedTransferTypeLabel   is a DerivedField
			type is Alpha size up to 60
            if (CashLedgerFundTransferHeader.TransferType.MultipleDeposits)
                return DepositMessage + " " + CashLedgerFundTransferHeader
            if (CashLedgerFundTransferHeader.TransferType.MultipleWithdrawals)
                return WithdrawalMessage + " " + CashLedgerFundTransferHeader
            if (CashLedgerFundTransferHeader.TransferType.CashCodeFundTransfer)			
                return CashCodeFundTransferMessage + " " + CashLedgerFundTransferHeader
                			        
		MassReleaseCompleteMessage is a MessageField
			restricted
			"MassReleaseComplete;SeeResultsRecord"
			
		DerivedBankFundTransferErrorCount is a DerivedField	
			type is Alpha size up to 20
        	restricted
			if (CashLedgerTransactionError set exists)
				return "(" + instance count of CashLedgerTransactionError set + ")"
			else
				return ""

		DerivedTotalTransferAmount is a DerivedField
			type is like CurrencyAmount
			return (TransferBankAmount + BankExpenseData.CurrencyAmount)

		DerivedPeriodEndDate	is a DerivedField 
			type is Date
			restricted
			return CurrentGeneralLedgerCalendarPeriodRel.Date
		
		ContextMessageEntityType is a StringField
			type is Alpha 30
			restricted
			"InforCashLedgerTransaction"

		ContextMessageText is a MessageField
			restricted
			"CashLedgerFundTransferHeader<CashLedgerFundTransferHeader>"
		
	Transient Fields
		TransientAccountingEntity		is an AccountingEntity
			derive value from Company.OrigCompany.AccountingEntity
		TransientAccountingUnit			is an AccountingUnit
			default label is "<CashManagementGroup.FinanceEnterpriseGroup.AccountingUnitLabel>"
			derive value from HeaderAccountingUnit
		TransientFromCurrency			is a FromCurrency
			derive value from CashCode.Currency
		CompletionMessage				is Alpha size 150
		TransferBankAmountUnsigned		is an UnsignedInternationalAmount
			derive value from CashLedgerFundTransferHeader.TransferBankAmount		
		BankExpenseAmountUnsigned		is an UnsignedInternationalAmount
			derive value from CashLedgerFundTransferHeader.BankExpenseData.CurrencyAmount
		TransientErrorDescription		is Alpha size up to 200	
			derive value from first CashLedgerTransactionErrorMassReleaseRel.ErrorDescription
											
    Conditions
    	RecordExists
    		restricted
    		when (CashLedgerFundTransferHeader exists)
    	
    	CashLedgerTransactionIdentifierExists
			restricted
			when (DerivedTransactionIdentifier entered)
				
        IsOutOfBalance
        	restricted
            when (TransferBankAmount != AppliedBankAmount)

        IsManyWithdrawals
        	restricted
            classic name is TRANSFER-DEP
            when (TransferType.MultipleWithdrawals)

        IsUnreleased
        	restricted
            classic name is TRANSFER-UNREL
            when (Status.Unreleased)

		CanReleaseTransfer
			restricted
			when (Status.Unreleased
			and   !BudgetEditInProgress)			

        IsUnreleasedForPeriodClose	
        	restricted
            when (Status.Unreleased
            and   PostDate <= CurrentGeneralLedgerCalendarPeriodRel.Date) 


		FundTransferDetailsExist	
			restricted
			when (CashLedgerFundTransferDetailsRel exists)	

		OutstandingBankFundTransfersExist	
			restricted
			when (IsUnreleasedForPeriodClose)
							           			
        IsReleased
        	restricted
            when (Status.Released)

        IsManyDeposits
        	restricted
            classic name is TRANSFER-WTH
            when (TransferType.MultipleDeposits)

        IsManyDeposits2
        	restricted
            classic name is WITHDRAWAL
            when (TransferType.MultipleDeposits)




		IsCashLedgerTransactionExist
			restricted
			when (CashLedgerTransactionRel exists)
			
        IsCashLedgerCashReceiptHeaderExist
        	restricted
            when (CashLedgerCashReceiptHeaderRel exists)

		BudgetEditInProgress
			restricted
        	when (BudgetEditProcessing.InProcess)
        
        BudgetEditFailure
        	restricted
    		when (BudgetEditProcessing.Failure)

		GLCommitRelExists
			restricted
			when (GLCommitRel exists)

		OpenGLCommitRelExists
			restricted
			when (OpenGLCommitDrillRel exists)
			
		IsValidForActorContext
			restricted
			when ((actor.context.FinanceEnterpriseGroup != ""
			and   CashManagementGroup = actor.context.FinanceEnterpriseGroup)
			or   (actor.context.FinanceEnterpriseGroup = ""))

		BankFundTransferErrorsExist	
			when (CashLedgerTransactionErrorRel exists)

		MassReleaseErrorExists	
			when (CashLedgerTransactionErrorMassReleaseRel exists)

		ShowHeaderAccountingUnit
            when (!TransferType.CashCodeFundTransfer						
            and   CashManagementGroup.FinanceEnterpriseGroup.FundAccounting
			and   CashManagementGroup.FinanceEnterpriseGroup.FundDimension.AccountingUnit)
		ShowHeaderFund
			when (!TransferType.CashCodeFundTransfer						
			and   CashManagementGroup.FinanceEnterpriseGroup.FundAccounting
			and   CashManagementGroup.FinanceEnterpriseGroup.FundDimension.Dimension1)

		AutoNumberingAllowed
			restricted
			when (CashManagementGroup.AutoTranNumberForTransferForm
			and   ((CashManagementGroup.AutoTranNumberByCompany
			and     Company.OrigCompany.AutoTransactionNumbering)
			or     (CashManagementGroup.AutoTranNumberByCashCode
			and     CashCode.AutoTransactionNumbering)
			or     (CashManagementGroup.AutoTranNumberByBankTransactionCode
			and     BankTransactionCode.AutoTransactionNumbering)
			or     (CashManagementGroup.AutoTranNumberByCashCodeBankTranCode
			and     BankTransactionCode.AutoTransactionNumbering
			and     CashCode.AutoTransactionNumbering)))

    Relations
        CashLedgerFundTransferDetailsRel	
            classic name is CBTRFDTL
            one-to-many relation to CashLedgerFundTransferDetail
            Field Mapping uses symbolic key
            	related.CashManagementGroup 		 = CashManagementGroup	
                related.CashCode     				 = CashCode
                related.CashLedgerFundTransferHeader = CashLedgerFundTransferHeader

        CashCodeBankTransferRel
            classic name is CBTRFTABLE
            one-to-one relation to CashCodeBankTransfer
            required
            Field Mapping uses symbolic key
            	related.CashManagementGroup		= CashManagementGroup	
                related.CashCode				= CashCode

        FinancialInstitutionBranchRel
            classic name is CBBANKENT
            one-to-one relation to FinancialInstitutionBranch
            required
            Field Mapping uses symbolic key
            	related.CashManagementGroup			= CashManagementGroup	
            	related.FinancialInstitution		= CashCode.FinancialInstitution
                related.FinancialInstitutionBranch 	= CashCode.FinancialInstitutionBranch

        CashLedgerTransactionRel
            one-to-many relation to CashLedgerTransaction
            Field Mapping uses Set6
            	related.CashManagementGroup		= CashManagementGroup	
                related.CashCode 				= CashCode
                related.BankTransactionCode 	= BankTransactionCode
				related.TransactionNumber 		= CashLedgerFundTransferHeader

        CashLedgerCashReceiptHeaderRel
            one-to-one relation to CashLedgerCashReceiptHeader
            Field Mapping uses symbolic key
            	related.CashManagementGroup 							= CashManagementGroup	
                related.CashCode                						= CashCode
                related.CashLedgerCashReceiptHeader.BankTransactionCode = BankTransactionCode
                related.CashLedgerCashReceiptHeader.TransactionNumber   = CashLedgerFundTransferHeader

		CompanySystemClosingControlRel
			one-to-one relation to CompanySystemClosingControl
			Field Mapping uses BySystemCode
				related.GeneralLedgerSystemCode		= "CB"
				related.Company						= Company

		GeneralLedgerSystemCodeRel		
			one-to-one relation to GeneralLedgerSystemCode
			Field Mapping uses symbolic key
				related.FinanceEnterpriseGroup	= CashManagementGroup
				related.GeneralLedgerSystemCode	= "CB"	

		GLCommitRel		
			one-to-many relation to GLCommit
			Field Mapping uses BySystemAndHeaderUniqueID	
				related.FinanceEnterpriseGroup	= CashManagementGroup
				related.HeaderUniqueID	= UniqueID



		OpenGLCommitDrillRel	
			one-to-many relation to GLCommit
			Field Mapping uses BySystemAndHeaderUniqueID
				related.FinanceEnterpriseGroup	= CashManagementGroup
				related.HeaderUniqueID			= UniqueID
			Instance Selection
				where (related.Status = 0
				or     related.Status = 2
				or     related.Status = 3)
				
		GLCommitDocumentsRel	
			one-to-one relation to GLCommitDocument
			Field Mapping uses ByHeaderObjectReference
				related.HeaderObjectReference = reference to this instance















		CashCodeFundRel
			one-to-one relation to CashCodeFund
			Field Mapping uses ByAccountingEntityFund
				related.CashManagementGroup		= CashManagementGroup
				related.CashCode				= CashCode
				related.AccountingEntity		= LocalToAccountingEntity
		 		related.AccountingUnit			= LocalAccountingUnit
				related.FinanceDimension1		= LocalFinanceDimension1

		CashCodeFundEditRel
			one-to-many relation to CashCodeFundEdit
			Field Mapping uses ByOriginatingTransaction
		 		related.CashManagementGroup		= CashManagementGroup
		  		related.OriginatingTransaction	= reference to this instance

		CashCodeFundEditByFundRel
			one-to-one relation to CashCodeFundEdit
			Field Mapping uses ByOriginatingTransaction
		 		related.CashManagementGroup		= CashManagementGroup
		  		related.OriginatingTransaction	= reference to this instance
		 		related.CashCode				= CashCode
		 		related.AccountingEntity		= LocalToAccountingEntity
		 		related.AccountingUnit			= LocalAccountingUnit
		 		related.FinanceDimension1		= LocalFinanceDimension1

		ExceedesCashCodeFundBalanceRel
			one-to-many relation to CashCodeFundEdit
			Field Mapping uses ByExceedesFundBalance
		 		related.CashManagementGroup		= CashManagementGroup
		  		related.OriginatingTransaction	= reference to this instance
		 		related.ExceedesFundBalance		= true

		CashCodeGroupDetailRel
			one-to-one relation to CashCodeGroupDetail
			Field Mapping uses symbolic key
				related.CashManagementGroup			= CashManagementGroup
				related.CashCodeGroup				= LocalCashCodeGroup
				related.CashCode					= CashCode

		CashLedgerTransactionErrorRel is a CashLedgerTransactionError set 
		
		CashLedgerTransactionErrorMassReleaseRel	
			one-to-many relation to CashLedgerTransactionError
			Field Mapping uses ByMassReleaseBankFundTransfersErrorSource
				related.CashManagementGroup				= CashManagementGroup
				related.ErrorSource						= 8	
				related.CashLedgerMassReleaseResult 	= CashLedgerMassReleaseResult
				related.CashCode						= CashCode
				related.CashLedgerFundTransferHeader	= CashLedgerFundTransferHeader

		CurrentGeneralLedgerCalendarPeriodRel	
			one-to-one relation to GeneralLedgerCalendarPeriod
			Field Mapping uses symbolic key
				related.FinanceEnterpriseGroup				= CashManagementGroup
				related.GeneralLedgerCalendarPeriod			= Company.OrigCompany.AccountingEntity.CurrentPeriod.GeneralLedgerCalendarPeriod	

		UnreleasedBankFundTransfersErrorRel
			one-to-many relation to CashLedgerJobResultError
            Field Mapping uses ByCompanyErrorType
            	related.CashManagementGroup 				= LocalCashManagementGroup
            	related.CashLedgerJobResult					= LocalCashLedgerJobResult
            	related.Company								= LocalCompany
            	related.ErrorType							= 12 

		DuplicateCashLedgerTransactionRel
			one-to-many relation to CashLedgerTransaction
			Field Mapping uses Set6
				related.CashManagementGroup		= CashManagementGroup	
				related.CashCode 				= CashCode
				related.BankTransactionCode 	= BankTransactionCode
				related.TransactionNumber 		= LocalDuplicateTransactionNumber

		DuplicateDetailCashLedgerTransactionRel
			one-to-many relation to CashLedgerTransaction
			Field Mapping uses Set6
				related.CashManagementGroup		= CashManagementGroup	
				related.CashCode 				= CashLedgerFundTransferDetailsRel.CashLedgerFundTransferDetail.DetailCashCode
				related.BankTransactionCode 	= first CashLedgerFundTransferDetailsRel.BankTransactionCode
				related.TransactionNumber 		= LocalDuplicateTransactionNumber

		DuplicateCashLedgerCashReceiptHeaderRel
			one-to-one relation to CashLedgerCashReceiptHeader
			Field Mapping uses symbolic key
				related.CashManagementGroup 							= CashManagementGroup	
				related.CashCode                						= CashCode
				related.CashLedgerCashReceiptHeader.BankTransactionCode = BankTransactionCode
				related.CashLedgerCashReceiptHeader.TransactionNumber   = LocalDuplicateTransactionNumber

		DuplicateDetailCashLedgerCashReceiptHeaderRel
			one-to-one relation to CashLedgerCashReceiptHeader
			Field Mapping uses symbolic key
				related.CashManagementGroup 							= CashManagementGroup	
				related.CashCode                						= CashLedgerFundTransferDetailsRel.CashLedgerFundTransferDetail.DetailCashCode
				related.CashLedgerCashReceiptHeader.BankTransactionCode = first CashLedgerFundTransferDetailsRel.BankTransactionCode
				related.CashLedgerCashReceiptHeader.TransactionNumber   = LocalDuplicateTransactionNumber
            	
    Sets
        Set2
            indexed
            Instance Selection
                where (IsUnreleased)
            Sort Order
            	CashManagementGroup 
                CashCode
                CashLedgerFundTransferHeader

		ByCompany	
			indexed
            Sort Order
            	CashManagementGroup
                Company.OrigCompany
                Status
                CashLedgerFundTransferHeader
                CashCode
                                
    Rule Blocks






		ReverseBaseAmounts
			LocalFinanceCurrencyAmount.FunctionalAmount.EnteredCurrencyAmount 	*= DistMultiplier
			LocalFinanceCurrencyAmount.AlternateAmount.EnteredCurrencyAmount	*= DistMultiplier
			LocalFinanceCurrencyAmount.AlternateAmount2.EnteredCurrencyAmount 	*= DistMultiplier
			LocalFinanceCurrencyAmount.AlternateAmount3.EnteredCurrencyAmount 	*= DistMultiplier
			LocalFinanceCurrencyAmount.ToFunctionalAmount.EnteredCurrencyAmount *= DistMultiplier
			LocalFinanceCurrencyAmount.ToAlternateAmount.EnteredCurrencyAmount	*= DistMultiplier
			LocalFinanceCurrencyAmount.ToAlternateAmount2.EnteredCurrencyAmount *= DistMultiplier
			LocalFinanceCurrencyAmount.ToAlternateAmount3.EnteredCurrencyAmount *= DistMultiplier
			LocalFinanceCurrencyAmount.ProjectAmount.EnteredCurrencyAmount 	 	*= DistMultiplier
			LocalFinanceCurrencyAmount.ReportAmount1.EnteredCurrencyAmount 		*= DistMultiplier
			LocalFinanceCurrencyAmount.ReportAmount2.EnteredCurrencyAmount 		*= DistMultiplier
			LocalFinanceCurrencyAmount.ReportAmount3.EnteredCurrencyAmount 		*= DistMultiplier
			LocalFinanceCurrencyAmount.ReportAmount4.EnteredCurrencyAmount 		*= DistMultiplier
			LocalFinanceCurrencyAmount.ReportAmount5.EnteredCurrencyAmount 		*= DistMultiplier

		ReverseOffsetBaseAmounts
			LocalFinanceCurrencyAmount.FunctionalAmount.EnteredCurrencyAmount 	*= OffsetMultiplier
			LocalFinanceCurrencyAmount.AlternateAmount.EnteredCurrencyAmount	*= OffsetMultiplier
			LocalFinanceCurrencyAmount.AlternateAmount2.EnteredCurrencyAmount 	*= OffsetMultiplier
			LocalFinanceCurrencyAmount.AlternateAmount3.EnteredCurrencyAmount 	*= OffsetMultiplier
			LocalFinanceCurrencyAmount.ToFunctionalAmount.EnteredCurrencyAmount *= OffsetMultiplier
			LocalFinanceCurrencyAmount.ToAlternateAmount.EnteredCurrencyAmount	*= OffsetMultiplier
			LocalFinanceCurrencyAmount.ToAlternateAmount2.EnteredCurrencyAmount *= OffsetMultiplier
			LocalFinanceCurrencyAmount.ToAlternateAmount3.EnteredCurrencyAmount *= OffsetMultiplier
			LocalFinanceCurrencyAmount.ProjectAmount.EnteredCurrencyAmount 	 	*= OffsetMultiplier
			LocalFinanceCurrencyAmount.ReportAmount1.EnteredCurrencyAmount 		*= OffsetMultiplier
			LocalFinanceCurrencyAmount.ReportAmount2.EnteredCurrencyAmount 		*= OffsetMultiplier
			LocalFinanceCurrencyAmount.ReportAmount3.EnteredCurrencyAmount 		*= OffsetMultiplier
			LocalFinanceCurrencyAmount.ReportAmount4.EnteredCurrencyAmount 		*= OffsetMultiplier
			LocalFinanceCurrencyAmount.ReportAmount5.EnteredCurrencyAmount 		*= OffsetMultiplier

		ReverseBankExpenseBaseDistributionAmounts
			LocalFinanceCurrencyAmountGroup.FunctionalAmount.EnteredCurrencyAmount 	 *= -1
			LocalFinanceCurrencyAmountGroup.AlternateAmount.EnteredCurrencyAmount	 *= -1
			LocalFinanceCurrencyAmountGroup.AlternateAmount2.EnteredCurrencyAmount 	 *= -1
			LocalFinanceCurrencyAmountGroup.AlternateAmount3.EnteredCurrencyAmount 	 *= -1
			LocalFinanceCurrencyAmountGroup.ToFunctionalAmount.EnteredCurrencyAmount *= -1
			LocalFinanceCurrencyAmountGroup.ToAlternateAmount.EnteredCurrencyAmount	 *= -1
			LocalFinanceCurrencyAmountGroup.ToAlternateAmount2.EnteredCurrencyAmount *= -1
			LocalFinanceCurrencyAmountGroup.ToAlternateAmount3.EnteredCurrencyAmount *= -1
			LocalFinanceCurrencyAmountGroup.ProjectAmount.EnteredCurrencyAmount 	 *= -1
			LocalFinanceCurrencyAmountGroup.ReportAmount1.EnteredCurrencyAmount 	 *= -1
			LocalFinanceCurrencyAmountGroup.ReportAmount2.EnteredCurrencyAmount 	 *= -1
			LocalFinanceCurrencyAmountGroup.ReportAmount3.EnteredCurrencyAmount 	 *= -1
			LocalFinanceCurrencyAmountGroup.ReportAmount4.EnteredCurrencyAmount 	 *= -1
			LocalFinanceCurrencyAmountGroup.ReportAmount5.EnteredCurrencyAmount 	 *= -1

        GetBankTransactionCode
            constraint (CashCodeBankTransferRel exists)
            	"BankFundTransferInformationNotDefinedOnCashCode"     
            if (TransferType.MultipleDeposits
            or  TransferType.CashCodeFundTransfer)					
                BankTransactionCode = CashCodeBankTransferRel.FromBankTransactionCode
            else
                BankTransactionCode = CashCodeBankTransferRel.ToBankTransactionCode

		GetAutoNumberByLevel
			if (CashManagementGroup.AutoTranNumberByCompany)
				AutoNumberByCompany 				= Company
			else
			if (CashManagementGroup.AutoTranNumberByCashCode)
				AutoNumberByCashCode				= CashCode
			else
			if (CashManagementGroup.AutoTranNumberByBankTransactionCode)
				AutoNumberByBankTransactionCode		= BankTransactionCode
			else
			if (CashManagementGroup.AutoTranNumberByCashCodeBankTranCode)
				AutoNumberByCashCode				= CashCode
				AutoNumberByBankTransactionCode		= BankTransactionCode

		StripLeadingSpaces	
			while (CashLedgerFundTransferHeader[1:1] = blank)
				CashLedgerFundTransferHeader = CashLedgerFundTransferHeader[2:22]
				
		SetCurrencyData
			TransientAccountingEntity	= Company.OrigCompany.AccountingEntity
        	TransientFromCurrency 		= CashCode.Currency
			if (TransferDate not entered)
				TransferDate = current corporate date

		ReleaseExitRules

			if (GeneralLedgerSystemCodeRel.EncumbranceOption.TrackAndEdit
			or 	GeneralLedgerSystemCodeRel.EncumbranceOption.Track)
				invoke UpdateToReleased GLCommit
					invoked.PrmFinanceEnterpriseGroup	= CashManagementGroup  
					invoked.PrmUniqueID					= UniqueID
					invoked.PrmAccountingEntity			= Company.OrigCompany.AccountingEntity


		PerformBudgetEditsForRelease






			if ((GeneralLedgerSystemCodeRel.EncumbranceOption.TrackAndEdit
			or   GeneralLedgerSystemCodeRel.EncumbranceOption.Track)
        	and  GLCommitRelExists)
 				BudgetEditProcessing = BudgetEditProcessing.InProcess                   
				invoke EditTotalsRoute BudgetTemplateGroupTotal 	
					invoked.PrmFinanceEnterpriseGroup    														= CashManagementGroup
					invoked.PrmBudgetEditGroup           														= UniqueID
					invoked.PrmBudgetEditCallBack.BudgetEditCallBackCBFundTransfer.CashCode						= CashCode
					invoked.PrmBudgetEditCallBack.BudgetEditCallBackCBFundTransfer.CashLedgerFundTransferHeader	= CashLedgerFundTransferHeader
					invoked.PrmMode																				= BudgetEditMode.UpdateOnly
					invoked.PrmBusinessClassName  					              								= "CashLedgerFundTransferHeader"	
					invoked.PrmEditContext  		                   											= "Release"							
			else
				BudgetEditProcessing = BudgetEditProcessing.NotInProcessing
				invoke FinalRelease


		PerformFundAmountEdit

			if (!TransferType.CashCodeFundTransfer)						
				LocalToAccountingEntity			= TransientAccountingEntity
				if (HeaderAccountingUnit entered)
					LocalAccountingUnit			= HeaderAccountingUnit
					if (TransferType.MultipleDeposits			
					and CashCode.EditAvailableFunds)
						constraint (DerivedTotalTransferAmount <= CashCodeFundRel.EditAvailableAmount)
							"TotalTransferAmountOf<DerivedTotalTransferAmount>ExceedCashFundAmountForCashCode<CashCode>And<CashManagementGroup.FinanceEnterpriseGroup.AccountingEntityLabel>_<LocalToAccountingEntity>And<CashManagementGroup.FinanceEnterpriseGroup.AccountingUnitLabel>_<LocalAccountingUnit>"
					else
						constraint (CashCodeFundRel exists)
							"CashCode<CashCode>IsRestricted:<CashManagementGroup.FinanceEnterpriseGroup.AccountingEntityLabel>_<LocalToAccountingEntity>And<CashManagementGroup.FinanceEnterpriseGroup.AccountingUnitLabel>_<LocalAccountingUnit>IsNotOnRestrictedList"
				if (HeaderFund entered)
					LocalFinanceDimension1		= HeaderFund
					if (TransferType.MultipleDeposits			
					and CashCode.EditAvailableFunds)
						constraint (DerivedTotalTransferAmount <= CashCodeFundRel.EditAvailableAmount)
							"TotalTransferAmountOf<DerivedTotalTransferAmount>ExceedCashFundAmountForCashCode<CashCode>and<CashManagementGroup.FinanceEnterpriseGroup.AccountingEntityLabel>_<LocalToAccountingEntity>And<CashManagementGroup.FinanceEnterpriseGroup.FinanceDimension1Label>_<LocalFinanceDimension1>"
					else
						constraint (CashCodeFundRel exists)
							"CashCode<CashCode>IsRestricted:<CashManagementGroup.FinanceEnterpriseGroup.AccountingEntityLabel>_<LocalToAccountingEntity>And<CashManagementGroup.FinanceEnterpriseGroup.FinanceDimension1Label>_<LocalFinanceDimension1>IsNotOnRestrictedList"
			else
				invoke Delete CashCodeFundEditRel
				for each CashCodeFundTransferDetail set						
					initialize LocalTransferAmount
					LocalToAccountingEntity			= each.TransferAccountStructure.ToAccountingEntity
					LocalTransferAmount = each.TransferAmount *-1
					if (CashManagementGroup.FinanceEnterpriseGroup.FundDimension.AccountingUnit)
						LocalAccountingUnit			= each.TransferAccountStructure.AccountingUnit
						if (CashCode.EditAvailableFunds)
							invoke Update CashCodeFundEditByFundRel
								invoked.EditAmount += LocalTransferAmount
						else
							if (CashCodeFundRel !exists)
								invoke Update CashCodeFundEditByFundRel
					if (CashManagementGroup.FinanceEnterpriseGroup.FundDimension.Dimension1)
						LocalFinanceDimension1		= each.TransferAccountStructure.FinanceDimension1
						if (CashCode.EditAvailableFunds)
							invoke Update CashCodeFundEditByFundRel
								invoked.EditAmount += LocalTransferAmount
						else
							if (CashCodeFundRel !exists)
								invoke Update CashCodeFundEditByFundRel
				constraint (ExceedesCashCodeFundBalanceRel !exists)
					"<first ExceedesCashCodeFundBalanceRel.ErrorMessage>"




					                    				
    Field Rules

        CashLedgerFundTransferHeader
            if (BankTransactionCode.TransactionNumberValue.NumericOnly) 
                constraint (CashLedgerFundTransferHeader is numeric)
                    "TransferNumberMustBeNumeric"                           
                constraint (CashLedgerFundTransferHeader > "0000000000")
                    "TransferNumberCannotBeZero"            
            constraint (!IsCashLedgerTransactionExist)
                "BankTransactionAlreadyExists"                 
            constraint (!IsCashLedgerCashReceiptHeaderExist)
                "TransferNumberAlreadyInUseAs_\Cash_\Receipt_\Deposit" 
            required
				"TransferNumberRequired"                
	    
	    TransferType
	        cannot be changed
	
        Company
        	default to CashCode.DefaultPostCompany
            required
            constraint (CompanyCashCode.TransferClearingAccount entered)
                "MustDefineATransferClearingAccountInCompanyCashCode"      //MustSelectClearingAccountIn_\C\B00.3"  
			TransientAccountingEntity = Company.OrigCompany.AccountingEntity

		TransferDate
			default to current corporate date
			constraint (TransferDate <= current corporate date)
			    "TransferDateCannotBeGreaterThanSystemDate"			
			if (CashCode.BankAccountBalance set exists)		
            	constraint (TransferDate > CashCode.last BankAccountBalance set.BankAccountBalance)
                	"TransferDateIsForAClosedBankPeriod"			
        	if (TransferDate changed)
			    cannot be changed
			    	"CannotChangeDate;DeleteAndRe-\Add"				
				    		
		CurrencyTable	
			default to CompanySystemClosingControlRel.CurrencyTable
			default to Company.OrigCompany.CurrencyTable

        	if (CurrencyTable changed)
			    cannot be changed	
			    	"CannotChangeCurrencyTable;DeleteAndRe-\Add"	
			    				
        TransferBankAmount
        	TransferBankAmount = TransferBankAmountUnsigned 
        	if (TransferBankAmount changed)
				if (AppliedBaseTotal not entered)	
				    initialize TransferBaseAmount
			if (!TransferType.CashCodeFundTransfer)					
	            required
            else
            	cannot be entered
            		"AmountCannotBeEnteredOnCashCodeFundTransferHeader"
            
		TransferBaseAmount
			if (!TransferType.CashCodeFundTransfer)					
				if (AppliedBaseTotal entered)


					TransferBaseAmount.FunctionalAmount.EnteredCurrencyAmount	= AppliedBaseTotal		
				required
			else
				cannot be entered
			
        PostDate
            default to TransferDate
			if (CompanySystemClosingControlRel.Control)		
				constraint (PostDate within CompanySystemClosingControlRel.ValidEntryDate)
					"PostDateNotWithinValidEntryDatesForSystemCode;ValidDateRangeIs<CompanySystemClosingControlRel.ValidEntryDate.Begin>-<CompanySystemClosingControlRel.ValidEntryDate.End>"


		BankExpenseData
			if (BankExpenseAmountUnsigned != blank)	
		        constraint (TransferType.MultipleDeposits)
		            "CannotSetBankExpenseAmount"
		        constraint (CashCodeBankTransferRel.ExpenseBankTransactionCode entered)
			        "ExpenseBankTransactionCodeNotDefinedInCashCode"         
				BankExpenseData.ExchangeDate		= TransferDate			        
				BankExpenseData.CurrencyAmount		= BankExpenseAmountUnsigned
				required
			else
				initialize BankExpenseData
			if (TransferType.CashCodeFundTransfer)					
				cannot be entered
			
								
        BankTransactionCode
            required
            	
        Description
            required














        BankExpenseAccount
            if (BankExpenseAmountUnsigned != blank)	
                default to CompanyCashCode.BankExpenseAccount
                    default individual fields
				if (CashManagementGroup.FinanceEnterpriseGroup.FundAccounting
				and CashManagementGroup.FinanceEnterpriseGroup.FundDimension.AccountingUnit)
					BankExpenseAccount.AccountingUnit = TransientAccountingUnit
				if (CashManagementGroup.FinanceEnterpriseGroup.FundAccounting
				and CashManagementGroup.FinanceEnterpriseGroup.FundDimension.Dimension1)
					BankExpenseAccount.FinanceDimension1 = HeaderFund

				if (TransientAccountingEntity.ValidSystems entered)
					constraint (GeneralLedgerSystemCode within TransientAccountingEntity.ValidSystems)
						"InvalidSystemFor<CashManagementGroup.FinanceEnterpriseGroup.AccountingEntityLabel>"
				if (BankExpenseAccount.ToAccountingEntity.ValidSystems entered)
					constraint (GeneralLedgerSystemCode within BankExpenseAccount.ToAccountingEntity.ValidSystems)
						"InvalidSystemForPosting<CashManagementGroup.FinanceEnterpriseGroup.AccountingEntityLabel>"
				if (BankExpenseAccount.GeneralLedgerChartAccount.Account.SystemRestriction entered)
					constraint (GeneralLedgerSystemCode within BankExpenseAccount.GeneralLedgerChartAccount.Account.SystemRestriction)
						"InvalidSystemForAccount"
                required
			else
				initialize BankExpenseAccount
			if (TransferType.CashCodeFundTransfer)					
				cannot be entered

		CashCode




        CompanyCashCode
            required

		TransientAccountingUnit
			if (!TransferType.CashCodeFundTransfer						
			and CashManagementGroup.FinanceEnterpriseGroup.FundAccounting
			and CashManagementGroup.FinanceEnterpriseGroup.FundDimension.AccountingUnit)
				HeaderAccountingUnit = TransientAccountingUnit
				required
			if (TransferType.CashCodeFundTransfer)
				cannot be entered
					"<CashManagementGroup.FinanceEnterpriseGroup.AccountingUnitLabel>CannotBeEnteredOnCashCodeFundTransferHeader"
		
		HeaderFund
			if (TransferType.CashCodeFundTransfer)						
				cannot be entered
					"<CashManagementGroup.FinanceEnterpriseGroup.FinanceDimension1Label>CannotBeEnteredOnCashCodeFundTransferHeader"
			else
				if (CashManagementGroup.FinanceEnterpriseGroup.FundAccounting
				and CashManagementGroup.FinanceEnterpriseGroup.FundDimension.Dimension1)
					required


	Actions
        CreateBankFundTransferDeposits is a Create Action
        	completion message is "<CompletionMessage>"
            Entrance Rules
                TransferType = TransferType.MultipleDeposits
                include GetBankTransactionCode
				if (CashLedgerFundTransferHeader entered)	
					if (AutoNumberingAllowed)			 
						constraint (AutoNumberingAction entered)
							"CannotEnterTransferNumber;AutoNumberingSetup"
                	include StripLeadingSpaces	
				else
					constraint (AutoNumberingAllowed)
						"TransferNumberRequired"
				include SetCurrencyData

			Action Rules				
				if (AutoNumberingAllowed 
				and CashLedgerFundTransferHeader not entered)
					include GetAutoNumberByLevel
					invoke AutoCreate CashLedgerAutoTranNumber
						assign result to LocalCashLedgerAutoTranNumber
						invoked.CashManagementGroup			= CashManagementGroup
						invoked.CashLedgerDocumentType		= CashLedgerDocumentType.BankFundTransfer
						invoked.OriginatingTransaction		= reference to this instance
						invoked.CreateOperator				= actor
						invoked.CreateDate					= current timestamp
						invoked.Company 					= AutoNumberByCompany
						invoked.CashCode					= AutoNumberByCashCode
						invoked.BankTransactionCode			= AutoNumberByBankTransactionCode
						invoked.DocumentCashCode			= CashCode
						invoked.DocumentBankTransactionCode	= BankTransactionCode

					LocalTransactionNumber	= LocalCashLedgerAutoTranNumber.CashLedgerAutoTranNumber
					if (LocalCashLedgerAutoTranNumber.AutoNumberStatus.CannotBeAssignedAlreadyInUse)
						DuplicateTranNumberFound 	= true
					
					while (DuplicateTranNumberFound)
						invoke AutoCreate CashLedgerAutoTranNumber
							assign result to LocalCashLedgerAutoTranNumber
							invoked.CashManagementGroup			= CashManagementGroup
							invoked.CashLedgerDocumentType		= CashLedgerDocumentType.BankFundTransfer
							invoked.OriginatingTransaction		= reference to this instance
							invoked.CreateOperator				= actor
							invoked.CreateDate					= current timestamp
							invoked.Company 					= AutoNumberByCompany
							invoked.CashCode					= AutoNumberByCashCode
							invoked.BankTransactionCode			= AutoNumberByBankTransactionCode
							invoked.DocumentCashCode			= CashCode
							invoked.DocumentBankTransactionCode	= BankTransactionCode

						LocalTransactionNumber		= LocalCashLedgerAutoTranNumber.CashLedgerAutoTranNumber
						DuplicateTranNumberFound		= false
						if (LocalCashLedgerAutoTranNumber.AutoNumberStatus.CannotBeAssignedAlreadyInUse)
							DuplicateTranNumberFound	= true	
					CashLedgerFundTransferHeader	= LocalTransactionNumber	
			Exit Rules
				if (TransferBankAmount = AppliedBankAmount) 
					CompletionMessage = ActionCompleteMessage
				else
					CompletionMessage = OutOfBalanceMessage		
				
        CreateBankFundTransferWithdrawals is a Create Action
        	completion message is "<CompletionMessage>"
            Entrance Rules
                TransferType = TransferType.MultipleWithdrawals
                include GetBankTransactionCode
				if (CashLedgerFundTransferHeader entered)	
					if (AutoNumberingAllowed)			 
						constraint (AutoNumberingAction entered)
							"CannotEnterTransferNumber;AutoNumberingSetup"
                	include StripLeadingSpaces	
				else
					constraint (AutoNumberingAllowed)
						"TransferNumberRequired"                
				include SetCurrencyData

			Action Rules				
				if (AutoNumberingAllowed 
				and CashLedgerFundTransferHeader not entered)
					include GetAutoNumberByLevel
					invoke AutoCreate CashLedgerAutoTranNumber
						assign result to LocalCashLedgerAutoTranNumber
						invoked.CashManagementGroup			= CashManagementGroup
						invoked.CashLedgerDocumentType		= CashLedgerDocumentType.BankFundTransfer
						invoked.OriginatingTransaction		= reference to this instance
						invoked.CreateOperator				= actor
						invoked.CreateDate					= current timestamp
						invoked.Company 					= AutoNumberByCompany
						invoked.CashCode					= AutoNumberByCashCode
						invoked.BankTransactionCode			= AutoNumberByBankTransactionCode
						invoked.DocumentCashCode			= CashCode
						invoked.DocumentBankTransactionCode	= BankTransactionCode

					LocalTransactionNumber	= LocalCashLedgerAutoTranNumber.CashLedgerAutoTranNumber
					if (LocalCashLedgerAutoTranNumber.AutoNumberStatus.CannotBeAssignedAlreadyInUse)
						DuplicateTranNumberFound 	= true
					
					while (DuplicateTranNumberFound)
						invoke AutoCreate CashLedgerAutoTranNumber
							assign result to LocalCashLedgerAutoTranNumber
							invoked.CashManagementGroup			= CashManagementGroup
							invoked.CashLedgerDocumentType		= CashLedgerDocumentType.BankFundTransfer
							invoked.OriginatingTransaction		= reference to this instance
							invoked.CreateOperator				= actor
							invoked.CreateDate					= current timestamp
							invoked.Company 					= AutoNumberByCompany
							invoked.CashCode					= AutoNumberByCashCode
							invoked.BankTransactionCode			= AutoNumberByBankTransactionCode
							invoked.DocumentCashCode			= CashCode
							invoked.DocumentBankTransactionCode	= BankTransactionCode

						LocalTransactionNumber		= LocalCashLedgerAutoTranNumber.CashLedgerAutoTranNumber
						DuplicateTranNumberFound		= false
						if (LocalCashLedgerAutoTranNumber.AutoNumberStatus.CannotBeAssignedAlreadyInUse)
							DuplicateTranNumberFound	= true	
					CashLedgerFundTransferHeader	= LocalTransactionNumber
			Exit Rules
				if (TransferBankAmount = AppliedBankAmount) 
					CompletionMessage = ActionCompleteMessage
				else
					CompletionMessage = OutOfBalanceMessage		
				
        CreateCashCodeFundTransfer is a Create Action					
        	valid when (CashManagementGroup.FinanceEnterpriseGroup.FundAccounting)
        	completion message is "<CompletionMessage>"
            Entrance Rules
                TransferType = TransferType.CashCodeFundTransfer
                include GetBankTransactionCode
                if (CashLedgerFundTransferHeader entered)
					if (AutoNumberingAllowed)			 
						constraint (AutoNumberingAction entered)
							"CannotEnterTransferNumber;AutoNumberingSetup"
                	include StripLeadingSpaces	
				else
					constraint (AutoNumberingAllowed)
						"TransferNumberRequired"
				include SetCurrencyData
			Action Rules				
				if (AutoNumberingAllowed 
				and CashLedgerFundTransferHeader not entered)
					include GetAutoNumberByLevel
					invoke AutoCreate CashLedgerAutoTranNumber
						assign result to LocalCashLedgerAutoTranNumber
						invoked.CashManagementGroup			= CashManagementGroup
						invoked.CashLedgerDocumentType		= CashLedgerDocumentType.BankFundTransfer
						invoked.OriginatingTransaction		= reference to this instance
						invoked.CreateOperator				= actor
						invoked.CreateDate					= current timestamp
						invoked.Company 					= AutoNumberByCompany
						invoked.CashCode					= AutoNumberByCashCode
						invoked.BankTransactionCode			= AutoNumberByBankTransactionCode
						invoked.DocumentCashCode			= CashCode
						invoked.DocumentBankTransactionCode	= BankTransactionCode

					LocalTransactionNumber	= LocalCashLedgerAutoTranNumber.CashLedgerAutoTranNumber
					if (LocalCashLedgerAutoTranNumber.AutoNumberStatus.CannotBeAssignedAlreadyInUse)
						DuplicateTranNumberFound 	= true
					
					while (DuplicateTranNumberFound)
						invoke AutoCreate CashLedgerAutoTranNumber
							assign result to LocalCashLedgerAutoTranNumber
							invoked.CashManagementGroup			= CashManagementGroup
							invoked.CashLedgerDocumentType		= CashLedgerDocumentType.BankFundTransfer
							invoked.OriginatingTransaction		= reference to this instance
							invoked.CreateOperator				= actor
							invoked.CreateDate					= current timestamp
							invoked.Company 					= AutoNumberByCompany
							invoked.CashCode					= AutoNumberByCashCode
							invoked.BankTransactionCode			= AutoNumberByBankTransactionCode
							invoked.DocumentCashCode			= CashCode
							invoked.DocumentBankTransactionCode	= BankTransactionCode

						LocalTransactionNumber		= LocalCashLedgerAutoTranNumber.CashLedgerAutoTranNumber
						DuplicateTranNumberFound		= false
						if (LocalCashLedgerAutoTranNumber.AutoNumberStatus.CannotBeAssignedAlreadyInUse)
							DuplicateTranNumberFound	= true	
					CashLedgerFundTransferHeader	= LocalTransactionNumber
			Exit Rules
				CompletionMessage = ActionCompleteMessage

		Update is an Update Action
			completion message is "<CompletionMessage>"
		    valid when (IsUnreleased)
		    Entrance Rules
                constraint (IsUnreleased)
                    "CannotMaintain:FundTransferIsAlreadyReleased"     
 				constraint (!BudgetEditInProgress)					
					"CannotUpdate;BudgetEditInProgress"
              	include SetCurrencyData
                include GetBankTransactionCode

				if (Company changed
				or TransferDate changed)
					if (CashCodeFundTransferDetail set exists)			
						invoke Update CashCodeFundTransferDetail set
					else
						invoke Update CashLedgerFundTransferDetail set
			Action Rules
			Exit Rules
				if (TransferBankAmount = AppliedBankAmount) 
					CompletionMessage = ActionCompleteMessage
				else
					CompletionMessage = OutOfBalanceMessage				
		
		Delete is a Delete Action
			completion message is "<CompletionMessage>"
		    valid when (IsUnreleased)
		    Entrance Rules
                constraint (IsUnreleased)
                    "CannotMaintain:FundTransferIsAlreadyReleased"     
				constraint (!BudgetEditInProgress)					
					"CannotDelete;BudgetEditInProgress"
            Action Rules

				CompletionMessage = ActionCompleteMessage
				
		UpdateHeaderAmounts is an Update Action  
			default label is untranslatable
			restricted


			Action Rules
				AppliedBankAmount											= AppliedBankTotal				
				AppliedBaseAmount											= AppliedBaseTotal
				TransientFromCurrency										= CashLedgerFundTransferHeader.CashCode.Currency
				TransientAccountingEntity									= CashLedgerFundTransferHeader.Company.OrigCompany.AccountingEntity
				TransientAccountingUnit										= HeaderAccountingUnit
				if (!TransferType.CashCodeFundTransfer)					
					TransferBaseAmount.FunctionalAmount.EnteredCurrencyAmount	= AppliedBaseTotal

		ReleaseFromMassRelease is an Instance Action
			default label is untranslatable
			restricted
			Action Rules

				invoke Release

		UpdateHeaderNumber is an Instance Action
            default label is untranslatable
            restricted
            Parameters
                PrmHeaderNumber is Numeric 22
            Action Rules
				invoke UpdateHeaderNumber CashLedgerFundTransferDetail set	
					invoked.PrmHeaderNumber = PrmHeaderNumber
                CashLedgerFundTransferHeader = PrmHeaderNumber
				
        Release is an Instance Action
        	completion message is "<CompletionMessage>"

			valid when (CanReleaseTransfer)		
            Local Fields
                DistMultiplier is Numeric size 1
                OffsetMultiplier is Numeric size 1
            Entrance Rules
				if (AutoNumberingAllowed)
					LocalDuplicateTransactionNumber = CashLedgerFundTransferHeader
					if (DuplicateDetailCashLedgerTransactionRel exists)
						LocalMaxDuplicateNumberRange = LocalDuplicateTransactionNumber + 1000 
						while (LocalDuplicateTransactionNumber < LocalMaxDuplicateNumberRange)
							LocalDuplicateTransactionNumber += 1
							if (DuplicateCashLedgerTransactionRel				!exists
							and DuplicateDetailCashLedgerTransactionRel 		!exists
							and DuplicateCashLedgerCashReceiptHeaderRel			!exists
							and DuplicateDetailCashLedgerCashReceiptHeaderRel	!exists)
								end while
						constraint (LocalDuplicateTransactionNumber < LocalMaxDuplicateNumberRange)
							"CashLedgerTransactionsExistForFundTransferDetailsForNumber:<CashLedgerFundTransferHeader>;CannotRelease"
						confirmation required
							"CashLedgerTransactionsExistForFundTransferDetailsForNumber:<CashLedgerFundTransferHeader>;NumberIncreasedTo<LocalDuplicateTransactionNumber>;Continue"
						invoke UpdateHeaderNumber
							invoked.PrmHeaderNumber=LocalDuplicateTransactionNumber
                if (TransferType.MultipleDeposits)
                    DistMultiplier = 1
                    OffsetMultiplier = -1
                else
                    DistMultiplier = -1
                    OffsetMultiplier = 1
                constraint (TransferBankAmount = AppliedBankAmount)
                    "CannotRelease;FundTransferIsOutOfBalance" 
                    
				if (TransferType.CashCodeFundTransfer)						
					constraint (CashCodeFundTransferDetail set exists)
						"CannotRelease;NoCashCodeFundTransferDetailsExist"

				if (CashCode.EditAvailableFunds
				or  CashCode.RestrictedFunds)
					include PerformFundAmountEdit
 



            Action Rules
                invoke Unreleased.CreateFromCashLedgerWithoutEdits CashLedgerTransaction
                    assign result to NewCashLedgerTransaction

					invoked.CashManagementGroup 				= CashManagementGroup
                    invoked.CashCode          					= CashCode
                    invoked.BankTransactionCode             	= BankTransactionCode
                    invoked.TransactionNumber               	= CashLedgerFundTransferHeader


                    invoked.TransactionNumberSuffix         	= 0
                    invoked.SourceCode                      	= "CB"
                    invoked.Company  							= Company
                    invoked.IssueDate                       	= TransferDate
                    invoked.IssuedBankAmount 					= TransferBankAmount
                    invoked.IssuedBaseAmount    				= TransferBaseAmount
                    invoked.TransactionCurrencyNumberOfDecimals = CashCode.BankAccountNumber.Currency.NumberOfDecimals
                    invoked.BaseCurrencyNumberOfDecimals 		= Company.OrigCompany.CurrencyNumberOfDecimals
                    invoked.Description                     	= Description
                    invoked.Reference                     	  	= "BankFundTransfer"
                    invoked.GeneralLedgerPostDate           	= PostDate
                    invoked.Type                            	= "T"
					invoked.BypassBudgetEditing					= true
					
                SavedCashLedgerTransaction  = NewCashLedgerTransaction.CashLedgerTransaction
				if (!TransferType.CashCodeFundTransfer)						
	                LocalFinanceCurrencyAmount = TransferBaseAmount
					include ReverseBaseAmounts
	                invoke Create CashLedgerGLDistribution
	                    invoked.CashLedgerGLDistribution.TransactionIDNumber = SavedCashLedgerTransaction
	                    invoked.CashManagementGroup 						= CashManagementGroup
	                    invoked.CashCode                      				= CashCode
	                    invoked.CashLedgerSourceRecord						= "CBT"
	                    invoked.CashLedgerGLDistribution.BankTransactionCode = BankTransactionCode
	                    invoked.TransactionNumber                           = CashLedgerFundTransferHeader
	                    invoked.TransactionNumberSuffix                     = 0
	                    invoked.GeneralLedgerSourceCode                     = "CL"
	                    invoked.Company                                     = Company
	                    invoked.CashLedgerGLDistribution.DistributionType   = "E"
	                    invoked.RecordType									= ""
	                    invoked.Status                                      = 1 
	                    invoked.PostDate                                    = PostDate
	                    invoked.GLFinanceCodeBlock                          = CompanyCashCode.TransferClearingAccount
						if (HeaderAccountingUnit entered)
		                    invoked.GLFinanceCodeBlock.AccountingUnit		= HeaderAccountingUnit
						if (HeaderFund entered)
		                    invoked.GLFinanceCodeBlock.FinanceDimension1	= HeaderFund
	                    invoked.GLTransactionAmount   						= TransferBankAmount*DistMultiplier
	                    invoked.DistributionToBankAmount 					= TransferBankAmount*DistMultiplier
	                    invoked.GLBaseAmount								= LocalFinanceCurrencyAmount
	                    invoked.Reference                                   = "BankFundTransfer"
	                    invoked.Description                                 = Description
	                    invoked.TransactionCurrencyNumberOfDecimals         = CashCode.BankAccountNumber.Currency.NumberOfDecimals
	                    invoked.ToTransactionCurrencyNumberOfDecimals       = CashCode.BankAccountNumber.Currency.NumberOfDecimals
	                    invoked.BaseCurrencyNumberOfDecimals                = Company.OrigCompany.CurrencyNumberOfDecimals
	                    invoked.ToBaseCurrencyNumberOfDecimals              = Company.OrigCompany.CurrencyNumberOfDecimals
						invoked.TransferHeaderCashCode        				= CashCode
						invoked.BypassBudgetAndCommitmentProcessing 		= true
						invoked.BypassStatusEdit							= true
						
	                LocalFinanceCurrencyAmount = TransferBaseAmount
					include ReverseOffsetBaseAmounts
	                invoke Create CashLedgerGLDistribution	
	                    invoked.CashLedgerGLDistribution.TransactionIDNumber = SavedCashLedgerTransaction
	                    invoked.CashManagementGroup 						= CashManagementGroup
	                    invoked.CashCode                      				= CashCode
	                    invoked.CashLedgerSourceRecord						= "CBT"
	                    invoked.CashLedgerGLDistribution.BankTransactionCode = BankTransactionCode
	                    invoked.TransactionNumber                           = CashLedgerFundTransferHeader
	                    invoked.TransactionNumberSuffix                     = 0
	                    invoked.GeneralLedgerSourceCode                     = "CL"
	                    invoked.Company                                     = Company
	                    invoked.CashLedgerGLDistribution.DistributionType   = "E"
	                    invoked.RecordType                                  = "C"
	                    invoked.Status                                      = 1  
	                    invoked.PostDate                                    = PostDate
	                    if (BankTransactionCode.AutomaticReconciliation
	                    and CompanyCashCode.ReconcileGeneralLedgerEntry)
	                        invoked.GLFinanceCodeBlock                      = CompanyCashCode.ReconciliationAccount
	                    else
	                        invoked.GLFinanceCodeBlock                      = CompanyCashCode.CashAccount
						if (HeaderAccountingUnit entered)
							invoked.GLFinanceCodeBlock.AccountingUnit		= HeaderAccountingUnit
						if (HeaderFund entered)
							invoked.GLFinanceCodeBlock.FinanceDimension1	= HeaderFund
	                    invoked.GLTransactionAmount   						= TransferBankAmount*OffsetMultiplier
	                    invoked.DistributionToBankAmount 					= TransferBankAmount*OffsetMultiplier
	                    invoked.GLBaseAmount 								= LocalFinanceCurrencyAmount
	                    invoked.Reference                                   = "BankFundTransfer"
	                    invoked.Description                                 = Description
	                    invoked.TransactionCurrencyNumberOfDecimals         = CashCode.BankAccountNumber.Currency.NumberOfDecimals
	                    invoked.ToTransactionCurrencyNumberOfDecimals       = CashCode.BankAccountNumber.Currency.NumberOfDecimals
	                    invoked.BaseCurrencyNumberOfDecimals                = Company.OrigCompany.CurrencyNumberOfDecimals
	                    invoked.ToBaseCurrencyNumberOfDecimals              = Company.OrigCompany.CurrencyNumberOfDecimals
						invoked.TransferHeaderCashCode         				= CashCode
						invoked.BypassStatusEdit							= true
						
	                if (BankExpenseData.CurrencyAmount entered
	                and TransferType.MultipleDeposits)
	                    invoke Unreleased.CreateFromCashLedgerWithoutEdits CashLedgerTransaction
	                        assign result to NewCashLedgerTransaction

							invoked.CashManagementGroup 			= CashManagementGroup
	                        invoked.CashCode           				= CashCode
	                        invoked.BankTransactionCode             = CashCodeBankTransferRel.ExpenseBankTransactionCode
	                        invoked.TransactionNumber               = CashLedgerFundTransferHeader


	                        invoked.TransactionNumberSuffix         = 0
	                        invoked.SourceCode                      = "CB"
	                        invoked.Company  					    = Company
	                        invoked.IssueDate                       = TransferDate
	                        invoked.IssuedBankAmount 				= BankExpenseData.CurrencyAmount
			                invoked.IssuedBaseAmount				= BankExpenseData
	                        invoked.TransactionCurrencyNumberOfDecimals = CashCode.BankAccountNumber.Currency.NumberOfDecimals
	                        invoked.BaseCurrencyNumberOfDecimals 	= Company.OrigCompany.CurrencyNumberOfDecimals
	                        invoked.Description                     = Description
	                        invoked.Reference                       = "BankFundTransfer"
	                        invoked.GeneralLedgerPostDate           = PostDate
	                        invoked.BypassBudgetEditing				= true
	                    SavedCashLedgerTransaction = NewCashLedgerTransaction.CashLedgerTransaction
	
	                    invoke Create CashLedgerGLDistribution
	                    	invoked.CashManagementGroup 						= CashManagementGroup
	                        invoked.CashLedgerGLDistribution.TransactionIDNumber = SavedCashLedgerTransaction
	                        invoked.CashCode                       				= CashCode
	                    	invoked.CashLedgerSourceRecord						= "CBT"
	                        invoked.CashLedgerGLDistribution.BankTransactionCode = CashCodeBankTransferRel.ExpenseBankTransactionCode
	                        invoked.TransactionNumber                           = CashLedgerFundTransferHeader
	                        invoked.TransactionNumberSuffix                     = 0
	                        invoked.GeneralLedgerSourceCode                     = "CL"
	                        invoked.Company                                     = Company
	                        invoked.CashLedgerGLDistribution.DistributionType   = "E"
							invoked.Status										= 1
	                        invoked.RecordType									= ""
	                        invoked.PostDate                                    = PostDate
	                        invoked.GLFinanceCodeBlock                          = BankExpenseAccount
	                        invoked.GLTransactionAmount   						= BankExpenseData.CurrencyAmount
	                        invoked.DistributionToBankAmount 					= BankExpenseData.CurrencyAmount
	                        invoked.GLBaseAmount								= BankExpenseData
	                        invoked.Reference                                   = "BankFundTransfer"
	                        invoked.Description                                 = Description
	                        invoked.TransactionCurrencyNumberOfDecimals         = CashCode.BankAccountNumber.Currency.NumberOfDecimals
	                        invoked.ToTransactionCurrencyNumberOfDecimals       = CashCode.BankAccountNumber.Currency.NumberOfDecimals
	                        invoked.BaseCurrencyNumberOfDecimals                = Company.OrigCompany.CurrencyNumberOfDecimals
	                        invoked.ToBaseCurrencyNumberOfDecimals              = Company.OrigCompany.CurrencyNumberOfDecimals
							invoked.TransferHeaderCashCode         				= CashCode
							invoked.BypassBudgetEditing							= true
							invoked.BypassStatusEdit							= true
							
						LocalFinanceCurrencyAmountGroup							= BankExpenseData
						include ReverseBankExpenseBaseDistributionAmounts							
	                    invoke Create CashLedgerGLDistribution	
	                    	invoked.CashManagementGroup 						= CashManagementGroup
	                        invoked.CashLedgerGLDistribution.TransactionIDNumber = SavedCashLedgerTransaction
	                        invoked.CashCode                       				= CashCode
		                    invoked.CashLedgerSourceRecord						= "CBT"
	                        invoked.CashLedgerGLDistribution.BankTransactionCode = CashCodeBankTransferRel.ExpenseBankTransactionCode
	                        invoked.TransactionNumber                           = CashLedgerFundTransferHeader
	                        invoked.TransactionNumberSuffix                     = 0
	                        invoked.GeneralLedgerSourceCode                     = "CL"
	                        invoked.Company                                     = Company
	                        invoked.CashLedgerGLDistribution.DistributionType   = "E"
	                        invoked.RecordType                                  = "C"
	                        invoked.Status                                      = 1  
	                        invoked.PostDate                                    = PostDate
	                        if (BankTransactionCode.AutomaticReconciliation
	                        and CompanyCashCode.ReconcileGeneralLedgerEntry)
	                            invoked.GLFinanceCodeBlock                      = CompanyCashCode.ReconciliationAccount
								if (TransientAccountingUnit != blank)	
									invoked.GLFinanceCodeBlock.AccountingUnit	= TransientAccountingUnit
								if (HeaderFund entered)
		                         	invoked.GLFinanceCodeBlock.FinanceDimension1	= HeaderFund
	                        else
	                            invoked.GLFinanceCodeBlock                      = CompanyCashCode.CashAccount
								if (TransientAccountingUnit != blank)	
									invoked.GLFinanceCodeBlock.AccountingUnit	= TransientAccountingUnit
								if (HeaderFund entered)
			                        invoked.GLFinanceCodeBlock.FinanceDimension1	= HeaderFund
	                        invoked.GLTransactionAmount   						= BankExpenseData.CurrencyAmount *-1
	                        invoked.DistributionToBankAmount 					= BankExpenseData.CurrencyAmount *-1
	                        invoked.GLBaseAmount								= LocalFinanceCurrencyAmountGroup
	                        invoked.Reference                                   = "BankFundTransfer"
	                        invoked.Description                                 = Description
	                        invoked.TransactionCurrencyNumberOfDecimals         = CashCode.BankAccountNumber.Currency.NumberOfDecimals
	                        invoked.ToTransactionCurrencyNumberOfDecimals       = CashCode.BankAccountNumber.Currency.NumberOfDecimals
	                        invoked.BaseCurrencyNumberOfDecimals                = Company.OrigCompany.CurrencyNumberOfDecimals
	                        invoked.ToBaseCurrencyNumberOfDecimals              = Company.OrigCompany.CurrencyNumberOfDecimals
							invoked.TransferHeaderCashCode         				= CashCode
							invoked.BypassStatusEdit							= true
							
	                for each CashLedgerFundTransferDetail set
	                    invoke Release each
	
					include PerformBudgetEditsForRelease	

				else									
					initialize AppliedBaseAmount
					initialize LocalFinanceCurrencyAmount
					for each CashCodeFundTransferDetail set	
						LocalFinanceCurrencyAmount.FunctionalAmount.EnteredCurrencyAmount		+= each.TransferBaseAmount.FunctionalAmount.EnteredCurrencyAmount
						LocalFinanceCurrencyAmount.AlternateAmount.EnteredCurrencyAmount		+= each.TransferBaseAmount.AlternateAmount.EnteredCurrencyAmount
						LocalFinanceCurrencyAmount.AlternateAmount2.EnteredCurrencyAmount		+= each.TransferBaseAmount.AlternateAmount2.EnteredCurrencyAmount
						LocalFinanceCurrencyAmount.AlternateAmount3.EnteredCurrencyAmount		+= each.TransferBaseAmount.AlternateAmount3.EnteredCurrencyAmount
						LocalFinanceCurrencyAmount.ReportAmount1.EnteredCurrencyAmount			+= each.TransferBaseAmount.ReportAmount1.EnteredCurrencyAmount
						LocalFinanceCurrencyAmount.ReportAmount2.EnteredCurrencyAmount			+= each.TransferBaseAmount.ReportAmount2.EnteredCurrencyAmount
						LocalFinanceCurrencyAmount.ReportAmount3.EnteredCurrencyAmount			+= each.TransferBaseAmount.ReportAmount3.EnteredCurrencyAmount
						LocalFinanceCurrencyAmount.ReportAmount4.EnteredCurrencyAmount			+= each.TransferBaseAmount.ReportAmount4.EnteredCurrencyAmount
						LocalFinanceCurrencyAmount.ReportAmount5.EnteredCurrencyAmount			+= each.TransferBaseAmount.ReportAmount5.EnteredCurrencyAmount
		
					if (LocalFinanceCurrencyAmount.FunctionalAmount.EnteredCurrencyAmount	entered
					or	LocalFinanceCurrencyAmount.AlternateAmount.EnteredCurrencyAmount	entered
					or	LocalFinanceCurrencyAmount.AlternateAmount2.EnteredCurrencyAmount	entered
					or	LocalFinanceCurrencyAmount.AlternateAmount3.EnteredCurrencyAmount	entered
					or	LocalFinanceCurrencyAmount.ReportAmount1.EnteredCurrencyAmount		entered
					or	LocalFinanceCurrencyAmount.ReportAmount2.EnteredCurrencyAmount		entered
					or	LocalFinanceCurrencyAmount.ReportAmount3.EnteredCurrencyAmount		entered
					or	LocalFinanceCurrencyAmount.ReportAmount4.EnteredCurrencyAmount		entered
					or	LocalFinanceCurrencyAmount.ReportAmount5.EnteredCurrencyAmount		entered)
						invoke AdjustDetailCurrencyAmounts last CashCodeFundTransferDetail set
							invoked.PrmCurrencyAmountAdjustment.FunctionalTotal			= LocalFinanceCurrencyAmount.FunctionalAmount.EnteredCurrencyAmount
								invoked.PrmCurrencyAmountAdjustment.AlternateTotal		= LocalFinanceCurrencyAmount.AlternateAmount.EnteredCurrencyAmount
								invoked.PrmCurrencyAmountAdjustment.AlternateTotal2		= LocalFinanceCurrencyAmount.AlternateAmount2.EnteredCurrencyAmount
								invoked.PrmCurrencyAmountAdjustment.AlternateTotal3		= LocalFinanceCurrencyAmount.AlternateAmount3.EnteredCurrencyAmount
								invoked.PrmCurrencyAmountAdjustment.ReportTotal1		= LocalFinanceCurrencyAmount.ReportAmount1.EnteredCurrencyAmount
								invoked.PrmCurrencyAmountAdjustment.ReportTotal2		= LocalFinanceCurrencyAmount.ReportAmount2.EnteredCurrencyAmount
								invoked.PrmCurrencyAmountAdjustment.ReportTotal3		= LocalFinanceCurrencyAmount.ReportAmount3.EnteredCurrencyAmount
								invoked.PrmCurrencyAmountAdjustment.ReportTotal4		= LocalFinanceCurrencyAmount.ReportAmount4.EnteredCurrencyAmount
								invoked.PrmCurrencyAmountAdjustment.ReportTotal5		= LocalFinanceCurrencyAmount.ReportAmount5.EnteredCurrencyAmount

					for each CashCodeFundTransferDetail set		
	                    invoke Create CashLedgerGLDistribution	
	                    	invoked.CashManagementGroup 							= CashManagementGroup
	                        invoked.CashLedgerGLDistribution.TransactionIDNumber	= SavedCashLedgerTransaction
	                        invoked.CashCode                       					= CashCode
		                    invoked.CashLedgerSourceRecord							= "CBT"
	                        invoked.CashLedgerGLDistribution.BankTransactionCode	= BankTransactionCode
	                        invoked.TransactionNumber                           	= CashLedgerFundTransferHeader
	                        invoked.TransactionNumberSuffix                     	= 0
	                        invoked.GeneralLedgerSourceCode                     	= "CL"
	                        invoked.Company                                     	= Company
	                        invoked.CashLedgerGLDistribution.DistributionType   	= "E"
	                        invoked.RecordType                                  	= "C"
	                        invoked.Status                                      	= 1  
	                        invoked.GLFinanceCodeBlock                      		= each.TransferAccountStructure
	                        invoked.GLTransactionAmount   							= each.TransferAmount
	                        invoked.DistributionToBankAmount 						= each.TransferAmount
	                        invoked.GLBaseAmount									= each.TransferBaseAmount
	                        invoked.Reference                                   	= "BankFundTransfer"
	                        invoked.Description                                		= Description
	                        invoked.TransactionCurrencyNumberOfDecimals         	= CashCode.BankAccountNumber.Currency.NumberOfDecimals
	                        invoked.ToTransactionCurrencyNumberOfDecimals       	= CashCode.BankAccountNumber.Currency.NumberOfDecimals
	                        invoked.BaseCurrencyNumberOfDecimals                	= Company.OrigCompany.CurrencyNumberOfDecimals
	                        invoked.ToBaseCurrencyNumberOfDecimals              	= Company.OrigCompany.CurrencyNumberOfDecimals
							invoked.TransferHeaderCashCode         					= CashCode
							invoked.BypassStatusEdit								= true
					invoke FinalRelease
				
		FinalRelease is an Instance Action
			default label is untranslatable
			restricted	
			Action Rules
				BudgetEditProcessing 	= BudgetEditProcessing.NotInProcessing                    
				if (CashLedgerMassReleaseResult entered	
				and CashLedgerTransactionError set exists)
					invoke Delete CashLedgerTransactionError set


                Status 					= Status.Released                    
				CompletionMessage 		= ReleaseCompleteMessage
            Exit Rules
				include ReleaseExitRules

		UpdateBudgetResults is an Instance Action	
			default label is untranslatable
			restricted
			Parameters
				ParmSuccess    	is Boolean
			Action Rules
				if (ParmSuccess)
					BudgetEditProcessing = BudgetEditProcessing.Success
					invoke FinalRelease
				else
					BudgetEditProcessing = BudgetEditProcessing.Failure
				
		MassRelease is a Set Action	
			completion message is "<MassReleaseCompleteMessage>"
			run in background		
			Parameters
				PrmCashManagementGroup		is a CashManagementGroup
					default label is "CashManagementGroup"
				PrmCashCode					is a CashCode
					default label is "CashCode"	
				PrmCashCodeGroup			is a CashCodeGroup
					default label is "CashCodeGroup"
				PrmUseSystemDate			is Boolean
					default label is "UseSystemDate"
				PrmEnterDate				is Date
					default label is "EnterDate"
				PrmDays						is Numeric 3
					default label is "Days"
				PrmBankTransactionCode		is a BankTransactionCode
					default label is "BankTransactionCode"
				TransNbrRangeUsingLike
				PrmTransferType             is AlphaUpper size 1
					default label is "TransferType"
		            States
		                MultipleDeposits    value is "1"
		                MultipleWithdrawals value is "2"
		                Both				value is "3"		
			Parameter Rules
				PrmCashManagementGroup
					required
				PrmCashCode
					if (PrmCashCode entered)
						constraint (PrmCashCodeGroup not entered)
							"CannotEnterBothCashCodeAndCashCodeGroup"
				PrmCashCodeGroup
					if (PrmCashCodeGroup entered)
						constraint (PrmCashCode not entered)
							"CannotEnterBothCashCodeAndCashCodeGroup"		
					LocalCashCodeGroup	= PrmCashCodeGroup
				PrmUseSystemDate
					if (PrmUseSystemDate)
						constraint (PrmEnterDate not entered)
							"EnterDateMustBeBlankWhenSystemDateIsSelected"
						LocalDateRange.Begin = current corporate date	
				PrmEnterDate
					if (PrmEnterDate not entered)
						constraint (PrmUseSystemDate)
							"EnterDateRequiredWhenSystemDateIsNotSelected"
						LocalDateRange.Begin = current corporate date
					else
						LocalDateRange.Begin = PrmEnterDate
				PrmDays
					LocalDateRange.End = LocalDateRange.Begin + PrmDays as days
				TransNbrRangeUsingLike
					if (TransNbrRangeUsingLike.FromTransNbr entered)
						constraint (TransNbrRangeUsingLike.ToTransNbr entered)
							"MustDefineBothTransactionNumbersInRange"
					if (TransNbrRangeUsingLike.ToTransNbr entered)
						constraint (TransNbrRangeUsingLike.FromTransNbr entered)
							"MustDefineBothTransactionNumbersInRange"		
				PrmTransferType															
					initial value is 3												
					default to 3

																										
			Local Fields
				RecordCount						is Numeric 10
				LocalDateRange					is a DateRange
				MassReleaseError				is Boolean
				MassReleaseErrorMessage			is Alpha 150
				CashLedgerMassReleaseResultView	is a CashLedgerMassReleaseResult view
				
			Instance Selection
				where (CashManagementGroup	 		= PrmCashManagementGroup
				and	   PostDate						within LocalDateRange
				and    CashLedgerFundTransferHeader	within TransNbrRangeUsingLike
				and    IsUnreleased
				and    !BudgetEditInProgress			    
				and    !CashLedgerMassReleaseResult entered	

				and  ((TransferType.MultipleDeposits
				and   (PrmTransferType.MultipleDeposits
				or	   PrmTransferType.Both))
				or   (TransferType.MultipleWithdrawals
				and   (PrmTransferType.MultipleWithdrawals
				or	   PrmTransferType.Both)))				

				and  ((PrmCashCode					entered	
				and    CashCode						= PrmCashCode)
				or     PrmCashCode					not entered)

				and  ((PrmCashCodeGroup				entered	
				and    CashCodeGroupDetailRel exists)
				or     PrmCashCodeGroup				not entered))

			Sort Order  
				CashManagementGroup
			    CashCode
			    CashLedgerFundTransferHeader
			    
				
			Action Rules
				Empty Set Rules
					invoke Create CashLedgerMassReleaseResult	
						invoked.CashManagementGroup		= PrmCashManagementGroup
						invoked.CashCode				= PrmCashCode
						invoked.CashCodeGroup			= PrmCashCodeGroup
				    	invoked.BankTransactionCode		= PrmBankTransactionCode
				    	invoked.UseSystemDate			= PrmUseSystemDate
				    	invoked.EnterDate				= PrmEnterDate
				    	invoked.Days					= PrmDays
				    	invoked.ReleaseDateRange		= LocalDateRange
				    	invoked.TransNbrRangeUsingLike	= TransNbrRangeUsingLike
				    	invoked.TransferType			= PrmTransferType
						invoked.Status					= 2 
						invoked.ReleaseType				= 5 
					
				Set Rules
					Entrance Rules
						initialize RecordCount
						invoke Create CashLedgerMassReleaseResult	
							assign result to CashLedgerMassReleaseResultView
							invoked.CashManagementGroup		= PrmCashManagementGroup
							invoked.CashCode				= PrmCashCode
							invoked.CashCodeGroup			= PrmCashCodeGroup
					    	invoked.BankTransactionCode		= PrmBankTransactionCode
					    	invoked.UseSystemDate			= PrmUseSystemDate
					    	invoked.EnterDate				= PrmEnterDate
					    	invoked.Days					= PrmDays
					    	invoked.ReleaseDateRange		= LocalDateRange
					    	invoked.TransNbrRangeUsingLike	= TransNbrRangeUsingLike
					    	invoked.TransferType			= PrmTransferType
							invoked.Status					= 1 
							invoked.ReleaseType				= 5 
					Exit Rules
						invoke StatusUpdate CashLedgerMassReleaseResultView.CashLedgerMassReleaseResult	
							
				Instance Rules
					increment RecordCount
					initialize MassReleaseErrorMessage
					MassReleaseError					 = false
					invoke ReleaseFromMassRelease	
						resume on error
							MassReleaseError		= true
							MassReleaseErrorMessage	= error message
					if (MassReleaseError)	
						invoke Create CashLedgerTransactionError 
							fill in fields from this instance
							invoked.CashLedgerFundTransferHeader	= CashLedgerFundTransferHeader
							invoked.BankTransactionCode 			= BankTransactionCode
							invoked.CashLedgerSourceRecord			= "CBT"
							invoked.CashLedgerMassReleaseResult		= CashLedgerMassReleaseResultView.CashLedgerMassReleaseResult
							invoked.ErrorLevel						= 1		
							invoked.ErrorClass						= 3		
							invoked.ErrorType						= 9		
							invoked.ErrorSource						= 8		
							invoked.ErrorDescription				= MassReleaseErrorMessage
					CashLedgerMassReleaseResult	= CashLedgerMassReleaseResultView.CashLedgerMassReleaseResult			
				
		RemoveCashLedgerMassReleaseResult is an Instance Action	
			default label is untranslatable
			restricted
			Entrance Rules					
			Action Rules
				initialize CashLedgerMassReleaseResult 

		RerunMassReleaseForErrors is a Set Action	
			default label is untranslatable
			restricted
			completion message is "<MassReleaseCompleteMessage>"
			run in background		
			Parameters
				PrmCashManagementGroup			is a CashManagementGroup
				PrmCashLedgerMassReleaseResult 	is a CashLedgerMassReleaseResult
			Parameter Rules
				PrmCashManagementGroup
					required
				PrmCashLedgerMassReleaseResult
					required									
			Local Fields
				RecordCount						is Numeric 10
				MassReleaseError				is Boolean
				MassReleaseErrorMessage			is Alpha 150
				
			Instance Selection
				where (CashManagementGroup	 		= PrmCashManagementGroup
				and    IsUnreleased
				and    CashLedgerMassReleaseResult 	= PrmCashLedgerMassReleaseResult)
	
			Sort Order  
			    CashManagementGroup
				CashLedgerMassReleaseResult
				
				
			Action Rules
				Empty Set Rules
					invoke Update PrmCashLedgerMassReleaseResult.CashLedgerMassReleaseResult
						invoked.Status	= 2 
						
				Set Rules
					Entrance Rules
						initialize RecordCount
						invoke Update PrmCashLedgerMassReleaseResult.CashLedgerMassReleaseResult
							invoked.Status	= 1 
						
					Exit Rules
						invoke StatusUpdate PrmCashLedgerMassReleaseResult.CashLedgerMassReleaseResult	
				
				Instance Rules
					increment RecordCount
					initialize MassReleaseErrorMessage
					MassReleaseError				= false
					invoke ReleaseFromMassRelease	
						resume on error
							MassReleaseError		= true
							MassReleaseErrorMessage	= error message
					if (MassReleaseError)	
						invoke Update CashLedgerTransactionError set
							fill in fields from this instance
							invoked.ErrorDescription	= MassReleaseErrorMessage
			
		CashLedgerFundTransferHeaderPurge is a Set Action
			restricted
			Parameters
				PrmCashManagementGroup		     is a CashManagementGroup
					default label is "CashManagementGroup"
				PrmCashCode					     is a CashCode
					default label is "CashCode"	
				PrmCashCodeGroup			     is a CashCodeGroup
					default label is "CashCodeGroup"
				PrmFundTransferHeaderCutOffDate  is Date
			Parameter Rules
				PrmCashCodeGroup
					if (PrmCashCodeGroup entered)
						constraint (PrmCashCode not entered)
							"CannotEnterBothCashCodeAndCashCodeGroup"		
					LocalCashCodeGroup	= PrmCashCodeGroup
			Instance Selection
				where (CashManagementGroup		= PrmCashManagementGroup
				and  ((PrmCashCode				  entered	
				and    CashCode					= PrmCashCode)
				or     PrmCashCode				  not entered)
				and  ((PrmCashCodeGroup			  entered	
				and    CashCodeGroupDetailRel     exists)
				or     PrmCashCodeGroup			  not entered)
				and    PrmFundTransferHeaderCutOffDate entered
				and    TransferDate <= PrmFundTransferHeaderCutOffDate
				and    Status.Released)
				
			Action Rules
				Instance Rules
					invoke Purge CashLedgerFundTransferDetail set 
					invoke Purge
						
		Purge is a Purge Action
			restricted
				
		CompanyPeriodClosePostDateUpdate	is a Set Action	
			default label is untranslatable
			restricted
			Parameters
				PrmCashManagementGroup		is like CashManagementGroup
				PrmNewPostDate				is Date
				PrmPeriodEndDate			is Date
				PrmCashLedgerJobResult		is a CashLedgerJobResult
				PrmCompany					is a GeneralLedgerCompany
				PrmCloseDetail				is a CashLedgerJobResultDetail
			
			Parameter Rules
				PrmCashManagementGroup		required
				PrmNewPostDate				required
				PrmPeriodEndDate			required
				PrmCompany					required
				PrmCloseDetail				required
						
			Sort Order is ByCompany
				
			Instance Selection
				where (CashManagementGroup		= PrmCashManagementGroup
				and    Company.OrigCompany		= PrmCompany

				and    Status.Unreleased
            	and    PostDate <= PrmPeriodEndDate) 
            
			Action Rules
				Empty Set Rules
					if (PrmCloseDetail.CanClose)
						invoke CloseCompany PrmCloseDetail	
					
				Set Rules
					Exit Rules
						LocalCashManagementGroup = PrmCashManagementGroup
						LocalCashLedgerJobResult = PrmCashLedgerJobResult
						LocalCompany = PrmCompany
						invoke Delete UnreleasedBankFundTransfersErrorRel
						
						if (PrmCloseDetail.CanClose)
							invoke CloseCompany PrmCloseDetail
			        	
				Instance Rules
					PostDate	= PrmNewPostDate
			
