CashRequirementsResult is a BusinessClass
	owned by ap
	prefix is CRR
	Ontology
		symbolic key is CashRequirementsResult
		
	Persistent Fields
		CashRequirementsTemplate												
		RunTime				is TimeStamp
		Status				is Numeric 1
			States
				Created				value is 1
				Selected 			value is 2
				Processing 			value is 3
				Completed 			value is 4
				Historical 			value is 5
				Incomplete			value is 6

		BackgroundGroup				is AlphaUpper up to 60
		APBackgroundGroupAsyncId	is an AsyncActionRequest
			delete ignored
		CBBackgroundGroupAsyncId	is an AsyncActionRequest
			delete ignored
		CRBackgroundGroupAsyncId	is an AsyncActionRequest
			delete ignored

		ManuallyChanged				is Boolean
			restricted
		NumberOfVendorDeletes		is Numeric size 2

		ReportDistributionGroup
		JobType						is Numeric 2
			States
				PaymentClose				value is 1
				PerformCashRequirements		value is 2
		APJournalizeGroup			is like JournalizeGroup
		CBJournalizeGroup			is like JournalizeGroup
		

        ProcessGroup         is a PayablesProcessGroup
        AddendaOption        is AlphaUpper size 1
            States
                Yes value is "Y"
                No  value is "N"
        PayThroughDate       is Date
        DiscountOption       is AlphaUpper size 1
            States
                Yes value is "Y"
                No  value is "N"
        PaymentDate             is Date
        ReportSequence          is AlphaUpper size 1
            States
                VendorNumber value is "N"
                SearchName   value is "S"
        ProcessFlag             is Numeric size 1
            States
                APPayments  value is 0
                    default label is "PayablesPayments"
                CBPayments  value is 1
                    default label is "CashLedgerPayments"
                BothAPAndCB value is 2
                    default label is "BothPayablesAndCashLedgerPayments"
        EditPaymentCode         is a BankTransactionCode
        Comment                 is Alpha size 80
        IncludeVoucherNumber    is AlphaUpper size 1
       		States
        		Yes value is "Y"
                No  value is "N"

        CashCode
        CashCodeGroup
        OverrideCashCode        is a CashCode
        
        Company                 is a PayablesCompany
        	disable surrogates
        ProcessLevel            is a PayablesProcessLevel
        PaymentCode             is a BankTransactionCode
        MaxCashOutlay           is Numeric size 16
        InvoiceGroup            is a PayablesInvoiceGroup    
        PayImmediatelyOnly      is AlphaUpper size 1
            States
                Yes value is "Y"
                No  value is "N"
        InvoiceCurrency         is a Currency
        CurrencyOption          is AlphaUpper size 1
            States
                Include value is "I"
                Exclude value is "E"
		OverridePaymentRate		 is a CurrencyExchangeRate		
        VendorClasses            is a AP150VenClassArray
		Vendor
			protected		
		Vendors					is a AP146VendorArray		
        SpecialCreditHandling	is AlphaUpper size 1
        	States
        		Yes	value is "Y"
        		No  value is "N"
        SortOption1              is AlphaUpper size 1
            States
                VendorName         value is "N"
                VendorNumber       value is "V"
                VendorClass        value is "C"
                PostalCode         value is "P"
                InvoiceGroup       value is "I"
                CounterSignature   value is "L"
                PaymentAmount      value is "A"
                Priority           value is "R"
                Enclosure          value is "E"
                OverflowRemittance value is "S"
        SortOption2              is AlphaUpper size 1
            States
                VendorName               value is "N"
                VendorNumber             value is "V"
                VendorClass              value is "C"
                PostalCode               value is "P"
                InvoiceGroup             value is "I"
                PaymentAmountWithCounterSignature    value is "L"
                PaymentAmountWithoutCounterSignature value is "A"
                Priority                 value is "R"
                Enclosure                value is "E"
                OverflowRemittance       value is "S"
        SortOption3              is AlphaUpper size 1
            States
                VendorName               value is "N"
                VendorNumber             value is "V"
                VendorClass              value is "C"
                PostalCode               value is "P"
                InvoiceGroup             value is "I"
                PaymentAmountWithCounterSignature    value is "L"
                PaymentAmountWithoutCounterSignature value is "A"
                Priority                 value is "R"
                Enclosure                value is "E"
                OverflowRemittance       value is "S"
        SignOver                is Numeric size 16
        	default label is "AmountLimit"
        DisplaySearchName		is Boolean			
		PaymentCycleStarted 	is Boolean			
		CashPaymentSortOption1              is Numeric 2                
            States
                ReferenceNumber             value is 1
                Description                 value is 2
                PaymentAmount               value is 3
                PayeeName                   value is 4
                PostalCode                  value is 5
                FirstPartyReference         value is 6
                SecondPartyReference        value is 7              
                TransactionData1            value is 8
                TransactionData2            value is 9
                TransactionData3            value is 10
                TransactionData4            value is 11
        CashPaymentSortOption2              is Numeric 3                
            States
                ReferenceNumber             value is 1
                Description                 value is 2
                PaymentAmount               value is 3
                PayeeName                   value is 4
                PostalCode                  value is 5
                FirstPartyReference         value is 6
                SecondPartyReference        value is 7              
                TransactionData1            value is 8
                TransactionData2            value is 9
                TransactionData3            value is 10
                TransactionData4            value is 11
        CashPaymentSortOption3              is Numeric 4                
            States
                ReferenceNumber             value is 1
                Description                 value is 2
                PaymentAmount               value is 3
                PayeeName                   value is 4
                PostalCode                  value is 5
                FirstPartyReference         value is 6
                SecondPartyReference        value is 7              
                TransactionData1            value is 8
                TransactionData2            value is 9
                TransactionData3            value is 10
                TransactionData4            value is 11 
        IncludeCommentOnCashLedgerPayments  is Boolean




	Field Rules
		

        RunTime
            default to current timestamp 

		Status
			initial value is Status.Created
			default to Status.Created


		VendorGroup
			required
			if (VendorGroup changed)													
				initialize CashRequirementsTemplate

		PayGroup
			required
			constraint (PayGroup.Active)
				"PayGroupIsNotActive"
			if (PayGroup changed)														
				initialize CashRequirementsTemplate									
				
		CashRequirementsTemplate														
			initial value is first CashRequirementsTemplateRel.CashRequirementsTemplate	
			default to first CashRequirementsTemplateRel.CashRequirementsTemplate		
			if (CashRequirementsTemplate changed)										
				initialize ReportDistributionGroup
				initialize AddendaOption 
				initialize PaymentDate
				initialize PayThroughDate
				initialize DiscountOption 
				initialize ReportSequence          
				initialize ProcessFlag             
				initialize EditPaymentCode
				initialize Comment                 
				initialize IncludeVoucherNumber    
				initialize CashCode
				initialize CashCodeGroup
				initialize OverrideCashCode        
				initialize Company                 
				initialize ProcessLevel
				initialize PaymentCode
				initialize MaxCashOutlay
				initialize InvoiceGroup
				initialize PayImmediatelyOnly                                                      
				initialize InvoiceCurrency
				initialize CurrencyOption          
				initialize OverridePaymentRate      
				initialize VendorClasses            
				initialize Vendor
				initialize Vendors
				initialize SpecialCreditHandling
				initialize SortOption1              
				initialize SortOption2              
				initialize SortOption3
				initialize SignOver
				initialize DisplaySearchName
				initialize IncludeCommentOnCashLedgerPayments
				
		ProcessGroup
			initial value is CashRequirementsTemplate.PayablesProcessGroup			
			cannot be changed
			
		Company
			initial value is CashRequirementsTemplate.Company						
			if (ProcessLevel entered)
				required
					"CompanyRequiredWhenProcessLevelEntered"
			if (Company entered)
				constraint (PayGroupCompanyRelationshipRel exists)
					"Company<Company>IsNotAssignedToPayGroup<PayGroup>"
		
		ProcessLevel
			initial value is CashRequirementsTemplate.ProcessLevel					
			if (ProcessLevel entered)
				constraint (PayGroupProcessLevelRelationshipRel exists)
					"ProcessLevel<ProcessLevel>IsNotAssignedToPayGroup<PayGroup>"
		
		PaymentDate
			initial value is CashRequirementsTemplate.DerivedPaymentDate			
			default to CashRequirementsTemplate.DerivedPaymentDate					
			required


		
		PayThroughDate
			initial value is CashRequirementsTemplate.DerivedPayThroughDate			
			default to CashRequirementsTemplate.DerivedPayThroughDate				
			required
			
		EditPaymentCode
			initial value is CashRequirementsTemplate.EditPaymentCode				
			if (EditPaymentCode entered)
				constraint (AddendaOption.Yes)
					"EnforceAddendaRecordLimitsMustBeYes"
				constraint (EditPaymentCode.PaymentOutputOption.ElectronicFile)
					"EditPaymentCodeMustHaveAnOutputOptionOfElectronicFile"

		PaymentCode
			initial value is CashRequirementsTemplate.PaymentCode					
			if (PaymentCode entered)
				if (!PaymentCode.BankTransactionType.CashPayment
				or  !PaymentCode.TransactionOrigin.Payable)
					constraint (false)
						"PaymentCode<PaymentCode>IsNotCreatedByPayablesOrIsNotACashPayment"
		
		InvoiceCurrency
			initial value is CashRequirementsTemplate.InvoiceCurrency				
			if (CurrencyOption.Exclude)
				required
		
		OverridePaymentRate
			initial value is CashRequirementsTemplate.OverridePaymentRate			
			constraint (InvoiceCurrency entered)
				"InvoiceCurrencyRequiredForOverridePaymentRate"
			constraint (CurrencyOption.Include)
				"CurrencyOptionMustBeSetToIncludeForOverridePaymentRate"
			constraint (CashCode entered)
				"CashCodeRequiredForOverridePaymentRate"
			constraint (CashCode.Currency != InvoiceCurrency)
				"CannotOverrideRateBetweenInvoiceAndCashCodeWithSameCurrency"

		Vendor
			initial value is CashRequirementsTemplate.Vendor						
			if (VendorClasses.VenClass[1] entered
			or  VendorClasses.VenClass[2] entered
			or  VendorClasses.VenClass[3] entered
			or  VendorClasses.VenClass[4] entered
			or  VendorClasses.VenClass[5] entered
			or  VendorClasses.VenClass[6] entered
			or  VendorClasses.VenClass[7] entered
			or  VendorClasses.VenClass[8] entered
			or  VendorClasses.VenClass[9] entered)
				cannot be entered
					"CannotEnterBothVendorAndVendorClass"

			if (ProcessGroup entered)
				cannot be entered
					"CannotEnterBothVendorAndProcessGroup"

			if (VendorEntered entered)												
				cannot be entered
					"CannotEnterVendor"

		Vendors																		
			initial value is CashRequirementsTemplate.Vendors						
			if (VendorClasses.VenClass[1] entered
			or  VendorClasses.VenClass[2] entered
			or  VendorClasses.VenClass[3] entered
			or  VendorClasses.VenClass[4] entered
			or  VendorClasses.VenClass[5] entered
			or  VendorClasses.VenClass[6] entered
			or  VendorClasses.VenClass[7] entered
			or  VendorClasses.VenClass[8] entered
			or  VendorClasses.VenClass[9] entered)
				cannot be entered
					"CannotEnterBothVendorAndVendorClass"

			if (ProcessGroup entered)
				cannot be entered
					"CannotEnterBothVendorAndProcessGroup"

		SortOption1
			initial value is CashRequirementsTemplate.SortOption1					
			if (SortOption2 entered)
				required
					"MustSelectConsecutiveSortOptions"
			
		SortOption2
			initial value is CashRequirementsTemplate.SortOption2					
			if (SortOption3 entered)
				required
					"MustSelectConsecutiveSortOptions"

		SortOption3
			initial value is CashRequirementsTemplate.SortOption3					

		CashPaymentSortOption1
			initial value is CashRequirementsTemplate.CashPaymentSortOption1		
			if (CashPaymentSortOption2 entered)
				required
					"MustSelectConsecutiveSortOptions"
			
		CashPaymentSortOption2
			initial value is CashRequirementsTemplate.CashPaymentSortOption2		
			if (CashPaymentSortOption3 entered)
				required
					"MustSelectConsecutiveSortOptions"

		CashPaymentSortOption3
			initial value is CashRequirementsTemplate.CashPaymentSortOption3		
		
		SignOver
			initial value is CashRequirementsTemplate.SignOver						
			if (SortOption1.CounterSignature
			or  SortOption2.PaymentAmountWithCounterSignature
			or  SortOption3.PaymentAmountWithCounterSignature)
				required
					"AmountLimitRequiredWithCounterSignatureSort"
			if (SignOver entered)
				constraint (CounterSignatureUsed)
					"CounterSignatureSortRequiredWhenAmountLimitEntered"

		AddendaOption
			initial value is first CashRequirementsTemplate.AddendaOption			
			default to AddendaOption.No
		
		DiscountOption
			initial value is first CashRequirementsTemplate.DiscountOption			
			default to DiscountOption.Yes  
		
		ReportSequence
			initial value is first CashRequirementsTemplate.ReportSequence			
			default to ReportSequence.VendorNumber
		
		ProcessFlag
			initial value is first CashRequirementsTemplate.ProcessFlag				
			default to ProcessFlag.APPayments
		
		PayImmediatelyOnly
			initial value is first CashRequirementsTemplate.PayImmediatelyOnly		
			default to PayImmediatelyOnly.No
		
		IncludeVoucherNumber
			initial value is first CashRequirementsTemplate.IncludeVoucherNumber	
			default to IncludeVoucherNumber.No
		
		CurrencyOption
			initial value is first CashRequirementsTemplate.CurrencyOption			
			default to CurrencyOption.Include
		
		SpecialCreditHandling
			initial value is first CashRequirementsTemplate.SpecialCreditHandling	
			default to SpecialCreditHandling.No

		CashCode
			initial value is CashRequirementsTemplate.CashCode						
			if (CashCode entered)
				if (CashCode.DefaultPostCompany	entered)
					LocalCompany	= CashCode.DefaultPostCompany
				else
					LocalCompany	= PayGroup.PostCompany
				LocalCashCode	= CashCode
				constraint (CompanyCashCodeRel exists)
					"CompanyCashCodeDoesNotExistForCompany<LocalCompany>AndCashCode<LocalCashCode>"
		
		OverrideCashCode
			initial value is CashRequirementsTemplate.OverrideCashCode				
			if (OverrideCashCode entered)
				constraint (!VendorGroup.BusinessGroup.FinanceEnterpriseGroup.FundAccounting)	
					"OverrideCashCodeNotAllowedWithFundAccounting"
				constraint (OverrideCashCode.Active)
					"OverrideCashCodeIsNotActive"
				if (OverrideCashCode.DefaultPostCompany	entered)
					LocalCompany	= OverrideCashCode.DefaultPostCompany
				else
					LocalCompany	= PayGroup.PostCompany
				LocalCashCode	= OverrideCashCode
				constraint (CompanyCashCodeRel exists)
					"CompanyOverrideCashCodeDoesNotExistForCompany<LocalCompany>AndCashCode<LocalCashCode>"
		
		CashCodeGroup
			initial value is CashRequirementsTemplate.CashCodeGroup					
			constraint (CashCodeGroup.HasCashCodeGroupDetails)
				"CashCodeGroup<CashCodeGroup>ContainsNoCashCodes"

			if  (PaymentCode entered
			and  ProcessGroup entered
			and  ProcessGroup != "NONE")
				for each CashCodeGroup.CashCodeGroupDetailsRel
					initialize ValidateCashPaymentFormat
					ValidateCashPaymentFormat.VendorGroup			= VendorGroup
					ValidateCashPaymentFormat.CashCode				= each.CashCode
					ValidateCashPaymentFormat.BankTransactionCode 	= PaymentCode
					ValidateCashPaymentFormat.PayablesProcessGroup	= ProcessGroup
					LocalBoolean = ValidateCashPaymentFormat.PerformValidateCashPaymentFormat
					constraint (ValidateCashPaymentFormat.OutputErrorNumber not entered)
						"<ValidateCashPaymentFormat.OutputErrorMessage>"
			
			for each CashCodeGroup.CashCodeGroupDetailsRel
				if (each.CashCode.DefaultPostCompany	entered)
					LocalCompany	= each.CashCode.DefaultPostCompany
				else
					LocalCompany	= PayGroup.PostCompany
				LocalCashCode	= each.CashCode
				constraint (CompanyCashCodeRel exists)
					"CompanyCashCodeDoesNotExistForCompany<LocalCompany>AndCashCode<LocalCashCode>"

		ReportDistributionGroup														
			initial value is CashRequirementsTemplate.ReportDistributionGroup		
		Comment                 													
			initial value is CashRequirementsTemplate.Comment                 
		MaxCashOutlay                           									
			initial value is CashRequirementsTemplate.MaxCashOutlay                            
		InvoiceGroup                                        						
			initial value is CashRequirementsTemplate.InvoiceGroup                                        
	    VendorClasses                                               				
			initial value is CashRequirementsTemplate.VendorClasses                                                    
		DisplaySearchName                                                 			
			initial value is CashRequirementsTemplate.DisplaySearchName 
		IncludeCommentOnCashLedgerPayments
			initial value is CashRequirementsTemplate.IncludeCommentOnCashLedgerPayments

	Relations
		CashRequirementsTemplateRel													
			one-to-many relation to CashRequirementsTemplate
			Field Mapping uses symbolic key
				related.VendorGroup 				= VendorGroup
				related.PayGroup					= PayGroup
				related.PayablesProcessGroup		= ProcessGroup
			Instance Selection
				where (related.DefaultTemplate)		

		SelectedPayablesInvoicePaymentRel
			one-to-many relation to PayablesInvoicePayment
			Field Mapping uses ByCashRequirementsReport
				related.VendorGroup 				= VendorGroup
				related.PayGroup					= PayGroup
				related.CashRequirementsResult		= CashRequirementsResult
			Instance Selection
				where (!related.IsOnHold)
				
		CompletedPayablesInvoicePaymentRel
			one-to-many relation to PayablesInvoicePayment
			Field Mapping uses ByCashRequirementsReport
				related.VendorGroup 				= VendorGroup
				related.PayGroup					= PayGroup
				related.CashRequirementsResult		= CashRequirementsResult
			Instance Selection
				where (!related.IsOnHold
				and   (related.Status.SelectedForPayment
				or     related.Status.SystemGeneratedPayment
				or     related.Status.Historical))
				
		SelectedPayablesInvoicePaymentOnHoldRel
			one-to-many relation to PayablesInvoicePayment
			Field Mapping uses ByCashRequirementsReport
				related.VendorGroup 				= VendorGroup
				related.PayGroup					= PayGroup
				related.CashRequirementsResult		= CashRequirementsResult
			Instance Selection
				where (related.IsOnHold)

		SelectedPayablesInvoicePaymentErrorRel
			one-to-many relation to PayablesInvoicePayment
			Field Mapping uses ByCashRequirementsReport
				related.VendorGroup 				= VendorGroup
				related.PayGroup					= PayGroup
				related.CashRequirementsResult		= CashRequirementsResult
			Instance Selection
				where (related.Status.Released
				and    related.IsNotOnHold)
						
		PayablesInvoicePaymentRel
			one-to-many relation to PayablesInvoicePayment
			Field Mapping uses ByCashRequirementsReport
				related.VendorGroup 				= VendorGroup
				related.PayGroup					= PayGroup
				related.CashRequirementsResult		= CashRequirementsResult
				
		AvailablePayablesInvoicePaymentRel
			one-to-many relation to PayablesInvoicePayment
			Field Mapping uses Set2
				related.PayGroup					= PayGroup
				related.Status						= 1
			Instance Selection
				where (related.Company.VendorGroup			= VendorGroup
				and    related.CashRequirementsResult		= blank
				and    related.CancelSequence				= blank
				and    related.BankTransactionCodeRel.BankTransactionType.CashPayment			
				and   (related.BankTransactionCodeRel.PaymentOutputOption.PrintedDocument
				or     related.BankTransactionCodeRel.PaymentOutputOption.ElectronicFile
				or     related.BankTransactionCodeRel.PaymentOutputOption.WireTransfer
				or     related.BankTransactionCodeRel.PaymentOutputOption.Swift)			
				and  ((ProcessGroup entered		
				and    related.ProcessGroup					= ProcessGroup)
				or     ProcessGroup !entered)
				and  ((CashCode entered			
				and    related.CashCode						= CashCode)
				or     CashCode !entered)
				and  ((Company entered			
				and    related.Company						= Company)
				or     Company !entered)
				and  ((PaymentCode entered		
				and    related.BankTransactionCode			= PaymentCode)
				or     PaymentCode !entered)
				and  ((ProcessLevel entered		
				and    related.ProcessLevel					= ProcessLevel)
				or     ProcessLevel !entered))

		AvailableCashLedgerPaymentRel
			one-to-many relation to CashLedgerPayment
			Field Mapping uses Set5
				related.CashManagementGroup					= VendorGroup.BusinessGroup.FinanceEnterpriseGroup
				related.PayablesData.PayGroup				= PayGroup
			Instance Selection
				where (related.Status.Released
				and    related.CashRequirementsResult					= blank
				and    related.PayablesData.PayablesCompany.VendorGroup	= VendorGroup
				and    related.TemporaryHold.RejectedByEngine			= false
				and    related.CashLedgerPayment.BankTransactionCode.BankTransactionType.CashPayment
				and   (related.CashLedgerPayment.BankTransactionCode.PaymentOutputOption.PrintedDocument
				or     related.CashLedgerPayment.BankTransactionCode.PaymentOutputOption.ElectronicFile
				or     related.CashLedgerPayment.BankTransactionCode.PaymentOutputOption.WireTransfer)
				and   !related.PayablesData.Vendor.OnHold
				and  ((ProcessGroup entered		
				and    related.PayablesProcessGroup						= ProcessGroup)
				or     ProcessGroup !entered)
				and  ((CashCode entered			
				and    related.CashCode									= CashCode)
				or     CashCode !entered)
				and  ((Company entered			
				and    related.PayablesData.PayablesCompany				= Company)
				or     Company !entered)
				and  ((PaymentCode entered		
				and    related.CashLedgerPayment.BankTransactionCode	= PaymentCode)
				or     PaymentCode !entered)
				and  ((ProcessLevel entered		
				and    related.ProcessLevel								= ProcessLevel)
				or     ProcessLevel !entered))

		CashLedgerPayablesPaymentRel
			one-to-many relation to CashLedgerPayablesPayment
			Field Mapping uses ByCashRequirementsResult
				related.VendorGroup 				= VendorGroup
				related.PayGroup					= PayGroup
				related.CashRequirementsResult		= CashRequirementsResult

		CashLedgerPayablesPayment2Rel		
			one-to-many relation to CashLedgerPayablesPayment
			Field Mapping uses ByCashRequirementsResult
				related.VendorGroup 				= VendorGroup
				related.PayGroup					= PayGroup
				related.CashRequirementsResult		= CashRequirementsResult
			Instance Selection
				where (related.CashCode = LocalCashCode)

		SelectedPaymentsWithInactiveCashCodeRel		
			one-to-many relation to CashLedgerPayablesPayment
			Field Mapping uses ByCashRequirementsResult
				related.VendorGroup 				= VendorGroup
				related.PayGroup					= PayGroup
				related.CashRequirementsResult		= CashRequirementsResult
			Instance Selection
				where (!related.CashCode.Active)

		PaidCashLedgerPayablesPaymentRel
			one-to-many relation to CashLedgerPayablesPayment
			Field Mapping uses ByCashRequirementsResult
				related.VendorGroup 				= VendorGroup
				related.PayGroup					= PayGroup
				related.CashRequirementsResult		= CashRequirementsResult
			Instance Selection
				where (related.TransactionNumber entered)
		
		CashLedgerPaymentRel
			one-to-many relation to CashLedgerPayment
			Field Mapping uses ByCashRequirementsResult
				related.PayablesData.PayGroup		= PayGroup
				related.CashRequirementsResult		= CashRequirementsResult
			Instance Selection
				where (related.PayablesData.PayablesCompany.VendorGroup	= VendorGroup)

		LocalCashPaymentFormatRel		
			one-to-one relation to CashPaymentFormat
			Field Mapping uses symbolic key
				related.CashManagementGroup						= LocalCashCode.CashManagementGroup	
				related.CashCode								= LocalCashCode
				related.CashPaymentFormat.BankTransactionCode	= LocalBankTransactionCode
				related.CashPaymentFormat.PayablesProcessGroup	= ProcessGroup

		LocalPaymentCreationDefaultsRel											
			one-to-one relation to PaymentCreationDefaults
			Field Mapping uses symbolic key
				related.VendorGroup								= VendorGroup
				related.PayGroup								= PayGroup	
				related.PayablesProcessGroup					= ProcessGroup
				related.BankTransactionCode						= LocalBankTransactionCode
				related.CashCode								= LocalCashCode
				related.CashCodeGroup							= CashCodeGroup
				
		CashLedgerPayablesPaymentBankTransactionCodeRel							
			one-to-many relation to CashLedgerPayablesPayment
			Field Mapping uses ByCashRequirementsResultBankTransactionCode
				related.VendorGroup 				= VendorGroup
				related.PayGroup					= PayGroup
				related.CashRequirementsResult		= CashRequirementsResult

		PayablesElectronicTransferIDRel		
			one-to-one relation to PayablesElectronicTransferID
			Field Mapping uses symbolic key
				related.VendorGroup			= VendorGroup
				related.PayGroup			= PayGroup
				related.BankTransactionCode	= LocalBankTransactionCode

        PayGroupCompanyRelationshipRel
            one-to-many relation to PayGroupCompanyRelationship
            Field Mapping uses symbolic key
                related.VendorGroup = VendorGroup
                related.PayGroup 	= PayGroup
                related.Company 	= Company

        PayGroupProcessLevelRelationshipRel
            one-to-one relation to PayGroupCompanyRelationship
            Field Mapping uses symbolic key
                related.VendorGroup 	= VendorGroup
                related.PayGroup 		= PayGroup
                related.Company 		= Company
                related.ProcessLevel	= ProcessLevel

		CompanyCashCodeRel
			one-to-one relation to CompanyCashCode
            Field Mapping uses symbolic key
                related.Company 		= LocalCompany
                related.CashCode		= LocalCashCode

		APBackgroundGroupNonFinishedTriggersRel
			one-to-many relation to AsyncActionRequest
			Field Mapping uses ByBackgroundGroup
				related.BackgroundGroup = APBackgroundGroupAsyncId 
			Instance Selection
				where (related.BackgroundGroup entered
				and	   related.NonFinishedTriggersExist)

		CBBackgroundGroupNonFinishedTriggersRel
			one-to-many relation to AsyncActionRequest
			Field Mapping uses ByBackgroundGroup
				related.BackgroundGroup = CBBackgroundGroupAsyncId 
			Instance Selection
				where (related.BackgroundGroup entered
				and	   related.NonFinishedTriggersExist)

		CashRequirementsErrorPIPRel is a CashRequirementsError set
			Instance Selection
				where (related.IsPayablesPayment
				and   !related.IsAlert)

		CashRequirementsErrorCLPRel is a CashRequirementsError set
			Instance Selection
				where (related.IsCashLedgerPayment
				and   !related.IsAlert)
		
		CashRequirementsErrorAlertRel is a CashRequirementsError set
			Instance Selection
				where (related.IsAlert)

		InvoiceGroupPaymentsExistRel
			one-to-many relation to CashRequirementsError
			Field Mapping uses ByErrorNumber
                related.VendorGroup 			= VendorGroup
                related.PayGroup 				= PayGroup
				related.CashRequirementsResult	= CashRequirementsResult
				related.ErrorNumber				= CashRequirementsErrorNumber.InvoiceGroupPaymentsExist
		
		PayablesProcessingMonitorRel	
			one-to-one relation to PayablesProcessingMonitor
			Field Mapping uses symbolic key
				related.VendorGroup									  = VendorGroup
				related.PayablesProcessingMonitor.PayGroup			  = PayGroup		
				related.PayablesProcessingMonitor.RunProgram		  = RunProgram.ElectronicPaymentFileCreation			
				related.PayablesProcessingMonitor.ProcessGroup		  = ProcessGroup
				related.PayablesProcessingMonitor.ProcessLevel		  = blank
				related.PayablesProcessingMonitor.AccountStructure	  = blank						
				related.PayablesProcessingMonitor.RunGroup			  = blank		
				related.PayablesProcessingMonitor.AuthorityCode		  = blank	
				related.PayablesProcessingMonitor.Company			  = blank	   
				related.PayablesProcessingMonitor.BankTransactionCode = LocalBankTransactionCode		

		AllPayablesProcessingMonitorRel	
			one-to-many relation to PayablesProcessingMonitor
			Field Mapping uses symbolic key
				related.VendorGroup										= VendorGroup
			Instance Selection
				where (related.PayablesProcessingMonitor.PayGroup		= PayGroup		
				and    related.PayablesProcessingMonitor.RunProgram		= RunProgram.ElectronicPaymentFileCreation			
				and    related.PayablesProcessingMonitor.ProcessGroup	= ProcessGroup)		

		ClearingFileProcessingMonitorRel
			one-to-one relation to PayablesProcessingMonitor
			Field Mapping uses symbolic key
				related.VendorGroup									  = VendorGroup
				related.PayablesProcessingMonitor.PayGroup			  = PayGroup		
				related.PayablesProcessingMonitor.RunProgram		  = RunProgram.PaymentClearingFileCreation			
				related.PayablesProcessingMonitor.ProcessGroup		  = ProcessGroup
				related.PayablesProcessingMonitor.ProcessLevel		  = blank
				related.PayablesProcessingMonitor.AccountStructure	  = blank						
				related.PayablesProcessingMonitor.RunGroup			  = blank		
				related.PayablesProcessingMonitor.AuthorityCode		  = blank	
				related.PayablesProcessingMonitor.Company			  = blank	   
				related.PayablesProcessingMonitor.BankTransactionCode = LocalBankTransactionCode		

		AllClearingFileProcessingMonitorRel						
			one-to-many relation to PayablesProcessingMonitor
			Field Mapping uses symbolic key
				related.VendorGroup										= VendorGroup
			Instance Selection
				where (related.PayablesProcessingMonitor.PayGroup		= PayGroup		
				and    related.PayablesProcessingMonitor.RunProgram		= RunProgram.PaymentClearingFileCreation			
				and    related.PayablesProcessingMonitor.ProcessGroup	= ProcessGroup)	
		PaymentProcessingMonitorEditRel			
        	one-to-many relation to PayablesProcessingMonitor
            Field Mapping uses symbolic key
                related.VendorGroup                                        = VendorGroup
            Instance Selection
				where	(related.PayablesProcessingMonitor.PayGroup			= PayGroup
				and		related.PayablesProcessingMonitor.ProcessGroup		= ProcessGroup
				and		(related.PayablesProcessingMonitor.RunProgram		= RunProgram.ElectronicPaymentFileCreation
				or		related.PayablesProcessingMonitor.RunProgram		= RunProgram.PaymentClearingFileCreation))

		CashLedgerPayablesPaymentStatusRel
			one-to-many relation to CashLedgerPayablesPayment
			Field Mapping uses Set10
				related.CashManagementGroup 			= LocalFinanceEnterpriseGroup
				related.PayGroup						= LocalPayGroup
				related.Status							= 0
			Instance Selection
				where (related.PayablesProcessGroup		= LocalProcessGroup)

		PayablesJobResultRel
			one-to-one relation to PayablesJobResult
			Field Mapping uses ByVendorGroup
				related.VendorGroup								= LocalVendorGroup
				related.PayGroup								= LocalPayGroup
				related.PayablesJobResult						= LocalPayablesJobResult

		PreviousPayablesJobErrorResultRel
			one-to-many relation to PayablesJobErrorResult
			Field Mapping uses symbolic key
			Instance Selection
				where (related.VendorGroup 						= LocalVendorGroup
				and related.PayablesJobResult.PayGroup			= LocalPayGroup
				and related.PayablesJobResult.ProcessGroup		= LocalProcessGroup)

		GeneralLedgerSystemCodeAPRel
			one-to-one relation to GeneralLedgerSystemCode
			Field Mapping uses symbolic key
				related.FinanceEnterpriseGroup		= LocalFinanceEnterpriseGroup
				related.GeneralLedgerSystemCode		= "AP"

		GeneralLedgerSystemCodeCBRel
			one-to-one relation to GeneralLedgerSystemCode
			Field Mapping uses symbolic key
				related.FinanceEnterpriseGroup		= LocalFinanceEnterpriseGroup
				related.GeneralLedgerSystemCode		= "CB"

		HistoricalPayablesInvoicePaymentRel
			one-to-many relation to PayablesInvoicePayment
			Field Mapping uses ByCashRequirementsReport
				related.VendorGroup 				= VendorGroup
				related.PayGroup					= PayGroup
				related.CashRequirementsResult		= CashRequirementsResult
			Instance Selection
				where (related.Status.Historical)

		HistoricalCashLedgerPaymentRel
			one-to-many relation to CashLedgerPayment
			Field Mapping uses ByCashRequirementsResult
				related.PayablesData.PayGroup		= PayGroup
				related.CashRequirementsResult		= CashRequirementsResult
			Instance Selection
				where (related.PayablesData.PayablesCompany.VendorGroup	= VendorGroup
				and   related.Status.Historical)

	Conditions
		Incomplete
			when (!Status.Completed)

		CounterSignatureUsed
			when (SortOption1.CounterSignature
			or    SortOption2.PaymentAmountWithCounterSignature
			or    SortOption3.PaymentAmountWithCounterSignature)
		
		HasAPNonFinishedTriggers
			restricted
			when (APBackgroundGroupNonFinishedTriggersRel exists)

		HasCBNonFinishedTriggers
			restricted
			when (CBBackgroundGroupNonFinishedTriggersRel exists)

		APPaymentsInvolved
			when (ProcessFlag.APPayments
			or    ProcessFlag.BothAPAndCB)
			
		CBPaymentsInvolved
			when (ProcessFlag.CBPayments
			or    ProcessFlag.BothAPAndCB)
			
		ShowAPPayments
			when (ShowAPPaymentsSelected
			or    ShowAPPaymentsCompleted)

		ShowAPPaymentsSelected
			when (Status.Selected
			and   APPaymentsInvolved
			and   !HasAPNonFinishedTriggers)

		ShowAPPaymentsCompleted
			when (StatusCompletedOrHistorical
			and   APPaymentsInvolved
			and   !HasAPNonFinishedTriggers)

		ShowAPPaymentsOnHold
			when (SelectedPayablesInvoicePaymentOnHoldRel exists
			and  !Status.Created
			and  !Status.Processing)
		
		ShowAlerts
			when (CashRequirementsErrorAlertRel exists
			and  !Status.Created
			and  !Status.Processing)
		
		ErrorsExist		
			when (ShowPayablesPaymentErrors
			or    ShowCashLedgerPaymentErrors)
		
		ShowPayablesPaymentErrors
			when (CashRequirementsErrorPIPRel exists
			and  !Status.Created
			and  !Status.Processing)
		
		ShowCashLedgerPaymentErrors
			when (CashRequirementsErrorCLPRel exists
			and  !Status.Created
			and  !Status.Processing)
		
		ShowAPPaymentErrors
			when (SelectedPayablesInvoicePaymentErrorRel exists
			and   Status.Completed)
		
		ShowCBPayments
			when (!Status.Created
			and   !Status.Processing
			and   CBPaymentsInvolved
			and   !HasCBNonFinishedTriggers)

		ShowPayments
			when (StatusCompletedOrHistorical
			and   NoTriggersExist)

		ShowInvoicePaymentsAvailable		
			when ((Status.Created
			or     Status.Selected)
			and    APPaymentsInvolved
			and    AvailablePayablesInvoicePaymentRel exists)

		ShowCashLedgerPaymentsAvailable		
			when ((Status.Created
			or     Status.Selected)
			and    CBPaymentsInvolved
			and    AvailableCashLedgerPaymentRel exists)

		NoTriggersExist
			when (APBackgroundGroupNonFinishedTriggersRel not exists
			and   CBBackgroundGroupNonFinishedTriggersRel not exists)
		
		RecordExists
			restricted
			when (CashRequirementsResult exists)

		CreatedByMe
			when (create stamp.actor = actor)

		IsCurrentCashRequirements
			when (!Status.Historical)
		
		IsHistoricalCashRequirements
			when (Status.Historical)
		
		CanResetParameters
			when (IsNotHistorical
			and	  !PaymentCycleStarted)					

		IsNotHistorical
			when (!IsHistorical)

		IsHistorical
			when (PaidCashLedgerPayablesPaymentRel exists
			or    Status.Historical)

		PaymentsAreSelected
			when (SelectedPayablesInvoicePaymentRel exists
			or    CashLedgerPaymentRel exists)

		StatusCompletedOrHistorical
			when (Status.Completed
			or    IsHistorical)
			
		SecurityGroupAllowsAccess
			restricted
			when (Company !entered
			or   (Company entered
			and   Company.SecurityGroupAllowsAccess))

		VendorEntered		
			restricted
			when (Vendors.Vendor[1] entered
			or    Vendors.Vendor[2] entered
			or    Vendors.Vendor[3] entered
			or    Vendors.Vendor[4] entered
			or    Vendors.Vendor[5] entered
			or    Vendors.Vendor[6] entered
			or    Vendors.Vendor[7] entered
			or    Vendors.Vendor[8] entered
			or    Vendors.Vendor[9] entered)
		
		DisplaySearchNameValid
			restricted
			when (ShowAPPayments
			and   !DisplaySearchName)
			
		DisplayVendorNameValid
			restricted
			when (ShowAPPayments
			and   DisplaySearchName)

		VendorHasNegativeNetPaymentAmount		
			restricted
			when (Status.Selected
			and   MaxCashOutlay entered
			and   any CashRequirementsReport set.TotalNetPaymentAmountIsNegative)

		ProcessGroupEntered		
			restricted
			when (ProcessGroup entered)
		
		DisplayCashRequirementsTemplate			
			restricted
			when (RecordExists
			and   Status.Created)

		NewPaymentCloseConfigEnabled
			restricted
			when (config.RunNewPaymentClose = true)

	Derived Fields
		CashRequirementsResultNumber is a DerivedField
			type is Alpha size 12
			if (CashRequirementsResult entered)
				return CashRequirementsResult
			return blank
		
		NumCashRequirementsReportSet is a DerivedField
			type is Numeric 10	
			restricted
			return instance count of CashRequirementsReport set
			
		NumSelectedPayablesInvoicePaymentRel is a DerivedField
			type is Numeric 10	
			restricted
			return instance count of SelectedPayablesInvoicePaymentRel

		NumCompletedPayablesInvoicePaymentRel is a DerivedField
			type is Numeric 10	
			restricted
			return instance count of CompletedPayablesInvoicePaymentRel

		NumCashLedgerPaymentRel is a DerivedField
			type is Numeric 10	
			restricted
			return instance count of CashLedgerPaymentRel

		NumCashLedgerPayablesPaymentRel is a DerivedField
			type is Numeric 10	
			restricted
			return instance count of CashLedgerPayablesPaymentRel

		NumSelectedPayablesInvoicePaymentOnHoldRel is a DerivedField
			type is Numeric 10	
			restricted
			return instance count of SelectedPayablesInvoicePaymentOnHoldRel

		NumCashRequirementsErrorAlertRel is a DerivedField
			type is Numeric 10	
			restricted
			return instance count of CashRequirementsErrorAlertRel

		NumCashRequirementsErrorPIPRel is a DerivedField
			type is Numeric 10	
			restricted
			return instance count of CashRequirementsErrorPIPRel

		NumCashRequirementsErrorCLPRel is a DerivedField
			type is Numeric 10	
			restricted
			return instance count of CashRequirementsErrorCLPRel

		NumSelectedPayablesInvoicePaymentErrorRel is a DerivedField
			type is Numeric 10	
			restricted
			return instance count of SelectedPayablesInvoicePaymentErrorRel

		CashRequirementResultFormTitle is a DerivedField      
			type is Alpha size up to 200                      
			if (RecordExists)
				return "Cash Requirements Result" + " | " + CashRequirementsResultNumber
			return "Create Cash Requirements"

		ManuallyChangedMessage is a MessageField 
			"ManuallyAdded_/RemovedPayment(s)"

		NegativeNetPaymentAmountMessage is a MessageField		
			"SelectedVendorHasNegativeNetPaymentAmount"

		DerivedReportName is a StringField
			type is Alpha 60
			"CashRequirementsResult"
			"-"
			ConcatenatedKey

		ConcatenatedKey is a StringField
			type is Alpha 27
			VendorGroup
			"-"
			PayGroup
			"-"
			CashRequirementsResult
				
		BackgroundGroupKey is a StringField
			type is Alpha 150
			"CashRequirementsResult-PerformCashRequirements"
			"-"
			ConcatenatedKey
			"-"

		CreateDate is a DerivedField		
			type is Date
			return create stamp date

		CreateInformation is a MessageField		
			"Created:_<CreateDate>_By:_<create stamp.actor.PersonName.PreferredFirstAndLastName>"

		VendorGroupAndPayGroup is a StringField		
			type is Alpha 100
			VendorGroup
			" | PayGroup: "
			PayGroup

		VendorGroupRepresentativeText is a StringField		
			type is Text
			default label is "VendorGroup"
			VendorGroup " - " VendorGroup.Description

		PayGroupRepresentativeText is a StringField		
			type is Text
			default label is "PayGroup"
			PayGroup " - " PayGroup.Name

		ProcessGroupRepresentativeText is a StringField		
			type is Text
			default label is "ProcessGroup"
			ProcessGroup " - " ProcessGroup.Description

	Sets
		ForPayablesProcessingMonitor
			Sort Order
				VendorGroup
				PayGroup
				ProcessGroup
				CashRequirementsResult
		
	Local Fields
		ValidateCashPaymentFormat
		VerifyPayablesMonitor
		LocalCheckAPMonitor			is Alpha 1
		LocalBoolean 				is Boolean
		LocalCompany				is a Company
		LocalCashCode				is a CashCode

		CRBackgroundGroup			is AlphaUpper up to 200
		APBackgroundGroup		 	is AlphaUpper up to 200
		LastBackgroundGroup			is AlphaUpper up to 200
		PerformAPCreditMaxRules		is Boolean
		LocalBankTransactionCode	is a BankTransactionCode	
		LocalPayGroup				is like PayGroup
		LocalVendorGroup			is like VendorGroup
		LocalPayablesJobResult		is like PayablesJobResult
		LocalRunGroup				is Numeric size 3
		LocalBackgroundGroup		is AlphaUpper up to 60
		LocalNextBackgroundGroup	is AlphaUpper up to 60
		LocalSequence				is Numeric size 2
		LocalLastAPJournalizeGroup 	is AlphaUpper size 30
		LocalLastCBJournalizeGroup 	is AlphaUpper size 30
		LocalProcessGroup			is like PayablesProcessGroup
		LocalFinanceEnterpriseGroup	is like FinanceEnterpriseGroup
		VerifyPayGroupAccess
		AccessCode					is Alpha size 1
			States
				Add			value is "A"
				Change		value is "C"
				Delete		value is "D"
		LocalVendorBalanceUpdateGroup	is AlphaUpper up to 60

    Attach Rules
		if (parentcontext.name = "PayablesInvoicePayment")
			constraint (CashRequirementsResult.APPaymentsInvolved)
				"CannotBeAddedToCashRequirementsResult"
		if (parentcontext.name = "CashLedgerPayment")
			constraint (CashRequirementsResult.CBPaymentsInvolved)
				"CannotBeAddedToCashRequirementsResult"

	Rule Blocks
		EditParameters
			if (JobType.PerformCashRequirements)
				if  (PaymentCode entered
				and  CashCode entered)
					if (ProcessGroup entered
					and ProcessGroup != "NONE")
						initialize ValidateCashPaymentFormat
						ValidateCashPaymentFormat.VendorGroup			= VendorGroup
						ValidateCashPaymentFormat.CashCode				= CashCode
						ValidateCashPaymentFormat.BankTransactionCode 	= PaymentCode
						ValidateCashPaymentFormat.PayablesProcessGroup	= ProcessGroup
						LocalBoolean = ValidateCashPaymentFormat.PerformValidateCashPaymentFormat
						constraint (ValidateCashPaymentFormat.OutputErrorNumber not entered)
							"<ValidateCashPaymentFormat.OutputErrorMessage>"

				if  (PaymentCode entered
				and  OverrideCashCode entered)
					if (ProcessGroup entered
					and ProcessGroup != "NONE")
						initialize ValidateCashPaymentFormat
						ValidateCashPaymentFormat.VendorGroup			= VendorGroup
						ValidateCashPaymentFormat.CashCode				= OverrideCashCode
						ValidateCashPaymentFormat.BankTransactionCode 	= PaymentCode
						ValidateCashPaymentFormat.PayablesProcessGroup	= ProcessGroup
						LocalBoolean = ValidateCashPaymentFormat.PerformValidateCashPaymentFormat
						constraint (ValidateCashPaymentFormat.OutputErrorNumber not entered)
							"<ValidateCashPaymentFormat.OutputErrorMessage>"

				if (SortOption1 entered)
					if (SortOption1 = SortOption2
					or  SortOption1 = SortOption3)
						constraint (false)
							"CannotHaveDuplicateSortOptions"
				if (SortOption2 entered)
					if (SortOption1 = SortOption3
					or  SortOption2 = SortOption3)
						constraint (false)
							"CannotHaveDuplicateSortOptions"
				
				if (CashCode entered
				or  CashCodeGroup entered
				or  OverrideCashCode entered)
					if (CashCode entered
					and CashCodeGroup entered)
						constraint (false)
							"CannotEnterCashCodeAndCashCodeGroup"
				
				
		APCreditMaxRules
			if (PerformAPCreditMaxRules)
				APBackgroundGroup 						= BackgroundGroupKey + "APSelect2"
				invoke SelectSeparatePaymentCreditPayments PayablesInvoicePayment in background group(APBackgroundGroup)
					run after background group (LastBackgroundGroup)
					invoked.PrmVendorGroup 				= VendorGroup
					invoked.PrmPayGroup					= PayGroup
					invoked.PrmCashRequirementsResult 	= CashRequirementsResult

				LastBackgroundGroup						= APBackgroundGroup
	
				if (SpecialCreditHandling.No)
					APBackgroundGroup		 				= BackgroundGroupKey + "APSelect3"
					invoke SelectCreditPayments PayablesInvoicePayment in background group(APBackgroundGroup)
						run after background group (LastBackgroundGroup)
						invoked.PrmVendorGroup 				= VendorGroup
						invoked.PrmPayGroup					= PayGroup
						invoked.PrmCashRequirementsResult 	= CashRequirementsResult

						invoked.PrmBackgroundGroup			= APBackgroundGroup
					LastBackgroundGroup			 			= APBackgroundGroup
				else
					APBackgroundGroup		 				= BackgroundGroupKey + "APSelect3"
					invoke SelectCreditPaymentsByCompany PayablesInvoicePayment in background group(APBackgroundGroup)
						run after background group (LastBackgroundGroup)
						invoked.PrmVendorGroup 				= VendorGroup
						invoked.PrmPayGroup					= PayGroup
						invoked.PrmCashRequirementsResult 	= CashRequirementsResult

						invoked.PrmBackgroundGroup			= APBackgroundGroup
					LastBackgroundGroup			 			= APBackgroundGroup
	
				if (MaxCashOutlay entered)
					APBackgroundGroup		 				= BackgroundGroupKey + "APSelect4"
					invoke SelectMaxPayments PayablesInvoicePayment in background group(APBackgroundGroup)
						run after background group (LastBackgroundGroup)
						invoked.PrmVendorGroup 				= VendorGroup
						invoked.PrmPayGroup					= PayGroup
						invoked.PrmCashRequirementsResult 	= CashRequirementsResult
						invoked.PrmMaxCashOutlay			= MaxCashOutlay
						invoked.PrmEditPaymentCode			= EditPaymentCode
					LastBackgroundGroup			 			= APBackgroundGroup


		CRSelectBackgroundGroup
			CRBackgroundGroup		 					= BackgroundGroupKey + "CRSelect"
			LastBackgroundGroup							= CRBackgroundGroup
			
			if (ProcessFlag.CBPayments
			or  ProcessFlag.BothAPAndCB)
				invoke SelectCashLedgerPayments CashLedgerPayment in background group(CRBackgroundGroup)
					invoked.PrmVendorGroup 				= VendorGroup
					invoked.PrmPayGroup					= PayGroup
					invoked.PrmCashRequirementsResult	= CashRequirementsResult

			if (ProcessFlag.APPayments
			or  ProcessFlag.BothAPAndCB)
				invoke SelectPayablesPayments PayablesInvoicePayment in background group(CRBackgroundGroup)
					invoked.PrmVendorGroup 				= VendorGroup
					invoked.PrmPayGroup					= PayGroup
					invoked.PrmCashRequirementsResult 	= CashRequirementsResult

				CRBackgroundGroup		 				= BackgroundGroupKey + "CRSetBankTransactionCode"
				invoke SetBankTransactionCode CashRequirementsProcessing in background group(CRBackgroundGroup)
					run after background group (LastBackgroundGroup)
					invoked.PrmVendorGroup 				= VendorGroup
					invoked.PrmPayGroup					= PayGroup
					invoked.PrmCashRequirementsResult 	= CashRequirementsResult
				LastBackgroundGroup						= CRBackgroundGroup

				include APCreditMaxRules

		UnselectRules
			if (ProcessFlag.APPayments
			or  ProcessFlag.BothAPAndCB)
				invoke UnselectPayablesPayments PayablesInvoicePayment in background group(CRBackgroundGroup)		
					invoked.PrmVendorGroup 				= VendorGroup
					invoked.PrmPayGroup					= PayGroup
					invoked.PrmCashRequirementsResult 	= CashRequirementsResult
					invoked.PrmCancelDate				= PaymentDate		

			if (ProcessFlag.CBPayments
			or  ProcessFlag.BothAPAndCB)
				invoke UnselectCashLedgerPayments CashLedgerPayment in background group(CRBackgroundGroup)			
					invoked.PrmVendorGroup 				= VendorGroup
					invoked.PrmPayGroup					= PayGroup
					invoked.PrmCashRequirementsResult 	= CashRequirementsResult

			invoke DeleteForCashRequirementsResult CashRequirementsReport in background group(CRBackgroundGroup)	
				invoked.PrmVendorGroup 				= VendorGroup
				invoked.PrmPayGroup					= PayGroup
				invoked.PrmCashRequirementsResult 	= CashRequirementsResult

			invoke DeleteForCashRequirementsResult CashRequirementsError in background group(CRBackgroundGroup)		
				invoked.PrmVendorGroup 				= VendorGroup
				invoked.PrmPayGroup					= PayGroup
				invoked.PrmCashRequirementsResult 	= CashRequirementsResult

		ResetRules		
			include UnselectRules
			invoke DeleteScheduledPayments CashLedgerPayablesPayment in background group(CRBackgroundGroup)
				invoked.PrmVendorGroup 				= VendorGroup
				invoked.PrmPayGroup					= PayGroup
				invoked.PrmCashRequirementsResult 	= CashRequirementsResult

		CreateVendorOffsetCreditMemo		
			if (LastBackgroundGroup not entered)
				LastBackgroundGroup					= BackgroundGroupKey + "CRSelect"

			CRBackgroundGroup		 				= BackgroundGroupKey + "CRVendorOffsetCM"
			if (SpecialCreditHandling.Yes)
				invoke CreateVendorOffsetCreditMemoByCompany PayablesInvoicePayment in background group(CRBackgroundGroup)
					run after background group (LastBackgroundGroup)
					invoked.PrmVendorGroup				= VendorGroup
					invoked.PrmPayGroup					= PayGroup
					invoked.PrmCashRequirementsResult	= CashRequirementsResult
					invoked.PrmPaymentDate				= PaymentDate
			else
				invoke CreateVendorOffsetCreditMemoByInvoiceGroup PayablesInvoicePayment in background group(CRBackgroundGroup)
					run after background group (LastBackgroundGroup)
					invoked.PrmVendorGroup				= VendorGroup
					invoked.PrmPayGroup					= PayGroup
					invoked.PrmCashRequirementsResult	= CashRequirementsResult
					invoked.PrmPaymentDate				= PaymentDate
			LastBackgroundGroup						= CRBackgroundGroup

		CRProcessBackgroundGroup
			if (LastBackgroundGroup not entered)
				if (VendorGroup.VendorOffset)		
					LastBackgroundGroup				= BackgroundGroupKey + "CRVendorOffsetCM"
				else
					LastBackgroundGroup				= BackgroundGroupKey + "CRSelect"

			CRBackgroundGroup		 				= BackgroundGroupKey + "CRRecheckErrors2"
			if (ProcessFlag.CBPayments
			or  ProcessFlag.BothAPAndCB)
				invoke RecheckForErrors CashLedgerPayment in background group(CRBackgroundGroup)
					run after background group (LastBackgroundGroup)
					invoked.PrmVendorGroup 				= VendorGroup
					invoked.PrmPayGroup					= PayGroup
					invoked.PrmCashRequirementsResult 	= CashRequirementsResult
			if (ProcessFlag.APPayments
			or  ProcessFlag.BothAPAndCB)
				invoke RecheckForErrors PayablesInvoicePayment in background group(CRBackgroundGroup)
					run after background group (LastBackgroundGroup)
					invoked.PrmVendorGroup 				= VendorGroup
					invoked.PrmPayGroup					= PayGroup
					invoked.PrmCashRequirementsResult 	= CashRequirementsResult
			LastBackgroundGroup						= CRBackgroundGroup

			if (ProcessFlag.CBPayments
			or  ProcessFlag.BothAPAndCB)
				CRBackgroundGroup		 				= BackgroundGroupKey + "CRProcess1"
				invoke ProcessCashLedgerPayments CashLedgerPayment in background group(CRBackgroundGroup)
					run after background group (LastBackgroundGroup)
					invoked.PrmVendorGroup 				= VendorGroup
					invoked.PrmPayGroup					= PayGroup
					invoked.PrmCashRequirementsResult 	= CashRequirementsResult
					invoked.PrmBackgroundGroup			= CBBackgroundGroupAsyncId
				LastBackgroundGroup						= CRBackgroundGroup

			if (ProcessFlag.APPayments
			or  ProcessFlag.BothAPAndCB)



				CRBackgroundGroup		 				= BackgroundGroupKey + "CRProcess2"
				invoke PutVeryLargePaymentsOnHold PayablesInvoicePayment in background group(CRBackgroundGroup)
					run after background group (LastBackgroundGroup)
					invoked.PrmVendorGroup 				= VendorGroup
					invoked.PrmPayGroup					= PayGroup
					invoked.PrmCashRequirementsResult 	= CashRequirementsResult
				LastBackgroundGroup						= CRBackgroundGroup

				CRBackgroundGroup		 					= BackgroundGroupKey + "CRProcess3"
				if (SpecialCreditHandling.Yes)
					invoke ProcessPayablesPaymentsByCompany PayablesInvoicePayment in background group(CRBackgroundGroup)
						run after background group (LastBackgroundGroup)
						invoked.PrmVendorGroup 				= VendorGroup
						invoked.PrmPayGroup					= PayGroup
						invoked.PrmCashRequirementsResult 	= CashRequirementsResult
						invoked.PrmBackgroundGroup			= CRBackgroundGroup
				else
					invoke ProcessPayablesPaymentsByInvoiceGroup PayablesInvoicePayment in background group(CRBackgroundGroup)
						run after background group (LastBackgroundGroup)
						invoked.PrmVendorGroup 				= VendorGroup
						invoked.PrmPayGroup					= PayGroup
						invoked.PrmCashRequirementsResult 	= CashRequirementsResult
						invoked.PrmBackgroundGroup			= CRBackgroundGroup
				LastBackgroundGroup							= CRBackgroundGroup
										
			invoke MakeTransitionToCompleted in background
				run after background group (LastBackgroundGroup)

			if (ReportDistributionGroup entered)
				invoke DistributeResults in background
					run after background group (LastBackgroundGroup)

			invoke EndMonitor in background
				run after background group (LastBackgroundGroup)

		BeginMonitor
			if (JobType.PerformCashRequirements)
				VerifyPayablesMonitor.RunProgram		= RunProgram.CashRequirements
			else
			if (JobType.PaymentClose)
				VerifyPayablesMonitor.RunProgram		= RunProgram.PaymentClosing
			VerifyPayablesMonitor.VendorGroup		= VendorGroup
			VerifyPayablesMonitor.PayGroup			= PayGroup
			VerifyPayablesMonitor.ProcessGroup		= ProcessGroup
			VerifyPayablesMonitor.BatchNumber		= blank
			LocalCheckAPMonitor						= VerifyPayablesMonitor.CallVerifyPayablesMonitor
			constraint (VerifyPayablesMonitor.NoErrors)
				"<VerifyPayablesMonitor.APMonitorProcessingMessage>"

			LocalCheckAPMonitor					= VerifyPayablesMonitor.BeginMonitor

		CancelMonitor
			if (JobType.PerformCashRequirements)
				VerifyPayablesMonitor.RunProgram		= RunProgram.CashRequirements
			else
			if (JobType.PaymentClose)
				VerifyPayablesMonitor.RunProgram		= RunProgram.PaymentClosing
			VerifyPayablesMonitor.VendorGroup		= VendorGroup
			VerifyPayablesMonitor.PayGroup			= PayGroup
			VerifyPayablesMonitor.ProcessGroup		= ProcessGroup
			VerifyPayablesMonitor.BatchNumber		= blank
			LocalCheckAPMonitor						= VerifyPayablesMonitor.CancelMonitor
		
		EndMonitor
			if (JobType.PerformCashRequirements)
				VerifyPayablesMonitor.RunProgram		= RunProgram.CashRequirements
			else
			if (JobType.PaymentClose)
				VerifyPayablesMonitor.RunProgram		= RunProgram.PaymentClosing
			VerifyPayablesMonitor.VendorGroup		= VendorGroup
			VerifyPayablesMonitor.PayGroup			= PayGroup
			VerifyPayablesMonitor.ProcessGroup		= ProcessGroup
			VerifyPayablesMonitor.BatchNumber		= blank
			LocalCheckAPMonitor						= VerifyPayablesMonitor.EndMonitor
		
	Actions
		StartCashRequirements is a Create Action		
			completion message is "StartCashRequirementsCompleted"
			Entrance Rules
				JobType	= 2

			Action Rules
				include EditParameters
				include BeginMonitor

		PerformCashRequirements is a Create Action
			completion message is "PerformCashRequirementsSubmitted"


			Entrance Rules
				JobType	= 2

			Action Rules
				include EditParameters
				include BeginMonitor

				Status = Status.Processing

			Exit Rules

				PerformAPCreditMaxRules = true
				include CRSelectBackgroundGroup

				if (VendorGroup.VendorOffset		
				and APPaymentsInvolved)
					include CreateVendorOffsetCreditMemo

				PerformAPCreditMaxRules = false
				include CRProcessBackgroundGroup

		UnselectRules is an Instance Action
			restricted
			run in background
			Action Rules
				include UnselectRules

		DeleteRules is an Instance Action
			restricted
			run in background
			Action Rules
				invoke DeleteScheduledPayments CashLedgerPayablesPayment in background
					assign async background group id to CBBackgroundGroupAsyncId
					invoked.PrmVendorGroup 				= VendorGroup
					invoked.PrmPayGroup					= PayGroup
					invoked.PrmCashRequirementsResult 	= CashRequirementsResult

		ResetRules is an Instance Action
			restricted
			run in background
			Action Rules
				include UnselectRules
				invoke DeleteScheduledPayments CashLedgerPayablesPayment in background
					assign async background group id to CBBackgroundGroupAsyncId
					invoked.PrmVendorGroup 				= VendorGroup
					invoked.PrmPayGroup					= PayGroup
					invoked.PrmCashRequirementsResult 	= CashRequirementsResult

		MakeTransitionToCreated is an Instance Action
			restricted
			run in background
			Action Rules
				Status = Status.Created
		
		MakeTransitionToSelected is an Instance Action
			restricted
			run in background
			Action Rules
				Status = Status.Selected
		
		MakeTransitionToProcessing is an Instance Action
			restricted
			run in background
			Action Rules
				Status = Status.Processing
		
		MakeTransitionToCompleted is an Instance Action
			restricted
			run in background
			Action Rules
				Status = Status.Completed

		MakeTransitionToHistorical is an Instance Action
			restricted
			run in background
			Action Rules
				Status = Status.Historical

		BeginMonitor is an Instance Action
			restricted
			run in background
			Action Rules
				include BeginMonitor

		EndMonitor is an Instance Action
			restricted
			run in background
			Action Rules
				if (JobType.PaymentClose)
					if (CashRequirementsErrorAlertRel exists)
						Status = Status.Incomplete
					else
						Status = Status.Completed
			Exit Rules
				if (JobType.PaymentClose)
					if (CashRequirementsErrorAlertRel not exists)
						include EndMonitor
				else
					include EndMonitor

		CancelMonitor is an Instance Action
			restricted
			run in background
			Action Rules
				include CancelMonitor

		SetManuallyChanged is an Instance Action
			restricted
			Action Rules
				ManuallyChanged = true

				if (ProcessFlag.APPayments
				and CashLedgerPaymentRel exists)
					ProcessFlag = ProcessFlag.BothAPAndCB
					
				if (ProcessFlag.CBPayments
				and SelectedPayablesInvoicePaymentRel exists)
					ProcessFlag = ProcessFlag.BothAPAndCB

				if (Status = Status.Created)		
					Status = Status.Selected

		IncrementNumberOfVendorDeletes is an Instance Action
			restricted
			Action Rules
				NumberOfVendorDeletes = NumberOfVendorDeletes + 1
				Status = Status.Processing
				ManuallyChanged = true

				if (ProcessFlag.APPayments
				and CashLedgerPaymentRel exists)
					ProcessFlag = ProcessFlag.BothAPAndCB
					
				if (ProcessFlag.CBPayments
				and SelectedPayablesInvoicePaymentRel exists)
					ProcessFlag = ProcessFlag.BothAPAndCB

		DecrementNumberOfVendorDeletes is an Instance Action
			restricted
			Action Rules
				NumberOfVendorDeletes = NumberOfVendorDeletes - 1
				if (NumberOfVendorDeletes = 0)
					invoke MakeTransitionToSelected

		PaymentCycleClose is an Instance Action 
			default label is untranslatable
			restricted
			completion message is "PaymentCloseSubmitted"
			Parameters
				PrmNumberOfThreads					is Numeric size 3
					default label is "NumberOfThreads"
				PrmRunPositivePayFileCreation		is Boolean
					default label is "IncludePositivePayFileCreation"

			Parameter Rules

			Entrance Rules
				JobType = 1

			Action Rules
				LocalPayGroup				= PayGroup
				LocalFinanceEnterpriseGroup	= VendorGroup.FinanceEnterpriseGroup
				if (ProcessGroup entered
				and ProcessGroup != "NONE")
					LocalProcessGroup = ProcessGroup
				else
					LocalProcessGroup = blank
				constraint (CashLedgerPayablesPaymentStatusRel not exists)
					"PaymentsNotProcessedForAllCashCodesSelectedInCashRequirementsResult<CashRequirementsResult>"

				if (CashRequirementsErrorAlertRel not exists)
					include BeginMonitor
			Exit Rules
				LocalBackgroundGroup 		= "PaymentClose" + CashRequirementsResult
				invoke DeleteForCashRequirementsResult CashRequirementsError in background group(LocalBackgroundGroup)
					invoked.PrmVendorGroup 				= VendorGroup
					invoked.PrmPayGroup					= PayGroup
					invoked.PrmCashRequirementsResult 	= CashRequirementsResult

				LocalSequence				+= 1
				LocalNextBackgroundGroup	= LocalBackgroundGroup + LocalSequence
				if (APPaymentsInvolved)
					increment GeneralLedgerSystemCodeAPRel.LastJournalizeGroup
					LocalLastAPJournalizeGroup = GeneralLedgerSystemCodeAPRel.DerivedJournalizeGroup
					while (LocalRunGroup < PrmNumberOfThreads)
						invoke PayablesPaymentClose PayablesInvoicePayment in background group(LocalNextBackgroundGroup)
							run after background group(LocalBackgroundGroup)
							invoked.PrmBackgroundGroup			= LocalNextBackgroundGroup
							invoked.PrmCashRequirementsResult	= CashRequirementsResult
							invoked.PrmVendorGroup				= VendorGroup
							invoked.PrmPayGroup					= PayGroup
							invoked.PrmProcessGroup				= ProcessGroup
							invoked.PrmRunGroup					= LocalRunGroup
							invoked.PrmNumberOfThreads			= PrmNumberOfThreads
							invoked.PrmLastAPJournalizeGroup	= LocalLastAPJournalizeGroup
						LocalRunGroup += 1

					LocalSequence					+= 1
					LocalVendorBalanceUpdateGroup	= LocalNextBackgroundGroup + LocalSequence
					invoke UpdateVendorBalances ConsolidatedPaymentCycleUpdate in background group(LocalVendorBalanceUpdateGroup)
						run after background group(LocalNextBackgroundGroup)
						invoked.PrmVendorGroup = VendorGroup

				if (CBPaymentsInvolved)
					increment GeneralLedgerSystemCodeCBRel.LastJournalizeGroup
					LocalLastCBJournalizeGroup = GeneralLedgerSystemCodeCBRel.DerivedJournalizeGroup
					initialize LocalRunGroup
					while (LocalRunGroup < PrmNumberOfThreads)
						invoke CashLedgerPaymentClose CashLedgerPayment in background group(LocalNextBackgroundGroup)
							run after background group(LocalBackgroundGroup)
							invoked.PrmCashRequirementsResult	= CashRequirementsResult
							invoked.PrmVendorGroup				= VendorGroup
							invoked.PrmPayGroup					= PayGroup
							invoked.PrmProcessGroup				= ProcessGroup
							invoked.PrmRunGroup					= LocalRunGroup
							invoked.PrmNumberOfThreads			= PrmNumberOfThreads
							invoked.PrmLastCBJournalizeGroup	= LocalLastCBJournalizeGroup
						LocalRunGroup += 1

				LocalBackgroundGroup		= LocalNextBackgroundGroup
				LocalSequence 				+= 1
				LocalNextBackgroundGroup	= LocalBackgroundGroup + LocalSequence
				invoke UpdateCashLedger in background group(LocalNextBackgroundGroup)
					run after background group(LocalBackgroundGroup)

				invoke RemoveTemporaryHolds PayablesOnHold in background group(LocalNextBackgroundGroup)
					run after background group(LocalBackgroundGroup)
					invoked.PrmVendorGroup						= VendorGroup
					invoked.PrmPayGroup							= PayGroup
					invoked.PrmProcessGroup						= ProcessGroup

				invoke JournalizeDistributions in background group(LocalNextBackgroundGroup)
					run after background group(LocalBackgroundGroup)
					invoked.PrmJournalizeGroup					= LocalLastAPJournalizeGroup
					invoked.PrmCBJournalizeGroup				= LocalLastCBJournalizeGroup

				if (PrmRunPositivePayFileCreation)
					LocalBackgroundGroup		= LocalNextBackgroundGroup
					LocalSequence 				+= 1
					LocalNextBackgroundGroup	= LocalBackgroundGroup + LocalSequence + "CRPositivePay"
					if (CashCodeGroup entered)
						for each distinct CashLedgerPayablesPayment.BankTransactionCode in CashLedgerPayablesPaymentBankTransactionCodeRel
							LocalBankTransactionCode		= each.CashLedgerPayablesPayment.BankTransactionCode
							if (!LocalBankTransactionCode.PaymentSummarization)
								invoke PositivePayFileCreation PositivePayFileCreation in background group(LocalNextBackgroundGroup)
									run after background group (LocalBackgroundGroup)
									invoked.CashManagementGroup		= VendorGroup.FinanceEnterpriseGroup
									invoked.CcgCashCodeGrp          = CashCodeGroup
									invoked.BankInstCode            = LocalBankTransactionCode
					else
						for each distinct CashCode in CashLedgerPayablesPaymentRel
							LocalCashCode					= each.CashCode
							for each distinct CashLedgerPayablesPayment.BankTransactionCode in CashLedgerPayablesPayment2Rel
								LocalBankTransactionCode	= each.CashLedgerPayablesPayment.BankTransactionCode
								if (!LocalBankTransactionCode.PaymentSummarization)
									invoke PositivePayFileCreation PositivePayFileCreation in background group(LocalNextBackgroundGroup)
										run after background group (LocalBackgroundGroup)
										invoked.CashManagementGroup	= VendorGroup.FinanceEnterpriseGroup
										invoked.CashCode			= LocalCashCode
										invoked.BankInstCode		= LocalBankTransactionCode
				LocalBackgroundGroup		= LocalNextBackgroundGroup
				LocalSequence 				+= 1
				LocalNextBackgroundGroup	= LocalBackgroundGroup + LocalSequence
				invoke EndMonitor in background group(LocalNextBackgroundGroup)
					run after background group (LocalBackgroundGroup)

		Purge is a Purge Action
			restricted

		ClosePaymentCycle is a Set Action 
			valid when (NewPaymentCloseConfigEnabled)
			completion message is "PaymentCloseSubmitted"
			Parameters
				PrmVendorGroup				is a VendorGroup
					default label is "VendorGroup"
				PrmPayGroup					is a PayGroup
					default label is "PayGroup"
				PrmProcessGroup				is a PayablesProcessGroup
					default label is "ProcessGroup"
				PrmNumberOfThreads					is Numeric size 3
					default label is "NumberOfThreads"
				PrmRunPositivePayFileCreation		is Boolean
					default label is "IncludePositivePayFileCreation"

			Parameter Rules
				PrmVendorGroup
					constraint (NewPaymentCloseConfigEnabled)
						"ActionNotValid;NewPaymentCloseConfigurationNotEnabled"
					required

				PrmPayGroup
					required

				PrmNumberOfThreads
					initial value is config.PaymentCloseThreads
					default to 1

			Local Fields
				LocalErrorOccured			is Boolean
				LocalErrorMessage			is Text
				LocalCheckAPMonitorSet		is Alpha 1
				LocalPayablesJobResultView	is a PayablesJobResult view

			Instance Selection
				where (VendorGroup 			= PrmVendorGroup
				and   PayGroup 				= PrmPayGroup
				and   (Status.Completed
				or    (Status.Incomplete
				and   JobType.PaymentClose))
				and   (PrmProcessGroup	not entered
				or    ProcessGroup			= PrmProcessGroup))

			Rule Blocks

			Action Rules
				Empty Set Rules
					LocalPayGroup					= PrmPayGroup
					LocalVendorGroup				= PrmVendorGroup
					LocalProcessGroup				= PrmProcessGroup
					LocalFinanceEnterpriseGroup 	= PrmVendorGroup.FinanceEnterpriseGroup
					if (PrmProcessGroup entered
					and PrmProcessGroup != "NONE")
						LocalProcessGroup = PrmProcessGroup
					else
						LocalProcessGroup = blank

					AccessCode = AccessCode.Change
					if (action type.Create)
						AccessCode = AccessCode.Add
					else
						if (action type.Delete)
							AccessCode = AccessCode.Delete
					
					initialize VerifyPayGroupAccess
					VerifyPayGroupAccess.VendorGroup		= PrmVendorGroup
					VerifyPayGroupAccess.PayGroup 			= PrmPayGroup
					VerifyPayGroupAccess.SystemCode 		= "AP"
					VerifyPayGroupAccess.PayablesUserClass	= PrmPayGroup.PayablesUserClass
					VerifyPayGroupAccess.PayablesUser 		= actor
					VerifyPayGroupAccess.AccessCode 		= AccessCode
					constraint (VerifyPayGroupAccess.PerformVerifyPayGroupAccess)
						"<VerifyPayGroupAccess.OutputErrorMessage>"

					LocalBackgroundGroup		= "PaymentClose"
					if (PreviousPayablesJobErrorResultRel not exists)
						VerifyPayablesMonitor.RunProgram			= RunProgram.PaymentClosing
						VerifyPayablesMonitor.VendorGroup			= PrmVendorGroup
						VerifyPayablesMonitor.PayGroup				= PrmPayGroup
						VerifyPayablesMonitor.ProcessGroup			= PrmProcessGroup
						VerifyPayablesMonitor.BatchNumber			= blank
						LocalCheckAPMonitorSet						= VerifyPayablesMonitor.CallVerifyPayablesMonitor
						constraint (VerifyPayablesMonitor.NoErrors)
							"<VerifyPayablesMonitor.APMonitorProcessingMessage>"
						LocalCheckAPMonitorSet						= VerifyPayablesMonitor.BeginMonitor

					invoke Create PayablesJobResult
						assign result to LocalPayablesJobResultView
						invoked.VendorGroup					= PrmVendorGroup
						invoked.PayGroup					= PrmPayGroup
						invoked.ProcessGroup				= PrmProcessGroup
						invoked.JobType						= 3
						invoked.Status						= 2

					LocalPayablesJobResult		= LocalPayablesJobResultView.PayablesJobResult
					if (CashLedgerPayablesPaymentStatusRel exists)
						LocalErrorOccured = true
						invoke Create PayablesJobErrorResult
							invoked.VendorGroup 				= PrmVendorGroup
							invoked.PayablesJobResult			= LocalPayablesJobResult
							invoked.ErrorMessage				= "Payments not processed for all cash codes"
							invoked.ErrorNumber					= CashRequirementsErrorNumber.PaymentsNotProcessed
							invoked.CashManagementGroup			= PrmVendorGroup.FinanceEnterpriseGroup

					if (!LocalErrorOccured)
						LocalSequence 				+= 1
						LocalBackgroundGroup		= LocalBackgroundGroup + LocalSequence
						if (APPaymentsInvolved)
							increment GeneralLedgerSystemCodeAPRel.LastJournalizeGroup
							LocalLastAPJournalizeGroup = GeneralLedgerSystemCodeAPRel.DerivedJournalizeGroup
							while (LocalRunGroup < PrmNumberOfThreads)
								invoke PayablesPaymentClose PayablesInvoicePayment in background group(LocalBackgroundGroup)
									invoked.PrmPayablesJobResult		= LocalPayablesJobResult
									invoked.PrmVendorGroup				= PrmVendorGroup
									invoked.PrmPayGroup					= PrmPayGroup
									invoked.PrmProcessGroup				= PrmProcessGroup
									invoked.PrmRunGroup					= LocalRunGroup
									invoked.PrmNumberOfThreads			= PrmNumberOfThreads
									invoked.PrmLastAPJournalizeGroup	= LocalLastAPJournalizeGroup
								LocalRunGroup += 1

							LocalSequence					+= 1
							LocalVendorBalanceUpdateGroup	= LocalBackgroundGroup + LocalSequence
							invoke UpdateVendorBalances ConsolidatedPaymentCycleUpdate in background group(LocalVendorBalanceUpdateGroup)
								run after background group(LocalBackgroundGroup)
								invoked.PrmVendorGroup = PrmVendorGroup

						if (CBPaymentsInvolved)
							increment GeneralLedgerSystemCodeCBRel.LastJournalizeGroup
							LocalLastCBJournalizeGroup = GeneralLedgerSystemCodeCBRel.DerivedJournalizeGroup
							initialize LocalRunGroup
							while (LocalRunGroup < PrmNumberOfThreads)
								invoke CashLedgerPaymentClose CashLedgerPayment in background group(LocalBackgroundGroup)
									invoked.PrmPayablesJobResult		= LocalPayablesJobResult
									invoked.PrmVendorGroup				= PrmVendorGroup
									invoked.PrmPayGroup					= PrmPayGroup
									invoked.PrmProcessGroup				= PrmProcessGroup
									invoked.PrmRunGroup					= LocalRunGroup
									invoked.PrmNumberOfThreads			= PrmNumberOfThreads
									invoked.PrmLastCBJournalizeGroup	= LocalLastCBJournalizeGroup
								LocalRunGroup += 1

						LocalSequence 				+= 1
						LocalNextBackgroundGroup	= LocalBackgroundGroup + LocalSequence
						invoke UpdateCashLedger PayablesJobResultRel in background group(LocalNextBackgroundGroup)
							run after background group(LocalBackgroundGroup)

						invoke RemoveTemporaryHolds PayablesOnHold in background group(LocalNextBackgroundGroup)
							run after background group(LocalBackgroundGroup)
							invoked.PrmVendorGroup						= PrmVendorGroup
							invoked.PrmPayGroup							= PrmPayGroup
							invoked.PrmProcessGroup						= PrmProcessGroup

						invoke JournalizeDistributionsForGroup PayablesJobResultRel in background group(LocalNextBackgroundGroup)
							run after background group(LocalBackgroundGroup)
							invoked.PrmBackgroundGroup					= LocalBackgroundGroup
							invoked.PrmJournalizeGroup					= LocalLastAPJournalizeGroup
							invoked.PrmCBJournalizeGroup				= LocalLastCBJournalizeGroup

					LocalBackgroundGroup		= LocalNextBackgroundGroup
					LocalSequence 				+= 1
					LocalNextBackgroundGroup	= LocalBackgroundGroup + LocalSequence
					invoke UpdateStatusOnResult PayablesJobResultRel in background group(LocalNextBackgroundGroup)
						run after background group(LocalBackgroundGroup)

					LocalBackgroundGroup		= LocalNextBackgroundGroup
					LocalSequence 				+= 1
					LocalNextBackgroundGroup	= LocalBackgroundGroup + LocalSequence
					invoke PurgePayablesJobResults PayablesJobResult in background group(LocalBackgroundGroup)
						invoked.PrmVendorGroup				= PrmVendorGroup
						invoked.PrmPayGroup					= PrmPayGroup
						invoked.PrmProcessGroup				= PrmProcessGroup
						invoked.PrmPayablesJobResult		= LocalPayablesJobResult

				Set Rules
					Exit Rules

				Instance Rules
					initialize LocalErrorOccured
					invoke PaymentCycleClose
						resume on error
							LocalErrorOccured = true
							LocalErrorMessage = error message
						invoked.PrmNumberOfThreads 					= PrmNumberOfThreads
						invoked.PrmRunPositivePayFileCreation 		= PrmRunPositivePayFileCreation

					if (LocalErrorOccured)
						invoke Create CashRequirementsError
							invoked.VendorGroup 				= PrmVendorGroup
							invoked.PayGroup					= PrmPayGroup
							invoked.CashRequirementsResult		= CashRequirementsResult
							invoked.ErrorMessage				= LocalErrorMessage
							invoked.ErrorNumber					= CashRequirementsErrorNumber.PaymentsNotProcessed
							invoked.CashManagementGroup			= PrmVendorGroup.FinanceEnterpriseGroup
							invoked.BankTransactionCode			= PaymentCode
							invoked.CashCode					= CashCode

		PurgeHistoricalCashRequirementsResults is a Set Action
			confirmation required
				"AllRecordsWithinEnteredParametersWillBePurged.Continue?"
			completion message is "PurgeHistoricalCashRequirementsResultsIsSubmitted"
			Parameters
				PrmVendorGroup				is a VendorGroup
					default label is "VendorGroup"
		        PrmPayGroup					is a PayGroup
					default label is "PayGroup"
		        PrmProcessGroup				is a PayablesProcessGroup
					default label is "ProcessGroup"
				PrmPurgeThroughDate			is Date
					default label is "PurgeThroughDate"
				
			Parameter Rules
				PrmVendorGroup
					required
				PrmPurgeThroughDate
					required

			Instance Selection
				where  (Status.Historical
				and     VendorGroup 	= PrmVendorGroup
				and    (PayGroup		= PrmPayGroup
				or      PrmPayGroup not entered)
				and    (ProcessGroup	= PrmProcessGroup
				or      PrmProcessGroup not entered)
				and     create stamp date <= PrmPurgeThroughDate)
	
			Action Rules
				Instance Rules
					invoke Purge
					
		DisplaySearchName is an Instance Action  	
			valid when (DisplaySearchNameValid)
			Action Rules
				DisplaySearchName = true
				invoke FastUpdate

		DisplayVendorName is an Instance Action		
			valid when (DisplayVendorNameValid)
			Action Rules
				DisplaySearchName = false	
				invoke FastUpdate
				
		FastUpdate is an Update Action
			default label is untranslatable
			restricted
			bypass field rules
									
		DistributeResults is an Instance Action
			run in background
			restricted
			Action Rules
				invoke DistributeBinaryDocument ReportDistributionGroup
					invoked.Report					= PDFReport as pdf in landscape font offset is -3
					invoked.ReportName				= DerivedReportName
					invoked.ReportDistributionGroup = ReportDistributionGroup
            
		DistributeToGroup is an Instance Action
			valid when (StatusCompletedOrHistorical)
			Parameters
				PrmReportDistributionGroup	is a ReportDistributionGroup
					default label is "ReportDistributionGroup"
				PrmReportName is Alpha size 80
					default label is "ReportName"
			Parameter Rules
				PrmReportDistributionGroup
					initial value is ReportDistributionGroup
					required
				PrmReportName
					initial value is DerivedReportName
					default to DerivedReportName
			Action Rules
				invoke DistributeBinaryDocument PrmReportDistributionGroup
					invoked.Report					= PDFReport as pdf in landscape font offset is -3
					invoked.ReportName				= PrmReportName
					invoked.ReportDistributionGroup = PrmReportDistributionGroup

		UpdateCashLedger is an Instance Action
			default label is untranslatable
			restricted
			Parameters
			Action Rules
				if (HistoricalPayablesInvoicePaymentRel exists
				or HistoricalCashLedgerPaymentRel exists)
					invoke UpdateCashLedgerSetFromPaymentClose CashLedgerPayablesPayment
						invoked.PrmCashManagementGroup		= VendorGroup.FinanceEnterpriseGroup
						invoked.PrmVendorGroup				= VendorGroup
						invoked.PrmPayGroup					= PayGroup
						invoked.PrmProcessGroup				= ProcessGroup


		JournalizeDistributions is an Instance Action
			default label is untranslatable
			restricted
			Parameters
				PrmJournalizeGroup			is AlphaUpper size 30
				PrmCBJournalizeGroup		is AlphaUpper size 30
			Action Rules
				if (HistoricalPayablesInvoicePaymentRel exists
				or HistoricalCashLedgerPaymentRel exists)
					APJournalizeGroup		= PrmJournalizeGroup
					CBJournalizeGroup		= PrmCBJournalizeGroup
					invoke JournalizeDistributionsForGroup VendorGroup
						invoked.PrmPayGroup 						= PayGroup
						invoked.PrmRunProgram 						= "AP170"
						invoked.PrmProcessGroup 					= ProcessGroup
						invoked.PrmEnterpriseGroup 					= VendorGroup.FinanceEnterpriseGroup
						invoked.PrmJournalizeGroup 					= PrmJournalizeGroup
						invoked.PrmCBJournalizeGroup 				= PrmCBJournalizeGroup
						invoked.PrmJournalizeGroupDescription 		= "Journal Created By Payment Close"

	StateCycles
		CashRequirementsLifeCycle is a StateCycle
			state field is Status
			Created is a State

				Update is an Update Action
					Action Rules
						include EditParameters

				Delete is a Purge Action
					Action Rules
						include CancelMonitor
		
				SelectPayments is an Instance Action
					completion message is "SelectPaymentsSubmitted"
					Action Rules
						Status					= Status.Processing
						PerformAPCreditMaxRules = true
						include CRSelectBackgroundGroup

						invoke MakeTransitionToSelected in background
							run after background group (LastBackgroundGroup)

			Selected is a State

				ResetParameters is an Instance Action
					completion message is "ResetParametersSubmitted"
					Action Rules
						Status = Status.Processing
						ManuallyChanged = false

						CRBackgroundGroup		 					= BackgroundGroupKey + "ResetParameters"	
						include UnselectRules
			
						invoke MakeTransitionToCreated in background
							run after background group (CRBackgroundGroup)										

				SchedulePayments is an Instance Action
					completion message is "SchedulePaymentsSubmitted"
					Action Rules
						Status					= Status.Processing
						if (VendorGroup.VendorOffset		
						and APPaymentsInvolved)
							include CreateVendorOffsetCreditMemo
						PerformAPCreditMaxRules = true
						include CRProcessBackgroundGroup

			Completed is a State

				ResetParameters is an Instance Action
					completion message is "ResetParametersSubmitted"
					valid when (CanResetParameters)
					Action Rules
						constraint (IsNotHistorical)		
							"PaymentProcessHasBeenStarted;CannotReset"

						invoke CancelMonitor in background
							assign async action background group id to CRBackgroundGroupAsyncId
						
						invoke BeginMonitor in background
							run after action background group CRBackgroundGroupAsyncId
							assign async action background group id to CRBackgroundGroupAsyncId
						
						Status = Status.Processing
						ManuallyChanged = false

						CRBackgroundGroup		 					= BackgroundGroupKey + "ResetParameters"	
						include ResetRules
			
						invoke MakeTransitionToCreated in background
							run after background group (CRBackgroundGroup)										

				CompletePaymentCycle is an Instance Action		
					valid when (!PaymentCycleStarted)			
					Parameters
						PrmOverrideDefaults		is Boolean		
							default label is "OverridePaymentCreationDefaults"
						PrmFileName				is AlphaUpper size 50
							default label is "AdditionalPaymentOutputFileNameText"
						PrmInclComments			is AlphaUpper size 1
							default label is "IncludeComments"
							States
								Yes				value is "Y"
								No				value is "N"
						PrmUseAp150SortOpt		is AlphaUpper size 1
							default label is "UseCashRequirementsSortOptions"
							States
								Yes				value is "Y"
								No				value is "N"
						PrmInclFaxEmail			is AlphaUpper size 1
							default label is "IncludeFaxAndEmail"
							States
								None			value is "N"		
								EmailOnly		value is "E"
								FaxNumberOnly	value is "F"
								BothEmailAndFax	value is "B"
						PrmDocCurrency			is AlphaUpper size 1	
							default label is "DocumentCurrency"
							States
								AccountCurrency	value is "A"
								InvoiceCurrency	value is "I"
						PrmBalancedTape         is AlphaUpper size 1	
							default label is "BalancedFile"
							States
								Yes				value is "Y"
								No				value is "N"
						PrmRunPaymentClose		is Boolean
							default label is "IncludePaymentClose_*If_not_checked,_must_be_run_separately*"
						PrmPayGroup				is Boolean		
							default label is "PayGroup"
						PrmCashCodeGroup		is Boolean		
							default label is "CashCodeGroup"
						PrmCashCode				is Boolean		
							default label is "CashCode"
						PrmBankTransCode		is Boolean		
							default label is "BankTransactionCode"
						PrmRunCashPaymentRegister	is Boolean		
							default label is "IncludeCashPaymentRegister_*This_will_run_before_payment_close*"
						PrmRunPositivePayFileCreation	is Boolean		
							default label is "IncludePositivePayFileCreation"
					Parameter Rules
						PrmInclComments
							initial value is "N"
							if (VendorGroup.VendorOffset)		
								force default to "Y"
						PrmUseAp150SortOpt
							initial value is "N"
						PrmInclFaxEmail			
							initial value is "B"
						PrmRunPaymentClose
							initial value is true
						PrmDocCurrency			
							initial value is "A"
							default to "A"
					Local Fields		
						LocalPayGroup			is AlphaUpper size 10
						LocalCashCodeGroup		is AlphaUpper size 12
						LocalPrmCashCode		is AlphaUpper size 20
						LocalBankTransCode		is AlphaUpper size 10
						LocalFileName			is AlphaUpper size 50
						SetMonitorToComplete	is Boolean
					Action Rules
						constraint (PaymentProcessingMonitorEditRel !exists)				
                        	"PaymentCycleAlreadyRunning;CannotUseCompletePaymentCycle"
						constraint (SelectedPaymentsWithInactiveCashCodeRel !exists)		
							"CashCode<first SelectedPaymentsWithInactiveCashCodeRel.CashCode>IsNotActive"
						PaymentCycleStarted					= true							
						CRBackgroundGroup					= BackgroundGroupKey + "CRProcessPayments"
						if (CashCodeGroup entered)		
							for each distinct CashLedgerPayablesPayment.BankTransactionCode in CashLedgerPayablesPaymentBankTransactionCodeRel
								LocalBankTransactionCode		= each.CashLedgerPayablesPayment.BankTransactionCode
								LocalCashCode					= first CashCodeGroup.CashCodeGroupDetailsRel.CashCode
								if (PrmPayGroup)		
									LocalPayGroup			= PayGroup
								if (PrmCashCodeGroup)		
									LocalCashCodeGroup		= CashCodeGroup
								if (PrmBankTransCode)		
									LocalBankTransCode		= each.CashLedgerPayablesPayment.BankTransactionCode
								if (!LocalBankTransactionCode.PaymentOutputOption.NoOutput)		
									if (PayablesElectronicTransferIDRel.PaymentOutputFileName entered)
										LocalFileName = PayablesElectronicTransferIDRel.PaymentOutputFileName
									else
										LocalFileName = LocalPayGroup + LocalCashCodeGroup + LocalBankTransCode + PrmFileName
								if (LocalCashPaymentFormatRel.UsePaymentClearingFile)
									initialize LocalCashCode 								
									invoke PaymentClearingFileCreation PaymentClearingFileCreation in background group(CRBackgroundGroup)
										invoked.VendorGroup		= VendorGroup
										invoked.PayGroup		= PayGroup
										invoked.PaymentCode		= LocalBankTransactionCode
										invoked.ProcGrp			= ProcessGroup				
										invoked.CashCodeGrp		= CashCodeGroup
										invoked.CheckDate		= PaymentDate
										invoked.EffectiveDate	= PaymentDate
										invoked.FileName		= LocalFileName
										if (PrmOverrideDefaults)
											invoked.PrintComments	= PrmInclComments
											invoked.UseAp150SortOpt	= PrmUseAp150SortOpt
											invoked.DocCurrency		= PrmDocCurrency		
											invoked.BalancedTape 	= PrmBalancedTape		
										else
											invoked.PrintComments	= LocalPaymentCreationDefaultsRel.PrintComments  					
											invoked.UseAp150SortOpt	= LocalPaymentCreationDefaultsRel.UseAp150SortOpt					
											invoked.DocCurrency		= LocalPaymentCreationDefaultsRel.DocCurrency						
											invoked.BalancedTape 	= LocalPaymentCreationDefaultsRel.BalancedTape						
											invoked.PrintRemit		= LocalPaymentCreationDefaultsRel.PrintRemit						
											invoked.CreatePrenot	= LocalPaymentCreationDefaultsRel.CreatePrenot						
											invoked.SendBankType	= LocalPaymentCreationDefaultsRel.SendBankType						
											invoked.CreateLabelsOpt	= LocalPaymentCreationDefaultsRel.CreateLabelsOpt					
											invoked.Format			= LocalPaymentCreationDefaultsRel.Format							
											invoked.Healthcare		= LocalPaymentCreationDefaultsRel.Healthcare						
											invoked.SuppressNoPaymentError	= LocalPaymentCreationDefaultsRel.SuppressNoPaymentError	
											invoked.ImmediateOriginName		= LocalPaymentCreationDefaultsRel.ImmediateOriginName		
											invoked.BacsSerialNbr			= LocalPaymentCreationDefaultsRel.BacsSerialNbr				
									initialize LocalFileName		
								else
									initialize LocalCashCode 								
									invoke ElectronicPaymentCreation ElectronicPaymentCreation in background group(CRBackgroundGroup)
										invoked.VendorGroup		= VendorGroup
										invoked.PayGroup		= PayGroup
										invoked.PaymentCode		= LocalBankTransactionCode
										invoked.ProcGrp			= ProcessGroup				
										invoked.CashCodeGrp		= CashCodeGroup
										invoked.CheckDate		= PaymentDate
										invoked.EffectiveDate	= PaymentDate
										invoked.FileName		= LocalFileName
										if (PrmOverrideDefaults)							
											invoked.InclComments	= PrmInclComments
											invoked.UseAp150SortOpt	= PrmUseAp150SortOpt
											invoked.InclFaxEmail	= PrmInclFaxEmail
											invoked.DocCurrency		= PrmDocCurrency		
										else
											invoked.InclComments	= LocalPaymentCreationDefaultsRel.InclComments						
											invoked.UseAp150SortOpt	= LocalPaymentCreationDefaultsRel.UseAp150SortOpt					
											invoked.InclFaxEmail	= LocalPaymentCreationDefaultsRel.InclFaxEmail						
											invoked.DocCurrency		= LocalPaymentCreationDefaultsRel.DocCurrency						
											invoked.SuppressNoPaymentError	= LocalPaymentCreationDefaultsRel.SuppressNoPaymentError	
											invoked.CombineOutputByAccount  = LocalPaymentCreationDefaultsRel.CombineOutputByAccount	
									initialize LocalFileName		
						else
							for each distinct CashCode in CashLedgerPayablesPaymentRel		
								LocalCashCode					= each.CashCode
								for each distinct CashLedgerPayablesPayment.BankTransactionCode in CashLedgerPayablesPayment2Rel		
									LocalBankTransactionCode	= each.CashLedgerPayablesPayment.BankTransactionCode
									if (PrmPayGroup)		
										LocalPayGroup			= PayGroup
									if (PrmCashCode)		
										LocalPrmCashCode		= LocalCashCode
									if (PrmBankTransCode)		
										LocalBankTransCode		= LocalBankTransactionCode
									if (!LocalBankTransactionCode.PaymentOutputOption.NoOutput)		
										if (PayablesElectronicTransferIDRel.PaymentOutputFileName entered)
											LocalFileName = PayablesElectronicTransferIDRel.PaymentOutputFileName
										else
											LocalFileName = LocalPayGroup + LocalPrmCashCode + LocalBankTransCode + PrmFileName
									if (LocalCashPaymentFormatRel.UsePaymentClearingFile)
										if (ClearingFileProcessingMonitorRel not exists)
											invoke Create PayablesProcessingMonitor
												invoked.VendorGroup									  = VendorGroup
												invoked.PayablesProcessingMonitor.PayGroup			  = PayGroup		
												invoked.PayablesProcessingMonitor.RunProgram		  = RunProgram.PaymentClearingFileCreation			
												invoked.PayablesProcessingMonitor.ProcessGroup		  = ProcessGroup
												invoked.PayablesProcessingMonitor.ProcessLevel		  = blank
												invoked.PayablesProcessingMonitor.AccountStructure	  = blank						
												invoked.PayablesProcessingMonitor.RunGroup			  = blank		
												invoked.PayablesProcessingMonitor.AuthorityCode		  = blank	
												invoked.PayablesProcessingMonitor.Company			  = blank	   
												invoked.PayablesProcessingMonitor.BankTransactionCode = LocalBankTransactionCode
												invoked.Status										  = 1			
										SetMonitorToComplete  = true									
										invoke PaymentClearingFileCreation PaymentClearingFileCreation in background group(CRBackgroundGroup)
											invoked.VendorGroup		= VendorGroup
											invoked.PayGroup		= PayGroup
											invoked.PaymentCode		= LocalBankTransactionCode
											invoked.ProcGrp			= ProcessGroup			
											invoked.CashCode		= LocalCashCode
											invoked.CheckDate		= PaymentDate
											invoked.EffectiveDate	= PaymentDate
											invoked.FileName		= LocalFileName
											if (PrmOverrideDefaults)
												invoked.PrintComments	= PrmInclComments
												invoked.UseAp150SortOpt	= PrmUseAp150SortOpt
												invoked.DocCurrency		= PrmDocCurrency		
												invoked.BalancedTape 	= PrmBalancedTape	
											else
												invoked.PrintComments	= LocalPaymentCreationDefaultsRel.PrintComments  				
												invoked.UseAp150SortOpt	= LocalPaymentCreationDefaultsRel.UseAp150SortOpt				
												invoked.DocCurrency		= LocalPaymentCreationDefaultsRel.DocCurrency					
												invoked.BalancedTape 	= LocalPaymentCreationDefaultsRel.BalancedTape					
											invoked.PrintRemit		= LocalPaymentCreationDefaultsRel.PrintRemit						
											invoked.CreatePrenot	= LocalPaymentCreationDefaultsRel.CreatePrenot						
											invoked.SendBankType	= LocalPaymentCreationDefaultsRel.SendBankType						
											invoked.CreateLabelsOpt	= LocalPaymentCreationDefaultsRel.CreateLabelsOpt					
											invoked.Format			= LocalPaymentCreationDefaultsRel.Format							
											invoked.Healthcare		= LocalPaymentCreationDefaultsRel.Healthcare						
											invoked.SuppressNoPaymentError	= LocalPaymentCreationDefaultsRel.SuppressNoPaymentError	
											invoked.ImmediateOriginName		= LocalPaymentCreationDefaultsRel.ImmediateOriginName		
											invoked.BacsSerialNbr			= LocalPaymentCreationDefaultsRel.BacsSerialNbr				
											invoked.SkipMonitor		= true								
										initialize LocalFileName		
									else
										if (PayablesProcessingMonitorRel not exists)	
											invoke Create PayablesProcessingMonitor
												invoked.VendorGroup									  = VendorGroup
												invoked.PayablesProcessingMonitor.PayGroup			  = PayGroup		
												invoked.PayablesProcessingMonitor.RunProgram		  = RunProgram.ElectronicPaymentFileCreation			
												invoked.PayablesProcessingMonitor.ProcessGroup		  = ProcessGroup
												invoked.PayablesProcessingMonitor.ProcessLevel		  = blank
												invoked.PayablesProcessingMonitor.AccountStructure	  = blank						
												invoked.PayablesProcessingMonitor.RunGroup			  = blank		
												invoked.PayablesProcessingMonitor.AuthorityCode		  = blank	
												invoked.PayablesProcessingMonitor.Company			  = blank	   
												invoked.PayablesProcessingMonitor.BankTransactionCode = LocalBankTransactionCode
												invoked.Status										  = 1			
										SetMonitorToComplete  = true		
										invoke ElectronicPaymentCreation ElectronicPaymentCreation in background group(CRBackgroundGroup)
											invoked.VendorGroup		= VendorGroup
											invoked.PayGroup		= PayGroup
											invoked.PaymentCode		= LocalBankTransactionCode
											invoked.ProcGrp			= ProcessGroup				
											invoked.CashCode		= LocalCashCode
											invoked.CheckDate		= PaymentDate
											invoked.EffectiveDate	= PaymentDate
											invoked.FileName		= LocalFileName
											if (PrmOverrideDefaults)																	
												invoked.InclComments	= PrmInclComments
												invoked.UseAp150SortOpt	= PrmUseAp150SortOpt
												invoked.InclFaxEmail	= PrmInclFaxEmail
												invoked.DocCurrency		= PrmDocCurrency		
											else
												invoked.InclComments	= LocalPaymentCreationDefaultsRel.InclComments					
												invoked.UseAp150SortOpt	= LocalPaymentCreationDefaultsRel.UseAp150SortOpt				
												invoked.InclFaxEmail	= LocalPaymentCreationDefaultsRel.InclFaxEmail					
												invoked.DocCurrency		= LocalPaymentCreationDefaultsRel.DocCurrency					
											invoked.SuppressNoPaymentError	= LocalPaymentCreationDefaultsRel.SuppressNoPaymentError	
											invoked.CombineOutputByAccount  = LocalPaymentCreationDefaultsRel.CombineOutputByAccount	
											invoked.SkipMonitor		= true	
										initialize LocalFileName		
					Exit Rules
						if (SetMonitorToComplete)	
							invoke Completed.UpdatePayablesProcessingMonitor in background group(CRBackgroundGroup)
								run after background group (LastBackgroundGroup)
								
						if (PrmRunCashPaymentRegister)		
							LastBackgroundGroup					= CRBackgroundGroup
							CRBackgroundGroup					= BackgroundGroupKey + "CRPaymentRegister"
							invoke Completed.RunCashPaymentRegister in background group(CRBackgroundGroup)
								run after background group (LastBackgroundGroup)
								invoked.PrmVendorGroup			= VendorGroup
								invoked.PrmPayGroup				= PayGroup
						if (PrmRunPaymentClose)
							if (config.RunNewPaymentClose = true)
								LastBackgroundGroup				= CRBackgroundGroup
								CRBackgroundGroup				= BackgroundGroupKey + "CRNewPaymentClose"
								invoke ClosePaymentCycle in background group(CRBackgroundGroup)
									run after background group (LastBackgroundGroup)
									invoked.PrmVendorGroup						= VendorGroup
									invoked.PrmPayGroup							= PayGroup
									invoked.PrmProcessGroup						= ProcessGroup
									invoked.PrmRunPositivePayFileCreation		= PrmRunPositivePayFileCreation
							else
								LastBackgroundGroup					= CRBackgroundGroup		
								CRBackgroundGroup					= BackgroundGroupKey + "CROldPaymentClose"
								invoke Completed.RunPaymentClose in background group(CRBackgroundGroup)		
									run after background group (LastBackgroundGroup)	
									invoked.PrmVendorGroup			= VendorGroup
									invoked.PrmPayGroup				= PayGroup
									invoked.PrmProcGrp				= ProcessGroup			
									invoked.PrmRunPositivePayFileCreation = PrmRunPositivePayFileCreation		

				UpdatePayablesProcessingMonitor is an Instance Action	
					restricted
					run in background
					Action Rules
						invoke Update PaymentProcessingMonitorEditRel
							invoked.Status	= 0
					
				RunCashPaymentRegister is an Instance Action		
					default label is untranslatable
					restricted
					run in background
					Parameters
						PrmVendorGroup		is like VendorGroup
						PrmPayGroup			is like PayGroup
					Action Rules
						invoke CashPaymentRegister CashPaymentRegister in background
							invoked.VendorGroup				= PrmVendorGroup
							invoked.PayGroup				= PrmPayGroup

				RunPaymentClose is an Instance Action		
					default label is untranslatable			
					restricted
					run in background
					Parameters
						PrmVendorGroup		is like VendorGroup
						PrmPayGroup			is like PayGroup
						PrmProcGrp			is like PayablesProcessGroup		
						PrmRunPositivePayFileCreation 	is Boolean				
					Local Fields
						LocalAsyncId        is a AsyncActionRequest				
					Action Rules
						invoke PaymentClose PaymentClose in background
							assign async action request id to LocalAsyncId		
							invoked.VendorGroup				= PrmVendorGroup
							invoked.PayGroup				= PrmPayGroup
							invoked.ProcGrp					= PrmProcGrp		
						if (PrmRunPositivePayFileCreation)						
							LastBackgroundGroup					= CRBackgroundGroup
							CRBackgroundGroup					= BackgroundGroupKey + "CRPositivePay"
							if (CashCodeGroup entered)
								for each distinct CashLedgerPayablesPayment.BankTransactionCode in CashLedgerPayablesPaymentBankTransactionCodeRel
									LocalBankTransactionCode		= each.CashLedgerPayablesPayment.BankTransactionCode
									if (!LocalBankTransactionCode.PaymentSummarization)	
										invoke PositivePayFileCreation PositivePayFileCreation
											run after LocalAsyncId
											invoked.CashManagementGroup		= VendorGroup.BusinessGroup.FinanceEnterpriseGroup
											invoked.CcgCashCodeGrp          = CashCodeGroup
											invoked.BankInstCode            = LocalBankTransactionCode
							else
								for each distinct CashCode in CashLedgerPayablesPaymentRel
									LocalCashCode					= each.CashCode
									for each distinct CashLedgerPayablesPayment.BankTransactionCode in CashLedgerPayablesPayment2Rel
										LocalBankTransactionCode	= each.CashLedgerPayablesPayment.BankTransactionCode
										if (!LocalBankTransactionCode.PaymentSummarization)	
											invoke PositivePayFileCreation PositivePayFileCreation
												run after LocalAsyncId
												invoked.CashManagementGroup	= VendorGroup.BusinessGroup.FinanceEnterpriseGroup
												invoked.CashCode			= LocalCashCode
												invoked.BankInstCode		= LocalBankTransactionCode
