ElectronicFundsTransferTransaction is a BusinessClass
	owned by ar
	prefix is FTT
	sql name is EFundsTransferTransaction
	classic name is FTTRANS

	Ontology
		symbolic key is ElectronicFundsTransferTransaction
			classic set name is FTTNEWPRIMARYINDEX


			classic name for ReceivableInvoiceDetail.ReceivableInvoiceDetailType is TRANS-TYPE

	Patterns
		implements StaticJava
		disable AuditIndex
		implements Archivable

	Persistent Fields

		CustomerGroup
		ProcessingCompany		is a ReceivableCompany
		CrCustomer				is a Customer
		ProcessDate				is Date
		EftDate					is Date
		NetAmt					is an InternationalAmount
		BankEntity
			context of Company
		BankAccountNumber
			classic name is BANK-ACCT-NBR
		EftNote
		EftExtract
		EftAction
		EftCreated				is AlphaUpper size 1
			States
				EFTNotCreated	value is "N"
				EFTCreated		value is "Y"
		TemporaryHold			is AlphaUpper size 1
			classic name is TEMP-HOLD
			States
				ApprovedByEngine	value is "A"
				SentForApproval		value is "S"
		EFTNotificationResult	is like EFTNotificationExtractResult
		EFTNotificationPrintResult
			context of Company
			delete ignored
		EFTPaymentCreationResult
			context of Company
			delete ignored
		EFTExtractResult
			context of Company
			delete ignored
		EFTExtractOpenAmount		is like InternationalAmount
		EFTExtractDiscountAmount	is like InternationalAmount
		EFTExtractNetAmount			is like InternationalAmount
		
		EFTNPrintDiscountDate		is Date
		EFTNPrintDiscountAmount		is like InternationalAmount
			precision is ProcessingCompany.BaseNumberOfDecimals
		EFTNPrintInvoiceAmount		is like InternationalAmount
			precision is ProcessingCompany.BaseNumberOfDecimals
		EFTNPrintNetAmount			is like InternationalAmount
			precision is ProcessingCompany.BaseNumberOfDecimals
		
		EFTPCreationDiscountAmount	is like InternationalAmount
			precision is ProcessingCompany.BaseNumberOfDecimals
		EFTPCreationNetAmount		is like InternationalAmount
			precision is ProcessingCompany.BaseNumberOfDecimals
			
	Local Fields
		EFTNPreWorkCount						is Numeric 4
		LocalCreateDate							is TimeStamp
		CurrencyWork							is a ReceivableExchange
		LocalCurrencyTable						is like CurrencyTable
		LocalPrmCustGroup			  			is like CustomerGroup
		LocalCustomerGroup			 			is like CustomerGroup
		LocalBankCustomer						is like Customer
		LocalCompany				  			is a ReceivableCompany
		LocalFinanceEnterpriseGroup				is like FinanceEnterpriseGroup
		LocalCashManagementGroup				is like CashManagementGroup
		LocalBankTransactionCode				is like BankTransactionCode
		LocalDataFileName						is AlphaUpper size 50
		NewPreNotifyPrint						is a WorkPreNotificationPrint view
		LocalBankDate							is Date
		LocalActualBankDayNumber				is Numeric 8
		LocalEFTNotificationPrintResult			is an EFTNotificationPrintResult
			context of Company
		CustomerGroupEntered					is Boolean
		LocalOpenAmount							is like InternationalAmount
		LocalEftTransactionNetAmount			is like InternationalAmount
		LocalDiscountCount						is Numeric size 1
		LocalDiscountAmount						is like InternationalAmount
		LocalFinalNoteDiscountAmount			is like InternationalAmount
		LocalProcCompanyDiscountAmount			is like InternationalAmount
		LocalProcessingCompany  				is a ReceivableCompany
		LocalCashCode							is like CashCode
		LocalProcessingCompanyCurrency			is like Currency
		LocalDueType							is Alpha size 1
		LocalDueDays							is like DueDays
		EFTCalendar								is like SystemCalendar
		LocalDiscountDate						is Date
		LocalExchangeDate						is Date
		LocalTransactionAmount					is like InternationalAmount
		LocalOriginalAmount						is like InternationalAmount
		LocalOriginalAppliedAmount				is like InternationalAmount
		LocalOriginalAdjustmentAmount			is like InternationalAmount
		LocalFromCurrency						is like Currency
		LocalToCurrency							is like Currency
		LocalOutputCurrencyAmount				is like InternationalAmount
		LocalEftCompany							is like ReceivableCompany
		LocalReportByCompany					is Boolean
		LocalBatchNumber						is Numeric 12
		LocalPrmCustomer						is like Customer
		LocalWorkCustomer						is like Customer
		OldCustomer								is like Customer
		OldPayNetAmount							is like InternationalAmount
		ReceivableApplicationSelectView			is a ReceivableApplicationSelect view
		LocalAdjustmentReason					is like ApplicationAdjustmentReason
		LocalEFTPaymentCreationResult			is like EFTPaymentCreationResult
		EFTPaymentOutputView					is a EFTPaymentOutput view
		LocalFinancialInstitutionBranch			is like FinancialInstitutionBranch
		LocalFinancialInstitution				is like FinancialInstitution
		LocalSendBankName						is like FinancialInstitution
		LocalWorkCompany						is like ReceivableCompany
		LocalWorkPaymentHeader					is like ReceivablePaymentHeader
		LocalWorkPaymentNumber					is like ReceivablePayment
		LocalSelectTransactionCompany			is like ReceivableCompany
		LocalSelectInvoiceDetailType			is like ReceivableInvoiceDetailType 
		LocalSelectInvoice						is like Invoice
		LocalDebitInvoice						is like Invoice
		LocalSelectPaymentSeq					is like Sequence
		LocalPaymentHeader						is like ReceivablePaymentHeader
		LocalReceivableGLCode					is like ReceivableGeneralLedgerCode

		LocalIDMEmailSubject			is Alpha 255
			Text Variables
				CompanyName				value is ProcessingCompany.Name
				CustomerName			value is CrCustomer.Name
				PrintDate				value is LocalPrintDateIDM
		LocalPrintDateIDM						is Date
		SumOfEFTTransactionPreNotifRelAmountsDone                               is Boolean
        SumOfEFTTransactionFinalNotifRelAmountsDone                             is Boolean
        SumOfEFTTransactionPreNotifRelRIDSignedTransactionAmount                is like InternationalAmount
        SumOfEFTTransactionPreNotifRelRIDDiscountAmountOrigDiscAmt              is like InternationalAmount
        SumOfEFTTransactionPreNotifRelNetAmount                                 is like InternationalAmount
        InstanceCountOfEFTTransactionPreNotifRel                                is Numeric size 6
        SumOfEFTTransactionFinalNotifRelRIDSignedTransactionAmount              is like InternationalAmount
        SumOfEFTTransactionFinalNotifRelRIDDiscountAmountOrigDiscAmt            is like InternationalAmount
        SumOfEFTTransactionFinalNotifRelNetAmount                               is like InternationalAmount
        InstanceCountOfEFTTransactionFinalNotifRel                              is Numeric size 6
 
	Conditions
		IsExtracted
			when (EftExtract.Extracted)

		IsAdjusted
			when (EftAction.Postponed
			or	EftAction.Hold
			or	EftAction.Added)



















	Relations
	
		CompanyCustomerRel
			one-to-one relation to CompanyCustomer
			Field Mapping uses symbolic key
				related.Company		 										= ProcessingCompany
				related.Customer	 										= CrCustomer

		ComCustomerRel
			one-to-one relation to CompanyCustomer
			Field Mapping uses symbolic key
				related.Company		 										= Company
				related.Customer	 										= CrCustomer

		CompanyCustRel
			one-to-one relation to CompanyCustomer
			Field Mapping uses symbolic key
				related.Company		 										= LocalProcessingCompany
				related.Customer	 										= LocalPrmCustomer

		CustomerRel
			one-to-one relation to Customer
			Field Mapping uses symbolic key
				related.CustomerGroup										= LocalCustomerGroup
				related.Customer											= LocalWorkCustomer

		ReceivableEFTNotifyRel
			one-to-many relation to ReceivableElectronicFundsTransferNotify
			Field Mapping uses symbolic key
				related.CustomerGroup										= LocalCustomerGroup
			Instance Selection
				where (((!CustomerGroupEntered entered 
				and	  related.Company = LocalCompany)
				or		(CustomerGroupEntered 
				and	  related.Company not entered))
				and	!related.HoldAllProcessing
				and	related.Customer	= CrCustomer)

		EFTNotifyRel
			one-to-many relation to ReceivableElectronicFundsTransferNotify
			Field Mapping uses symbolic key
				related.CustomerGroup										= LocalCustomerGroup
			Instance Selection
				where (((LocalReportByCompany 
				and	  related.Company = LocalEftCompany)
				or		(!LocalReportByCompany 
				and	  related.Company not entered))
				and	!related.HoldAllProcessing
				and	related.Customer	= CrCustomer)

		ReceivableInvoiceDetailRel
			one-to-one relation to ReceivableInvoiceDetail
			Field Mapping uses symbolic key
				related.Company 											= Company
				related.ReceivableInvoiceDetail.ReceivableInvoiceDetailType = ReceivableInvoiceDetail.ReceivableInvoiceDetailType
				related.ReceivableInvoiceDetail.Invoice 					= ReceivableInvoiceDetail.Invoice
				related.ReceivableInvoiceDetail.PaymentSeq 					= ReceivableInvoiceDetail.PaymentSeq

		DebitInvoiceDetailRel
			one-to-many relation to ReceivableInvoiceDetail
			Field Mapping uses symbolic key
				related.Company 											= ProcessingCompany
			Instance Selection
				where (related.ReceivableInvoiceDetail.Invoice				= LocalDebitInvoice)

		ApplicationSelectInvoiceDetailRel
			one-to-one relation to ReceivableInvoiceDetail
			Field Mapping uses symbolic key
				related.Company												=	LocalSelectTransactionCompany
				related.ReceivableInvoiceDetail.ReceivableInvoiceDetailType	=	LocalSelectInvoiceDetailType
				related.ReceivableInvoiceDetail.Invoice						=	LocalSelectInvoice
				related.ReceivableInvoiceDetail.PaymentSeq					=	LocalSelectPaymentSeq
								
		WorkFinalNotificationPrintRel
			one-to-one relation to WorkFinalNotificationPrint
			Field Mapping uses ByCustomer
				related.Customer 											= NewPreNotifyPrint.RecKey.CrCustomer

		ReceivableCompanyRel
			one-to-many relation to ReceivableCompany
			Field Mapping uses Set2
				related.CustomerGroupField.CustomerGroup	 = LocalPrmCustGroup

		WorkPreNotificationPrintRel
			one-to-many relation to WorkPreNotificationPrint
			Field Mapping uses RecKey
				related.FinanceEnterpriseGroup 								= LocalFinanceEnterpriseGroup
				related.EFTNotificationPrintResult							= LocalEFTNotificationPrintResult
			Instance Selection
				where (related.RecKey.CustGroup = LocalCustomerGroup
				and	!(related.PreNote = "N" 
				and	  related.RecKey.EftSort = "A"))

		ReceivableInvoiceRel
			one-to-one relation to ReceivableInvoice
			required
			Field Mapping uses symbolic key
				related.Company					 							= LocalCompany
				related.ReceivableInvoiceType	 							= ReceivableInvoiceDetail.ReceivableInvoiceDetailType
				related.ReceivableInvoice		 							= ReceivableInvoiceDetail.Invoice

		ActualBankDayNumberRel
			one-to-many relation to SystemCalendarDate
			Field Mapping uses symbolic key
				related.EnterpriseGroup										= LocalFinanceEnterpriseGroup
				related.SystemCalendar 										= EFTCalendar
			Instance Selection
				where (related.IsBankDay
				and	   related.SystemCalendarDate >= current date)

		EFTNotificationPrintResultRel
			one-to-one relation to EFTNotificationPrintResult
			Field Mapping uses symbolic key
				related.FinanceEnterpriseGroup								= LocalFinanceEnterpriseGroup
				related.EFTNotificationPrintResult							= LocalEFTNotificationPrintResult

		ReceivablePaymentHeaderRel
			one-to-one relation to ReceivablePaymentHeader
			Field Mapping uses symbolic key
				related.Company												= LocalCompany 
				related.ReceivablePaymentHeader								= LocalBatchNumber

		EFTAdjustmentRel
			one-to-one relation to ReceivableElectronicFundsTransferAdjustment
			Field Mapping uses Set1
				related.Company													= ProcessingCompany 
				related.ReceivableElectronicFundsTransferAdjustment.TransType	= ReceivableInvoiceDetail.ReceivableInvoiceDetailType
				related.ReceivableElectronicFundsTransferAdjustment.Invoice		= ReceivableInvoiceDetail.Invoice
				related.ReceivableElectronicFundsTransferAdjustment.PaymentSeq	= ReceivableInvoiceDetail.PaymentSeq			

		EFTTransactionRel
			one-to-many relation to ElectronicFundsTransferTransaction
			Field Mapping uses Set2
				related.CustomerGroup			= LocalCustomerGroup
				related.ProcessingCompany		= LocalProcessingCompany
				related.CrCustomer				= LocalPrmCustomer 
			Instance Selection	
				where (related.ElectronicFundsTransferTransaction.EftType.Extracted
				and	   related.EftExtract.Extracted
				and	   related.EftCreated.EFTNotCreated
				and   !related.TemporaryHold.SentForApproval)

		PreNoteSentEFTRel
			one-to-one relation to ElectronicFundsTransferTransaction
			Field Mapping uses Set1
				related.CustomerGroup								= CustomerGroup 
				related.ProcessingCompany							= ProcessingCompany 
				related.Company										= Company 
				related.ReceivableInvoiceDetail						= ReceivableInvoiceDetail 
				related.ElectronicFundsTransferTransaction.EftType	= "P"
				related.ElectronicFundsTransferTransaction.EftSeq	= ElectronicFundsTransferTransaction.EftSeq

		ReceivableReasonRel
			one-to-one relation to ReceivableReason
			Field Mapping uses symbolic key
				related.Company					= ReceivableInvoiceDetail.Company
				related.ReceivableReasonType	= "AD"
				related.ReceivableReason		= LocalAdjustmentReason
				
		ReceivablePaymentRel
			one-to-many relation to ReceivablePayment
			Field Mapping uses	Set10	
				related.Company						= ProcessingCompany
				related.Customer					= CrCustomer	
			Instance Selection

				where (related.EFTPayCreationResult	= LocalEFTPaymentCreationResult)

		ReceivablePayRel
			one-to-many relation to ReceivablePayment
			Field Mapping uses symbolic key
				related.Company							= LocalProcessingCompany
				related.ReceivablePaymentHeader			= LocalPaymentHeader	
			Instance Selection

				where (related.EFTPayCreationResult		= LocalEFTPaymentCreationResult)

		ReceivableApplicationSelectPaymentRel
			classic name is ARSAPPLIED
			one-to-many relation to ReceivableApplicationSelect
			Field Mapping uses symbolic key
				related.Company										 = LocalWorkCompany
				related.ReceivablePaymentHeader						 = LocalWorkPaymentHeader
				related.ReceivablePayment							 = LocalWorkPaymentNumber

		ACHTapeRel
			one-to-many relation to Work2AR115
			Field Mapping uses ByEFTPaymentCreationResult
				related.EFTPayCreationResult	= LocalEFTPaymentCreationResult
			Instance Selection
				where (related.RecKey.PaymentFormat.ACH
				and	related.RecKey.Company entered
				and	related.RecKey.Customer entered
				and	related.RecKey.BankEntity entered
				and	related.RecKey.BankAcctNbr entered)

		NonFormattedTapeRel
			one-to-many relation to Work2AR115
			Field Mapping uses ByEFTPaymentCreationResult
				related.EFTPayCreationResult	= LocalEFTPaymentCreationResult
			Instance Selection
				where (related.RecKey.PaymentFormat.NonFormatted
				and	related.RecKey.Company entered
				and	related.RecKey.Customer entered
				and	related.RecKey.BankEntity entered
				and	related.RecKey.BankAcctNbr entered)

		BACSTapeRel
			one-to-many relation to Work2AR115
			Field Mapping uses ByEFTPaymentCreationResult
				related.EFTPayCreationResult	= LocalEFTPaymentCreationResult
			Instance Selection	
				where (related.RecKey.PaymentFormat.BACS
				and	related.RecKey.Company entered
				and	related.RecKey.Customer entered
				and	related.RecKey.BankEntity entered
				and	related.RecKey.BankAcctNbr entered)

		FinancialInstitutionBranchRel
			one-to-one relation to FinancialInstitutionBranch
			Field Mapping uses symbolic key
				related.CashManagementGroup			= LocalCashManagementGroup
				related.FinancialInstitution		= LocalFinancialInstitution
				related.FinancialInstitutionBranch	= LocalFinancialInstitutionBranch

		BankTransactionCodeRel
			one-to-one relation to BankTransactionCode
			Field Mapping uses symbolic key
				related.CashManagementGroup		 = LocalCashManagementGroup
				related.BankTransactionCode		 = LocalBankTransactionCode

		CustDraftBankRel
			one-to-many relation to CustomerDraftBank
			Field Mapping uses Set4		
				related.CustomerGroup			= LocalCustomerGroup
			Instance Selection	
				where (((LocalReportByCompany					
				and		related.Company = LocalEftCompany)
				or		(!LocalReportByCompany 
				and		related.Company not entered))
				and		related.PrenoteStatus.Printed
				and		related.PrenotificationRequired)

		EFTCustomerNotifyRel
			one-to-many relation to ReceivableElectronicFundsTransferNotify
			Field Mapping uses symbolic key
				related.CustomerGroup	 					= LocalCustomerGroup
			Instance Selection
				where (((LocalReportByCompany 
				and		related.Company = LocalEftCompany)
				or		(!LocalReportByCompany 
				and		related.Company not entered))
				and		!related.HoldAllProcessing
				and		related.Customer	= LocalBankCustomer)

		CustomerDraftBankRel
			one-to-many relation to CustomerDraftBank
			Field Mapping uses Set4		
				related.CustomerGroup								= ProcessingCompany.CustomerGroupField.CustomerGroup
			Instance Selection	
				where ((LocalReportByCompany 
				and	  related.Company = LocalEftCompany)
				or		(!LocalReportByCompany 
				and	  related.Company not entered)
				and	related.CustomerDraftBank.BOEEFTBank			= BankEntity
				and	related.CustomerDraftBank.BOEEFTBankAccount		= BankAccountNumber)

		EFTCustomerDraftBankRel
			one-to-many relation to CustomerDraftBank
			Field Mapping uses Set4		
				related.CustomerGroup								= LocalCustomerGroup
				related.Company 									= LocalEftCompany	
				related.Customer 									= CrCustomer	
				related.CustomerDraftBank.BOEEFTBank				= BankEntity	
				related.CustomerDraftBank.BOEEFTBankAccount			= BankAccountNumber	






		ReceivableGLCodeRel
			one-to-one relation to ReceivableGeneralLedgerCode
			Field Mapping uses symbolic key
				related.Company						= ProcessingCompany
				related.ReceivableGeneralLedgerCode	= LocalReceivableGLCode

		CurrencyRelationshipRel
			one-to-one relation to CurrencyRelationship
			Field Mapping uses symbolic key
				related.FinanceEnterpriseGroup				= LocalFinanceEnterpriseGroup
				related.CurrencyRelationship.FromCurrency	= LocalFromCurrency
				related.CurrencyRelationship.ToCurrency		= LocalToCurrency

		Work1AR115Rel
			one-to-many relation to Work1AR115
			Field Mapping uses ByEFTPaymentCreationResult
				related.EFTPayCreationResult				= LocalEFTPaymentCreationResult

		Work2AR115Rel
			one-to-many relation to Work2AR115
			Field Mapping uses ByEFTPaymentCreationResult
				related.EFTPayCreationResult				= LocalEFTPaymentCreationResult

		EFTNotiExtractPrenoteInvoiceDetailsRel			
			one-to-one relation to EFTNotiExtractPrenoteInvoiceDetails
			Field Mapping uses ByEFTNotificationExtractResult
				related.EFTNotificationExtractResult	= EFTNotificationResult
				related.Company							= Company	
				related.Customer						= CrCustomer
				related.ReceivableInvoiceDetail			= ReceivableInvoiceDetail

		EFTNotiExtractFinalNoteInvoiceDetailsRel		
			one-to-one relation to EFTNotiExtractFinalNoteInvoiceDetails
			Field Mapping uses ByEFTNotificationExtractResult
				related.EFTNotificationExtractResult	= EFTNotificationResult
				related.Company							= Company	
				related.Customer						= CrCustomer
				related.ReceivableInvoiceDetail			= ReceivableInvoiceDetail


		ElectronicFundsTransferTransactionFinalNotifRel
			one-to-many relation to ElectronicFundsTransferTransaction
			Field Mapping uses Set2
				related.CustomerGroup	  							= CustomerGroup
				related.ProcessingCompany 							= ProcessingCompany
				related.CrCustomer		  							= CrCustomer
			Instance Selection
				where ((LocalBankTransactionCode not entered or related.ReceivableInvoiceDetail.BankTransactionCode = LocalBankTransactionCode)
				and not related.ReceivableInvoiceDetail.IsPaid
				and not related.EftAction.Hold
				and related.ElectronicFundsTransferTransaction.EftType.FinalNote
				and related.EftNote.FinalNoteSent)

		ElectronicFundsTransferTransactionPreNotifRel
			one-to-many relation to ElectronicFundsTransferTransaction
			Field Mapping uses Set2
				related.CustomerGroup	  							= CustomerGroup
				related.ProcessingCompany 							= ProcessingCompany
				related.CrCustomer		  							= CrCustomer
			Instance Selection
				where ((LocalBankTransactionCode not entered or related.ReceivableInvoiceDetail.BankTransactionCode = LocalBankTransactionCode)
				and not related.ReceivableInvoiceDetail.IsPaid
				and not related.EftAction.Hold
				and related.ElectronicFundsTransferTransaction.EftType.Prenote
				and related.EftNote.PrenoteSent)
		
		CompanyCustomerContactRel	
			one-to-many relation to CompanyCustomerContact
			Field Mapping uses symbolic key
				related.Company		 = ProcessingCompany
				related.Customer	 = CrCustomer


	Rule Blocks
		CurrencyConversion
			CurrencyWork.FinanceEnterpriseGroup								= LocalFinanceEnterpriseGroup
			CurrencyWork.ExchangeDate										= LocalExchangeDate
			CurrencyWork.TransactionAmount									= LocalTransactionAmount
			CurrencyWork.FromCurrency										= LocalFromCurrency
			CurrencyWork.BaseAmount.ToCurrency								= LocalToCurrency
			LocalOutputCurrencyAmount										= CurrencyWork.BaseAmount.OutputCurrencyAmount


		SumEFTTransactionPreNotifRelAmounts
            if (!SumOfEFTTransactionPreNotifRelAmountsDone)
                initialize SumOfEFTTransactionPreNotifRelRIDSignedTransactionAmount
                initialize SumOfEFTTransactionPreNotifRelRIDDiscountAmountOrigDiscAmt
                initialize SumOfEFTTransactionPreNotifRelNetAmount
                initialize InstanceCountOfEFTTransactionPreNotifRel
                    for each ElectronicFundsTransferTransactionPreNotifRel
                        SumOfEFTTransactionPreNotifRelRIDSignedTransactionAmount     += each.ReceivableInvoiceDetail.SignedTransactionAmount
                        SumOfEFTTransactionPreNotifRelRIDDiscountAmountOrigDiscAmt   += each.ReceivableInvoiceDetail.DiscountAmount.OrigDiscAmt[1]
                        SumOfEFTTransactionPreNotifRelNetAmount                      += each.NetAmount
                        InstanceCountOfEFTTransactionPreNotifRel                     += 1
                SumOfEFTTransactionPreNotifRelAmountsDone = true
 
        SumEFTTransactionFinalNotifRelAmounts
            if (!SumOfEFTTransactionFinalNotifRelAmountsDone)
                initialize SumOfEFTTransactionFinalNotifRelRIDSignedTransactionAmount
                initialize SumOfEFTTransactionFinalNotifRelRIDDiscountAmountOrigDiscAmt
                initialize SumOfEFTTransactionFinalNotifRelNetAmount
                initialize InstanceCountOfEFTTransactionFinalNotifRel
                    for each ElectronicFundsTransferTransactionFinalNotifRel
                        SumOfEFTTransactionFinalNotifRelRIDSignedTransactionAmount       += each.ReceivableInvoiceDetail.SignedTransactionAmount
                        SumOfEFTTransactionFinalNotifRelRIDDiscountAmountOrigDiscAmt     += each.ReceivableInvoiceDetail.DiscountAmount.OrigDiscAmt[1]
                        SumOfEFTTransactionFinalNotifRelNetAmount                        += each.NetAmount
                        InstanceCountOfEFTTransactionFinalNotifRel                       += 1
                SumOfEFTTransactionFinalNotifRelAmountsDone = true

	
	Derived Fields
		NetAmount is a DerivedField 
			type is like InternationalAmount
			if (ReceivableInvoiceDetail.ReceivableInvoiceDetailType.CreditMemo)
				return NetAmt * -1
			else
				return NetAmt

		ActualBankDayNumber is a DerivedField
			type is Date
			restricted
			if (ActualBankDayNumberRel exists)
				LocalActualBankDayNumber 			 		 = 0
				for each ActualBankDayNumberRel
					if (LocalActualBankDayNumber 			<= LocalDueDays)
						LocalActualBankDayNumber 			+= 1
						LocalBankDate 				 		= each.SystemCalendarDate
					else
						end for each
				return LocalBankDate
			else
				initialize LocalActualBankDayNumber
				return current date + LocalDueDays

		DerivedLocalRoundTo	is a DerivedField
			type is Decimal 5.4
			restricted
			if (LocalProcessingCompany.BaseNumberOfDecimals = 2)
				return .01
			else
			if (LocalProcessingCompany.BaseNumberOfDecimals = 0)
				return 1
			else
			if (LocalProcessingCompany.BaseNumberOfDecimals = 3)
				return .001
			else
			if (LocalProcessingCompany.BaseNumberOfDecimals = 4)
				return .0001

		FileHeaderReferenceNumber	is a DerivedField 
			type is Alpha 1
			restricted
			return " "

		DerivedFileName is a StringField
			type is Alpha 100
			restricted
			"Company "
			ProcessingCompany
			" Customer "
			CrCustomer
			" EFT Notification Print "
			"Date "
			LocalPrintDateIDM

		DerivedCurrentDateForIDM is a DerivedField
			type is Date
			return current corporate date

		DerivedCompanyEFTNotificationPrintEmailSubject is a DerivedField
			type is Alpha size 255
			restricted
			LocalIDMEmailSubject = ProcessingCompany.EFTNotificationPrintIDMEmailSubject
			return LocalIDMEmailSubject text

		DerivedEFTNotificationPrintEmailSubject is a MessageField
			restricted
			"EFTNotificationPrint<ProcessingCompany.Name>_<CrCustomer.Name>_<DerivedCurrentDateForIDM>"

		DerivedEFTBank is a DerivedField
			type is AlphaUpper size 15
			return last CrCustomer.CustomerEFTDraftBankRel.CustomerDraftBank.BOEEFTBank

		DerivedEFTBankAccount is a DerivedField
			type is AlphaUpper size 35
			return last CrCustomer.CustomerEFTDraftBankRel.CustomerDraftBank.BOEEFTBankAccount

		FinalNotifTotalTransactionAmount is a DerivedField
            type is like InternationalAmount
            include SumEFTTransactionFinalNotifRelAmounts
            return SumOfEFTTransactionFinalNotifRelRIDSignedTransactionAmount
 
        FinalNotifTotalDiscountAmount is a DerivedField
            type is like InternationalAmount
            include SumEFTTransactionFinalNotifRelAmounts
            return SumOfEFTTransactionFinalNotifRelRIDDiscountAmountOrigDiscAmt
 
        FinalTotalNetAmount is a DerivedField
            type is like InternationalAmount
            include SumEFTTransactionFinalNotifRelAmounts
            return SumOfEFTTransactionFinalNotifRelNetAmount
 
        FinalNotificationCount is a DerivedField
            type is Numeric size 6
            include SumEFTTransactionFinalNotifRelAmounts
            return InstanceCountOfEFTTransactionFinalNotifRel
 
        PreNotifTotalTransactionAmount is a DerivedField
            type is like InternationalAmount
            include SumEFTTransactionPreNotifRelAmounts
            return SumOfEFTTransactionPreNotifRelRIDSignedTransactionAmount
 
        PreNotifTotalDiscountAmount is a DerivedField
            type is like InternationalAmount
            include SumEFTTransactionPreNotifRelAmounts
            return SumOfEFTTransactionPreNotifRelRIDDiscountAmountOrigDiscAmt
 
        PreTotalNetAmount is a DerivedField
            type is like InternationalAmount
            include SumEFTTransactionPreNotifRelAmounts
            return SumOfEFTTransactionPreNotifRelNetAmount
 
        PreNotificationCount is a DerivedField
            type is Numeric size 6
            include SumEFTTransactionPreNotifRelAmounts
            return InstanceCountOfEFTTransactionPreNotifRel

		WithPreNotifLines is a DerivedField
			type is Alpha 3
			if (ElectronicFundsTransferTransactionPreNotifRel exists)
				return "Yes"
			else
				return "No"

		WithFinalNotifLines is a DerivedField
			type is Alpha 3
			if (ElectronicFundsTransferTransactionFinalNotifRel exists)
				return "Yes"
			else
				return "No"
	
	Sets

		Set2
			indexed
			Sort Order
				ElectronicFundsTransferTransaction.CustomerGroup
				ElectronicFundsTransferTransaction.ProcessingCompany
				CrCustomer
				Company
				ReceivableInvoiceDetail
				ElectronicFundsTransferTransaction.EftType
				ElectronicFundsTransferTransaction.EftSeq

		Set1
			not indexed
			Sort Order
				ElectronicFundsTransferTransaction.CustomerGroup
				ElectronicFundsTransferTransaction.ProcessingCompany
				Company
				ReceivableInvoiceDetail
				ElectronicFundsTransferTransaction.EftType
				ElectronicFundsTransferTransaction.EftSeq

		ByCreditAnalyst
			duplicates
			Sort Order
				ComCustomerRel.CreditAnalyst
				CrCustomer


		ByEFTPaymentCreationResult	


			Sort Order
				EFTPaymentCreationResult descending
				CustomerGroup
				ProcessingCompany
				CrCustomer
				Company
				ReceivableInvoiceDetail
				ElectronicFundsTransferTransaction


		ByEFTNotificationResult	


			Sort Order
				EFTNotificationResult descending
				CustomerGroup
				ProcessingCompany
				CrCustomer
				Company
				ReceivableInvoiceDetail
				ElectronicFundsTransferTransaction


		ByEFTNotificationPrintResult	


			Sort Order
				EFTNotificationPrintResult descending
				CustomerGroup
				ProcessingCompany
				CrCustomer
				Company
				ReceivableInvoiceDetail
				ElectronicFundsTransferTransaction


		ByEFTExtractResult	


			Sort Order
				EFTExtractResult descending
				CustomerGroup
				ProcessingCompany
				CrCustomer
				Company
				ReceivableInvoiceDetail
				ElectronicFundsTransferTransaction

	Actions		
		EFTNotificationPrint is a Set Action
			restricted
			Parameters
				PrmFinanceEnterpriseGroup									is a FinanceEnterpriseGroup
				PrmCustGroup												is a CustomerGroup
				PrmCompany													is a ReceivableCompany
				PrmBankTransactionCode										is a BankTransactionCode
					context of PrmFinanceEnterpriseGroup
				PrmDataFileName												is AlphaUpper size 50
				PrmIDMPrinter												is a IDMPrinter
				PrmCreateDate												is TimeStamp
				PrmProcessingCompany 										is a ReceivableCompany
				PrmEFTNotificationPrintResult								is a EFTNotificationPrintResult
					context of PrmFinanceEnterpriseGroup
				
			Parameter Rules


			Local Fields
				LocEFTNotiPrintResult										is an EFTNotificationPrintResult
					context of PrmFinanceEnterpriseGroup
				LocalEftCustomer											is like Customer
				NextSentance												is Boolean
				EFTNotifyRelExists											is Boolean
				LocalAltEdiType												is like AltEdiType
				LocalAltEdiNbr												is like AltEdiNbr
				LocalFaxNumber												is like FaxNumber
				LocalCreditAnlyst											is like CreditAnalyst
				LocalContact												is like Contact
				LocalEdiNbr													is like EDINumber

			Instance Selection
				where ((PrmCustGroup entered
				and	 PrmCustGroup = CustomerGroup
				and	!EftNote.NotePrinted)
				or	 (PrmCompany entered
				and	!EftNote.NotePrinted
				and 	CustomerGroup = PrmCompany.CustomerGroupField.CustomerGroup
				and 	PrmCompany = ProcessingCompany))				
			
			Sort Order is Set2

			Action Rules
				Empty Set Rules
					invoke FastUpdate PrmEFTNotificationPrintResult
						invoked.RecordsExists 							= false
						invoked.ProcessingCompany						= PrmProcessingCompany
					invoke UpdateStatusOnResult	PrmEFTNotificationPrintResult

				Set Rules
					Entrance Rules
						LocEFTNotiPrintResult									= PrmEFTNotificationPrintResult
						LocalEFTNotificationPrintResult							= LocEFTNotiPrintResult
						LocalCurrencyTable 										= ReceivableInvoiceRel.CurrencyTable

						PrmProcessingCompany = ProcessingCompany












					Exit Rules
						LocalFinanceEnterpriseGroup							= PrmFinanceEnterpriseGroup
						LocalEFTNotificationPrintResult						= PrmEFTNotificationPrintResult
						if (PrmCompany entered)
							LocalCustomerGroup								= PrmCompany.CustomerGroupField.CustomerGroup
						else
							LocalCustomerGroup								= PrmCustGroup
												
						if (WorkPreNotificationPrintRel not exists)
							invoke FastUpdate PrmEFTNotificationPrintResult
								invoked.RecordsExists 							= false
								invoked.ProcessingCompany						= PrmProcessingCompany
							invoke UpdateStatusOnResult	PrmEFTNotificationPrintResult
						else	
							invoke ProcessEFTNotificationPrint first WorkPreNotificationPrintRel in background
								invoked.PrmCustGroup							= PrmCustGroup
								invoked.PrmLCompany								= PrmCompany
								invoked.PrmFinanceEnterpriseGroup				= PrmFinanceEnterpriseGroup
								invoked.PrmCashManagementGroup					= PrmFinanceEnterpriseGroup
								invoked.PrmBankTransactionCode					= PrmBankTransactionCode
								invoked.PrmDataFileName							= PrmDataFileName
								invoked.PrmEFTNotiPrintResult					= LocEFTNotiPrintResult
								if (PrmCompany entered)
									invoked.PrmCustomerBankCompany				= PrmCompany
									invoked.PrmCustomerGroup					= PrmCompany.CustomerGroupField.CustomerGroup
									invoked.PrmCustomerGroupEntered				= false						
									invoked.PrmProcessingCompany				= PrmCompany
									invoked.PrmDueType							= PrmCompany.EFTDueDaysType
									invoked.PrmDueDays							= PrmCompany.EFTDueDays
									invoked.PrmEFTCalendar						= PrmCompany.EFTCalendar
								else
									invoked.PrmCustomerGroup					= PrmCustGroup
									invoked.PrmCustomerGroupEntered				= true
									invoked.PrmProcessingCompany				= PrmProcessingCompany
									invoked.PrmDueType							= PrmCustGroup.EFTDueDaysType
									invoked.PrmDueDays							= PrmCustGroup.EFTDueDays
									invoked.PrmEFTCalendar						= PrmCustGroup.EFTCalendar
								invoked.PrmDerivedBankDate						= ActualBankDayNumber

				Instance Rules
					LocalCreateDate												= PrmCreateDate
					LocalPrmCustGroup											= PrmCustGroup
					LocalCompany												= PrmCompany
					LocalFinanceEnterpriseGroup									= PrmFinanceEnterpriseGroup
					LocalCashManagementGroup									= PrmFinanceEnterpriseGroup
					LocalBankTransactionCode									= PrmBankTransactionCode
					LocalDataFileName											= PrmDataFileName
					LocalEFTNotificationPrintResult								= PrmEFTNotificationPrintResult
					if (PrmCompany entered)
						LocalCustomerGroup										= PrmCompany.CustomerGroupField.CustomerGroup
						CustomerGroupEntered									= false
						LocalProcessingCompany  								= PrmCompany
						LocalCashCode											= PrmCompany.EFTDebitCashCode
						LocalProcessingCompanyCurrency							= PrmCompany.Currency
						LocalDueType											= PrmCompany.EFTDueDaysType
						LocalDueDays											= PrmCompany.EFTDueDays
						EFTCalendar												= PrmCompany.EFTCalendar
					else
						CustomerGroupEntered									= true
						LocalCustomerGroup										= PrmCustGroup
						LocalProcessingCompany  								= ProcessingCompany
						LocalCashCode											= ProcessingCompany.EFTDebitCashCode
						LocalProcessingCompanyCurrency							= ProcessingCompany.Currency
						LocalDueType											= PrmCustGroup.EFTDueDaysType
						LocalDueDays											= PrmCustGroup.EFTDueDays
						EFTCalendar												= PrmCustGroup.EFTCalendar	

					if (ElectronicFundsTransferTransaction.CrCustomer = LocalEftCustomer)
						NextSentance					= true
					else
						LocalEftCustomer				= ElectronicFundsTransferTransaction.CrCustomer
						if (ReceivableEFTNotifyRel exists)
							EFTNotifyRelExists = true

							LocalAltEdiType									= CompanyCustomerRel.AlternateEDIType
							LocalAltEdiNbr									= CompanyCustomerRel.AlternateEDINumber
							LocalFaxNumber									= CompanyCustomerRel.FaxNumber
							LocalCreditAnlyst								= CompanyCustomerRel.CreditAnalyst
							LocalContact									= CompanyCustomerRel.Contact
							LocalEdiNbr										= CompanyCustomerRel.EDINumber

						else
							EFTNotifyRelExists = false

					if (EFTNotifyRelExists			
					and (!(ElectronicFundsTransferTransaction.EftType.Prenote and ReceivableEFTNotifyRel.EFTPrenotification.No))
					and ((ReceivableInvoiceDetailRel exists and (!(ReceivableInvoiceDetailRel.EftAction.Hold or ReceivableInvoiceDetailRel.Status >= 7)))
					and ((LocalBankTransactionCode entered and (LocalBankTransactionCode = ReceivableInvoiceDetailRel.BankTransactionCode)) or PrmBankTransactionCode not entered)))
						if (ReceivableInvoiceDetail.ApplicationAmount.FunctionalAmount.EnteredCurrencyAmount = 0
						and ReceivableInvoiceDetail.AdjustmentAmount.FunctionalAmount.EnteredCurrencyAmount = 0)
							LocalDiscountCount 										= 1
							while (LocalDiscountCount <= 3
							and	LocalDiscountAmount = 0
							and	ReceivableInvoiceDetail.DiscountDate.DiscDate[LocalDiscountCount] entered)
								LocalDiscountDate 								= ReceivableInvoiceDetail.DiscountDate.DiscDate[LocalDiscountCount] + CompanyCustomerRel.ApplicationDiscountGraceDays
								if (LocalDiscountDate >= current date)
									if (ReceivableInvoiceDetail.DiscountAmount.OrigDiscAmt[LocalDiscountCount] = 0)
										LocalDiscountAmount 					= ReceivableInvoiceDetail.DiscountPercent.DiscPct[LocalDiscountCount] * ReceivableInvoiceDetail.InvoiceAmount.FunctionalAmount.EnteredCurrencyAmount
									else
										if (ReceivableInvoiceDetail.OriginalCurrency != Company.Currency)
											LocalExchangeDate					= ReceivableInvoiceDetail.TransactionDate
											LocalTransactionAmount				= ReceivableInvoiceDetail.DiscountAmount.OrigDiscAmt[LocalDiscountCount]
											LocalFromCurrency					= ReceivableInvoiceDetail.OriginalCurrency
											LocalToCurrency						= Company.Currency
											include CurrencyConversion
											LocalDiscountAmount					= LocalOutputCurrencyAmount
										else
											LocalDiscountAmount					= ReceivableInvoiceDetail.DiscountAmount.OrigDiscAmt[LocalDiscountCount]
										LocalFinalNoteDiscountAmount			= LocalDiscountAmount 
									 	if (LocalProcessingCompany entered and PrmCustGroup entered)
									 		if (ReceivableInvoiceDetail.OriginalCurrency != LocalProcessingCompanyCurrency)
												LocalExchangeDate				= ReceivableInvoiceDetail.TransactionDate
												LocalTransactionAmount			= ReceivableInvoiceDetail.DiscountAmount.OrigDiscAmt[LocalDiscountCount]
												LocalFromCurrency				= ReceivableInvoiceDetail.OriginalCurrency
												LocalToCurrency					= LocalProcessingCompanyCurrency
												include CurrencyConversion
												LocalProcCompanyDiscountAmount 	= LocalOutputCurrencyAmount
												LocalDiscountAmount				= LocalOutputCurrencyAmount
											else
												LocalProcCompanyDiscountAmount 	= ReceivableInvoiceDetail.DiscountAmount.OrigDiscAmt[LocalDiscountCount]
												LocalDiscountAmount				= ReceivableInvoiceDetail.DiscountAmount.OrigDiscAmt[LocalDiscountCount]
								LocalDiscountCount 							   += 1

						if (LocalProcessingCompany entered and PrmCustGroup entered
						and ReceivableInvoiceDetail.OriginalCurrency != LocalProcessingCompanyCurrency)
							LocalExchangeDate									= ReceivableInvoiceDetail.TransactionDate
							LocalFromCurrency									= ReceivableInvoiceDetail.OriginalCurrency
							LocalToCurrency										= LocalProcessingCompanyCurrency
							LocalTransactionAmount								= ReceivableInvoiceDetail.InvoiceAmount.CurrencyAmount
							include CurrencyConversion
							LocalOriginalAmount									= LocalOutputCurrencyAmount
							LocalTransactionAmount								= ReceivableInvoiceDetail.ApplicationAmount.CurrencyAmount
							include CurrencyConversion
							LocalOriginalAppliedAmount							= LocalOutputCurrencyAmount
							LocalTransactionAmount								= ReceivableInvoiceDetail.AdjustmentAmount.CurrencyAmount
							include CurrencyConversion
							LocalOriginalAdjustmentAmount						= LocalOutputCurrencyAmount

						invoke Create WorkPreNotificationPrint
							assign result to NewPreNotifyPrint
							invoked.FinanceEnterpriseGroup						= PrmFinanceEnterpriseGroup
							invoked.EFTNotificationPrintResult 					= LocEFTNotiPrintResult
							invoked.CustomerGroupEntered						= CustomerGroupEntered
							invoked.DataFileName								= PrmDataFileName
							invoked.RecKey.CustGroup							= CustomerGroup
							invoked.RecKey.CrCompany							= ProcessingCompany
							invoked.RecKey.CrCustomer							= CrCustomer
							invoked.EftType										= ElectronicFundsTransferTransaction.EftType
							invoked.EftSeq										= ElectronicFundsTransferTransaction.EftSeq
							if (ElectronicFundsTransferTransaction.EftType.Prenote)
								invoked.RecKey.EftSort							= "A"
							else
								invoked.RecKey.EftSort							= "Z"
							invoked.RecKey.Company								= Company
							invoked.RecKey.TransType							= ReceivableInvoiceDetail.ReceivableInvoiceDetailType
							invoked.RecKey.Invoice								= ReceivableInvoiceDetail.Invoice
							invoked.RecKey.PaymentSeq							= ReceivableInvoiceDetail.PaymentSeq
							invoked.BankEntity									= BankEntity
							invoked.BankAccountNumber							= BankAccountNumber
							invoked.DueDate										= ReceivableInvoiceDetail.DueDate
							invoked.TransactionDate								= ReceivableInvoiceDetail.TransactionDate
							invoked.TransactionAmount							= ReceivableInvoiceDetail.InvoiceAmount.FunctionalAmount.EnteredCurrencyAmount
							invoked.AppliedAmount								= ReceivableInvoiceDetail.ApplicationAmount.FunctionalAmount.EnteredCurrencyAmount
							invoked.AdjustmentAmount							= ReceivableInvoiceDetail.AdjustmentAmount.FunctionalAmount.EnteredCurrencyAmount
							invoked.SumLine										= ReceivableInvoiceDetail.SummarizeDetail
							invoked.DiscDate									= ReceivableInvoiceDetail.DerivedEFTNotificationPrintDiscountDate
							invoked.DiscountAmount								= LocalDiscountAmount
							invoked.ProcCompanyDiscountAmount					= LocalProcCompanyDiscountAmount
							invoked.OriginalAmount								= ReceivableInvoiceDetail.InvoiceAmount.CurrencyAmount
							invoked.OriginalAppliedAmount						= ReceivableInvoiceDetail.ApplicationAmount.CurrencyAmount
							invoked.OriginalAdjustmentAmount					= ReceivableInvoiceDetail.AdjustmentAmount.CurrencyAmount
							if (LocalProcessingCompany entered and PrmCustGroup entered
							and ReceivableInvoiceDetail.OriginalCurrency != LocalProcessingCompanyCurrency)
								invoked.DiscountAmount							= LocalProcCompanyDiscountAmount
								invoked.CompanyCurrency							= Company.Currency
								invoked.OriginalAmount							= LocalOriginalAmount
								invoked.OriginalAppliedAmount					= LocalOriginalAppliedAmount
								invoked.OriginalAdjustmentAmount				= LocalOriginalAdjustmentAmount
							invoked.NoteMethod									= ReceivableEFTNotifyRel.EFTNotificationMethod
							invoked.PreNote										= ReceivableEFTNotifyRel.EFTPrenotification
							invoked.OriginalCurrency							= ReceivableInvoiceDetail.OriginalCurrency
							invoked.OrigNd										= ReceivableInvoiceDetail.CurrencyDecimalsNumber
							invoked.CustPoNbr									= ReceivableInvoiceDetail.CustomerPurchaseOrder
							invoked.OrigRate									= ReceivableInvoiceDetail.CurrencyRate
							invoked.CurrMudv									= ReceivableInvoiceDetail.CurrencyMultiplicationOrDivision
							invoked.GroupRate									= ReceivableInvoiceDetail.CurrencyRateToCustomerGroupCurrency
							invoked.GroupMudv									= ReceivableInvoiceDetail.CustomerGroupCurrencyMultiplicationOrDivision
							invoked.BankInstCode								= ReceivableInvoiceDetail.BankTransactionCode
							invoked.XrefType									= ReceivableInvoiceDetail.ReceivableCrossReference.ReceivableInvoiceType
							invoked.XrefNbr										= ReceivableInvoiceDetail.ReceivableCrossReference.ReceivableInvoice
							invoked.AltEdiType									= LocalAltEdiType
							invoked.AltEdiNbr									= LocalAltEdiNbr
							invoked.FaxNumber									= LocalFaxNumber
							invoked.CreditAnlyst								= LocalCreditAnlyst
							invoked.Contact										= LocalContact
							invoked.EdiNbr										= LocalEdiNbr
							invoked.CudName										= CrCustomer.Name
							invoked.CudAddress									= CrCustomer.PostalAddress

						increment EFTNPreWorkCount
						if (EFTNPreWorkCount = 500)
							commit transaction
							initialize EFTNPreWorkCount
						if (ElectronicFundsTransferTransaction.EftType.FinalNote)
							LocalOpenAmount 									= ReceivableInvoiceDetail.InvoiceAmount.FunctionalAmount.EnteredCurrencyAmount - (ReceivableInvoiceDetail.ApplicationAmount.FunctionalAmount.EnteredCurrencyAmount + ReceivableInvoiceDetail.AdjustmentAmount.FunctionalAmount.EnteredCurrencyAmount + LocalFinalNoteDiscountAmount)
							if (WorkFinalNotificationPrintRel exists)
								invoke Update WorkFinalNotificationPrintRel
									if (ReceivableInvoiceDetail.ReceivableInvoiceDetail.ReceivableInvoiceDetailType.CreditMemo)
										invoked.CurrBal 					   -= LocalOpenAmount
									else
										invoked.CurrBal 					   += LocalOpenAmount
							else
								invoke Create WorkFinalNotificationPrint
									invoked.FinanceEnterpriseGroup				= PrmFinanceEnterpriseGroup
									invoked.EFTNotificationPrintResult 			= LocEFTNotiPrintResult
									invoked.Customer 							= NewPreNotifyPrint.RecKey.CrCustomer
									if (ReceivableInvoiceDetail.ReceivableInvoiceDetail.ReceivableInvoiceDetailType.CreditMemo)
										invoked.CurrBal 						= LocalOpenAmount * (-1)
									else
										invoked.CurrBal 						= LocalOpenAmount
						invoke FastUpdate EFTNotificationPrintResultRel
							invoked.RecordsExists 								= true
							invoked.ProcessingCompany							= PrmProcessingCompany


		FastUpdate is an Update Action
			restricted
			bypass field rules

		Create is a Create Action
			restricted

		Update is an Update Action
			restricted

		Delete is a Delete Action
			restricted

		Purge is a Purge Action
			restricted

		EFTNotificationIDMPrint is an Instance Action	
			restricted
			Parameters
				ParmFinanceEnterpriseGroup	is a FinanceEnterpriseGroup
				ParmCustomerGroup			is a CustomerGroup
				ParmReceivableCompany 		is a ReceivableCompany
				ParmCashManagementGroup		is a CashManagementGroup
				ParmPaymentCode				is a BankTransactionCode
					context of ParmCashManagementGroup
				ParmIDMPrinter				is an IDMPrinter
				
			Action Rules
				invoke EFTNotificationIDMPrintSetActionForBatch ElectronicFundsTransferTransaction
					invoked.ParmFinanceEnterpriseGroup	= ParmFinanceEnterpriseGroup
					invoked.ParmCustomerGroup 			= ParmCustomerGroup
					invoked.ParmReceivableCompany		= ParmReceivableCompany
					invoked.ParmCashManagementGroup		= ParmCashManagementGroup
					invoked.ParmPaymentCode				= ParmPaymentCode
					invoked.ParmIDMPrinter				= ParmIDMPrinter

		EFTNotificationIDMPrintSetActionForBatch is a Set Action	
			run in foreground 
			restricted	
			Parameters
				ParmFinanceEnterpriseGroup		is a FinanceEnterpriseGroup
				ParmCustomerGroup				is a CustomerGroup
				ParmReceivableCompany 			is a ReceivableCompany
				ParmCashManagementGroup			is a CashManagementGroup
				ParmPaymentCode					is a BankTransactionCode
					context of ParmCashManagementGroup
				ParmIDMPrinter					is an IDMPrinter

			Parameter Rules
				ParmFinanceEnterpriseGroup 
					required

			Local Fields
				LocalActor						is an Actor
				IDMAttributes
				LocalRecipientEmailAddress		is Alpha 4000
					holds pii
				IDMGenerateDocument

			Instance Selection
				where (Company.FinanceEnterpriseGroup = ParmFinanceEnterpriseGroup
				and (ParmReceivableCompany not entered or ProcessingCompany = ParmReceivableCompany)
				and (ParmCustomerGroup not entered or CustomerGroup = ParmCustomerGroup)
				and (ParmPaymentCode not entered or ReceivableInvoiceDetail.BankTransactionCode = ParmPaymentCode)
				and not ReceivableInvoiceDetail.IsPaid 
				and not EftAction.Hold
				and (EftNote.PrenoteSent or EftNote.FinalNoteSent))

			Sort Order
				CustomerGroup
				ProcessingCompany
				CrCustomer
				ReceivableInvoiceDetail
				ElectronicFundsTransferTransaction.EftType
				ElectronicFundsTransferTransaction.EftSeq

			Action Rules
				Empty Set Rules 
					LocalActor = actor
					send notification
						to LocalActor
						description is "NoRecordsToProcessForEFTNotificationIDMPrint"
						priority is high
						detail is "NoRecordsToProcessForEFTNotificationIDMPrint."

				CrCustomer Set Rules
					Entrance Rules	





						LocalBankTransactionCode   = ParmPaymentCode
						LocalPrintDateIDM  = current corporate date

						initialize IDMGenerateDocument
						initialize LocalRecipientEmailAddress
						
						IDMGenerateDocument.IDMXMLDefinition.Busclass									 = reference to this instance
						IDMGenerateDocument.IDMXMLDefinition.ListName									 = "EFTNotificationPrintListforIDM"
						IDMGenerateDocument.IDMXMLDefinition.DocumentName								 = "EFTNotificationPrint"

						IDMGenerateDocument.IDMXMLDefinition.IDMXMLChildren.IDMXMLChild[1].RelationName	 = "ElectronicFundsTransferTransactionPreNotifRel"
						IDMGenerateDocument.IDMXMLDefinition.IDMXMLChildren.IDMXMLChild[1].ListName	 	 = "EFTNotificationPrintLinesForIDM"
						IDMGenerateDocument.IDMXMLDefinition.IDMXMLChildren.IDMXMLChild[1].LevelSection1 = 1
						IDMGenerateDocument.IDMXMLDefinition.IDMXMLChildren.IDMXMLChild[1].ListTag		 = "PreNotifLines"
						IDMGenerateDocument.IDMXMLDefinition.IDMXMLChildren.IDMXMLChild[1].ItemTag		 = "PreNotifLine"

						IDMGenerateDocument.IDMXMLDefinition.IDMXMLChildren.IDMXMLChild[2].RelationName	 = "ElectronicFundsTransferTransactionFinalNotifRel"
						IDMGenerateDocument.IDMXMLDefinition.IDMXMLChildren.IDMXMLChild[2].ListName	 	 = "EFTNotificationPrintLinesForIDM"
						IDMGenerateDocument.IDMXMLDefinition.IDMXMLChildren.IDMXMLChild[2].LevelSection1 = 2
						IDMGenerateDocument.IDMXMLDefinition.IDMXMLChildren.IDMXMLChild[2].ListTag		 = "FinalNotifLines"
						IDMGenerateDocument.IDMXMLDefinition.IDMXMLChildren.IDMXMLChild[2].ItemTag		 = "FinalNotifLine"

						initialize IDMAttributes
						IDMAttributes.SingleValue.IDMAttribute[1].IDMAttributeName	= "Company"
						IDMAttributes.SingleValue.IDMAttribute[1].IDMAttributeValue	= ProcessingCompany
						IDMAttributes.SingleValue.IDMAttribute[2].IDMAttributeName	= "Customer"
						IDMAttributes.SingleValue.IDMAttribute[2].IDMAttributeValue	= CrCustomer
						IDMAttributes.SingleValue.IDMAttribute[3].IDMAttributeName	= "ReportDate"
						IDMAttributes.SingleValue.IDMAttribute[3].IDMAttributeDate	= LocalPrintDateIDM
						IDMAttributes.SingleValue.IDMAttribute[4].IDMAttributeName	= "CompanyName"
						IDMAttributes.SingleValue.IDMAttribute[4].IDMAttributeValue	= ProcessingCompany.Name
						IDMAttributes.SingleValue.IDMAttribute[5].IDMAttributeName	= "CustomerName"
						IDMAttributes.SingleValue.IDMAttribute[5].IDMAttributeValue	= CrCustomer.Name


						IDMGenerateDocument.IDMAttributes								= IDMAttributes

						if (ProcessingCompany.CustomerGroupField.CustomerGroup.EFTProcessingLevel.GroupLevelProcessing)
							IDMGenerateDocument.TemplateUniqueId = ProcessingCompany.CustomerGroupField.CustomerGroup.EFTNotificationPrintIDMTemplate.IDMUniqueId
							IDMGenerateDocument.FileName		 = DerivedFileName + ProcessingCompany.CustomerGroupField.CustomerGroup.EFTNotificationPrintIDMTemplate.DerivedOutputFormat
						else
							IDMGenerateDocument.TemplateUniqueId = ProcessingCompany.EFTNotificationPrintIDMTemplate.IDMUniqueId
							IDMGenerateDocument.FileName		 = DerivedFileName + ProcessingCompany.EFTNotificationPrintIDMTemplate.DerivedOutputFormat

						if (ParmIDMPrinter entered)
							IDMGenerateDocument.IDMPrinter	 = ParmIDMPrinter 

						if (CompanyCustomerRel.EmailEFTNotificationPrint)
							if (not CompanyCustomerRel.EFTNotificationPrintEmailContactsOnly)
								LocalRecipientEmailAddress += CompanyCustomerRel.EmailAddress
							
							
							for each CompanyCustomerContactRel
								if (each.EmailEFTNotificationPrint
								and each.EmailAddress entered)
									if (LocalRecipientEmailAddress entered)
										LocalRecipientEmailAddress += ","
									LocalRecipientEmailAddress += each.EmailAddress
							
							if (ProcessingCompany.EFTNotificationPrintIDMEmailTemplate entered)
								IDMGenerateDocument.EmailTemplateUniqueID	= ProcessingCompany.EFTNotificationPrintIDMEmailTemplate.IDMUniqueId
							else
								IDMGenerateDocument.IDMEmail.Body			= ""

							if (ProcessingCompany.EFTNotificationPrintIDMEmailSubject entered)
								IDMGenerateDocument.IDMEmail.Subject		= DerivedCompanyEFTNotificationPrintEmailSubject
							else
								IDMGenerateDocument.IDMEmail.Subject		= DerivedEFTNotificationPrintEmailSubject

							IDMGenerateDocument.IDMEmail.From				= CompanyCustomerRel.EFTNotificationPrintFromAndReplyToEmail
							IDMGenerateDocument.IDMEmail.To					= LocalRecipientEmailAddress

						IDMGenerateDocument.DocumentType		 = "FSM_EFTNotificationPrint"
						IDMGenerateDocument.IDMAccessControlList = "CSFDefined"

						invoke CreateFromGenerateDocument IDMJob
							invoked.Actor				= actor
							invoked.Description			= "EFT Notification Print"
							invoked.IDMGenerateDocument = IDMGenerateDocument
						commit transaction

		EFTNotificationIDMPrintSetAction is a Set Action	

			restricted	
			Parameters
				ParmFinanceEnterpriseGroup		is a FinanceEnterpriseGroup
				ParmCustomerGroup				is a CustomerGroup
				ParmReceivableCompany 			is a ReceivableCompany
				ParmCashManagementGroup			is a CashManagementGroup
				ParmPaymentCode					is a BankTransactionCode
					context of ParmCashManagementGroup
				ParmIDMPrinter					is an IDMPrinter

			Parameter Rules
				ParmFinanceEnterpriseGroup 
					required

			Local Fields
				LocalActor						is an Actor
				IDMAttributes
				LocalRecipientEmailAddress		is Alpha 4000
					holds pii
				IDMGenerateDocument

			Instance Selection
				where (Company.FinanceEnterpriseGroup = ParmFinanceEnterpriseGroup
				and (ParmReceivableCompany not entered or ProcessingCompany = ParmReceivableCompany)
				and (ParmCustomerGroup not entered or CustomerGroup = ParmCustomerGroup)
				and (ParmPaymentCode not entered or ReceivableInvoiceDetail.BankTransactionCode = ParmPaymentCode)
				and not ReceivableInvoiceDetail.IsPaid 
				and not EftAction.Hold
				and (EftNote.PrenoteSent or EftNote.FinalNoteSent))

			Sort Order
				CustomerGroup
				ProcessingCompany
				CrCustomer
				ReceivableInvoiceDetail
				ElectronicFundsTransferTransaction.EftType
				ElectronicFundsTransferTransaction.EftSeq

			Action Rules
				Empty Set Rules 
					LocalActor = actor
					send notification
						to LocalActor
						description is "NoRecordsToProcessForEFTNotificationIDMPrint"
						priority is high
						detail is "NoRecordsToProcessForEFTNotificationIDMPrint."

				CrCustomer Set Rules
					Entrance Rules	





						LocalBankTransactionCode   = ParmPaymentCode
						LocalPrintDateIDM  = current corporate date

						initialize IDMGenerateDocument
						initialize LocalRecipientEmailAddress
						
						IDMGenerateDocument.IDMXMLDefinition.Busclass									 = reference to this instance
						IDMGenerateDocument.IDMXMLDefinition.ListName									 = "EFTNotificationPrintListforIDM"
						IDMGenerateDocument.IDMXMLDefinition.DocumentName								 = "EFTNotificationPrint"

						IDMGenerateDocument.IDMXMLDefinition.IDMXMLChildren.IDMXMLChild[1].RelationName	 = "ElectronicFundsTransferTransactionPreNotifRel"
						IDMGenerateDocument.IDMXMLDefinition.IDMXMLChildren.IDMXMLChild[1].ListName	 	 = "EFTNotificationPrintLinesForIDM"
						IDMGenerateDocument.IDMXMLDefinition.IDMXMLChildren.IDMXMLChild[1].LevelSection1 = 1
						IDMGenerateDocument.IDMXMLDefinition.IDMXMLChildren.IDMXMLChild[1].ListTag		 = "PreNotifLines"
						IDMGenerateDocument.IDMXMLDefinition.IDMXMLChildren.IDMXMLChild[1].ItemTag		 = "PreNotifLine"

						IDMGenerateDocument.IDMXMLDefinition.IDMXMLChildren.IDMXMLChild[2].RelationName	 = "ElectronicFundsTransferTransactionFinalNotifRel"
						IDMGenerateDocument.IDMXMLDefinition.IDMXMLChildren.IDMXMLChild[2].ListName	 	 = "EFTNotificationPrintLinesForIDM"
						IDMGenerateDocument.IDMXMLDefinition.IDMXMLChildren.IDMXMLChild[2].LevelSection1 = 2
						IDMGenerateDocument.IDMXMLDefinition.IDMXMLChildren.IDMXMLChild[2].ListTag		 = "FinalNotifLines"
						IDMGenerateDocument.IDMXMLDefinition.IDMXMLChildren.IDMXMLChild[2].ItemTag		 = "FinalNotifLine"

						initialize IDMAttributes
						IDMAttributes.SingleValue.IDMAttribute[1].IDMAttributeName	= "Company"
						IDMAttributes.SingleValue.IDMAttribute[1].IDMAttributeValue	= ProcessingCompany
						IDMAttributes.SingleValue.IDMAttribute[2].IDMAttributeName	= "Customer"
						IDMAttributes.SingleValue.IDMAttribute[2].IDMAttributeValue	= CrCustomer
						IDMAttributes.SingleValue.IDMAttribute[3].IDMAttributeName	= "ReportDate"
						IDMAttributes.SingleValue.IDMAttribute[3].IDMAttributeDate	= LocalPrintDateIDM
						IDMAttributes.SingleValue.IDMAttribute[4].IDMAttributeName	= "CompanyName"
						IDMAttributes.SingleValue.IDMAttribute[4].IDMAttributeValue	= ProcessingCompany.Name
						IDMAttributes.SingleValue.IDMAttribute[5].IDMAttributeName	= "CustomerName"
						IDMAttributes.SingleValue.IDMAttribute[5].IDMAttributeValue	= CrCustomer.Name


						IDMGenerateDocument.IDMAttributes								= IDMAttributes

						if (ProcessingCompany.CustomerGroupField.CustomerGroup.EFTProcessingLevel.GroupLevelProcessing)
							IDMGenerateDocument.TemplateUniqueId = ProcessingCompany.CustomerGroupField.CustomerGroup.EFTNotificationPrintIDMTemplate.IDMUniqueId
							IDMGenerateDocument.FileName		 = DerivedFileName + ProcessingCompany.CustomerGroupField.CustomerGroup.EFTNotificationPrintIDMTemplate.DerivedOutputFormat
						else
							IDMGenerateDocument.TemplateUniqueId = ProcessingCompany.EFTNotificationPrintIDMTemplate.IDMUniqueId
							IDMGenerateDocument.FileName		 = DerivedFileName + ProcessingCompany.EFTNotificationPrintIDMTemplate.DerivedOutputFormat

						if (ParmIDMPrinter entered)
							IDMGenerateDocument.IDMPrinter	 = ParmIDMPrinter 

						if (CompanyCustomerRel.EmailEFTNotificationPrint)
							if (not CompanyCustomerRel.EFTNotificationPrintEmailContactsOnly)
								LocalRecipientEmailAddress += CompanyCustomerRel.EmailAddress
							
							
							for each CompanyCustomerContactRel
								if (each.EmailEFTNotificationPrint
								and each.EmailAddress entered)
									if (LocalRecipientEmailAddress entered)
										LocalRecipientEmailAddress += ","
									LocalRecipientEmailAddress += each.EmailAddress
							
							if (ProcessingCompany.EFTNotificationPrintIDMEmailTemplate entered)
								IDMGenerateDocument.EmailTemplateUniqueID	= ProcessingCompany.EFTNotificationPrintIDMEmailTemplate.IDMUniqueId
							else
								IDMGenerateDocument.IDMEmail.Body			= ""

							if (ProcessingCompany.EFTNotificationPrintIDMEmailSubject entered)
								IDMGenerateDocument.IDMEmail.Subject		= DerivedCompanyEFTNotificationPrintEmailSubject
							else
								IDMGenerateDocument.IDMEmail.Subject		= DerivedEFTNotificationPrintEmailSubject

							IDMGenerateDocument.IDMEmail.From				= CompanyCustomerRel.EFTNotificationPrintFromAndReplyToEmail
							IDMGenerateDocument.IDMEmail.To					= LocalRecipientEmailAddress

						IDMGenerateDocument.DocumentType		 = "FSM_EFTNotificationPrint"
						IDMGenerateDocument.IDMAccessControlList = "CSFDefined"

						invoke CreateFromGenerateDocument IDMJob
							invoked.Actor				= actor
							invoked.Description			= "EFT Notification Print"
							invoked.IDMGenerateDocument = IDMGenerateDocument
						commit transaction

		EFTPaymentCreation is a Set Action
			restricted
			Parameters
				PrmEftCompany				is a ReceivableCompany
				PrmCustomer					is like Customer
				PrmPostingDate				is Date
				PrmDepositDate				is Date
				PrmDebitCashCode			is a CashCode
				PrmCreditCashCode			is a CashCode
				PrmProcessLevel				is a ReceivableProcessLevel
				PrmSelectProcessLevel		is a ReceivableProcessLevel
				PrmBankTransactionCode		is a BankTransactionCode
				PrmTermsCode				is a TermsCode
				PrmNotAppldCd				is a ReceivableGeneralLedgerCode
				PrmDiscReasCd				is a ApplicationAdjustmentReason
				PrmOprCode					is like ReceivableOperator
				PrmReference				is AlphaUpper size 10
				PrmCompanyIdOption			is AlphaUpper size 1
				PrmFillLastBlock			is AlphaUpper size 1
				PrmBalancedTape				is AlphaUpper size 1
				PrmIncludeAddenda			is AlphaUpper size 1
				PrmBankCharges				is Decimal size 16.2
				PrmGLAccount				is a FinanceCodeBlock

				PrmCbUserField1				is AlphaUpper size 30
				PrmCbUserField2				is AlphaUpper size 30
				PrmCbUserField3				is AlphaUpper size 30
				PrmCbUserField4				is AlphaUpper size 30

				PrmACHFileName				is AlphaUpper size 50
				PrmBACSFileName				is AlphaUpper size 50
				PrmNonTapeFileName			is AlphaUpper size 50
				PrmSEPAFileName				is AlphaUpper size 50

				PrmReportByCompany			is Boolean
				PrmEFTPaymentCreationResult	is an EFTPaymentCreationResult
				PrmCreateDate				is TimeStamp

			Parameter Rules

			Local Fields
				LocalCrCustomer				is like Customer
				LocalBuildBatch				is Numeric 9
				LocalBatchSequence			is Numeric 9
				LocalDetailCount			is Numeric 9
				LocalDetailTotal			is an InternationalAmount
				LocalBaseCash				is an InternationalAmount
				LocalRnaTotal				is an InternationalAmount
				LocalBaseRna				is an InternationalAmount
				LocalCurrencyRelationship	is a CurrencyRelationship
					context of PrmEftCompany
				LocalTransactionAmount		is an InternationalAmount
				LocalOriginalAmount			is an InternationalAmount
				LocalCreditApplied			is an InternationalAmount
				LocalOriginalCreditApplied	is an InternationalAmount
				LocalSelectSequence			is Numeric 9
				LocalRecordCount			is Numeric 9
				LocalCheckTotal				is an InternationalAmount
				LocalBatchSw				is Boolean

				LocalEFTCalendar			is like SystemCalendar
				LocalCurrencyCode			is like Currency
				LocalDepositDays			is like DepositDays
				LocalDepositType			is Alpha size 1
				LocalGlDays					is like DueDays
				LocalGlType					is Alpha size 1
				LocalAmount					is an InternationalAmount
				LocalPaymentNumber			is AlphaUpper size 22
				LocalSummarizeLine			is Boolean

				LocalOriginalDiscountAmount		is an InternationalAmount
				LocalBaseDiscountAmount			is an InternationalAmount
				LocalPaymentTransactionAmount	is an InternationalAmount
				LocalPaymentOriginalAmount		is an InternationalAmount
				LocalApplicationAmount			is an InternationalAmount
				Continue						is Boolean
				LocalPaymentCompanyInvoiceAmount			is an InternationalAmount
				LocalPaymentCompanyApplicationAmountAmount	is an InternationalAmount
				LocalPaymentCompanyAdjustmentAmountAmount	is an InternationalAmount
				LocalLastSelectApplicationSequence			is Numeric 9
				LocalCreditTotal			is an InternationalAmount
				LocalDebitTotal				is an InternationalAmount
				LocalNetAmount				is an InternationalAmount
				LocalPayNetAmount			is an InternationalAmount

				LocalAchNetAmount			is an InternationalAmount
				LocalAchPayNetAmount		is an InternationalAmount
				LocalAchAmount				is an InternationalAmount
				LocalFactor					is Numeric 9
				LocalSplitAmount			is like InternationalAmount
					precision is 2
				LocalInvoiceDetailCount		is Numeric 9
				InvoiceDetailCount			is Numeric 9
				LocalInvoiceDetailCounter	is Numeric 9
				LocalCount					is Numeric 9

				LocalPaymentFormat			is like PaymentFormat
				LocalProcCompany			is a ReceivableCompany

				LocalBankAccountNumber		is like BankAccountNumber 
					holds pii
				LocalCompanyBankEntity		is like BankEntity
				LocalCompanyBankAccountNumber	is like BankAccountNumber 
					holds pii
				LocalPostingDate			is Numeric 8
				LocalPaymentType			is Alpha size 5 
				LocalPaymentReferance		is Alpha size 20
				ACHNetAmount				is like InternationalAmount
					precision is 2
				ACHZeroNetAmount			is like InternationalAmount
					precision is 0
				ACHNumericNetAmount			is Numeric 10
				ACHAlphaPayNetAmount		is Alpha 10
				BcAlphaEntryDb				is Alpha 12
				BcAlphaEntryCr				is Alpha 12
				NonTapeNetAmount			is an InternationalAmount
					precision is 3
				NonPrecZeroNetAmount		is like InternationalAmount
					precision is 0
				NonTapeNumericNetAmount		is Numeric 19
				NonTapeAlphaPayNetAmount	is Alpha 19
				LocalPhoneNumber			is Alpha size 31
				LocalOutputDetailData		is Alpha size 1000
				LocalAddendaAddSequence		is Numeric 9
				LocalCashBankEntity			is like BankEntity
				LocalACHCashBankEntity		is like BankEntity
				LocalSendBankEntity			is like BankEntity 
				

				LocalAchBatchNumber			is Numeric 9
				FhType						is Alpha size 1
				FhPriority					is Alpha size 2
				LocalACHBankID				is Alpha size 10
				NumericACHBankID			is Numeric 8
				BcOrigDfi					is Alpha size 10
				BcBatchNbr					is Numeric 12
				FhOriginalId				is Alpha size 8
				LocalOchkId					is Alpha size 1
				FhOchkId					is Alpha size 1
				FhOriginalBank				is Alpha size 10
				LocalARCompanyACHBankId		is Alpha size 10
				LocalARCompanyACHBankIdSize is Numeric 2		
				NumericSendACHBankId		is Numeric 10
				LocalArCompACHJustBankId	is Alpha size 10
				LocalCompanyBankIdLast1		is Alpha size 1
				FhSendBank					is Alpha size 10
				FhCreateDate				is Alpha size 6
				LocalFhYear					is Alpha size 4
				LocalFhDay					is Alpha size 2
				LocalFhMonth				is Alpha size 2
				LocalFhDate					is Date
				FhCreateTime				is Alpha size 4
				LocalFhCreateTime			is Time
				FhIdMod						is Alpha size 1
				FhRecSize					is Numeric 3
				FhBlock						is Numeric 2
				FhOriginalName				is like FinancialInstitution
				FhSendName					is like Name	 
					holds pii
				FhRefCode					is Alpha size 1
				FhFormat					is Alpha size 1

				LocalCreditsFl				is Boolean
				LocalDebitsFl				is Boolean
				BhCoName					is Alpha size 16
				BhClass						is Numeric 3
				BhData						is Alpha size 20
				BhCoId						is AlphaUpper size 10
				BhEntryCl					is Alpha size 3
				BhEntryDesc					is Alpha size 10
				BhCoDesc					is Alpha size 6
				BhEntryDt					is Numeric 6
				BhStatus					is Numeric 1
				BhOrigDfi					is like BankEntity
				BhBatchNbr					is Numeric 12

				AdTranCode					is Numeric 2
				AdRecId						is Alpha size 9
				AdRecIdSize					is Numeric 9
				LocalBatchEntryHash			is Numeric 10
				LocalFileEntryHash			is Numeric 10
				LocalCheckDigit				is Alpha size 1
				AdDfi						is Alpha size 17
				AdAmount					is like InternationalAmount
					precision is PrmDebitCashCode.Currency
				AdPrecZeroAmount			is like InternationalAmount
					precision is 0

				LocalAdAmount				is like InternationalAmount
					precision is PrmDebitCashCode.Currency.NumberOfDecimals
				LocalAdjustAmount			is like InternationalAmount
					precision is PrmDebitCashCode.Currency.NumberOfDecimals
				LocalAdAmountSize			is Numeric 9
				AdNumericAmount				is Numeric 10 	
				AdIdNbr						is Alpha size 15
				AdName						is like Name	 
					holds pii
				AdData						is Alpha size 2
				AdAddenda					is Numeric 1
				LocalTracePayment			is Numeric 9
				AdTrace						is Alpha size 15
				FileBlockCalc				is Numeric 9
				FileBlockCount				is Numeric 9
				
				AddendaAddress1				is like AddressLine
				AddendaAddress2				is like AddressLine
				AddendaAddSequence			is Numeric 9
				EntryDetailAddSequence		is Numeric 9
				AddendaCity					is like MunicipalityLarge 
				AddendaState				is like StateProvince 
				AddendaZipCode				is like PostalCode
				AddendaCountryCode			is like Country 
				AddendaFiller				is Alpha size 20

				LocalInvoiceStartsWithEF	is Boolean
				AddendaInvoice				is like Invoice 
				AddendaAmount				is an InternationalAmount
					precision is 2
				AddendaPrecZeroAmount		is like InternationalAmount
					precision is 0				
				AddendaNumericAmount		is Alpha 10
				AddendaAmountSign			is Alpha size 1
				AddendaInvoiceAmount		is an InternationalAmount
					precision is 2
				AddendaPrecZeroInvoiceAmount	is like InternationalAmount
					precision is 0
				AddendaNumericInvoiceAmount is Alpha 10
				LocalAddendaInvoiceDate		is Date
				AddendaInvoiceDate			is Numeric 8

				LocalBatchTotal				is like InternationalAmount
					precision is 2
				LocalPrecZeroBatchTotal		is like InternationalAmount
					precision is 0	
				LocalNumericBatchTotal		is Numeric 10
				LocalBatchEntryDb			is an InternationalAmount
					precision is 2
				LocalFileEntryDb			is an InternationalAmount
					precision is 2
				LocalBatchEntryCr			is an InternationalAmount
					precision is 2
				LocalFileEntryCr			is an InternationalAmount
					precision is 2
				LocalBatchEntryCount		is Numeric 9
				LocalEntryCount				is Numeric 9
				LocalFileEntryCount			is Numeric 9

				BcType						is Alpha size 1
				BcEntryCount				is Numeric 9
				BcEntryHash					is Numeric 10
				BcEntryDb					is an InternationalAmount
					precision is 2
				BcPrecZeroEntryDb			is like InternationalAmount
					precision is 0
				BcNumericEntryDb			is Numeric 19
				BcEntryCr					is an InternationalAmount
					precision is 2
				BcPrecZeroEntryCr			is like InternationalAmount
					precision is 0
				BcNumericEntryCr			is Numeric 19
				BcCoId						is Alpha size 10
				BcClass						is Numeric 3
				PrintOnce					is Boolean

				FcType						is Alpha size 1
				FcBatchCount				is Numeric 6
				FcBlockCount				is Numeric 6
				FcEntryCount				is Numeric 8
				FcEntryHash					is Numeric 10
				FcEntryDb					is an InternationalAmount
					precision is 2
				FcPrecZeroEntryDb			is like InternationalAmount
					precision is 0
				FcNumericEntryDb			is Numeric 19
				FcEntryCr					is an InternationalAmount
					precision is 2
				FcPrecZeroEntryCr			is like InternationalAmount
					precision is 0
				FcNumericEntryCr			is Numeric 19
				FcAlphaEntryDb				is Alpha 12
				FcAlphaEntryCr				is Alpha 12

				VhRecId						is Alpha size 4
				VhSerialNbr					is Alpha size 6
				VhAccessInd					is Alpha size 1
				VhOwnerId					is Alpha size 26
				VhOwner1					is Alpha size 4
				VhOwner2					is Alpha size 18
				VhOwner3					is Alpha size 4
				VhSurfaceId					is Alpha size 1
				VhPhysRecLength				is Alpha size 1
				VhSectorSeqInd				is Alpha size 2
				VhFileLabelAlloc			is Alpha size 1
				VhLabelStdVersion			is Alpha size 1

				Hd1LabelId					is Alpha size 3
				Hd1LabelNbr					is Alpha size 1
				Hd1FileId1					is Alpha size 3
				Hd1UserNbr					is Alpha size 6
				Hd1FileId3					is Alpha size 1
				Hd1FileId4					is Alpha size 1
				Hd1SetId					is Alpha size 6
				Hd1SectionNbr				is Alpha size 4
				Hd1SequenceNbr				is Alpha size 4
				Hd1Generation				is Alpha size 1
				Hd1ProcSp					is Alpha size 1
				LocalCurrentDate			is Date
				Hd1ProcYy					is Alpha size 2
				Hd1ProcDdd					is Alpha size 3
				Hd1SingleSpace				is Alpha size 1
				Hd1ExpirationDate			is Alpha size 5
				Hd1AccessInd				is Alpha size 1
				Hd1BlockCnt					is Alpha size 6
				Hd1ResForFuture				is Alpha size 1

				Hd2LabelId					is Alpha size 3
				Hd2LabelNbr					is Alpha size 1
				Hd2RecordFormat				is Alpha size 1
				Hd2BlockLength				is Alpha size 5
				Hd2RecordLength				is Alpha size 5
				Hd2ReserveForOs				is Alpha size 1
				Hd2BufferOffset				is Alpha size 2
				Hd2ResForFuture				is Alpha size 1
				
				UhRecId						is Alpha size 4
				UhBacsProcDay				is Alpha size 6 
				UhProcSp					is Alpha size 1
				UhProcYy					is Alpha size 2 
				UhProcDdd					is Alpha size 3
				UhReceiverId				is Alpha size 3 
				UhRec9s						is Alpha size 6 
				UhRecNull					is Alpha size 4
				UhCurrCode					is Alpha size 3 
				UhCountryCode				is Alpha size 3
				UhWorkCode					is Alpha size 3
				UhWorkCode1					is Alpha size 7 
				UhWorkCode2					is Alpha size 2
				UhFileNumber				is Alpha size 3
				UhAuditPrtId				is Alpha size 7 
				UhAud1						is Alpha size 3
				UhAud2						is Alpha size 3
				UhFree						is Alpha size 3
				
				BdDestSortCd				is Numeric 6
				BdDestAcctNbr				is Numeric 8
				BdDestAcctTyp				is Numeric 1
				BdTransCode					is Numeric 2
				BdOrigSortCd				is Numeric 6
				BdOrigAcctNbr				is Numeric 8
				BdNumericOrigAcctNbr		is Numeric 8
				BdAlphaOrigAcctNbr			is Alpha 8
				BdFreeFormat				is Numeric 4
				BdTransAmt					is an InternationalAmount
					precision is 2
				BdUsersName					is Alpha size 18
				BdUsersRef					is Alpha size 18
				BdDestAcctNam				is Alpha size 18				

				Ef1LabelId					is Alpha size 3
				Ef1LabelNbr					is Alpha size 1
				Ef1Header11 				is Alpha size 50
				Ef1BlockCount				is Alpha size 6
				Ef1Header12 				is Alpha size 20

				Ef2LabelId					is Alpha size 3
				Ef2LabelNbr					is Alpha size 1
				Ef2Header21 				is Alpha size 76
				
				UtRecId						is Alpha size 4
				UtDebitTotal				is an InternationalAmount 
				UtCreditTotal				is an InternationalAmount
				UtDebitCount				is Numeric 7
				UtCreditCount				is Numeric 7
				UtFree						is Alpha size 26
				
				LocalDebitCount				is Numeric 7
				LocalPrecBdTransAmt			is like InternationalAmount
					precision is 0
				LocalTotalBdTransAmt		is an InternationalAmount
				LocalNumericBdTransAmt		is Numeric 11
				LocalTotalNumericBdTransAmt is Numeric 11
				LocalTransactionIDNumber	is like BankTransactionCode
				ReceivablePaymentHeaderView	is a ReceivablePaymentHeader view
				ReceivablePaymentView		is a ReceivablePayment view
				NewReceivableInvoice		is a ReceivableInvoice view
				LocalEftCustomer			is like Customer

				LocalEFTWorkCustomer		is like Customer
				LocalInvoiceSplitCount		is Numeric 9
				LocalSplitPayAmount			is an InternationalAmount
				LoopCounter					is Numeric 9
				
				LocalPaymentHeaderDetailCount	is Numeric 9
				LocalPaymentHeaderDetailTotal	is an InternationalAmount
				LocalPaymentHeaderBaseTotal		is an InternationalAmount
				
				LastEFTRIDetail				is like ReceivableInvoiceDetail
				LocalDistributionAmount				is an InternationalAmount
				LocalDistributionOriginalAmount		is an InternationalAmount
				CashLedgerTransactionView	is a CashLedgerTransaction view
				NextSentance				is Boolean
				EFTNotifyRelExists			is Boolean
				LocalTriggerReceivableInvoice	is Alpha 100
				ReceivableReasonDescription	is like Description
				DistributionAccountProject	is like Project
				PaymentHeaderExist			is Boolean

			Instance Selection
				where (CustomerGroup = PrmEftCompany.CustomerGroupField.CustomerGroup
				and	ProcessingCompany = PrmEftCompany
				and   (ElectronicFundsTransferTransaction.EftType.Extracted
				and	EftExtract.Extracted
				and	EftCreated.EFTNotCreated
				and	!TemporaryHold.SentForApproval)
				and   ((PrmSelectProcessLevel entered and PrmSelectProcessLevel = ReceivableInvoiceDetail.ReceivableProcessLevel) or PrmSelectProcessLevel not entered)
				and   ((PrmBankTransactionCode entered and PrmBankTransactionCode = ReceivableInvoiceDetail.BankTransactionCode) or PrmBankTransactionCode not entered)
				and   ((PrmTermsCode entered and PrmTermsCode = ReceivableInvoiceDetail.TermsCode) or PrmTermsCode not entered))

			Sort Order is Set2

			Rule Blocks
				StripLeadingSpaces	
					while (LocalArCompACHJustBankId[1:1] = blank)
						LocalArCompACHJustBankId = LocalArCompACHJustBankId[2:10]

				CreateReceivablePaymentHeader
					if (!PrmEftCompany.PaymentBatchNumbering)	
						LocalBatchNumber 	= PrmEftCompany.LastPaymentAutoBatchNumber
						LocalBatchSw		= false
						while (!LocalBatchSw)
							LocalBatchNumber 	+= 1
							LocalCompany		 = PrmEftCompany
							LocalBatchNumber	 = LocalBatchNumber
							if (ReceivablePaymentHeaderRel not exists)
								LocalBatchSw = true
						invoke FastUpdate PrmEftCompany
							invoked.LastPaymentAutoBatchNumber	= LocalBatchNumber 

					if (PrmEftCompany.CustomerGroupField.CustomerGroup.EFTProcessingLevel = "G")
						LocalEFTCalendar						= PrmEftCompany.CustomerGroupField.CustomerGroup.EFTCalendar
						LocalCurrencyCode						= PrmEftCompany.CustomerGroupField.CustomerGroup.Currency
					else
						LocalEFTCalendar						= PrmEftCompany.EFTCalendar
						LocalCurrencyCode						= PrmEftCompany.Currency
 
					if (PrmProcessLevel entered and !PrmProcessLevel.UsedFlag)
						invoke FastUpdate PrmProcessLevel
							invoked.UsedFlag			= true 
					LocalBankTransactionCode			= PrmEftCompany.EFTDepositBankCode 
					LocalCashManagementGroup			= PrmEftCompany.EFTDepositBankCode.CashManagementGroup


					invoke FastUpdate BankTransactionCodeRel

						invoked.UsedFlag				= true
					invoke OpenBatchUnreleased.Create ReceivablePaymentHeader
						assign result to ReceivablePaymentHeaderView
						if (!PrmEftCompany.PaymentBatchNumbering)
							invoked.ReceivablePaymentHeader	= LocalBatchNumber
						invoked.Status					= 0
						if (PrmEftCompany.Currency = LocalCurrencyCode)
							invoked.CurrencyRateToCustomerGroupCurrency				= 1
							invoked.CustomerGroupCurrencyMultiplicationOrDivision	= "M"
						else
							CurrencyWork.FromCurrency						= PrmEftCompany.Currency
							CurrencyWork.BaseAmount.ToCurrency				= LocalCurrencyCode
							invoked.CurrencyRateToCustomerGroupCurrency		= CurrencyWork.BaseAmount.OutputCurrencyRate

							LocalCurrencyRelationship.FromCurrency			= PrmEftCompany.Currency
							LocalCurrencyRelationship.ToCurrency			= LocalCurrencyCode
							if (LocalCurrencyRelationship.MultDiv.Multiply)
								invoked.CustomerGroupCurrencyMultiplicationOrDivision 	= "M"
							else
								invoked.CustomerGroupCurrencyMultiplicationOrDivision 	= "D"
						invoked.Company						= PrmEftCompany
						invoked.Origin						= "E"
						invoked.TransientReceivableOperator	= PrmOprCode
						invoked.ReceivableProcessLevel		= PrmProcessLevel
						invoked.CashCode					= PrmDebitCashCode
						invoked.DepositBankCode				= PrmEftCompany.EFTDepositBankCode
						invoked.TransactionIDNumber			= BankTransactionCodeRel.TransactionIDNumber 
						invoked.Currency					= PrmDebitCashCode.Currency
						invoked.ReceivableLockBox			= ""
						invoked.CurrencyDecimalsNumber		= PrmEftCompany.Currency.NumberOfDecimals
						invoked.Reference					= PrmReference
						invoked.AdditionalAmount			= PrmBankCharges
						invoked.AdditionalAmountAccount		= PrmGLAccount
						invoked.ReceivedNotAppliedReceivableGeneralLedgerCode		= PrmNotAppldCd
						invoked.PrepaymentReceivableGeneralLedgerCode				= PrmEftCompany.PrepaymentReceivableGeneralLedgerCode
						invoked.DepositDate					= PrmDepositDate
						invoked.GeneralLedgerDate			= PrmPostingDate
						if (PrmEftCompany.Currency = PrmDebitCashCode.Currency)
							invoked.CurrencyRate						= 1
							invoked.CurrencyMultiplicationOrDivision	= "M"
						else
							CurrencyWork.FromCurrency					= PrmEftCompany.Currency
							CurrencyWork.BaseAmount.ToCurrency			= PrmDebitCashCode.Currency
							invoked.CurrencyRate						= CurrencyWork.BaseAmount.OutputCurrencyRate

							LocalCurrencyRelationship.FromCurrency		= PrmEftCompany.Currency
							LocalCurrencyRelationship.ToCurrency		= PrmDebitCashCode.Currency
							if (LocalCurrencyRelationship.MultDiv.Multiply)
								invoked.CurrencyMultiplicationOrDivision 	= "M"
							else
								invoked.CurrencyMultiplicationOrDivision 	= "D"

						invoked.CbUserField1				= PrmCbUserField1
						invoked.CbUserField2				= PrmCbUserField2
						invoked.CbUserField3				= PrmCbUserField3
						invoked.CbUserField4				= PrmCbUserField4
					PaymentHeaderExist = true

				CreateReceivablePayment
					invoke Unreleased.CreateEFTCustomerPaymentFromBatch ReceivablePayment
						assign result to ReceivablePaymentView
						invoked.Company						= PrmEftCompany
						invoked.ReceivablePaymentHeader		= ReceivablePaymentHeaderView.ReceivablePaymentHeader
						invoked.PaymentNumber				= LocalPaymentNumber
						invoked.Customer					= ElectronicFundsTransferTransaction.CrCustomer
						invoked.ReferenceNumber				= PrmReference
						invoked.CashCode					= ReceivablePaymentHeaderView.CashCode
						invoked.CurrencyDecimalsNumber		= ReceivablePaymentHeaderView.CurrencyDecimalsNumber
						invoked.TypeOfPayment				= "P"
						invoked.ReceivableProcessLevel		= ReceivablePaymentHeaderView.ReceivableProcessLevel
						invoked.GeneralLedgerDate			= ReceivablePaymentHeaderView.GeneralLedgerDate
						invoked.CurrencyRateToCustomerGroupCurrency	= ReceivablePaymentHeaderView.CurrencyRateToCustomerGroupCurrency
						invoked.CurrencyMultiplicationOrDivision	= ReceivablePaymentHeaderView.CurrencyMultiplicationOrDivision
						invoked.CustomerGroupCurrencyMultiplicationOrDivision	= ReceivablePaymentHeaderView.CustomerGroupCurrencyMultiplicationOrDivision
						invoked.Prepayment					= 0
						invoked.Origin						= "E"
						invoked.ReceivedNotAppliedReceivableGeneralLedgerCode	= ReceivablePaymentHeaderView.ReceivedNotAppliedReceivableGeneralLedgerCode
						invoked.OriginalCurrency			= ReceivablePaymentHeaderView.Currency
						invoked.CurrencyRate				= ReceivablePaymentHeaderView.CurrencyRate
						invoked.DepositDate					= ReceivablePaymentHeaderView.DepositDate
						invoked.BaseCreditAppliedAmount		= 0
						invoked.CreditAppliedAmount			= 0
						invoked.EFTPayCreationResult		= PrmEFTPaymentCreationResult

				CreateWork2
					round LocalAchNetAmount to nearest DerivedLocalRoundTo
					round LocalAchPayNetAmount to nearest DerivedLocalRoundTo
					invoke Create Work2AR115
						invoked.RecKey.PaymentFormat		= LocalPaymentFormat
						invoked.RecKey.Company				= PrmEftCompany
						invoked.RecKey.Customer				= ElectronicFundsTransferTransaction.CrCustomer
						invoked.RecKey.BankEntity			= BankEntity
						invoked.RecKey.BankAcctNbr			= BankAccountNumber
						invoked.InvoiceDetailCount			= LocalInvoiceDetailCount
						invoked.InvoiceSplitCount			= LocalFactor
						invoked.PaymentHeader				= ReceivablePaymentHeaderView.ReceivablePaymentHeader
						invoked.PaymentNumber				= ReceivablePaymentView.ReceivablePayment
						invoked.Name						= ElectronicFundsTransferTransaction.CrCustomer.Name
						invoked.OrigCurrency				= ReceivableInvoiceDetail.OriginalCurrency
						invoked.CanName						= CompanyCustomerRel.CreditAnalyst.Name
						invoked.PhoneNmbr					= CompanyCustomerRel.CreditAnalyst.PhoneNumber
						invoked.NetAmount					= LocalAchNetAmount
						invoked.PayNetAmount				= LocalAchPayNetAmount
						invoked.BankTranCd					= CustomerDraftBankRel.BankAccountTransactionCode
						invoked.CustAcctType				= CustomerDraftBankRel.BankAccountType
						invoked.EFTPayCreationResult		= PrmEFTPaymentCreationResult
						invoked.FinanceEnterpriseGroup		= PrmEFTPaymentCreationResult.FinanceEnterpriseGroup

				BuildDebit

					invoke FastUpdate ProcessingCompany
						invoked.LastEFTBalancingDebitMemoNbr		= ProcessingCompany.LastEFTBalancingDebitMemoNbr + 1

					invoke Create ReceivableInvoice
						assign result to NewReceivableInvoice 
						invoked.Company								= ProcessingCompany
						invoked.Customer							= CrCustomer
						invoked.SummarizeDetail						= LocalSummarizeLine 
						invoked.ReceivableInvoiceType				= "D"
						invoked.AlternateReceivableInvoiceType		= "D"
						invoked.ReceivableInvoice					= "EF-" + LocalProcCompany.LastEFTBalancingDebitMemoNbr using "%07d"
						invoked.Status								= 0
						invoked.BatchNumber							= ReceivablePaymentHeaderView.ReceivablePaymentHeader
						invoked.ReceivableProcessLevel				= PrmProcessLevel
						invoked.GeneralLedgerDate					= PrmPostingDate
						invoked.TransactionDate						= PrmPostingDate
						invoked.InvoiceAmount.FunctionalAmount.EnteredCurrencyAmount	= LocalPaymentTransactionAmount * (-1)
						invoked.ReceivableCrossReference.ReceivableInvoiceType			= ""
						invoked.ReceivableCrossReference.ReceivableInvoice				= ""
						invoked.CustomerPurchaseOrder				= ""
						invoked.Origin								= "O"
						invoked.SalesRepresentative					= CompanyCustRel.SalesRepresentative
						invoked.Description							= "EFT Deposit Debit Memo"
						invoked.OriginalCurrency					= ReceivablePaymentView.OriginalCurrency
						invoked.ReceivableGeneralLedgerCode			= PrmProcessLevel.ReceivedNotAppliedReceivableGeneralLedgerCode
						invoked.InvoiceAmount.FunctionalAmount.EnteredCurrencyRate		= ReceivablePaymentView.CurrencyRate
						invoked.CurrencyMultiplicationOrDivision	= ReceivablePaymentHeaderView.ReceivablePaymentHeader.CurrencyMultiplicationOrDivision
						invoked.InvoiceAmount.CurrencyAmount		= LocalPaymentOriginalAmount * (-1)	
						invoked.CurrencyDecimalsNumber				= ReceivablePaymentView.CurrencyDecimalsNumber
						invoked.CurrencyRateToCustomerGroupCurrency	= ReceivablePaymentView.CurrencyRateToCustomerGroupCurrency
						invoked.CustomerGroupCurrencyMultiplicationOrDivision			= ReceivablePaymentView.CustomerGroupCurrencyMultiplicationOrDivision
						invoked.BankTransactionCode					= CompanyCustRel.BankTransactionCode
						invoked.BankTransactionType					= CompanyCustRel.BankTransactionCode.BankTransactionType
						invoked.TermsCode							= CompanyCustRel.DebitCreditMemoTermsCode
						invoked.TaxExempt							= CompanyCustRel.TaxExempt
						invoked.CustomerPurchaseOrder				= ""
						invoked.System								= "AR"
						if (ReceivablePaymentView.OriginalCurrency = LocalProcCompany.Currency)
							invoked.RevalueCurrencyTransactions		= false
						else
							invoked.RevalueCurrencyTransactions		= true

					LocalDistributionAmount			= NewReceivableInvoice.InvoiceAmount.FunctionalAmount.EnteredCurrencyAmount
					LocalDistributionOriginalAmount	= NewReceivableInvoice.InvoiceAmount.CurrencyAmount
					include CreateDistribution
					invoke Release NewReceivableInvoice.ReceivableInvoice
						invoked.PrmFromEFTPayment		= true
					LocalDebitInvoice	= NewReceivableInvoice.ReceivableInvoice
					for each DebitInvoiceDetailRel
						invoke CreateFromEFT ReceivableApplicationSelect
							invoked.RecPaySw						= true
							invoked.Company							= ProcessingCompany
							invoked.ReceivablePaymentHeader			= ReceivablePaymentHeaderView.ReceivablePaymentHeader
							invoked.ReceivablePayment				= ReceivablePaymentRel.ReceivablePayment
							invoked.ReceivableApplicationSelect.Company												= ProcessingCompany
							invoked.ReceivableApplicationSelect.TransactionCompany									= each.Company
							invoked.ReceivableApplicationSelect.ReceivableInvoiceDetail.PaymentSeq					= each.ReceivableInvoiceDetail.PaymentSeq
							invoked.ReceivableApplicationSelect.ReceivableInvoiceDetail.ReceivableInvoiceDetailType	= each.ReceivableInvoiceDetail.ReceivableInvoiceDetailType
							invoked.ReceivableApplicationSelect.ReceivableInvoiceDetail.Invoice						= each.ReceivableInvoiceDetail.Invoice
							invoked.ReceivableApplicationSelect.ReceivableInvoiceDetail								= each.ReceivableInvoiceDetail
							invoked.GeneralLedgerDate				= PrmPostingDate
							invoked.ReceivableOperator				= PrmOprCode
							invoked.ElectronicFundsTransfer			= true
							invoked.BaseApplicationAmount			= each.InvoiceAmount.FunctionalAmount.EnteredCurrencyAmount - (ReceivableInvoiceDetail.ApplicationAmount.FunctionalAmount.EnteredCurrencyAmount + ReceivableInvoiceDetail.AdjustmentAmount.FunctionalAmount.EnteredCurrencyAmount)
							invoked.TransactionApplicationAmount	= each.InvoiceAmount.CurrencyAmount - (ReceivableInvoiceDetail.ApplicationAmount.CurrencyAmount + ReceivableInvoiceDetail.AdjustmentAmount.CurrencyAmount)
							invoked.PaymentApplicationAmount		= each.InvoiceAmount.CurrencyAmount - (ReceivableInvoiceDetail.ApplicationAmount.CurrencyAmount + ReceivableInvoiceDetail.AdjustmentAmount.CurrencyAmount) 
							if (NewReceivableInvoice.ReceivableInvoice.OriginalCurrency != ReceivablePaymentHeaderView.ReceivablePaymentHeader.Currency)
								LocalExchangeDate					= PrmDepositDate
								LocalTransactionAmount				= each.InvoiceAmount.CurrencyAmount - (ReceivableInvoiceDetail.ApplicationAmount.CurrencyAmount + ReceivableInvoiceDetail.AdjustmentAmount.CurrencyAmount)
								LocalFromCurrency					= NewReceivableInvoice.ReceivableInvoice.OriginalCurrency
								LocalToCurrency						= ReceivablePaymentHeaderView.ReceivablePaymentHeader.Currency
								include CurrencyConversion
								invoked.PaymentApplicationAmount	= LocalOutputCurrencyAmount
						LocalLastSelectApplicationSequence		   += 1



					invoke FastUpdate PrmEftCompany.EFTCreditPaymentBankCode
						invoked.UsedFlag				= true
					invoke Unreleased.CreateFromEftPaymentCreation CashLedgerTransaction
						assign result to CashLedgerTransactionView
						invoked.CashManagementGroup				= PrmEFTPaymentCreationResult.FinanceEnterpriseGroup
						invoked.CashLedgerSourceRecord			= "CBT"
						invoked.Status							= 0
						invoked.CashCode						= PrmCreditCashCode
						invoked.BankTransactionCode				= PrmEftCompany.EFTCreditPaymentBankCode
						invoked.TransactionNumber				= " AR-" + NewReceivableInvoice.BatchNumber
						invoked.TransactionNumberSuffix			= 0
						invoked.BankTransactionType				= PrmEftCompany.EFTCreditPaymentBankCode.BankTransactionType
						invoked.SourceCode						= "AR"
						invoked.Company.OrigCompany				= PrmEftCompany
						invoked.IssueDate						= PrmPostingDate
						if (PrmEftCompany.EFTCreditPaymentBankCode.AutomaticReconciliation)
							invoked.ReconciliationData.ExchangeDate	= PrmPostingDate 
							invoked.ReconciliationData.CurrencyAmount							= NewReceivableInvoice.InvoiceAmount.CurrencyAmount  
							invoked.ReconciliationData.FunctionalAmount.EnteredCurrencyAmount	= NewReceivableInvoice.InvoiceAmount.FunctionalAmount.EnteredCurrencyAmount 
							if (NewReceivableInvoice.InvoiceAmount.CurrencyAmount < 0)
								invoked.ReconciliationData.CurrencyAmount						= NewReceivableInvoice.InvoiceAmount.CurrencyAmount * -1
							if (NewReceivableInvoice.InvoiceAmount.FunctionalAmount.EnteredCurrencyAmount < 0)
								invoked.ReconciliationData.FunctionalAmount.EnteredCurrencyAmount	= NewReceivableInvoice.InvoiceAmount.FunctionalAmount.EnteredCurrencyAmount * -1
						invoked.IssuedBankAmount				= NewReceivableInvoice.InvoiceAmount.CurrencyAmount
						if (NewReceivableInvoice.InvoiceAmount.CurrencyAmount < 0)
							invoked.IssuedBankAmount			= NewReceivableInvoice.InvoiceAmount.CurrencyAmount * -1
						invoked.IssuedBaseAmount.FunctionalAmount.EnteredCurrencyAmount		= NewReceivableInvoice.InvoiceAmount.FunctionalAmount.EnteredCurrencyAmount
						if (NewReceivableInvoice.InvoiceAmount.FunctionalAmount.EnteredCurrencyAmount < 0)
							invoked.IssuedBaseAmount.FunctionalAmount.EnteredCurrencyAmount	= NewReceivableInvoice.InvoiceAmount.FunctionalAmount.EnteredCurrencyAmount * -1
						invoked.TransactionCurrencyNumberOfDecimals							= NewReceivableInvoice.CurrencyDecimalsNumber
						invoked.BaseCurrencyNumberOfDecimals								= PrmEftCompany.BaseNumberOfDecimals
						invoked.BankAccountCurrencyNumberOfDecimals							= ReceivablePaymentHeaderView.Currency
						if (PrmEftCompany.EFTCreditPaymentBankCode.TransactionType = "C")
							invoked.BankTransactionSign			= "CR"
						else
							invoked.BankTransactionSign			= "DR" 
						if (NewReceivableInvoice.InvoiceAmount.FunctionalAmount.EnteredCurrencyRate = 0)
							invoked.BankAccountCurrencyExchangeRate							= 1
						else
							invoked.BankAccountCurrencyExchangeRate							= NewReceivableInvoice.InvoiceAmount.FunctionalAmount.EnteredCurrencyRate
						invoked.Description						= "EFT Deposit Debit Memo" 
						invoked.Reference						= "EFT"
						invoked.ReinstateStatus					= false
						invoked.BankReconciliationStatus		= false
						invoked.AppliedDistributionBaseAmount.FunctionalTotal				= NewReceivableInvoice.InvoiceAmount.CurrencyAmount 
						invoked.AppliedDistributionBankAmount								= NewReceivableInvoice.InvoiceAmount.FunctionalAmount.EnteredCurrencyAmount
						invoked.GeneralLedgerPostDate			= PrmPostingDate
						invoked.CashLedgerStatement				= ReceivablePaymentHeaderView.CashLedgerStatement
						invoked.TransactionData1				= PrmCbUserField1
						invoked.TransactionData2				= PrmCbUserField2
						invoked.TransactionData3				= PrmCbUserField3
						invoked.TransactionData4				= PrmCbUserField4
						if (ReceivablePaymentHeaderView.DetailTotal entered)	
							invoked.BankAccountCurrencyExchangeRate							= ReceivablePaymentHeaderView.CurrencyRate	
							invoked.Currency												= ReceivablePaymentHeaderView.Currency
							invoked.BankAccountCurrencyNumberOfDecimals						= ReceivablePaymentHeaderView.CurrencyDecimalsNumber
							invoked.IssueTranAmt											= ReceivablePaymentHeaderView.DetailTotal
						else
							invoked.BankAccountCurrencyExchangeRate							= 1	
							invoked.Currency												= PrmCreditCashCode.Currency
							invoked.BankAccountCurrencyNumberOfDecimals						= NewReceivableInvoice.CurrencyDecimalsNumber
							invoked.IssueTranAmt											= NewReceivableInvoice.InvoiceAmount.CurrencyAmount
						invoked.CreatedUser						= actor
						invoked.LastUpdateDate					= current timestamp
						invoked.LastUpdateUser					= actor

				CreateDistribution
					invoke Create ReceivableGLDistribution
						invoked.FinanceEnterpriseGroup				= LocalFinanceEnterpriseGroup
						invoked.ReceivableCompanyGroup.GlCompany	= PrmEftCompany
						invoked.ReceivableCompanyDataGroup.TransactionCompany		= PrmEftCompany 
						invoked.ReceivableCompanyDataGroup.ReceivableProcessLevel	= PrmProcessLevel
						invoked.GeneralLedgerDate					= PrmPostingDate
						invoked.AccumulationType					= "D" 
						invoked.BatchNumber							= NewReceivableInvoice.BatchNumber
						invoked.Origin								= "RM"
						invoked.DocumentNumber						= "2-" + NewReceivableInvoice.ReceivableInvoice
						invoked.GeneralLedgerAccount				= ReceivableGLCodeRel.DistributionAccount
						invoked.BypassStructureRelationEdit			= true
						invoked.ToCompanyBaseAmount					= 0
						invoked.AuditSummaryIndicator				= "02"
						invoked.TransactionDate						= NewReceivableInvoice.TransactionDate
						invoked.DistributionSource					= "A"
						invoked.OriginalCurrency					= NewReceivableInvoice.OriginalCurrency
						invoked.CurrencyRate						= NewReceivableInvoice.InvoiceAmount.FunctionalAmount.EnteredCurrencyRate
						invoked.CurrencyDecimalsNumber				= NewReceivableInvoice.CurrencyDecimalsNumber
						invoked.DistributionAmount.FunctionalAmount.EnteredCurrencyAmount	=  LocalDistributionAmount
						invoked.DistributionAmount.CurrencyAmount	= LocalDistributionOriginalAmount
						invoked.ReceivableCompanyDataGroup.Customer	= NewReceivableInvoice.Customer
						invoked.Invoice								= NewReceivableInvoice.ReceivableInvoice
						invoked.TransType							= NewReceivableInvoice.ReceivableInvoiceType
						invoked.BypassActiveCodeBlockEdit			= true		


				CreateEFTPaymentOutputDetail
					invoke Create EFTPaymentOutputDetail
						invoked.Company				= EFTPaymentOutputView.Company
						invoked.EFTPaymentOutput	= EFTPaymentOutputView.EFTPaymentOutput
						invoked.Type				= LocalPaymentFormat  
						invoked.Data 				= LocalOutputDetailData using "%-94.94s" 

				BatchControl
					BcType					= 8 
					BcEntryCount			= LocalBatchEntryCount
					BcEntryHash				= LocalBatchEntryHash 

					BcAlphaEntryDb			= "000000000000"
					BcEntryDb				= LocalBatchEntryDb using "%012.2f"
					BcPrecZeroEntryDb		= BcEntryDb * 100
					BcNumericEntryDb		= BcPrecZeroEntryDb
					LocalOutputDetailData	= BcNumericEntryDb
					ACHNumericNetAmount		= 12 - LocalOutputDetailData size
					if (ACHNumericNetAmount > 0)
						BcAlphaEntryDb 		= BcAlphaEntryDb[1:ACHNumericNetAmount] + LocalOutputDetailData
					else
						ACHNumericNetAmount	= LocalOutputDetailData size - 11
						BcAlphaEntryDb		= LocalOutputDetailData[ACHNumericNetAmount:LocalOutputDetailData size]

					BcAlphaEntryCr			= "000000000000"
					BcEntryCr				= LocalBatchEntryCr using "%012.2f"
					BcPrecZeroEntryCr		= BcEntryCr * 100
					BcNumericEntryCr		= BcPrecZeroEntryCr
					LocalOutputDetailData	= BcNumericEntryCr
					ACHNumericNetAmount		= 12 - LocalOutputDetailData size
					if (ACHNumericNetAmount > 0)
						BcAlphaEntryCr 		= BcAlphaEntryCr[1:ACHNumericNetAmount] + LocalOutputDetailData
					else
						ACHNumericNetAmount	= LocalOutputDetailData size - 11 
						BcAlphaEntryCr		= LocalOutputDetailData[ACHNumericNetAmount:LocalOutputDetailData size]

					BcCoId					= PrmCompanyIdOption + PrmEftCompany.EFTACHCompanyID[1:9]
					if (PrmBalancedTape = "N")
						if (LocalCreditsFl)
							if (LocalDebitsFl)
								BcClass		= 200
							else
								BcClass		= 220
						else
							BcClass			= 225
					else
						BcClass				= 200
					BcOrigDfi				= LocalACHBankID  using "%8s"
					if (LocalACHBankID is numeric
					or  LocalACHBankID not entered)
						NumericACHBankID	= LocalACHBankID
						BcOrigDfi			= NumericACHBankID using "%08d"
					BcBatchNbr				= LocalAchBatchNumber	
					LocalOutputDetailData	= BcType + BcClass using "%3d" + BcEntryCount using "%06d" + BcEntryHash using "%010d" + BcAlphaEntryDb + BcAlphaEntryCr + BcCoId using "%-10s" + "                         " + BcOrigDfi + BcBatchNbr using "%07d"
					include CreateEFTPaymentOutputDetail

				BatchHeader

					BhClass					= 200
					if (PrmBalancedTape = "N")
						if (LocalCreditsFl)
							if (LocalDebitsFl)
								BhClass		= 200
							else
								BhClass		= 220
						else
							BhClass			= 225
					BhCoName				= PrmEftCompany.Name using "%-16s"
					LocalCashCode			= PrmEftCompany.EFTDebitCashCode
					BhData					= PrmEftCompany.EFTDebitCashCode.BankAccountNumber

					if (PrmCompanyIdOption = 0)
						BhCoId				= PrmEftCompany.EFTACHCompanyID
					else
						BhCoId				= PrmCompanyIdOption + PrmEftCompany.EFTACHCompanyID[1:9]
					BhEntryCl				= "CCD"
					BhEntryDesc				= "AR PAYMENT"
					BhCoDesc				= "      "
					BhEntryDt				= PrmDepositDate using "%ty" + PrmDepositDate using "%tm" + PrmDepositDate using "%td"  
					BhStatus				= "   1"
					BhOrigDfi				= LocalACHBankID[1:8] using "%8s"
					if (LocalACHBankID is numeric
					or  LocalACHBankID not entered)
						NumericACHBankID	= LocalACHBankID[1:8]
						BhOrigDfi			= NumericACHBankID using "%08d"
					LocalAchBatchNumber	   += 1
					BhBatchNbr				= LocalAchBatchNumber
					LocalOutputDetailData	= "5" + BhClass + BhCoName using "%-16s" + BhData using "%-20s" + BhCoId using "%-10s" + BhEntryCl using "%3s" + BhEntryDesc using "%10s" + BhCoDesc using "%6s" + BhEntryDt + "   " + BhStatus + BhOrigDfi + BhBatchNbr using "%07d"
					include CreateEFTPaymentOutputDetail
					include BlockCalculation

				BlockCalculation
					FileBlockCalc				   += 1
					if (FileBlockCalc = 10)
						FileBlockCalc 				= 0
						FileBlockCount			   += 1

			Accumulators


			Action Rules
				Empty Set Rules
					LocalCrCustomer					= 0
					LocalBuildBatch					= 0
					LocalBatchSequence				= 0
					LocalDetailCount				= 0
					LocalDetailTotal				= 0
					LocalBaseCash					= 0
					LocalRnaTotal					= 0
					LocalBaseRna					= 0
					LocalBatchNumber				= 0

					invoke FastUpdate PrmEFTPaymentCreationResult
						invoked.RecordsExists 							= false

					invoke UpdateStatusOnResult PrmEFTPaymentCreationResult

				Set Rules
					Entrance Rules




						if (PrmNotAppldCd not entered)
							PrmNotAppldCd			= PrmProcessLevel.ReceivedNotAppliedReceivableGeneralLedgerCode

						if (PrmOprCode not entered)
							PrmOprCode				= actor

						LocalFinanceEnterpriseGroup	= PrmEFTPaymentCreationResult.FinanceEnterpriseGroup
						LocalProcCompany			= ProcessingCompany
						LocalCompany		 		= PrmEftCompany
						LocalCrCustomer				= 0
						LocalBuildBatch				= 0
						LocalBatchSequence			= 0
						LocalDetailCount			= 0
						LocalDetailTotal			= 0
						LocalBaseCash				= 0
						LocalRnaTotal				= 0
						LocalBaseRna				= 0
						LocalBatchNumber			= 0
						if (PrmEftCompany.CustomerGroupField.CustomerGroup.EFTProcessingLevel = "G")
							EFTCalendar								= PrmEftCompany.CustomerGroupField.CustomerGroup.EFTCalendar
							LocalCurrencyCode						= PrmEftCompany.CustomerGroupField.CustomerGroup.Currency
							LocalDepositDays						= PrmEftCompany.CustomerGroupField.CustomerGroup.EFTDepositDays
							LocalDepositType						= PrmEftCompany.CustomerGroupField.CustomerGroup.EFTDepositDaysType
							LocalGlDays								= PrmEftCompany.CustomerGroupField.CustomerGroup.EFTGLDays
							LocalGlType								= PrmEftCompany.CustomerGroupField.CustomerGroup.EFTGLDaysType
						else
							EFTCalendar								= PrmEftCompany.EFTCalendar
							LocalCurrencyCode						= PrmEftCompany.Currency
							LocalDepositDays						= PrmEftCompany.EFTDepositDays
							LocalDepositType						= PrmEftCompany.EFTDepositDaysType
							LocalGlDays								= PrmEftCompany.EFTGLDays
							LocalGlType								= PrmEftCompany.EFTGLDaysType

						if (PrmPostingDate not entered)
							LocalDueDays		= LocalGlDays
							if (LocalGlType = "M")
								PrmPostingDate	= ActualBankDayNumber
							else
								PrmPostingDate	= current corporate date + LocalGlDays	

						if (PrmDepositDate not entered)
							LocalDueDays		= LocalDepositDays
							if (LocalDepositType = "M")
								PrmDepositDate	= ActualBankDayNumber
							else
								PrmDepositDate	= current corporate date + LocalDepositDays

						if (PrmDebitCashCode not entered)
							PrmDebitCashCode 						= PrmEftCompany.EFTDebitCashCode
						if (PrmCreditCashCode not entered)
							PrmCreditCashCode						= PrmEftCompany.EFTCreditCashCode





















































































					Exit Rules
						if (EFTNotifyRelExists)
							invoke FastUpdate PrmEFTPaymentCreationResult
								invoked.CreditAmount	= LocalCreditTotal
								invoked.DebitAmount		= LocalDebitTotal
								invoked.NetBalance		= LocalCreditTotal + LocalDebitTotal 
							LocalPrmCustomer		= PrmCustomer
							LocalCustomerGroup		= PrmEftCompany.CustomerGroupField.CustomerGroup
							LocalProcessingCompany	= LocalProcCompany
							LocalEFTPaymentCreationResult	= PrmEFTPaymentCreationResult


							invoke FastUpdate ReceivablePaymentHeaderView.ReceivablePaymentHeader
								invoked.DetailCount					= LocalPaymentHeaderDetailCount  
								invoked.LastLogSeq					= LocalPaymentHeaderDetailCount
								invoked.BatchCount					= LocalPaymentHeaderDetailCount
								invoked.DetailTotal					= LocalPaymentHeaderDetailTotal
								invoked.BatchTotal					= LocalPaymentHeaderDetailTotal
								invoked.BaseCash					= LocalPaymentHeaderBaseTotal
								invoked.RnaTotal					= LocalPaymentHeaderDetailTotal
								invoked.BaseRna						= LocalPaymentHeaderBaseTotal
								if (LocalPaymentHeaderDetailTotal = 0)
									if (PrmReference not entered)
										invoked.Reference				= "EFT CREDIT"
									invoked.CashCode				= PrmCreditCashCode
									invoked.Currency				= PrmCreditCashCode.Currency
							LocalPaymentHeader	= ReceivablePaymentHeaderView.ReceivablePaymentHeader
							if (LocalPaymentHeaderDetailTotal = 0)
								for each ReceivablePayRel
									invoke FastUpdate each
										invoked.CashCode				= PrmCreditCashCode


							invoke TriggerDebitTransfer ReceivablePaymentHeaderView.ReceivablePaymentHeader
								invoked.PrmReceivableInvoice	= LocalTriggerReceivableInvoice 
								invoked.PrmBatchNumber			= ReceivablePaymentHeaderView.ReceivablePaymentHeader 



							invoke OpenBatchUnreleased.Release ReceivablePaymentHeaderView.ReceivablePaymentHeader



							invoke Create EFTPaymentOutput
								assign result to EFTPaymentOutputView 
								invoked.Company			= PrmEftCompany
								invoked.ProcessLevel	= PrmProcessLevel
								invoked.ACHFileName		= PrmACHFileName
								invoked.BACSFileName	= PrmBACSFileName
								invoked.NonTapeFileName	= PrmNonTapeFileName
								invoked.SEPAFileName	= PrmSEPAFileName
								invoked.EFTPaymentCreationResult = PrmEFTPaymentCreationResult

							LocalFinancialInstitution				= PrmDebitCashCode.FinancialInstitution
							LocalFinancialInstitutionBranch			= PrmDebitCashCode.FinancialInstitutionBranch
							LocalCashManagementGroup				= PrmDebitCashCode.CashManagementGroup
							LocalCashBankEntity						= FinancialInstitutionBranchRel.RoutingNumber
							LocalFinancialInstitution				= PrmDebitCashCode.SendingFinancialInstitution
							LocalFinancialInstitutionBranch			= PrmDebitCashCode.SendingFinancialInstitutionBranch
							LocalCashManagementGroup				= PrmDebitCashCode.CashManagementGroup
							LocalSendBankName						= PrmDebitCashCode.SendingFinancialInstitution
							LocalBankAccountNumber					= PrmDebitCashCode.BankAccountNumber
							LocalFinancialInstitution				= PrmDebitCashCode.SendingFinancialInstitution
							LocalFinancialInstitutionBranch			= PrmDebitCashCode.SendingFinancialInstitutionBranch
							LocalSendBankEntity						= FinancialInstitutionBranchRel.RoutingNumber


							if (ACHTapeRel exists)




								LocalACHCashBankEntity	= LocalCashBankEntity
								LocalAchBatchNumber		= 0
								LocalPaymentFormat		= 1
								FhType					= 1
								FhPriority				= 01
								LocalACHBankID			= LocalACHCashBankEntity[1:8]


								FhOriginalId			= LocalACHBankID
								LocalOchkId				= LocalACHCashBankEntity[9]
								if (LocalOchkId not entered)
									LocalOchkId			= 0
								FhOchkId				= LocalOchkId 
								FhOriginalBank			= " " + FhOriginalId + FhOchkId
								if (LocalACHBankID is numeric
								or  LocalACHBankID not entered)
									NumericACHBankID	= LocalACHBankID
									FhOriginalBank		= " " + NumericACHBankID using "%08d" + FhOchkId 

								LocalARCompanyACHBankId	= PrmEftCompany.EFTACHCompanyID
								if (PrmEftCompany.OrganizationIdentifier entered)	
									LocalARCompanyACHBankId = PrmEftCompany.OrganizationIdentifier

								LocalArCompACHJustBankId	= LocalARCompanyACHBankId
								LocalCompanyBankIdLast1	= LocalARCompanyACHBankId[10]
								if (LocalArCompACHJustBankId entered)	
									include StripLeadingSpaces
								LocalARCompanyACHBankIdSize = 10 - LocalArCompACHJustBankId size
								FhSendBank			= " 000000000"		
								FhSendBank			= FhSendBank[1:LocalARCompanyACHBankIdSize] + LocalArCompACHJustBankId

								LocalFhDate				= current corporate date
								FhCreateDate			= LocalFhDate using "%ty" + LocalFhDate using "%tm" + LocalFhDate using "%td"
								
								LocalFhCreateTime		= current corporate time
								FhCreateTime			= LocalFhCreateTime using "%tH" + LocalFhCreateTime using "%tM"
								
								FhIdMod					= "A"
								FhRecSize				= 94
								FhBlock					= 10
								FhFormat				= 1
								LocalFinancialInstitution				= PrmEftCompany.EFTDebitCashCode.FinancialInstitution
								LocalFinancialInstitutionBranch			= PrmEftCompany.EFTDebitCashCode.FinancialInstitutionBranch
								LocalCashManagementGroup				= PrmEftCompany.EFTDebitCashCode.CashManagementGroup
								FhOriginalName			= FinancialInstitutionBranchRel.FinancialInstitution
								FhSendName				= PrmEftCompany.Name
								FhRefCode				= ""
								LocalOutputDetailData	= "1" + "01" + FhOriginalBank + FhSendBank + FhCreateDate + FhCreateTime + FhIdMod + FhRecSize using "%03d"+ FhBlock + FhFormat + FhOriginalName using "%-23.23s" + FhSendName using "%-23.23s" + FileHeaderReferenceNumber using "%8.8s"
								include CreateEFTPaymentOutputDetail

								include BlockCalculation

								include BatchHeader

								if (PrmEftCompany.EFTTraceCounter < 1)
									invoke FastUpdate PrmEftCompany
										invoked.EFTTraceCounter = 1
									LocalTracePayment	= PrmEftCompany.EFTTraceCounter
								else
								if (PrmEftCompany.EFTTraceCounter >= 9999999)
									invoke FastUpdate PrmEftCompany
										invoked.EFTTraceCounter = 1
									LocalTracePayment	= PrmEftCompany.EFTTraceCounter
								else
									LocalTracePayment	= PrmEftCompany.EFTTraceCounter + 1
								
								for each ACHTapeRel	

									initialize LocalAdAmount
									LocalInvoiceSplitCount	= each.InvoiceSplitCount
									if (LocalInvoiceSplitCount not entered)
										LocalInvoiceSplitCount = 1
									initialize LoopCounter
									initialize LocalAdjustAmount
									LocalWorkCustomer		= each.RecKey.Customer
									LocalSplitPayAmount		= each.PayNetAmount / LocalInvoiceSplitCount
									round LocalSplitPayAmount to nearest DerivedLocalRoundTo 
									AddendaAddSequence		= 1
									if (LocalWorkCustomer != OldCustomer
									or  OldPayNetAmount	   = each.PayNetAmount)
										initialize InvoiceDetailCount
										initialize LocalInvoiceDetailCounter
									while (LoopCounter < LocalInvoiceSplitCount)
										increment LoopCounter

										AdAmount				= LocalSplitPayAmount
										if (LocalInvoiceSplitCount > 1)
											LocalAdAmount	   += AdAmount 
											if (LoopCounter = LocalInvoiceSplitCount)
												LocalAdjustAmount	= LocalAdAmount - LocalSplitPayAmount
												AdAmount			= each.PayNetAmount - LocalAdjustAmount

										if (each.CustAcctType = "S")
											if (each.PayNetAmount < 0)
												LocalBatchEntryCr	+= AdAmount   
												AdTranCode		= 32
											else
												LocalBatchEntryDb	+= AdAmount
												AdTranCode		= 37
										else
											if (each.PayNetAmount < 0)
												LocalBatchEntryCr	+= AdAmount
												AdTranCode		= 22
											else
												LocalBatchEntryDb	+= AdAmount
												AdTranCode		= 27
										LocalCheckDigit			= each.RecKey.BankEntity[9]
										if (LocalCheckDigit is numeric) 
											LocalCheckDigit		= each.RecKey.BankEntity[9]
										else
											LocalCheckDigit		= 0	

										AdRecId					= "000000000"
										AdRecId					= each.RecKey.BankEntity[1:8] + LocalCheckDigit
										if (AdRecId size < 9)
											LocalOutputDetailData	= "000000000"
											AdRecIdSize			= 9 - AdRecId size			
											AdRecId				= LocalOutputDetailData[1:AdRecIdSize] + AdRecId
										LocalACHCashBankEntity	= AdRecId

										AdDfi					= each.RecKey.BankAcctNbr
										if (AdRecId is numeric)
											LocalBatchEntryHash	+= AdRecId 
											LocalFileEntryHash	+= AdRecId
		
										LocalBatchTotal		   += AdAmount using "%010.2f"
										AdIdNbr					= each.RecKey.Company using "%04d" + "-" + each.RecKey.Customer using "%09d"
										AdName					= each.Name
										AdData					= "  "
										if (PrmIncludeAddenda = "Y")
											AdAddenda			= 1
										else
											AdAddenda			= 0	 

										AdTrace					= LocalACHBankID using "%8s"+ LocalTracePayment using "%07d" 
										if (LocalACHBankID is numeric
										or  LocalACHBankID not entered)
											NumericACHBankID	= LocalACHBankID
											AdTrace				= NumericACHBankID using "%08d" + LocalTracePayment using "%07d"

										if (AdAmount < 0)
											AdAmount			= AdAmount * -1
		
										ACHAlphaPayNetAmount	= "0000000000"
										ACHNetAmount			= AdAmount using "%010.2f"
										ACHZeroNetAmount		= ACHNetAmount * 100
										ACHNumericNetAmount		= ACHZeroNetAmount
										LocalOutputDetailData	= ACHNumericNetAmount
										ACHNumericNetAmount		= 10 - LocalOutputDetailData size
										if (ACHNumericNetAmount != 0)
											ACHAlphaPayNetAmount 	= ACHAlphaPayNetAmount[1:ACHNumericNetAmount] + LocalOutputDetailData
										else
											ACHAlphaPayNetAmount	= LocalOutputDetailData
										LocalOutputDetailData	= "6" + AdTranCode + AdRecId using "%9s" + AdDfi using "%-17.17s" + ACHAlphaPayNetAmount + AdIdNbr using "%-15s" + AdName using "%-22.22s" + AdData using "%2s" + AdAddenda + AdTrace 
										include CreateEFTPaymentOutputDetail
										include BlockCalculation
										LocalBatchEntryCount	+= 1
										LocalFileEntryCount		+= 1
										if (PrmIncludeAddenda = "Y")
											AddendaAddress1			= CustomerRel.PostalAddress.DeliveryAddress.AddressLine1
											AddendaAddress2			= CustomerRel.PostalAddress.DeliveryAddress.AddressLine2
											AddendaAddSequence		= 1
											EntryDetailAddSequence	= LocalTracePayment
											LocalOutputDetailData	= "7" + "05" + "N3" + "*" + AddendaAddress1 using "%40s" + "*" + AddendaAddress2 using "%35s" + "\\" + AddendaAddSequence using "%04d" + EntryDetailAddSequence using "%07d"  
											include CreateEFTPaymentOutputDetail

											AddendaCity				= CustomerRel.PostalAddress.Municipality
											AddendaState			= CustomerRel.PostalAddress.StateProvince
											AddendaZipCode			= CustomerRel.PostalAddress.PostalCode
											AddendaCountryCode		= CustomerRel.PostalAddress.Country
											AddendaFiller			= "                    "
											LocalOutputDetailData	= "7" + "05" + "N4" + "*" + AddendaCity using "%35s" + "*" + AddendaState using "%3s" + "*" + AddendaZipCode using "%12s" + "*" + AddendaCountryCode using "%3s" + "                    " + "\\" + AddendaAddSequence using "%04d" + EntryDetailAddSequence using "%07d"
											include CreateEFTPaymentOutputDetail

											LocalWorkCompany		= each.RecKey.Company
											LocalWorkPaymentHeader	= each.PaymentHeader
											LocalWorkPaymentNumber	= each.PaymentNumber
											InvoiceDetailCount		= LocalInvoiceDetailCounter + each.InvoiceDetailCount
											OldCustomer 			= LocalWorkCustomer
											OldPayNetAmount 		= each.PayNetAmount
											initialize LocalInvoiceStartsWithEF 
											initialize LocalCount
											if (LocalInvoiceSplitCount > 1
											and LoopCounter > 1)
												LocalOutputDetailData	= "7" + "05" + "RMR" + "*" + "IV" + "*" + AddendaInvoice using "%-22s" + "*" +  AddendaNumericAmount + AddendaAmountSign using "%1s" + "*" + AddendaNumericInvoiceAmount + AddendaAmountSign using "%1s" + "*" + AddendaInvoiceDate + "*" + "                " + "\\" + LocalAddendaAddSequence using "%04d" + EntryDetailAddSequence using "%07d"
												if (LocalAdjustAmount entered)
													ACHAlphaPayNetAmount	= "0000000000"
													ACHNetAmount			= AdAmount
													ACHZeroNetAmount		= ACHNetAmount * 100
													ACHNumericNetAmount		= ACHZeroNetAmount
													LocalOutputDetailData	= ACHNumericNetAmount
													ACHNumericNetAmount		= 10 - LocalOutputDetailData size
													if (ACHNumericNetAmount != 0)
														ACHAlphaPayNetAmount 	= ACHAlphaPayNetAmount[1:ACHNumericNetAmount] + LocalOutputDetailData
													else
														ACHAlphaPayNetAmount	= LocalOutputDetailData
													AddendaNumericAmount	= ACHAlphaPayNetAmount






















													
													AddendaNumericInvoiceAmount	= AddendaNumericAmount
													LocalOutputDetailData	= "7" + "05" + "RMR" + "*" + "IV" + "*" + AddendaInvoice using "%-22s" + "*" +  AddendaNumericAmount + AddendaAmountSign using "%1s" + "*" + AddendaNumericInvoiceAmount + AddendaAmountSign using "%1s" + "*" + AddendaInvoiceDate + "*" + "                " + "\\" + LocalAddendaAddSequence using "%04d" + EntryDetailAddSequence using "%07d"
												include CreateEFTPaymentOutputDetail
											else	
												for each ReceivableApplicationSelectPaymentRel
													increment LocalCount
													if (LocalCount > InvoiceDetailCount)
														end for each
													if (LocalCount > LocalInvoiceDetailCounter
													and LocalCount <= InvoiceDetailCount)
														LocalSelectTransactionCompany	= each.ReceivableApplicationSelect.TransactionCompany
														LocalSelectInvoiceDetailType	= each.ReceivableApplicationSelect.ReceivableInvoiceDetail.ReceivableInvoiceDetailType
														LocalSelectInvoice				= each.ReceivableApplicationSelect.ReceivableInvoiceDetail.Invoice
														LocalSelectPaymentSeq			= each.ReceivableApplicationSelect.ReceivableInvoiceDetail.PaymentSeq
														if (each.ReceivableApplicationSelect.ReceivableInvoiceDetail.Invoice[1:2] = "EF")
															LocalInvoiceStartsWithEF	= true
															increment InvoiceDetailCount
														if (!(each.ReceivableApplicationSelect.ReceivableInvoiceDetail.ReceivableInvoiceDetailType = "D"
														and   LocalInvoiceStartsWithEF))
															AddendaInvoice			= each.ReceivableApplicationSelect.ReceivableInvoiceDetail.Invoice
		
															ACHAlphaPayNetAmount	= "0000000000"
															ACHNetAmount			= each.PaymentApplicationAmount using "%010.2f"
															if (LocalInvoiceSplitCount > 1)
																ACHNetAmount		= AdAmount
															ACHZeroNetAmount		= ACHNetAmount * 100
															ACHNumericNetAmount		= ACHZeroNetAmount
															LocalOutputDetailData	= ACHNumericNetAmount
															ACHNumericNetAmount		= 10 - LocalOutputDetailData size
															if (ACHNumericNetAmount != 0)
																ACHAlphaPayNetAmount 	= ACHAlphaPayNetAmount[1:ACHNumericNetAmount] + LocalOutputDetailData
															else
																ACHAlphaPayNetAmount	= LocalOutputDetailData
															AddendaNumericAmount	= ACHAlphaPayNetAmount
		
															if (each.ReceivableApplicationSelect.ReceivableInvoiceDetail.ReceivableInvoiceDetail.ReceivableInvoiceDetailType = "C")
																AddendaAmountSign	= "-"
															else
																AddendaAmountSign	= " "
															AddendaInvoiceAmount	= ApplicationSelectInvoiceDetailRel.InvoiceAmount.CurrencyAmount using "%010.2f"
															LocalTransactionAmount	= AddendaInvoiceAmount
															if (LocalInvoiceSplitCount > 1)
																AddendaInvoiceAmount	= AddendaInvoiceAmount / LocalInvoiceSplitCount
																LocalTransactionAmount	= AddendaInvoiceAmount
															if (ApplicationSelectInvoiceDetailRel.OriginalCurrency != ReceivablePaymentHeaderView.Currency)
																LocalExchangeDate					= ApplicationSelectInvoiceDetailRel.TransactionDate
																LocalFromCurrency					= ApplicationSelectInvoiceDetailRel.OriginalCurrency
																LocalToCurrency						= ReceivablePaymentHeaderView.Currency
																include CurrencyConversion
																AddendaInvoiceAmount				= LocalOutputCurrencyAmount using "%010.2f"
		
															ACHAlphaPayNetAmount	= "0000000000"
															ACHNetAmount			= AddendaInvoiceAmount
															ACHZeroNetAmount		= ACHNetAmount * 100
															ACHNumericNetAmount		= ACHZeroNetAmount
															LocalOutputDetailData	= ACHNumericNetAmount
															ACHNumericNetAmount		= 10 - LocalOutputDetailData size
															if (ACHNumericNetAmount != 0)
																ACHAlphaPayNetAmount 	= ACHAlphaPayNetAmount[1:ACHNumericNetAmount] + LocalOutputDetailData
															else
																ACHAlphaPayNetAmount	= LocalOutputDetailData
															AddendaNumericInvoiceAmount	= ACHAlphaPayNetAmount
															LocalAddendaInvoiceDate	= each.ReceivableApplicationSelect.ReceivableInvoiceDetail.TransactionDate
															AddendaInvoiceDate		= LocalAddendaInvoiceDate using "%tY" + LocalAddendaInvoiceDate using "%tm" + LocalAddendaInvoiceDate using "%td"
															AddendaAddSequence	   += 1
															LocalOutputDetailData	= "7" + "05" + "RMR" + "*" + "IV" + "*" + AddendaInvoice using "%-22s" + "*" +  AddendaNumericAmount + AddendaAmountSign using "%1s" + "*" + AddendaNumericInvoiceAmount + AddendaAmountSign using "%1s" + "*" + AddendaInvoiceDate + "*" + "                " + "\\" + AddendaAddSequence using "%04d" + EntryDetailAddSequence using "%07d"
															LocalAddendaAddSequence	= AddendaAddSequence
															include CreateEFTPaymentOutputDetail
														increment LocalInvoiceDetailCounter	
										if (LocalTracePayment = 9999999)
											LocalTracePayment = 1
										else
											increment LocalTracePayment
								if (PrmBalancedTape = "Y")
									if (LocalBatchTotal < 0)
										LocalBatchEntryDb  -= LocalBatchTotal
										LocalFileEntryDb   -= LocalBatchTotal	  
										AdTranCode			= 27
										AdDfi				= PrmCreditCashCode.BankAccountNumber
									else
										LocalBatchEntryCr  -= LocalBatchTotal
										LocalFileEntryCr   += LocalBatchTotal
										AdTranCode			= 22
										AdDfi				= PrmDebitCashCode.BankAccountNumber	
									LocalCheckDigit			= LocalACHCashBankEntity[9]
									if (LocalCheckDigit is numeric) 
										LocalCheckDigit		= LocalACHCashBankEntity[9]
									else	
										LocalCheckDigit		= 0
									
									AdRecId					= "000000000"
									AdRecId					= LocalACHCashBankEntity[1:8] + LocalCheckDigit
									if (AdRecId size < 9)
										LocalOutputDetailData	= "000000000"
										AdRecIdSize			= 9 - AdRecId size
										AdRecId				= LocalOutputDetailData[1:AdRecIdSize] + AdRecId
									
									AdIdNbr					= PrmEftCompany using "%04d" + "-" + "         "
									AdName					= LocalSendBankEntity
									AdData					= "  "
									if (PrmIncludeAddenda = "Y")
										AdAddenda			= 1
									else
										AdAddenda			= 0

									AdTrace					= LocalACHCashBankEntity[0:8] + LocalTracePayment using "%07d"
									if (AdRecId is numeric)
										LocalBatchEntryHash	+= AdRecId 
										LocalFileEntryHash	+= AdRecId







									ACHAlphaPayNetAmount	= "0000000000"
									if (LocalBatchTotal < 0)
										LocalBatchTotal	   *= -1 
									ACHNetAmount			= LocalBatchTotal using "%010.2f"
									ACHZeroNetAmount		= ACHNetAmount * 100
									ACHNumericNetAmount		= ACHZeroNetAmount
									LocalOutputDetailData	= ACHNumericNetAmount
									ACHNumericNetAmount		= 10 - LocalOutputDetailData size
									ACHAlphaPayNetAmount 	= ACHAlphaPayNetAmount[1:ACHNumericNetAmount] + LocalOutputDetailData

									LocalOutputDetailData	= "6" + AdTranCode + AdRecId using "%9s" + AdDfi using "%-17.17s" + ACHAlphaPayNetAmount + AdIdNbr using "%-15s" + AdName using "%-22.22s" + "  " + AdAddenda + LocalTracePayment using "%015d"
									include CreateEFTPaymentOutputDetail
									include BlockCalculation
									LocalBatchEntryCount   += 1
									LocalEntryCount		   += 1
									LocalFileEntryCount	   += 1 
									if (LocalTracePayment = 9999999)
										LocalTracePayment = 1
									else
										increment LocalTracePayment
								else
									LocalFileEntryDb   -= LocalDebitTotal
									LocalFileEntryCr   += LocalCreditTotal
								
								if (LocalBatchEntryDb < 0)
									LocalBatchEntryDb	= LocalBatchEntryDb * -1
								if (LocalBatchEntryCr < 0)	
									LocalBatchEntryCr	= LocalBatchEntryCr * -1
								
								include BatchControl
								LocalBatchEntryHash		= 0
								include BlockCalculation
	





	
								LocalCustomerGroup		= PrmEftCompany.CustomerGroupField.CustomerGroup
								LocalEftCompany			= PrmEftCompany
								LocalReportByCompany	= PrmReportByCompany
								FcEntryDb				= LocalBatchEntryDb
								FcEntryCr				= LocalBatchEntryCr

								for each CustDraftBankRel
									LocalBankCustomer	= each.Customer
									if (EFTCustomerNotifyRel.PaymentFormat = "A")
										if (!PrintOnce)
											include BatchHeader
										invoke FastUpdate each
											invoked.PrenoteStatus 		= 9
											invoked.PrenotificationDate	= PrmPostingDate


										if (each.BankAccountType.Savings)
											if (each.EFTBankAccountType.CreditAccount)
												AdTranCode	= 33
											else
												AdTranCode	= 38
										else
											if (each.EFTBankAccountType.CreditAccount)
												AdTranCode	= 23
											else
												AdTranCode	= 28

										LocalCheckDigit			= each.CustomerDraftBank.BOEEFTBank[9]
										if (LocalCheckDigit is numeric) 
											LocalCheckDigit		= each.CustomerDraftBank.BOEEFTBank[9]
										else	
											LocalCheckDigit		= 0

										AdRecId					= "000000000"
										AdRecId					= each.CustomerDraftBank.BOEEFTBank[1:8] + LocalCheckDigit
										if (AdRecId size < 9)
											LocalOutputDetailData	= "000000000"
											AdRecIdSize			= 9 - AdRecId size
											AdRecId				= LocalOutputDetailData[1:AdRecIdSize] + AdRecId

										AdDfi					= each.CustomerDraftBank.BOEEFTBankAccount
										AdNumericAmount			= 000000000 
										AdIdNbr					= PrmEftCompany using "%04d" + "-" + LocalBankCustomer using "%09d" + " "
										AdName					= each.Customer.Name



										AdTrace					= LocalCashBankEntity[1:8] + LocalTracePayment using "%07d"
										LocalACHBankID			= LocalCashBankEntity[1:8]
										if (LocalACHBankID is numeric
										or  LocalACHBankID not entered)
											NumericACHBankID	= LocalACHBankID
											AdTrace				= NumericACHBankID using "%08d" + LocalTracePayment using "%07d"

										LocalOutputDetailData	= "6" + AdTranCode + AdRecId using "%-9s" + AdDfi using "%-17.17s" + AdNumericAmount using "%010d" + AdIdNbr using "%-15s" + AdName using "%-22.22s" + "  " + AdAddenda + AdTrace using "%15s"
										include CreateEFTPaymentOutputDetail
										include BlockCalculation
										if (!PrintOnce)
											include BatchControl
											PrintOnce = true
										if (LocalTracePayment = 9999999)
											LocalTracePayment = 1
										else
											increment LocalTracePayment		

								include BlockCalculation

								if (PrmFillLastBlock = "Y")
									if (FileBlockCalc > 0)
										FileBlockCount += 1
								else
									if (FileBlockCount = 0)
										FileBlockCount 	= 1
								FcType					= 9 
								FcBatchCount			= LocalAchBatchNumber
								FcBlockCount			= FileBlockCount 
								FcEntryCount			= LocalFileEntryCount
								FcEntryHash				= LocalFileEntryHash 

								FcAlphaEntryDb			= "000000000000"
								FcEntryDb				= LocalBatchEntryDb using "%12.2f"
								FcPrecZeroEntryDb		= LocalBatchEntryDb * 100
								FcNumericEntryDb		= FcPrecZeroEntryDb

								LocalOutputDetailData	= FcNumericEntryDb
								ACHNumericNetAmount		= 12 - LocalOutputDetailData size
								if (ACHNumericNetAmount > 0)
									FcAlphaEntryDb 		= FcAlphaEntryDb[1:ACHNumericNetAmount] + LocalOutputDetailData
								else
									ACHNumericNetAmount	= LocalOutputDetailData size - 11
									FcAlphaEntryDb		= LocalOutputDetailData[ACHNumericNetAmount:LocalOutputDetailData size]
								FcAlphaEntryCr			= "000000000000"
								FcEntryCr				= LocalBatchEntryCr using "%12.2f"
								FcPrecZeroEntryCr		= LocalBatchEntryCr * 100
								FcNumericEntryCr		= FcPrecZeroEntryCr
								LocalOutputDetailData	= FcNumericEntryCr
								ACHNumericNetAmount		= 12 - LocalOutputDetailData size
								if (ACHNumericNetAmount > 0)
									FcAlphaEntryCr 		= FcAlphaEntryCr[1:ACHNumericNetAmount] + LocalOutputDetailData
								else
									ACHNumericNetAmount	= LocalOutputDetailData size - 11
									FcAlphaEntryCr		= LocalOutputDetailData[ACHNumericNetAmount:LocalOutputDetailData size]

								LocalOutputDetailData	= FcType + FcBatchCount using "%06d" + FcBlockCount using "%06d" + FcEntryCount using "%08d" + FcEntryHash using "%010d" + FcAlphaEntryDb + FcAlphaEntryCr
								include CreateEFTPaymentOutputDetail

								if (FileBlockCalc entered
								and PrmFillLastBlock = "Y")
									while (FileBlockCalc != 10)
										LocalOutputDetailData	= "9999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999"
										include CreateEFTPaymentOutputDetail
										FileBlockCalc	+= 1

								invoke FastUpdate PrmEftCompany
									invoked.EFTTraceCounter = LocalTracePayment - 1
							if (NonFormattedTapeRel exists)
								LocalPaymentFormat					= 3

								for each NonFormattedTapeRel

									LocalCompanyBankEntity			= LocalCashBankEntity 
									LocalCompanyBankAccountNumber	= LocalBankAccountNumber
									LocalPostingDate				= PrmPostingDate using "%tY" + PrmPostingDate using "%tm" + PrmPostingDate using "%td"
									if (each.PayNetAmount < 0)
										LocalPaymentType			= "CR"
										LocalPaymentReferance		= "DIRECT DEPOSIT"
									else
										LocalPaymentType			= "DR"
										LocalPaymentReferance		= "DIRECT DEBIT"

									NonTapeAlphaPayNetAmount		= "0000000000000000000"
									NonTapeNetAmount				= each.PayNetAmount using "%019.3f"
									NonPrecZeroNetAmount			= NonTapeNetAmount * 1000
									NonTapeNumericNetAmount			= NonPrecZeroNetAmount
									LocalOutputDetailData			= NonTapeNumericNetAmount 
									NonTapeNumericNetAmount			= 19 - LocalOutputDetailData size
									NonTapeAlphaPayNetAmount 		= NonTapeAlphaPayNetAmount[1:NonTapeNumericNetAmount] + LocalOutputDetailData	

									LocalPhoneNumber				= each.PhoneNmbr.InternationalPrefix + each.PhoneNmbr.SubscriberNumber + each.PhoneNmbr.Extension
									LocalOutputDetailData 			= LocalCompanyBankEntity using "%-15s" + LocalCompanyBankAccountNumber using "%-35s" + PrmEftCompany.Name using "%-80s" + each.RecKey.BankEntity using "%-15s" + each.RecKey.BankAcctNbr using "%-35s" + each.Name using "%-120s" + NonTapeAlphaPayNetAmount + LocalPostingDate + LocalPaymentType + LocalPaymentReferance using "%-15s" + PrmDebitCashCode.Currency using "%-5s" + each.CanName using "%-80s" + LocalPhoneNumber 
									include CreateEFTPaymentOutputDetail
								
								for each CustDraftBankRel
									LocalBankCustomer	= each.Customer
									if (EFTCustomerNotifyRel.PaymentFormat = "N")
										invoke FastUpdate each
											invoked.PrenoteStatus 		= 9
											invoked.PrenotificationDate	= PrmPostingDate
										LocalPaymentReferance			= "PRENOTIFICATION"
										
										if (PrmEftCompany.CustomerGroupField.CustomerGroup.EFTProcessingLevel = "G")
											LocalProcessingCompany		= PrmEftCompany
										else
											LocalProcessingCompany		= 0	
										LocalPrmCustomer				= LocalBankCustomer 
										LocalOutputDetailData 			= LocalCompanyBankEntity using "%-15s" + LocalCompanyBankAccountNumber using "%-35s" + PrmEftCompany.Name using "%-80s" + each.CustomerDraftBank.BOEEFTBank using "%-15s" + each.CustomerDraftBank.BOEEFTBankAccount using "%-35s" + each.Customer.Name using "%-120s" + "0000000000000000000" + LocalPostingDate + "PN" + LocalPaymentReferance using "%-15s" + CompanyCustRel.Currency using "%-5s" + CompanyCustRel.CreditAnalyst.Name using "%-80s" + CompanyCustRel.CreditAnalyst.PhoneNumber.SubscriberNumber using "%15s" 
										include CreateEFTPaymentOutputDetail
	
							if (BACSTapeRel exists)
								LocalPaymentFormat					= 2

								VhRecId								= "VOL1"
								VhSerialNbr							= PrmReference



								VhOwner2							= PrmEftCompany.EFTACHCompanyID





								VhLabelStdVersion					= "1"


								LocalOutputDetailData				= "VOL1" + VhSerialNbr using "%6s" + " " + "                          " + "    " + VhOwner2 using "%-18s" + "    " + "                    " + " " + "   " + " " + "  " + " " + VhLabelStdVersion
								include CreateEFTPaymentOutputDetail



								Hd1LabelId							= "HDR"
								Hd1LabelNbr							= "1"
								Hd1FileId1							= "A"
								Hd1UserNbr							= PrmEftCompany.EFTACHCompanyID
								Hd1FileId3							= "S"
								Hd1FileId4							= ""
								Hd1SetId							= PrmReference
								Hd1SectionNbr						= "0001"
								Hd1SequenceNbr						= "0001"
								Hd1Generation						= ""
								Hd1ProcSp							= " " 
								LocalCurrentDate					= current corporate date
								Hd1ProcYy							= LocalCurrentDate using "%ty" 
								Hd1ProcDdd							= LocalCurrentDate year day
								Hd1SingleSpace						= ""
								Hd1ExpirationDate					= "99365"
								Hd1AccessInd						= ""
								Hd1BlockCnt							= "000000"
								Hd1ResForFuture						= ""
								LocalOutputDetailData				= "HDR" + "1" + "A" + Hd1UserNbr using "%-6s" + "S" + "         " + Hd1SetId using "%6s" + "0001" + "0001" + "      " + " " + Hd1ProcYy + Hd1ProcDdd using "%3s" + " " + "99365" + " " + "000000" + "                    "
								include CreateEFTPaymentOutputDetail



								Hd2LabelId							= "HDR"
								Hd2LabelNbr							= "2"
								Hd2RecordFormat						= "F"
								Hd2BlockLength						= "00100"
								Hd2RecordLength						= "00100"
								Hd2ReserveForOs						= ""
								Hd2BufferOffset						= "00"
								Hd2ResForFuture						= ""
								LocalOutputDetailData				= "HDR" + "2" + "F" + "00100" + "00100" + "                                   " + "00" + "                            "
								include CreateEFTPaymentOutputDetail
	

								UhRecId								= "UHL1"


								UhProcYy							= LocalCurrentDate using "%ty" 
								UhProcDdd							= LocalCurrentDate year day

								UhRec9s								= "999999" 
								UhRecNull							= "    "



								UhWorkCode1							= "1 DAILY" 
								UhWorkCode2							= "  "
								UhFileNumber						= "001"
								UhAuditPrtId						= "   0000"



								LocalOutputDetailData				= "UHL1" + " " + LocalCurrentDate using "%ty" + UhProcDdd using "%3s" + "999999" + "    " + "00" + "000000" + "1 DAILY" + "  " + "001" + "       " + "   0000" + "   " + "    " + "                          "
								include CreateEFTPaymentOutputDetail

								for each BACSTapeRel


									BdDestSortCd					= BankEntity 
									BdDestAcctNbr					= BankAccountNumber
									BdDestAcctTyp					= 1
									if (EFTCustomerDraftBankRel.BankAccountTransactionCode entered)
									 	if(EFTCustomerDraftBankRel.BankAccountTransactionCode= "01")
											BdTransCode					= 01
										if(EFTCustomerDraftBankRel.BankAccountTransactionCode = "17")
											BdTransCode				= 17
										if(EFTCustomerDraftBankRel.BankAccountTransactionCode = "19")
											BdTransCode				= 19	
									BdOrigSortCd					= BankEntity
									BdAlphaOrigAcctNbr				= PrmDebitCashCode.BankAccountNumber using "%8s"
									BdNumericOrigAcctNbr			= 00000000
									if (PrmDebitCashCode.BankAccountNumber is numeric)
										BdNumericOrigAcctNbr		= BdAlphaOrigAcctNbr
									BdFreeFormat					= "0000"
									BdTransAmt						= each.PayNetAmount using "%011.2f"
									LocalPrecBdTransAmt				= BdTransAmt * 100
									LocalNumericBdTransAmt			= LocalPrecBdTransAmt 
									LocalTotalBdTransAmt		   +=LocalNumericBdTransAmt
									LocalDebitCount				   += 1
									BdUsersName						= PrmEftCompany.Name
									BdUsersRef						= "DEBIT RECORD"
									BdDestAcctNam					= each.Name
									LocalOutputDetailData			= BdDestSortCd using "%06d" + BdDestAcctNbr using "%08d" + BdDestAcctTyp using "%1d" + BdTransCode using "%02d" + BdOrigSortCd using "%06d" + BdNumericOrigAcctNbr using "%08d" + BdFreeFormat using "%04d" + LocalNumericBdTransAmt using "%011d" + BdUsersName using "%-18s" + BdUsersRef using "%-18s" + BdDestAcctNam using "%-18s"
									include CreateEFTPaymentOutputDetail
							 	BdDestSortCd					= BankEntity 

								BdDestAcctTyp					= 0
								BdTransCode						= 99
								BdOrigSortCd					= BankEntity
								BdAlphaOrigAcctNbr				= PrmDebitCashCode.BankAccountNumber using "%8s"
								BdNumericOrigAcctNbr			= 00000000
								if (PrmDebitCashCode.BankAccountNumber is numeric)
									BdNumericOrigAcctNbr		= BdAlphaOrigAcctNbr
								BdDestAcctNbr					= BdNumericOrigAcctNbr

								BdFreeFormat					= "0000"
								BdTransAmt						= LocalTotalBdTransAmt
								LocalTotalNumericBdTransAmt		= BdTransAmt
								BdUsersName						= PrmEftCompany.CustomerGroupField.CustomerGroup.Name
								BdUsersRef						= "CONTRA"
								BdDestAcctNam					= PrmEftCompany.Name
								LocalOutputDetailData			= BdDestSortCd using "%06d" + BdDestAcctNbr using "%08d" + BdDestAcctTyp using "%1d" + BdTransCode using "%02d" + BdOrigSortCd using "%06d" + BdNumericOrigAcctNbr using "%08d" + BdFreeFormat using "%04d" + LocalTotalNumericBdTransAmt using "%011d" + BdUsersName using "%-18s" + BdUsersRef using "%-18s" + BdDestAcctNam using "%-18s"
								include CreateEFTPaymentOutputDetail




								Ef1LabelId							= "EOF"
								Ef1LabelNbr							= "1"
								Ef1Header11 						= Hd1FileId1 + Hd1UserNbr using "%-6s" + Hd1FileId3 + Hd1FileId4 using "%9s"+ Hd1SetId using "%6s" + Hd1SectionNbr + Hd1SequenceNbr + Hd1Generation using "%6s" + " " + Hd1ProcYy + Hd1ProcDdd + " " + Hd1ExpirationDate + Hd1AccessInd
								Ef1BlockCount						="      "
								Ef1Header12 						= Hd1ResForFuture
								LocalOutputDetailData				= "EOF" + "1" + Ef1Header11 using "%-50s"+ "      " + Ef1Header12 using "%20s" 
								include CreateEFTPaymentOutputDetail
	
								Ef2LabelId							= "EOF"
								Ef2LabelNbr							= "2"
								Ef2Header21 						= Hd2RecordFormat + Hd2BlockLength + Hd2RecordLength + Hd2ReserveForOs using "%35s" + Hd2BufferOffset + Hd2ResForFuture using "%28s"
								LocalOutputDetailData				= "EOF" + "2" + Ef2Header21 using "%-76s" 
								include CreateEFTPaymentOutputDetail




								UtRecId								= "UTL1"
								UtDebitTotal						= LocalTotalNumericBdTransAmt
								UtCreditTotal						= LocalTotalNumericBdTransAmt
								UtDebitCount						= LocalDebitCount
								UtCreditCount						= 1
								UtFree								= ""
								LocalOutputDetailData				= "UTL1" + LocalTotalNumericBdTransAmt using "%013d" + LocalTotalNumericBdTransAmt using "%013d" + UtDebitCount using "%07d" + UtCreditCount using "%07d" + "                          " 
								include CreateEFTPaymentOutputDetail
								LocalTransactionIDNumber			= BankTransactionCodeRel.TransactionIDNumber
							invoke FinishProcessing EFTPaymentOutputView.EFTPaymentOutput
							invoke CreateEFTPaymentFiles EFTPaymentOutputView.EFTPaymentOutput
							invoke FastDelete Work1AR115Rel
							invoke FastDelete Work2AR115Rel
							invoke FastUpdate PrmEFTPaymentCreationResult
								invoked.RecordsExists 				= true

						else
							invoke FastUpdate PrmEFTPaymentCreationResult
								invoked.RecordsExists 				= false
						invoke UpdateStatusOnResult PrmEFTPaymentCreationResult

				Instance Rules
					LocalFinanceEnterpriseGroup	= PrmEFTPaymentCreationResult.FinanceEnterpriseGroup
					LocalPaymentNumber	= PrmDepositDate using "%tm" + PrmDepositDate using "%td" + PrmDepositDate using "%ty" 
					LocalEftCompany				= PrmEftCompany
					LocalReportByCompany		= PrmReportByCompany
					LocalCustomerGroup			= PrmEftCompany.CustomerGroupField.CustomerGroup
					if (ElectronicFundsTransferTransaction.CrCustomer = LocalEftCustomer)
						NextSentance					= true
					else
						LocalPaymentTransactionAmount	= 0
						LocalPaymentOriginalAmount		= 0
						LocalEftCustomer				= ElectronicFundsTransferTransaction.CrCustomer
						LocalPrmCustomer				= ElectronicFundsTransferTransaction.CrCustomer
						if (EFTNotifyRel exists)
							EFTNotifyRelExists = true
							if (!PaymentHeaderExist)
								include CreateReceivablePaymentHeader
							include CreateReceivablePayment
							LocalPaymentHeaderDetailCount  += 1
							LocalPaymentFormat			= EFTNotifyRel.PaymentFormat
						else
							EFTNotifyRelExists = false

					LocalEFTPaymentCreationResult	= PrmEFTPaymentCreationResult
					LocalAmount		   += NetAmt

					if (EFTNotifyRelExists)

						if (ReceivableInvoiceDetail.Invoice entered)
							LocalTriggerReceivableInvoice = LocalTriggerReceivableInvoice + ReceivableInvoiceDetail.Invoice + ","

						LocalBatchSequence		   += 1
						LocalTransactionAmount		= 0
						LocalOriginalAmount			= 0
						LocalCreditApplied			= 0
						LocalOriginalCreditApplied	= 0
						LocalSelectSequence			= 0
						LocalRecordCount			= 0
						LocalCheckTotal				= 0

						invoke Delete EFTAdjustmentRel
						LocalDiscountAmount			= 0
						LocalOriginalDiscountAmount	= 0
						if (ReceivableInvoiceDetail.ApplicationAmount.FunctionalAmount.EnteredCurrencyAmount = 0
						and ReceivableInvoiceDetail.AdjustmentAmount.FunctionalAmount.EnteredCurrencyAmount = 0)
							LocalDiscountCount 										= 1
							while (LocalDiscountCount <= 3
							and	LocalDiscountAmount = 0
							and	ReceivableInvoiceDetail.DiscountDate.DiscDate[LocalDiscountCount] entered)
								LocalDiscountDate 								= ReceivableInvoiceDetail.DiscountDate.DiscDate[LocalDiscountCount] + ComCustomerRel.ApplicationDiscountGraceDays
								if (LocalDiscountDate >= ReceivablePaymentHeaderView.ReceivablePaymentHeader.DepositDate)
									if (ReceivableInvoiceDetail.DiscountAmount.OrigDiscAmt[LocalDiscountCount] = 0)
										LocalDiscountAmount 					= ReceivableInvoiceDetail.DiscountPercent.DiscPct[LocalDiscountCount] * ReceivableInvoiceDetail.InvoiceAmount.FunctionalAmount.EnteredCurrencyAmount
										LocalOriginalDiscountAmount				= ReceivableInvoiceDetail.DiscountPercent.DiscPct[LocalDiscountCount] * ReceivableInvoiceDetail.InvoiceAmount.CurrencyAmount
									else
										if (ReceivableInvoiceDetail.OriginalCurrency != PrmCreditCashCode.Currency)
											LocalExchangeDate					= ReceivableInvoiceDetail.TransactionDate
											LocalTransactionAmount				= ReceivableInvoiceDetail.DiscountAmount.OrigDiscAmt[LocalDiscountCount]
											LocalFromCurrency					= ReceivableInvoiceDetail.OriginalCurrency
											LocalToCurrency						= PrmCreditCashCode.Currency
											include CurrencyConversion
											LocalDiscountAmount					= LocalOutputCurrencyAmount
										else
											LocalDiscountAmount					= ReceivableInvoiceDetail.DiscountAmount.OrigDiscAmt[LocalDiscountCount]
									 	if (ReceivableInvoiceDetail.OriginalCurrency != ReceivableInvoiceDetail.Company.Currency)
											LocalExchangeDate				= ReceivableInvoiceDetail.TransactionDate
											LocalTransactionAmount			= ReceivableInvoiceDetail.DiscountAmount.OrigDiscAmt[LocalDiscountCount]
											LocalFromCurrency				= ReceivableInvoiceDetail.OriginalCurrency
											LocalToCurrency					= ReceivableInvoiceDetail.Company.Currency
											include CurrencyConversion
											LocalBaseDiscountAmount			= LocalOutputCurrencyAmount
										else
											LocalBaseDiscountAmount			= ReceivableInvoiceDetail.DiscountAmount.OrigDiscAmt[LocalDiscountCount]
										LocalOriginalDiscountAmount			= ReceivableInvoiceDetail.DiscountAmount.OrigDiscAmt[LocalDiscountCount]
								LocalDiscountCount 							+= 1


						Continue = true
						LocalApplicationAmount	= ReceivableInvoiceDetail.InvoiceAmount.CurrencyAmount - (ReceivableInvoiceDetail.ApplicationAmount.CurrencyAmount + ReceivableInvoiceDetail.AdjustmentAmount.CurrencyAmount + LocalOriginalDiscountAmount)
						if (ReceivableInvoiceDetail.OriginalCurrency = PrmDebitCashCode.Currency)
							Continue = true
							if (ReceivableInvoiceDetail.ReceivableInvoiceDetail.ReceivableInvoiceDetailType.CreditMemo)
								LocalPaymentTransactionAmount		-= LocalApplicationAmount
								LocalPaymentOriginalAmount			-= LocalApplicationAmount
							else
								LocalPaymentTransactionAmount		+= LocalApplicationAmount
								LocalPaymentOriginalAmount			+= LocalApplicationAmount
						else
							LocalFromCurrency	= ReceivableInvoiceDetail.OriginalCurrency
							LocalToCurrency		= PrmDebitCashCode.Currency
							if (CurrencyRelationshipRel not exists)
								Continue = false
							else
								Continue = true
								LocalExchangeDate						= PrmDepositDate
								LocalTransactionAmount					= LocalApplicationAmount
								LocalFromCurrency						= ReceivableInvoiceDetail.OriginalCurrency
								LocalToCurrency							= PrmDebitCashCode.Currency
								include CurrencyConversion
								LocalApplicationAmount					= LocalOutputCurrencyAmount
								if (ReceivableInvoiceDetail.ReceivableInvoiceDetail.ReceivableInvoiceDetailType.CreditMemo)
									LocalPaymentTransactionAmount		-= LocalOutputCurrencyAmount
									LocalPaymentOriginalAmount			-= LocalOutputCurrencyAmount
								else
									LocalPaymentTransactionAmount		+= LocalOutputCurrencyAmount
									LocalPaymentOriginalAmount			+= LocalOutputCurrencyAmount
						if (Continue)	
							invoke CreateFromEFT ReceivableApplicationSelect
								assign result to ReceivableApplicationSelectView
								invoked.RecPaySw						= true
								invoked.Company							= ProcessingCompany
								invoked.ReceivablePaymentHeader			= ReceivablePaymentHeaderView.ReceivablePaymentHeader
								invoked.ReceivablePayment				= ReceivablePaymentView.ReceivablePayment
								invoked.ReceivableApplicationSelect.Company												= ProcessingCompany
								invoked.ReceivableApplicationSelect.TransactionCompany									= ReceivableInvoiceDetail.Company
								invoked.ReceivableApplicationSelect.ReceivableInvoiceDetail.PaymentSeq					= ReceivableInvoiceDetail.ReceivableInvoiceDetail.PaymentSeq
								invoked.ReceivableApplicationSelect.ReceivableInvoiceDetail.ReceivableInvoiceDetailType	= ReceivableInvoiceDetail.ReceivableInvoiceDetail.ReceivableInvoiceDetailType
								invoked.ReceivableApplicationSelect.ReceivableInvoiceDetail.Invoice						= ReceivableInvoiceDetail.ReceivableInvoiceDetail.Invoice
								invoked.ReceivableApplicationSelect.ReceivableInvoiceDetail								= ReceivableInvoiceDetail
								if (LocalDiscountAmount entered)
									invoked.AdjustmentSequence			= 1
								invoked.GeneralLedgerDate				= PrmPostingDate
								invoked.ReceivableOperator				= PrmOprCode
								invoked.ElectronicFundsTransfer			= true
								invoked.BaseApplicationAmount			= ReceivableInvoiceDetail.InvoiceAmount.FunctionalAmount.EnteredCurrencyAmount - (ReceivableInvoiceDetail.ApplicationAmount.FunctionalAmount.EnteredCurrencyAmount + ReceivableInvoiceDetail.AdjustmentAmount.FunctionalAmount.EnteredCurrencyAmount + LocalBaseDiscountAmount) 
								invoked.TransactionApplicationAmount	= ReceivableInvoiceDetail.InvoiceAmount.CurrencyAmount - (ReceivableInvoiceDetail.ApplicationAmount.CurrencyAmount + ReceivableInvoiceDetail.AdjustmentAmount.CurrencyAmount + LocalOriginalDiscountAmount)
								invoked.PaymentApplicationAmount		= LocalApplicationAmount 
							LocalLastSelectApplicationSequence		   += 1


							LocalOpenAmount = ReceivableInvoiceDetail.InvoiceAmount.FunctionalAmount.EnteredCurrencyAmount - (ReceivableInvoiceDetail.ApplicationAmount.FunctionalAmount.EnteredCurrencyAmount + ReceivableInvoiceDetail.AdjustmentAmount.FunctionalAmount.EnteredCurrencyAmount + LocalDiscountAmount)
							if (ReceivableInvoiceDetail.OriginalCurrency != PrmCreditCashCode.Currency)
								LocalExchangeDate						= ReceivableInvoiceDetail.TransactionDate
								LocalTransactionAmount					= ReceivableInvoiceDetail.InvoiceAmount.CurrencyAmount
								LocalFromCurrency						= ReceivableInvoiceDetail.OriginalCurrency
								LocalToCurrency							= PrmCreditCashCode.Currency
								include CurrencyConversion
								LocalPaymentCompanyInvoiceAmount		= LocalOutputCurrencyAmount

								LocalExchangeDate						= ReceivableInvoiceDetail.TransactionDate
								LocalTransactionAmount					= ReceivableInvoiceDetail.ApplicationAmount.CurrencyAmount
								LocalFromCurrency						= ReceivableInvoiceDetail.OriginalCurrency
								LocalToCurrency							= PrmCreditCashCode.Currency
								include CurrencyConversion
								LocalPaymentCompanyApplicationAmountAmount	= LocalOutputCurrencyAmount

								LocalExchangeDate						= ReceivableInvoiceDetail.TransactionDate
								LocalTransactionAmount					= ReceivableInvoiceDetail.AdjustmentAmount.CurrencyAmount
								LocalFromCurrency						= ReceivableInvoiceDetail.OriginalCurrency
								LocalToCurrency							= PrmCreditCashCode.Currency
								include CurrencyConversion
								LocalPaymentCompanyAdjustmentAmountAmount	= LocalOutputCurrencyAmount
								LocalOpenAmount =  LocalPaymentCompanyInvoiceAmount - (LocalPaymentCompanyApplicationAmountAmount + LocalPaymentCompanyAdjustmentAmountAmount + LocalDiscountAmount)

							LocalSummarizeLine	= ReceivableInvoiceDetail.SummarizeDetail
							if (ReceivableInvoiceDetail.ReceivableInvoiceDetail.ReceivableInvoiceDetailType.CreditMemo)
								LocalCreditTotal		-=  LocalOpenAmount
							else
								LocalDebitTotal			+=  LocalOpenAmount

							if (LocalDiscountAmount entered)

								if (ComCustomerRel.DiscountAdjustmentReason entered)
									LocalAdjustmentReason			= ComCustomerRel.DiscountAdjustmentReason
									if (!ReceivableReasonRel.Active)
										LocalAdjustmentReason			= PrmDiscReasCd
								else
									LocalAdjustmentReason			= PrmDiscReasCd

								if (ReceivableReasonRel exists)
									ReceivableReasonDescription		= ReceivableReasonRel.Description
									if (ReceivableReasonRel.DistributionAccount.Project not entered
									and !ReceivableInvoiceDetail.ExemptProject)
										DistributionAccountProject 	= ""
									else
										if (ReceivableReasonRel.DistributionAccount.Project entered)
											DistributionAccountProject = ReceivableReasonRel.DistributionAccount.Project
										else
											DistributionAccountProject = ReceivableInvoiceDetail.Project

								invoke CreateFromBatch ReceivableApplicationAdjustmentSelect
									invoked.Company						= ReceivableInvoiceDetail.Company
									invoked.ReceivableApplicationAdjustmentSelect.TransType		= ReceivableInvoiceDetail.ReceivableInvoiceDetail.ReceivableInvoiceDetailType
									invoked.ReceivableApplicationAdjustmentSelect.Invoice		= ReceivableInvoiceDetail.ReceivableInvoiceDetail.Invoice
									invoked.ReceivableApplicationAdjustmentSelect.PaymentSeq	=  ReceivableInvoiceDetail.ReceivableInvoiceDetail.PaymentSeq
									invoked.ReceivableApplicationAdjustmentSelect.AdjustmentSequence = 1
									invoked.BaseAdjustAmount			= LocalBaseDiscountAmount
									invoked.AdjustAmount				= LocalOriginalDiscountAmount
									invoked.CreditAdjustAmount			= LocalDiscountAmount
									invoked.GeneralLedgerDate			= PrmPostingDate
									invoked.ReceivableApplicationAdjustmentSelect.BatchNumber = ReceivableInvoiceDetail.BatchNumber
									invoked.AdjustmentReason			= LocalAdjustmentReason
									invoked.ExchangeDate				= PrmDepositDate
									invoked.Description					= ReceivableReasonDescription
									invoked.DistributionAccount.Project	= DistributionAccountProject
									invoked.ReceivableOperator			= PrmOprCode				

							if (ElectronicFundsTransferTransaction.CrCustomer = LocalEFTWorkCustomer)

								LocalPrmCustomer		= ElectronicFundsTransferTransaction.CrCustomer
								LocalProcessingCompany	= PrmEftCompany

								if (ReceivableInvoiceDetail.ReceivableInvoiceDetail.ReceivableInvoiceDetailType.CreditMemo)
									LocalNetAmount		-= ReceivableApplicationSelectView.BaseApplicationAmount
									LocalPayNetAmount	-= ReceivableApplicationSelectView.PaymentApplicationAmount 
									LocalAchAmount		-= ReceivableApplicationSelectView.PaymentApplicationAmount
								else
									LocalNetAmount		+= ReceivableApplicationSelectView.BaseApplicationAmount
									LocalPayNetAmount	+= ReceivableApplicationSelectView.PaymentApplicationAmount
									LocalAchAmount		+= ReceivableApplicationSelectView.PaymentApplicationAmount

								if (LocalAchAmount < 99999999.99
								and LocalAchAmount > -99999999.99)
									increment LocalInvoiceDetailCount
									if (ReceivableInvoiceDetail.ReceivableInvoiceDetail.ReceivableInvoiceDetailType.CreditMemo)
										LocalAchNetAmount		-= ReceivableApplicationSelectView.BaseApplicationAmount
										LocalAchPayNetAmount	-= ReceivableApplicationSelectView.PaymentApplicationAmount
									else
										LocalAchNetAmount		+= ReceivableApplicationSelectView.BaseApplicationAmount
										LocalAchPayNetAmount	+= ReceivableApplicationSelectView.PaymentApplicationAmount

								if (LocalAchAmount > 99999999.99
								or  LocalAchAmount < -99999999.99)
									if (LocalAchPayNetAmount entered)	
										include CreateWork2
										LocalInvoiceDetailCount	= 1

									if (ReceivableInvoiceDetail.ReceivableInvoiceDetail.ReceivableInvoiceDetailType.CreditMemo)
										LocalAchNetAmount		= ReceivableApplicationSelectView.BaseApplicationAmount 	* (-1)
										LocalAchPayNetAmount	= ReceivableApplicationSelectView.PaymentApplicationAmount 	* (-1)
										LocalAchAmount			= ReceivableApplicationSelectView.PaymentApplicationAmount 	* (-1) 
									else
										LocalAchNetAmount		= ReceivableApplicationSelectView.BaseApplicationAmount
										LocalAchPayNetAmount	= ReceivableApplicationSelectView.PaymentApplicationAmount
										LocalAchAmount			= ReceivableApplicationSelectView.PaymentApplicationAmount

									if (ReceivableApplicationSelectView.PaymentApplicationAmount > 99999999.99
									or  ReceivableApplicationSelectView.PaymentApplicationAmount < -99999999.99)
										if (ReceivableInvoiceDetail.ReceivableInvoiceDetail.ReceivableInvoiceDetailType.CreditMemo)
											LocalAchNetAmount		-= ReceivableApplicationSelectView.BaseApplicationAmount
											LocalAchPayNetAmount	-= ReceivableApplicationSelectView.PaymentApplicationAmount
										else
											LocalAchNetAmount		+= ReceivableApplicationSelectView.BaseApplicationAmount
											LocalAchPayNetAmount	+= ReceivableApplicationSelectView.PaymentApplicationAmount

										LocalSplitAmount	= ReceivableApplicationSelectView.PaymentApplicationAmount
										initialize LocalFactor
										while (LocalSplitAmount > 99999999.99
										or	 LocalSplitAmount < -99999999.99)
											LocalAchPayNetAmount	= ReceivableApplicationSelectView.PaymentApplicationAmount
											LocalAchNetAmount		= ReceivableApplicationSelectView.BaseApplicationAmount
											increment LocalFactor
											LocalSplitAmount	= ReceivableApplicationSelectView.PaymentApplicationAmount / LocalFactor
										LocalInvoiceDetailCount	= 1
										if (ElectronicFundsTransferTransaction.ReceivableInvoiceDetail != LastEFTRIDetail)
											include CreateWork2
											initialize LocalInvoiceDetailCount

											initialize LocalAchNetAmount
											initialize LocalAchPayNetAmount
											initialize LocalAchAmount
											initialize LocalFactor

								if (ElectronicFundsTransferTransaction.ReceivableInvoiceDetail = LastEFTRIDetail)
									if (LocalAchPayNetAmount = ReceivableApplicationSelectView.PaymentApplicationAmount)	
										LocalInvoiceDetailCount	= 1
									include CreateWork2
									initialize LocalInvoiceDetailCount
									initialize LocalFactor
									initialize LocalAchNetAmount
									initialize LocalAchPayNetAmount
									initialize LocalAchAmount
									LocalReceivableGLCode	= PrmProcessLevel.ReceivedNotAppliedReceivableGeneralLedgerCode
									if (LocalPaymentOriginalAmount >= 0)	
										LocalPaymentHeaderDetailTotal	   += LocalPaymentOriginalAmount
									if (LocalPaymentTransactionAmount >=  0)	
										LocalPaymentHeaderBaseTotal		   += LocalPaymentTransactionAmount
									if (LocalPaymentTransactionAmount < 0)
										include BuildDebit
									invoke FastUpdate ReceivablePaymentView.ReceivablePayment
										invoked.LastSelectApplicationSequence	= LocalLastSelectApplicationSequence
										if (LocalPaymentTransactionAmount < 0)
											invoked.BaseAmount				= 0
											invoked.TransactionAmount		= 0
											invoked.Status					= 0
										else
											invoked.BaseAmount				= LocalPaymentTransactionAmount
											invoked.TransactionAmount		= LocalPaymentOriginalAmount
										if (LocalPaymentTransactionAmount < 0
										and PrmReference not entered)
											invoked.ReferenceNumber		= "EFT CREDIT"
									LocalLastSelectApplicationSequence	= 0		
							else
								LocalPrmCustomer		= ElectronicFundsTransferTransaction.CrCustomer
								LocalCustomerGroup		= PrmEftCompany.CustomerGroupField.CustomerGroup
								LocalProcessingCompany	= PrmEftCompany

								LocalEFTPaymentCreationResult	= PrmEFTPaymentCreationResult
								LastEFTRIDetail			= last EFTTransactionRel.ReceivableInvoiceDetail
								initialize LocalAchAmount
								initialize LocalAchNetAmount
								initialize LocalAchPayNetAmount

								if (ReceivableInvoiceDetail.ReceivableInvoiceDetail.ReceivableInvoiceDetailType.CreditMemo)
									LocalNetAmount		= ReceivableApplicationSelectView.BaseApplicationAmount * (-1)
									LocalPayNetAmount	= ReceivableApplicationSelectView.PaymentApplicationAmount * (-1)
									LocalAchAmount		= ReceivableApplicationSelectView.PaymentApplicationAmount * (-1) 
								else
									LocalNetAmount		= ReceivableApplicationSelectView.BaseApplicationAmount
									LocalPayNetAmount	= ReceivableApplicationSelectView.PaymentApplicationAmount
									LocalAchAmount		= ReceivableApplicationSelectView.PaymentApplicationAmount



								increment LocalInvoiceDetailCount
								if (ReceivableInvoiceDetail.ReceivableInvoiceDetail.ReceivableInvoiceDetailType.CreditMemo)
									LocalAchNetAmount		= ReceivableApplicationSelectView.BaseApplicationAmount * (-1)
									LocalAchPayNetAmount	= ReceivableApplicationSelectView.PaymentApplicationAmount * (-1)
								else
									LocalAchNetAmount		= ReceivableApplicationSelectView.BaseApplicationAmount
									LocalAchPayNetAmount	= ReceivableApplicationSelectView.PaymentApplicationAmount
									
								if (LocalAchAmount > 99999999.99
								or LocalAchAmount < -99999999.99)
									if (ReceivableInvoiceDetail.ReceivableInvoiceDetail.ReceivableInvoiceDetailType.CreditMemo)
										LocalAchAmount = LocalAchAmount * (-1)
									LocalSplitAmount	= LocalAchAmount
									initialize LocalFactor
									increment LocalInvoiceDetailCount
									while (LocalSplitAmount > 99999999.99)
										increment LocalFactor
										LocalSplitAmount	= LocalAchAmount / LocalFactor
									if (ReceivableInvoiceDetail.ReceivableInvoiceDetail.ReceivableInvoiceDetailType.CreditMemo)
										LocalAchAmount = LocalAchAmount * (-1)

								if (ElectronicFundsTransferTransaction.ReceivableInvoiceDetail = LastEFTRIDetail)







									include CreateWork2
									initialize LocalAchNetAmount
									initialize LocalAchPayNetAmount
									initialize LocalAchAmount
									initialize LocalInvoiceDetailCount
									initialize LocalFactor
									LocalReceivableGLCode	= PrmProcessLevel.ReceivedNotAppliedReceivableGeneralLedgerCode
									if (LocalPaymentOriginalAmount >= 0)	
										LocalPaymentHeaderDetailTotal	   += LocalPaymentOriginalAmount
									if (LocalPaymentTransactionAmount >=  0)	
										LocalPaymentHeaderBaseTotal		   += LocalPaymentTransactionAmount
									if (LocalPaymentTransactionAmount < 0)
										include BuildDebit
									invoke FastUpdate ReceivablePaymentView.ReceivablePayment
										invoked.LastSelectApplicationSequence	= LocalLastSelectApplicationSequence
										if (LocalPaymentTransactionAmount < 0)
											invoked.BaseAmount				= 0
											invoked.TransactionAmount		= 0
											invoked.Status					= 0
										else
											invoked.BaseAmount				= LocalPaymentTransactionAmount
											invoked.TransactionAmount		= LocalPaymentOriginalAmount
										if (LocalPaymentTransactionAmount < 0
										and PrmReference not entered)
											invoked.ReferenceNumber		= "EFT CREDIT"
									LocalLastSelectApplicationSequence	= 0		

								LocalEFTWorkCustomer	= ElectronicFundsTransferTransaction.CrCustomer
							if (ReceivableInvoiceDetail.ReceivableInvoiceDetailType = "C")
								LocalCreditsFl 	= true
							else
								LocalDebitsFl	= true

							invoke FastUpdate
								invoked.EftCreated	= "Y"
								invoked.EFTPaymentCreationResult	= PrmEFTPaymentCreationResult
								if (ReceivableInvoiceDetail.ReceivableInvoiceDetail.ReceivableInvoiceDetailType.CreditMemo)
									invoked.EFTPCreationDiscountAmount	= LocalDiscountAmount * (-1)
									invoked.EFTPCreationNetAmount		= LocalOpenAmount * (-1)
								else
									invoked.EFTPCreationDiscountAmount	= LocalDiscountAmount
									invoked.EFTPCreationNetAmount		= LocalOpenAmount
								if (ElectronicFundsTransferTransaction.EftType  = "P"
								and ElectronicFundsTransferTransaction.EftNote.PrenoteSent)
									invoked.EftNote = "9"




