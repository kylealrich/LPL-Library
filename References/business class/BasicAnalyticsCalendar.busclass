BasicAnalyticsCalendar is a BusinessClass
	owned by analytics
	prefix is BACAL
	representative text is "<BasicAnalyticsCalendar>-<Description>"
	
	Ontology
		symbolic key is BasicAnalyticsCalendar
	
	Patterns
		implements BODId
	
	Persistent Fields
		Description
		CalendarSequence	is Numeric 4
		TopNode				is like BasicAnalyticsCalendarPeriod 
		YTDTopNode			is like BasicAnalyticsCalendarPeriod
				
		CalendarType		is Numeric 2
			States
				Months				value is 1
				445        	        value is 2
				454                 value is 3
				544                 value is 4
				5253Week			value is 5
				4WeekPeriods		value is 6				
				Weeks				value is 7
				Days				value is 8
				Other				value is 99		
						
		YearEndMonth		is Numeric 2     
			States
				January				value is 1
				February			value is 2
				March				value is 3
				April				value is 4
				May					value is 5
				June				value is 6
				July				value is 7
				August				value is 8
				September			value is 9
				October				value is 10
				November			value is 11
				December			value is 12
				
		YearEndLastDay		is Numeric 1 
			States
				Sunday				value is 1
				Monday				value is 2
				Tuesday				value is 3
				Wednesday			value is 4
				Thursday			value is 5
				Friday				value is 6
				Saturday			value is 7
				
		YearEndLastDayMethod is Numeric 1
			States
				WithinYearEndMonth			value is 1
				NearestToEndOfYearEndMonth  value is 2			
				
		WeeksMethod			is Numeric 1
		    States
		    	ISO		   			value is 1
		    	Excel1     			value is 2
		    	Excel2     			value is 3
		    	Simple     			value is 4

		DaysHierarchy		is Numeric 1
			States
				DaysWithinYear		value is 1
				DaysWithinMonth 	value is 2
				DaysWithinWeek  	value is 3
			
	Local Fields
		LocalYear				is Year
		LocalQuarter			is Numeric 1
		LocalMonth				is Numeric 2
		LocalWeek				is Numeric 2
		LocalDay				is Numeric 3
		LocalDate				is Date
		LocalAlphaYear			is Alpha 4
		LocalAlphaDay			is Alpha 3
		LocalYearKey			is a BasicAnalyticsCalendarPeriod
		LocalQuarterKey			is a BasicAnalyticsCalendarPeriod
		LocalPeriodKey			is a BasicAnalyticsCalendarPeriod
		TopNodeFound			is Boolean
		LocalSummaryPeriod		is a BasicAnalyticsCalendarPeriod
		LocalPeriod				is a BasicAnalyticsCalendarPeriod
		DatePeriod				is a BasicAnalyticsCalendarPeriod
		LocalJulian				is Numeric 7
		LocalCreateWithinKey	is a BasicAnalyticsCalendarPeriod
		LocalWeekAlpha			is Alpha 2
		LocalMonthAlpha			is Alpha 2
		LocalDayAlpha			is Alpha 3
		PeriodBegin				is like BasicAnalyticsCalendarPeriod
		PeriodEnd				is like BasicAnalyticsCalendarPeriod
		PeriodCount				is Numeric size 3
		WeekCount       		is Numeric size 2		
		Quarter					is Numeric size 1
		MaxPeriods				is Numeric size 3
		FirstOfMonth    		is Boolean
		FromDate				is Date
		ToDate					is Date
		LastDateBefore  		is Date
		LastDateAfter   		is Date
		NearestEndDate  		is Date
		StartDateMonth  		is Numeric 2
		YearMonthEnd			is Date
		YearEndDate				is Date
		TempDay		    		is Numeric 1
		TempMonth				is Numeric 2
		TempYear				is Year
		TempYearPlus1   		is Year
		TempYearMinus1  		is Year
		WeekArray				is a GLCalendarWeekArray
		YearDiff				is Numeric 6
		DiffBeforeYearEnd 		is Numeric 2
		DiffAfterYearEnd  		is Numeric 2
		SkipPeriod				is Boolean
		LookupPeriod    		is a BasicAnalyticsCalendarPeriod
		SkipShadow
		LocalPeriodType			is Numeric 2
		LocalActionCode				is an ActionCode
		LocalBODCurrentTimeStamp	is a BODCurrentTimeStamp
		LocalPeriodArray		is a BasicAnalyticsCalendarPeriodArray
		NewDateCount			is Numeric 3
		LocalParentPeriod		is a BasicAnalyticsCalendarPeriod
		SaveMonth				is Numeric 2
		CurrentMonth			is Numeric 2
		SaveWeek				is Numeric 2
		CurrentWeek				is Numeric 2
		LocalCalendarType		is Numeric 2
			States
				Months				value is 1
				445        	        value is 2
				454                 value is 3
				544                 value is 4
				5253Week			value is 5
				4WeekPeriods		value is 6				
				Weeks				value is 7
				Days				value is 8
				Other				value is 99		
		LocalDaysHierarchy		is Numeric 1
			States
				DaysWithinYear		value is 1
				DaysWithinMonth 	value is 2
				DaysWithinWeek  	value is 3
								  	
	Derived Fields
		TopNodeString	    is a StringField
			type is AlphaUpper 20
			restricted
			CalendarSequence
			"_TOP_NODE"

		YTDTopNodeString	    is a StringField
			type is AlphaUpper 20
			restricted
			CalendarSequence
			"_TOP_NODE_YTD"
					
		NewEndDateString is a DerivedField
			type is AlphaUpper 20
			restricted
			LocalAlphaYear = LocalDate year
			LocalAlphaDay  = LocalDate year day
			NewEndDateString = LocalAlphaYear
			if (LocalAlphaDay size = 1)
				NewEndDateString += "00"
			else
			if (LocalAlphaDay size = 2)
				NewEndDateString += "0"
			NewEndDateString += LocalAlphaDay 
									
		NewYearString is a StringField
			type is AlphaUpper 20
			restricted
			CalendarSequence
			"_"			
			LocalYear
			
		NewQuarterString is a StringField
			type is AlphaUpper 20
			restricted
			CalendarSequence
			"_"		
			LocalYear
			"Q"	
			LocalQuarter
			
		NewMonthString is a StringField
			type is AlphaUpper 20
			restricted
			CalendarSequence
			"_"	
			LocalYear
			"M"		
			LocalMonthAlpha				
		
		NewWeekString is a StringField
			type is AlphaUpper 20
			restricted
			CalendarSequence
			"_"	
			LocalYear
			"W"		
			LocalWeekAlpha

		NewDayString is a StringField
			type is AlphaUpper 20
			restricted
			CalendarSequence
			"_"	
			LocalYear
			"D"		
			LocalDayAlpha
			
		DerivedBeginningBalanceString is a StringField
			type is AlphaUpper 20
			restricted
			LocalYear
			"000"
							
		DerivedBeginningBalanceDisplayPeriod is a StringField
			type is Alpha 30
			restricted
			LocalYear
			" Beginning Balance"
											
		StartDateJulian is a DerivedField
			type is AlphaUpper 7
			restricted
			return TopNodeRel.first ChildrenRel.BasicAnalyticsCalendarPeriod.StartDateJulian

		EndDateJulian is a DerivedField
			type is AlphaUpper 7	
			restricted
			return (last BasicAnalyticsPeriodShadow set.BasicAnalyticsCalendarPeriod.EndDateJulian)				
		
		Description25 is a DerivedField
			type is Alpha 25
			restricted
			return Description
			
		Description21 is a DerivedField
			type is Alpha 21
			restricted
			return Description
						

	Conditions
		EligibleForYearCreation
			restricted
			when (!CalendarType.Other)
		
		NotWeeks
			restricted
			when (!CalendarType.Weeks)
			
		445OrVariant
			restricted
			when (CalendarType.445
			or    CalendarType.454
			or    CalendarType.544)

		PeriodDataExists
			restricted
			when (BasicAnalyticsCalendarPeriodRel exists)

		ShowStartDate
			restricted
			when (!CalendarType.Weeks)
		
		TopNodeEntered
			restricted
			when (TopNode entered)
			
		YTDTopNodeEntered
			restricted
			when (YTDTopNode entered)




							
		CalendarExists
			restricted
			when (BasicAnalyticsCalendar exists)
							
		AtLeastOneBasicAnalyticsCalendarExists
			when (BasicAnalyticsCalendarsRel exists)
							
		NoBasicAnalyticsCalendarExists
			when (!BasicAnalyticsCalendarsRel exists)
							
	Field Rules
		CalendarSequence
			autosequence using ByCalendarSequence

		CalendarType
			required
			
		WeeksMethod
			if (CalendarType.Weeks)
				default to WeeksMethod.ISO
				
		YearEndMonth
			if (CalendarType.5253Week)
				required
				
		YearEndLastDay
			if (CalendarType.5253Week)
				required
						
		YearEndLastDayMethod
			if (CalendarType.5253Week)
				required		
				
		TopNode
			TopNode 	= TopNodeString
		
		DaysHierarchy
			if (CalendarType.Days)
				default to DaysHierarchy.DaysWithinYear
																		
	Relations
		TopNodeRel
			one-to-one relation to BasicAnalyticsCalendarPeriod
			Field Mapping uses symbolic key				
				related.BasicAnalyticsCalendarPeriod = TopNode

		BasicAnalyticsYearRel
			one-to-one relation to BasicAnalyticsYear
			Field Mapping uses symbolic key				
				related.BasicAnalyticsYear = LocalYear

		YTDTopNodeRel
			one-to-one relation to BasicAnalyticsCalendarPeriod
			Field Mapping uses symbolic key				
				related.BasicAnalyticsCalendarPeriod = YTDTopNode

		BasicAnalyticsCalendarPeriodRel
			one-to-many relation to BasicAnalyticsCalendarPeriod
			Field Mapping uses symbolic key

			Instance Selection
				where (related.PeriodType.EndDate)

		PeriodsTopNodeRel
			one-to-many relation to BasicAnalyticsCalendarPeriod
			Field Mapping uses ByTopNode				
				related.TopNode         	   = TopNode

		PeriodsYTDTopNodeRel
			one-to-many relation to BasicAnalyticsCalendarPeriod
			Field Mapping uses ByTopNode				
				related.TopNode         	   = YTDTopNode

		HierarchyTopNodeRel
			one-to-many relation to BasicAnalyticsPeriodHierarchy
			Field Mapping uses SubordinatesByTopNode
				related.TopNode         	   = TopNode					

		HierarchyYTDTopNodeRel
			one-to-many relation to BasicAnalyticsPeriodHierarchy
			Field Mapping uses SubordinatesByTopNode				
				related.TopNode         	   = YTDTopNode

		HierarchyYearTopNodeRel
			one-to-one relation to BasicAnalyticsPeriodHierarchy
			Field Mapping uses part of key				
				related.BasicAnalyticsCalendarPeriod = TopNode
				related.SubordinatePeriod			= LocalYearKey
												
		EndDatesInCalendarRel
			one-to-many relation to BasicAnalyticsPeriodHierarchy
			Field Mapping uses SubordinatesByTopNode				
				related.TopNode         	   = TopNode
			Instance Selection
				where (related.SubordinatePeriod.PeriodType.EndDate
				or     related.SubordinatePeriod.PeriodType.BeginningBalance)

		EndDateInPeriodRel
			one-to-one relation to BasicAnalyticsPeriodHierarchy
			Field Mapping uses SubordinatesByTopNode				
				related.TopNode				  		= TopNode
				related.SubordinatePeriod	   		= LocalPeriod
				related.BasicAnalyticsCalendarPeriod = LocalSummaryPeriod
				
		EndDatesInYTDCalendarRel
			one-to-many relation to BasicAnalyticsPeriodHierarchy
			Field Mapping uses SubordinatesByTopNode				
				related.TopNode         	   = YTDTopNode
			Instance Selection
				where (related.SubordinatePeriod.PeriodType.EndDate
				or     related.SubordinatePeriod.PeriodType.BeginningBalance)

		PreviousEndDateRel
			one-to-many relation to BasicAnalyticsCalendarPeriod
			Field Mapping uses LeafRecords

			Instance Selection
				where (related.BasicAnalyticsCalendarPeriod < DatePeriod)
		
		DatesWithinPeriodRangeRel
			one-to-many relation to BasicAnalyticsCalendarPeriod
			Field Mapping uses LeafRecords

			Instance Selection
				where (related.BasicAnalyticsCalendarPeriod >= PeriodBegin
				and    related.BasicAnalyticsCalendarPeriod <= PeriodEnd)
		
		SummaryPeriodsForYearRel
			one-to-many relation to BasicAnalyticsPeriodHierarchy
			Field Mapping uses SubordinatesByTopNode				
				related.TopNode				   = TopNode
			Instance Selection
				where (related.SubordinatePeriod.Year 	     = LocalYear
				and    related.SubordinatePeriod.PeriodType  = LocalPeriodType)
		
		ShadowForLocalYearKeyRel
			one-to-many relation to BasicAnalyticsPeriodShadow
			Field Mapping uses BySummaryPeriod				
				related.BasicAnalyticsCalendar				= BasicAnalyticsCalendar
				related.BasicSummaryAnalyticsCalendarPeriod = LocalYearKey																	
		
		DateWithinJulianRangeRel
			one-to-many relation to BasicAnalyticsCalendarPeriod
			Field Mapping uses ByTopNodeAndType				
				related.TopNode				   = TopNode
				related.PeriodType			   = LocalPeriodType
			Instance Selection
				where (related.StartDateJulian <= LookupPeriod
				and    related.EndDateJulian   >= LookupPeriod)
		
		PeriodInHierarchyRel
			one-to-one relation to BasicAnalyticsPeriodHierarchy
			Field Mapping uses ByParent				
				related.BasicAnalyticsCalendarPeriod = LocalParentPeriod
				related.SubordinatePeriod			= LookupPeriod
		
		OtherCalendarsRel
			one-to-many relation to BasicAnalyticsCalendar
			Field Mapping uses symbolic key

			Instance Selection
				where (related.UniqueID			   != UniqueID)	

		BasicAnalyticsCalendarsRel
			one-to-many relation to BasicAnalyticsCalendar
			Field Mapping uses symbolic key
										
	Sets
		ByCalendarSequence
			Sort Order				
				CalendarSequence	
		
		ByTopNode
			Sort Order				
				TopNode














































	Create Rules

		CalendarType  = LocalCalendarType.Days
		DaysHierarchy = LocalDaysHierarchy.DaysWithinMonth
	
	Actions				
		Create is an Action
			restricted
			Exit Rules
				invoke CreateTopNode BasicAnalyticsCalendarPeriod					
					invoked.BasicAnalyticsCalendarPeriod = TopNodeString
					invoked.DisplayPeriod				= (Description25 + " Node")
			
				if (!CalendarType.Other)
					invoke CreateTopNode BasicAnalyticsCalendarPeriod
						invoked.BasicAnalyticsCalendarPeriod = YTDTopNodeString
						invoked.DisplayPeriod				= (Description21 + " YTD Node")

					YTDTopNode  = YTDTopNodeString
			
		CreateIndependent is a Create Action
			default label is "CreateAnalyticsCalendar"
			valid when (NoBasicAnalyticsCalendarExists)
			Parameters
				PrmYear							is Year
				PrmStartDate					is Date	
				PrmEndDate						is Date	
				PrmBasicAnalyticsCalendar		is AlphaUpper size 20
				PrmDescription					is a Description			

			Parameter Rules
				PrmYear
					required
				PrmStartDate
					required						
					TempYear       = PrmStartDate year
					TempYearPlus1  = (TempYear + 1)

					
					constraint (PrmYear >= TempYear
					and			PrmYear <= TempYearPlus1) 
						"StartDateOutOfRangeForYear"
						
					if (PrmStartDate month = 1
					and PrmStartDate day = 1)
						constraint (PrmYear = TempYear)
							"YearMustMatchYearOfDate"							
					
				PrmEndDate
					required

					constraint (PrmEndDate >= (PrmStartDate + 364)
					and         PrmEndDate <= (PrmStartDate + 371))
						"InvalidEndDate<PrmEndDate>"						
				
				PrmBasicAnalyticsCalendar
					required
					
					if (instance count of BasicAnalyticsCalendarsRel > 0)
						LocalBasicAnalyticsCalendarExists	= true
						
					constraint (!LocalBasicAnalyticsCalendarExists)
						"CannotCreateAnotherBasicAnalyticsCalendar.OneAlreadyExists"
							
				PrmDescription
					required
					
			Local Fields
				LocalBasicAnalyticsCalendarExists	is Boolean
					
			Action Rules
				invoke Create this instance
					invoked.BasicAnalyticsCalendar	= PrmBasicAnalyticsCalendar
					invoked.Description 			= PrmDescription
						
			Exit Rules
				invoke CreateCalendarYear
					invoked.Year						= PrmYear
					invoked.StartDate					= PrmStartDate
					invoked.EndDate						= PrmEndDate
					invoked.RecreatingFollowingYear		= false
					invoked.InvokedByAnalyticsCalendar	= false

		Update is an Action
			Action Rules
			Exit Rules
					
				if (!CalendarType.Other)
					if (!YTDTopNode entered)
						invoke CreateTopNode BasicAnalyticsCalendarPeriod
							invoked.BasicAnalyticsCalendarPeriod = YTDTopNodeString
							invoked.DisplayPeriod				= (Description21 + " YTD Node")
						YTDTopNode = YTDTopNodeString

		Delete is an Action
			confirmation required
				"CalendarWillBeDeleted"
	
			Entrance Rules
				for each EndDatesInCalendarRel
					invoke RemovePeriodFromHierarchy each.BasicAnalyticsCalendarPeriod
				if (YTDTopNode entered)
					for each EndDatesInYTDCalendarRel
						invoke RemovePeriodFromHierarchy each.BasicAnalyticsCalendarPeriod	



				if (TopNode entered)
					invoke Delete HierarchyTopNodeRel
				if (YTDTopNode entered)
					invoke Delete HierarchyYTDTopNodeRel


				if (TopNode entered)
					invoke Delete PeriodsTopNodeRel	
				if (YTDTopNode entered)
					invoke Delete PeriodsYTDTopNodeRel



										
		CreateCalendarYear is an Instance Action
			valid when (EligibleForYearCreation)
		
			Parameters
				Year						is Year
				StartDate					is Date	
				EndDate						is Date 
				RecreatingFollowingYear		is Boolean
				InvokedByAnalyticsCalendar	is Boolean




			Parameter Rules
				Year
					required
					LocalYear    = Year
					LocalYearKey = NewYearString


			
				StartDate
					if (CalendarType.Weeks)
						cannot be entered
					else
						required						

						TempYear       = StartDate year
						TempYearPlus1  = (TempYear + 1)

						
						constraint (Year >= TempYear
						and			Year <= TempYearPlus1) 
							"StartDateOutOfRangeForYear"
							
						if (StartDate month = 1
						and StartDate day = 1)
							constraint (Year = TempYear)
								"YearMustMatchYearOfDate"							
						
						if (CalendarType.5253Week)
							StartDateMonth = StartDate month
							if (StartDateMonth = 1
							and YearEndMonth   = 12)
								StartDateMonth = 13  
							constraint (StartDateMonth = YearEndMonth
							or          StartDateMonth = (YearEndMonth + 1))
								"StartDateInvalidForSpecifiedYearEndMonthOf<YearEndMonth>"
						
				EndDate
					constraint (445OrVariant
					or			CalendarType.Days)
						"EndDateCannotBeSpecifiedForThisCalendarType"
					
					if (!InvokedByAnalyticsCalendar)
						constraint (EndDate >= (StartDate + 364)
						and         EndDate <= (StartDate + 371))
							"InvalidEndDate<EndDate>"						
					
					if (CalendarType.Days)
						required
				
			Action Rules

				SkipShadow = true
				SkipPeriod  = false
				PeriodCount = 0

				if (!BasicAnalyticsYearRel exists)
					invoke Create BasicAnalyticsYear
						invoked.BasicAnalyticsYear = LocalYear

				if (!CalendarType.Other)				
					if (!YTDTopNode entered)
						LookupPeriod = YTDTopNodeString
						if (!LookupPeriod exists)
							invoke CreateTopNode BasicAnalyticsCalendarPeriod
								invoked.BasicAnalyticsCalendarPeriod = YTDTopNodeString
								invoked.DisplayPeriod				= ("YTD Top Node for " + BasicAnalyticsCalendar)
					
						YTDTopNode = YTDTopNodeString

				if (!LocalYearKey exists)
					invoke Create BasicAnalyticsCalendarPeriod						
						invoked.CreatePeriodType 	   = 1
						invoked.Year 			 	   = Year						
				else
					invoke Update HierarchyYearTopNodeRel
						invoked.Weight = 1
						
					for each ShadowForLocalYearKeyRel
						if (each.BasicAnalyticsCalendarPeriod.BegBalAndEndDate)
							invoke RemovePeriodFromHierarchy each.BasicAnalyticsCalendarPeriod
					LocalPeriodType = 8 
					for each SummaryPeriodsForYearRel
						invoke Delete each.SubordinatePeriod						
					LocalPeriodType = 4 
					for each SummaryPeriodsForYearRel
						invoke Delete each.SubordinatePeriod
					LocalPeriodType = 3 
					for each SummaryPeriodsForYearRel
						invoke Delete each.SubordinatePeriod				
					invoke Delete LocalYearKey.ChildrenRel
					if (!CalendarType.Other)
						LookupPeriod = LocalYearKey + "_YTD"
						if (LookupPeriod exists)
							invoke Delete LookupPeriod
						invoke CreateYTDYear BasicAnalyticsCalendarPeriod
							fill in fields from LocalYearKey
							invoked.BasicAnalyticsCalendarPeriod = LookupPeriod
							invoked.DisplayPeriod				= (LocalYearKey.DisplayPeriod + "_YTD")	








				if (CalendarType.Days)
					MaxPeriods = ((EndDate - StartDate) + 1)
				else				
				if (CalendarType.Weeks)
					MaxPeriods = 53
				else
				if (CalendarType.Months)
					MaxPeriods = 12
				else

				if (CalendarType.445)
					if (EndDate entered)
						MaxPeriods = 13
					else
						MaxPeriods = 12
					while (WeekCount < MaxPeriods)
						WeekCount +=1
						if (WeekCount = 3
						or  WeekCount = 6
						or  WeekCount = 9
						or  WeekCount = 12)
							WeekArray.DayCount[WeekCount] = 34
						else
							WeekArray.DayCount[WeekCount] = 27
				else
				if (CalendarType.454)
					if (EndDate entered)
						MaxPeriods = 13
					else
						MaxPeriods = 12
					while (WeekCount < MaxPeriods)
						WeekCount +=1
						if (WeekCount = 2
						or  WeekCount = 5
						or  WeekCount = 8
						or  WeekCount = 11)
							WeekArray.DayCount[WeekCount] = 34
						else
							WeekArray.DayCount[WeekCount] = 27					
				else
				if (CalendarType.544)
					if (EndDate entered)
						MaxPeriods = 13
					else
						MaxPeriods = 12
					while (WeekCount < MaxPeriods)
						WeekCount +=1					
						if (WeekCount = 1
						or  WeekCount = 4
						or  WeekCount = 7
						or  WeekCount = 10)
							WeekArray.DayCount[WeekCount] = 34
						else
							WeekArray.DayCount[WeekCount] = 27					
				else
				if (CalendarType.5253Week)
					MaxPeriods     = 13
					YearMonthEnd   = (StartDate + 365)
					StartDateMonth = StartDate month
					TempMonth      = YearMonthEnd month	
					if (StartDateMonth = YearEndMonth)
						while (TempMonth = YearEndMonth)					
							YearMonthEnd += 1
						    TempMonth    = YearMonthEnd month							
						YearMonthEnd -= 1					
					else
						while (TempMonth != YearEndMonth)
							YearMonthEnd -= 1
						    TempMonth    = YearMonthEnd month								

					LastDateBefore		= YearMonthEnd
					TempDay			    = LastDateBefore week day
					while (TempDay != YearEndLastDay)
						LastDateBefore -= 1
						TempDay			= LastDateBefore week day
					
					LastDateAfter		= YearMonthEnd
					TempDay			    = LastDateAfter week day
					while (TempDay != YearEndLastDay)
						LastDateAfter  += 1
						TempDay			= LastDateAfter week day						
							
					DiffBeforeYearEnd = (YearMonthEnd - LastDateBefore)
					DiffAfterYearEnd  = (LastDateAfter - YearMonthEnd)		
								
					if (DiffBeforeYearEnd > DiffAfterYearEnd) 
						NearestEndDate	= LastDateAfter
					else
						NearestEndDate  = LastDateBefore
						
					if (YearEndLastDayMethod.WithinYearEndMonth)
						YearEndDate		= LastDateBefore
					else
						YearEndDate		= NearestEndDate																										 

					while (WeekCount < MaxPeriods)
						WeekCount +=1
						if (WeekCount = 3
						or  WeekCount = 6
						or  WeekCount = 9
						or  WeekCount = 12)
							WeekArray.DayCount[WeekCount] = 34
						else
							WeekArray.DayCount[WeekCount] = 27
				else
				if (CalendarType.4WeekPeriods)
					MaxPeriods = 13
					while (WeekCount < MaxPeriods)
						WeekCount +=1					
						WeekArray.DayCount[WeekCount] = 27						
					
				if (CalendarType.Months)
					FromDate = (StartDate - StartDate day + 1)
				else
				if (CalendarType.Weeks)
					FromDate = "20120101"
					YearDiff = (Year - FromDate year)
					FromDate += YearDiff as years
					if (WeeksMethod.ISO)
						while (FromDate week day != 5)
							FromDate += 1
						while (FromDate week day != 2)
							FromDate -= 1
					StartDate = FromDate						  
				else
					FromDate = StartDate
				
				LocalDate	 = StartDate
				PeriodBegin  = NewEndDateString	
					




				if (CalendarType.Months)
					invoke CreatePeriodWithin LocalYearKey
						invoked.NewPeriodType		= 2
						invoked.CreateAll			= true
				else
				if (CalendarType.Days)
					if (DaysHierarchy.DaysWithinMonth) 
						invoke CreatePeriodWithin LocalYearKey
							invoked.NewPeriodType		= 3
							invoked.CreateAll			= true						
					else
					if (DaysHierarchy.DaysWithinWeek) 
						invoke CreatePeriodWithin LocalYearKey
							invoked.NewPeriodType		= 4
							invoked.CreateAll			= true
					else 
						invoke CreatePeriodWithin LocalYearKey				
							invoked.NewPeriodType		= 8
							invoked.NumberOfDays		= MaxPeriods						
							invoked.CreateAll			= true
					ToDate = StartDate
																
				while (PeriodCount < MaxPeriods)
					
					PeriodCount += 1
					
					if (CalendarType.Months)
						if (PeriodCount < 4)
							LocalQuarter = 1
						else
						if (PeriodCount < 7)
							LocalQuarter = 2
						else
						if (PeriodCount < 10)
							LocalQuarter = 3
						else
							LocalQuarter = 4
						if (PeriodCount < 10)
							LocalMonthAlpha = ("0" + PeriodCount)
						else
							LocalMonthAlpha 	 = PeriodCount
						LocalCreateWithinKey 	 = NewMonthString
					else
					if (CalendarType.Weeks)
						if (PeriodCount < 10)
							LocalWeekAlpha = ("0" + PeriodCount)
						else
							LocalWeekAlpha 		 = PeriodCount
						LocalCreateWithinKey 	 = NewWeekString
					else
					if (CalendarType.Days)
						ToDate = FromDate					
						if (DaysHierarchy.DaysWithinMonth)
							if (ToDate month != SaveMonth)
								SaveMonth	  = ToDate month
								CurrentMonth += 1
							if (CurrentMonth < 10)
								LocalMonthAlpha = ("0" + CurrentMonth)
							else
								LocalMonthAlpha 	 = CurrentMonth
							LocalCreateWithinKey 	 = NewMonthString



						else
						if (DaysHierarchy.DaysWithinWeek)
							if (ToDate week != SaveWeek)
								SaveWeek	 = ToDate week
								CurrentWeek += 1
							if (CurrentWeek < 10)
								LocalWeekAlpha = ("0" + CurrentWeek)
							else
								LocalWeekAlpha 	 	= CurrentWeek
							LocalCreateWithinKey 	= NewWeekString
							if (CurrentWeek = 53)
								if (!LocalCreateWithinKey exists)
									invoke CreatePeriodWithin LocalYearKey
										invoked.NewPeriodType = 4
										invoked.NewWeek		  = 53



						if (PeriodCount < 10)
							LocalDayAlpha = ("00" + PeriodCount)
						else					
						if (PeriodCount < 100)
							LocalDayAlpha = ("0" + PeriodCount)
						else
							LocalDayAlpha 		 = PeriodCount

					else					
					if (!CalendarType.Other)
						if (PeriodCount < 10)
							LocalMonthAlpha = ("0" + PeriodCount)
						else
							LocalMonthAlpha 	 = PeriodCount
						LocalCreateWithinKey 	 = NewMonthString
					else
						LocalCreateWithinKey	 = NewYearString
						
					if (CalendarType.Weeks)
						if (PeriodCount = 1)
							if (WeeksMethod.ISO
							or  WeeksMethod.Excel2)
								ToDate = FromDate

								while (ToDate week day != 1)
									ToDate += 1
						    else
						    if (WeeksMethod.Excel1)
						    	ToDate = FromDate

								while (ToDate week day != 7)
									ToDate += 1
							else

								ToDate = (FromDate + 6)
						else
							ToDate = (FromDate + 6)
						if (ToDate year > Year)
							if (WeeksMethod.ISO)
								if (ToDate day > 3)



									while (ToDate week day != 1
									or     ToDate year != Year)
										ToDate -= 1
									if (ToDate < FromDate)
										SkipPeriod = true	
							else
								ToDate = "20121231"
								ToDate += YearDiff as years
							if (SkipPeriod)
								PeriodCount  = 53

						if (!SkipPeriod)
							invoke CreatePeriodWithin LocalYearKey
								invoked.NewPeriodType = 4
								invoked.NewWeek   	  = PeriodCount
					else
					if (CalendarType.Months)
						ToDate = (FromDate + FromDate days in month - 1)

						LocalQuarterKey	= NewQuarterString
						invoke CreatePeriodWithin LocalQuarterKey
							invoked.NewPeriodType = 3
							invoked.NewMonth   	  = PeriodCount
						
					if (CalendarType.445
					or  CalendarType.454
					or  CalendarType.544
					or  CalendarType.5253Week
					or  CalendarType.4WeekPeriods)
						ToDate = (FromDate + WeekArray.DayCount[PeriodCount])

						invoke CreatePeriodWithin LocalYearKey
							invoked.NewPeriodType = 3
							invoked.NewMonth   	  = PeriodCount						
						
					if (CalendarType.5253Week)
						if (ToDate > YearEndDate)
							ToDate = YearEndDate
						if (FromDate > YearEndDate)
							SkipPeriod = true
							
					if (445OrVariant
					or  CalendarType.Days)
						if (EndDate entered)
							if (ToDate > EndDate)
								ToDate = EndDate
							if (FromDate > EndDate)
								SkipPeriod = true

					if (!SkipPeriod)
						LocalDate	 = ToDate
						LookupPeriod = NewEndDateString
						PeriodEnd 	 = LookupPeriod
						invoke CreatePeriodWithin LocalCreateWithinKey
							if (!LookupPeriod exists)
								NewDateCount += 1
								LocalPeriodArray.EndDateJulian[NewDateCount] = LookupPeriod
								invoked.NewPeriodType		= 5							
								invoked.NewEndDate			= ToDate
							else
								invoked.ExistingEndDateBegin = LookupPeriod
								
						LocalSummaryPeriod = LocalCreateWithinKey
						for each DatesWithinPeriodRangeRel
							LocalPeriod = each.BasicAnalyticsCalendarPeriod
							if (!EndDateInPeriodRel exists)
								invoke CreatePeriodWithin LocalCreateWithinKey
									invoked.ExistingEndDateBegin = LocalPeriod

					FromDate 	= (ToDate + 1)
					LocalDate	= FromDate
					PeriodBegin = NewEndDateString									

			Exit Rules
				
				if ((!CalendarType.Days)
				and (!CalendarType.Other))
					LocalYear    = (Year + 1)
					LocalYearKey = NewYearString				
			 		if (LocalYearKey.ParentRel exists)
			 			PeriodCount = 0
			 			SkipPeriod  = false
						invoke CreateCalendarYear
							invoked.Year					= LocalYear
							if (!CalendarType.Weeks)
								invoked.StartDate				= FromDate	
			 		else
						SkipShadow = false
						invoke BuildShadowFile
				else
					SkipShadow = false
					invoke BuildShadowFile					
				
				if (NewDateCount > 0)
					for each OtherCalendarsRel
						invoke PropagateNewDates each.BasicAnalyticsCalendar
							invoked.PrmPeriodArray			  = LocalPeriodArray
						
		BuildShadowFile is an Instance Action
			restricted
			run in background
			
			Action Rules
				invoke Delete BasicAnalyticsPeriodShadow set

				for each EndDatesInCalendarRel
					TopNodeFound  = false
					LocalPeriod   = each.SubordinatePeriod
					DatePeriod    = LocalPeriod
					while (!TopNodeFound)
						if (!LocalPeriod.SubordinateInTopNodeRel.BasicAnalyticsCalendarPeriod.PeriodType.TopNode)		
							invoke Create BasicAnalyticsPeriodShadow
								resume on error								
								invoked.BasicAnalyticsCalendar  			   = BasicAnalyticsCalendar
								invoked.BasicAnalyticsCalendarPeriod		   = DatePeriod
								invoked.BasicSummaryAnalyticsCalendarPeriod = LocalPeriod.SubordinateInTopNodeRel.BasicAnalyticsCalendarPeriod
								invoked.SummaryPeriodType				   = LocalPeriod.SubordinateInTopNodeRel.BasicAnalyticsCalendarPeriod.PeriodType
						if (LocalPeriod.SubordinateInTopNodeRel.BasicAnalyticsCalendarPeriod.PeriodType.TopNode)
							TopNodeFound = true
						else
							LocalPeriodKey = LocalPeriod
							LocalPeriod = LocalPeriodKey.SubordinateInTopNodeRel.BasicAnalyticsCalendarPeriod	
			Exit Rules
				invoke PersistJulianRange BasicAnalyticsCalendarPeriod					
					invoked.PrmCalendar				  = BasicAnalyticsCalendar
					
		PropagateNewDates is an Instance Action
			restricted
			run in background
			
			Parameters
				PrmPeriodArray			  is a BasicAnalyticsCalendarPeriodArray
					
			Local Fields
				I1						  is Numeric 3
				DatesAdded				  is Boolean
							
			Action Rules
			
				SkipShadow = true
				I1		   = 1
				
				while (I1 < 367)
					if (PrmPeriodArray.EndDateJulian[I1] = blank)
						I1 = 367
						end while 
						
					LookupPeriod 		= PrmPeriodArray.EndDateJulian[I1]
					if (CalendarType.Weeks)
						LocalPeriodType = 4 
					else
					if (CalendarType.Days)
						LocalPeriodType = 8
					else
						LocalPeriodType = 3
												
					if (DateWithinJulianRangeRel exists)
						LocalParentPeriod = first DateWithinJulianRangeRel.BasicAnalyticsCalendarPeriod
						if (!PeriodInHierarchyRel exists)
							DatesAdded = true
							invoke CreatePeriodWithin LocalParentPeriod
								invoked.ExistingEndDateBegin = LookupPeriod			
					I1 += 1
						
				if (DatesAdded)
					SkipShadow = false
					invoke BuildShadowFile
