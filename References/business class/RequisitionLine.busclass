RequisitionLine is a BusinessClass
	owned by rq
	prefix is RLN
	classic name is REQLINE

	representative image is DerivedPicture
		display as full image
		missing image is random background
			foreground text is "<RequisitionLineItemAbbreviation>"

	Ontology
		symbolic key is RequisitionLine
			classic set name is RLNSET1
			classic name is LINE-NBR
			classic name for Requisition is REQ-NUMBER

	Patterns
		implements StaticJava
		implements BODId
		disable AuditIndex
		implements AnalyticCube
			disable continuous update
			dynamically calculate totals
			write to base level only
		enable explicit context override

	Persistent Fields
		FromCompanyLocationBin
		RequestingLocation
			classic name is REQ-LOCATION
		InventoryTransactionType
			classic name is IC-TRANS-TYPE
		LocationRule                    is a WarehouseLocationRule
		Item
		ItemType
		ServiceCode
		CostOption
		CostCode
			classic name is COST-CD
		CreatePurchaseOrder             is Boolean
			classic name is CREATE-PO-FL
		Vendor
		VendorItem
			classic name is VEN-ITEM
		EnteredUOM                      is a UnitOfMeasure
		EnteredUOMMultiplier            is a UOMMultiplier
			classic name is ENT-UOM-MULT
		Quantity						is an UnsignedQuantity
			precision is DerivedNumberOfDecimalsQuantity
		ReturnQuantity                  is a Quantity
			classic name is RETURN-QTY
			precision is DerivedNumberOfDecimalsQuantity
		DetailReturnQuantity            is a Quantity
			classic name is DTL-RET-QTY
			precision is DerivedNumberOfDecimalsQuantity
		CatchWeightReturnQuantity       is a Quantity 		
			precision is DerivedNumberOfDecimalsQuantity
		PurchaseFromLocation			is a VendorLocation
			classic name is PURCH-FR-LOC
		CreationDate                    is TimeStamp
		DistributionBy
		DistributionCode                is a PayablesDistributionCode
			classic name is DIST-CODE
		POCode
		PurchaseTaxable                 is Boolean
			classic name is PURCH-TAX-FL
		PurchaseTaxCode					is a TaxCode
			classic name is PURCH-TAX-CD
		CertificationRequired           is Boolean
			classic name is CERT-REQ-FL
		InspectionRequired              is Boolean
			classic name is INSP-REQ-FL
		LastReturnSequence              is a RequisitionSequence
			classic name is LAST-RET-SEQ
			disable Auditing
		Status                          is Numeric size 1
			protected
			States
				Unreleased value is 0
				Released   value is 1
				Rejected   value is 8
				Processed  value is 9
		Closed                          is Boolean
			protected
			classic name is CLOSED-FL
		PurchaseOrderUserField2
			classic name is PO-USER-FLD-2
		PurchaseOrderUserField4         is a UserFld2
			classic name is PO-USER-FLD-4
		PurchaseOrderUserField6         is a UserFld3
			classic name is PO-USER-FLD-6
		UserDate3                       is Date
		UserDate4                       is Date
		AllocationPriority
			classic name is ALLOC-PRI
		DeliverTo
		LastDistributionSequence        is a SeqNbr
			classic name is LAST-DIST-SEQ
			disable Auditing
		NewRequisition                  is Boolean
			classic name is NEW-REQ
		FillOrKill
		KilledQuantity                  is a Quantity
			protected
			classic name is KILL-QUANTITY
			precision is DerivedNumberOfDecimalsQuantity
		EnteredItem
			restricted
		ItemEntryMethod
			restricted
			classic name is ENTRY-FL
		RequisitionInterfaceInformation
			classic name for RequisitionInterfaceInformation.SurgerySystemSource is RQSRC-MACHINE
			classic name for RequisitionInterfaceInformation.SurgerySystemRequisitionReference is PAR-ORDER-ID
		Approved                        is Boolean
			protected
			classic name is APPROVED-FL
		CapitalTechnical
			classic name is CAP-TECH-FLAG
		ProcessFlowApprovalLevel
			classic name is PFLOW-APRV-LVL
		PunchoutId
		WorkunitCreated                 is Boolean
			classic name is PFLOW-CREATED
		TransactionCurrencyCode         is a Currency
			classic name is TRAN-CURR-CODE
		TransactionUnitCost             is an UnsignedUnitCost 
			classic name is TRAN-UNIT-COST
			precision is DerivedNumberOfDecimalsCost
		RequestedDeliveryDate           is Date
			classic name is REQ-DEL-DATE
		LateDeliveryDate                is Date
			classic name is LATE-DL-DATE
		OverrideCost                    is Boolean
			protected
			classic name is OVERIDE-CST-FL
		Contract
		ContractLine
		CapitatedProcedureLine          is like ContractLine 
		CapitatedComponentGroup         is Numeric 2
		CapitatedProcedureLevel         is Numeric size 1
			States 
				NotApplicable               value is 0
				Primary                     value is 1
				Revision                    value is 2	
		CapitatedSelectForSwapNoCharge  is Boolean 
		CapitatedSelectForSwapCharged   is Boolean 		
		MajorPurchasingClass
			classic name is PURCH-MAJOR
		MinorPurchasingClass
			classic name is PURCH-MINOR
		Buyer
		Manufacturer
			classic name for Manufacturer.ManufacturerCode is MANUF-CODE
			classic name for Manufacturer.ManufacturerDivision is MANUF-DIVISION
		ManufacturerNumber
			classic name is MANUF-NBR
		ConversionRate                  is an EnteredCurrencyConversionRate
			classic name is CNV-RATE
		UnitCost                        is an UnsignedUnitCost
			precision is DerivedNumberOfDecimalsCost
		Description	
		RemainingCommitment             is a Quantity
			classic name is COMMIT-REMAIN
		RequisitionSource               is a RqSource
			classic name is RQ-SOURCE
		SourcingEventRequired           is Boolean
			classic name is SS-EVENT-REQD
		CommodityCode                   is a CommCodes
		UseProcurementCard              is Boolean
			classic name is P-CARD-FLAG
		ProcurementCardNumber
			classic name is PCARD-NBR
		ParticipantSequenceNumber       is a Sequence
			classic name is PART-SEQ-NBR
		Tier
		Preferred                       is Numeric size 1
			classic name is PREFERRED-FLAG
			States
				No                      value is 0
				Contract                value is 1
				Manufacturer            value is 2
				ContractAndManufacturer value is 3
					default label is "Contract and Manufacturer"
		InterfaceCancelQuantity         is a Quantity
			protected
			classic name is PIF-CXL-QTY
			precision is DerivedNumberOfDecimalsQuantity
		ProductTaxCategory
			classic name is PROD-TAX-CAT
		ReleasedDate                    is TimeStamp
		ReleasingOperatorID             is an Operator 
			holds pii
			classic name is REL-OPER-ID
		ApprovedRejectedDate            is TimeStamp
			classic name is APR-REJ-DATE
		ApprovingRejectingOperatorID    is an Operator 
			holds pii
			classic name is APR-REJ-OPR-ID
		ItemGTIN
			classic name is GTIN
		PurchaseOrderUserField7         is a UserFld7
			classic name is PO-USER-FLD-7
		EAMOperationNumber              is an OperationNumber
			classic name is EAM-OPER-NBR
		EAMSequenceNumber               is a SeqNbr
			classic name is EAM-SEQ-NBR
		EAMWorkOrderNumber              is a WorkOrderNumber
			classic name is EAM-WO-NBR
		PatientProcedure
			classic name is HPP-OBJ-ID
			restricted
			context of FromCompanyLocationBin.FromCompany
			delete ignored
		SourcingEvent
			classic name is SS-EVENT-NBR
		PunchoutUgnam                   is Alpha size 40
		CreatedBy                       is an Operator 
			holds pii
		LastUpdateDate                  is TimeStamp
			classic name is LAST-UPDT-DATE
		LastUpdateBy                    is an Operator 
			holds pii
		ConsignCode
			default label is "BillCode"
		GlobalLineType
			classic name is GLBL-LINE-TYPE
		TextSearch						is Text
			text searchable
			default label is "SearchText"
			scannable
		LandedUnitCost                  is an InternationalCost
			protected
			precision is DerivedNumberOfDecimalsCost
		AccruedTaxAmount				is an InternationalAmount
			protected
		InvoicedTaxAmount				is an InternationalAmount
			protected
		LineAddOnChargeTotal			is an InternationalAmount
			protected
		LineNonLandedAddOnChargeTotal	is an InternationalAmount
			protected
		OriginalItem					is like Item
			protected
		EAMWorkOrder
		EAMWorkOrderActivity
		EAMProjectID
		EAMProjectType
		EAMProjectTaxCode
		EAMManufacturing
		EAMTrade
		EAMCommodityCode
		EAMLineType
		Chemical					is Boolean
		RebuildRepair				is Boolean
		TestRequired				is Boolean
		EAMDescription					is a Description3
		E2GCompCode                 is a Name	 
			holds pii
		EAMTool						is a EAMToolField  
		HSNSACCode
		UNSPSCCode
            classic name for UNSPSCCode.UNSPSCSegment is ICSEGMENT
            classic name for UNSPSCCode.UNSPSCFamily is ICFAMILY
            classic name for UNSPSCCode.UNSPSCClass is ICCLASS
            classic name for UNSPSCCode.UNSPSCCommodity is ICCOMMODITY
		RSSSourceInformation			is Numeric size 1
			States
            	NotApplicable         	value is 0
            	SearchCatalog    		value is 1
				RecentlyRequestedItem   value is 2
            	ShoppingList    		value is 3
				Punchout				value is 4
				SpecialAndService		value is 5
				CopyRequisitionLine 	value is 6
		SpecialHandlingCode
		SpecialHandlingInstructions			is a Description4
		HandlingTimeInMinutes
		ActualCount						is like Quantity
			precision is DerivedNumberOfDecimalsQuantity
			protected
		ScheduledProcedure				is like ScheduledProcedure
			protected
		ScheduledProcedureLine			is like ScheduledProcedureLine
			protected
		PreferenceCardTransaction	is Boolean
			protected
		DeliveryMethod
	
	Context Fields
		ContextInventoryLocation is an InventoryLocation
			default to FromCompanyLocationBin.FromLocation
		KitchenOrder
		SearchDateRange is a DateRange
		AuditDateRange	is a DateRange2
		FSMInboundBODTracker


	Transient Fields
		TransientInventoryCompany		is a LikeInventoryCompany
			derive value from FromCompanyLocationBin.FromCompany
		TransientInventoryLocation		is a LikeInventoryLocation
			derive value from FromCompanyLocationBin.FromLocation
		TransientItemSubstitute			is Boolean
		TransientLineTotalAmount 		is Decimal size 20.3
		StructureDefaultCode
			derive value from PurchasingCompanyRel.RequisitionStructureDefaultCode
		ExpirationDateRange				is a DateRange
		EnteredContractLine				is a ContractLine	
			default label is "ContractLine"

		RequisitionLineDetailBin        is AlphaUpper size 7
			classic name is RQD-BIN
			derive value from RequisitionLineDetailDerived




		AlreadyReleased                 is a Quantity
			classic name is ALREADY-RELEASED
		DocumentField                   is a Document
		TransientBypassCostDefaulting	is Boolean	
		TransientBypassVendor			is Boolean
		TransientVendor                 is a Vendor
			derive value from Requisition.Vendor

		TransientUpdatePatientProcedure				is Alpha 1
			derive value from DerivedPatientProcedureUpdate
		TransientProcedure						 is a Procedure
			derive value from DerivedTranProcedure
		TransientProcedureDate                   is Date
			derive value from DerivedTranProcedureDate
		TransientProcedureModifier				 is AlphaUpper size 2
			derive value from DerivedTranProcedureModifier
		TransientPhysicianName                   is a PhysName 
			holds pii
			derive value from DerivedTranPhysicianName
		TransientNurseCoordinator                is a NrsCoord
			derive value from DerivedTranNurseCoordinator
	   	TransientSalesRepresentative             is a SalesRep
	   		derive value from DerivedTranSalesRepresentative
		TransientOrderNumber                     is a OrdNbr
			derive value from DerivedTranOrderNumber
		TransientRequestor						 is a Requestor
			derive value from DerivedTranRequestor
	   	TransientLot                             is an ItemLot
	   		derive value from DerivedTranLot
		TransientSerialNumber                    is an ItemSerialNumber
			derive value from DerivedTranSerialNumber
		TransientUserDefinedField1				 is a Userdef1
			derive value from DerivedTranUserDefinedField1
		TransientUserDefinedField2				 is a Userdef2
			derive value from DerivedTranUserDefinedField2

		TransientVisitNumber					 is a PatientVisit
			derive value from DerivedTranVisitNumber
		TransientPatientID                       is a Patient
			derive value from DerivedTranPatientID
		TransientCaseNumber						 is a CaseNumber
			derive value from DerivedTranCaseNumber
	   	TransientPatientLastName                 is a LastName
	   		derive value from DerivedTranPatientLastName
		TransientPatientFirstName                is a FirstName	 
			holds pii
			derive value from DerivedTranPatientFirstName
		TransientPatientMiddleName            	 is a MiddleName
			derive value from DerivedTranPatientMiddleName
		TransientBirthdate						 is Date
			derive value from DerivedTranBirthdate
		TransientGender							 is a Gender
			derive value from DerivedTranGender
		TransientSocialSecurityNumber			 is a TaxID 
			holds pii
			derive value from DerivedTranSocialSecurityNumber
		TransientUniqueDeviceId 				 is Alpha 120
			derive value from DerivedTranUniqueDeviceId
		TransientGTIN 							 is a ItemGTIN
			derive value from DerivedTranGTIN
		TransientManufacturer  					 is a Manufacturer
			derive value from DerivedTranManufacturer
		TransientManufacturerNumber				 is a ManufacturerNumber
			derive value from DerivedTranManufacturerNumber
		TransientManufacturingDate				 is Date
			derive value from DerivedTranManufacturingDate
		TransientExpirationDate 				 is Date
			derive value from DerivedTranExpirationDate
		TransientItem							is like Item
			derive value from RequisitionLine.Item
		TransientCancel             		is Boolean
		TransientServiceFlag                is Boolean
		StandardCommentCode
		LongDescription						is Text
		LongDescription70					is Alpha size 70
		EnteredToAccountingEntity			is a AccountingEntity
		EnteredGeneralLedgerChartAccount 	is a GeneralLedgerChartAccount
			default label is "EnteredGlobalLedgerChartAccount"
		EnteredAccountingUnit				is like AccountingUnit
		EnteredProject						is a Project
		EnteredFinanceDimension1			is a FinanceDimension1
		EnteredFinanceDimension2			is a FinanceDimension2
		EnteredFinanceDimension3			is a FinanceDimension3
		EnteredFinanceDimension4			is a FinanceDimension4
		EnteredFinanceDimension5			is a FinanceDimension5
		EnteredFinanceDimension6			is a FinanceDimension6
		EnteredFinanceDimension7			is a FinanceDimension7
		EnteredFinanceDimension8			is a FinanceDimension8
		EnteredFinanceDimension9			is a FinanceDimension9
		EnteredFinanceDimension10			is a FinanceDimension10
		EnteredAsset						is an Asset
		EnteredAssetTemplate				is an AssetTemplate
		TemplateAccount						is a FinanceCodeBlock
		TransientBypassUnitCost				is Boolean
		SavedFinanceEnterpriseGroup			is like FinanceEnterpriseGroup
		SavedFromCurrency					is a FromCurrency
		SavedExchangeDate					is a ExchangeDate
		SavedCurrencyTable                  is a CurrencyTable
			derive value from Requisition.CurrencyTable
		SavedTransactionAmount				is a CurrencyAmount
		SavedToCurrency						is a ToCurrency




		NewRequisitionFromCopy				is like Requisition
		NewRequisitionLineFromCopy			is like RequisitionLine
		FromInterfaceImport                 is Boolean
		DistributionFromInterfaceImport     is Boolean
		EnteredPunchoutDistributionAccount			is like GeneralLedgerChartAccount
		EnteredPunchoutDistributionSubAccount		is like GeneralLedgerChartAccount
		EnteredPunchoutDistributionAccountCategory	is AlphaUpper size 5
		EnteredPunchoutDistributionAccountUnit		is like AccountingUnit
		EnteredPunchoutDistributionActivity			is like Project
		EnteredPunchoutDistributionAsset			is like Asset
		EnteredPunchoutDistributionAssetTemplate	is like AssetTemplate
		EnteredPunchoutDistributionAmount			is like InternationalAmount
		EnteredPunchoutDistributionPercent			is Percent size 6.3
		EnteredPunchoutDistributionQuantity			is like Quantity
		TransientGLCalendarPeriod 			is a GeneralLedgerCalendarPeriod	
			derive value from Requisition.GeneralLedgerCalendarPeriodXrefRel.GeneralLedgerCalendarPeriod
		EnteredGLEncumbranceReference				is AlphaUpper size 60
		TransientTaxEntity							is a TaxEntity
			derive value from DerivedTaxEntity
		TransientPurchaseTaxable					is Numeric size 1
			States
				Yes			value is 1
				TaxExempt	value is 2
		TransientNoChargeFromSupplier               is Boolean 
		TransientPrimaryOrRevision                  is Numeric 1
		LocationStockUOMRounded						is Boolean
		TransientAllocationPriorityLevel			is an AllocationPriorityLevel
			derive value from DerivedAllocationPriorityLevel
		TransientRSSLPLRequisitionLineScreen		is Alpha size 1
    		derive value from DerivedReturnYes
		TransientIgnoreRSSLPLRequisitionLineScreen		is Alpha size 1
    		derive value from DerivedReturnYes

	Local Fields
		CalculateTax
		TaxOut                             		is Alpha 1
		UOMCalculation
		LocationItemUOMConversion
		RoundedValue
		TimeStampInGMT
		LocalWarehouseLocationRuleDetailLocation 	is an InventoryLocation
		LocalLocationRuleFromCompanyLocation	is a FromCompanyLocation
		LocalOut1stLocation				   		is like InventoryLocation
		LocalOutLocation				   		is like InventoryLocation

		IsValidLocationRule                		is Boolean
		LocalChangeInAmount                		is an InternationalAmount
			precision is DerivedNumberOfDecimalsCost
		LocalItemType                      		is an ItemType
		LocalWarehouseDemandQuantity       		is a Quantity
			precision is DerivedNumberOfDecimalsQuantity
		LocalAvailableQuantity             		is a Quantity
			precision is DerivedNumberOfDecimalsQuantity
		LocalOutQuantity				   		is a Quantity
			precision is DerivedNumberOfDecimalsQuantity
		LocalConvertedQuantity			   		is a Quantity
			precision is DerivedNumberOfDecimalsQuantity
		LocalPatientProcedureView       		is a PatientProcedure view
		LocalPatientProcedure					is like PatientProcedure
		LocalProvider							is like Provider
		LocalPurchaseOrder                 		is a PurchaseOrder
		LocalPurchaseOrderLine             		is a PurchaseOrderLine
		LocalDistributionCode              		is a PayablesDistributionCode
		LocalDistributionCodeAccount       		is a FinanceCodeBlock
		LocalDistributionCodeAsset         		is an Asset
		LocalDistributionCodeAssetTemplate 		is an AssetTemplate
		LocalDistributionCodePercent       		is a TotalPercent
		LocalDistributionCodeAmount        		is an InternationalAmount
		ProcurementCostDefault
		InventoryCostDefault
		Execute									is Boolean
		VendorPurchaseFromLocationDefaulting
		LocalCurrencyExchange					is a CurrencyExchange
		OffsetFirstBeforeConversion				is Boolean
		LocalFoundCost							is Boolean

		LocalBudgetEditGroup					is UniqueID
		LocalSkipCommitment                 	is Boolean

		LocalReplacementQuantity				is like Quantity
			precision is DerivedNumberOfDecimalsQuantity
		LocalItemlocationAvailableQuantity		is like	Quantity
			precision is DerivedNumberOfDecimalsQuantity
		LocalItemlocationRemainingQuantity		is like	Quantity
			precision is DerivedNumberOfDecimalsQuantity
		LocalReplacementItemRemainingQuantity	is like Quantity
			precision is DerivedNumberOfDecimalsQuantity
		LocalAssociatedItemRemainingQuantity	is like Quantity
			precision is DerivedNumberOfDecimalsQuantity


		LocalComponentItem						is like Item
		LocalCurrentQuantity					is like Quantity
			precision is DerivedNumberOfDecimalsQuantity
		LocalInventoryCost							is an InternationalCost
			precision is DerivedNumberOfDecimalsCost
		LocalTotalQuantity						is like Quantity
			precision is DerivedNumberOfDecimalsQuantity
		LocalWarehouseShipment					is like WarehouseShipment
		LocalInventoryTransaction				is an InventoryTransaction
		LocalRelease							is Boolean
		DistributionTotalsComputed				is Boolean
		LocalTotalDistributionQuantity			is like Quantity
		LocalTotalDistributionAmount			is an InternationalAmount
		LocalTotalDistributionPercent			is Percent size 6.3

		LocalFromKilledQuantity                 is Boolean
		LocalCalculateTaxExecuted				is Alpha 1
		LocalJurisdictionLookupKey  			is Alpha 200					
		LocalWarehouseShipmentLine              is Boolean
		LocalDefaultedCurrency					is a FromCurrency
		LocalDefaultedCost						is a UnsignedUnitCost
		LocalUnitCostDefaultingExecuted			is Boolean
		LocalTitle								is Alpha size 255
		ActionCode                                is Alpha size 1
			States
				Create    value is "C"
				Update    value is "U"
				Delete    value is "D"
		LocalContractValidationError			is Alpha size 200
		LocalContractHasError					is Boolean

		LocalDistributionErrorMessage			is Alpha size 200
		LocalTransactionCodeBlock				is a TransactionCodeBlock
		LocalDefaultedDistribution				is a FinanceCodeBlock
		LocalExecute							is Numeric size 1
		LocalEnteredUOM							is a UnitOfMeasure
		LocalContractWouldDefault				is Boolean 
		LocalLineBin							is like Bin
		LocalOneBin								is Boolean
		LocalBypassQuantityConversion			is Boolean
		LocalNoUOM								is Boolean
		LocalSavedWarehouseShipment				is like WarehouseShipment
		LocalSavedWarehouseShipmentLine			is like WarehouseShipmentLine
		LocalAddOnCharge						is like AddOnCharge
		TaxableDetermined                       is Boolean 
		TaxCodeDetermined                       is Boolean

		LocalPartialAllocation					is Boolean
		LocalPartialQuantity					is like Quantity
			precision is DerivedNumberOfDecimalsQuantity
		LocalReqLineFromTemplateLine			is Boolean
		LocalGLFinanceCodeBlock					is a TransactionCodeBlock
		LocalAmountToBeReturned					is an InternationalAmount
		LocalDistributionAmount					is an InternationalAmount
		LocalReturnedAmount						is an InternationalAmount
		LocalPostingType						is AlphaUpper size 2
			States
				Inventory           	value is "I1"
				Offset              	value is "O1"
		LocalDistributionQuantity				is a Quantity
		LocalCopyRequisition				is Boolean
		LocalLineAddOnChargeTotal        	is an InternationalAmount

		BODReqLineSequenceCount				is Numeric size 9
		LocalBODAccountingEntity			is Alpha size 20
		LocalBODRequestingLocation			is AlphaUpper size 100	
		LocalBODReqCurrencyCode				is AlphaUpper size 5
		LocalRecallGroup					is AlphaUpper size 4
		LocalRecallNotice					is a RecallNotice
		LocalRecallProduct					is a RecallProduct

		LocalRequisitionLineNumber				is like RequisitionLine
		LocalWHShipmentQuantitiesProcessed		is Boolean
		LocalShippedQuantity					is like Quantity
				precision is DerivedNumberOfDecimalsQuantity
		LocalInProcessQuantity					is like Quantity
				precision is DerivedNumberOfDecimalsQuantity
		LocalVoidedQuantity						is like Quantity
				precision is DerivedNumberOfDecimalsQuantity
		LocalFromCompanyLocationFromRule		is a FromCompanyLocation
		LocalPrefCardFromCompanyLocation		is like FromCompanyLocation
		LocalConversionRate						is an EnteredCurrencyConversionRate
		NativeLPLBODTrigger						is Boolean	
		LocalRoundedApprovalValue				is an InternationalAmount
		LocalBypassComputeTotals				is Boolean
		LocalReturnUnitCost						is an InternationalAmount
		LocalReturnQuantityToDate				is like Quantity
		LocalCatchWeightDetailReturnQuantity	is like Quantity

		LocalInventoryLocation					is like InventoryLocation
		LocalOneSourceTaxAttribute				is a TaxAttributeGroup50
		LocalOneSourceTaxAttributeText			is Text
		AttributeCounter						is Numeric 2

		LocalRecreateRequisitionLineDistribution is Boolean
		GTINCheckDigit
		DoDebug									is Boolean
		ValidateBuyer
		LocalItem								is like Item
		LocalOriginalItem						is like Item
		LocalSubstituteItem						is like Item
		LocalCheckItem							is like Item
		LocalNonStockSubstitute					is Boolean
		LocalHasOtherLocationForSubstitute		is Boolean
		LocalHasLocationWithStocks				is Boolean
		LocalSpecialItemUsed					is Boolean
		BypassWarehouseLocation					is Boolean
		LocalSubstituteFromCompanyLocation		is like FromCompanyLocation
		LocalOtherWarehouseFromCompanyLocation	is like FromCompanyLocation	
		LocalBypassVendorLocationValidation		is Boolean
		LocalBlankVendorLocation				is Boolean
		FromParCounting                			is Boolean	
		ItemSubstituteOnALocation				is Boolean
		ParLocationCount						is like Quantity 
			precision is Item.NumberOfDecimalsQuantity	
		ReorderPoint							is like Quantity
		LocalCountQuantity						is like Quantity
			precision is Item.NumberOfDecimalsQuantity	
		TaxLineItemView							is a TaxLineItem view
		LocalUniqueID							is like DistributionSequence
		LocalRSSLPLSpecialItem					is like Item
		LocalRSSLPLSpecialItemGroup				is like ItemGroup
		LocalRSSLPLSpecialItemDescription		is like Description
		NewBODTracker  							is a FSMInboundBODTracker view
		LocalFSMInboundBODTracker				is Numeric 15
		Error            						is Boolean
	    ErrorMessage     						is Alpha 300
		LocalConfigurationParameter				is Alpha size up to 200	
		LocalAEAlreadyExecuted					is Boolean
	    LocalBODAEAlreadyExecuted				is Boolean
	    LocalCrossBODAEValue					is Alpha 40
	    LocalCrossAEValue						is Alpha 40
		LocalManufacturer						is like Manufacturer
		LocalManufacturerNumber					is like ManufacturerNumber
		LocalUnitOfMeasure						is like UnitOfMeasure
		LocalCreatedFromParCounting				is Boolean
	    
		ComponentQuantityIncrease               is an UnsignedQuantity	
		InitialExcessQuantity                   is an UnsignedQuantity	
		FinalExcessQuantity                     is an UnsignedQuantity
		LocalProcedureItem           			is like Item
		LocalProcedureLevel                     is Numeric size 1 
		LocalContract							is like Contract
		LocalContractLine                       is like ContractLine	
		LocalComponentGroup                     is Numeric 2
		LocalProcedureLine                      is like ContractLine
		FromSwapFromNoCharge                    is Boolean
		FromSwapToNoCharge                      is Boolean 
		LocalFromCapitatedSwap                  is Boolean 
		LocalComputeQuantity					is like Quantity

		LocalContractParticipantMatch			is Boolean
		LocalVertexDistributionAccount      	is a FinanceCodeBlock
		Idx										is Numeric 3
		LocalFromCurrency						is like Currency
		LocalToCurrency 						is like Currency
		LocalSubstituteFound					is Boolean
		LocalNewLocation						is Boolean
		LocalExcessQuantity						is like Quantity
		LocalCompletionMessage					is Text
		LocalCompanyForQuantityAdd				is like InventoryCompany
		LocalRequisitionForQuantityAdd			is a  Requisition
		LocalCostUOMForQuantityAdd		        is a UnitOfMeasure
		LocalIsPartialAllocationForSubstitution	is Boolean
		LocalRemainingQuantity					is like Quantity
		LocalOriginalItemFromCompanyLocationFromRule	is like FromCompanyLocation
		LocalDoPartialAllocationForSubstitution	is Boolean
		LocalOriginalCanFulfillQuantity			is Boolean
		LocalAvailableQuantityForOriginal		is like Quantity
		LocalCreateActionCompletionMessageDetail	is Text
		LocalOriginalItemUnitCost				is an UnsignedUnitCost

	Dimensions
		DerivedApprovedDimension
			dimension name is Approved

		Buyer
			caption is "<Name>"

		TransientGLCalendarPeriod
			dimension name is Calendar
			caption is "<AlternateCaption>"
			Attributes
				YTDCrossReference
				SamePeriodLastYear
				YTDCrossRefSPLY
				PeriodType
				PeriodTypeName
				NumberOfDays

		DerivedClosedDimension
			dimension name is ClosedFlag

		Contract
		CostCode

		DerivedCreatePurchaseOrderDimension
			dimension name is CreatePurchaseOrder

		TransactionCurrencyCode
			dimension name is CurrencyCode

		DerivedDropshipDimension
			dimension name is Dropship

		Item
			caption is "<ItemLongName>"
			Attributes
				ItemLongName
				ItemGroup
				Item
				Description
				Description2
				StockUOM
				GenericName
				MajorPurchasingClass
				MajorPurchasingClassDesc
				MinorPurchasingClass
				MinorPurchasingClassDesc
				MajorInventoryClass
				MajorInventoryClassDesc
				MinorInventoryClass
				MinorInventoryClassDesc
				UNSPSCCode.UNSPSCSegment
				UNSPSCCode.UNSPSCFamily
				UNSPSCCode.UNSPSCClass
				UNSPSCCode.UNSPSCCommodity
				Active
				AddedDate
				CommodityCode
				Consignment
				HazardCode
				Manufacturer.ManufacturerCode
				Manufacturer.ManufacturerDivision
				ManufacturerNumber
			Hierarchies
				PurchasingClass
					base level included
					Attributes
						ItemGroup
						MajorPurchasingClass
						MinorPurchasingClass
				InventoryClass
					base level included
					Attributes
						ItemGroup
						MajorInventoryClass
						MinorInventoryClass
				UNSPSC
					base level included
					Attributes
						ItemGroup
						UNSPSCCode.UNSPSCSegment
						UNSPSCCode.UNSPSCFamily
						UNSPSCCode.UNSPSCClass
						UNSPSCCode.UNSPSCCommodity
				Manufacturer
					base level included
					Attributes
						ItemGroup
						Manufacturer.ManufacturerCode
						Manufacturer.ManufacturerDivision
						ManufacturerNumber
				HazardCode
					base level included
					Attributes
						ItemGroup
						HazardCode

		ItemType


		Manufacturer
			Attributes
				Manufacturer.ManufacturerCode
				Manufacturer.ManufacturerDivision

		DerivedPCardDimension
			dimension name is PCard

		Requisition
			dimension name is RequisitionNumber

		Requisition.Requester
			dimension name is Requester

		Requisition.RequisitionRecordSource
			dimension name is RequisitionSource

		RequisitionSource
			dimension name is RequisitionType

		Requisition.Status
			dimension name is HeaderStatus

		Status
			dimension name is LineStatus

		RequestingLocation

		DerivedSpendCategoryDimension
			dimension name is SpendCategory

		DerivedSourcingEventDimension
		   	dimension name is SourcingEvent

		DerivedTaxableDimension
			dimension name is Taxable

		PurchaseTaxCode
			dimension name is TaxCode

		DerivedTimeIntelligenceDimension
			dimension name is TimeIntelligence

		Vendor
			caption is representative text
			Attributes
				VendorGroup
				Vendor
				VendorName
				VendorStatus
				VendorClass
				ContactName
				Operator
				Project
			Hierarchies
				VendorClass
					base level included
					Attributes
						VendorGroup
						VendorClass




	Measures
		ReqLineCount
		ReqLineValue
		Quantity
		UnitCost
		ReturnQuantity
		ReturnValue
		KilledQuantity
		KilledValue
		KilledLineCount


		LinesToSourcingCount
		LinesToSourcingValue


		DaysFromReqCreationToApproval
		DaysFromReqApprovalToPoCreation

	Field Groups
		TextSearchable
			Item
			MajorPurchasingClass
			MinorPurchasingClass
			ManufacturerNumber
			VendorItem
			Description
			ItemGTIN

	Rule Blocks
		ValidateOngoingCalculation
			constraint (not IsOngoingAverageCalculation)
				"Global_\Average_\CostCalculationIsInProgress._\PleaseTryAgain."

		ValidateParLocationCount
			if (ParLocationCount not = ReorderPoint)
				constraint (ParLocationCount < ReorderPoint)
					"CannotCreateRequisition;CountIsNotLessThanParLevel"                   	

				constraint	(ParLocationCount >= 0)
					"ParLocationCountCannotBeNegative"

				LocalCountQuantity = ReorderPoint - ParLocationCount
				round LocalCountQuantity up to nearest RequestingItemLocationRel.OrderMultiple
				if (LocalCountQuantity > 0)
						constraint (LocalCountQuantity >= RequestingItemLocationRel.MinimumOrderQuantity)
							"CannotCreateRequisition;CountIsLessThanMinimumOrderQuantity"  

			include ConvertParCount  

		CreateKitchenOrder
			if (IsInventoryOrNonstock
			and Item.Recipe
			and RecipeRel exists
			and WarehouseDemandLines2Rel.BackorderedQuantity entered
			and FromCompanyLocationBin.FromCompany.KitchenOrderInUse
			and FromCompanyLocationBin.FromLocation.RecipeEnabled)
				if (invoking action = "CreateKitchenOrderFromBatch")
					constraint (DerivedBatchQuantity > 0)
						"Field_\Number_\Of_\BatchesIsRequired:_\Requisition=<Requisition>,_\Requisition_Line=<RequisitionLine>"
				invoke Create KitchenOrder
					invoked.Company											= FromCompanyLocationBin.FromCompany
					invoked.InventoryLocation								= FromCompanyLocationBin.FromLocation
					invoked.OriginatingTransaction							= reference to this instance
					invoked.RequestingCompanyAndLocation.RequestingCompany	= Requisition.Company
					invoked.RequestingCompanyAndLocation.RequestingLocation = Requisition.RequestingLocation
					invoked.Item											= Item
					invoked.BatchQuantity									= DerivedBatchQuantity

		LoadOneSourceInputFields
			if (TaxEntityRel.ThirdParty.Sabrix)
				CalculateTax.CallingModule				= "Requisition"
				CalculateTax.System						= "RQ"
				CalculateTax.InFinanceEnterpriseGroup	= GeneralLedgerCompanyForCompanyRel.FinanceEnterpriseGroup
				CalculateTax.TaxEntity					= Company.AccountingEntity
				CalculateTax.Vendor						= Vendor
				CalculateTax.TaxCode					= PurchaseTaxCode
				CalculateTax.PostalAddress				= RequestingLocation.PostalAddress
				CalculateTax.CommodityCode				= DerivedCommodityCodeNoDash
				CalculateTax.BypassEditing				= true
				CalculateTax.UserElementLevel			= "L"
				CalculateTax.Description				= Description

		CreateTaxLineItem
			if (TaxEntityRel.ThirdParty.Sabrix
			or  SingleCallToVertex)
				invoke Create TaxLineItem
					assign result to TaxLineItemView

					invoked.FinanceEnterpriseGroup		= GeneralLedgerCompanyForCompanyRel.FinanceEnterpriseGroup
					invoked.InvoiceNumber				= Requisition
					invoked.InvoiceDate					= current corporate date
					invoked.TaxEntity					= Company.AccountingEntity
					invoked.LineItemId					= Item
					invoked.RelatedObjectReference		= reference to RequisitionLine
					if (SingleCallToOneSource
					or  SingleCallToVertex)
						invoked.TaxLineItem.UniqueIdOfRelatedObject	= Requisition.UniqueID
					else
						invoked.TaxLineItem.UniqueIdOfRelatedObject	= UniqueID
					invoked.RelatedLineItemUniqueId		= UniqueID
					invoked.LineItemNumber				= RequisitionLine
					invoked.InvoiceAmount				= LineExtendedAmount
					invoked.TaxableAmount				= LineExtendedAmount
					invoked.ShipToTaxCode				= PurchaseTaxCode
					invoked.ShipToTaxCodeDescription	= PurchaseTaxCode.Description
					if (TaxEntityRel.ThirdParty.Sabrix)
						invoked.CommodityCode			= DerivedCommodityCodeNoDash

					if (Requisition.DropshipAddress not entered)
						invoked.ShipToAddress			= FromCompanyLocationBin.FromLocation.PostalAddressForPurchaseOrder
					else
						invoked.ShipToAddress			= Requisition.DropshipAddress		

					invoked.Description					= Description

					if (TaxEntityRel.ThirdParty.VertexOSeries)
						if  (ItemType.Inventoried)
							LocalVertexDistributionAccount 		= ItemLocationRel.GeneralLedgerCategory.InventoryAccount 
						else
							LocalVertexDistributionAccount    	= first RequisitionLineDistributionsRel.DistributionAccount

						if (PurchaseTaxCode != "00")
							invoked.ShipToTaxCode				= PurchaseTaxCode									
							invoked.ShipToTaxCodeDescription	= PurchaseTaxCode.Description

						invoked.CostCenter                     	= LocalVertexDistributionAccount.AccountingUnit    
						invoked.GeneralLedgerAccount 			= LocalVertexDistributionAccount.GeneralLedgerChartAccount 
						invoked.ProductClass                    = MajorPurchasingClass  
						invoked.ProductTaxCategory 				= ProductTaxCategory

						if (IsHSNSACCodeEnabled)
							invoked.CommodityCodeType      		= "HSN"
							invoked.CommodityCode				= HSNSACCode 
						else 
							invoked.CommodityCodeType      		= "UNSPSC"
							invoked.CommodityCode				= UNSPSCCode.UNSPSCCodeDisplay 

						invoked.Quantity 						= Quantity 


		CreateTaxLineItemUserFields
			if (TaxEntityRel.ThirdParty.Sabrix)
				initialize AttributeCounter
				if (TaxAttributesRel exists)
					invoke Create TaxLineItemUserFields
						for each TaxAttributesRel.OneSourceTaxAttributeByNumberRel
							invoked.FinanceEnterpriseGroup					= GeneralLedgerCompanyForCompanyRel.FinanceEnterpriseGroup
							if (SingleCallToOneSource)
								invoked.TaxLineItem.UniqueIdOfRelatedObject	= Requisition.UniqueID
							else
								invoked.TaxLineItem.UniqueIdOfRelatedObject	= UniqueID
							invoked.TaxLineItem.Sequence					= TaxLineItemView.TaxLineItem.Sequence
								if (each.LoadDynamicField.ValueIs.TaxEntity)
									AttributeCounter +=1
									invoked.UserElementGroup.UserElement[AttributeCounter].Number	= AttributeCounter
									invoked.UserElementGroup.UserElement[AttributeCounter].Name		= each.UserAttributeName
									invoked.UserElementGroup.UserElement[AttributeCounter].Value	= TaxEntityRel.TaxEntity
								else
								if (each.LoadDynamicField.ValueIs.Company)
									AttributeCounter +=1
									invoked.UserElementGroup.UserElement[AttributeCounter].Number		= AttributeCounter
									invoked.UserElementGroup.UserElement[AttributeCounter].Name			= each.UserAttributeName
									invoked.UserElementGroup.UserElement[AttributeCounter].Value		= Company
								else
								if (each.LoadDynamicField.ValueIs.Description)
									AttributeCounter +=1
									invoked.UserElementGroup.UserElement[AttributeCounter].Number		= AttributeCounter
									invoked.UserElementGroup.UserElement[AttributeCounter].Name			= each.UserAttributeName
									invoked.UserElementGroup.UserElement[AttributeCounter].Value		= Description
								else
								if (each.LoadDynamicField.ValueIs.Vendor)
									AttributeCounter +=1
									invoked.UserElementGroup.UserElement[AttributeCounter].Number		= AttributeCounter
									invoked.UserElementGroup.UserElement[AttributeCounter].Name			= each.UserAttributeName
									invoked.UserElementGroup.UserElement[AttributeCounter].Value		= Vendor
								else
								if (each.LoadDynamicField.ValueIs.PostingDate)
									if (RequestedDeliveryDate entered)
										AttributeCounter +=1
										invoked.UserElementGroup.UserElement[AttributeCounter].Number		= AttributeCounter
										invoked.UserElementGroup.UserElement[AttributeCounter].Name			= each.UserAttributeName
										invoked.UserElementGroup.UserElement[AttributeCounter].Value		= RequestedDeliveryDate
									else
										AttributeCounter +=1
										invoked.UserElementGroup.UserElement[AttributeCounter].Number		= AttributeCounter
										invoked.UserElementGroup.UserElement[AttributeCounter].Name			= each.UserAttributeName
										invoked.UserElementGroup.UserElement[AttributeCounter].Value		= Requisition.CreationDate
								else
								if (each.LoadDynamicField.ValueIs.TaxDate)
									if (RequestedDeliveryDate entered)
										AttributeCounter +=1
										invoked.UserElementGroup.UserElement[AttributeCounter].Number		= AttributeCounter
										invoked.UserElementGroup.UserElement[AttributeCounter].Name			= each.UserAttributeName
										invoked.UserElementGroup.UserElement[AttributeCounter].Value		= RequestedDeliveryDate
									else
										AttributeCounter +=1
										invoked.UserElementGroup.UserElement[AttributeCounter].Number		= AttributeCounter
										invoked.UserElementGroup.UserElement[AttributeCounter].Name			= each.UserAttributeName
										invoked.UserElementGroup.UserElement[AttributeCounter].Value		= Requisition.CreationDate
								else
								if (each.LoadDynamicField.ValueIs.GLAccount)
									if (first RequisitionLineDistributionsRel.DistributionAccount.GeneralLedgerChartAccount entered)
										AttributeCounter +=1
										invoked.UserElementGroup.UserElement[AttributeCounter].Number		= AttributeCounter
										invoked.UserElementGroup.UserElement[AttributeCounter].Name			= each.UserAttributeName
										invoked.UserElementGroup.UserElement[AttributeCounter].Value		= first RequisitionLineDistributionsRel.DistributionAccount.GeneralLedgerChartAccount
								else
								if (each.LoadDynamicField.ValueIs.Location)
									AttributeCounter +=1
									invoked.UserElementGroup.UserElement[AttributeCounter].Number		= AttributeCounter
									invoked.UserElementGroup.UserElement[AttributeCounter].Name			= each.UserAttributeName
									invoked.UserElementGroup.UserElement[AttributeCounter].Value		= FromCompanyLocationBin.FromLocation
								else
								if (each.LoadDynamicField.ValueIs.Currency)
									AttributeCounter +=1
									invoked.UserElementGroup.UserElement[AttributeCounter].Number		= AttributeCounter
									invoked.UserElementGroup.UserElement[AttributeCounter].Name			= each.UserAttributeName
									invoked.UserElementGroup.UserElement[AttributeCounter].Value		= TransactionCurrencyCode
								else
								if (each.LoadDynamicField.ValueIs.UnitCost)
									AttributeCounter +=1
									invoked.UserElementGroup.UserElement[AttributeCounter].Number		= AttributeCounter
									invoked.UserElementGroup.UserElement[AttributeCounter].Name			= each.UserAttributeName
									invoked.UserElementGroup.UserElement[AttributeCounter].Value		= TransactionUnitCost
								else
								if (each.LoadDynamicField.ValueIs.ContractType)
									AttributeCounter +=1
									invoked.UserElementGroup.UserElement[AttributeCounter].Number		= AttributeCounter
									invoked.UserElementGroup.UserElement[AttributeCounter].Name			= each.UserAttributeName
									invoked.UserElementGroup.UserElement[AttributeCounter].Value		= Contract.ContractType
								else
								if (each.LoadDynamicField.ValueIs.Project)
									if (first RequisitionLineDistributionsRel.DistributionAccount.Project entered)
										AttributeCounter +=1
										invoked.UserElementGroup.UserElement[AttributeCounter].Number		= AttributeCounter
										invoked.UserElementGroup.UserElement[AttributeCounter].Name			= each.UserAttributeName
										invoked.UserElementGroup.UserElement[AttributeCounter].Value		= first RequisitionLineDistributionsRel.DistributionAccount.Project
								else
								if (each.LoadDynamicField.ValueIs.CommodityCode)
									AttributeCounter +=1
									invoked.UserElementGroup.UserElement[AttributeCounter].Number		= AttributeCounter
									invoked.UserElementGroup.UserElement[AttributeCounter].Name			= each.UserAttributeName
									invoked.UserElementGroup.UserElement[AttributeCounter].Value		= CommodityCode
								else
								if (each.LoadDynamicField.ValueIs.ProductTaxCatagory)
									AttributeCounter +=1
									invoked.UserElementGroup.UserElement[AttributeCounter].Number		= AttributeCounter
									invoked.UserElementGroup.UserElement[AttributeCounter].Name			= each.UserAttributeName
									invoked.UserElementGroup.UserElement[AttributeCounter].Value		= ProductTaxCategory
								else
								if (each.LoadDynamicField.ValueIs.UNSPSC)
									AttributeCounter +=1
									invoked.UserElementGroup.UserElement[AttributeCounter].Number		= AttributeCounter
									invoked.UserElementGroup.UserElement[AttributeCounter].Name			= each.UserAttributeName
									invoked.UserElementGroup.UserElement[AttributeCounter].Value		= UNSPSCCode.UNSPSCCodeDisplay
								else
								if (each.LoadDynamicField.ValueIs.EAMCommodityCode)
									AttributeCounter +=1
									invoked.UserElementGroup.UserElement[AttributeCounter].Number		= AttributeCounter
									invoked.UserElementGroup.UserElement[AttributeCounter].Name			= each.UserAttributeName
									invoked.UserElementGroup.UserElement[AttributeCounter].Value		= EAMCommodityCode
								else
								if (each.LoadDynamicField.ValueIs.EAMProjectID)
									if (EAMWorkOrder.ProjectID entered)
										AttributeCounter +=1
										invoked.UserElementGroup.UserElement[AttributeCounter].Number		= AttributeCounter
										invoked.UserElementGroup.UserElement[AttributeCounter].Name			= each.UserAttributeName
										invoked.UserElementGroup.UserElement[AttributeCounter].Value		= EAMWorkOrder.ProjectID
								else
								if (each.LoadDynamicField.ValueIs.EAMManufacturingIndicator)
									if (EAMWorkOrder entered
									and EAMWorkOrder.EAMWorkOrderUserFieldsRel.UserFieldCheckBox.Value[1] entered)
										AttributeCounter +=1
										invoked.UserElementGroup.UserElement[AttributeCounter].Number		= AttributeCounter
										invoked.UserElementGroup.UserElement[AttributeCounter].Name			= each.UserAttributeName
										invoked.UserElementGroup.UserElement[AttributeCounter].Value		= EAMWorkOrder.EAMWorkOrderUserFieldsRel.UserFieldCheckBox.Value[1]
								else
								if (each.LoadDynamicField.ValueIs.EAMProjectType)
									if (EAMWorkOrder entered
									and EAMWorkOrder.EAMWorkOrderUserFieldsRel.UserFieldAlpha.Value[23] entered)
										AttributeCounter +=1
										invoked.UserElementGroup.UserElement[AttributeCounter].Number		= AttributeCounter
										invoked.UserElementGroup.UserElement[AttributeCounter].Name			= each.UserAttributeName
										invoked.UserElementGroup.UserElement[AttributeCounter].Value		= EAMWorkOrder.EAMWorkOrderUserFieldsRel.UserFieldAlpha.Value[23]
								else
								if (each.LoadDynamicField.ValueIs.EAMTypeCode)
									if (EAMWorkOrder entered
									and EAMWorkOrder.TypeCode entered)
										AttributeCounter +=1
										invoked.UserElementGroup.UserElement[AttributeCounter].Number		= AttributeCounter
										invoked.UserElementGroup.UserElement[AttributeCounter].Name			= each.UserAttributeName
										invoked.UserElementGroup.UserElement[AttributeCounter].Value		= EAMWorkOrder.TypeCode
								else
								if (each.LoadDynamicField.ValueIs.EAMPositionFacility)
									if (EAMWorkOrder entered
									and EAMWorkOrder.PositionFacility entered)
										AttributeCounter +=1
										invoked.UserElementGroup.UserElement[AttributeCounter].Number		= AttributeCounter
										invoked.UserElementGroup.UserElement[AttributeCounter].Name			= each.UserAttributeName
										invoked.UserElementGroup.UserElement[AttributeCounter].Value		= EAMWorkOrder.PositionFacility
								else
								if (each.LoadDynamicField.ValueIs.EAMWorkOrderShipTo)
									if (EAMWorkOrder entered
									and EAMWorkOrder.EAMWorkOrderUserFieldsRel.UserFieldAlpha.Value[32] entered)
										AttributeCounter +=1
										invoked.UserElementGroup.UserElement[AttributeCounter].Number		= AttributeCounter
										invoked.UserElementGroup.UserElement[AttributeCounter].Name			= each.UserAttributeName
										invoked.UserElementGroup.UserElement[AttributeCounter].Value		= EAMWorkOrder.EAMWorkOrderUserFieldsRel.UserFieldAlpha.Value[32]
								else
								if (each.LoadDynamicField.ValueIs.EAMWorkOrderCountry)
									if (EAMWorkOrder entered
									and EAMWorkOrder.EAMWorkOrderUserFieldsRel.UserFieldAlpha.Value[32] entered)
										LocalInventoryLocation = EAMWorkOrder.EAMWorkOrderUserFieldsRel.UserFieldAlpha.Value[32]
										if (OneSourceEAMInventoryLocationRel exists
										and OneSourceEAMInventoryLocationRel.PostalAddress.Country entered)
											AttributeCounter +=1
											invoked.UserElementGroup.UserElement[AttributeCounter].Number		= AttributeCounter
											invoked.UserElementGroup.UserElement[AttributeCounter].Name			= each.UserAttributeName
											invoked.UserElementGroup.UserElement[AttributeCounter].Value		= OneSourceEAMInventoryLocationRel.PostalAddress.Country
								else
								if (each.LoadDynamicField.ValueIs.EAMWorkOrderState)
									if (EAMWorkOrder entered
									and EAMWorkOrder.EAMWorkOrderUserFieldsRel.UserFieldAlpha.Value[32] entered)
										LocalInventoryLocation = EAMWorkOrder.EAMWorkOrderUserFieldsRel.UserFieldAlpha.Value[32]
										if (OneSourceEAMInventoryLocationRel exists
										and OneSourceEAMInventoryLocationRel.PostalAddress.StateProvince entered)
											AttributeCounter +=1
											invoked.UserElementGroup.UserElement[AttributeCounter].Number		= AttributeCounter
											invoked.UserElementGroup.UserElement[AttributeCounter].Name			= each.UserAttributeName
											invoked.UserElementGroup.UserElement[AttributeCounter].Value		= OneSourceEAMInventoryLocationRel.PostalAddress.StateProvince
								else
								if (each.LoadDynamicField.ValueIs.EAMUserField30)
									if (EAMWorkOrder entered
									and EAMWorkOrder.EAMWorkOrderUserFieldsRel.UserFieldAlpha.Value[30] entered)
										AttributeCounter +=1
										invoked.UserElementGroup.UserElement[AttributeCounter].Number		= AttributeCounter
										invoked.UserElementGroup.UserElement[AttributeCounter].Name			= each.UserAttributeName
										invoked.UserElementGroup.UserElement[AttributeCounter].Value		= EAMWorkOrder.EAMWorkOrderUserFieldsRel.UserFieldAlpha.Value[30]
								else
								if (each.LoadDynamicField.ValueIs.EAMUserField24)
									if (EAMWorkOrder entered
									and EAMWorkOrder.EAMWorkOrderUserFieldsRel.UserFieldAlpha.Value[24] entered)
										AttributeCounter +=1
										invoked.UserElementGroup.UserElement[AttributeCounter].Number		= AttributeCounter
										invoked.UserElementGroup.UserElement[AttributeCounter].Name			= each.UserAttributeName
										invoked.UserElementGroup.UserElement[AttributeCounter].Value		= EAMWorkOrder.EAMWorkOrderUserFieldsRel.UserFieldAlpha.Value[24]
								else
								if (each.LoadDynamicField.ValueIs.ToAccountingEntity)
									if (first RequisitionLineDistributionsRel.DistributionAccount.ToAccountingEntity entered)
										AttributeCounter +=1
										invoked.UserElementGroup.UserElement[AttributeCounter].Number		= AttributeCounter
										invoked.UserElementGroup.UserElement[AttributeCounter].Name			= each.UserAttributeName
										invoked.UserElementGroup.UserElement[AttributeCounter].Value		= first RequisitionLineDistributionsRel.DistributionAccount.ToAccountingEntity
								else
								if (each.LoadDynamicField.ValueIs.FinanceDimension1)
									if (first RequisitionLineDistributionsRel.DistributionAccount.FinanceDimension1 entered)
										AttributeCounter +=1
										invoked.UserElementGroup.UserElement[AttributeCounter].Number		= AttributeCounter
										invoked.UserElementGroup.UserElement[AttributeCounter].Name			= each.UserAttributeName
										invoked.UserElementGroup.UserElement[AttributeCounter].Value		= first RequisitionLineDistributionsRel.DistributionAccount.FinanceDimension1
								else
								if (each.LoadDynamicField.ValueIs.FinanceDimension2)
									if (first RequisitionLineDistributionsRel.DistributionAccount.FinanceDimension2 entered)
										AttributeCounter +=1
										invoked.UserElementGroup.UserElement[AttributeCounter].Number		= AttributeCounter
										invoked.UserElementGroup.UserElement[AttributeCounter].Name			= each.UserAttributeName
										invoked.UserElementGroup.UserElement[AttributeCounter].Value		= first RequisitionLineDistributionsRel.DistributionAccount.FinanceDimension2
								else
								if (each.LoadDynamicField.ValueIs.FinanceDimension3)
									if (first RequisitionLineDistributionsRel.DistributionAccount.FinanceDimension3 entered)
										AttributeCounter +=1
										invoked.UserElementGroup.UserElement[AttributeCounter].Number		= AttributeCounter
										invoked.UserElementGroup.UserElement[AttributeCounter].Name			= each.UserAttributeName
										invoked.UserElementGroup.UserElement[AttributeCounter].Value		= first RequisitionLineDistributionsRel.DistributionAccount.FinanceDimension3
								else
								if (each.LoadDynamicField.ValueIs.FinanceDimension4)
									if (first RequisitionLineDistributionsRel.DistributionAccount.FinanceDimension4 entered)
										AttributeCounter +=1
										invoked.UserElementGroup.UserElement[AttributeCounter].Number		= AttributeCounter
										invoked.UserElementGroup.UserElement[AttributeCounter].Name			= each.UserAttributeName
										invoked.UserElementGroup.UserElement[AttributeCounter].Value		= first RequisitionLineDistributionsRel.DistributionAccount.FinanceDimension4
								else
								if (each.LoadDynamicField.ValueIs.FinanceDimension5)
									if (first RequisitionLineDistributionsRel.DistributionAccount.FinanceDimension5 entered)
										AttributeCounter +=1
										invoked.UserElementGroup.UserElement[AttributeCounter].Number		= AttributeCounter
										invoked.UserElementGroup.UserElement[AttributeCounter].Name			= each.UserAttributeName
										invoked.UserElementGroup.UserElement[AttributeCounter].Value		= first RequisitionLineDistributionsRel.DistributionAccount.FinanceDimension5
								else
								if (each.LoadDynamicField.ValueIs.FinanceDimension6)
									if (first RequisitionLineDistributionsRel.DistributionAccount.FinanceDimension6 entered)
										AttributeCounter +=1
										invoked.UserElementGroup.UserElement[AttributeCounter].Number		= AttributeCounter
										invoked.UserElementGroup.UserElement[AttributeCounter].Name			= each.UserAttributeName
										invoked.UserElementGroup.UserElement[AttributeCounter].Value		= first RequisitionLineDistributionsRel.DistributionAccount.FinanceDimension6
								else
								if (each.LoadDynamicField.ValueIs.FinanceDimension7)
									if (first RequisitionLineDistributionsRel.DistributionAccount.FinanceDimension7 entered)
										AttributeCounter +=1
										invoked.UserElementGroup.UserElement[AttributeCounter].Number		= AttributeCounter
										invoked.UserElementGroup.UserElement[AttributeCounter].Name			= each.UserAttributeName
										invoked.UserElementGroup.UserElement[AttributeCounter].Value		= first RequisitionLineDistributionsRel.DistributionAccount.FinanceDimension7
								else
								if (each.LoadDynamicField.ValueIs.FinanceDimension8)
									if (first RequisitionLineDistributionsRel.DistributionAccount.FinanceDimension8 entered)
										AttributeCounter +=1
										invoked.UserElementGroup.UserElement[AttributeCounter].Number		= AttributeCounter
										invoked.UserElementGroup.UserElement[AttributeCounter].Name			= each.UserAttributeName
										invoked.UserElementGroup.UserElement[AttributeCounter].Value		= first RequisitionLineDistributionsRel.DistributionAccount.FinanceDimension8
								else
								if (each.LoadDynamicField.ValueIs.FinanceDimension9)
									if (first RequisitionLineDistributionsRel.DistributionAccount.FinanceDimension9 entered)
										AttributeCounter +=1
										invoked.UserElementGroup.UserElement[AttributeCounter].Number		= AttributeCounter
										invoked.UserElementGroup.UserElement[AttributeCounter].Name			= each.UserAttributeName
										invoked.UserElementGroup.UserElement[AttributeCounter].Value		= first RequisitionLineDistributionsRel.DistributionAccount.FinanceDimension9
								else
								if (each.LoadDynamicField.ValueIs.FinanceDimension10)
									if (first RequisitionLineDistributionsRel.DistributionAccount.FinanceDimension10 entered)
										AttributeCounter +=1
										invoked.UserElementGroup.UserElement[AttributeCounter].Number		= AttributeCounter
										invoked.UserElementGroup.UserElement[AttributeCounter].Name			= each.UserAttributeName
										invoked.UserElementGroup.UserElement[AttributeCounter].Value		= first RequisitionLineDistributionsRel.DistributionAccount.FinanceDimension10
								else
									AttributeCounter +=1
									invoked.UserElementGroup.UserElement[AttributeCounter].Number		= AttributeCounter
									invoked.UserElementGroup.UserElement[AttributeCounter].Name			= each.UserAttributeName
									invoked.UserElementGroup.UserElement[AttributeCounter].Value		= each.Value

			else 
			if (SingleCallToVertex)
				initialize AttributeCounter
				if (TaxAttributesRel.VertexFlexibleFieldExist)

					if  (ItemType.Inventoried)
						LocalVertexDistributionAccount 					= ItemLocationRel.GeneralLedgerCategory.InventoryAccount 
					else
						LocalVertexDistributionAccount    				= first RequisitionLineDistributionsRel.DistributionAccount

					invoke Create TaxLineItemUserFields


						invoked.FinanceEnterpriseGroup						= Company.FinanceEnterpriseGroup 

						if (SingleCallToVertex)
							invoked.TaxLineItem.UniqueIdOfRelatedObject 	= Requisition.UniqueID
						else
							invoked.TaxLineItem.UniqueIdOfRelatedObject 	= UniqueID

						invoked.TaxLineItem.Sequence 						= TaxLineItemView.TaxLineItem.Sequence




						Idx = 0

						for each TaxAttributesRel.VertexFlexibleFieldsRel.VertexFlexibleCodeRel

							if (each.Code entered            
							or  each.ExternalValue entered)
								Idx +=1   
								invoked.FlexibleFields.FlexibleCodes.FlexibleCodeField[Idx].FieldId = each.VertexFlexibleCode.FieldId
								if (each.ExternalValue.ValueIs.TaxEntity)
									invoked.FlexibleFields.FlexibleCodes.FlexibleCodeField[Idx].Code = Company.AccountingEntity
								else    
								if (each.ExternalValue.ValueIs.Company)
									invoked.FlexibleFields.FlexibleCodes.FlexibleCodeField[Idx].Code = Company
								else    
								if (each.ExternalValue.ValueIs.Vendor)
									invoked.FlexibleFields.FlexibleCodes.FlexibleCodeField[Idx].Code = Vendor
								else    
								if (each.ExternalValue.ValueIs.PostingDate)
									if (RequestedDeliveryDate entered)	
										invoked.FlexibleFields.FlexibleCodes.FlexibleCodeField[Idx].Code	= RequestedDeliveryDate
									else
										invoked.FlexibleFields.FlexibleCodes.FlexibleCodeField[Idx].Code	= Requisition.CreationDate
								else    
								if (each.ExternalValue.ValueIs.TaxDate)
									if (RequestedDeliveryDate entered)	
										invoked.FlexibleFields.FlexibleCodes.FlexibleCodeField[Idx].Code	= RequestedDeliveryDate
									else
										invoked.FlexibleFields.FlexibleCodes.FlexibleCodeField[Idx].Code	= Requisition.CreationDate
								else    
								if (each.ExternalValue.ValueIs.AccountingUnit)
									invoked.FlexibleFields.FlexibleCodes.FlexibleCodeField[Idx].Code = LocalVertexDistributionAccount.AccountingUnit 
								else    
								if (each.ExternalValue.ValueIs.GLAccount)
									invoked.FlexibleFields.FlexibleCodes.FlexibleCodeField[Idx].Code = LocalVertexDistributionAccount.GeneralLedgerChartAccount
								else    
								if (each.ExternalValue.ValueIs.Location)
									invoked.FlexibleFields.FlexibleCodes.FlexibleCodeField[Idx].Code = FromCompanyLocationBin.FromLocation 
								else    
								if (each.ExternalValue.ValueIs.Currency)
									invoked.FlexibleFields.FlexibleCodes.FlexibleCodeField[Idx].Code = TransactionCurrencyCode
								else    
								if (each.ExternalValue.ValueIs.UnitCost)
									invoked.FlexibleFields.FlexibleCodes.FlexibleCodeField[Idx].Code = UnitCost
								else    
								if (each.ExternalValue.ValueIs.ContractType)
									invoked.FlexibleFields.FlexibleCodes.FlexibleCodeField[Idx].Code = LocalVertexDistributionAccount.Project.ProjectInEnterpriseStructureRel.ParentProject.ProjectContract.ContractType
								else    
								if (each.ExternalValue.ValueIs.WorkType)
									invoked.FlexibleFields.FlexibleCodes.FlexibleCodeField[Idx].Code = LocalVertexDistributionAccount.Project.ProjectInEnterpriseStructureRel.ParentProject.WorkType
								else    
								if (each.ExternalValue.ValueIs.AccountSubType)
									invoked.FlexibleFields.FlexibleCodes.FlexibleCodeField[Idx].Code = LocalVertexDistributionAccount.GeneralLedgerChartAccount.AccountSubType
								else    
								if (each.ExternalValue.ValueIs.ServiceType)
									invoked.FlexibleFields.FlexibleCodes.FlexibleCodeField[Idx].Code = LocalVertexDistributionAccount.Project.ProjectInEnterpriseStructureRel.ParentProject.ServiceType
								else    
								if (each.ExternalValue.ValueIs.CommodityCode)
									invoked.FlexibleFields.FlexibleCodes.FlexibleCodeField[Idx].Code = DerivedCommodityCodeNoDash
								else    
								if (each.ExternalValue.ValueIs.UNSPSC)
									invoked.FlexibleFields.FlexibleCodes.FlexibleCodeField[Idx].Code = UNSPSCCode.UNSPSCCodeDisplay
								else    
								if (each.ExternalValue.ValueIs.ProductTaxCatagory)
									invoked.FlexibleFields.FlexibleCodes.FlexibleCodeField[Idx].Code = ProductTaxCategory
								else    
								if (each.ExternalValue.ValueIs.UsageType)			
									invoked.FlexibleFields.FlexibleCodes.FlexibleCodeField[Idx].Code = LocalVertexDistributionAccount.Project.ProjectInEnterpriseStructureRel.ParentProject.UsageType
								else 
								if (each.ExternalValue.ValueIs.CustomerType)			
									invoked.FlexibleFields.FlexibleCodes.FlexibleCodeField[Idx].Code = LocalVertexDistributionAccount.Project.ProjectInEnterpriseStructureRel.ParentProject.ProjectContract.ProjectFundingSourceRel.CustomerType
								else 
								if (each.ExternalValue.ValueIs.Project)				
									invoked.FlexibleFields.FlexibleCodes.FlexibleCodeField[Idx].Code = LocalVertexDistributionAccount.Project
								else 
								if (each.ExternalValue.ValueIs.Longitude)				
									invoked.FlexibleFields.FlexibleCodes.FlexibleCodeField[Idx].Code = FromCompanyLocationBin.FromLocation.PostalAddress.GeoLongitude
								else 
								if (each.ExternalValue.ValueIs.Latitude)			
									CalculateTax.VertexAttributes.VertexCodes.FlexibleCode[Idx].Code = FromCompanyLocationBin.FromLocation.PostalAddress.GeoLatitude
								else 
								if (each.ExternalValue.ValueIs.Altitude)									
									invoked.FlexibleFields.FlexibleCodes.FlexibleCodeField[Idx].Code = FromCompanyLocationBin.FromLocation.PostalAddress.GeoAltitude
								else 
								if (each.ExternalValue.ValueIs.ToAccountingEntity)
									invoked.FlexibleFields.FlexibleCodes.FlexibleCodeField[Idx].Code = LocalVertexDistributionAccount.ToAccountingEntity
								else    
								if (each.ExternalValue.ValueIs.FinanceDimension1)
									invoked.FlexibleFields.FlexibleCodes.FlexibleCodeField[Idx].Code = LocalVertexDistributionAccount.FinanceDimension1
								else    
								if (each.ExternalValue.ValueIs.FinanceDimension2)
									invoked.FlexibleFields.FlexibleCodes.FlexibleCodeField[Idx].Code = LocalVertexDistributionAccount.FinanceDimension2
								else    
								if (each.ExternalValue.ValueIs.FinanceDimension3)
									invoked.FlexibleFields.FlexibleCodes.FlexibleCodeField[Idx].Code = LocalVertexDistributionAccount.FinanceDimension3
								else    
								if (each.ExternalValue.ValueIs.FinanceDimension4)
									invoked.FlexibleFields.FlexibleCodes.FlexibleCodeField[Idx].Code = LocalVertexDistributionAccount.FinanceDimension4
								else    
								if (each.ExternalValue.ValueIs.FinanceDimension5)
									invoked.FlexibleFields.FlexibleCodes.FlexibleCodeField[Idx].Code = LocalVertexDistributionAccount.FinanceDimension5
								else    
								if (each.ExternalValue.ValueIs.FinanceDimension6)
									invoked.FlexibleFields.FlexibleCodes.FlexibleCodeField[Idx].Code = LocalVertexDistributionAccount.FinanceDimension6
								else    
								if (each.ExternalValue.ValueIs.FinanceDimension7)
									invoked.FlexibleFields.FlexibleCodes.FlexibleCodeField[Idx].Code = LocalVertexDistributionAccount.FinanceDimension7
								else    
								if (each.ExternalValue.ValueIs.FinanceDimension8)
									invoked.FlexibleFields.FlexibleCodes.FlexibleCodeField[Idx].Code = LocalVertexDistributionAccount.FinanceDimension8
								else    
								if (each.ExternalValue.ValueIs.FinanceDimension9)
									invoked.FlexibleFields.FlexibleCodes.FlexibleCodeField[Idx].Code = LocalVertexDistributionAccount.FinanceDimension9
								else    
								if (each.ExternalValue.ValueIs.FinanceDimension10) 
									invoked.FlexibleFields.FlexibleCodes.FlexibleCodeField[Idx].Code = LocalVertexDistributionAccount.FinanceDimension10
								else    
									invoked.FlexibleFields.FlexibleCodes.FlexibleCodeField[Idx].Code = each.Code  






						Idx = 0
						for each TaxAttributesRel.VertexFlexibleFieldsRel.VertexFlexibleNumericRel

							if (each.NumericValue entered            
							or  each.ExternalValue entered)
								Idx +=1   
								invoked.FlexibleFields.FlexibleNumbers.FlexibleNumericField[Idx].FieldId = each.VertexFlexibleNumeric.FieldId 
								if (each.ExternalValue.ValueIs.Company)
									invoked.FlexibleFields.FlexibleNumbers.FlexibleNumericField[Idx].NumericValue = Company
								else    
								if (each.ExternalValue.ValueIs.GLAccount)
									invoked.FlexibleFields.FlexibleNumbers.FlexibleNumericField[Idx].NumericValue = LocalVertexDistributionAccount.GeneralLedgerChartAccount
								else    
								if (each.ExternalValue.ValueIs.UnitCost)
									invoked.FlexibleFields.FlexibleNumbers.FlexibleNumericField[Idx].NumericValue = UnitCost
									invoked.FlexibleFields.FlexibleNumbers.FlexibleNumericField[Idx].NumberOfDecimals = 8 
								else    
									invoked.FlexibleFields.FlexibleNumbers.FlexibleNumericField[Idx].NumericValue = each.NumericValue  







						Idx = 0
						for each TaxAttributesRel.VertexFlexibleFieldsRel.VertexFlexibleDateRel

							if (each.DateValue entered            
							or  each.ExternalValue entered)
								Idx +=1   
								invoked.FlexibleFields.FlexibleDates.FlexibleDateField[Idx].FieldId = each.VertexFlexibleDate.FieldId 
								if (each.ExternalValue.ValueIs.PostingDate)
									if (RequestedDeliveryDate entered)	
										invoked.FlexibleFields.FlexibleDates.FlexibleDateField[Idx].DateValue	= RequestedDeliveryDate
									else
										invoked.FlexibleFields.FlexibleDates.FlexibleDateField[Idx].DateValue	= Requisition.CreationDate
								else    
								if (each.ExternalValue.ValueIs.TaxDate)
									if (RequestedDeliveryDate entered)	
										invoked.FlexibleFields.FlexibleDates.FlexibleDateField[Idx].DateValue	= RequestedDeliveryDate
									else
										invoked.FlexibleFields.FlexibleDates.FlexibleDateField[Idx].DateValue	= Requisition.CreationDate
								else    
									invoked.FlexibleFields.FlexibleDates.FlexibleDateField[Idx].DateValue = each.DateValue  





		LoadVertexOneCall
			if (TaxEntityRel.ThirdParty.VertexOSeries)
				CalculateTax.CallingModule				= "Requisitions"
				CalculateTax.System						= "RQ"
				CalculateTax.InFinanceEnterpriseGroup	= GeneralLedgerCompanyForCompanyRel.FinanceEnterpriseGroup
				CalculateTax.TaxEntity					= Company.AccountingEntity
				CalculateTax.InvoiceCompany				= Company
				CalculateTax.ProcessLevel				= RequestingLocation.ProcessLevel
				CalculateTax.Invoice					= Requisition
				if (Requisition.DropshipAddress not entered)
					CalculateTax.PostalAddress			= Requisition.FromCompanyLocation.FromLocation.PostalAddressForPurchaseOrder	 	
				else
					CalculateTax.PostalAddress			= Requisition.DropshipAddress
				CalculateTax.Vendor						= Vendor

				if (PurchaseFromLocation entered
				and PurchaseFromLocation.CurrentAddressRelExists)
					CalculateTax.POAAddress				= PurchaseFromLocation.VendorAddress	 	
				else
					CalculateTax.POAAddress				= Vendor.VendorAddress

				if (PurchaseFromLocation entered
				and PurchaseFromLocation.CurrentAddressRelExists)
					CalculateTax.FromPostalAddress		= PurchaseFromLocation.VendorAddress 
				else
					CalculateTax.FromPostalAddress		= Vendor.VendorAddress		
				CalculateTax.BypassEditing				= true

		VertexFlexibleFields
			if (TaxEntityRel.ThirdParty.VertexOSeries)

				if  (ItemType.Inventoried)
					LocalVertexDistributionAccount 			= ItemLocationRel.GeneralLedgerCategory.InventoryAccount 
				else
					LocalVertexDistributionAccount    		= first RequisitionLineDistributionsRel.DistributionAccount

				if (PurchaseFromLocation entered
				and PurchaseFromLocation.CurrentAddressRelExists)
					CalculateTax.POAAddress					= PurchaseFromLocation.VendorAddress	 	

				else
				if (Vendor entered)
					CalculateTax.POAAddress					= Vendor.VendorAddress

				else 
					CalculateTax.POAAddress					= Requisition.FromCompanyLocation.FromLocation.PostalAddressForPurchaseOrder	 	


				if  (ItemType.Inventoried or ItemType.NonStock)
					CalculateTax.ProductClass               = Item.MajorPurchasingClass 
				CalculateTax.CostCenter                     = LocalVertexDistributionAccount.AccountingUnit    
				if (RequestedDeliveryDate entered)
					CalculateTax.PostDate					= RequestedDeliveryDate
				else
					CalculateTax.PostDate					= Requisition.CreationDate
				CalculateTax.GeneralLedgerAccount 			= LocalVertexDistributionAccount.GeneralLedgerChartAccount 

				if (IsHSNSACCodeEnabled)
					CalculateTax.CommodityCodeType      	= "HSN"
					CalculateTax.HSNSACCode					= HSNSACCode 
				else 
					CalculateTax.CommodityCodeType      	= "UNSPSC"
					CalculateTax.UNSPSCCode					= UNSPSCCode.UNSPSCCodeDisplay 

				if (TaxAttributesRel.VertexFlexibleFieldExist)



					Idx = 0

					for each TaxAttributesRel.VertexFlexibleFieldsRel.VertexFlexibleCodeRel

						if (each.Code entered            
						or  each.ExternalValue entered)
							Idx +=1   
							CalculateTax.VertexAttributes.VertexCodes.FlexibleCode[Idx].FieldId = each.VertexFlexibleCode.FieldId
							CalculateTax.VertexAttributes.VertexCodes.FlexibleCode[Idx].ExternalValue = each.ExternalValue     
							if (each.ExternalValue.ValueIs.TaxEntity)
								CalculateTax.VertexAttributes.VertexCodes.FlexibleCode[Idx].Code = Company.AccountingEntity
							else    
							if (each.ExternalValue.ValueIs.Company)
								CalculateTax.VertexAttributes.VertexCodes.FlexibleCode[Idx].Code = Company
							else    
							if (each.ExternalValue.ValueIs.Vendor)
								CalculateTax.VertexAttributes.VertexCodes.FlexibleCode[Idx].Code = Vendor
							else    
							if (each.ExternalValue.ValueIs.PostingDate)
								CalculateTax.VertexAttributes.VertexCodes.FlexibleCode[Idx].Code = CalculateTax.PostDate
							else    
							if (each.ExternalValue.ValueIs.TaxDate)
								CalculateTax.VertexAttributes.VertexCodes.FlexibleCode[Idx].Code = CalculateTax.PostDate
							else    
							if (each.ExternalValue.ValueIs.AccountingUnit)
								CalculateTax.VertexAttributes.VertexCodes.FlexibleCode[Idx].Code = LocalVertexDistributionAccount.AccountingUnit 
							else    
							if (each.ExternalValue.ValueIs.GLAccount)
								CalculateTax.VertexAttributes.VertexCodes.FlexibleCode[Idx].Code = LocalVertexDistributionAccount.GeneralLedgerChartAccount
							else    
							if (each.ExternalValue.ValueIs.Location)
								CalculateTax.VertexAttributes.VertexCodes.FlexibleCode[Idx].Code = FromCompanyLocationBin.FromLocation 
							else    
							if (each.ExternalValue.ValueIs.Currency)
								CalculateTax.VertexAttributes.VertexCodes.FlexibleCode[Idx].Code = TransactionCurrencyCode
							else    






							if (each.ExternalValue.ValueIs.UnitCost)
								CalculateTax.VertexAttributes.VertexCodes.FlexibleCode[Idx].Code = UnitCost
							else    



							if (each.ExternalValue.ValueIs.ContractType)
								CalculateTax.VertexAttributes.VertexCodes.FlexibleCode[Idx].Code = LocalVertexDistributionAccount.Project.ProjectInEnterpriseStructureRel.ParentProject.ProjectContract.ContractType
							else    
							if (each.ExternalValue.ValueIs.WorkType)
								CalculateTax.VertexAttributes.VertexCodes.FlexibleCode[Idx].Code = LocalVertexDistributionAccount.Project.ProjectInEnterpriseStructureRel.ParentProject.WorkType
							else    
							if (each.ExternalValue.ValueIs.AccountSubType)
								CalculateTax.VertexAttributes.VertexCodes.FlexibleCode[Idx].Code = LocalVertexDistributionAccount.GeneralLedgerChartAccount.AccountSubType
							else    
							if (each.ExternalValue.ValueIs.ServiceType)
								CalculateTax.VertexAttributes.VertexCodes.FlexibleCode[Idx].Code = LocalVertexDistributionAccount.Project.ProjectInEnterpriseStructureRel.ParentProject.ServiceType
							else    
							if (each.ExternalValue.ValueIs.CommodityCode)
								CalculateTax.VertexAttributes.VertexCodes.FlexibleCode[Idx].Code = DerivedCommodityCodeNoDash
							else    
							if (each.ExternalValue.ValueIs.UNSPSC)
								CalculateTax.VertexAttributes.VertexCodes.FlexibleCode[Idx].Code = UNSPSCCode.UNSPSCCodeDisplay
							else    
							if (each.ExternalValue.ValueIs.ProductTaxCatagory)
								CalculateTax.VertexAttributes.VertexCodes.FlexibleCode[Idx].Code = ProductTaxCategory
							else    


















							if (each.ExternalValue.ValueIs.UsageType)			
								CalculateTax.VertexAttributes.VertexCodes.FlexibleCode[Idx].Code = LocalVertexDistributionAccount.Project.ProjectInEnterpriseStructureRel.ParentProject.UsageType
							else 
							if (each.ExternalValue.ValueIs.CustomerType)			
								CalculateTax.VertexAttributes.VertexCodes.FlexibleCode[Idx].Code = LocalVertexDistributionAccount.Project.ProjectInEnterpriseStructureRel.ParentProject.ProjectContract.ProjectFundingSourceRel.CustomerType
							else 
							if (each.ExternalValue.ValueIs.Project)				
								CalculateTax.VertexAttributes.VertexCodes.FlexibleCode[Idx].Code = LocalVertexDistributionAccount.Project
							else 
							if (each.ExternalValue.ValueIs.Longitude)				
								CalculateTax.VertexAttributes.VertexCodes.FlexibleCode[Idx].Code = FromCompanyLocationBin.FromLocation.PostalAddress.GeoLongitude
							else 
							if (each.ExternalValue.ValueIs.Latitude)			
								CalculateTax.VertexAttributes.VertexCodes.FlexibleCode[Idx].Code = FromCompanyLocationBin.FromLocation.PostalAddress.GeoLatitude
							else 
							if (each.ExternalValue.ValueIs.Altitude)									
								CalculateTax.VertexAttributes.VertexCodes.FlexibleCode[Idx].Code = FromCompanyLocationBin.FromLocation.PostalAddress.GeoAltitude
							else 
							if (each.ExternalValue.ValueIs.ToAccountingEntity)
								CalculateTax.VertexAttributes.VertexCodes.FlexibleCode[Idx].Code = LocalVertexDistributionAccount.ToAccountingEntity
							else    
							if (each.ExternalValue.ValueIs.FinanceDimension1)
								CalculateTax.VertexAttributes.VertexCodes.FlexibleCode[Idx].Code = LocalVertexDistributionAccount.FinanceDimension1
							else    
							if (each.ExternalValue.ValueIs.FinanceDimension2)
								CalculateTax.VertexAttributes.VertexCodes.FlexibleCode[Idx].Code = LocalVertexDistributionAccount.FinanceDimension2
							else    
							if (each.ExternalValue.ValueIs.FinanceDimension3)
								CalculateTax.VertexAttributes.VertexCodes.FlexibleCode[Idx].Code = LocalVertexDistributionAccount.FinanceDimension3
							else    
							if (each.ExternalValue.ValueIs.FinanceDimension4)
								CalculateTax.VertexAttributes.VertexCodes.FlexibleCode[Idx].Code = LocalVertexDistributionAccount.FinanceDimension4
							else    
							if (each.ExternalValue.ValueIs.FinanceDimension5)
								CalculateTax.VertexAttributes.VertexCodes.FlexibleCode[Idx].Code = LocalVertexDistributionAccount.FinanceDimension5
							else    
							if (each.ExternalValue.ValueIs.FinanceDimension6)
								CalculateTax.VertexAttributes.VertexCodes.FlexibleCode[Idx].Code = LocalVertexDistributionAccount.FinanceDimension6
							else    
							if (each.ExternalValue.ValueIs.FinanceDimension7)
								CalculateTax.VertexAttributes.VertexCodes.FlexibleCode[Idx].Code = LocalVertexDistributionAccount.FinanceDimension7
							else    
							if (each.ExternalValue.ValueIs.FinanceDimension8)
								CalculateTax.VertexAttributes.VertexCodes.FlexibleCode[Idx].Code = LocalVertexDistributionAccount.FinanceDimension8
							else    
							if (each.ExternalValue.ValueIs.FinanceDimension9)
								CalculateTax.VertexAttributes.VertexCodes.FlexibleCode[Idx].Code = LocalVertexDistributionAccount.FinanceDimension9
							else    
							if (each.ExternalValue.ValueIs.FinanceDimension10) 
								CalculateTax.VertexAttributes.VertexCodes.FlexibleCode[Idx].Code = LocalVertexDistributionAccount.FinanceDimension10
							else    
								CalculateTax.VertexAttributes.VertexCodes.FlexibleCode[Idx].Code = each.Code  






					Idx = 0
					for each TaxAttributesRel.VertexFlexibleFieldsRel.VertexFlexibleNumericRel

						if (each.NumericValue entered            
						or  each.ExternalValue entered)
							Idx +=1   
							CalculateTax.VertexAttributes.VertexNumerics.FlexibleNumeric[Idx].FieldId = each.VertexFlexibleNumeric.FieldId 
							CalculateTax.VertexAttributes.VertexNumerics.FlexibleNumeric[Idx].ExternalValue = each.ExternalValue     
							if (each.ExternalValue.ValueIs.Company)
								CalculateTax.VertexAttributes.VertexNumerics.FlexibleNumeric[Idx].NumericValue = Company
							else    
							if (each.ExternalValue.ValueIs.GLAccount)
								CalculateTax.VertexAttributes.VertexNumerics.FlexibleNumeric[Idx].NumericValue = LocalVertexDistributionAccount.GeneralLedgerChartAccount
							else    




							if (each.ExternalValue.ValueIs.UnitCost)
								CalculateTax.VertexAttributes.VertexNumerics.FlexibleNumeric[Idx].NumericValue = UnitCost
								CalculateTax.VertexAttributes.VertexNumerics.FlexibleNumeric[Idx].NumberOfDecimals = 5 
							else    
								CalculateTax.VertexAttributes.VertexNumerics.FlexibleNumeric[Idx].NumericValue = each.NumericValue  







					Idx = 0
					for each TaxAttributesRel.VertexFlexibleFieldsRel.VertexFlexibleDateRel

						if (each.DateValue entered            
						or  each.ExternalValue entered)
							Idx +=1   
							CalculateTax.VertexAttributes.VertexDates.FlexibleDate[Idx].FieldId = each.VertexFlexibleDate.FieldId 
							CalculateTax.VertexAttributes.VertexDates.FlexibleDate[Idx].ExternalValue = each.ExternalValue     
							if (each.ExternalValue.ValueIs.PostingDate)
								CalculateTax.VertexAttributes.VertexDates.FlexibleDate[Idx].DateValue = CalculateTax.PostDate
							else    



							if (each.ExternalValue.ValueIs.TaxDate)
								CalculateTax.VertexAttributes.VertexDates.FlexibleDate[Idx].DateValue = CalculateTax.PostDate
							else    
								CalculateTax.VertexAttributes.VertexDates.FlexibleDate[Idx].DateValue = each.DateValue  





		UpdateContractInformation
			if (HasContractWithLifetimeEdit)
				
				invoke UpdateAmountsAndQuantities ContractLine
					if (ProcurementGroupRel.RequisitionCommitmentDate.LineEarlyDeliveryDate
					and RequisitionLine.RequestedDeliveryDate entered)
						invoked.InDate	= RequisitionLine.RequestedDeliveryDate
					else
						invoked.InDate   = Requisition.CreationDate
					invoked.InCurrency			= TransactionCurrencyCode
					invoked.InRequestedAmount	= InterfaceCancelQuantity * TransactionUnitCost * -1
					invoked.InTaxAmount         = AccruedTaxAmount + InvoicedTaxAmount * -1
					invoked.InAddOnChargeAmount = LineAddOnChargeTotal * -1
					invoked.InUOM				= EnteredUOM
					invoked.InQuantity			= Quantity * -1

		CheckDistributionByFromDistributionCode
			if (DistributionCode.TotalDistributionAmount entered)
				constraint (DistributionCode.TotalPercent not entered)
					"CanEitherEnterDistributionPercentOrDistributionAmount"
				DistributionBy = DistributionBy.ByAmount
			else
				if (DistributionCode.TotalPercent entered)
					DistributionBy = DistributionBy.ByPercent

		ConvertUOM 
			initialize LocalEnteredUOM
			if (EnteredUOM entered
			and CreatePurchaseOrder and IsInventoryOrNonstock
			and ItemLocationRel.DefaultSourceUOM.UnitOfMeasure not entered)
				if (HasItemLocationStockUOM)
					if (VendorItem.VendorBuyUOM.UnitOfMeasure entered
					and EnteredUOM != VendorItem.VendorBuyUOM.UnitOfMeasure)
						LocalEnteredUOM = VendorItem.VendorBuyUOM.UnitOfMeasure
					else
					if (ParCountProcessing			
					and DerivedOrderUOMRounding 	
					and not LocationItemUOMRel.OKForBuying)
						LocalEnteredUOM = DerivedRoundToUOM
				else
					if (VendorItem.VendorBuyUOM.UnitOfMeasure entered
					and EnteredUOM != VendorItem.VendorBuyUOM.UnitOfMeasure)
						LocalEnteredUOM = VendorItem.VendorBuyUOM.UnitOfMeasure
					else
						if (not ItemUOMRel.OKForBuying
						and EnteredUOM not = Item.DefaultBuyUOM)
							LocalEnteredUOM = Item.DefaultBuyUOM

				if (LocalEnteredUOM entered)
					initialize UOMCalculation
					UOMCalculation.InputUOM      = EnteredUOM
					UOMCalculation.InputToUOM    = LocalEnteredUOM
					UOMCalculation.InputQuantity = DerivedLineQuantity
					UOMCalculation.InputUnitCost = TransactionUnitCost
					UOMCalculation.Method        = UOMCalculation.Method.ConvertToAlternate
					if (HasItemLocationStockUOM)
						UOMCalculation.DoRounding 	 = true
						if (not LocalBypassQuantityConversion)
							Quantity 				 = UOMCalculation.OutputQuantity
					else
						if (Item.NumberOfDecimalsQuantity.0Decimals)
							UOMCalculation.ValidateDecimal = true
						if (not LocalBypassQuantityConversion)
							Quantity 				 = UOMCalculation.OutputQuantity
					initialize LocalBypassQuantityConversion
					EnteredUOM                   = LocalEnteredUOM
					EnteredUOMMultiplier         = UOMCalculation.ConvertToUOMConversion
					UnitCost                     = UOMCalculation.OutputUnitCost
					TransactionUnitCost          = UOMCalculation.OutputUnitCost

		ConvertParCount
			initialize LocalEnteredUOM
			if (IsReplenishmentFromVendor)
				if (HasItemLocationStockUOM)
					if (DefaultVendorItemRel.VendorBuyUOM.UnitOfMeasure entered)
						if (EnteredUOM not = DefaultVendorItemRel.VendorBuyUOM.UnitOfMeasure) 
							LocalEnteredUOM = DefaultVendorItemRel.VendorBuyUOM.UnitOfMeasure
							constraint (LocationItemUOMForLocalStockUOMRel.OKForBuying)
								"DefaultVendorItemBuyUnitOfMeasureOf<VendorItem.VendorBuyUOM.UnitOfMeasure>IsNotAValidUOMOnTheLocation"
					else
					if (not LocationItemUOMRel.OKForBuying)
						constraint (DerivedOrderUOMRounding)
							"<EnteredUOM>IsNotValidBuyingUnitOfMeasureOnLocationForThisItem<Item>"
						LocalEnteredUOM = DerivedLocationStockUOM 

				else
					if (DefaultVendorItemRel.VendorBuyUOM.UnitOfMeasure entered 
					and EnteredUOM != DefaultVendorItemRel.VendorBuyUOM.UnitOfMeasure)
						LocalEnteredUOM = DefaultVendorItemRel.VendorBuyUOM.UnitOfMeasure
					else
						if (not ItemUOMRel.OKForBuying
						and EnteredUOM != Item.DefaultBuyUOM)
							LocalEnteredUOM = Item.DefaultBuyUOM
					
				if (LocalEnteredUOM entered)
					initialize UOMCalculation
					UOMCalculation.InputUOM      = EnteredUOM
					UOMCalculation.InputToUOM    = LocalEnteredUOM
					UOMCalculation.InputQuantity = LocalCountQuantity
					UOMCalculation.Method        = UOMCalculation.Method.ConvertToAlternate
					if (HasItemLocationStockUOM)
						UOMCalculation.DoRounding 	 = true
						LocalCountQuantity	 	 = UOMCalculation.OutputQuantity



					else
						if (Item.NumberOfDecimalsQuantity.0Decimals)
							UOMCalculation.ValidateDecimal = true
						LocalCountQuantity 		 = UOMCalculation.OutputQuantity
					EnteredUOM                   = LocalEnteredUOM
					EnteredUOMMultiplier         = UOMCalculation.ConvertToUOMConversion
			Quantity = LocalCountQuantity

		CreateRequisitionLineDistributionError 

			LocalTransactionCodeBlock.Ledger = GeneralLedgerCompanyForCompanyRel.FinanceEnterpriseGroup.CoreLedger

			LocalTransactionCodeBlock.FinanceCodeBlockArray.Block[AccountDefaultingComponentPO.ContractLine]				= first ContractLineDistributionsRel.ContractLineDistribution.DistributionAccount
			if (ContractParticipantByCompanyRel exists)
					LocalTransactionCodeBlock.FinanceCodeBlockArray.Block[AccountDefaultingComponentRQ.ContractParticipant] = ContractParticipantByCompanyRel.AccountingUnit
			else
				if (ContractParticipantByLocationRel exists)
					LocalTransactionCodeBlock.FinanceCodeBlockArray.Block[AccountDefaultingComponentRQ.ContractParticipant] = first ContractParticipantByLocationRel.AccountingUnit
				else
					if (ContractParticipantByRequestingLocationRel exists)
						LocalTransactionCodeBlock.FinanceCodeBlockArray.Block[AccountDefaultingComponentRQ.ContractParticipant] = first ContractParticipantByRequestingLocationRel.AccountingUnit

			if (RequestingLocation.ParLocation)
				LocalTransactionCodeBlock.FinanceCodeBlockArray.Block[AccountDefaultingComponentRQ.ParLocation] 			= RequestingLocation.InventoryLocationRel.GeneralLedgerCategoryForCopyFromRel.IssueAccount
			LocalTransactionCodeBlock.FinanceCodeBlockArray.Block[AccountDefaultingComponentRQ.ProcurementTemplateLine] 	= TemplateAccount
			LocalTransactionCodeBlock.FinanceCodeBlockArray.Block[AccountDefaultingComponentRQ.RequisitionHeader]			= Requisition.DefaultDistributionAccount
			LocalTransactionCodeBlock.FinanceCodeBlockArray.Block[AccountDefaultingComponentRQ.RequestingLocation]			= RequestingLocation.IssueAccount
			if (IsInventoryOrNonstock)
				LocalTransactionCodeBlock.FinanceCodeBlockArray.Block[AccountDefaultingComponentRQ.FromLocation]				= ItemLocationRel.GeneralLedgerCategory.IssueAccount
				LocalTransactionCodeBlock.FinanceCodeBlockArray.Block[AccountDefaultingComponentRQ.Item]						= Item.IssueAccount

			LocalExecute = LocalTransactionCodeBlock.StructureCodeDefault
			LocalDefaultedDistribution = LocalTransactionCodeBlock

			if (RequisitionLineDistributionErrorRel exists) 
				invoke Update first RequisitionLineDistributionErrorRel
					invoked.DefaultedDistribution = LocalDefaultedDistribution
					if (LocalDistributionErrorMessage[1:7] = "Warning")
						invoked.ErrorMessageNumber = 999
					else
						invoked.ErrorMessage = LocalDistributionErrorMessage
			else
				invoke Create RequisitionLineError
					fill in fields from this instance
					invoked.ErrorType = RequisitionLineError.ErrorType.Distribution
					invoked.DefaultedDistribution = LocalDefaultedDistribution
					if (LocalDistributionErrorMessage[1:7] = "Warning")
						invoked.ErrorMessageNumber = 999
					else
						invoked.ErrorMessage = LocalDistributionErrorMessage

		RequisitionLineDistributionAccountDefaulting
			if (!DistributionFromInterfaceImport)
				invoke Create RequisitionLineDistribution
					resume on error
						LocalDistributionErrorMessage = error message
					fill in fields from this instance
					invoked.TransientBypassCommittedContractValidation 	= true
					if (EnteredGLEncumbranceReference entered)
						invoked.GLEncumbranceReference = EnteredGLEncumbranceReference

				if (LocalDistributionErrorMessage entered)
					include CreateRequisitionLineDistributionError
				initialize DistributionTotalsComputed

		DistributionTotals
			if (not DistributionTotalsComputed)
				for each RequisitionLineDistributionsRel
					LocalTotalDistributionQuantity	+= each.DistributionQuantity
					LocalTotalDistributionAmount	+= each.DistributionAmount
					LocalTotalDistributionPercent	+= each.DistributionPercent
				DistributionTotalsComputed = true

		SetInventoryCostValues
			CostCode = CostCode.InventoryCost
			if (!CreatePurchaseOrder)
				initialize Contract
				initialize ContractLine
				initialize Vendor
				initialize VendorItem
				initialize PurchaseFromLocation

		InventoryCostDefaulting 
			if (LocalCurrentQuantity > each.CalculatedUnusedQuantity)
				LocalInventoryCost 	 += each.CalculatedUnusedQuantity * each.UnitCost
				LocalTotalQuantity 	 += each.CalculatedUnusedQuantity
				LocalCurrentQuantity -= each.CalculatedUnusedQuantity
			else
				LocalInventoryCost 	 += LocalCurrentQuantity * each.UnitCost
				LocalTotalQuantity 	 += LocalCurrentQuantity
				LocalCurrentQuantity  = 0

		ValidateContract
			if (Contract entered)
				invoke ValidateContract Contract
					if (LocalRelease)
						invoked.EditDate		= current corporate date
					else
						invoked.EditDate		= DerivedCreationDate
					invoked.Source            = 1   
					invoked.PrmVendor         = Vendor
					if (ContractHasVendorLocation)
						invoked.PrmVendorLocation = VendorLocationRel.VendorLocation
					if (Requisition.RequestingLocation.Stockless)
						invoked.PrmStockless  = true
					invoked.PrmSource           = DerivedFormTitle

				if (Contract.ApPoPurchaseFrom entered)
					if (not LocalBypassVendorLocationValidation)
						constraint (PurchaseFromLocationMatchesContract)
							"PurchaseFromLocationDoesNotMatchVendorLocation<Contract.ApPoPurchaseFrom.PurchaseFromLocation><Contract.ApPoPurchaseFrom.VendorLocation>OnContract<Contract>"

				initialize LocalBypassVendorLocationValidation	

		UnitCostDefaulting
			ProcurementCostDefault.InCompany					= FromCompanyLocationBin.FromCompany 
			ProcurementCostDefault.InRequestingCompany			= Requisition.Company 
			ProcurementCostDefault.InItem						= Item
			ProcurementCostDefault.InQuantity					= Quantity
			ProcurementCostDefault.InItemType					= ItemType
			ProcurementCostDefault.InQuantityUOM				= EnteredUOM
			ProcurementCostDefault.InCostOption					= CostOption
			ProcurementCostDefault.Requisition					= Requisition
			ProcurementCostDefault.InVendor						= Vendor
			ProcurementCostDefault.InVendorItem					= VendorItem
			ProcurementCostDefault.InDate						= current corporate date
			ProcurementCostDefault.InLocation					= FromCompanyLocationBin.FromLocation
			ProcurementCostDefault.InRequestingLocation			= RequestingLocation
			if (IsInventoryOrNonstock)
				ProcurementCostDefault.InStockless				= RequestingLocation.Stockless
			else
				ProcurementCostDefault.InIgnoreStockless		= true
			ProcurementCostDefault.InPurchaseFromLocation		= PurchaseFromLocation
			ProcurementCostDefault.InDescription				= Description
			ProcurementCostDefault.InServiceCode				= ServiceCode
			if (not SourcingEventRequired)
				ProcurementCostDefault.InContractGroup				= Contract.ContractGroup
				ProcurementCostDefault.InContract					= Contract
				ProcurementCostDefault.InContractLine				= ContractLine
			ProcurementCostDefault.InTier						= Tier
			ProcurementCostDefault.InPreference					= Preferred
			ProcurementCostDefault.InManufacturerCode			= Manufacturer.ManufacturerCode
			ProcurementCostDefault.InManufacturerDivision		= Manufacturer.ManufacturerDivision
			ProcurementCostDefault.InManufacturerNumber			= ManufacturerNumber
			ProcurementCostDefault.InOverrideCost				= OverrideCost
			ProcurementCostDefault.InProcurementGroup			= FromCompanyRel.ProcurementGroup
			ProcurementCostDefault.InDoUpdates					= true
			ProcurementCostDefault.InRequisitionCurrencyCode	= TransactionCurrencyCode
			ProcurementCostDefault.InBypassQuantityConversion	= LocalBypassQuantityConversion
			if (CapitatedComponentGroup entered
			or  CapitatedProcedureLevel entered)
				ProcurementCostDefault.InCapitatedContract      = true 
			ProcurementCostDefault.InCapitatedProcedureLine     = CapitatedProcedureLine    
			ProcurementCostDefault.InCapitatedComponentGroup    = CapitatedComponentGroup 
			ProcurementCostDefault.InCapitatedProcedureLevel    = CapitatedProcedureLevel
			ProcurementCostDefault.InDoDebug					= DoDebug
			if (LocalCopyRequisition)
				ProcurementCostDefault.InDoNotIgnoreNoCharge	= true
			if (CreatePurchaseOrder)
				if (CostCode.Entered)
					ProcurementCostDefault.InUnitCost					= TransactionUnitCost 
			else
				if (ItemType.Inventoried)
					ProcurementCostDefault.InBypassUseContractUOM = true
					if (not ItemLocationRel.NoCharge)
						ProcurementCostDefault.InSkipZeroCostContractLine	= true

			if (DoDebug)
				display "RQL:Contract:<Contract>:ContractLine:<ContractLine>"
				display "RQL:CallProcurementCostDefault.DefaultUnitCost"

			Execute	= ProcurementCostDefault.DefaultUnitCost

			if (ProcurementCostDefault.InStockless)
				if (not ProcurementCostDefault.LocalFoundCost)
					initialize ProcurementCostDefault.InStockless
					Execute	= ProcurementCostDefault.DefaultUnitCost

			if (Contract changed and TransactionUnitCost entered
			and not Contract.AllowReferenceOfItemsNotOnContract)
				constraint (Contract not entered) 
					"CannotChangeContractWhileUnitCostIsEntered"



			if	(CostCode.Entered
			and	(not ItemType.Service or ServiceCode.Quantity))
				if (CreatePurchaseOrder)
					if ((action type.Create and ProcurementCostDefault.LastCostOrPO)
					or  old CostCode.LastPoCreated or old CostCode.LastCost)
						constraint (Requisition.Requester.OverrideLastPOLastCost)
							"RequesterNotAuthorizedToChangeUnitCostFromLastCostOrLastPO"

					if  (ProcurementCostDefault.CostCodeFromContracts
					and  Requisition.Requester entered 
					and (action type.Create or OldCostCodeFromContracts))
						constraint (Requisition.Requester.OverrideContractCost)
							"RequesterNotAuthorizedToChangeUnitCostFromContracts"
						initialize Contract
						initialize ContractLine
						initialize Preferred
						initialize Tier

					if (not Contract.AllowReferenceOfItemsNotOnContract
					and !LocalFromCapitatedSwap
					and !IsACapitatedProcedure
					and CapitatedComponentGroup !entered)
						constraint (Contract not entered)
							"CannotEnterBothUnitCostAndContract"

					if (ProcurementCostDefault.OutputNoCharge)
						initialize TransactionUnitCost
						CostOption = ProcurementCostDefault.OutputCostOption
						CostCode   = ProcurementCostDefault.OutputCostCode

			else 
				if   (LocalCopyRequisition
				and ((Requisition.Requester.OverrideContractCost 	and ProcurementCostDefault.CostCodeFromContracts)
				or   (Requisition.Requester.OverrideLastPOLastCost 	and ProcurementCostDefault.LastCostOrPO)
				or	 (not ProcurementCostDefault.LocalFoundCost)))
					CostCode = CostCode.Entered 
				else
					if (TransactionUnitCost entered and ServiceCode.Amount)
						if (ProcurementCostDefault.OutputContractLine.BaseCost entered)
							constraint (TransactionUnitCost <= ProcurementCostDefault.OutputContractLine.BaseCost) 
								"UnitCostForAmountServiceItemMustNotExceedContractLineBaseCost"
					else
						LocalDefaultedCost         = ProcurementCostDefault.OutputUnitCost

					if (SourcingEventRequired
					and (Contract = ProcurementCostDefault.OutputContract
					or   Contract not entered))
						LocalContractWouldDefault = true

					CostOption              = ProcurementCostDefault.OutputCostOption
					CostCode                = ProcurementCostDefault.OutputCostCode
					LocalEnteredUOM 		= EnteredUOM
					EnteredUOM				= ProcurementCostDefault.OutputCostUOM
					if (ItemUOMRel exists and EnteredUOM not = LocalEnteredUOM)
						EnteredUOMMultiplier = ItemUOMRel.UOMConversion
					Contract                = ProcurementCostDefault.OutputContract
					Tier                    = ProcurementCostDefault.OutputMfgContractTierInfo
					Preferred               = ProcurementCostDefault.OutputPreference
					ContractLine            = ProcurementCostDefault.OutputContractLine
					LocalDefaultedCurrency	= ProcurementCostDefault.OutputCurrencyCode
					Vendor					= ProcurementCostDefault.OutputVendor
					VendorItem				= ProcurementCostDefault.OutputVendorItem
					if (PurchasingVendorRel.GTINInUse and VendorItem entered)
						initialize ItemGTIN
					if (LocalBlankVendorLocation
					and ProcurementCostDefault.LocalPurchaseFromLocation not entered)
						initialize PurchaseFromLocation
					else
						PurchaseFromLocation = ProcurementCostDefault.OutputPurchaseFromLocation
					LocalFoundCost			= ProcurementCostDefault.LocalFoundCost
					Quantity				= ProcurementCostDefault.OutputQuantity

			if (FromCompanyRel.CostOrVendorDefaultingOrder.CostFirstThenVendor)
				include VendorDefaulting


			if  (Requisition.Requester.RequireVendorForSpecials
			and  not SourcingEventRequired
			and  ItemType.Special
			and  not TransientBypassVendor)
				constraint (Vendor entered)
					"RequesterSetup:VendorIsRequiredForSpecialTypeItems"
			if  (Requisition.Requester.RequireVendorForServices
			and  not SourcingEventRequired
			and  ItemType.Service
			and  not TransientBypassVendor)
				constraint (Vendor entered)
					"RequesterSetup:VendorIsRequiredForServiceTypeItems"

			if (CreatePurchaseOrder
			and IsInventoryOrNonstock)
				include VendorUOMAndSourceUOMValidation

			if (Contract entered)
				include ValidateContract

			if (ContractLine entered)
				if (ContractLineTaxableRequestingLocationRel exists)
					if (first ContractLineTaxableRequestingLocationRel.Taxable = 1) 
						PurchaseTaxable = true
						TaxableDetermined = true
					else
					if (first ContractLineTaxableRequestingLocationRel.Taxable = 2) 
						PurchaseTaxable = false
						TaxableDetermined = true  
				
				if (ContractLineTaxableLocationRel exists
				and TaxableDetermined = false)
					if (first ContractLineTaxableLocationRel.Taxable = 1) 
						PurchaseTaxable = true
						TaxableDetermined = true 
					else
					if (first ContractLineTaxableLocationRel.Taxable = 2) 
						TaxableDetermined = true 

				if (ContractLineTaxableCompanyRel exists
				and TaxableDetermined = false)
					if (first ContractLineTaxableCompanyRel.Taxable = 1) 
						PurchaseTaxable = true
						TaxableDetermined = true 
					else
					if (first ContractLineTaxableCompanyRel.Taxable = 2) 
						TaxableDetermined = true 

				if (ContractLine.Taxable = true
				and TaxableDetermined = false)
					PurchaseTaxable = true	
					TaxableDetermined = true	
				if (ContractTaxableRequestingLocationRel exists
				and TaxableDetermined = false) 
					if (first ContractTaxableRequestingLocationRel.Taxable = 1)
						PurchaseTaxable = true
						TaxableDetermined = true 	
					else
					if (first ContractTaxableRequestingLocationRel.Taxable = 2)
						TaxableDetermined = true 		
				if (ContractTaxableLocationRel exists
				and TaxableDetermined = false)
					if (first ContractTaxableLocationRel.Taxable = 1)
						PurchaseTaxable = true
						TaxableDetermined = true 
					else
					if (first ContractTaxableLocationRel.Taxable = 2)
						TaxableDetermined = true 
				if (ContractTaxableCompanyRel exists
				and TaxableDetermined = false)
					if (first ContractTaxableCompanyRel.Taxable = 1)
						PurchaseTaxable = true
						TaxableDetermined = true 
					else
					if (first ContractTaxableCompanyRel.Taxable = 2)
						TaxableDetermined = true 
				if (PurchaseTaxable = true)
					if (ContractLineTaxCodeRequestingLocationRel.TaxCode entered)
						PurchaseTaxCode = ContractLineTaxCodeRequestingLocationRel.TaxCode
						TaxCodeDetermined = true
					if (first ContractLineTaxCodeLocationRel.TaxCode entered
					and TaxCodeDetermined = false)
						PurchaseTaxCode = first ContractLineTaxCodeLocationRel.TaxCode
						TaxCodeDetermined = true
					if (first ContractLineTaxCodeCompanyRel.TaxCode entered
					and TaxCodeDetermined = false)
						PurchaseTaxCode = first ContractLineTaxCodeCompanyRel.TaxCode
						TaxCodeDetermined = true
					if (ContractLine.TaxCode entered
					and TaxCodeDetermined = false)
						PurchaseTaxCode = ContractLine.TaxCode
						TaxCodeDetermined = true	
					if (first ContractTaxCodeRequestingLocationRel.TaxCode entered
					and TaxCodeDetermined = false)
						PurchaseTaxCode = first ContractTaxCodeRequestingLocationRel.TaxCode
						TaxCodeDetermined = true
					if (first ContractTaxCodeLocationRel.TaxCode entered
					and TaxCodeDetermined = false)
						PurchaseTaxCode = first ContractTaxCodeLocationRel.TaxCode
						TaxCodeDetermined = true
					if (first ContractTaxCodeCompanyRel.TaxCode entered
					and TaxCodeDetermined = false)
						PurchaseTaxCode = first ContractTaxCodeCompanyRel.TaxCode
			if (ItemType.Service)
				if (Quantity > 1
				and CostCode.Entered)
					ServiceCode		= ServiceCode.Quantity
				else
					ServiceCode		= ProcurementCostDefault.OutputServiceCode
				EnteredUOM			= ProcurementCostDefault.OutputCostUOM
			if (Description not entered
			and Item not exists)
				Description			= ProcurementCostDefault.OutputDescription


		CurrencyCodeDefaulting
			default TransactionCurrencyCode to VendorLocationRel.InvoiceCurrency
			default TransactionCurrencyCode to Vendor.InvoiceCurrency
			default TransactionCurrencyCode to Contract.CurrencyCode
			default TransactionCurrencyCode to VendorClassRel.Currency
			default TransactionCurrencyCode to Requisition.TransactionCurrencyCode
			default TransactionCurrencyCode to Requisition.BaseCurrencyCode


		CreateInterfaceOrDemand
			if (IsCreatePurchaseOrder)
				invoke Create PurchaseOrderInterface
					fill in fields from this instance
					invoked.Company											= FromCompanyLocationBin.FromCompany
					invoked.PurchaseOrderInterface.SourceDocumentOrigin		= "RQ"
					invoked.PurchaseOrderInterface.SourceDocumentNumeric	= Requisition
					invoked.PurchaseOrderInterface.OperatingCompany			= Company
					invoked.ProcurementGroup								= Company.ItemGroup
					invoked.PurchaseOrderInterface.RequestingLocation		= RequestingLocation
					invoked.PurchaseOrderInterface.LineNumber				= RequisitionLine
					invoked.TaxCode											= PurchaseTaxCode
					invoked.Taxable											= PurchaseTaxable
					invoked.VendorName										= Vendor.VendorName
					invoked.PatientProcedure								= PatientProcedure
					if (IsInventoryOrNonstock)
						invoked.MSDSRequired								= Item.MSDSRequired
					else
						invoked.MSDSRequired								= false
					invoked.EnteredUnitCost									= TransactionUnitCost
					invoked.EnteredUOM									 = EnteredUOM
					invoked.EnteredUOMMultiplier						 = EnteredUOMMultiplier
					invoked.OverrideCost                                 = OverrideCost
					invoked.ShipToLocation                               = FromCompanyLocationBin.FromLocation
					if (Requisition.OneSourceDocumentToOnePO.Yes)
						invoked.OneSourceDocumentToOnePO                 = true
					else
						invoked.OneSourceDocumentToOnePO                 = false
					invoked.UserDate3									 = UserDate3
					invoked.UserDate4									 = UserDate4
					invoked.PurchaseOrderUserField2						 = PurchaseOrderUserField2
					invoked.PurchaseOrderUserField4						 = PurchaseOrderUserField4
					invoked.PurchaseOrderUserField6						 = PurchaseOrderUserField6
					invoked.Confirming									 = Requisition.Confirming
					invoked.Dropship									 = Requisition.Dropship
					invoked.DropshipName                                 = Requisition.DropshipName
					invoked.DropshipAddress                              = Requisition.DropshipAddress
					invoked.DropshipPhoneNumber                          = Requisition.DropshipPhoneNumber
					invoked.DropshipContact                              = Requisition.DropshipContact
					invoked.PurchaseOrderBillToName                      = Requisition.PurchaseOrderBillToName
					invoked.PurchaseOrderBillToAddress						= Requisition.PurchaseOrderBillToAddress
					invoked.PurchaseOrderBillToContact                   = Requisition.PurchaseOrderBillToContact
					invoked.PurchaseOrderBillToPhoneNumber               = Requisition.PurchaseOrderBillToPhoneNumber
					invoked.PurchaseOrderBillToEmailAddress              = Requisition.PurchaseOrderBillToEmailAddress
					invoked.ShippingNotes								 = Requisition.ShippingNotes
					if (not IsIntercompany) 
						invoked.ProcessLevel                                 = RequestingLocation.ProcessLevel
					invoked.Requester                                    = Requisition.Requester
					invoked.SourcingEventWorksheet                       = SourcingEventRequired
					invoked.CnCode                                       = ConsignCode    
					invoked.CnvRate                                      = ConversionRate
					invoked.FilterByPurchasingClasses					 = Requisition.Buyer.FilterByPurchasingClasses
					invoked.FilterByVendors								 = Requisition.Buyer.FilterByVendors
					invoked.FilterByRequestingLocation					 = Requisition.Buyer.FilterByRequestingLocation
					invoked.FilterItemsWithNoVendor						 = Requisition.Buyer.FilterItemsWithNoVendor
					invoked.FilterItemsWithNoCost						 = Requisition.Buyer.FilterItemsWithNoCost
					invoked.PurchaseOrderUserField1						 = Requisition.PurchaseOrderUserField1
					invoked.PurchaseOrderUserField3						 = Requisition.PurchaseOrderUserField3
					invoked.PurchaseOrderUserField5						 = Requisition.PurchaseOrderUserField5
					invoked.UserDate1									 = Requisition.UserDate1
					invoked.UserDate2									 = Requisition.UserDate2
					invoked.Confirming									 = Requisition.Confirming
					invoked.AribaPOType									 = Requisition.AribaPOType
					invoked.QuoteNumber									 = Requisition.QuoteNumber
					invoked.E2GCompCode									 = E2GCompCode
					invoked.ExternalRequisition							 = Requisition.ExternalRequisition

			else
				invoke CreateWarehouseDemand


		CopyStandardCommentCode
			invoke Create RequisitionLineComment
				fill in fields from this instance
				invoked.CommentTitle 		= StandardCommentCodeRel.CommentName
				invoked.CommentType  		= StandardCommentCodeRel.StandardCommentPrintCode
				invoked.CommentText  		= StandardCommentCodeRel.CommentText
				invoked.Attachment.File 	= StandardCommentCodeRel.Attachment.File
				invoked.Attachment.MimeType = StandardCommentCodeRel.Attachment.MimeType
				invoked.Attachment.Title 	= StandardCommentCodeRel.Attachment.Title
			initialize StandardCommentCode

		CloseLine
			if (!Closed)
				Closed = true
				if (!LocalSkipCommitment)
					for each RequisitionLineDistribution set
						if (each.CurrentCommitmentExists)
							invoke UpdateGLCommitmentIndirect each
								if (TransientCancel = true)
									invoked.ApprovalReject = true
								if (LocalFromKilledQuantity)
									invoked.KilledQuantity = true
				invoke CloseRequisition Requisition

				if (RequestedScheduledProcedureLineRel exists)
					invoke CloseLine RequestedScheduledProcedureLineRel

		OffsetAdjustment
			SavedFinanceEnterpriseGroup			= Requisition.Company.ItemGroup.BusinessGroup.FinanceEnterpriseGroup
			SavedExchangeDate					= current corporate date
			SavedCurrencyTable                  = Requisition.CurrencyTable
			SavedFromCurrency					= old TransactionCurrencyCode
			SavedToCurrency						= Requisition.BaseCurrencyCode
			SavedTransactionAmount				= LocalChangeInAmount
			LocalChangeInAmount					= LocalCurrencyExchange.OutputCurrencyAmount * -1
			ConversionRate						= LocalCurrencyExchange.OutputCurrencyRate

		CurrencyConversion
			SavedFinanceEnterpriseGroup			= Requisition.Company.ItemGroup.BusinessGroup.FinanceEnterpriseGroup
			SavedExchangeDate					= current corporate date
			SavedCurrencyTable                  = Requisition.CurrencyTable
			SavedFromCurrency					= TransactionCurrencyCode
			SavedToCurrency						= Requisition.BaseCurrencyCode
			SavedTransactionAmount				= LocalChangeInAmount
			LocalChangeInAmount					= LocalCurrencyExchange.OutputCurrencyAmount
			ConversionRate						= LocalCurrencyExchange.OutputCurrencyRate

		CheckPatientProcedure

			if (not HasPatientProcedureRecord)
				if (HasLinePatientProcedureInfo)
					invoke Create PatientProcedure
						assign result to LocalPatientProcedureView
						invoked.Company                 = FromCompanyLocationBin.FromCompany
						invoked.VisitNumber				= TransientVisitNumber
						invoked.PatientID				= TransientPatientID
						invoked.CaseNumber				= TransientCaseNumber
						invoked.Procedure				= TransientProcedure
						invoked.ProcedureDate			= TransientProcedureDate
						invoked.ProcedureModifier		= TransientProcedureModifier
						invoked.PhysicianName			= TransientPhysicianName
						invoked.NurseCoordinator		= TransientNurseCoordinator
						invoked.PatientLastName			= TransientPatientLastName
						invoked.PatientFirstName		= TransientPatientFirstName
						invoked.PatientMiddleName		= TransientPatientMiddleName
						invoked.Birthdate				= TransientBirthdate
						invoked.Gender					= TransientGender
						invoked.SocialSecurityNumber	= TransientSocialSecurityNumber
						invoked.SalesRepresentative		= TransientSalesRepresentative
						invoked.OrderNumber				= TransientOrderNumber
						invoked.Requestor				= TransientRequestor
						invoked.Lot						= TransientLot
						invoked.SerialNumber			= TransientSerialNumber
						invoked.UserDefinedField1		= TransientUserDefinedField1
						invoked.UserDefinedField2		= TransientUserDefinedField2
						invoked.UniqueDeviceId			= TransientUniqueDeviceId
						invoked.GTIN					= TransientGTIN
						invoked.Manufacturer			= TransientManufacturer
						invoked.ManufacturerNumber		= TransientManufacturerNumber
						invoked.ManufacturingDate		= TransientManufacturingDate
						invoked.ExpirationDate			= TransientExpirationDate
						invoked.LocalItem				= TransientItem
						invoked.LocalRequisition		= Requisition
						invoked.LocalRequisitionLine	= RequisitionLine
				else
				if (HasProcedureInformationHeaderDefault)
					invoke Create PatientProcedure
						assign result to LocalPatientProcedureView
						invoked.Company                 = FromCompanyLocationBin.FromCompany
						invoked.Procedure				= Requisition.DefaultProcedureInformation.DefaultProcedure
						invoked.ProcedureModifier		= Requisition.DefaultProcedureInformation.DefaultProcedureModifier
						invoked.ProcedureDate			= Requisition.DefaultProcedureInformation.DefaultProcedureDate
						invoked.PhysicianName			= Requisition.DefaultProcedureInformation.DefaultPractitioner
						invoked.NurseCoordinator		= Requisition.DefaultProcedureInformation.DefaultNurseCoordinator
						invoked.SalesRepresentative		= Requisition.DefaultProcedureInformation.DefaultSalesRepresentative
						invoked.OrderNumber				= Requisition.DefaultProcedureInformation.DefaultSupplierOrderNumber
						invoked.Requestor				= Requisition.DefaultProcedureInformation.DefaultRequester
						invoked.UserDefinedField1		= Requisition.DefaultProcedureInformation.DefaultUserDefined1
						invoked.UserDefinedField2		= Requisition.DefaultProcedureInformation.DefaultUserDefined2
						invoked.VisitNumber				= Requisition.PatientProcedure.VisitNumber
						invoked.PatientID				= Requisition.PatientProcedure.PatientID
						invoked.CaseNumber				= Requisition.PatientProcedure.CaseNumber
						invoked.PatientLastName			= Requisition.PatientProcedure.PatientLastName
						invoked.PatientFirstName		= Requisition.PatientProcedure.PatientFirstName
						invoked.PatientMiddleName		= Requisition.PatientProcedure.PatientMiddleName
						invoked.Birthdate				= Requisition.PatientProcedure.Birthdate
						invoked.Gender					= Requisition.PatientProcedure.Gender
						invoked.SocialSecurityNumber	= Requisition.PatientProcedure.SocialSecurityNumber


				PatientProcedure = LocalPatientProcedureView.PatientProcedure

			else 
			if (action type.Update
			and TransientUpdatePatientProcedure entered)	
				invoke Update PatientProcedure
					invoked.VisitNumber				= TransientVisitNumber
					invoked.PatientID				= TransientPatientID
					invoked.CaseNumber				= TransientCaseNumber
					invoked.Procedure				= TransientProcedure
					invoked.ProcedureDate			= TransientProcedureDate
					invoked.ProcedureModifier		= TransientProcedureModifier
					invoked.PhysicianName			= TransientPhysicianName
					invoked.NurseCoordinator		= TransientNurseCoordinator
					invoked.PatientLastName			= TransientPatientLastName
					invoked.PatientFirstName		= TransientPatientFirstName
					invoked.PatientMiddleName		= TransientPatientMiddleName
					invoked.Birthdate				= TransientBirthdate
					invoked.Gender					= TransientGender
					invoked.SocialSecurityNumber	= TransientSocialSecurityNumber
					invoked.SalesRepresentative		= TransientSalesRepresentative
					invoked.OrderNumber				= TransientOrderNumber
					invoked.Requestor				= TransientRequestor
					invoked.Lot						= TransientLot
					invoked.SerialNumber			= TransientSerialNumber
					invoked.UserDefinedField1		= TransientUserDefinedField1
					invoked.UserDefinedField2		= TransientUserDefinedField1
					invoked.UniqueDeviceId			= TransientUniqueDeviceId
					invoked.GTIN					= TransientGTIN
					invoked.Manufacturer			= TransientManufacturer

					invoked.ManufacturerNumber		= TransientManufacturerNumber
					invoked.ManufacturingDate		= TransientManufacturingDate
					invoked.ExpirationDate			= TransientExpirationDate
					invoked.LocalItem				= TransientItem
					invoked.LocalRequisition		= Requisition
					invoked.LocalRequisitionLine	= RequisitionLine

		CreateWarehouseDemandHeader
			invoke Create WarehouseDemand
				if (LocalIsForSupply)
					invoked.Company							= Company
				else
					invoked.Company							= FromCompanyLocationBin.FromCompany
				invoked.WarehouseDemand.DemandSystemCode	= DemandSystemCode.Requisitions
				invoked.WarehouseDemand.DemandDocument		= Requisition
				invoked.WarehouseDemand.DemandCompany		= Requisition.Company
				invoked.DocumentNumberNumeric				= Requisition
				invoked.Destination							= RequestingLocation
				invoked.RequirePickingFeedback				= FromCompanyLocationBin.FromLocation.WarehouseProcessType.RequirePickingFeedback
				invoked.RequirePackingFeedback				= FromCompanyLocationBin.FromLocation.WarehouseProcessType.RequirePackingFeedback
				if (Requisition.HasDropshipInfo)
					invoked.DestinationName					= Requisition.DropshipName
					invoked.DestinationAddress				= Requisition.DropshipAddress
				else
					invoked.DestinationName					= RequestingLocation.Name
					invoked.DestinationAddress				= RequestingLocation.PostalAddress
				invoked.RequireFreight						= WarehouseDemand.RequireFreight.NotAllowed

		ProcessWarehouseDemand
			if (WarehouseDemandRel not exists)
				include CreateWarehouseDemandHeader

			if (WarehouseDemandLines2Rel exist)

				invoke UpdateDemandQuantity WarehouseDemandLines2Rel
					invoked.PrmQuantity				 = LocalWarehouseDemandQuantity
			else
				invoke Create WarehouseDemandLine
					invoked.DemandRecordType									= WarehouseDemandLine.DemandRecordType.Demand
					invoked.Company												= FromCompanyLocationBin.FromCompany
					invoked.InventoryLocation									= FromCompanyLocationBin.FromLocation
					invoked.CompanyAndLocation.RequestingCompany				= Company
					invoked.CompanyAndLocation.RequestingLocation 				= RequestingLocation
					invoked.Destination											= RequestingLocation
					invoked.WarehouseDemand.DemandSystemCode					= DemandSystemCode.Requisitions
					invoked.DocumentNumberNumeric								= Requisition
					invoked.WarehouseDemand.DemandDocument						= Requisition
					invoked.WarehouseDemand.DemandCompany						= Requisition.Company
					invoked.WarehouseDemandLine.LineNumber						= RequisitionLine
					invoked.WarehouseDemandLine.DemandDocumentType				= InventoryTransactionType
					invoked.EstimatedTransactionDate							= RequestedDeliveryDate
					invoked.AllocationDate										= RequestedDeliveryDate
					invoked.TransactionUOMMultiplier							= EnteredUOMMultiplier
					invoked.LineType											= ItemType
					invoked.ItemDescription										= Description
					invoked.Quantity											= LocalWarehouseDemandQuantity
					invoked.TransactionUOM										= EnteredUOM
					if (IsCatchWeightItem)
						invoked.UnitCost									 	= UnitCost						  
					else
						invoked.UnitCost										= UnitCost / EnteredUOMMultiplier 
					invoked.Status												= WarehouseDemandLine.Status.ReleasedForProcessing
					invoked.RequirePickingFeedback								= FromCompanyLocationBin.FromLocation.WarehouseProcessType.RequirePickingFeedback
					invoked.RequirePackingFeedback								= FromCompanyLocationBin.FromLocation.WarehouseProcessType.RequirePackingFeedback
					if (CreatePurchaseOrder)
						invoked.BasedOnPurchaseOrderReceipt						= true
					if (FromCompanyLocationBin.FromCompany.AllocationBasis.ByPriority)
						invoked.AllocationPriority								= AllocationPriority
					invoked.RequisitionInterfaceInformation						= RequisitionInterfaceInformation
					invoked.Item												= Item
					invoked.EnteredItem											= EnteredItem
					invoked.ItemEntryMethod										= ItemEntryMethod
					invoked.FillOrKill											= FillOrKill
					invoked.Allocatable											= true
					invoked.EAMWorkOrder										= EAMWorkOrder
					invoked.EAMWorkOrderActivity								= EAMWorkOrderActivity
					invoked.ScheduledProcedure									= ScheduledProcedure
					invoked.ScheduledProcedureLine								= ScheduledProcedureLine
					invoked.PreferenceCardTransaction							= PreferenceCardTransaction
					if (FromCompanyLocationBin.FromLocation.UseAsWarehouseLocation
					and WarehouseStorageLocationRel exists)
						invoked.WarehouseZone									= WarehouseStorageLocationRel.WarehouseZone

			if (IsTransactionTypeTransfer)
				if (SupplyWarehouseDemandRel not exists)
					LocalIsForSupply = true
					include CreateWarehouseDemandHeader

				if (WarehouseSupplyTypeDemandLinesRel exist)

					increment WarehouseSupplyTypeDemandLinesRel.Quantity by LocalWarehouseDemandQuantity
				else
					invoke CreateSupply WarehouseDemandLine
						fill in fields from this instance
						invoked.DemandRecordType									= WarehouseDemandLine.DemandRecordType.Supply
						invoked.Company												= Company
						invoked.InventoryLocation									= RequestingLocation
						invoked.CompanyAndLocation.RequestingCompany				= FromCompanyLocationBin.FromCompany
						invoked.CompanyAndLocation.RequestingLocation 				= FromCompanyLocationBin.FromLocation
						invoked.Destination											= RequestingLocation
						invoked.WarehouseDemand.DemandSystemCode					= DemandSystemCode.Requisitions
						invoked.DocumentNumberNumeric								= Requisition
						invoked.WarehouseDemand.DemandDocument						= Requisition
						invoked.WarehouseDemand.DemandCompany						= Requisition.Company
						invoked.WarehouseDemandLine.LineNumber						= RequisitionLine
						invoked.WarehouseDemandLine.DemandDocumentType				= InventoryTransactionType
						invoked.EstimatedTransactionDate							= RequestedDeliveryDate
						invoked.AllocationDate										= RequestedDeliveryDate
						invoked.TransactionUOMMultiplier							= EnteredUOMMultiplier
						invoked.LineType											= ItemType
						invoked.ItemDescription										= Description
						invoked.Quantity											= LocalWarehouseDemandQuantity
						invoked.TransactionUOM								 		= EnteredUOM
						invoked.TransactionUOMMultiplier					 		= EnteredUOMMultiplier
						if (IsCatchWeightItem)
							invoked.UnitCost									 	= UnitCost
						else
							invoked.UnitCost										= UnitCost * EnteredUOMMultiplier
						invoked.Status												= WarehouseDemandLine.Status.ReleasedForProcessing
						invoked.RequirePickingFeedback								= FromCompanyLocationBin.FromLocation.WarehouseProcessType.RequirePickingFeedback
						invoked.RequirePackingFeedback								= FromCompanyLocationBin.FromLocation.WarehouseProcessType.RequirePackingFeedback
						if (CreatePurchaseOrder)
							invoked.BasedOnPurchaseOrderReceipt						= true
						if (FromCompanyLocationBin.FromCompany.AllocationBasis.ByPriority)
							invoked.AllocationPriority								= AllocationPriority
						invoked.Item												= Item
						invoked.EnteredItem											= EnteredItem
						invoked.ItemEntryMethod										= ItemEntryMethod
						invoked.FillOrKill											= FillOrKill
						invoked.Allocatable											= true

						if (FromCompanyLocationBin.FromLocation.UseAsWarehouseLocation
						and WarehouseStorageLocationRel exists)
							invoked.WarehouseZone									= WarehouseStorageLocationRel.WarehouseZone

		ValidateEntry
			constraint (ReturnQuantity >= 0)
				"QuantityReturnedCannotBeNegative"    										
			constraint (ReturnQuantity <= ShippedQuantity)
				"ReturnQuantityCannotExceedOriginalDeliveredQuantity"    					
			constraint (RelReturnQuantityToDate <= ShippedQuantity)
				"ReturnQuantityOf<CurrentReturnQuantity>CannotBeGreaterThanDeliveredQuantity" 	
			constraint (RelReturnQuantityToDate < 0
			or ReturnQuantity >= RelReturnQuantityToDate)
				"ReturnedQuantityCannotBeLessThanPreviouslyReturnedQuantity"    			

		DefaultValues



			if (EAMWorkOrderNumber > 0 and IsInventory)
				CreatePurchaseOrder = false

		CalculateTaxAndLandedUnitCost
			if (PurchaseTaxCode entered
			or  PurchaseTaxCode changed
			or  LineExtendedAmount changed)
				initialize CalculateTax
				initialize AccruedTaxAmount
				initialize InvoicedTaxAmount

				if (PurchaseTaxable and PurchaseTaxCode entered and LineExtendedAmount entered)
					CalculateTax.TaxEntity						= FromCompanyLocationBin.FromCompany.AccountingEntity
					CalculateTax.Quantity						= Quantity
					CalculateTax.TaxableAmount					= LineExtendedAmount
					CalculateTax.ProductTaxCategory				= ProductTaxCategory
					CalculateTax.TaxCode						= PurchaseTaxCode
					CalculateTax.Function						= "C"
					CalculateTax.ThirdPartyFunction				= "I"

					CalculateTax.System							= "RQ"
					CalculateTax.CallingModule					= "Requisition"
					CalculateTax.InvoiceCompany					= Company
					CalculateTax.ProcessLevel					= RequestingLocation.ProcessLevel
					CalculateTax.Invoice						= Requisition
					CalculateTax.InvoiceDate					= current corporate date

					if (RequestedDeliveryDate entered)
						CalculateTax.TaxDate					= RequestedDeliveryDate
					else
						CalculateTax.TaxDate					= Requisition.CreationDate

					if (PurchaseFromLocation.VendorLocation.TaxCode not entered)
						CalculateTax.FromTaxCode				= Vendor.TaxCode
					else
						CalculateTax.FromTaxCode				= PurchaseFromLocation.VendorLocation.TaxCode

					if  (TaxEntityRel.ThirdParty.VertexOSeries
					and  Requisition.DropshipAddress not entered)
						CalculateTax.PostalAddress			= Requisition.FromCompanyLocation.FromLocation.PostalAddressForPurchaseOrder	 	
					else
					if (Requisition.DropshipAddress not entered)
						CalculateTax.PostalAddress				= RequestingLocation.PostalAddress
					else
						CalculateTax.PostalAddress				= Requisition.DropshipAddress

					if  (TaxEntityUsesThirdPartyTax)
				   		CalculateTax.RelatedObjectReference			= reference to this instance
				   		CalculateTax.LocalVertexEventType			= "P"
			   			CalculateTax.InputVertexRequest				= "P"
				   		CalculateTax.TransactionSource				= "I"
				   		CalculateTax.InputReturnVertexTaxIn			= "D" 
						CalculateTax.Vendor							= Vendor
						CalculateTax.VendorCustomerName				= Vendor.VendorName
						CalculateTax.LineNumber						= RequisitionLine
						CalculateTax.VATRegistrationCountry    	 	= TaxEntityRel.VATRegistrationCountry
						CalculateTax.VATRegistrationNumber			= TaxEntityRel.VATRegistrationNumber
						if (PurchaseFromLocation entered
						and PurchaseFromLocation.CurrentAddressRelExists
						and PurchaseFromLocation.VATRegistrationNumber entered)
							CalculateTax.FromPostalAddress				= PurchaseFromLocation.VendorAddress
							CalculateTax.FromVATRegistrationCountry 	= PurchaseFromLocation.VATRegistrationCountry
							CalculateTax.FromVATRegistrationNumber		= PurchaseFromLocation.VATRegistrationNumber
						else
							CalculateTax.FromPostalAddress				= Vendor.VendorAddress
							CalculateTax.FromVATRegistrationCountry 	= Vendor.VATRegistrationCountry
							CalculateTax.FromVATRegistrationNumber		= Vendor.VATRegistrationNumber
						CalculateTax.DefaultFilingCurrency 			= Company.Currency
						CalculateTax.CurrencyRate					= ConversionRate
						CalculateTax.TransactionCurrency 			= TransactionCurrencyCode			
						CalculateTax.BaseCurrency 					= Requisition.BaseCurrencyCode					
						CalculateTax.UniqueIdOfRelatedObject		= UniqueID

					if (not SingleCallToOneSource
					and not SingleCallToVertex)
						include LoadOneSourceInputFields
						include CreateTaxLineItem
						include CreateTaxLineItemUserFields
						include VertexFlexibleFields


						LocalCalculateTaxExecuted					= CalculateTax.ExecuteCalculateTax
						constraint (CalculateTax.OutputErrorNumber not entered)
							"<CalculateTax.OutputErrorMessage>"


						if (PurchaseTaxCode = "00"
						and TaxEntityRel.ThirdParty.VertexOSeries)
							PurchaseTaxCode = CalculateTax.TaxCode 

						for each CalculateTax.TaxTable.TaxTableOutput
							if (each.AccrualFlag = "A")
								AccruedTaxAmount 					+= each.TaxAmount5DP
							else
								InvoicedTaxAmount 					+= each.TaxAmount5DP

							if (each.LandCostFlag)
								LandedUnitCost 					+= (each.TaxAmount5DP / Quantity)

		CloseRequisitionHeader
			if (Requisition.NotClosedOrRejectedLinesRel not exists)
				invoke Processed.Close Requisition

		BuildTextIndex
			build text search field TextSearch
				Fields
					Item
					MajorPurchasingClass
					MinorPurchasingClass
					ManufacturerNumber
					VendorItem
					Description
		 			ItemGTIN
					Item.Description
					Item.Description2
					Item.Description3
					VendorItem.VendorItemDescription
					VendorItem.ManufacturerNumber
					DerivedStrippedManufacturerNumber
					DerivedStrippedVendorItem
					DerivedStrippedItem
		
		VendorDefaulting
			if ((not RequestingLocation.ParOrExchangeLocation
			or (IsInventoryOrNonstock and not ParItemWithReplenishmentSource)
			or  IsSpecialOrService)
			and CreatePurchaseOrder)
				initialize VendorPurchaseFromLocationDefaulting

				VendorPurchaseFromLocationDefaulting.InRequestingCompany	= Requisition.Company
				VendorPurchaseFromLocationDefaulting.InCompany				= FromCompanyLocationBin.FromCompany
				VendorPurchaseFromLocationDefaulting.InFromLocation			= FromCompanyLocationBin.FromLocation
				VendorPurchaseFromLocationDefaulting.InVendor				= Vendor
				VendorPurchaseFromLocationDefaulting.InSystem				= VendorPurchaseFromLocationDefaulting.InSystem.Requisition
				VendorPurchaseFromLocationDefaulting.InDefaultType			= VendorPurchaseFromLocationDefaulting.InDefaultType.DefaultAllVendorInformation
				VendorPurchaseFromLocationDefaulting.InRequestingLocation	= RequestingLocation
				VendorPurchaseFromLocationDefaulting.InServiceCode			= ServiceCode
				VendorPurchaseFromLocationDefaulting.InDoDebug 				= DoDebug
				if (not SourcingEventRequired)
					VendorPurchaseFromLocationDefaulting.InContractGroup	= Contract.ContractGroup
					VendorPurchaseFromLocationDefaulting.InContract			= Contract
					VendorPurchaseFromLocationDefaulting.InContractLine		= ContractLine
				if (DoDebug)
					display "RQL:CallVendorPurchaseFromLocationDefaulting.InitializeDefaultOrder"
				Execute														= VendorPurchaseFromLocationDefaulting.InitializeDefaultOrder

				if (VendorPurchaseFromLocationDefaulting.OutVendor entered)
					if (PurchaseFromLocation not entered
					and VendorPurchaseFromLocationDefaulting.LocalVendorLocationFromContract
					and FromCompanyRel.CostOrVendorDefaultingOrder.VendorFirstThenCost)
						LocalBlankVendorLocation = true
					default Vendor to VendorPurchaseFromLocationDefaulting.OutVendor
					default PurchaseFromLocation to VendorPurchaseFromLocationDefaulting.OutPurchaseFromLocation
				else
					default Vendor to Requisition.Vendor	//In case Header is "Not Selected" in the Vendor Default configuration of the Purchasing Company
					if (Vendor = Requisition.Vendor)
						default PurchaseFromLocation to Requisition.PurchaseFromLocation

			else
				if (IsInventoryOrNonstock)
					if (ParItemWithReplenishmentSource)
						if (RequestingItemLocationRel.ItemReplenishmentSourcesRel.Vendor entered) 
							default Vendor to RequestingItemLocationRel.ItemReplenishmentSourcesRel.Vendor
							if (not LocalBlankVendorLocation and Vendor = RequestingItemLocationRel.ItemReplenishmentSourcesRel.Vendor)
								default PurchaseFromLocation to RequestingItemLocationRel.ItemReplenishmentSourcesRel.PurchaseFromLocation
								
						else 
							if (RequestingOriginalItemLocationRel.ItemReplenishmentSourcesRel.Vendor entered) 
								default Vendor to RequestingOriginalItemLocationRel.ItemReplenishmentSourcesRel.Vendor
								if  (not LocalBlankVendorLocation 
								and Vendor = RequestingOriginalItemLocationRel.ItemReplenishmentSourcesRel.Vendor)
									default PurchaseFromLocation to RequestingOriginalItemLocationRel.ItemReplenishmentSourcesRel.PurchaseFromLocation
					else
						default Vendor to ItemLocationRel.ItemReplenishmentSourcesRel.Vendor
						if (not LocalBlankVendorLocation and Vendor = ItemLocationRel.ItemReplenishmentSourcesRel.Vendor)
							default PurchaseFromLocation to ItemLocationRel.ItemReplenishmentSourcesRel.PurchaseFromLocation
				else
					if (Vendor changed or action type.Create)
						default Vendor to Requisition.Vendor
						if (Vendor = Requisition.Vendor)
							default PurchaseFromLocation to Requisition.PurchaseFromLocation

			include CurrencyCodeDefaulting	


		VendorItemDefaulting
			if (VendorItem not entered
			and Vendor entered
			and DefaultVendorItemRel exists
			and IsInventoryOrNonstock)
				default VendorItem to first DefaultVendorItemRel.VendorItem
				if (PurchasingVendorRel.GTINInUse)
					initialize ItemGTIN


		CreateDistributions

			initialize LocalGLFinanceCodeBlock
			initialize LocalAmountToBeReturned
			initialize LocalDistributionAmount
			initialize LocalReturnedAmount

			LocalReturnUnitCost 		= DerivedLastIssueCost
			if (IsCatchWeightItem)
				LocalReturnQuantityToDate	= RelReturnCatchWeightQuantityToDate
			else
				LocalReturnQuantityToDate	= RelReturnQuantityToDate

			LocalGLFinanceCodeBlock 	= ItemLocationRel.GeneralLedgerCategory.InventoryAccount
			LocalDistributionAmount		= (((NewInventoryTransactionLine.DerivedQuantity) * LocalReturnUnitCost) * -1)
			LocalPostingType			= InventoryTransactionLineDistribution.PostingType.Inventory
			include CreateInventoryTransactionDistribution

			LocalAmountToBeReturned		= LocalDistributionAmount * -1
			LocalReturnedAmount			= ((LocalReturnQuantityToDate - NewInventoryTransactionLine.DerivedQuantity) * LocalReturnUnitCost)
			LocalPostingType			= InventoryTransactionLineDistribution.PostingType.Offset
			for each RequisitionLineDistributionsRel
				LocalGLFinanceCodeBlock				= each.DistributionAccount
				LocalDistributionAmount				= each.DerivedDistributionAmount

				if (DistributionBy.ByQuantity)
					if (LocalReturnedAmount > 0)
						if (LocalReturnedAmount >= LocalDistributionAmount)
							LocalReturnedAmount -= LocalDistributionAmount
							initialize LocalDistributionAmount
						else
							LocalDistributionAmount -= LocalReturnedAmount
							initialize LocalReturnedAmount
							include RecomputeDistributionAmount
					else
						if (LocalAmountToBeReturned > 0)
							include RecomputeDistributionAmount
						else
							end for each
				else
					LocalDistributionAmount = LocalAmountToBeReturned * (LocalDistributionAmount / DerivedDistributionTotal)
					include CreateInventoryTransactionDistribution

		RecomputeDistributionAmount
			if (LocalAmountToBeReturned > LocalDistributionAmount)
				LocalAmountToBeReturned -= LocalDistributionAmount
			else
				LocalDistributionAmount = LocalAmountToBeReturned
				initialize LocalAmountToBeReturned
			include CreateInventoryTransactionDistribution

		CreateInventoryTransactionDistribution
			invoke Create InventoryTransactionLineDistribution
				invoked.Company										= NewInventoryTransaction.Company
				invoked.InventoryTransaction						= NewInventoryTransaction.InventoryTransaction
				invoked.InventoryTransactionLine					= NewInventoryTransactionLine.InventoryTransactionLine
				invoked.InventoryLocation							= NewInventoryTransaction.InventoryLocation
				invoked.TransactionSystemCode						= NewInventoryTransactionLine.TransactionSystemCode
				invoked.System										= WarehouseShipmentRel.WarehouseDemand.DemandSystemCode
				invoked.PostingType									= LocalPostingType
				invoked.PostingDate									= NewInventoryTransactionLine.GeneralLedgerDate
				invoked.GLFinanceCodeBlock							= LocalGLFinanceCodeBlock
				invoked.CurrencyCode								= Company.AccountingEntity.FunctionalCurrency
				invoked.GLTransactionAmount							= (LocalDistributionAmount * -1)
				if (not LocalGLFinanceCodeBlock.GeneralLedgerChartAccount.AllowUnits.No)
					if (LocalPostingType.Offset)
						invoked.UnitsAmount							= NewInventoryTransactionLine.Quantity * -1
					else
						invoked.UnitsAmount							= NewInventoryTransactionLine.Quantity
				invoked.TransactionDate								= NewInventoryTransactionLine.TransactionDate
				invoked.GeneralLedgerEvent							= NewInventoryTransaction.InventoryDocumentType
				invoked.DocumentNumber								= NewInventoryTransaction.InventoryTransaction
				invoked.AddOnCharge 								= NewInventoryTransactionLine.LocalAddOnCharge
				initialize invoked.Status

		CreateRequisitionLineAOCFromContract
			invoke Create RequisitionLineAddOnCharge
				invoked.Company						= Company
				invoked.Requisition					= Requisition
				invoked.RequisitionLine				= RequisitionLine
				invoked.Vendor 						= each.Contract.Vendor
				invoked.PurchaseFromLocation		= PurchaseFromLocation
				invoked.AddOnCharge					= each.AOC
				invoked.AddOnChargePercent			= each.AOCRate
				invoked.EnteredUnitCost				= each.UnitCost
				invoked.ZeroCost					= each.ZeroCost
				invoked.Taxable						= each.Taxable
				invoked.TaxCode						= each.TaxCode
				invoked.Account						= each.ContractLine.DistributionAccount
				invoked.LocalBypassComputeTotals 	= LocalBypassComputeTotals 

		TriggerRequisitionReturnServiceRules
			trigger PayablesService.RequisitionReturnService PA service
				resume on error
				title is "<LocalTitle>"
				Criteria
					GeneralLedgerCompanyForCompanyRel.FinanceEnterpriseGroup
					Company
				Variables
					ActionCode
					include persistent fields from Requisition
					include persistent fields from RequisitionLine
					bod id.VariationID
						variable name is VariationId
					GeneralLedgerCompanyForCompanyRel.FinanceEnterpriseGroup
						variable name is FinanceEnterpriseGroup
					Company.GeneralLedgerCompany.AccountingEntity
						variable name is AccountingEntity
					RequestingLocation.Name
						variable name is RequestingLocationName


		CreateRecallProductTransaction

			LocalRecallGroup 		= PrmRecallGroup
			LocalRecallNotice       = PrmRecallNotice
			LocalRecallProduct      = PrmRecallProduct

			if (RecallProductTransactionRel ! exists)

				invoke Create RecallProductTransaction
					invoked.RecallGroup                                    = PrmRecallGroup
					invoked.RecallNotice                                   = PrmRecallNotice
					invoked.RecallProduct                                  = PrmRecallProduct
					invoked.ActivityType                                   = 1 
					invoked.RequestingLocationGroup.RequestingCompany      = Company
					invoked.RequestingLocationGroup.RequestingLocation     = RequestingLocation
					if (RequestingLocation = blank)
						invoked.RequestingLocationGroup.RequestingLocation = Requisition.RequestingLocation
					invoked.RequisitionLineGroup.InventoryCompany          = Company
					invoked.RequisitionLineGroup.Requisition               = Requisition
					invoked.RequisitionLineGroup.RequisitionLine           = RequisitionLine
					invoked.LocalPriority                                  = PrmQueryPriority
					invoked.LocalDueDate                                   = PrmQueryDueDate
					invoked.TransactionDate                                = CreationDate date
					invoked.LocalCreateTasks                               = PrmCreateTasks

		SumWarehouseShipmentQuantities
			if (not LocalWHShipmentQuantitiesProcessed)
				initialize LocalShippedQuantity
				initialize LocalInProcessQuantity
				initialize LocalVoidedQuantity
				for each WarehouseShipmentLinesRel
					LocalShippedQuantity 	+=	each.ShippedQuantity
					LocalInProcessQuantity 	+=	each.InProcessQuantity
					LocalVoidedQuantity 	+=	each.TotalVoidedQuantity
				if (Item.StockUOM not = EnteredUOM
				and not IsCatchWeightItem)
					initialize UOMCalculation
					UOMCalculation.InputUOM      			= Item.StockUOM
					UOMCalculation.InputToUOM    			= EnteredUOM
					UOMCalculation.InputQuantity 			= LocalShippedQuantity
					UOMCalculation.InputToUOMConversion		= EnteredUOMMultiplier
					UOMCalculation.Method        			= UOMCalculation.Method.ConvertToAlternate
					LocalShippedQuantity					= UOMCalculation.OutputQuantity

					initialize UOMCalculation
					UOMCalculation.InputUOM      			= Item.StockUOM
					UOMCalculation.InputToUOM    			= EnteredUOM
					UOMCalculation.InputQuantity 			= LocalInProcessQuantity
					UOMCalculation.InputToUOMConversion		= EnteredUOMMultiplier
					UOMCalculation.Method        			= UOMCalculation.Method.ConvertToAlternate
					LocalInProcessQuantity					= UOMCalculation.OutputQuantity

				LocalWHShipmentQuantitiesProcessed = true

		CopyLineInformation
			if (PrmAddToRequisition.StartNewRequisition)
				if (actor.agent(Employee).Employee.Requester.CurrentRequisitionForRQC not entered)
					invoke Create Requisition
						assign result to LocalRequisition
						fill in fields from Requisition
							except invoked.Requisition
							except invoked.CreationDate
							except invoked.ReferenceNumber
							except invoked.LastRequisitionLine
							except invoked.LastDeliverySequence
							except invoked.ReturnSequence
							except invoked.Status
							except invoked.LastApprovalDate
							except invoked.Approved
							except invoked.AttainedLevel
							except invoked.ApprovalLevel
							except invoked.NumberOfLines
							except invoked.NumberOfClosedLines
							except invoked.Closed
							except invoked.InventoryItemsTotal
							except invoked.NonstockItemsTotal
							except invoked.SpecialAndServiceItemsSTotal
							except invoked.HeaderAddOnChargeTotal
							except invoked.LineAddOnChargeTotal
							except invoked.AOCTotal
							except invoked.ExtendedAmountTotal
							except invoked.Printed
							except invoked.ReturnNote
							except invoked.ReturnDate
							except invoked.OperatorID
							except invoked.CapitalTotal
							except invoked.TechnicalTotal
							except invoked.CapitalTechnicalTotal
							except invoked.ProcessFlowApprovalLevel
							except invoked.ReleasedDate
							except invoked.ReleasingOperatorID
							except invoked.ApprovedRejectedDate
							except invoked.ApprovingRejectingOperatorID
							except invoked.CreatedBy
							except invoked.LastUpdateDate
							except invoked.LastUpdateBy
							except invoked.OneSourceDocumentToOnePO
							except invoked.BudgetEditProcessing
							except invoked.RequisitionApprovalType
							except invoked.PatientProcedure
						invoked.Company = PrmCompany
						invoked.Requisition = 0
						invoked.RequestingLocation = PrmRequestingLocation
						invoked.FromCompanyLocation.FromCompany = PrmFromCompanyLocation.FromCompany
						invoked.FromCompanyLocation.FromLocation = PrmFromCompanyLocation.FromLocation
						if (PrmRequestedDeliveryDate entered)
							invoked.RequestedDeliveryDate	= PrmRequestedDeliveryDate
						if  (PrmAllocationPriority entered)
							invoked.AllocationPriority				 	= PrmAllocationPriority
							if (RSSLPLConfigurationParameterRel exists)
								invoked.TransientAllocationPriorityLevel 	= PrmAllocationPriority
						if (PrmRequisitionDescription entered)
							invoked.RequisitionDescription 	= PrmRequisitionDescription
						if (PrmRequisitionSource.RequisitionSelfService)
							invoked.RequisitionSource			= RqSource.RequisitionSelfService
							invoked.TransientRSSLPLRequisitionScreen = blank 
							if (PrmDeliverTo entered)
								invoked.DeliverTo					= PrmDeliverTo
							if (PrmBuyer entered)
								invoked.Buyer						= PrmBuyer
							if (PrmPOCode entered)
								invoked.POCode						= PrmPOCode
							if (PrmCommodityCode entered)
								invoked.CommodityCode				= PrmCommodityCode 
							if (PrmVendor entered)
								invoked.Vendor						= PrmVendor
					NewRequisitionFromCopy = LocalRequisition.Requisition
				else
					NewRequisitionFromCopy = actor.agent(Employee).Employee.Requester.CurrentRequisitionForRQC
			else
        		NewRequisitionFromCopy = PrmRequisition
        	
        	if 	  (Contract entered
        	and	(((Contract.ExpirationDate entered 
        	and   Contract.LastInvoiceAllowedDate not entered 
        	and   Requisition.CreationDate > Contract.ExpirationDate)
        	or   (Contract.FirstInvoiceAllowedDate not entered 
        	and   Requisition.CreationDate < Contract.EffectiveDate))
        	or    not (Contract.ContractStatus.Active)))
        		LocalInitializeContract = true

			if (PrmQuantity not entered)
				PrmQuantity = Quantity
			if (PrmEnteredUOM not entered)
				PrmEnteredUOM = EnteredUOM

			LocalCompanyForQuantityAdd = PrmCompany
			LocalCostUOMForQuantityAdd = PrmEnteredUOM
			LocalRequisitionForQuantityAdd = NewRequisitionFromCopy
			LocalCompletionMessage = SelectedItemsAddedMessage






			if (RequisitionLineItemRel exists
			and RequesterRel.ValidateDuplicateItem
			and !IsServiceItemByAmount)
				LocalCompletionMessage = SelectedItemsUpdatedMessage
				invoke RSSLPLUpdateRequisitionLineQTY RequisitionLineItemMatchRel
					invoked.PrmQuantity							= RequisitionLineItemMatchRel.Quantity + PrmQuantity
					invoked.PrmUOM								= RequisitionLineItemMatchRel.EnteredUOM
			else			
				invoke CreateCopy RequisitionLine
					assign result to LocalRequisitionLine
					fill in fields from this instance
						except invoked.RequisitionLine
						except invoked.Status
						except invoked.Closed
						except invoked.LastUpdateDate
						except invoked.LastUpdateBy
						except invoked.CreatedBy
						except invoked.CreationDate
						except invoked.ApprovedRejectedDate
						except invoked.ApprovingRejectingOperatorID
						except invoked.ReleasedDate
						except invoked.ReleasingOperatorID
						except invoked.Approved
						except invoked.KilledQuantity
						except invoked.LastDistributionSequence
						except invoked.LastReturnSequence
						except invoked.ReturnQuantity
						except invoked.DetailReturnQuantity
						except invoked.OverrideCost
						except invoked.ItemType
						except invoked.Vendor
						except invoked.PurchaseFromLocation
						except invoked.AccruedTaxAmount
						except invoked.InvoicedTaxAmount
						except invoked.LineAddOnChargeTotal
						except invoked.LandedUnitCost
						except invoked.InterfaceCancelQuantity
						except invoked.PatientProcedure
						except invoked.CostCode
						except invoked.RequisitionSource
						except invoked.CatchWeightReturnQuantity
						except invoked.RequestedDeliveryDate
						except invoked.LateDeliveryDate
					invoked.Company 				= PrmCompany
					invoked.Quantity				= PrmQuantity
					invoked.EnteredUOM				= PrmEnteredUOM
					invoked.Requisition           	= NewRequisitionFromCopy
					invoked.RequisitionLine			= 0
					invoked.RequestingLocation 		= PrmRequestingLocation 
					invoked.RSSSourceInformation 	= PrmRSSSourceInformation
					invoked.RequisitionSource 		= PrmRequisitionSource 
					if (LocalInitializeContract)
						initialize invoked.Contract
						initialize invoked.ContractLine
						initialize invoked.Preferred
						initialize invoked.Tier
					if (PrmTransactionUnitCost entered)
						invoked.TransactionUnitCost		= PrmTransactionUnitCost
					if (PrmTransactionCurrencyCode entered)
						invoked.TransactionCurrencyCode		= PrmTransactionCurrencyCode

					if (PrmRequisitionSource.RequisitionSelfService
					and PrmVendor entered)
						invoked.Vendor					= PrmVendor
					else
						invoked.Vendor					= Vendor
					invoked.PurchaseFromLocation		= PurchaseFromLocation                   	
					if (PrmRequisitionSource.RequisitionSelfService)
						if (PrmDeliverTo entered)
							invoked.DeliverTo					= PrmDeliverTo
						if (PrmBuyer entered)
							invoked.Buyer						= PrmBuyer
						if (PrmPOCode entered)
							invoked.POCode						= PrmPOCode
						if (PrmCommodityCode entered)
							invoked.CommodityCode				= PrmCommodityCode
						invoked.TransientRSSLPLRequisitionLineScreen = blank 

					if (not ItemType.Inventoried)			
						invoked.ItemType = ItemType

				for each RequisitionLineCommentRel
					invoke Create RequisitionLineComment
						fill in fields from each
							except invoked.Attachment.FSMAttachmentIDM
						invoked.Company 			= PrmCompany
						invoked.Requisition         = NewRequisitionFromCopy
						invoked.RequisitionLine     = LocalRequisitionLine.RequisitionLine
						invoked.Attachment.File		= each.Attachment.File
						invoked.Attachment.MimeType	= each.Attachment.MimeType
						invoked.Attachment.Title	= each.Attachment.Title

				for each LineAddOnChargesRel
					invoke Create RequisitionLineAddOnCharge
						invoked.Company 				= PrmCompany
						invoked.Requisition				= NewRequisitionFromCopy
						invoked.RequisitionLine			= LocalRequisitionLine.RequisitionLine
						invoked.AddOnCharge				= each.AddOnCharge
						if (each.AddOnChargeEntryMethod.UnitCost)
							invoked.EnteredUnitCost = each.EnteredUnitCost
						else
							if (each.AddOnChargeEntryMethod.RatePercentage)
								invoked.AddOnChargePercent = each.AddOnChargePercent
							else
								if (each.AddOnChargeEntryMethod.TotalAmount)
									invoked.TotalAddOnChargeAmount = each.TotalAddOnChargeAmount

				if (IsDistributionAllowed)
					if (DistributionCode entered)


						include CheckDistributionByFromDistributionCode

						LocalDistributionCode = DistributionCode
						for each PayablesDistributionCodeDetailsRel
							invoke Create RequisitionLineDistribution
								fill in fields from this instance
								invoked.Company 					   = PrmCompany
								invoked.Requisition                    = NewRequisitionFromCopy
								invoked.RequisitionLine                = LocalRequisitionLine.RequisitionLine
								invoked.DistributionAccount            = each.DistributionAccount
								invoked.AssetInformation.Asset         = each.Asset
								invoked.AssetInformation.AssetTemplate = each.AssetTemplate
								invoked.DistributionPercent            = each.DistributionPercent
								invoked.DistributionAmount             = each.DistributionAmount
								invoked.TransientBypassCommittedContractValidation = true
								if (PrmRequisitionSource.RequisitionSelfService) 
									invoked.TransientRSSLPLScreenOnDisplay = blank
					else
						if (DistributionAccountExists)
							if (DistributionBy.ByQuantity)
								LocalDistributionQuantity = LocalRequisitionLine.Quantity	
							for each RequisitionLineDistributionsRel
								if (DistributionBy.ByQuantity
								and LocalDistributionQuantity not entered)
									end for each   		
								invoke Create RequisitionLineDistribution
									fill in fields from each
									invoked.Company 					   = PrmCompany
									invoked.Requisition                    = NewRequisitionFromCopy
									invoked.RequisitionLine                = LocalRequisitionLine.RequisitionLine
									if (DistributionBy.ByAmount)
										invoked.DistributionAmount			= ((LocalRequisitionLine.Quantity * LocalRequisitionLine.LandedUnitCost) * (each.DerivedDistributionAmount / DerivedDistributionTotal))
									else
									if (DistributionBy.ByQuantity 
									and each.DistributionQuantity >= LocalDistributionQuantity)
										invoked.DistributionQuantity	= LocalDistributionQuantity
									invoked.TransientBypassCommittedContractValidation = true
									if (PrmRequisitionSource.RequisitionSelfService) 
										invoked.TransientRSSLPLScreenOnDisplay = blank
										
								if (DistributionBy.ByQuantity)	
									if (each.DistributionQuantity >= LocalDistributionQuantity)
										initialize LocalDistributionQuantity
									else
										LocalDistributionQuantity -= each.DistributionQuantity
				LocalChangeInAmount = ApprovalValue
				LocalItemType 		= ItemType
				
				NewRequisitionLineFromCopy = LocalRequisitionLine.RequisitionLine

		UpdateEntranceRules
			if (ItemType.Service and EnteredContractLine entered)
					ContractLine = EnteredContractLine
				
			if (CostCode.Punchout)
				constraint (PurchaseFromLocationRel.AllowChangeToPunchoutPurchaseOrder
				or PurchasingVendorRel.AllowChangeToPunchoutPurchaseOrder)
					"CannotChangeLine,ItHasACostCodeOfPunchout"

			if (SourcingEventRequired
			and CostCode.Entered
			and TransactionUnitCost entered)
				initialize Vendor
				initialize PurchaseFromLocation

			if (Vendor entered)
				constraint (not SourcingEventRequired)
		   			"CannotEnterBothVendorAndSourcingEvent"

				include InventoryLocationStatusValidation

		FinishUpdate
			if (DistributionBy changed)
				invoke Update first RequisitionLineDistribution set
					invoked.DistributionPercent 	= 0
					invoked.DistributionQuantity 	= 0
					invoked.DistributionAmount		= 0

			if (TextSearchable changed)
				include BuildTextIndex

			if (StandardCommentCode entered)
				include CopyStandardCommentCode

			if (DisplayOfProcedureInfo)
				include CheckPatientProcedure

			if (LineExtendedAmount changed
			or  ApprovalValue changed)
				invoke UpdateTotalsFromLine Requisition
					invoked.PrmLineExtendedAmount	= LineExtendedAmount - old LineExtendedAmount
					invoked.PrmApprovalValue		= DerivedBaseAmountWithTax - old DerivedBaseAmountWithTax 
					invoked.PrmItemType				= ItemType


			if (GeneralLedgerSystemCodeRel.EncumbranceOption.TrackAndEdit
			or  GeneralLedgerSystemCodeRel.EncumbranceOption.Track)
				if ((old RequestedDeliveryDate != RequestedDeliveryDate and ProcurementGroupRel.RequisitionCommitmentDate.LineEarlyDeliveryDate)
				or   old TransactionUnitCost != TransactionUnitCost
				or   old PurchaseTaxCode != PurchaseTaxCode
				or   old Quantity != Quantity
				or   old TransactionCurrencyCode != TransactionCurrencyCode)
					for each RequisitionLineDistribution set
						invoke UpdateGLCommitmentIndirect each
							if (old RequestedDeliveryDate != RequestedDeliveryDate and ProcurementGroupRel.RequisitionCommitmentDate.LineEarlyDeliveryDate
							and old TransactionUnitCost = TransactionUnitCost
							and old Quantity = Quantity)
								invoked.FromDateChange = true
							invoked.PrmUpdateLine  = true
							if (GeneralLedgerSystemCodeRel.EncumbranceOption.TrackAndEdit)
								invoked.PerformBudgetEdit = true

			if (CreatePurchaseOrder changed
			and old CreatePurchaseOrder)
				invoke DeleteRequisitionAddOnCharge RequisitionLineAddOnCharge set
					confirmation required
						"ExistingAddOnChargesForLineWillBeDeleted.Continue?"

			if (Contract changed)
				for each OldContractLineAOCRel
					LocalAddOnCharge = each.AOC
					if (!LineAddOnChargeFromContractRel.FromSpread)
						invoke DeleteRequisitionAddOnCharge LineAddOnChargeFromContractRel

				for each ContractLineAOCRel
					LocalAddOnCharge = each.AOC
					if (LineAddOnChargeFromContractRel not exists)
						include CreateRequisitionLineAOCFromContract

			if (Quantity changed or PurchaseTaxCode changed)
				for each RequisitionLineAddOnCharge set
					invoke Update each
			else
			if (TransactionUnitCost changed)
				for each LineAddOnChargesByRateRel
					invoke Update each

			if (MissingDistribution)
				include RequisitionLineDistributionAccountDefaulting
		
		CreateRequisitionLineDistribution
			if (InventoryTransactionType.Issue
			or not IsInventory)
				if (Contract entered
				and (ContractLine entered or Contract.AllowReferenceOfItemsNotOnContract)
				and Contract.UseCommitments)
					if (Contract.UseHeaderCommitments)
						invoke CreateRestricted RequisitionLineDistribution
							fill in fields from this instance
							invoked.DistributionAccount		= Contract.CommitmentAccount
							invoked.TransientBypassCommittedContractValidation = true
					else
						for each ContractLine.ContractLineDistribution set
							invoke CreateRestricted RequisitionLineDistribution
								fill in fields from this instance
								invoked.TransientBypassCommittedContractValidation = true
								invoked.DistributionAccount	= each.DistributionAccount
								invoked.DistributionPercent = each.Percent

					DistributionBy = DistributionBy.ByPercent
				else
					if (EnteredPunchoutDistributionAccount > 0)
						EnteredGeneralLedgerChartAccount 	= EnteredPunchoutDistributionAccount
					if (DistributionCode entered)

						include CheckDistributionByFromDistributionCode

						LocalDistributionCode = DistributionCode
						for each PayablesDistributionCodeDetailsRel
							invoke Create RequisitionLineDistribution
								fill in fields from this instance
								invoked.DistributionAccount            = each.DistributionAccount
								invoked.AssetInformation.Asset         = each.Asset
								invoked.AssetInformation.AssetTemplate = each.AssetTemplate
								invoked.DistributionPercent            = each.DistributionPercent
								invoked.DistributionAmount             = each.DistributionAmount
					else
						if (EnteredToAccountingEntity not entered
						and EnteredGeneralLedgerChartAccount not entered
						and EnteredAccountingUnit not entered
						and EnteredProject not entered
						and EnteredFinanceDimension1 not entered
						and EnteredFinanceDimension2 not entered
						and EnteredFinanceDimension3 not entered
						and EnteredFinanceDimension4 not entered
						and EnteredFinanceDimension5 not entered
						and EnteredFinanceDimension6 not entered
						and EnteredFinanceDimension7 not entered
						and EnteredFinanceDimension8 not entered
						and EnteredFinanceDimension9 not entered
						and EnteredFinanceDimension10 not entered
						and EnteredAsset not entered
						and EnteredAssetTemplate not entered)
							include RequisitionLineDistributionAccountDefaulting
						else
							invoke Create RequisitionLineDistribution
								fill in fields from this instance
								invoked.TransientBypassCommittedContractValidation 		= true
								invoked.DistributionAccount.ToAccountingEntity			= EnteredToAccountingEntity
								invoked.DistributionAccount.GeneralLedgerChartAccount	= EnteredGeneralLedgerChartAccount
								invoked.DistributionAccount.AccountingUnit				= EnteredAccountingUnit
								invoked.DistributionAccount.Project						= EnteredProject
								invoked.DistributionAccount.FinanceDimension1			= EnteredFinanceDimension1
								invoked.DistributionAccount.FinanceDimension2			= EnteredFinanceDimension2
								invoked.DistributionAccount.FinanceDimension3			= EnteredFinanceDimension3
								invoked.DistributionAccount.FinanceDimension4			= EnteredFinanceDimension4
								invoked.DistributionAccount.FinanceDimension5			= EnteredFinanceDimension5
								invoked.DistributionAccount.FinanceDimension6			= EnteredFinanceDimension6
								invoked.DistributionAccount.FinanceDimension7			= EnteredFinanceDimension7
								invoked.DistributionAccount.FinanceDimension8			= EnteredFinanceDimension8
								invoked.DistributionAccount.FinanceDimension9			= EnteredFinanceDimension9
								invoked.DistributionAccount.FinanceDimension10			= EnteredFinanceDimension10
								invoked.AssetInformation.Asset							= EnteredAsset
								invoked.AssetInformation.AssetTemplate					= EnteredAssetTemplate
								invoked.DistributionPercent 							= RemainingPercentToBeDistributed
								if (EnteredGLEncumbranceReference entered)
									invoked.GLEncumbranceReference						= EnteredGLEncumbranceReference
				initialize DistributionTotalsComputed

		ValidateGTIN
			constraint (ItemGTIN is numeric)
				"GTINMustBeNumeric"

			if (IsInventoryOrNonstock)
				constraint (ActiveItemGTINRel exists)
					"GTINDoesNotExist"

				if (CreatePurchaseOrder
				and EnteredUOM entered
				and ItemGTIN   entered)
					constraint (ItemGTIN.UnitOfMeasure.UnitOfMeasure = EnteredUOM)
						"ItemGTINUnitOfMeasureOf<ItemGTIN.UnitOfMeasure.UnitOfMeasure>DoesNotMatchEnteredOrDefaultedUnitOfMeasureOf<EnteredUOM>"

			initialize GTINCheckDigit
			GTINCheckDigit.ItemGTIN		= ItemGTIN
			constraint (GTINCheckDigit.ValidCheckDigit)
				"GTINCheckDigitIsInvalid"

		InitializeSubstituteRelatedFields
			initialize Description
			initialize VendorItem
			initialize Manufacturer
			initialize ManufacturerNumber
			initialize Vendor
			initialize PurchaseFromLocation
			if (LocalSpecialItemUsed)
				default Vendor 				 to Contract.Vendor
				default PurchaseFromLocation to Contract.ApPoPurchaseFrom.PurchaseFromLocation
				default PurchaseFromLocation to Contract.ApPoPurchaseFrom.VendorLocation
				default	PurchaseFromLocation to first ContractRequestingLocationPurchaseFromRel.PurchaseFrom
				default	PurchaseFromLocation to first ContractLocationPurchaseFromRel.PurchaseFrom
				default	PurchaseFromLocation to first ContractCompanyPurchaseFromRel.PurchaseFrom
			else
				initialize Contract
				initialize ContractLine
		

		UseSubstituteItemWithLocationRule
			if (not LocalSpecialItemUsed)
				if (LocalFromCompanyLocationFromRule entered or LocalNonStockSubstitute)
					OriginalItem 	 					= LocalOriginalItem
					Item 		 	 					= LocalSubstituteItem
					FromCompanyLocationBin.FromCompany  = LocalFromCompanyLocationFromRule.FromCompany
					FromCompanyLocationBin.FromLocation = LocalFromCompanyLocationFromRule.FromLocation
					if (FromCompanyLocationBin not entered
					and LocalNonStockSubstitute)
						FromCompanyLocationBin.FromCompany  = LocalSubstituteFromCompanyLocation.FromCompany
						FromCompanyLocationBin.FromLocation = LocalSubstituteFromCompanyLocation.FromLocation
					if (IsReplenishmentFromVendor
					or LocalNonStockSubstitute)
						ItemType 							= ItemType.NonStock
					else
						ItemType 							= ItemType.Inventoried
					if (DoDebug)
						display "USESUB:Item:<Item>:EnteredUOM:<EnteredUOM>:ItemType:<ItemType>"

					if (EnteredUOM entered)
						if (CreatePurchaseOrder
						or  ItemType.NonStock)
							if (HasItemLocationStockUOM)
								if (not LocationItemUOMRel.OKForBuying)
									initialize EnteredUOM
							else
								if (not ItemUOMRel.OKForBuying)
									initialize EnteredUOM
						else
							if (HasItemLocationStockUOM)
								if (not LocationItemUOMRel.OKForTransaction)
									initialize EnteredUOM
							else
								if (not ItemUOMRel.OKForTransaction)
									initialize EnteredUOM
			else
				OriginalItem	= LocalOriginalItem
				Item			= LocalSubstituteItem
				Contract		= LocalContract
				ContractLine	= LocalContractLine
				EnteredUOM		= ContractLine.UOM
				ItemType		= ItemType.Special
			include InitializeSubstituteRelatedFields

		UseSubstituteItemNoLocationRule
			OriginalItem	= Item
			Item			= LocalSubstituteItem

			if (not LocalSpecialItemUsed)
				initialize ItemType
				default ItemType to DerivedDefaultItemType

				if (EnteredUOM entered)
					if (CreatePurchaseOrder)
						if (HasItemLocationStockUOM)
							if (not LocationItemUOMRel.OKForBuying)
								initialize EnteredUOM
						else
							if (not ItemUOMRel.OKForBuying)
								initialize EnteredUOM
					else
						if (HasItemLocationStockUOM)
							if (not LocationItemUOMRel.OKForTransaction)
								initialize EnteredUOM
						else
							if (not ItemUOMRel.OKForTransaction)
								initialize EnteredUOM
			else
				Contract		= LocalContract
				ContractLine	= LocalContractLine
				EnteredUOM		= ContractLine.UOM
				ItemType		= ItemType.Special
			include InitializeSubstituteRelatedFields

		FindAvailableQuantityForOriginalItemUsingLocationRule
			initialize LocalOriginalCanFulfillQuantity
			for each WarehouseLocationRuleDetailsRel
				LocalLocationRuleFromCompanyLocation.FromCompany	= each.LocationCompany
				LocalLocationRuleFromCompanyLocation.FromLocation	= each.InventoryLocation

				if (WarehouseLocationRuleItemLocationForAnItemRel exists
				and WarehouseLocationRuleItemLocationForAnItemRel.InventoryTracked
				and WarehouseLocationRuleItemLocationForAnItemRel.Active)
					if (not IsReplenishmentFromVendor)
						ItemType	= ItemType.Inventoried
					if (WarehouseLocationRuleItemLocationForAnItemRel.AvailableQuantity >= DerivedQuantityInStockUOM)

						LocalAvailableQuantityForOriginal							= WarehouseLocationRuleItemLocationForAnItemRel.AvailableQuantity
						LocalOriginalItemFromCompanyLocationFromRule.FromCompany	= LocalLocationRuleFromCompanyLocation.FromCompany
						LocalOriginalItemFromCompanyLocationFromRule.FromLocation	= LocalLocationRuleFromCompanyLocation.FromLocation
						LocalOriginalCanFulfillQuantity								= true

						end for each
					else
					if (WarehouseLocationRuleItemLocationForAnItemRel.AvailableQuantity > LocalAvailableQuantityForOriginal
					or  LocalOriginalItemFromCompanyLocationFromRule not entered)

						LocalAvailableQuantityForOriginal							= WarehouseLocationRuleItemLocationForAnItemRel.AvailableQuantity
						LocalOriginalItemFromCompanyLocationFromRule.FromCompany	= LocalLocationRuleFromCompanyLocation.FromCompany
						LocalOriginalItemFromCompanyLocationFromRule.FromLocation	= LocalLocationRuleFromCompanyLocation.FromLocation

			if (not LocalOriginalCanFulfillQuantity)
				LocalRemainingQuantity	= DerivedQuantityInStockUOM - LocalAvailableQuantityForOriginal

		FindSubstituteNoLocationRule
			if (each.IsItemMasterSubstitute)
				LocalSubstituteItem 		 	 = each.AssociatedItem.RelatedItem
				end for each

			else 
				initialize LocalContractHasError
				invoke ValidateContract each.Contract
					resume on error
						LocalContractHasError 		 = true
						LocalContractValidationError = error message
					if (CreationDate entered)
						invoked.EditDate			= CreationDate
					else
						invoked.EditDate			= current corporate date 
					invoked.Source            		= 1   
					invoked.PrmVendor         		= Vendor
					if (Requisition.RequestingLocation.Stockless)
						invoked.PrmStockless  		= true
					invoked.PrmSource           	= DerivedFormTitle

				if (not LocalContractHasError
				and each.Contract.ContractParticipantsExist)
					initialize LocalContractParticipantMatch
					for each each.Contract.ContractParticipant set
						if (each.ContractParticipant.ParticipantLocation.Company entered
						and each.ContractParticipant.ParticipantLocation.Company = FromCompanyLocationBin.FromCompany) 

							if (each.ContractParticipant.ParticipantLocation.RequestingLocation not entered
							and (each.ContractParticipant.ParticipantLocation.Location not entered 
							or each.ContractParticipant.ParticipantLocation.Location = FromCompanyLocationBin.FromLocation))
								LocalContractParticipantMatch = true
								end for each

							if (each.ContractParticipant.ParticipantLocation.RequestingLocation entered
							and each.ContractParticipant.ParticipantLocation.RequestingLocation = Requisition.RequestingLocation)						
								LocalContractParticipantMatch = true
								end for each

						if (each.ContractParticipant.ParticipantLocation.PricingGroup entered
						and (FromCompanyLocationBin.FromCompany.PricingGroup = each.ContractParticipant.ParticipantLocation.PricingGroup
						or RequestingLocation.PricingGroup = each.ContractParticipant.ParticipantLocation.PricingGroup
						or FromCompanyLocationBin.FromLocation.PricingGroup = each.ContractParticipant.ParticipantLocation.PricingGroup))
							LocalContractParticipantMatch = true
							end for each


				if (not LocalContractHasError
				and (not each.Contract.ContractParticipantsExist 
				or LocalContractParticipantMatch)) 
					LocalSubstituteItem	= each.AssociatedItem.RelatedItem
					LocalContract		= each.Contract
					LocalContractLine	= each.ContractLine
					LocalSpecialItemUsed = true
					end for each
				else
					if (DoDebug)
						display "InvalidSubstituteContract:<each.Contract>:<LocalContractValidationError>"

		FindWarehouseLocationSubstitute
			if (DoDebug)
				display "FindWarehouseLocationSubstitute"

			initialize LocalSubstituteFound
			if (WarehouseLocationSubstituteWithLocationRel exists) 
				for each WarehouseLocationSubstituteWithLocationRel
					if (DoDebug)
						display "CompanyLocationSubLevel"
					if (each.IsItemMasterSubstitute)
						if (LocalSubstituteItem not entered)
							LocalOriginalItem 	 = Item
							LocalSubstituteItem	 = each.AssociatedItem.RelatedItem
							LocalItem 			 = LocalSubstituteItem
							LocalSubstituteFound = true
							LocalSubstituteFromCompanyLocation = LocalLocationRuleFromCompanyLocation
							initialize LocalFromCompanyLocationFromRule
							if (DoDebug)
								display "GetSubstitute:<LocalSubstituteItem>:SubLocation:<LocalSubstituteFromCompanyLocation>"
							if (WarehouseLocationRuleItemLocationForAnItemRel not exists
							or  not WarehouseLocationRuleItemLocationForAnItemRel.InventoryTracked)
								LocalNonStockSubstitute = true
							end for each
						else
						if  (LocalSubstituteItem not = each.AssociatedItem.RelatedItem)
							LocalCheckItem = each.AssociatedItem.RelatedItem
							if (SubstituteItemAtLocationRel exists)
								if (SubstituteItemAtLocationRel.AvailableQuantity > 0
								or  LocalNonStockSubstitute)
									LocalOriginalItem 	 = Item
									LocalSubstituteItem	 = each.AssociatedItem.RelatedItem
									LocalItem 			 = LocalSubstituteItem
									LocalSubstituteFound = true
									LocalSubstituteFromCompanyLocation = LocalLocationRuleFromCompanyLocation
									initialize LocalFromCompanyLocationFromRule
									initialize LocalNonStockSubstitute
									if (DoDebug)
										display "ReplaceSubstitute:<LocalSubstituteItem>:SubLocation:<LocalSubstituteFromCompanyLocation>"
									end for each
	
					if (each.ContractLineForSubstitution)
						LocalSubstituteFound = true
						include CheckSpecialSubstituteForWarehouseLocation

			if (not LocalSubstituteFound
			and WarehouseLocationSubstituteCompanyOnlyRel exists) 
				if (DoDebug)
					display "CompanySubLevel"
				for each WarehouseLocationSubstituteCompanyOnlyRel
					if (each.IsItemMasterSubstitute) 
						if (LocalSubstituteItem not entered)
							LocalOriginalItem 	 = Item
							LocalSubstituteItem	 = each.AssociatedItem.RelatedItem
							LocalItem 			 = LocalSubstituteItem
							LocalSubstituteFromCompanyLocation = LocalLocationRuleFromCompanyLocation
							LocalSubstituteFound = true
							initialize LocalFromCompanyLocationFromRule
							if (DoDebug)
								display "GetSubstitute:<LocalSubstituteItem>:SubLocation:<LocalSubstituteFromCompanyLocation>"
							if (WarehouseLocationRuleItemLocationForAnItemRel not exists
							or  not WarehouseLocationRuleItemLocationForAnItemRel.InventoryTracked)
								LocalNonStockSubstitute = true
							end for each
						else
						if  (LocalSubstituteItem not = each.AssociatedItem.RelatedItem)
							LocalCheckItem = each.AssociatedItem.RelatedItem
							if (SubstituteItemAtLocationRel exists)
								if (SubstituteItemAtLocationRel.AvailableQuantity > 0
								or  LocalNonStockSubstitute)
									LocalOriginalItem 	 = Item
									LocalSubstituteItem	 = each.AssociatedItem.RelatedItem
									LocalItem 			 = LocalSubstituteItem
									LocalSubstituteFound = true
									LocalSubstituteFromCompanyLocation = LocalLocationRuleFromCompanyLocation
									initialize LocalFromCompanyLocationFromRule
									initialize LocalNonStockSubstitute
									if (DoDebug)
										display "ReplaceSubstitute:<LocalSubstituteItem>:SubLocation:<LocalSubstituteFromCompanyLocation>"
									end for each

					if (each.ContractLineForSubstitution)
						LocalSubstituteFound = true
						include CheckSpecialSubstituteForWarehouseLocation

			if (not LocalSubstituteFound
			and SubstituteItemByPriorityNoLocationRel exists) 
				if (DoDebug)
					display "GlobalSubLevel"
				for each SubstituteItemByPriorityNoLocationRel
					if (each.IsItemMasterSubstitute)
						if (LocalSubstituteItem not entered)
							LocalOriginalItem 	 = Item
							LocalSubstituteItem	 = each.AssociatedItem.RelatedItem
							LocalItem 			 = LocalSubstituteItem
							LocalSubstituteFromCompanyLocation = LocalLocationRuleFromCompanyLocation
							initialize LocalFromCompanyLocationFromRule
							if (DoDebug)
								display "GetSubstitute:<LocalSubstituteItem>:SubLocation:<LocalSubstituteFromCompanyLocation>"
							if (WarehouseLocationRuleItemLocationForAnItemRel not exists
							or  not WarehouseLocationRuleItemLocationForAnItemRel.InventoryTracked)
								LocalNonStockSubstitute = true											
							end for each
						else
						if  (LocalSubstituteItem not = each.AssociatedItem.RelatedItem)
							LocalCheckItem = each.AssociatedItem.RelatedItem
							if (SubstituteItemAtLocationRel exists)
								if (SubstituteItemAtLocationRel.AvailableQuantity > 0
								or  LocalNonStockSubstitute)
									LocalOriginalItem 	 = Item
									LocalSubstituteItem	 = each.AssociatedItem.RelatedItem
									LocalItem 			 = LocalSubstituteItem
									LocalSubstituteFromCompanyLocation = LocalLocationRuleFromCompanyLocation
									initialize LocalFromCompanyLocationFromRule
									initialize LocalNonStockSubstitute
									if (DoDebug)
										display "ReplaceSubstitute:<LocalSubstituteItem>:SubLocation:<LocalSubstituteFromCompanyLocation>"
									end for each
					
					if (each.ContractLineForSubstitution)
						if (DoDebug)
							display "CheckSpecialSubForNoLoc"
						include CheckSpecialSubstituteForWarehouseLocation

		CheckSpecialSubstituteForWarehouseLocation
			if (DoDebug)
				display "CheckSpecialSubstituteForWarehouseLocation"
			initialize LocalContractHasError
			invoke ValidateContract each.Contract
				resume on error
					LocalContractHasError 		 = true
					LocalContractValidationError = error message
				if (CreationDate entered)
					invoked.EditDate			= CreationDate
				else
					invoked.EditDate			= current corporate date 
				invoked.Source            		= 1   
				invoked.PrmVendor         		= Vendor
				if (Requisition.RequestingLocation.Stockless)
					invoked.PrmStockless  		= true
				invoked.PrmSource           	= DerivedFormTitle

				if (not LocalContractHasError
				and each.Contract.ContractParticipantsExist)
					initialize LocalContractParticipantMatch
					for each each.Contract.ContractParticipant set
						if 	(each.ContractParticipant.ParticipantLocation.Company = LocalLocationRuleFromCompanyLocation.FromCompany 
						and ((each.ContractParticipant.ParticipantLocation.Location not entered
						and each.ContractParticipant.ParticipantLocation.RequestingLocation not entered)
						or 	each.ContractParticipant.ParticipantLocation.Location = LocalLocationRuleFromCompanyLocation.FromLocation)) 
							LocalContractParticipantMatch = true
							end for each

						if  (each.ContractParticipant.ParticipantLocation.Company entered
						and each.ContractParticipant.ParticipantLocation.Company = FromCompanyLocationBin.FromCompany) 

							if  (each.ContractParticipant.ParticipantLocation.RequestingLocation entered
							and each.ContractParticipant.ParticipantLocation.RequestingLocation = Requisition.RequestingLocation)			
								LocalContractParticipantMatch = true
								end for each

						if  (each.ContractParticipant.ParticipantLocation.PricingGroup entered
						and (LocalLocationRuleFromCompanyLocation.FromLocation.PricingGroup = each.ContractParticipant.ParticipantLocation.PricingGroup
						or	LocalLocationRuleFromCompanyLocation.FromCompany.PricingGroup = each.ContractParticipant.ParticipantLocation.PricingGroup))
							LocalContractParticipantMatch = true
							end for each

			if (not LocalContractHasError
			and (not each.Contract.ContractParticipantsExist 
			or LocalContractParticipantMatch)) 
				if (DoDebug)
					display "UseSpecialItemContract:<each.AssociatedItem.RelatedItem>:<each.Contract>"
				LocalSpecialItemUsed = true
				LocalSubstituteItem  = each.AssociatedItem.RelatedItem
				LocalContract		= each.Contract
				LocalContractLine	= each.ContractLine
				FromCompanyLocationBin.FromCompany  = LocalLocationRuleFromCompanyLocation.FromCompany
				FromCompanyLocationBin.FromLocation = LocalLocationRuleFromCompanyLocation.FromLocation
				end for each

		InventoryLocationStatusValidation
			constraint (Requisition.FromCompanyLocation.FromLocation.Status.Active)
				"InventoryLocation<Requisition.FromCompanyLocation.FromLocation>MustBeActive"

		VendorUOMAndSourceUOMValidation
			if (ItemLocationRel.DefaultSourceUOM.UnitOfMeasure entered
			and not InventoryCompanyRel.AllowOverrideOfSourceUOM)
				if (VendorItem.VendorBuyUOM.UnitOfMeasure entered)
					constraint (VendorItem.VendorBuyUOM.UnitOfMeasure = ItemLocationRel.DefaultSourceUOM.UnitOfMeasure)
						"ConflictBetweenVendorBuyUOMAndSourceUOM"
				else
					if (HasItemLocationStockUOM)
						if (LocationItemUOMRel.OKForBuying)
							constraint (EnteredUOM = ItemLocationRel.DefaultSourceUOM.UnitOfMeasure)
								"SourceUOMExists;UseUOM<ItemLocationRel.DefaultSourceUOM.UnitOfMeasure>"
						else

							constraint (DerivedLocationStockUOM = ItemLocationRel.DefaultSourceUOM.UnitOfMeasure)
								"SourceUOMExists;UseUOM<ItemLocationRel.DefaultSourceUOM.UnitOfMeasure>"
					else
						constraint (EnteredUOM = ItemLocationRel.DefaultSourceUOM.UnitOfMeasure)
							"SourceUOMExists;UseUOM<ItemLocationRel.DefaultSourceUOM.UnitOfMeasure>"

			if (ItemLocationRel.DefaultSourceUOM.UnitOfMeasure not entered
			and HasItemLocationStockUOM
			and VendorItem.VendorBuyUOM.UnitOfMeasure entered)
				constraint (VendorBuyLocationItemUOMRel.OKForBuying)
					"VendorItemBuyUnitOfMeasureOf<VendorItem.VendorBuyUOM.UnitOfMeasure>IsNotAValidUOMOnTheLocation"

	Derived Fields
	
		DisplayQuantity is a DerivedField 
			type is like UnsignedQuantity
				precision is DerivedNumberOfDecimalsQuantity
			return Quantity

		DisplayFromWarehouseDemandLineQuantity is a DerivedField
			type is like Quantity
				precision is Item.NumberOfDecimalsQuantity
			if (HasItemLocationStockUOM)
				return WarehouseDemandLines2Rel.Quantity / DerivedLocationStockUOMMultiplier
			else
				return WarehouseDemandLines2Rel.Quantity

		DisplayFromWarehouseDemandLineAllocatedQuantity is a DerivedField
			type is like Quantity
				precision is Item.NumberOfDecimalsQuantity
			if (HasItemLocationStockUOM)
				return WarehouseDemandLines2Rel.AllocatedQuantity / DerivedLocationStockUOMMultiplier
			else
				return WarehouseDemandLines2Rel.AllocatedQuantity 		

		DisplayFromWarehouseDemandLineBackorderedQuantity  is a DerivedField
			type is like Quantity
				precision is Item.NumberOfDecimalsQuantity
			if (HasItemLocationStockUOM)
				return WarehouseDemandLines2Rel.BackorderedQuantity / DerivedLocationStockUOMMultiplier
			else
				return WarehouseDemandLines2Rel.BackorderedQuantity

		DisplayKilledQuantity is a DerivedField
			type is like Quantity
				precision is DerivedNumberOfDecimalsQuantity
			return KilledQuantity

		DisplayReturnQuantity is a DerivedField
			type is like Quantity
				precision is DerivedNumberOfDecimalsQuantity
			return ReturnQuantity

		DisplayInterfaceCancelQuantity is a DerivedField
			type is like Quantity
				precision is DerivedNumberOfDecimalsQuantity
			return InterfaceCancelQuantity

		DisplayEnteredUOM is a DerivedField
			type is like UnitOfMeasure
			return EnteredUOM
		
		DisplayFromPurchaseOrderInterfaceEnteredUOM is a DerivedField
			type is like UnitOfMeasure
			return PurchaseOrderInterfaceRel.EnteredUOM		

		DisplayFromUnreleasedPOLineSourcesEnteredUOM is a DerivedField
			type is like UnitOfMeasure
			return UnreleasedPurchaseOrderLineSourcesRel.EnteredUOM		

		DisplayFromReleasedPOLineSourcesEnteredUOM is a DerivedField
			type is like UnitOfMeasure
			return ReleasedPurchaseOrderLineSourcesRel.EnteredUOM	



		MissingDistributionAccountMsg is a MessageField   
			"Warning:_MissingDistributionAccount"
		
		DerivedBatchQuantity	is a DerivedField
			type is like Quantity
			if (IsCatchWeightItem)
				DerivedBatchQuantity = WarehouseDemandLines2Rel.BackorderedQuantity / RecipeRel.SecondaryYieldQuantity
			else
				DerivedBatchQuantity = WarehouseDemandLines2Rel.BackorderedQuantity / RecipeRel.BatchYieldQuantity
			round DerivedBatchQuantity up to nearest 1
			return DerivedBatchQuantity

		DerivedTaxEntity	is a DerivedField
			type is like AccountingEntity
			restricted
			if (FromCompanyLocationBin.FromCompany.AccountingEntity entered)
				return FromCompanyLocationBin.FromCompany.AccountingEntity
			else
				return Requisition.FromCompanyLocation.FromCompany.AccountingEntity

		DerivedLineQuantity is a DerivedField
			type is like Quantity
			restricted
			if (Quantity entered)
				return Quantity
			else
				return 1

		RequisitionAndLine is a LabelField
			"Company:<Company>|Requisition:<Requisition>|Line:<RequisitionLine>"
		
		RSSLPLNoCompanyRequisitionAndLine is a LabelField
			"Requisition:<Requisition>|Line:<RequisitionLine>"

		VendorItemDisplay is a MessageField
			default label is "VendorItem"
			"<VendorItem.VendorItemDescription>_<VendorItem>"

		QuantityMenuItemDisplay is a LabelField
			"<Item.CardViewItemWithDescription>_(<DerivedQuantityWithUOM>)"

		RequisitionAndLineDisplay is a LabelField
			"RQ:<Requisition>|Line:<RequisitionLine>"

		RequisitionLineDisplay is a LabelField
			"RequisitionLine:<RequisitionLine>"

		RequestingCompanyAndLocationDisplay is a LabelField
			"<Company.DerivedCompanyDisplay>|<Requisition.RequestingLocation.RequestingLocationNameID>"

		InventoryCompanyAndLocationDisplay is a LabelField
			"<FromCompanyLocationBin.FromCompany.DerivedCompanyDisplay>|<FromCompanyLocationBin.FromLocation.DerivedInventoryLocationIDName>"

		SubstituteItemMessage is a MessageField
			"Item<Item>IsA<OriginalItemMessage>ForOriginalItem<OriginalItem>"

		BudgetErrorsMessage is a MessageField
			"LineDistributionsHaveBudgetErrors"
			
		OriginalItemMessage is a DerivedField
			type is Alpha size 22
			if (Item = OriginalItemRel.ReplacementItem)
				return "Replacement"
			else
			if (RelatedItemRel exists)
				return "Substitute"
			else
				return "Replacement/Substitute"

		ItemAddedMessage is a MessageField
			restricted
			"<Item>AddedToRequisition"

		ItemUpdatedMessage is a MessageField
			restricted
			"<Item>UpdatedOnRequisition"

		SelectedItemsAddedMessage is a MessageField
			restricted
			"SelectedItemsAddedToRequisition"

		SelectedItemsUpdatedMessage is a MessageField
			restricted
			"SelectedItemsUpdatedOnRequisition" 

		QuantityForAComponentGroup is a ComputeField 
			type is Numeric size 2
			restricted
			(sum RequisitionLinesForComponentGroup.Quantity)

		DerivedComponentCostForSwap is a DerivedField 
			type is like UnitCost
				precision is DerivedNumberOfDecimalsCost
			if (first ProcedureForThisRequisitionRel.CapitatedProcedureLevel = 1)
				if (ThisContractCapitatedComponentGroupLocationRel exists)
					return first ThisContractCapitatedComponentGroupLocationRel.PrimaryFinalCost
				else 
				if (ThisContractCapitatedComponentGroupCompanyRel exists)
					return first ThisContractCapitatedComponentGroupCompanyRel.PrimaryFinalCost
				else
					return first ThisContractCapitatedComponentGroupItemRel.PrimaryFinalCost 
			else 
			if (first ProcedureForThisRequisitionRel.CapitatedProcedureLevel = 2)
				if (ThisContractCapitatedComponentGroupLocationRel exists)
					return first ThisContractCapitatedComponentGroupLocationRel.RevisionFinalCost
				else 
				if (ThisContractCapitatedComponentGroupCompanyRel exists)
					return first ThisContractCapitatedComponentGroupCompanyRel.RevisionFinalCost
				else
					return first ThisContractCapitatedComponentGroupItemRel.RevisionFinalCost 

		DerivedCreationDate is a DerivedField
			type is Date
			TimeStampInGMT.Value = CreationDate
			return TimeStampInGMT.CorporateDate

		DerivedDefaultItemType is a DerivedField
			type is like ItemType
			restricted
			if  ((ItemLocationRel.InventoryTracked and not ParItemWithReplenishmentSource)
			or  (ParItemWithReplenishmentSource 
			and (RequestingItemLocationRel.ItemReplenishmentSourcesRel.ReplenishFrom entered 
			or  RequestingOriginalItemLocationRel.ItemReplenishmentSourcesRel.ReplenishFrom entered)))

				return ItemType.Inventoried
			else
				if (ItemExists)
					return ItemType.NonStock
				else
					return ItemType.Special

		DerivedEntityCalendarPeriod is a DerivedField
			type is like GeneralLedgerCalendarPeriod
			restricted
			return first GeneralLedgerCalendarPeriodRel.GeneralLedgerCalendarPeriod


		DerivedTranVisitNumber is a DerivedField
			type is AlphaUpper size 20
			restricted
			if (DisplayOfProcedureInfo)
				if (action type.Update)
					return blank
				else
					return PatientProcedure.VisitNumber
		DerivedTranPatientID is a DerivedField
			type is AlphaUpper size 20
			restricted
			if (DisplayOfProcedureInfo)
				if (action type.Update)
					return blank
				else
					return PatientProcedure.PatientID
		DerivedTranCaseNumber is a DerivedField
			type is like CaseNumber
			restricted
			if (DisplayOfProcedureInfo)
				if (action type.Update)
					return blank
				else
					return PatientProcedure.CaseNumber
		DerivedTranProcedure is a DerivedField
			type is like Procedure
			restricted
			if (DisplayOfProcedureInfo)
				if (action type.Update)
					return blank
				else
					return PatientProcedure.Procedure
		DerivedTranProcedureDate is a DerivedField
			type is Date
			restricted
			if (DisplayOfProcedureInfo)
				if (action type.Update)
					return blank
				else
					return PatientProcedure.ProcedureDate
		DerivedTranProcedureModifier is a DerivedField
			type is Alpha size 2
			restricted
			if (DisplayOfProcedureInfo)
				if (action type.Update)
					return blank
				else
					return PatientProcedure.ProcedureModifier
		DerivedTranPhysicianName is a DerivedField 
			type is like PhysName
			holds pii
			restricted
			if (DisplayOfProcedureInfo)
				if (action type.Update)
					return blank
				else
					return PatientProcedure.PhysicianName
		DerivedTranNurseCoordinator	is a DerivedField
			type is like NrsCoord
			restricted
			if (DisplayOfProcedureInfo)
				if (action type.Update)
					return blank
				else
					return PatientProcedure.NurseCoordinator
		DerivedTranPatientLastName	is a DerivedField 
			type is like LastName
			holds pii
			restricted
			if (DisplayOfProcedureInfo)
				if (action type.Update)
					return blank
				else
					return PatientProcedure.PatientLastName
		DerivedTranPatientFirstName	is a DerivedField 
			type is like FirstName	 
			holds pii
			restricted
			if (DisplayOfProcedureInfo)
				if (action type.Update)
					return blank
				else
					return PatientProcedure.PatientFirstName
		DerivedTranPatientMiddleName is a DerivedField 
			type is like MiddleName
			holds pii
			restricted
			if (DisplayOfProcedureInfo)
				if (action type.Update)
					return blank
				else
					return PatientProcedure.PatientMiddleName
		DerivedTranBirthdate		is a DerivedField
			type is Date
			restricted
			if (DisplayOfProcedureInfo)
				if (action type.Update)
					return blank
				else
					return PatientProcedure.Birthdate
		DerivedTranGender  			is a DerivedField
			type is like Gender
			restricted
			if (DisplayOfProcedureInfo)
				if (action type.Update)
					return blank
				else
					return PatientProcedure.Gender
		DerivedTranSocialSecurityNumber is a DerivedField 
			type is like TaxID
			holds pii
			restricted
			if (DisplayOfProcedureInfo)
				if (action type.Update)
					return blank
				else
					return PatientProcedure.SocialSecurityNumber
		DerivedTranSalesRepresentative is a DerivedField
			type is like SalesRep
			restricted
			if (DisplayOfProcedureInfo)
				if (action type.Update)
					return blank
				else
					return PatientProcedure.SalesRepresentative
		DerivedTranOrderNumber is a DerivedField
			type is like OrdNbr
			restricted
			if (DisplayOfProcedureInfo)
				if (action type.Update)
					return blank
				else
					return PatientProcedure.OrderNumber
		DerivedTranRequestor is a DerivedField
			type is like Requestor
			restricted
			if (DisplayOfProcedureInfo)
				if (action type.Update)
					return blank
				else
					return PatientProcedure.Requestor
		DerivedTranLot is a DerivedField
			type is like ItemLot
			restricted
			if (DisplayOfProcedureInfo)
				if (action type.Update)
					return blank
				else
					return PatientProcedure.Lot
		DerivedTranSerialNumber is a DerivedField
			type is like ItemSerialNumber
			restricted
			if (DisplayOfProcedureInfo)
				if (action type.Update)
					return blank
				else
					return PatientProcedure.SerialNumber
		DerivedTranUserDefinedField1 is a DerivedField
			type is like Userdef1
			restricted
			if (DisplayOfProcedureInfo)
				if (action type.Update)
					return blank
				else
					return PatientProcedure.UserDefinedField1
		DerivedTranUserDefinedField2 is a DerivedField
			type is like Userdef2
			restricted
			if (DisplayOfProcedureInfo)
				if (action type.Update)
					return blank
				else
					return PatientProcedure.UserDefinedField2
		DerivedTranUniqueDeviceId is a DerivedField
			type is Alpha 120
			restricted
			if (DisplayOfProcedureInfo)
				if (action type.Update)
					return blank
				else
					return PatientProcedure.UniqueDeviceId
		DerivedTranGTIN is a DerivedField
			type is like ItemGTIN
			restricted
			if (DisplayOfProcedureInfo)
				if (action type.Update)
					return blank
				else
					return PatientProcedure.GTIN
		DerivedTranManufacturer is a DerivedField
			type is Alpha size up to 9
			restricted
			if (DisplayOfProcedureInfo)
				if (action type.Update)
					return blank
				else
					return PatientProcedure.Manufacturer
		DerivedTranManufacturerCode is a DerivedField
			type is like ManufacturerCode
			restricted
			if (DisplayOfProcedureInfo)
				if (action type.Update)
					return blank
				else
					return PatientProcedure.Manufacturer.ManufacturerCode
		DerivedTranManufacturerDivision is a DerivedField
			type is like ManufacturerDivision
			restricted
			if (DisplayOfProcedureInfo)
				if (action type.Update)
					return blank
				else
					return PatientProcedure.Manufacturer.ManufacturerDivision
		DerivedTranManufacturerNumber is a DerivedField
			type is like ManufacturerNumber
			restricted
			if (DisplayOfProcedureInfo)
				if (action type.Update)
					return blank
				else
					return PatientProcedure.ManufacturerNumber
		DerivedTranManufacturingDate is a DerivedField
			type is Date
			restricted
			if (DisplayOfProcedureInfo)
				if (action type.Update)
					return blank
				else
					return PatientProcedure.ManufacturingDate
		DerivedTranExpirationDate is a DerivedField
			type is Date
			restricted
			if (DisplayOfProcedureInfo)
				if (action type.Update)
					return blank
				else
					return PatientProcedure.ExpirationDate

		DerivedPatientProcedureUpdate is a DerivedField
			type is AlphaUpper size 1
			restricted
			if (DisplayOfProcedureInfo)
				if (action type.Update)
					return blank
				else
					return "Y"

		DerivedRequisitionLineForDisplay is a DerivedField
			type is Numeric size 6
			return RequisitionLine

		DerivedItemType is a DerivedField
			type is Alpha size 11
			if (ItemType.Inventoried)
				return "Inventoried"
			else
			if (ItemType.NonStock)
				return "Nonstock"
			else
			if (ItemType.Special)
				return "Special"
			else
			if (ItemType.Service)
				return "Service"

		ContextMessageEntityType is a StringField
			type is Alpha 30
			restricted
			"InforRequisitionLine"

		ContextMessageText is a MessageField
			restricted
			"RequisitionLine<RequisitionLine>OfRequisition<Requisition>"

		DerivedStrippedManufacturerNumber is a DerivedField
			type is like ManufacturerNumber
			return com.lawson.apps.procurement.base.StringUtils.stripNonAlphaNumeric(ManufacturerNumber)

		DerivedStrippedVendorItem is a DerivedField
			type is AlphaUpper size 32
			return com.lawson.apps.procurement.base.StringUtils.stripNonAlphaNumeric(VendorItem)

		DerivedStrippedItem is a DerivedField
			type is AlphaUpper size 32
			return com.lawson.apps.procurement.base.StringUtils.stripNonAlphaNumeric(Item)

		DefaultExchangeDate is a DerivedField
			type is Date
			if (RequestedDeliveryDate entered)
				return RequestedDeliveryDate
			return CreationDate
			return current timestamp


		ReqLineCount is a DerivedField
			type is Numeric 1
			restricted
			return 1

		ReqLineValue is a DerivedField
			type is like InternationalAmount
			restricted
			return Quantity * UnitCost

		ApprovedLineCount is a DerivedField
			type is Numeric 1
			restricted
			if (Approved)
				return 1

		NotApprovedLineCount is a DerivedField
			type is Numeric 1
			restricted
			if (!Approved)
				return 1

		KilledLineCount is a DerivedField
			type is Numeric 1
			restricted
			if (KilledQuantity = Quantity)
				return 1

		KilledValue is a DerivedField
			type is like InternationalAmount
			restricted
			if (KilledQuantity > 0)
				return KilledQuantity * UnitCost

		ReturnValue is a DerivedField
			type is like InternationalAmount
			restricted
			if (ReturnQuantity > 0)
				return ReturnQuantity * UnitCost

		LinesToSourcingCount is a DerivedField
			type is Numeric 1
			restricted
			if (CreatePurchaseOrder)
				if (SourcingEventRequired)
					return 1

		LinesToSourcingValue is a DerivedField
			type is like InternationalAmount
			restricted
			if (CreatePurchaseOrder)
				if (SourcingEventRequired)
					return Quantity * UnitCost

		PCardOrderCount is a DerivedField
			type is Numeric 1
			restricted
			if (UseProcurementCard)
				return 1

		PCardOrderValue is a DerivedField
			type is like InternationalAmount
			restricted
			if (UseProcurementCard)
				return  Quantity * UnitCost

		FirstPurchaseOrder is a DerivedField
			type is like PurchaseOrder
			restricted
			return first PurchaseOrderLineSourcesRel.PurchaseOrderLine.PurchaseOrder

		FirstPurchaseOrderLine is a DerivedField
			type is like PurchaseOrderLine
			restricted
			return first PurchaseOrderLineSourcesRel.PurchaseOrderLine.PurchaseOrderLine

		FirstPODate is a DerivedField
			type is Date
			restricted
			return first PurchaseOrderLineSourcesRel.PurchaseOrder.PurchaseOrderDate

		FirstPOLine is a DerivedField
			type is Alpha size 30
			restricted
			if (FirstPurchaseOrderLine != blank)
				return (PurchaseOrderLineSourcesRel.Company + "/" + FirstPurchaseOrder + "/" + FirstPurchaseOrderLine)
			else
				return "No PO Line"

		PurchaseOrdersForLine is a DerivedField
			type is Text
			default label is "PurchaseOrder"
			if (PurchaseOrderLineSourcesRel exists)
				for each PurchaseOrderLineSourcesRel
					if (PurchaseOrdersForLine entered)
						PurchaseOrdersForLine += ", "	
					PurchaseOrdersForLine += each.PurchaseOrder
				return PurchaseOrdersForLine

		DaysFromReqApprovalToPoCreation is a DerivedField
			type is Numeric 6
			restricted
			if (Approved)
				if (ApprovedRejectedDate entered)
					if (FirstPODate entered)
						return (FirstPODate - ApprovedRejectedDate date)

		DaysFromReqCreationToApproval is a DerivedField
			type is Numeric 6
			restricted
			if (Approved)
				if (ApprovedRejectedDate entered)
					return (ApprovedRejectedDate date - RequisitionLine.CreationDate date)

		DerivedTimeIntelligenceDimension is a DerivedField
			type is like TimeIntelligence
			restricted
			return "CurrentPeriod"

		DerivedSpendCategoryDimension is a DerivedField
			type is like SpendCategory
			restricted
			if (Contract not entered)
				if (CostCode.Punchout)
					return 1 
				else
				if (ItemOnContractRel exists)
					return 2 
				else
					return 3 
			else
				return 1 

		DerivedSourcingEventDimension is a DerivedField
			type is like YesOrNo
			restricted
			if (SourcingEventRequired)
				return "Y"
			else
				return "N"

		DerivedApprovedDimension is a DerivedField
			type is like YesOrNo
			restricted
			if (Approved)
				return "Y"
			else
				return "N"

		DerivedCreatePurchaseOrderDimension is a DerivedField
			type is like YesOrNo
			restricted
			if (CreatePurchaseOrder)
				return "Y"
			else
				return "N"

		DerivedDropshipDimension is a DerivedField
			type is like YesOrNo
			restricted
			if (Requisition.Dropship)
				return "Y"
			else
				return "N"

		DerivedPCardDimension is a DerivedField
			type is like YesOrNo
			restricted
			if (UseProcurementCard)
				return "Y"
			else
				return "N"

		DerivedTaxableDimension is a DerivedField
			type is like YesOrNo
			restricted
			if (PurchaseTaxable)
				return "Y"
			else
				return "N"

		DerivedClosedDimension is a DerivedField
			type is like YesOrNo
			restricted
			if (Closed)
				return "Y"
			else
				return "N"


		RequesterEmailAddress is a DerivedField
			type is like EmailAddress
			restricted
			return Requisition.RequesterEmailAddress

		DerivedAppsValue				is a DerivedField
			type is like PfiAppsValue
			restricted
			return "RequisitionLineApproval" + UniqueID			

		UserActionRoutingAsHtml			is a DerivedField
			type is RichText
			return first PfiWorkunitRel.UserActionRoutingAsHtml

		UserActionRoutingAsJson			is a DerivedField
			type is Text
			return first PfiWorkunitRel.UserActionRoutingAsJson

		SourcingEstimateMessage is a MessageField
			"Warning:_Sourcing_EventRequired;_CostIsAnEstimate"

		NoRequisitionLinesToReviewMessage is a MessageField
			restricted
			"All_Inventory_Items_UpToDate"

		DistributionQuantityTotal is a DerivedField
			type is like Quantity
			restricted
			include DistributionTotals
			return LocalTotalDistributionQuantity

		DistributionAmountTotal is a DerivedField
			type is like InternationalAmount
			restricted
			include DistributionTotals
			return LocalTotalDistributionAmount

		DistributionPercentTotal is a DerivedField
			type is Percent size 6.3
			restricted
			include DistributionTotals
			return LocalTotalDistributionPercent

		RemainingQuantityToBeDistributed is a ComputeField
			type is Decimal size 13.4
			restricted
			(Quantity - DistributionQuantityTotal)

		RemainingAmountToBeDistributed is a DerivedField
			type is like InternationalAmount
			restricted
			return (LineExtendedAmount - DistributionAmountTotal)

		RemainingPercentToBeDistributed is a ComputeField
			type is Percent size 6.3
			restricted
			(100% - DistributionPercentTotal)

		DerivedRemainingUnit is a DerivedField
			type is Text 
			restricted
			include DistributionTotals
			if (DistributionBy.ByQuantity)
				return QuantityMessage
			else
			if (DistributionBy.ByAmount)
				return AmountMessage
			else
				return PercentMessage

		RemainingToBeDistributed			is a MessageField
			restricted
			"Remaining<DerivedRemainingUnit>ToBeDistributed:"

		QuantityMessage						is a MessageField
			restricted
			"Quantity"
		AmountMessage						is a MessageField
			restricted
			"Amount"
		PercentMessage						is a MessageField
			restricted
			"Percent"
		ClosedMessage						is a MessageField
			restricted
			"Closed"

		UnreleasedMessage					is a MessageField
			restricted
			"Unreleased"

		NeedsApprovalMessage				is a MessageField
			restricted
			"NeedsApproval"

		ProcessedMessage					is a MessageField
			restricted
			"Processed"

		RejectedMessage						is a MessageField
			restricted
			"Rejected"

		DerivedStatusMessage               is a DerivedField
			type is MessageField
			if (Closed
			and not IsRejectedStatus)
				return ClosedMessage
			else
			if (IsUnreleasedStatus)
				return UnreleasedMessage
			else
			if (IsReleasedStatus)
				return NeedsApprovalMessage
			else
			if (Status.Processed
			and IsOpen)
				return ProcessedMessage
			else
			if (IsRejectedStatus)
				return RejectedMessage
			else
				return blank

		InventoryMessage                   	is a MessageField
			restricted
			"Inventory"

		NonStockMessage         		   	is a MessageField
			restricted
			"NonStock"

		RSSSubstituteItemMessage 			is a MessageField
			"Item<Item>IsA<OriginalItemMessage>ForOriginalItem<OriginalItem>"

		SubstituteItemLabel		 			is a LabelField
			"<OriginalItemMessage>ForItem<OriginalItem>"

		SpecialMessage       			   	is a MessageField
			restricted
			"Special"

		ServiceMessage						is a MessageField
			restricted
			"Service"

		DerivedItemTypeMessage				is a DerivedField
			type is Text
			if (ItemType.Inventoried)
				return InventoryMessage
			else
			if (ItemType.NonStock)
				return NonStockMessage
			else
			if (ItemType.Special)
				return SpecialMessage
			else
			if (ItemType.Service)
				return ServiceMessage
			else
				return blank

		CreateActionCompletionMessage		is a MessageField
			"RequisitionLine_created<LocalCreateActionCompletionMessageDetail>"

		SkippingAllocationOfOriginalForSpecialSubstituteMessage	is a MessageField
			"-_skipping_allocation_of_original_item_for_special_item_substitute"













		IssueMessage  		               is a MessageField
			restricted
			"Issue"

		DirectTransferMessage  		   	   is a MessageField
			restricted
			"DirectTransfer"

		IntransitTransferMessage  		   is a MessageField
			restricted
			"IntransitTransfer"

		DerivedTransactionTypeMessage      is a DerivedField
			type is Text
			if (InventoryTransactionType.Issue)
				return IssueMessage
			if (InventoryTransactionType.DirectTransfer)
				return DirectTransferMessage
			if (InventoryTransactionType.IntransitTransfer)
				return IntransitTransferMessage

		ItemReplacedMessage				   is a MessageField
			restricted
			"ItemReplacedForLine<RequisitionLine>"

		HasCommentsMessage is a DerivedField
			type is MessageField
			if (HasComments)
				return "Line Comments"
			else
				return blank

		RoundingMessage			is a MessageField
			"ChangedToLocationStockUOM.QuantityRoundedUp."


		ItemDescriptionTooltip is a StringField
			type is Alpha size up to 411	
			default label is untranslatable
			Item.Description2
			". "
			Item.Description3





























		ApprovalValue                      is a DerivedField
			type is Decimal size 20.3
				precision is Requisition.BaseCurrencyCode.NumberOfDecimals
			classic name is APPROVAL-VAL
			LocalRoundedApprovalValue = LineExtendedAmount + AccruedTaxAmount + InvoicedTaxAmount + (LineAddOnChargeTotal * ConversionRate)
			round LocalRoundedApprovalValue to nearest DerivedRoundToBaseCurrency
			return LocalRoundedApprovalValue

		DerivedBaseAmountWithTax                  is a DerivedField
			type is Decimal size 20.3
				precision is TransactionCurrencyCode.NumberOfDecimals
			restricted
			return (LineExtendedAmount + AccruedTaxAmount + InvoicedTaxAmount)

		DerivedTaxTotal                 is a DerivedField
			type is like InternationalAmount
			default label is "Tax Total"
			return Requisition.DerivedTaxTotal

		CommitmentValue                    is a DerivedField
			type is like InternationalAmount
				precision is DerivedNumberOfDecimalsCost
			return ((Quantity * TransactionUnitCost) + AccruedTaxAmount + InvoicedTaxAmount + LineAddOnChargeTotal)

		ContractLineMaxEditValue       is a DerivedField
			type is like InternationalAmount
				precision is DerivedNumberOfDecimalsCost
			if (!ContractAmountIncludesTax and !ContractAmountIncludesAddOnCharge)
				return (Quantity * TransactionUnitCost)
			else
			if (ContractAmountIncludesTax and !ContractAmountIncludesAddOnCharge)
				return ((Quantity * TransactionUnitCost) + AccruedTaxAmount + InvoicedTaxAmount)
			else
			if (!ContractAmountIncludesTax and ContractAmountIncludesAddOnCharge)
				return ((Quantity * TransactionUnitCost) + LineAddOnChargeTotal)
			else
				return ((Quantity * TransactionUnitCost) + AccruedTaxAmount + InvoicedTaxAmount + LineAddOnChargeTotal)

		LineExtendedAmount                 is a DerivedField 
			type is like InternationalAmount
				precision is DerivedNumberOfDecimalsCost
			return (Quantity * UnitCost)

		LineAmount                 is a DerivedField 
			type is like InternationalAmount
				precision is DerivedNumberOfDecimalsCost
			return (Quantity * TransactionUnitCost)

		DerivedItemEntryMethod             is a ConditionalField
			type is AlphaUpper size 1
			restricted
			if (Requisition.Requester.ItemEntryMethod entered)
				Requisition.Requester.ItemEntryMethod
			else
				ItemEntryMethod.Item

		ReleasedPurchaseOrderQuantity 		is a DerivedField
			type is like Quantity
				precision is DerivedNumberOfDecimalsQuantity
			return sum ReleasedPurchaseOrderLineSourcesRel.Quantity

		UnreleasedPurchaseOrderQuantity     is a DerivedField
			type is like Quantity
				precision is DerivedNumberOfDecimalsQuantity
			return sum UnreleasedPurchaseOrderLineSourcesRel.Quantity

		PurchaseOrderInterfaceQuantity      is a DerivedField
			type is like Quantity
				precision is DerivedNumberOfDecimalsQuantity
			return sum PurchaseOrderInterfaceRel.Quantity

		QuantityToRelease                     is a DerivedField
			type is like Quantity
				precision is DerivedNumberOfDecimalsQuantity
			restricted
			if (IsUnreleasedStatus)
				return Quantity
			else
				if (IsProcessedStatus)
					return (PurchaseOrderInterfaceQuantity + UnreleasedPurchaseOrderQuantity)

		PercentToRelease 					is a DerivedField
			type is Percent size 6.3
			restricted
	   		return (QuantityToRelease/Quantity)


		DeliveredQuantity           is a DerivedField
			type is like Quantity
				precision is DerivedNumberOfDecimalsQuantity
			return (sum PurchaseOrderLineSourcesRel.DeliveredQuantity)

		QuantityOnEvent           is a DerivedField
			type is like Quantity
				precision is DerivedNumberOfDecimalsQuantity
			return (sum SourcingEventLineSourceRel.SourcingEventLine.Quantity)

		ShippedQuantity                    is a DerivedField
			type is like Quantity
				precision is DerivedNumberOfDecimalsQuantity
			if (IsInventory)
				include SumWarehouseShipmentQuantities
				return LocalShippedQuantity
			else
				return 0

		InProcessQuantity                    is a DerivedField
			type is like Quantity
				precision is DerivedNumberOfDecimalsQuantity
			if (IsInventory)
				include SumWarehouseShipmentQuantities
				return 	LocalInProcessQuantity
			else
				return 0

		DerivedVoidedQuantity              is a DerivedField  
			type is like Quantity
				precision is DerivedNumberOfDecimalsQuantity
			if (IsInventory)
				include SumWarehouseShipmentQuantities
				return 	LocalVoidedQuantity
			else
				return 0

		QuantityToShip                     is a DerivedField
			type is like Quantity
				precision is DerivedNumberOfDecimalsQuantity
			return (Quantity - ShippedQuantity - KilledQuantity)

		DerivedShippedAndVoided            is a DerivedField 
			type is like Quantity
				precision is DerivedNumberOfDecimalsQuantity
			return (ShippedQuantity + DerivedVoidedQuantity)

		DerivedOpenToShip                  is a DerivedField 
			type is like Quantity
				precision is DerivedNumberOfDecimalsQuantity
			return (Quantity - KilledQuantity - ReturnQuantity)


		PercentToShip						is a DerivedField
			type is Percent size 6.3
			restricted
			return (QuantityToShip/Quantity)

		PercentKilled						is a DerivedField
			type is Percent 6.3
			return (KilledQuantity/Quantity)

		DerivedKilledQuantityInInventoryUOM				is a DerivedField 
			type is like Quantity
				precision is DerivedNumberOfDecimalsQuantity
			default label is "KilledQuantity"
			if (HasItemLocationStockUOM)









				initialize LocationItemUOMConversion
				LocationItemUOMConversion.InItemLocation   	= ItemLocationRel.ItemLocation
				LocationItemUOMConversion.InQuantity   		= Quantity
				LocationItemUOMConversion.InUOM   			= EnteredUOM
				return LocationItemUOMConversion.OutputQuantity
			else
   			if (EnteredUOM != Item.StockUOM
   			and not IsCatchWeightItem)
				initialize UOMCalculation
				UOMCalculation.InputUOM      = EnteredUOM
				UOMCalculation.InputQuantity = KilledQuantity
				UOMCalculation.InputToUOM    = Item.StockUOM
				UOMCalculation.Method        = UOMCalculation.Method.ConvertToStock
				return UOMCalculation.OutputQuantity
			else
				return KilledQuantity

		UndistributedQuantity				is a DerivedField
			type is like Quantity
				precision is DerivedNumberOfDecimalsQuantity
			return (Quantity - DistributionQuantityTotal)

		UndistributedPercent				is a DerivedField
			type is Percent size 6.3
			return (100% - DistributionPercentTotal)

		UndistributedAmount					is a DerivedField
			type is like InternationalAmount
			return ((Quantity * TransactionUnitCost) - DistributionAmountTotal)

		FirstDistributionTypeValidator     is a DerivedField
			type is like DistributionBy
			restricted
			if (DistributionAccountExists)
				return first RequisitionLineDistributionsRel.DerivedDistributionBy
			else
				return ""

		LastDistributionTypeValidator      is a DerivedField
			type is like DistributionBy
			restricted
			if (DistributionAccountExists)
				return last RequisitionLineDistributionsRel.DerivedDistributionBy
			else
				return ""

		DistributionCount                  is a DerivedField
			type is Alpha size up to 20
			restricted
			if (DistributionAccountExists)
				return "(" + instance count of RequisitionLineDistributionsRel + ")"
			else
				return ""

		CommentCount                       is a DerivedField
			type is Alpha size up to 20
			restricted
			if (RequisitionLineCommentRel exists)
				return "(" + instance count of RequisitionLineCommentRel + ")"
			else
				return ""

		AddOnChargeCount     	           is a DerivedField
			type is Alpha size up to 20
			restricted
			if (LineAddOnChargeExists)
				return "(" + instance count of  RequisitionLineAddOnCharge set + ")"
			else
				return ""

		DerivedAlphaRequisitionNumber                  is a DerivedField
			type is AlphaUpper size 20
			restricted
			return Requisition

		StrippedVendorItem is a DerivedField
			type is Alpha size 32
			return com.lawson.apps.procurement.base.StringUtils.stripNonAlphaNumeric(VendorItem)

		RequisitionLineDetailDerived       is a DerivedField
			type is AlphaUpper size 7
			restricted
			return RequisitionLineDetailRel.RequisitionLineDetail.Bin

		DerivedFormTitle	is a DerivedField
			type is MessageField
			if (LineExists)
				return DerivedFormUpdateTitle
			else
				return DerivedCreateMessage

		DerivedCreateMessage is a LabelField
			restricted
			"CreateRequisitionLine"

		DerivedFormUpdateTitle is a LabelField
			restricted
			"Requisition<Requisition>Line<RequisitionLine>"

		MissingDistribMessage is a MessageField
			"Missing_Distribution_Account"

		OnRecallNoticeMessage is a MessageField
			"Item_onRecallNotice:_<first RecallProductItemForItemRel.RecallNotice>"





		RecallLabel is a LabelField
			"Recall"

		ErrorsLabel is a LabelField
			"Errors"

		RecipeItemLabel is a LabelField
			"RecipeItem"

		LatexLabel is a LabelField
			"PackageIndicatesLatex"
				
		SpecialHandlingCodeLabel is a LabelField
			"HasSpecialHandlingCode"

		SumOfDistributionAmount            is a DerivedField    
			type is like InternationalAmount
			restricted
			return (sum FilterRequisitionLineDistributionRel.DistributionAmount)

		ComputeDistributionPercentage      is a ComputeField    
			type is Decimal size 6.3
			restricted
			(100 * (FilterRequisitionLineDistributionRel.DistributionAmount / SumOfDistributionAmount))

		TotalShippedQuantity               is a DerivedField    
			type is like Quantity
				precision is DerivedNumberOfDecimalsQuantity
			return ShippedQuantity

		AcceptedQuantity                   is a DerivedField    
			type is like Quantity
				precision is DerivedNumberOfDecimalsQuantity
			if (ShippedQuantity >= 0)
				return sum WarehouseShipmentLinesRel.DerivedShippedQuantityInTransUOM - RelReturnQuantityToDate

		SetDefaultBin                      is a StringField
			type is AlphaUpper size 7
			restricted
			ItemLocationRel.PreferredBin

		DisplayFeedback                    is a MessageField
			restricted
			"ActionRequired\._Perform\Feedback"

		DerivedStockQuantity				is a DerivedField
			type is like Quantity
				precision is DerivedNumberOfDecimalsQuantity
			return (Quantity * EnteredUOMMultiplier)

		DerivedTotalStockQuantity			is a DerivedField
			type is like Quantity
				precision is DerivedNumberOfDecimalsQuantity
			return (sum OtherInventoriedRequisitionLinesForItemLocationRel.DerivedStockQuantity + DerivedStockQuantity)

		RequisitionLineDetailAlert			is a DerivedField
			type is Boolean
			restricted
			if (Quantity != (sum RequisitionLineDetail set.Quantity))
				return true
			else
				return false

		DerivedNumberOfDecimalsQuantity is a ConditionalField
			type is Numeric size 1 
			if (ItemType.NonStock
			or  ItemType.Inventoried)
				Item.NumberOfDecimalsQuantity
			else
			if (ItemType.Special
			or  ItemType.Service)
				InventoryCompanyRel.NumberOfDecimalsQuantity
			else
				4

		DerivedNumberOfDecimalsCost is a ConditionalField
			type is Numeric size 1 
			if (ItemType.NonStock
			or  ItemType.Inventoried)
				Item.NumberOfDecimalsCost
			else
			if (ItemType.Special
			or  ItemType.Service)
				InventoryCompanyRel.NumberOfDecimalsCost
			else
				8
		DerivedRoundTo			is a DerivedField
			type is Unsigned Decimal 21.8
			if (DerivedNumberOfDecimalsCost = 8)
				return .00000001
			else
			if (DerivedNumberOfDecimalsCost = 7)
				return .0000001
			else
			if (DerivedNumberOfDecimalsCost = 6)
				return .000001
			else
			if (DerivedNumberOfDecimalsCost = 5)
				return .00001
			else
			if (DerivedNumberOfDecimalsCost = 4)
				return .0001
			else
			if (DerivedNumberOfDecimalsCost = 3)
				return .001
			else
			if (DerivedNumberOfDecimalsCost = 2)
				return .01
			else
			if (DerivedNumberOfDecimalsCost = 1)
				return .1
			else
			if (DerivedNumberOfDecimalsCost = 0)
				return 1
			else
				return blank

		DerivedRoundToBaseCurrency is a DerivedField
			type is Decimal 5.4
			restricted
			if (Requisition.BaseCurrencyCode.NumberOfDecimals = 2)
				return .01
			else
			if (Requisition.BaseCurrencyCode.NumberOfDecimals = 0)
				return 1
			else
			if (Requisition.BaseCurrencyCode.NumberOfDecimals = 3)
				return .001
			else
			if (Requisition.BaseCurrencyCode.NumberOfDecimals = 4)
				return .0001

		DerivedDetailsInBalance is a DerivedField
			type is Boolean
			restricted
			if (ReturnQuantity != (sum RequisitionLineDetail set.Quantity))
				return false
			else
				return true

		BinDetailsMessage is a MessageField
			restricted
			"BinDetails"

		SerialDetailsMessage is a MessageField
			restricted
			"SerialDetails"

		LotDetailsMessage is a MessageField
			restricted
			"LotDetails"

		QuantityNotEqual		is a MessageField
			restricted
			"\quantityDoesNotEqualReceivedQuantity"

		ReceivingDetailMessage is a DerivedField
			type is Alpha size 15
			restricted
			if (IsBinTrackFeedback)
				return BinDetailsMessage
			if (IsSerialTrackFeedback)
				return SerialDetailsMessage
			if (IsLotTrackFeedback)
				return LotDetailsMessage

 		RelReturnQuantityToDate	is a DerivedField
			type is like Quantity
                precision is DerivedNumberOfDecimalsQuantity
            if (first DifferentLocationReturnInventoryTransactionLineRel exists) 
                if (IsCatchWeightItem)
                    return sum AllLocationReturnInventoryTransactionLineRel.SecondaryQuantity
                else
                    if (EnteredUOM entered
                    and EnteredUOM != Item.StockUOM)
                        initialize UOMCalculation
                        UOMCalculation.InputQuantity   = sum AllLocationReturnInventoryTransactionLineRel.Quantity
                        UOMCalculation.InputUOM        = Item.StockUOM
                        UOMCalculation.InputToUOM      = EnteredUOM
                        UOMCalculation.DoRounding      = false
                        UOMCalculation.Method          = UOMCalculation.Method.ConvertToAlternate
                        return UOMCalculation.OutputQuantity
                    else
                        return sum AllLocationReturnInventoryTransactionLineRel.Quantity
            else
                if (first ReturnInventoryTransactionLineRel exists) 
                    if (IsCatchWeightItem)
                        return sum ReturnInventoryTransactionLineRel.SecondaryQuantity
                    else
                        if (EnteredUOM entered
                        and EnteredUOM != Item.StockUOM)
                            initialize UOMCalculation
                            UOMCalculation.InputQuantity   = sum ReturnInventoryTransactionLineRel.Quantity
                            UOMCalculation.InputUOM        = Item.StockUOM
                            UOMCalculation.InputToUOM      = EnteredUOM
                            UOMCalculation.DoRounding      = false
                            UOMCalculation.Method		   = UOMCalculation.Method.ConvertToAlternate
                            return UOMCalculation.OutputQuantity
                        else
                            return sum ReturnInventoryTransactionLineRel.Quantity

		RelReturnCatchWeightQuantityToDate 		is a DerivedField
			type is like Quantity
				precision is DerivedNumberOfDecimalsQuantity
			if (ReturnInventoryTransactionLineRel exists
			and IsCatchWeightItem)
				return sum ReturnInventoryTransactionLineRel.SecondaryQuantity

		CurrentReturnQuantity			is a DerivedField 
			type is like Quantity
				precision is DerivedNumberOfDecimalsQuantity
			return ReturnQuantity - RelReturnQuantityToDate

		CurrentReturnCatchWeightQuantity	is a DerivedField 
			type is like Quantity
				precision is DerivedNumberOfDecimalsQuantity
			return CatchWeightReturnQuantity - RelReturnCatchWeightQuantityToDate



		DerivedLineQuantityInStockUOM is a DerivedField
			type is like Quantity
			restricted
			if (EnteredUOM entered
			and EnteredUOM != Item.StockUOM)
				initialize UOMCalculation
				UOMCalculation.InputUOM          	= EnteredUOM
				UOMCalculation.InputQuantity 	 	= DerivedLineQuantity
				UOMCalculation.Method            	= UOMCalculation.Method.ConvertToStock
				return UOMCalculation.OutputQuantity
			else
				return DerivedLineQuantity

		DerivedReservedQuantity is a DerivedField
			type is like Quantity
			restricted
			return ScheduledProcedureLineRel.ReservedQuantity

		DerivedReservedQuantityInTransactionUOM is a DerivedField
			type is like Quantity
			restricted
			if (EnteredUOM entered
			and EnteredUOM != Item.StockUOM
			and not IsCatchWeightItem) 
				initialize UOMCalculation
				UOMCalculation.InputUOM          	= Item.StockUOM
				UOMCalculation.InputToUOM			= EnteredUOM
				UOMCalculation.InputQuantity 	 	= DerivedReservedQuantity
				UOMCalculation.Method            	= UOMCalculation.Method.ConvertToAlternate
				return UOMCalculation.OutputQuantity
			else
				return DerivedReservedQuantity

		DerivedUnreservedQuantity is a DerivedField
			type is like Quantity
			restricted
			return ScheduledProcedureLineRel.DerivedUnreservedQuantity

		DerivedUnreservedQuantityInTransactionUOM is a DerivedField
			type is like Quantity
			restricted
			if (EnteredUOM entered
			and EnteredUOM != Item.StockUOM
			and not IsCatchWeightItem) 
				initialize UOMCalculation
				UOMCalculation.InputUOM          	= Item.StockUOM
				UOMCalculation.InputToUOM			= EnteredUOM
				UOMCalculation.InputQuantity 	 	= DerivedUnreservedQuantity
				UOMCalculation.Method            	= UOMCalculation.Method.ConvertToAlternate
				return UOMCalculation.OutputQuantity
			else
				return DerivedUnreservedQuantity

		DerivedQuantityInStockUOM is a DerivedField
			type is like Quantity
			restricted
			if (EnteredUOM entered
			and EnteredUOM != Item.StockUOM)
				initialize UOMCalculation
				UOMCalculation.InputUOM          	= EnteredUOM
				UOMCalculation.InputQuantity 	 	= Quantity
				UOMCalculation.Method            	= UOMCalculation.Method.ConvertToStock
				return UOMCalculation.OutputQuantity
			else
				return Quantity

		DerivedQuantityInInventoryUOM					is a DerivedField
			type is like Quantity
			if (HasItemLocationStockUOM)
				if (EnteredUOM = DerivedLocationStockUOM)
					return Quantity
				else
					initialize UOMCalculation
					UOMCalculation.InputQuantity   = Quantity
					UOMCalculation.InputUOM        = EnteredUOM
					UOMCalculation.InputToUOM      = DerivedLocationStockUOM
					UOMCalculation.DoRounding      = false
					UOMCalculation.Method		   = UOMCalculation.Method.ConvertToAlternate
					return UOMCalculation.OutputQuantity
			else
			if (IsCatchWeightItem)
				return Quantity							
			else
				return Quantity * EnteredUOMMultiplier 	

		DerivedQuantityStockOrSecondary					is a DerivedField
			type is like Quantity
			if (IsCatchWeightItem)
				return Quantity							
			else
				return Quantity * EnteredUOMMultiplier 	

	   	DerivedTransactionUnitCostInStockUOM is a DerivedField
			type is like Quantity
			restricted
			if (EnteredUOM != Item.StockUOM)
				return TransactionUnitCost / EnteredUOMMultiplier
			else
				return TransactionUnitCost

	   	DerivedUnitCostInStockUOM is a DerivedField
			type is like InternationalCost
			restricted
			if (EnteredUOM != Item.StockUOM)
				return UnitCost / EnteredUOMMultiplier
			else
				return UnitCost

		DerivedAvailableQuantityInTransactionUOM is a DerivedField
			type is like Quantity
				precision is DerivedNumberOfDecimalsQuantity
			restricted
			if (EnteredUOM entered
			and EnteredUOM != Item.StockUOM
			and not IsCatchWeightItem) 
				initialize UOMCalculation
				UOMCalculation.InputUOM          	= Item.StockUOM
				UOMCalculation.InputToUOM			= EnteredUOM
				UOMCalculation.InputQuantity 	 	= ItemLocationRel.AvailableQuantity
				UOMCalculation.Method            	= UOMCalculation.Method.ConvertToAlternate
				return UOMCalculation.OutputQuantity
			else
				return ItemLocationRel.AvailableQuantity

		DerivedQuantityInContractUOM	is a DerivedField
			type is like Quantity
			restricted
			if (EnteredUOM != ContractLine.UOM.UnitOfMeasure)
				initialize UOMCalculation
				UOMCalculation.InputUOM          	= EnteredUOM
				UOMCalculation.InputQuantity 	 	= Quantity
				UOMCalculation.Method            	= UOMCalculation.Method.ConvertToAlternate
				return UOMCalculation.OutputQuantity
			else
				return Quantity

		DerivedCostInContractCurrency		is a DerivedField
			type is like InternationalCost
			restricted
			if (TransactionCurrencyCode != Contract.CurrencyCode)
				initialize LocalCurrencyExchange
				SavedFinanceEnterpriseGroup			= Requisition.Company.ItemGroup.BusinessGroup.FinanceEnterpriseGroup
				SavedExchangeDate					= current corporate date
				SavedCurrencyTable                  = Requisition.CurrencyTable
				SavedFromCurrency					= TransactionCurrencyCode
				SavedToCurrency						= Contract.CurrencyCode
				SavedTransactionAmount				= ContractLineMaxEditValue
				return LocalCurrencyExchange.OutputCurrencyAmount
			else
				return ContractLineMaxEditValue

		DerivedRequisitionLine is a DerivedField
			type is like RequisitionLine
			if (RequisitionLineItemRel exists)
				return first RequisitionLineItemRel.RequisitionLine

		ContractLabel is a LabelField
			restricted
			"Contract:<Contract>Line:<ContractLine>"

		PreferrredContractLabel is a LabelField
			restricted
			"PreferredContract:<Contract>Line:<ContractLine>"

		OnContractLabel is a DerivedField
			type is MessageField
			if (ContractLineRel.PreferredLine)
				return PreferrredContractLabel
			else
				return ContractLabel


		DerivedProcedureDate		is a DerivedField
			type is Date
			default label is "ProcedureDate"
			return ScheduledProcedureRel.ProcedureDate

		DerivedProcedureTime		is a DerivedField
			type is Time
			default label is "ProcedureTime"
			return ScheduledProcedureRel.ProcedureTime

		DerivedProcedureRoom		is a DerivedField
			type is AlphaUpper size 20
			default label is "ProcedureRoom"
			return ScheduledProcedureRel.Room

		DerivedPreferenceCardIDAndName is a DerivedField
			type is Text
			default label is "PreferenceCard"
			return ScheduledProcedureRel.PreferenceCard + " - " + ScheduledProcedureRel.PreferenceCard.PreferenceCardName

		DerivedPreferenceCardProcedures		is a DerivedField
			type is Text
			default label is "Procedures"
			for each ScheduledProcedureRel.PreferenceCard.PreferenceCardProcedureRel
            	DerivedPreferenceCardProcedures += each.Procedure + " " + each.Procedure.ClinicalProcedureName + "\u000a"
           	return DerivedPreferenceCardProcedures

		DerivedPreferenceCardAlias		is a DerivedField 	    
			type is Alpha size 100
			default label is "PreferenceCardAlias"
			return ScheduledProcedureRel.PreferenceCard.PreferenceCardAlias

		DerivedPreferenceCardService		is a DerivedField 	    
			type is Alpha size 45
			default label is "PreferenceCardService"
			return ScheduledProcedureRel.PreferenceCard.Service

		DerivedPreferenceCardProviders		is a DerivedField
			type is Text
			default label is "Provider"
			return ScheduledProcedureRel.DerivedProviderFullName

		DerivedOpenQuantity		is a DerivedField
			type is like Quantity
			default label is "OpenQuantity"
           	return ScheduledProcedureLineRel.ComponentOpenQuantity
		
		DerivedHoldQuantity		is a DerivedField
			type is like Quantity
			default label is "HoldQuantity"
           	return ScheduledProcedureLineRel.ComponentHoldQuantity
		
		DerivedTotalQuantity		is a DerivedField
			type is like Quantity
			default label is "TotalQuantity"
           	return ScheduledProcedureLineRel.DerivedTotalQuantity

		DerivedPatientID is a DerivedField
			type is AlphaUpper size 20
			default label is "MedicalRecordNumber"
			return ScheduledProcedureRel.DerivedPatientID

		DerivedPatientName		is a DerivedField
			type is like Name
			default label is "PatientName"
			return ScheduledProcedureRel.DerivedPatientFullName

		DerivedPatientNameForIDMPickList is a DerivedField
			type is like Name
			if (InventoryCompanyRel.PrintPatientNameOnPickList)
			    return DerivedPatientName
			else
				return "***************"

		DerivedPatientNameForIDMPackingList is a DerivedField
			type is like Name
			if (InventoryCompanyRel.PrintPatientNameOnPackingList)
			    return DerivedPatientName
			else
				return "***************"			

		DerivedProcedureCase		is a DerivedField
			type is Alpha size 10
			default label is "ProcedureCase"
			return ScheduledProcedureRel.Case

			

		EnteredCostCodeLabel is a LabelField
			restricted
			"Entered"

		LastCostCostCodeLabel is a LabelField
			restricted
			"LastCost"

		ContractCostCodeLabel is a LabelField
			restricted
			"Contract"

		CatalogQuoteCostCodeLabel is a LabelField
			restricted
			"CatalogQuote"

		BlanketCostCodeLabel is a LabelField
			restricted
			"Blanket"

		LastPoCreatedCostCodeLabel is a LabelField
			restricted
			"LastPoCreated"

		InventoryCostCodeLabel is a LabelField
			restricted
			"InventoryCost"

		PunchoutCostCodeLabel is a LabelField
			restricted
			"Punchout"

		TierCompanyParticipantCostCodeLabel is a LabelField
			restricted
			"Tier-CompanyParticipant"

		TierIcLocationParticipant is a LabelField
			restricted
			"Tier-InventoryLocationParticipant"

		TierReqLocParticipant is a LabelField
			restricted
			"Tier-RequestingLocationParticipant"

		WebsiteCostCodeLabel is a LabelField
			restricted
			"Website"

		ProcurementTemplateContractCostCodeLabel is a LabelField
			restricted
			"ProcurementTemplateContract"

		StandingCostCodeLabel is a LabelField
			restricted
			"Standing"

		StrategicSourcingCostCodeLabel is a LabelField
			restricted
			"StrategicSourcing"

		CostCodeLabel is a DerivedField
			type is MessageField
			if (CostCode.Entered)
				return EnteredCostCodeLabel
			else
			if (CostCode.LastCost)
				return LastCostCostCodeLabel
			else
			if (CostCode.Contract)
				return ContractCostCodeLabel
			else
			if (CostCode.CatalogQuote)
				return CatalogQuoteCostCodeLabel
			else
			if (CostCode.Blanket)
				return BlanketCostCodeLabel
			else
			if (CostCode.LastPoCreated)
				return LastPoCreatedCostCodeLabel
			else
			if (CostCode.InventoryCost)
				return InventoryCostCodeLabel
			else
			if (CostCode.Punchout)
				return PunchoutCostCodeLabel
			else
			if (CostCode.TierCompanyParticipant)
				return TierCompanyParticipantCostCodeLabel
			else
			if (CostCode.TierIcLocationParticipant)
				return TierIcLocationParticipant
			else
			if (CostCode.TierReqLocParticipant)
				return TierReqLocParticipant
			else
			if (CostCode.Website)
				return WebsiteCostCodeLabel
			else
			if (CostCode.ProcurementTemplateContract)
				return ProcurementTemplateContractCostCodeLabel
			else
			if (CostCode.Standing)
				return StandingCostCodeLabel
			else
			if (CostCode.StrategicSourcing)
				return StrategicSourcingCostCodeLabel
			else
				return ""

		DerivedHasWorkunit is a DerivedField
			type is Boolean
			return HasWorkunit

		HasCommentsForRSS is a DerivedField
			type is Boolean
			if (Requisition.Requester.DerivedAllowAllCommentTypes = "N")
				if (RSSCommentRel exists)
					return true
				else
					return false
			else
				if (RequisitionLineCommentRel exists)
					return true
				else
					return false

		HasAttachmentForRSS is a DerivedField
			type is Boolean
			if (RSSAttachmentRel exists)
				return true
			else
				return false

		ItemDescriptionTitle 		is a MessageField
			"ItemDescription"

		BackorderETA 				is a DerivedField
			type is Date
			if (HasAllBackorderDetails
			and first AllVendorBackorderDetailsRel.EstimatedAvailabilityDate entered)
				return first AllVendorBackorderDetailsRel.EstimatedAvailabilityDate
			if (HasItemAndVendorBackorderDetails
			and first ItemAndVendorBackorderDetailsRel.EstimatedAvailabilityDate entered)
				return first ItemAndVendorBackorderDetailsRel.EstimatedAvailabilityDate
			if (HasItemOnlyBackorderDetails
			and first ItemOnlyVendorBackorderDetailsRel.EstimatedAvailabilityDate entered)
				return first ItemOnlyVendorBackorderDetailsRel.EstimatedAvailabilityDate

		ETADetails 					is a DerivedField
			type is MessageField
			if (BackorderETA entered)
				return ETAMessage

		ETAMessage 					is a MessageField
			";ETAIs<BackorderETA>"

		VendorBackorderMessage 		is a MessageField
			"ItemIsOnBackorder<ETADetails>"

		DerivedInventoryUOM is a DerivedField
			type is like UnitOfMeasure
			if (HasItemLocationStockUOM)
				return DerivedLocationStockUOM
			else
			if (IsInventoryOrNonstock
			and not IsCatchWeightItem)
				return Item.StockUOM
			else
				return EnteredUOM

		BaseUOM is a DerivedField
			type is like UnitOfMeasure
			if (IsInventoryOrNonstock)
				return Item.StockUOM
			else
				return EnteredUOM

		DerivedEnteredUOMMultiplier is a DerivedField
			type is like UOMMultiplier
				precision is DerivedNumberOfDecimalsQuantity
			if (HasItemLocationStockUOM)
				return ItemUOMRel.UOMConversion / ItemLocationRel.ItemLocationStockUOM.UOMConversion
			else
				return EnteredUOMMultiplier
		
		ItemUOMConversion is a DerivedField
			type is MessageField
			if (HasItemLocationStockUOM)
				return DerivedEnteredUOMMultiplier + " " + ItemLocationRel.ItemLocationStockUOM + " per " + EnteredUOM
			else
				return DerivedEnteredUOMMultiplier + " " + BaseUOM + " per " + EnteredUOM

		ContractItemUOMConversion is a MessageField
			"<ContractLine.UOMUnitConversion>_per<ContractLine.UOM.UnitOfMeasure>"

		UnitOfMeasureConversion	 is a DerivedField
			type is MessageField
			if (IsInventoryOrNonstock)
				return ItemUOMConversion
			if (ContractLine.UOMConversion != 0)
				return ContractItemUOMConversion

		DerivedOldBaseLineAddOnChargeTotal is a DerivedField
			type is like InternationalAmount
		 	restricted
		 	return (old LineAddOnChargeTotal * old ConversionRate)

		DerivedLandedAddOnCharges is a DerivedField
			type is like InternationalAmount
			restricted
			return  (LineAddOnChargeTotal - LineNonLandedAddOnChargeTotal)

		DerivedTotalTax is a DerivedField
			type is like InternationalAmount
			restricted
			return (InvoicedTaxAmount + sum LandedLineAddOnCharges.InvoicedTaxAmount)

		DerivedLineTotalAOCAmount is a DerivedField
			type is like InternationalAmount
			restricted
			return sum LineAddOnChargesRel.DerivedTotalWithTax

		DerivedLandedUnitCost is a DerivedField
			type is like InternationalCost
			restricted
			if ((LandedUnitCost not entered and TransactionUnitCost entered)
			or Quantity changed
			or TransactionUnitCost changed
			or PurchaseTaxable changed
			or PurchaseTaxCode changed)
				initialize LandedUnitCost
				LandedUnitCost = TransactionUnitCost
				if ((not TaxEntityRel.ThirdParty.Sabrix
				or  DoOneSource)
				and (not TaxEntityRel.ThirdParty.VertexOSeries 
				or   TaxEntityRel.TaxAttributeCode not entered))
					include CalculateTaxAndLandedUnitCost
				for each LandedLineAddOnCharges
					LandedUnitCost += each.LandedUnitCost
			return LandedUnitCost

		DerivedLandedUnitCostLessTax is a DerivedField
			type is like InternationalCost
			restricted
			if ((LandedUnitCost not entered and TransactionUnitCost entered)
			or Quantity changed
			or TransactionUnitCost changed
			or PurchaseTaxable changed
			or PurchaseTaxCode changed)
				initialize LandedUnitCost
				LandedUnitCost = TransactionUnitCost
				for each LandedLineAddOnCharges
					LandedUnitCost += each.LandedUnitCost
			return LandedUnitCost

		PurchaseFromLocationAndVendorName is a StringField
			type is Alpha size up to 37
			restricted
			PurchaseFromLocation
			" - "
			PurchaseFromLocation.VendorName

		DerivedPurchaseFromLocation is a DerivedField
			type is Alpha size up to 37
			if (PurchaseFromLocation entered
			and not SourcingEventRequired)
				return PurchaseFromLocationAndVendorName

		VendorAndVendorName is a StringField
			type is Alpha size up to 42
			restricted
			Vendor
			" - "
			Vendor.VendorName

		DerivedVendor is a DerivedField
			type is Alpha size up to 42
			if (Vendor entered
			and not SourcingEventRequired)
				return VendorAndVendorName

		DerivedVendorAndPurchaseFrom is a ConditionalField
			type is MessageField
            if (PurchaseFromLocation not entered)
				"Vendor: " + Vendor.VendorName
			else
				"Vendor: " + Vendor.VendorName + " Purchase From: " + PurchaseFromLocation.VendorName

		BuyerAndName is a StringField
			type is Alpha size up to 117
			restricted
			Buyer
			" - "
			Buyer.Name

		DerivedBuyer is a DerivedField
			type is Alpha size up to 117
			if (Buyer entered)
				return BuyerAndName

		ContractAndName is a StringField
			type is Alpha size up to 117
			restricted
			Contract
			" - "
			Contract.Name

		DerivedContract is a DerivedField
			type is Alpha size up to 117
			if (Contract entered)
				return ContractAndName

		ToAccountingEntityAndName is a StringField
			type is Alpha size up to 93
			restricted
			first RequisitionLineDistributionsRel.DistributionAccount.ToAccountingEntity
			" - "
			first RequisitionLineDistributionsRel.DistributionAccount.ToAccountingEntity.Name

		DerivedToAccountingEntity is a DerivedField
			type is Alpha size up to 93
			if (first RequisitionLineDistributionsRel.DistributionAccount.ToAccountingEntity entered)
				return ToAccountingEntityAndName

		AccountAndDescription is a StringField
			type is Alpha size up to 89
			restricted
			first RequisitionLineDistributionsRel.DistributionAccount.GeneralLedgerChartAccount
			" - "
			first RequisitionLineDistributionsRel.DistributionAccount.GeneralLedgerChartAccount.AccountDescription

		DerivedAccount is a DerivedField
			type is Alpha size up to 89
			if (first RequisitionLineDistributionsRel.DistributionAccount.GeneralLedgerChartAccount entered)
				return AccountAndDescription

		AccountingUnitAndDescription is a StringField
			type is Alpha size up to 88
			restricted
			first RequisitionLineDistributionsRel.DistributionAccount.AccountingUnit
			" - "
			first RequisitionLineDistributionsRel.DistributionAccount.AccountingUnit.Description

		DerivedAccountingUnit is a DerivedField
			type is Alpha size up to 88
			if (first RequisitionLineDistributionsRel.DistributionAccount.AccountingUnit entered)
				return AccountingUnitAndDescription

		ProjectAndDescription is a StringField
			type is Alpha size up to 88
			restricted
			first RequisitionLineDistributionsRel.DistributionAccount.Project
			" - "
			first RequisitionLineDistributionsRel.DistributionAccount.Project.Description

		DerivedProject is a DerivedField
			type is Alpha size up to 88
			if (first RequisitionLineDistributionsRel.DistributionAccount.Project entered)
				return ProjectAndDescription

		FinanceDimension1AndDescription is a StringField
			type is Alpha size up to 88
			restricted
			first RequisitionLineDistributionsRel.DistributionAccount.FinanceDimension1
			" - "
			first RequisitionLineDistributionsRel.DistributionAccount.FinanceDimension1.Description

		DerivedFinanceDimension1 is a DerivedField
			type is Alpha size up to 88
			if (first RequisitionLineDistributionsRel.DistributionAccount.FinanceDimension1 entered)
				return FinanceDimension1AndDescription

		FinanceDimension2AndDescription is a StringField
			type is Alpha size up to 88
			restricted
			first RequisitionLineDistributionsRel.DistributionAccount.FinanceDimension2
			" - "
			first RequisitionLineDistributionsRel.DistributionAccount.FinanceDimension2.Description

		DerivedFinanceDimension2 is a DerivedField
			type is Alpha size up to 88
			if (first RequisitionLineDistributionsRel.DistributionAccount.FinanceDimension2 entered)
				return FinanceDimension2AndDescription

		FinanceDimension3AndDescription is a StringField
			type is Alpha size up to 88
			restricted
			first RequisitionLineDistributionsRel.DistributionAccount.FinanceDimension3
			" - "
			first RequisitionLineDistributionsRel.DistributionAccount.FinanceDimension3.Description

		DerivedFinanceDimension3 is a DerivedField
			type is Alpha size up to 88
			if (first RequisitionLineDistributionsRel.DistributionAccount.FinanceDimension3 entered)
				return FinanceDimension3AndDescription

		FinanceDimension4AndDescription is a StringField
			type is Alpha size up to 88
			restricted
			first RequisitionLineDistributionsRel.DistributionAccount.FinanceDimension4
			" - "
			first RequisitionLineDistributionsRel.DistributionAccount.FinanceDimension4.Description

		DerivedFinanceDimension4 is a DerivedField
			type is Alpha size up to 88
			if (first RequisitionLineDistributionsRel.DistributionAccount.FinanceDimension4 entered)
				return FinanceDimension4AndDescription

		FinanceDimension5AndDescription is a StringField
			type is Alpha size up to 88
			restricted
			first RequisitionLineDistributionsRel.DistributionAccount.FinanceDimension5
			" - "
			first RequisitionLineDistributionsRel.DistributionAccount.FinanceDimension5.Description

		DerivedFinanceDimension5 is a DerivedField
			type is Alpha size up to 88
			if (first RequisitionLineDistributionsRel.DistributionAccount.FinanceDimension5 entered)
				return FinanceDimension5AndDescription

		FinanceDimension6AndDescription is a StringField
			type is Alpha size up to 88
			restricted
			first RequisitionLineDistributionsRel.DistributionAccount.FinanceDimension6
			" - "
			first RequisitionLineDistributionsRel.DistributionAccount.FinanceDimension6.Description

		DerivedFinanceDimension6 is a DerivedField
			type is Alpha size up to 88
			if (first RequisitionLineDistributionsRel.DistributionAccount.FinanceDimension6 entered)
				return FinanceDimension6AndDescription

		FinanceDimension7AndDescription is a StringField
			type is Alpha size up to 88
			restricted
			first RequisitionLineDistributionsRel.DistributionAccount.FinanceDimension7
			" - "
			first RequisitionLineDistributionsRel.DistributionAccount.FinanceDimension7.Description

		DerivedFinanceDimension7 is a DerivedField
			type is Alpha size up to 88
			if (first RequisitionLineDistributionsRel.DistributionAccount.FinanceDimension7 entered)
				return FinanceDimension7AndDescription

		FinanceDimension8AndDescription is a StringField
			type is Alpha size up to 88
			restricted
			first RequisitionLineDistributionsRel.DistributionAccount.FinanceDimension8
			" - "
			first RequisitionLineDistributionsRel.DistributionAccount.FinanceDimension8.Description

		DerivedFinanceDimension8 is a DerivedField
			type is Alpha size up to 88
			if (first RequisitionLineDistributionsRel.DistributionAccount.FinanceDimension8 entered)
				return FinanceDimension8AndDescription

		FinanceDimension9AndDescription is a StringField
			type is Alpha size up to 88
			restricted
			first RequisitionLineDistributionsRel.DistributionAccount.FinanceDimension9
			" - "
			first RequisitionLineDistributionsRel.DistributionAccount.FinanceDimension9.Description

		DerivedFinanceDimension9 is a DerivedField
			type is Alpha size up to 88
			if (first RequisitionLineDistributionsRel.DistributionAccount.FinanceDimension9 entered)
				return FinanceDimension9AndDescription

		FinanceDimension10AndDescription is a StringField
			type is Alpha size up to 88
			restricted
			first RequisitionLineDistributionsRel.DistributionAccount.FinanceDimension10
			" - "
			first RequisitionLineDistributionsRel.DistributionAccount.FinanceDimension10.Description

		DerivedFinanceDimension10 is a DerivedField
			type is Alpha size up to 88
			if (first RequisitionLineDistributionsRel.DistributionAccount.FinanceDimension10 entered)
				return FinanceDimension10AndDescription

		PurchaseTaxCodeAndDescription is a StringField
			type is Alpha size up to 78
			restricted
			PurchaseTaxCode
			" - "
			PurchaseTaxCode.Description

		DerivedPurchaseTaxCode is a DerivedField
			type is Alpha size up to 78
			if (PurchaseTaxCode entered)
				return PurchaseTaxCodeAndDescription

		AssetAndDescription is a StringField
			type is Alpha size up to 78
			restricted
			first RequisitionLineDistributionsRel.AssetInformation.Asset
			" - "
			first RequisitionLineDistributionsRel.AssetInformation.Asset.Description

		DerivedAsset is a DerivedField
			type is Alpha size up to 78
			if (first RequisitionLineDistributionsRel.AssetInformation.Asset entered)
				return AssetAndDescription

		AssetTemplateAndDescription is a StringField
			type is Alpha size up to 88
			restricted
			first RequisitionLineDistributionsRel.AssetInformation.AssetTemplate
			" - "
			first RequisitionLineDistributionsRel.AssetInformation.AssetTemplate.Description

		DerivedAssetTemplate is a DerivedField
			type is Alpha size up to 88
			if (first RequisitionLineDistributionsRel.AssetInformation.AssetTemplate entered)
				return AssetTemplateAndDescription

		ManufacturerAndDescription is a StringField
			type is Alpha size up to 72
			restricted
			Manufacturer
			" - "
			Manufacturer.Description

		DerivedManufacturer is a DerivedField
			type is Alpha size up to 72
			if (Manufacturer entered)
				return ManufacturerAndDescription

		DerivedManufacturerInformation is a DerivedField
			type is MessageField
 			default label is "Manufacturer"
			if (Manufacturer.DerivedCodeDivision entered)
				if (ManufacturerNumber entered)
					return "Manufacturer: " + Manufacturer.DerivedCodeDivision + " - " + ManufacturerNumber
				else	
					return "Manufacturer: " + Manufacturer.DerivedCodeDivision
			else
				if (ManufacturerNumber entered)
					return "Manufacturer: " + ManufacturerNumber


		FromCompanyAndName is a StringField
			type is Alpha size up to 87
			restricted
			FromCompanyLocationBin.FromCompany
			" - "
			FromCompanyLocationBin.FromCompany.Name

		DerivedFromCompany is a DerivedField
			type is Alpha size up to 87
			if (FromCompanyLocationBin.FromCompany entered)
				return FromCompanyAndName

		FromLocationAndName is a StringField
			type is Alpha size up to 101
			restricted
			FromCompanyLocationBin.FromLocation
			" - "
			FromCompanyLocationBin.FromLocation.Name

		DerivedFromLocation is a DerivedField
			type is Alpha size up to 101
			if (FromCompanyLocationBin.FromLocation entered)
				return FromLocationAndName

		CommodityCodeAndDescription is a StringField
			type is Alpha size up to 220
			restricted
			CommodityCode
			" - "
			CommodityCode.CcDescription

		DerivedCommodityCode is a DerivedField
			type is Alpha size up to 220
			if (CommodityCode entered)
				return CommodityCodeAndDescription

		POCodeAndDescription is a StringField
			type is Alpha size up to 67
			restricted
			POCode
			" - "
			POCode.Description

		DerivedPOCode is a DerivedField
			type is Alpha size up to 67
			if (POCode entered)
				return POCodeAndDescription

		MajorPurchasingClassAndDescription is a StringField
			type is Alpha size up to 88
			restricted
			MajorPurchasingClass
			" - "
			MajorPurchasingClass.Description

		DerivedMajorPurchasingClass is a DerivedField
			type is Alpha size up to 88
			if (MajorPurchasingClass entered)
				return MajorPurchasingClassAndDescription

		MinorPurchasingClassAndDescription is a StringField
			type is Alpha size up to 88
			restricted
			MinorPurchasingClass
			" - "
			MinorPurchasingClass.Description

		DerivedMinorPurchasingClass is a DerivedField
			type is Alpha size up to 88
			if (MinorPurchasingClass entered)
				return MinorPurchasingClassAndDescription

		DerivedItemUOMAndDescription 	is a StringField
			type is Alpha size up to 67
			EnteredUOM
			" - "
			EnteredUOM.Description

		DerivedItemAndDescription is a StringField 
			type is Alpha size up to 50
			Item
			" - "
			Description

		DerivedDistributionTotal		is a DerivedField
			type is like InternationalAmount
			return (sum RequisitionLineDistributionsRel.DerivedDistributionAmount)

		DerivedFixitQuantityInStockForSupplyDemand is a DerivedField
			type is like Quantity
				precision is DerivedNumberOfDecimalsQuantity
			restricted
			return (QuantityToShip * EnteredUOMMultiplier)  


		DerivedDelimiter is a DerivedField
			type is Alpha size 2
			restricted
			LocalConfigurationParameter = "Generic_Delimiter"
			if (FSMBODConfigurationParameterRel exists)
				return FSMBODConfigurationParameterRel.Value

		BODRequisitionLineFromLocation is a DerivedField
			type is AlphaUpper size 100
			restricted
			return FromCompanyLocationBin.FromCompany using "%d" + DerivedDelimiter + FromCompanyLocationBin.FromLocation


		BODRequisitionLineServiceIndicator	is a DerivedField
			type is Alpha size 10
			restricted
			if (ItemType = "S")
				if(ServiceCode = "A" or ServiceCode = "Q")
					return "true"
			else
				return "false"

		BODReqLineRequestedDeliveryDate is a DerivedField
		 	type is Alpha size 25
		 	restricted
		 	return RequestedDeliveryDate

		BODRequisitionLineRequestedDeliveryDate is a DerivedField
			type is Alpha size 25
			restricted
			if(RequestedDeliveryDate = "00000000")
				return ""
			else
				return BODReqLineRequestedDeliveryDate[1:4] + "-" + BODReqLineRequestedDeliveryDate[5:6] + "-" + BODReqLineRequestedDeliveryDate[7:8]


		BODCostOption is a DerivedField
			type is Alpha size 10
			restricted
			if(CostOption = "1")
				return "false"
			else
				return "true"

		BODRequisitionLineStatusCode is a DerivedField
			type is Alpha size 10
			restricted
			if (Status =1 or Status =5)
				return "Open"
			if (Status=9)
				return "Approved"
			if (Status=8)
				return "Rejected"
			else
				return "Open"

		DerivedLineVendor is a DerivedField
			type is Alpha size 9
			restricted
			return Vendor using "%d"

		DerivedReqLineVendor is a DerivedField
			type is Alpha size 100
			restricted
			if(DerivedLineVendor = "0" or DerivedLineVendor = "")
				return ""
			else
				return GeneralLedgerCompanyForCompanyRel.FinanceEnterpriseGroup + DerivedDelimiter + Company.BusinessGroup + DerivedDelimiter + DerivedLineVendor

		DerivedItemID is a DerivedField
			type is Alpha size 50
			restricted
			if(ItemType = "X" or ItemType = "S")
				return Item
			else
				return GeneralLedgerCompanyForCompanyRel.FinanceEnterpriseGroup + DerivedDelimiter + Company.BusinessGroup + DerivedDelimiter + Item


		ItemDescription2 is a DerivedField
			type is like Description
			if (ItemType.Inventoried
			or  ItemType.NonStock)
				return Item.Description2

		ItemDescription3 is a DerivedField
			type is like Description3
			if (ItemType.Inventoried
			or  ItemType.NonStock)
				return Item.Description3

		DerivedMaxRequisitionQtyMessage	is a MessageField
			"MaxRequisitionQuantityOf_<ItemLocationRel.DerivedMaximumRequisitionQuantity>_<Item.StockUOM>"

		DerivedMaximumRequisitionQuantity is a DerivedField
			type is MessageField
			if (ItemLocationRel.MaximumRequisitionQuantity entered
			and not IsSpecialOrService)
				return DerivedMaxRequisitionQtyMessage

		DerivedPicture is a DerivedField			
			type is BinaryDocument
			if (IsInventoryOrNonstock)
				return Item.Picture.File
			else
				return ContractLine.Picture.File

		DerivedOldTransactionCurrency is a DerivedField
			type is like Currency
			restricted
			return (old TransactionCurrencyCode)

		DerivedTaxCode is a DerivedField
			type is like TaxCode
			restricted
			if (PurchaseTaxCode entered)
				return PurchaseTaxCode
			else
			if (IsInventoryOrNonstock and ItemLocationRel.PurchaseTaxCode entered)
				return ItemLocationRel.PurchaseTaxCode
			else
			if (IsInventoryOrNonstock and Item.PurchaseTaxCode entered)
				return Item.PurchaseTaxCode
			else
			if (Requisition.PurchaseTaxCode entered)
				return Requisition.PurchaseTaxCode
			else
				return FromCompanyLocationBin.FromLocation.PurchaseOrderTaxCode

		DerivedQuantityWithUOM is a LabelField
			"<Quantity>_<EnteredUOM>"

		DerivedQuantityAndLine is a LabelField
			"<Quantity>_<EnteredUOM>_|_Line:_<RequisitionLine>"

		DerivedQuantityAndUnitCost is a LabelField
			"<Quantity>_<EnteredUOM>_|_UnitCost:_<ApprovalValue>_<TransactionCurrencyCode>"

		DerivedQuantityUnitCostAvailableQuantity is a LabelField
			"<DerivedQuantityAndUnitCost>_|_Available:_<DerivedAvailableQuantityInTransactionUOM>_<EnteredUOM>"

		DerivedQuantityUnitCost is a LabelField
			"<Quantity>_<EnteredUOM>_|_UnitCost:_<ApprovalValue>_<TransactionCurrencyCode>"

		DerivedUnitCostWithCurrency is a LabelField
			"<TransactionUnitCost>_<TransactionCurrencyCode>"
		
		RSSLPLDerivedUnitCostAndCurrency is a DerivedField
			type is MessageField
			if (RSSLPLDisplayCurrencyCode)
				return DerivedUnitCostWithCurrency
			else
				return TransactionUnitCost

		DerivedApprovalValueWithCurrency is a LabelField
			"<ApprovalValue>_<TransactionCurrencyCode>"

		DerivedApprovalValueWithBaseCurrency is a LabelField
			"<ApprovalValue>_<Requisition.BaseCurrencyCode.Currency>"
		
		AvailableQuantityAndUnitCost is a LabelField
			"Available:_<DerivedAvailableQuantityInTransactionUOM>_<EnteredUOM>"
		ItemLongDescription is a StringField
			type is Alpha size up to 411	
			Item.Description2
			". "
			Item.Description3
		ItemDescription is a DerivedField
			type is Alpha size up to 411
			if (ItemDescription2 entered
			and ItemDescription3 not entered)
				return ItemDescription2
			if (ItemDescription2 not entered
			and ItemDescription3 entered)
				return ItemDescription3
			if (ItemDescription2 entered
			and ItemDescription3 entered)
				return ItemLongDescription




		DerivedTenantID is a DerivedField
			type is Alpha size 60
			restricted
			LocalConfigurationParameter = "tenantID"
			if (FSMBODConfigurationParameterRel exists)
				return FSMBODConfigurationParameterRel.Value

		DerivedReleaseID is a DerivedField
			type is Alpha size 60
			restricted
			LocalConfigurationParameter = "releaseID"
			if (FSMBODConfigurationParameterRel exists)
				return FSMBODConfigurationParameterRel.Value

		DerivedLogicalID is a DerivedField
			type is Alpha size 60
			restricted
			LocalConfigurationParameter = "logicalID"
			if (FSMBODConfigurationParameterRel exists)
				return FSMBODConfigurationParameterRel.Value

		DerivedVersionID is a DerivedField
			type is Alpha size 60
			restricted
			LocalConfigurationParameter = "VersionID"
			if (FSMBODConfigurationParameterRel exists)
				return FSMBODConfigurationParameterRel.Value

		DerivedappProdline is a DerivedField
			type is Alpha size 60
			restricted
			LocalConfigurationParameter = "appProdline"
			if (FSMBODConfigurationParameterRel exists)
				return FSMBODConfigurationParameterRel.Value

		DerivedRequiredCleanDocId is a DerivedField
			type is Alpha size 60
			restricted
			LocalConfigurationParameter = "RequiredCleanDocumentID"
			if (FSMBODConfigurationParameterRel exists)
				return FSMBODConfigurationParameterRel.Value
				
		DerivedConfigFEG is a DerivedField
			type is Alpha size 60
			restricted
			LocalConfigurationParameter = "IsMultipleFEG"
			if (FSMBODConfigurationParameterRel exists)
				return FSMBODConfigurationParameterRel.Value
		
		DerivedDistributionCentre is a DerivedField
			type is Alpha size 60
			restricted
			LocalConfigurationParameter = "DistributionCentre"
			if (FSMBODConfigurationParameterRel exists)
				return FSMBODConfigurationParameterRel.Value

		DerivedVariationID is a DerivedField
			type is Alpha size 25
			restricted
			return bod id.VariationID

		BODCurrentTimeStamp is a DerivedField
			type is TimeStamp
			restricted
			BODCurrentTimeStamp = system current timestamp
			return BODCurrentTimeStamp

		AlphaCurrentTimeStamp is a DerivedField
			type is Alpha size 20
			restricted
			return BODCurrentTimeStamp

		BODFormattedCurrentTimeStamp is a DerivedField
			type is Alpha size 25
			restricted
			return AlphaCurrentTimeStamp[1:4] + "-" + AlphaCurrentTimeStamp[5:6] + "-" + AlphaCurrentTimeStamp[7:8] + "T" + AlphaCurrentTimeStamp[9:10] + ":" + AlphaCurrentTimeStamp[11:12] + ":" + AlphaCurrentTimeStamp[13:14] + "Z"

		DerivedFinanceEnterpriseGroup is a DerivedField
			type is AlphaUpper size 4
			restricted
			return GeneralLedgerCompanyForCompanyRel.FinanceEnterpriseGroup

		DerivedAE is a DerivedField
		 	type is AlphaUpper size 12
		 	restricted
		 	if(DerivedRequiredCleanDocId = "Y")
		 		return DerivedBODAccountingEntity
		 	else
		 		return Company.GeneralLedgerCompany.AccountingEntity

		DerivedBODRequisition	is a DerivedField
			type is Alpha size 7
			restricted
			return Requisition using "%d"

		DerivedBODCompany is a DerivedField
			type is Alpha size 4
			restricted
			return Company using "%d"

		DerivedLocation is a DerivedField
			type is Alpha 100
			restricted
			if(DerivedRequiredCleanDocId = "Y")
				return Requisition.RequestingLocation
			else
				return DerivedBODCompany + DerivedDelimiter + Requisition.RequestingLocation

		DerivedCrossGLC is a DerivedField
			type is Alpha size 100
			restricted
			if(DerivedConfigFEG = "Y")
				return DerivedFinanceEnterpriseGroup + DerivedDelimiter + DerivedBODCompany
			else
				return DerivedBODCompany

		DerivedBODCrossGLC is a DerivedField
			type is Alpha size 100
			restricted
			if(DerivedConfigFEG = "Y")
				return DerivedFinanceEnterpriseGroup + DerivedDelimiter + GeneralLedgerCompanyRel.Company using "%d"
			else
				return GeneralLedgerCompanyRel.Company using "%d"

		DerivedGLCCrossAccountingEntity is a DerivedField
			type is Alpha size 100
			restricted
			if(LocalAEAlreadyExecuted != true)
				LocalAEAlreadyExecuted = true
				if(FSMBODCrossReferenceDetailRel.DestinationValue entered)
					LocalCrossAEValue =  FSMBODCrossReferenceDetailRel.DestinationValue
				else
					LocalCrossAEValue =  DerivedCrossGLC
				return LocalCrossAEValue 
			else
				return LocalCrossAEValue 

		DerivedBODGLCCrossAccountingEntity is a DerivedField
			type is Alpha size 100
			restricted
			if(LocalBODAEAlreadyExecuted != true)
				LocalBODAEAlreadyExecuted = true
				if(FSMBODCrossReferenceDetailASRel.DestinationValue entered)
					LocalCrossBODAEValue = FSMBODCrossReferenceDetailASRel.DestinationValue
				else
					LocalCrossBODAEValue = DerivedBODCrossGLC
				return LocalCrossBODAEValue
			else
				return LocalCrossBODAEValue


		DerivedBODAccountingEntity is a DerivedField
			type is Alpha size 100
			restricted
			if (DerivedRequiredCleanDocId = "Y")
				return DerivedGLCCrossAccountingEntity
			else
				return DerivedFinanceEnterpriseGroup + DerivedDelimiter + DerivedAE

		DerivedBODCrossAccountingEntity is a DerivedField
			type is Alpha size 100
			restricted
			if (DerivedRequiredCleanDocId = "Y")
				return DerivedBODGLCCrossAccountingEntity
			else
			if (Company != GeneralLedgerCompanyRel.Company)
				return DerivedFinanceEnterpriseGroup + DerivedDelimiter + GeneralLedgerCompanyRel.Company.AccountingEntity
			else
				return DerivedFinanceEnterpriseGroup + DerivedDelimiter + DerivedAE
		
		DerivedBODAE is a DerivedField
			type is Alpha size 100
			restricted
			if (DerivedDistributionCentre = "Y" and DerivedRequiredCleanDocId = "Y")
				return DerivedBODGLCCrossAccountingEntity
			else
			if (DerivedRequiredCleanDocId = "Y")
				return DerivedGLCCrossAccountingEntity
			else
				return DerivedFinanceEnterpriseGroup + DerivedDelimiter + Requisition.FromCompanyLocation.FromCompany using "%d"
		
		DerivedBODLocation is a DerivedField
			type is AlphaUpper size 20
			restricted
			if (DerivedDistributionCentre = "Y" and DerivedRequiredCleanDocId = "Y")
				return Requisition.FromCompanyLocation.FromLocation
			else
			if(DerivedRequiredCleanDocId = "Y")
				return Requisition.RequestingLocation
			else
				return DerivedBODCompany + DerivedDelimiter + Requisition.FromCompanyLocation.FromLocation

		DerivedDocumentID is a DerivedField
			type is Alpha 100
			restricted
			if(DerivedRequiredCleanDocId = "Y")
				return DerivedBODRequisition
			else
				return DerivedBODCompany + DerivedDelimiter + DerivedBODRequisition

		DerivedBodID is a DerivedField
			type is Alpha size 300
			restricted
			return "infor-nid:"+DerivedTenantID+":"+DerivedBODAccountingEntity+":"+DerivedLocation+":"+DerivedDocumentID+":"+"?AdvanceShipNotice&verb=Process&TrackerID="+LocalFSMInboundBODTracker

		DerivedStatus is a DerivedField
			type is Alpha 12
			restricted
			return "Open"

		DerivedActionCode is a DerivedField
			type is Alpha size 10
			restricted
			return "Add"

		DerivedDisplayID is a DerivedField
			type is Alpha size 50
			restricted
			return DerivedBODRequisition

		DerivedBODFromLocation is a DerivedField
			type is AlphaUpper size 20
			restricted
			if(DerivedRequiredCleanDocId = "Y")
				return Requisition.FromCompanyLocation.FromLocation
			else
				return Requisition.FromCompanyLocation.FromCompany using "%d" + DerivedDelimiter + Requisition.FromCompanyLocation.FromLocation

		DerivedAddressLine1	is a DerivedField
			type is Alpha size 50
			restricted
			return Requisition.DropshipAddress.DeliveryAddress.AddressLine1

		DerivedAddressLine2	is a DerivedField
			type is Alpha size 50
			restricted
			return Requisition.DropshipAddress.DeliveryAddress.AddressLine2

		DerivedAddressLine3	is a DerivedField
			type is Alpha size 50
			restricted
			return Requisition.DropshipAddress.DeliveryAddress.AddressLine3

		DerivedAddressLine4	is a DerivedField
			type is Alpha size 50
			restricted
			return Requisition.DropshipAddress.DeliveryAddress.AddressLine4

		DerivedMunicipality	is a DerivedField
			type is Alpha size 60
			restricted
			return Requisition.DropshipAddress.Municipality

		DerivedStateProvince is a DerivedField
			type is AlphaUpper size 3
			restricted
			return Requisition.DropshipAddress.StateProvince

		DerivedCountry is a DerivedField
			type is AlphaUpper size 3
			restricted
			return Requisition.DropshipAddress.Country

		DerivedPostalCode is a DerivedField
			type is Alpha size 20
			restricted
			return Requisition.DropshipAddress.PostalCode

		DerivedCustomerBusinessGroup is a DerivedField
		 	type is AlphaUpper size 20
		 	restricted
		 	return Company.GeneralLedgerCompany.BusinessGroup

		DerivedLineItemID is a DerivedField
			type is Alpha size 100
			restricted
			if(DerivedRequiredCleanDocId = "Y")
				return Item
			else
				return DerivedFinanceEnterpriseGroup + DerivedDelimiter + DerivedCustomerBusinessGroup + DerivedDelimiter + Item

		DerivedLocationName is a DerivedField
			type is Alpha size 150
			restricted
			if (DerivedDistributionCentre = "Y")
				return Company using "%d" + DerivedDelimiter + RequestingLocation + DerivedDelimiter + RequestingLocation.Name
			else
				return RequestingLocation.Name

		RequisitionReturnXMLBOD is a DerivedField
			type is XMLDocument
			restricted
			RequisitionReturnXMLBOD = template.IONSyncRequisitionReturn_RequisitionLine_ST document for this instance

		RequisitionLineItemAbbreviation is a DerivedField
			type is AlphaUpper 3
			restricted
			if (IsSpecialOrService)
				return Description
			else
				return Item.ItemDescriptionAbbreviation

		DerivedVendorItemDisplay is a DerivedField
			type is Text
			default label is "VendorItem"
			if (VendorItem not entered)
				return blank
			else
				return VendorItem.RepresentativeText

		DerivedCommodityCodeNoDash is a StringField
			type is like CommCodes
			restricted
			CommodityCode.CommodityCodeRel.CommodityCode.Segment[1]
			CommodityCode.CommodityCodeRel.CommodityCode.Segment[2]
			CommodityCode.CommodityCodeRel.CommodityCode.Segment[3]
			CommodityCode.CommodityCodeRel.CommodityCode.Segment[4]
			CommodityCode.CommodityCodeRel.CommodityCode.Segment[5]


		KilledQuantityInStockUOM			is a DerivedField
			type is like Quantity
				precision is DerivedNumberOfDecimalsQuantity
			default label is "KilledQuantity"
   			if (EnteredUOM != Item.StockUOM)
				initialize UOMCalculation
				UOMCalculation.InputUOM      = EnteredUOM
				UOMCalculation.InputQuantity = KilledQuantity
				UOMCalculation.InputToUOM    = Item.StockUOM
				UOMCalculation.Method        = UOMCalculation.Method.ConvertToStock
				return UOMCalculation.OutputQuantity
			else
				return KilledQuantity

		MobileTotals is a LabelField
			"<TransactionUnitCost>_|_Total_Cost:_<ApprovalValue>"

		MobileItemAndRequisition is a LabelField
			"<Item>_|_Requisition:_<Requisition.Requisition>"



		CannotSetToNoChargeOrVendorDeterminedDisplay is a MessageField
			"Cost_\OptionCannotBeSetTo_\No_\ChargeOr_\Vendor_\Determined.Item<Item>IsChargeableAt<FromCompanyLocationBin.FromLocation>"

		RSSLPLRequisitionLineComment is a MessageField
			"Requisition_Line_Comment"
		
		DerivedOneYearReplicationData is a DerivedField 
        	type is Boolean
            if ((current date - create date) <  360)
                return true
            else
                return false

		DerivedDefaultBuyLocationItemUOM							is a DerivedField 
			type is like UnitOfMeasure
			return LocationItemUOMDefaultBuyingRel.UnitOfMeasure

		DerivedDefaultBuyStockUOMMultiplier 						is a DerivedField
			type is like UOMMultiplier
			return LocationItemUOMDefaultBuyingRel.DerivedUOMMultiplier

		DerivedDefaultTransactionLocationStockUOM					is a DerivedField 
			type is like UnitOfMeasure
			return LocationItemUOMDefaultTransactionRel.UnitOfMeasure

		DerivedDefaultTransactionStockUOMMultiplier 				is a DerivedField
			type is like UOMMultiplier
			return LocationItemUOMDefaultTransactionRel.DerivedUOMMultiplier

		DerivedLocationStockUOM										is a DerivedField 
			type is like UnitOfMeasure
			return ItemLocationRel.ItemLocationStockUOM.UnitOfMeasure

		DerivedLocationStockUOMMultiplier 							is a DerivedField
			type is like UOMMultiplier
			return ItemLocationRel.ItemLocationStockUOM.ItemUOM.UOMConversion

		DerivedOrderUOMRounding										is a DerivedField 
			type is Boolean
			return ItemLocationRel.HasOrderUOMRounding

		DerivedRoundToUOM											is a DerivedField 
			type is like UnitOfMeasure
			if (ParCountProcessing)
				return DerivedLocationStockUOM
			else
				if (CreatePurchaseOrder)
					return LocationItemUOMDefaultBuyingRel.UnitOfMeasure
				else	
					return LocationItemUOMDefaultTransactionRel.UnitOfMeasure

		LocationStockUOMConversionError 							is a MessageField
			"CannotConvertCleanlyToTheDefaultBuyUOMOnLocation"


		DerivedSpecialHandlingCode 		is a DerivedField
			type is Alpha size 25
			return SpecialHandlingCode

		DerivedHandlingTimeInMinutes	is a DerivedField
			type is Numeric 3
			return HandlingTimeInMinutes
		
		DerivedSpecialHandlingInstructions is a DerivedField
			type is MessageField
			return SpecialHandlingInstructions
		
		DerivedTimeSensitive is a DerivedField
			type is Boolean
			return SpecialHandlingCode.TimeSensitive

		CurrentTimestamp is a DerivedField
			type is Alpha 20
			restricted
			return current timestamp				

		WarehouseLocationInventoriedSub is a DerivedField
			type is Boolean
			for each OtherWarehouseLocationRuleDetailsRel 
				LocalOtherWarehouseFromCompanyLocation.FromCompany  = each.LocationCompany
				LocalOtherWarehouseFromCompanyLocation.FromLocation = each.InventoryLocation
				if (SubstituteItemForWHCompanyAndLocationRel exists
				or  SubstituteItemForWHCompanyRel exists 
				or  SubstituteItemForGlobalRel exists) 
					if (OtherSubstituteItemLocationInventoriedRel exists) 
						return true	

		WarehouseLocationInventoriedSubWithStock is a DerivedField
			type is Boolean
			for each OtherWarehouseLocationRuleDetailsRel
				LocalOtherWarehouseFromCompanyLocation.FromCompany  = each.LocationCompany
				LocalOtherWarehouseFromCompanyLocation.FromLocation = each.InventoryLocation
				if (SubstituteItemForWHCompanyAndLocationRel exists
				or  SubstituteItemForWHCompanyRel exists 
				or  SubstituteItemForGlobalRel exists) 
					if (OtherSubstituteItemLocationInventoriedRel.AvailableQuantity > 0) 
						return true
						
		DerivedOrderMultiple is a DerivedField
			type is like OrderMultiple
			restricted
			return RequestingItemLocationRel.OrderMultiple

		DerivedParItemUOM is a DerivedField
			type is like UnitOfMeasure
			restricted
			return RequestingItemLocationRel.DefaultTransactionUOM.UnitOfMeasure

		DerivedAllocationPriorityLevel is a DerivedField
			type is like AllocationPriorityLevel
			restricted
			if (AllocationPriority entered
        	and RSSLPLConfigurationParameterRel exists)
				return AllocationPriority

		DerivedReturnYes is a DerivedField
			type is Alpha size 1
			restricted
			return "Y"

		DerivedWHLocAvailableQuantity is a DerivedField
			type is like Quantity
			restricted
			if (IsProcessedStatus)
				if (PreferenceCardTransaction
				and LocalPrefCardFromCompanyLocation = LocalLocationRuleFromCompanyLocation)
					return WarehouseLocationRuleItemLocationRel.AvailableQuantity + DerivedReservedQuantity
				else
					return WarehouseLocationRuleItemLocationRel.AvailableQuantity
			else
				if (PreferenceCardTransaction
				and LocalPrefCardFromCompanyLocation = LocalLocationRuleFromCompanyLocation)
					return WarehouseLocationRuleItemLocationForAnItemRel.AvailableQuantity + DerivedReservedQuantity
				else
					return WarehouseLocationRuleItemLocationForAnItemRel.AvailableQuantity

		RSSLPLMissingRequiredFieldsLabel is a LabelField
			"MissingRequiredFields"
			
		DerivedWarehouseStorageLocation is a DerivedField
			type is like WarehouseStorageLocation
			return first StockOnHandDetailRel.StockOnHandDetail.Bin.WarehouseStorageLocation


		DerivedDeliveryMethodState is a DerivedField
			type is Alpha size 2
			return DeliveryMethod
		
		RSSLPLQuantityAndUnitCostWithoutCurrencyCodeLabel is a LabelField
			"<Quantity>_<EnteredUOM>_|_UnitCost:_<ApprovalValue>"
		
		RSSLPLDerivedQuantityUnitCostAvailableQuantityCurrency is a DerivedField
			type is MessageField
			if (RSSLPLDisplayCurrencyCode)
				return DerivedQuantityUnitCostAvailableQuantity
			else 
				return RSSLPLQuantityAndUnitCostWithoutCurrencyCodeLabel + " | Available: " + DerivedAvailableQuantityInTransactionUOM + " " + EnteredUOM
		
		RSSLPLDerivedQuantityAndUnitCostCurrency is a DerivedField
			type is MessageField
			if (RSSLPLDisplayCurrencyCode)
				return DerivedQuantityAndUnitCost
			else
				return RSSLPLQuantityAndUnitCostWithoutCurrencyCodeLabel

		DerivedLastIssueCost is a DerivedField
			type is like InternationalCost
			restricted
			return last InventoryIssueTransactionLineRel.DerivedLastIssueCost

	Relations
		GlobalAverageCostAndSOHRel
            one-to-one relation to GlobalAverageCostAndSOH
            Field Mapping uses symbolic key
                related.Company           = Requisition.FromCompanyLocation.FromCompany
                related.Item              = Item

		RecipeRel
			one-to-one relation to Recipe
			Field Mapping uses symbolic key
				related.ItemGroup				= Item.ItemGroup
				related.Item					= Item

		VoidedWarehouseShipmentLinesAuditRel
			one-to-many relation to WarehouseShipmentLineAudit
			Field Mapping uses symbolic key
				related.Company					= FromCompanyLocationBin.FromCompany
				related.InventoryLocation		= FromCompanyLocationBin.FromLocation
				related.WarehouseShipment		= LocalSavedWarehouseShipment
				related.WarehouseShipmentLine	= LocalSavedWarehouseShipmentLine
			Instance Selection
				where (related.ActionCode.Void)

		DuplicateProcedureSerialRel 
			one-to-many relation to RequisitionLine 
			Field Mapping uses symbolic key 
				related.Company 				= Company 
				related.Requisition             = Requisition 
			Instance Selection
				where (related.PatientProcedure.SerialNumber entered
				and    related.PatientProcedure.SerialNumber = PatientProcedure.SerialNumber
				and    related.UniqueID                     != UniqueID)
		
		OriginalItemRel
			one-to-one relation to Item
			Field Mapping uses symbolic key
				related.ItemGroup					= Company.ItemGroup
				related.Item						= OriginalItem

		SubstituteItemRel
			one-to-one relation to Item
			Field Mapping uses symbolic key
				related.ItemGroup					= Company.ItemGroup
				related.Item						= LocalSubstituteItem

		ThisContractCapitatedComponentGroupItemRel 
			one-to-many relation to ContractCapitatedComponentGroupItem 
			Field Mapping uses ByContractLine  
				related.ContractGroup 					= Company.ItemGroup 
				related.Contract                    	= Contract 
				related.ComponentContractLine       	= ContractLine 	
		 		related.ContractLine 					= CapitatedProcedureLine 						
				related.ContractCapitatedComponentGroup	= CapitatedComponentGroup			

		ThisContractCapitatedComponentGroupCompanyRel 
			one-to-many relation to ContractCapitatedCompanyLocationItem 
			Field Mapping uses ByComponentLine  
				related.ContractGroup 						= Company.ItemGroup 
				related.Contract                    		= Contract 
		 		related.ContractLine 						= CapitatedProcedureLine 
				related.ContractCapitatedComponentGroup		= CapitatedComponentGroup
				related.ComponentContractLine           	= ContractLine 	
				related.Company                             = FromCompanyLocationBin.FromCompany

		ThisContractCapitatedComponentGroupLocationRel 
			one-to-many relation to ContractCapitatedCompanyLocationItem 
			Field Mapping uses ByComponentLine  
				related.ContractGroup 						= Company.ItemGroup 
				related.Contract                    		= Contract 
		 		related.ContractLine 						= CapitatedProcedureLine 
				related.ContractCapitatedComponentGroup		= CapitatedComponentGroup
				related.ComponentContractLine           	= ContractLine 							
				related.Company                             = FromCompanyLocationBin.FromCompany
				related.Location                            = FromCompanyLocationBin.FromLocation 	
		ContractCapitatedComponentGroupRel 
			one-to-one relation to ContractCapitatedComponentGroup 
			Field Mapping uses symbolic key 
				related.ContractGroup 					= Company.ItemGroup 
				related.Contract                    	= Contract 
				related.ContractLine                    = CapitatedProcedureLine
				related.ContractCapitatedComponentGroup = CapitatedComponentGroup

		RequisitionLinesForComponentGroup 
			one-to-many relation to RequisitionLine 
			Field Mapping uses symbolic key 
				related.Company			= Company 
				related.Requisition     = Requisition
			Instance Selection 
				where (related.CapitatedProcedureLine 	= CapitatedProcedureLine
				and    related.CapitatedComponentGroup	= CapitatedComponentGroup)		

		ChargedCapitatedComponentRel
			one-to-many relation to RequisitionLine 
			Field Mapping uses symbolic key 
				related.Company			= Company 
				related.Requisition     = Requisition
			Instance Selection 
				where (related.CapitatedProcedureLine 	= CapitatedProcedureLine
				and    related.CapitatedComponentGroup	= CapitatedComponentGroup
				and    related.CostOption.CostRequired)			
		RequisitionLineForThisProcedureRel 
			one-to-many relation to RequisitionLine 
			Field Mapping uses symbolic key 
				related.Company			= Company 
				related.Requisition     = Requisition
			Instance Selection 
				where (related.IsACapitatedProcedure
				and    related.Item     				= LocalProcedureItem
				and    related.CapitatedProcedureLevel 	= LocalProcedureLevel)	

		ProcedureForThisRequisitionRel 
			one-to-many relation to RequisitionLine 
			Field Mapping uses symbolic key 
				related.Company			= Company 
				related.Requisition     = Requisition
			Instance Selection 
				where (related.IsACapitatedProcedure
				and    related.ContractLine				= CapitatedProcedureLine)			

		ComponentsForProcedureRel 
			one-to-many relation to RequisitionLine 
			Field Mapping uses symbolic key 
				related.Company			= Company 
				related.Requisition     = Requisition
			Instance Selection 
				where (related.CapitatedProcedureLine = ContractLine)			

		NoChargeSelectedForSwapRel
			one-to-many relation to RequisitionLine
			Field Mapping uses symbolic key 
				related.Company			= Company 
				related.Requisition     = Requisition
			Instance Selection 
				where (related.CapitatedSelectForSwapNoCharge = true)			
		ChargeSelectedForSwapRel
			one-to-many relation to RequisitionLine
			Field Mapping uses symbolic key 
				related.Company			= Company 
				related.Requisition     = Requisition
			Instance Selection 
				where (related.CapitatedSelectForSwapCharged = true)	

		RelatedItemRel
			one-to-many relation to AssociatedItem
			Field Mapping uses Set3
				related.ItemGroup								= Company.ItemGroup
				related.AssociatedItem.RelatedItem				= Item
				related.Item									= OriginalItem
				related.AssociatedItem.AssociatedItemSubType 	= AssociatedItemSubType.Substitute

		ValidSubstituteItemsRel
			one-to-many relation to AssociatedItem
			Field Mapping uses ByPriorityAndContract
				related.ItemGroup 		= Item.ItemGroup
				related.Item			= Item
			Instance Selection
				where (related.IsWithinEffectiveDate
				and	  (related.IsItemMasterSubstitute
				or    (related.ContractLineForSubstitution
				and	  related.DerivedValidContractParticipant))
				and   (related.IsNotLocationSpecific
				or	  (related.IsSubstituteForCompanyOnly
				and	  related.AssociatedItem.RelatedCompany 		= FromCompanyLocationBin.FromCompany)
				or    (related.AssociatedItem.RelatedCompany 		= FromCompanyLocationBin.FromCompany
				and   related.AssociatedItem.RelatedLocation		= FromCompanyLocationBin.FromLocation)))
				
		OtherItemSubstitutesRel
			one-to-many relation to AssociatedItem
			Field Mapping uses Set3
				related.ItemGroup					= Item.ItemGroup
				related.AssociatedItem.RelatedItem 	= Item
			Instance Selection
				where (related.IsSubstitute
				and    current corporate date >= related.EffectiveDate
				and   (related.ExpirationDate not entered
				or     current corporate date <= related.ExpirationDate))

		PriorityAssociatedItemRel
			one-to-many relation to AssociatedItem
			Field Mapping uses ByPriority
				related.ItemGroup 		= Item.ItemGroup
				related.Item			= Item
			Instance Selection
				where (current corporate date >= related.EffectiveDate
				and   (related.ExpirationDate not entered
				or     current corporate date <= related.ExpirationDate))

		PriorityAssociatedItemInLocationRel
			one-to-many relation to AssociatedItem
			Field Mapping uses ByPriority
				related.ItemGroup 		= Item.ItemGroup
				related.Item			= Item
			Instance Selection
				where (related.IsInRequisitionLocation
				and current corporate date >= related.EffectiveDate
				and   (related.ExpirationDate not entered
				or     current corporate date <= related.ExpirationDate))

		SubstituteItemByPriorityRel
			one-to-many relation to AssociatedItem
			Field Mapping uses ByPriorityAndContract
				related.ItemGroup 		= Item.ItemGroup
				related.Item			= Item
			Instance Selection
				where (((related.IsInRequisitionLocation 	and related.IsItemMasterSubstitute)
				or       related.ContractLineForSubstitution)
				and      related.IsNotLocationSpecific
				and      related.IsWithinEffectiveDate)

		SubstituteItemByPriorityNoLocationRel
			one-to-many relation to AssociatedItem
			Field Mapping uses ByPriorityAndContract
				related.ItemGroup 		= Item.ItemGroup
				related.Item			= Item
			Instance Selection
				where ((related.IsItemMasterSubstitute
				or      related.ContractLineForSubstitution)
				and     related.IsNotLocationSpecific
				and     related.IsWithinEffectiveDate)

		SubstituteItemByPriorityWithCompanyOnlyRel
			one-to-many relation to AssociatedItem
			Field Mapping uses ByPriorityAndContract
				related.ItemGroup 		= Item.ItemGroup
				related.Item			= Item
			Instance Selection
				where (related.AssociatedItem.RelatedCompany		= FromCompanyLocationBin.FromCompany
				and    related.IsSubstituteForCompanyOnly
				and    related.IsWithinEffectiveDate
				and    (related.IsItemMasterSubstitute
				or      related.ContractLineForSubstitution))

	 	SubstituteItemsWithLocationAndPriorityRel
			one-to-many relation to AssociatedItem
			Field Mapping uses ByPriorityAndContract
				related.ItemGroup 									= Item.ItemGroup
				related.Item										= Item
			Instance Selection
				where (related.AssociatedItem.RelatedCompany		= FromCompanyLocationBin.FromCompany
				and    related.AssociatedItem.RelatedLocation		= FromCompanyLocationBin.FromLocation
				and    related.IsWithinEffectiveDate
				and    (related.IsItemMasterSubstitute
				or      related.ContractLineForSubstitution))

	 	ItemMasterSubstituteWithLocationRel
			one-to-many relation to AssociatedItem
			Field Mapping uses ByPriority
				related.ItemGroup 									= Item.ItemGroup
				related.Item										= Item
			Instance Selection
				where (related.AssociatedItem.RelatedCompany		= LocalLocationRuleFromCompanyLocation.FromCompany
				and    related.AssociatedItem.RelatedLocation		= LocalLocationRuleFromCompanyLocation.FromLocation
				and    related.IsWithinEffectiveDate
				and    related.IsItemMasterSubstitute)

		
		WarehouseLocationSubstituteWithLocationRel
			one-to-many relation to AssociatedItem
			Field Mapping uses ByPriorityAndContract
				related.ItemGroup 		= Item.ItemGroup
				related.Item			= Item
			Instance Selection
				where (related.AssociatedItem.RelatedCompany		= LocalLocationRuleFromCompanyLocation.FromCompany
				and    related.AssociatedItem.RelatedLocation		= LocalLocationRuleFromCompanyLocation.FromLocation
				and    related.IsWithinEffectiveDate
				and   (related.IsItemMasterSubstitute
				or     related.ContractLineForSubstitution))

		WarehouseLocationSubstituteCompanyOnlyRel
			one-to-many relation to AssociatedItem
			Field Mapping uses ByPriorityAndContract
				related.ItemGroup 		= Item.ItemGroup
				related.Item			= Item
			Instance Selection
				where (related.AssociatedItem.RelatedCompany		= LocalLocationRuleFromCompanyLocation.FromCompany
				and    related.IsSubstituteForCompanyOnly
				and    related.IsWithinEffectiveDate
				and   (related.IsItemMasterSubstitute
				or     related.ContractLineForSubstitution))

	 	SpecialItemSubstituteWithLocationRel
			one-to-many relation to AssociatedItem
			Field Mapping uses ByPriorityAndContract
				related.ItemGroup 									= Item.ItemGroup
				related.Item										= Item
			Instance Selection
				where (related.AssociatedItem.RelatedCompany		= LocalLocationRuleFromCompanyLocation.FromCompany
				and    related.AssociatedItem.RelatedLocation		= LocalLocationRuleFromCompanyLocation.FromLocation
				and    related.IsWithinEffectiveDate
				and    related.ContractLineForSubstitution)

	 	SpecialItemSubstituteWithOutLocationRel
			one-to-many relation to AssociatedItem
			Field Mapping uses ByPriorityAndContract
				related.ItemGroup 									= Item.ItemGroup
				related.Item										= Item
			Instance Selection
				where (related.IsWithinEffectiveDate
				and    related.ContractLineForSubstitution)

		SubstituteItemForWHCompanyAndLocationRel
			one-to-many relation to AssociatedItem
			Field Mapping uses Set3
				related.ItemGroup								= Company.ItemGroup
				related.AssociatedItem.RelatedItem				= LocalSubstituteItem
				related.Item									= LocalOriginalItem
				related.AssociatedItem.AssociatedItemSubType 	= AssociatedItemSubType.Substitute
				related.AssociatedItem.RelatedCompany			= LocalLocationRuleFromCompanyLocation.FromCompany
				related.AssociatedItem.RelatedLocation			= LocalLocationRuleFromCompanyLocation.FromLocation
			Instance Selection
				where (related.IsWithinEffectiveDate)
		SubstituteItemForWHCompanyRel
			one-to-many relation to AssociatedItem
			Field Mapping uses Set3
				related.ItemGroup								= Company.ItemGroup
				related.AssociatedItem.RelatedItem				= LocalSubstituteItem
				related.Item									= LocalOriginalItem
				related.AssociatedItem.AssociatedItemSubType 	= AssociatedItemSubType.Substitute
				related.AssociatedItem.RelatedCompany			= LocalLocationRuleFromCompanyLocation.FromCompany
				related.AssociatedItem.RelatedLocation			= blank
			Instance Selection
				where (related.IsWithinEffectiveDate)

		SubstituteItemForGlobalRel
			one-to-many relation to AssociatedItem
			Field Mapping uses Set3
				related.ItemGroup								= Company.ItemGroup
				related.AssociatedItem.RelatedItem				= LocalSubstituteItem
				related.Item									= LocalOriginalItem
				related.AssociatedItem.AssociatedItemSubType 	= AssociatedItemSubType.Substitute
				related.AssociatedItem.RelatedCompany			= blank
				related.AssociatedItem.RelatedLocation			= blank
			Instance Selection
				where (related.IsWithinEffectiveDate)

    	ContractLineTaxableCompanyRel 
			one-to-many relation to ContractAndLineLocation 
			Field Mapping uses ByLineAndCompanyOnly 
    			related.ContractGroup						= Company.ItemGroup
    			related.Contract 							= Contract
				related.ContractLine        				= ContractLine 
				related.ContractAndLineLocation.Company		= FromCompanyLocationBin.FromCompany
			Instance Selection 
				where (related.Taxable > 0)		

    	ContractLineTaxCodeCompanyRel 
			one-to-many relation to ContractAndLineLocation 
			Field Mapping uses ByLineAndCompanyOnly 
    			related.ContractGroup						= Company.ItemGroup
    			related.Contract 							= Contract
				related.ContractLine        				= ContractLine 
				related.ContractAndLineLocation.Company		= FromCompanyLocationBin.FromCompany
			Instance Selection 
				where (related.TaxCode entered)				
		
    	ContractTaxableCompanyRel 
			one-to-many relation to ContractAndLineLocation 
			Field Mapping uses ByCompanyOnly 
    			related.ContractGroup						= Company.ItemGroup
    			related.Contract 							= Contract
				related.ContractAndLineLocation.Company		= FromCompanyLocationBin.FromCompany
			Instance Selection 
				where (related.Taxable > 0)		

    	ContractTaxCodeCompanyRel 
			one-to-many relation to ContractAndLineLocation 
			Field Mapping uses ByCompanyOnly 
    			related.ContractGroup						= Company.ItemGroup
    			related.Contract 							= Contract
				related.ContractAndLineLocation.Company		= FromCompanyLocationBin.FromCompany
			Instance Selection 
				where (related.TaxCode entered)		

    	ContractLineTaxableLocationRel 
			one-to-many relation to ContractAndLineLocation 
			Field Mapping uses ByLineAndLocationOnly 
    			related.ContractGroup						= Company.ItemGroup
    			related.Contract 							= Contract
				related.ContractLine        				= ContractLine 
				related.ContractAndLineLocation.Company		= FromCompanyLocationBin.FromCompany
				related.ContractAndLineLocation.Location	= FromCompanyLocationBin.FromLocation
			Instance Selection 
				where (related.Taxable > 0)		

    	ContractLineTaxCodeLocationRel 
			one-to-many relation to ContractAndLineLocation 
			Field Mapping uses ByLineAndLocationOnly 
    			related.ContractGroup						= Company.ItemGroup
    			related.Contract 							= Contract
				related.ContractLine        				= ContractLine 
				related.ContractAndLineLocation.Company		= FromCompanyLocationBin.FromCompany
				related.ContractAndLineLocation.Location	= FromCompanyLocationBin.FromLocation
			Instance Selection 
				where (related.TaxCode entered)				
		
    	ContractTaxableLocationRel 
			one-to-many relation to ContractAndLineLocation 
			Field Mapping uses ByLocationOnly 
    			related.ContractGroup						= Company.ItemGroup
    			related.Contract 							= Contract
				related.ContractAndLineLocation.Company		= FromCompanyLocationBin.FromCompany
				related.ContractAndLineLocation.Location	= FromCompanyLocationBin.FromLocation
			Instance Selection 
				where (related.Taxable > 0)		

    	ContractTaxCodeLocationRel 
			one-to-many relation to ContractAndLineLocation 
			Field Mapping uses ByLocationOnly 
    			related.ContractGroup						= Company.ItemGroup
    			related.Contract 							= Contract
				related.ContractAndLineLocation.Company		= FromCompanyLocationBin.FromCompany
				related.ContractAndLineLocation.Location	= FromCompanyLocationBin.FromLocation
			Instance Selection 
				where (related.TaxCode entered)		

    	ContractLineTaxableRequestingLocationRel 
			one-to-many relation to ContractAndLineLocation 
			Field Mapping uses ByLineAndRequestingLocationOnly 
    			related.ContractGroup								= Company.ItemGroup
    			related.Contract 									= Contract
				related.ContractLine        						= ContractLine 
				related.ContractAndLineLocation.Company				= Company
				related.ContractAndLineLocation.RequestingLocation	= RequestingLocation
			Instance Selection 
				where (related.Taxable > 0)		

    	ContractLineTaxCodeRequestingLocationRel 
			one-to-many relation to ContractAndLineLocation 
			Field Mapping uses ByLineAndRequestingLocationOnly 
    			related.ContractGroup								= Company.ItemGroup
    			related.Contract 									= Contract
				related.ContractLine        						= ContractLine 
				related.ContractAndLineLocation.Company				= Company
				related.ContractAndLineLocation.RequestingLocation	= RequestingLocation
			Instance Selection 
				where (related.TaxCode entered)				
		
    	ContractTaxableRequestingLocationRel 
			one-to-many relation to ContractAndLineLocation 
			Field Mapping uses ByRequestingLocationOnly 
    			related.ContractGroup								= Company.ItemGroup
    			related.Contract 									= Contract
				related.ContractAndLineLocation.Company				= Company
				related.ContractAndLineLocation.RequestingLocation	= RequestingLocation
			Instance Selection 
				where (related.Taxable > 0)		

    	ContractTaxCodeRequestingLocationRel 
			one-to-many relation to ContractAndLineLocation 
			Field Mapping uses ByRequestingLocationOnly 
    			related.ContractGroup								= Company.ItemGroup
    			related.Contract 									= Contract
				related.ContractAndLineLocation.Company				= Company
				related.ContractAndLineLocation.RequestingLocation	= RequestingLocation
			Instance Selection 
				where (related.TaxCode entered)		

		RecallProductTransactionRel
			one-to-many relation to RecallProductTransaction
			Field Mapping uses symbolic key
				related.RecallGroup				= LocalRecallGroup
				related.RecallNotice			= LocalRecallNotice
				related.RecallProduct			= LocalRecallProduct
			Instance Selection
				where (related.RequisitionLineGroup.Requisition 	= Requisition
				and    related.RequisitionLineGroup.RequisitionLine = RequisitionLine)

		RequisitionLineItemRel
			one-to-many relation to RequisitionLine
			Field Mapping uses Set8
				related.Company 				= LocalCompanyForQuantityAdd
				related.Item					= Item
				related.Requisition				= LocalRequisitionForQuantityAdd
			Instance Selection
				where (related.EnteredUOM = LocalCostUOMForQuantityAdd
				and    related.ItemType   = ItemType
				and    related.UnitCost   = UnitCost)

		RequisitionLineItemMatchRel
			one-to-one relation to RequisitionLine
			Field Mapping uses symbolic key
				related.Company				= LocalCompanyForQuantityAdd
				related.Requisition			= LocalRequisitionForQuantityAdd
				related.RequisitionLine		= DerivedRequisitionLine

		PrintOnRequisitionLineCommentsRel is a RequisitionLineComment set
			Instance Selection
				where (related.CommentType.PrintOnRequisition)

		LineAddOnChargesForIDMRel
			one-to-many relation to RequisitionLineAddOnCharge
			Field Mapping uses BySpreadMethod
				related.Company				= Company
				related.Requisition			= Requisition
				related.RequisitionLine		= RequisitionLine

		LineAddOnChargeFromContractRel
			one-to-many relation to RequisitionLineAddOnCharge
			Field Mapping uses symbolic key
				related.Company				= Company
				related.Requisition			= Requisition
				related.RequisitionLine		= RequisitionLine
			Instance Selection
				where  (related.AddOnCharge	= LocalAddOnCharge) 

		LineAllowancesWithDifferentTaxRel
			one-to-many relation to RequisitionLineAddOnCharge
			Field Mapping uses BySpreadMethod
				related.Company				= Company
				related.Requisition			= Requisition
				related.RequisitionLine		= RequisitionLine
			Instance Selection
				where (related.AddOnCharge.AddOnChargeType.Allowance
				and	   related.TaxCode != PurchaseTaxCode)

		TaxableLineAllowancesWithDifferentTaxRel
			one-to-many relation to RequisitionLineAddOnCharge
			Field Mapping uses BySpreadMethod
				related.Company				= Company
				related.Requisition			= Requisition
				related.RequisitionLine		= RequisitionLine
			Instance Selection
				where (related.AddOnCharge.AddOnChargeType.Allowance
				and   (related.Taxable 		= true
				and	   related.TaxCode 		!= PurchaseTaxCode))

		TaxableLineAndAddOnChargeRel is a RequisitionLineAddOnCharge set
			Instance Selection
				where (related.AddOnCharge.AddOnChargeType.Allowance
				and    related.AddOnCharge.Taxable)

		LineAllowancesWithTaxRel
			one-to-many relation to RequisitionLineAddOnCharge
			Field Mapping uses BySpreadMethod
				related.Company				= Company
				related.Requisition			= Requisition
				related.RequisitionLine		= RequisitionLine
			Instance Selection
				where (related.AddOnCharge.AddOnChargeType.Allowance
				and	   related.TaxCode entered)

		ContractLineAOCRel 
			one-to-many relation to ContractLineAOC
			Field Mapping uses part of key
				related.ContractGroup	= PurchasingCompanyRel.ProcurementGroup
				related.Contract		= Contract
				related.ContractLine	= ContractLine
			Instance Selection
				where (related.Company           = Company)

		OldContractLineAOCRel
			one-to-many relation to ContractLineAOC
			Field Mapping uses part of key
				related.ContractGroup	= PurchasingCompanyRel.ProcurementGroup
				related.Contract		= old Contract
				related.ContractLine	= old ContractLine
			Instance Selection
				where (related.Company  = Company)


		RequisitionLineDistributionErrorRel is a RequisitionLineError set
			Instance Selection
				where (related.ErrorType.Distribution)

		RequisitionLineErrorRel is a RequisitionLineError set

		ContractParticipantByCompanyRel
			one-to-many relation to ContractParticipant
			Field Mapping uses symbolic key
				related.ContractGroup										= PurchasingCompanyRel.ProcurementGroup
				related.Contract											= RequisitionLine.Contract
			Instance Selection
				where (related.ContractParticipant.ParticipantLocation.Company				= Company
				and    related.ContractParticipant.ParticipantLocation.Location 			= blank
				and    related.ContractParticipant.ParticipantLocation.RequestingLocation	= blank)

		ItemOnContractRel
			one-to-many relation to ContractLine
			Field Mapping uses ByItemContractLine
				related.ContractGroup 			= PurchasingCompanyRel.ProcurementGroup
				related.ItemNumber    			= Item
			Instance Selection
				where (Requisition.DerivedCreationDate >= related.EffectiveDate
				and   (Requisition.DerivedCreationDate <= related.ExpirationDate
				or 		related.ExpirationDate	= blank))

		ContractParticipantByLocationRel
			one-to-many relation to ContractParticipant
			Field Mapping uses symbolic key
				related.ContractGroup										= PurchasingCompanyRel.ProcurementGroup
				related.Contract											= RequisitionLine.Contract
			Instance Selection
				where (related.ContractParticipant.ParticipantLocation.Company				= Company
				and    related.ContractParticipant.ParticipantLocation.Location 			= Requisition.FromCompanyLocation.FromLocation
				and    related.ContractParticipant.ParticipantLocation.RequestingLocation	= blank)

		ContractParticipantByRequestingLocationRel
			one-to-many relation to ContractParticipant
			Field Mapping uses symbolic key
				related.ContractGroup										= PurchasingCompanyRel.ProcurementGroup
				related.Contract											= RequisitionLine.Contract
			Instance Selection
				where (related.ContractParticipant.ParticipantLocation.Company				= Company
				and    related.ContractParticipant.ParticipantLocation.Location 			= blank
				and    related.ContractParticipant.ParticipantLocation.RequestingLocation	= Requisition.RequestingLocation)


		ItemGTINRel
			one-to-many relation to ItemGTIN
			Field Mapping uses Set7
				related.ItemGroup			= Item.ItemGroup
				related.Manufacturer		= Manufacturer
				related.ManufacturerNumber	= ManufacturerNumber
				related.Item      			= Item
				related.UnitOfMeasure		= EnteredUOM
			Instance Selection
				where (related.Active)

		ActiveItemGTINRel
			one-to-many relation to ItemGTIN
			Field Mapping uses Set2
				related.ItemGroup			= Item.ItemGroup
				related.ItemGTIN			= ItemGTIN
				related.Item      			= Item
			Instance Selection
				where (related.Active)

		GTINWithMatchingManufacturerInfoRel
			one-to-many relation to ItemGTIN
			Field Mapping uses Set7
				related.ItemGroup			= Item.ItemGroup
                related.Manufacturer		= LocalManufacturer
                related.ManufacturerNumber	= LocalManufacturerNumber
                related.Item				= Item
                related.UnitOfMeasure		= LocalUnitOfMeasure
			Instance Selection
				where (related.Active
				and    related.UseAsDefaultPerUOM)			

		NoDefaultGTINRel
			one-to-many relation to ItemGTIN
			Field Mapping uses Set7
				related.ItemGroup			= Item.ItemGroup
                related.Manufacturer		= LocalManufacturer
                related.ManufacturerNumber	= LocalManufacturerNumber
                related.Item				= Item
                related.UnitOfMeasure		= LocalUnitOfMeasure
			Instance Selection
				where (related.Active)

		ForPrintingCommentsRel is a RequisitionLineComment set
			Instance Selection
				where ((not related.CommentType.PrintOnPickList
				and		not related.CommentType.PrintOnRequisition)
				or 		related.CommentType.PrintOnDeliveryTicket)

		InventoryTransactionRel
			one-to-one relation to InventoryTransaction
			valid when (IsInventoryType)

			Field Mapping uses symbolic key
				related.Company                                    = FromCompanyLocationBin.FromCompany
				related.InventoryLocation                          = FromCompanyLocationBin.FromLocation
				related.InventoryTransaction					   = ReturnInventoryTransactionLineRel.InventoryTransaction

		RecallGroupRel
			one-to-one relation to RecallGroup
			Field Mapping uses symbolic key
				related.RecallGroup             = Company.ItemGroup

		RecallProductItemForItemHardErrorRel
			one-to-many relation to RecallProductItem
			Field Mapping uses ByItem
				related.RecallGroup             = Company.ItemGroup
				related.Item                    = Item
			Instance Selection
				where (((related.RecallNotice.Vendor = Vendor
				and    related.RecallNotice.Vendor entered
				and    Vendor entered)
				or     related.RecallNotice.Vendor !entered
				or     Vendor !entered)
				and   (related.RecallNotice.Status.Pending
				or     related.RecallNotice.Status.Active)
				and    related.RecallNotice.RestrictRequisitionCreation.HardError)

		RecallProductItemForVendorItemHardErrorRel
			one-to-many relation to RecallProductItem
			Field Mapping uses ByVendorItem
		   		related.RecallGroup             = Company.ItemGroup
				related.VendorItem              = VendorItem
			Instance Selection
				where (((related.RecallNotice.Vendor = Vendor
				and    related.RecallNotice.Vendor entered
				and    Vendor entered)
				or     related.RecallNotice.Vendor !entered
				or     Vendor !entered)
				and   (related.RecallNotice.Status.Pending
				or     related.RecallNotice.Status.Active)
				and    related.RecallNotice.RestrictRequisitionCreation.HardError)

		RecallProductItemForItemWarningRel
			one-to-many relation to RecallProductItem
			Field Mapping uses ByItem
				related.RecallGroup             = Company.ItemGroup
				related.Item                    = Item
			Instance Selection
				where (((related.RecallNotice.Vendor = Vendor
				and    related.RecallNotice.Vendor entered
				and    Vendor entered)
				or     related.RecallNotice.Vendor !entered
				or     Vendor !entered)
				and   (related.RecallNotice.Status.Pending
				or     related.RecallNotice.Status.Active)
				and    related.RecallNotice.RestrictRequisitionCreation.Warning)

		RecallProductItemForVendorItemWarningRel
			one-to-many relation to RecallProductItem
			Field Mapping uses ByVendorItem
		   		related.RecallGroup             = Company.ItemGroup
				related.VendorItem              = VendorItem
			Instance Selection
				where (((related.RecallNotice.Vendor = Vendor
				and    related.RecallNotice.Vendor entered
				and    Vendor entered)
				or     related.RecallNotice.Vendor !entered
				or     Vendor !entered)
				and   (related.RecallNotice.Status.Pending
				or     related.RecallNotice.Status.Active)
				and    related.RecallNotice.RestrictRequisitionCreation.Warning)

		RecallProductItemForItemRel
			one-to-many relation to RecallProductItem
			Field Mapping uses ByItem
				related.RecallGroup             = Company.ItemGroup
				related.Item                    = Item
			Instance Selection
				where (related.RecallNotice.Status.Pending
				or     related.RecallNotice.Status.Active)

		ReturnInventoryTransactionLineRel
			one-to-many relation to InventoryTransactionLine
			valid when (IsInventoryType)
			Field Mapping uses ByOriginatingTransaction
				related.OriginatingTransaction						= reference to this instance
				related.TransactionSystemCode						= "RQ"
				related.Company										= FromCompanyLocationBin.FromCompany
				related.InventoryLocation                           = FromCompanyLocationBin.FromLocation
			Instance Selection
				where (related.InventoryTransactionLine.LineNumber	= RequisitionLine
				and	   related.IsRequisitionReturn)
		
		DifferentLocationReturnInventoryTransactionLineRel
            one-to-many relation to InventoryTransactionLine
            valid when (IsInventoryType)
            Field Mapping uses ByOriginatingTransaction
                related.OriginatingTransaction                      = reference to this instance
                related.TransactionSystemCode                       = "RQ"
                related.Company                                     = FromCompanyLocationBin.FromCompany
            Instance Selection
                where (related.InventoryTransactionLine.LineNumber  = RequisitionLine
                and		related.IsRequisitionReturn
				and 	related.InventoryLocation != FromCompanyLocationBin.FromLocation)
		
		AllLocationReturnInventoryTransactionLineRel
            one-to-many relation to InventoryTransactionLine
            valid when (IsInventoryType)
            Field Mapping uses ByOriginatingTransaction
                related.OriginatingTransaction                      = reference to this instance
                related.TransactionSystemCode                       = "RQ"
                related.Company                                     = FromCompanyLocationBin.FromCompany
            Instance Selection
                where (related.InventoryTransactionLine.LineNumber  = RequisitionLine
                and    related.IsRequisitionReturn)

		InventoryCostHistoryFIFORel
			one-to-many relation to InventoryCostHistory
			Field Mapping uses Set3
				related.Company				= FromCompanyLocationBin.FromCompany
				related.InventoryLocation	= FromCompanyLocationBin.FromLocation
				related.Item				= Item

		InventoryCostHistoryLIFORel
			one-to-many relation to InventoryCostHistory
			Field Mapping uses Set5
				related.Company				= FromCompanyLocationBin.FromCompany
				related.InventoryLocation	= FromCompanyLocationBin.FromLocation
				related.Item				= Item

		PatientProcedureRel
			one-to-one relation to PatientProcedure
			Field Mapping uses symbolic key
				related.Company             = FromCompanyLocationBin.FromCompany
				related.PatientProcedure	= LocalPatientProcedure

		PreferenceCardProviderRel
			one-to-one relation to Provider
			Field Mapping uses symbolic key
				related.ItemGroup			= Company.ItemGroup
				related.Provider			= LocalProvider

		RelatedContractRel
			one-to-many relation to RelatedContract
			Field Mapping uses ByID
				related.ContractGroup             = Company.ItemGroup
				related.RelatedContractID         = DerivedAlphaRequisitionNumber
				related.RelatedContractType       = 13

		ItemLocationRel
			one-to-one relation to ItemLocation
			Field Mapping uses symbolic key
				related.Company           = FromCompanyLocationBin.FromCompany
				related.InventoryLocation = FromCompanyLocationBin.FromLocation
				related.Item              = Item

	   	ReplacementItemLocationRel
	   		one-to-one relation to ItemLocation
	   		Field Mapping uses symbolic key
	   			related.Company			  = FromCompanyLocationBin.FromCompany
	   			related.InventoryLocation = FromCompanyLocationBin.FromLocation
	   			related.Item			  = Item.ReplacementItem

		RequestingItemLocationRel
			one-to-one relation to ItemLocation
			Field Mapping uses symbolic key
				related.Company           = Company
				related.InventoryLocation = RequestingLocation
				related.Item              = Item
		
		RequestingOriginalItemLocationRel
			one-to-one relation to ItemLocation
			Field Mapping uses symbolic key
				related.Company           = Company
				related.InventoryLocation = RequestingLocation
				related.Item              = OriginalItem

		RequestingItemLocationForDefaultingRel
			one-to-one relation to ItemLocation
			Field Mapping uses symbolic key
				related.Company           = Requisition.Company
				related.InventoryLocation = Requisition.RequestingLocation
				related.Item              = Item

		PurchasingCompanyRel
			classic name is PO-COMPANY
			one-to-one relation to PurchasingCompany
			required
			Field Mapping uses symbolic key
				related.Company = Requisition.Company

		FromCompanyRel
			one-to-one relation to PurchasingCompany
			Field Mapping uses symbolic key
				related.Company = FromCompanyLocationBin.FromCompany

		PurchaseOrderLineSourcesRel
			classic name is POLINESRC
			one-to-many relation to PurchaseOrderLineSource
			valid when (IsCreatePurchaseOrder)
			Field Mapping uses Set2
				related.PurchaseOrderLineSource.OperatingCompany         = Company
				related.PurchaseOrderLineSource.SourceDocumentOrigin     = "RQ"
				related.PurchaseOrderLineSource.SourceDocumentNumeric    = Requisition
				related.PurchaseOrderLineSource.SourceDocumentLineNumber = RequisitionLine

		ReleasedPurchaseOrderLineSourcesRel
			one-to-many relation to PurchaseOrderLineSource
			valid when (IsCreatePurchaseOrder)
			Field Mapping uses Set2
				related.PurchaseOrderLineSource.OperatingCompany         = Company
				related.PurchaseOrderLineSource.SourceDocumentOrigin     = "RQ"
				related.PurchaseOrderLineSource.SourceDocumentNumeric    = Requisition
				related.PurchaseOrderLineSource.SourceDocumentLineNumber = RequisitionLine
			Instance Selection
				where (related.PurchaseOrderLine.IsReleased)

		UnreleasedPurchaseOrderLineSourcesRel
			one-to-many relation to PurchaseOrderLineSource
			valid when (IsCreatePurchaseOrder)
			Field Mapping uses Set2
				related.PurchaseOrderLineSource.OperatingCompany         = Company
				related.PurchaseOrderLineSource.SourceDocumentOrigin     = "RQ"
				related.PurchaseOrderLineSource.SourceDocumentNumeric    = Requisition
				related.PurchaseOrderLineSource.SourceDocumentLineNumber = RequisitionLine
			Instance Selection
				where (!related.PurchaseOrderLine.IsReleased)

		WarehouseDemandLinesRel
			classic name is WHDEMAND
			one-to-many relation to WarehouseDemandLine
			Field Mapping uses Set9
				related.Company = FromCompanyLocationBin.FromCompany
			Instance Selection
				where (related.WarehouseDemand.DemandSystemCode.Requisitions
				and   related.WarehouseDemand.DemandDocument = Requisition
				and   related.WarehouseDemandLine.LineNumber = RequisitionLine
				and   related.InventoryLocation              = FromCompanyLocationBin.FromLocation)

		PharmacyWarehouseDemandLineRel
			classic name is WHDEMAND-PHAR
			one-to-one relation to WarehouseDemandLine
			Field Mapping uses Set1
				related.Company                               = Company
				related.WarehouseDemand.DemandSystemCode      = "PH"
				related.WarehouseDemand.DemandDocument        = Requisition
				related.WarehouseDemand.DemandCompany		  = Requisition.Company
				related.WarehouseDemandLine.LineNumber        = RequisitionLine
				related.WarehouseDemandLine.ComponentSequence = blank
				related.InventoryLocation                     = FromCompanyLocationBin.FromLocation

		WarehouseDemandRel
			classic name is WHDEMNDHDR
			one-to-one relation to WarehouseDemand
			Field Mapping uses symbolic key
				related.Company                          = FromCompanyLocationBin.FromCompany
				related.WarehouseDemand.DemandSystemCode = "RQ"
				related.WarehouseDemand.DemandDocument   = Requisition
				related.WarehouseDemand.DemandCompany	 = Requisition.Company

		SupplyWarehouseDemandRel
			one-to-one relation to WarehouseDemand
				Field Mapping uses symbolic key
					related.Company								= Requisition.Company
					related.WarehouseDemand.DemandSystemCode	= "RQ"
					related.WarehouseDemand.DemandDocument		= Requisition
					related.WarehouseDemand.DemandCompany		= Requisition.Company

		WarehouseShipmentRel
			classic name is WHSHIPMENT
			one-to-many relation to WarehouseShipment
			Field Mapping uses Set6
				related.Company                        = FromCompanyLocationBin.FromCompany
				related.InventoryLocation              = FromCompanyLocationBin.FromLocation
				related.WarehouseDemand.DemandDocument = Requisition

		GeneralLedgerSystemCodeRel
			one-to-one relation to GeneralLedgerSystemCode
			Field Mapping uses symbolic key
				related.FinanceEnterpriseGroup			= Company.ItemGroup.FinanceEnterpriseGroup
				related.GeneralLedgerSystemCode			= "RQ"

		PayablesCompanyRel
			classic name is AP-COMPANY
			one-to-one relation to PayablesCompany
			Field Mapping uses symbolic key
				related.Company = PurchasingCompanyRel.Company
		
		FromPayablesCompanyRel
			one-to-one relation to PayablesCompany
			Field Mapping uses symbolic key
				related.Company = FromCompanyRel.Company

		DistributionByQuantityRel
			one-to-many relation to RequisitionLineDistribution
			Field Mapping uses symbolic key
				related.Company                                     = Company
				related.Requisition                                 = Requisition
				related.RequisitionLine                             = RequisitionLine
			Instance Selection
				where (related.DistributionByQuantity)

		DistributionByAmountRel
			one-to-many relation to RequisitionLineDistribution
			Field Mapping uses symbolic key
				related.Company                                     = Company
				related.Requisition                                 = Requisition
				related.RequisitionLine                             = RequisitionLine
			Instance Selection
				where (related.DistributionByAmount)

		DistributionsNotAddOnChargeRel
			one-to-many relation to RequisitionLineDistribution
			Field Mapping uses symbolic key
				related.Company                                     = Company
				related.Requisition                                 = Requisition
				related.RequisitionLine                             = RequisitionLine
			Instance Selection
				where (related.AddOnCharge !entered)

		ItemRel
			one-to-one relation to Item
			valid when (IsInventoryOrNonstock)
			required
			Field Mapping uses symbolic key
				related.ItemGroup = Company.ItemGroup
				related.Item      = Item

		AssociatedItemsRel
			classic name is ITEMSUB
			one-to-many relation to AssociatedItem
			Field Mapping uses symbolic key
				related.ItemGroup = FromCompanyLocationBin.FromCompany.ItemGroup
				related.Item      = Item
			Instance Selection
				where (related.AssociatedItem.AssociatedItemSubType.Substitute)

		PurchaseOrderInterfaceRel
			one-to-one relation to PurchaseOrderInterface
			Field Mapping uses Set10
				related.PurchaseOrderInterface.SourceDocumentOrigin      = "RQ"
				related.PurchaseOrderInterface.OperatingCompany          = Company
				related.PurchaseOrderInterface.SourceDocumentNumeric     = Requisition
				related.PurchaseOrderInterface.LineNumber                = RequisitionLine
				related.PurchaseOrderInterface.SourceDocumentAlpha       = blank
				related.PurchaseOrderInterface.RequestingLocation        = RequestingLocation

		ContractRel
			one-to-one relation to Contract
			Field Mapping uses symbolic key
				related.ContractGroup 	= Company.ItemGroup
				related.Contract 		= Contract

		ContractLineRel
			one-to-one relation to ContractLine
			Field Mapping uses symbolic key
				related.ContractGroup 	= Company.ItemGroup
				related.Contract 		= Contract
				related.ContractLine 	= ContractLine

		RelatedItemOnContractLineRel
			one-to-many relation to ContractLine
			Field Mapping uses symbolic key
				related.ContractGroup		= PurchasingCompanyRel.ProcurementGroup
				related.Contract			= Contract
			Instance Selection
				where (related.ItemNumber	= Item)
				
		RelatedVendorItemOnContractLineRel
			one-to-many relation to ContractLine
			Field Mapping uses symbolic key
				related.ContractGroup		= PurchasingCompanyRel.ProcurementGroup
				related.Contract			= Contract
			Instance Selection
				where (related.VendorItem	= VendorItem)
		
		ItemOnContractLineRel
			one-to-many relation to ContractLine
			Field Mapping uses symbolic key
				related.ContractGroup		= FromCompanyRel.ProcurementGroup
				related.Contract			= Contract
			Instance Selection
				where (related.ItemNumber	= Item)
				
		VendorItemOnContractLineRel
			one-to-many relation to ContractLine
			Field Mapping uses symbolic key
				related.ContractGroup		= FromCompanyRel.ProcurementGroup
				related.Contract			= Contract
			Instance Selection
				where (related.VendorItem	= VendorItem)

		ContractLineDistributionsRel
			one-to-many relation to ContractLineDistribution
			Field Mapping uses symbolic key
				related.ContractGroup 	= Company.ItemGroup
				related.Contract 		= Contract
				related.ContractLine 	= ContractLine

		GeneralLedgerCalendarPeriodRel
			one-to-many relation to GeneralLedgerCalendarPeriod
			Field Mapping uses LeafRecords
				related.FinanceEnterpriseGroup		= GeneralLedgerCompanyRel.FinanceEnterpriseGroup
			Instance Selection
				where (related.Date 			not < RequestedDeliveryDate
				and	   related.PeriodType.EndDate)

		EntityLedgerPeriodRel
			one-to-many relation to EntityLedgerPeriod
			Field Mapping uses ByEntityLedger
				related.FinanceEnterpriseGroup		= GeneralLedgerCompanyRel.FinanceEnterpriseGroup
				related.AccountingEntity			= RequisitionLineDistributionRel.DistributionAccount.ToAccountingEntity 
				related.Ledger						= GeneralLedgerCompanyRel.FinanceEnterpriseGroup.CoreLedger
			Instance Selection
				where (related.GeneralLedgerClosePeriod.GeneralLedgerCalendarPeriod	not < DerivedEntityCalendarPeriod)


		InventoryCostHistoryRel
			one-to-many relation to InventoryCostHistory
			Field Mapping uses symbolic key
			Instance Selection
				where (related.Company                              = FromCompanyLocationBin.FromCompany
				and	   related.Item                                 = Item
				and    related.InventoryTransaction                 = ReturnInventoryTransactionLineRel.InventoryTransaction
				and    related.InventoryCostHistory.TransactionSystemCode = "IC"
				and    related.InventoryTransaction.InventoryDocumentType = "RR")

		InventoryCompanyRel
			one-to-one relation to InventoryCompany
			Field Mapping uses symbolic key
				related.Company = Requisition.Company

		FromInventoryCompanyRel
			one-to-one relation to InventoryCompany
			Field Mapping uses symbolic key
				related.Company = FromCompanyLocationBin.FromCompany

		RequisitionLineBinDetailRel is a RequisitionLineDetail set
			Instance Selection
				where (related.RequisitionLineDetail.Bin entered)

		RequisitionLineDetailRel is a RequisitionLineDetail set

		InventoryTransactionLineDetailRel
			one-to-many relation to InventoryTransactionLineDetail
			Field Mapping uses Set2
				related.Company									= FromCompanyLocationBin.FromCompany
				related.InventoryLocation						= FromCompanyLocationBin.FromLocation
				related.TransactionSystemCode					= "RQ"
				related.InventoryTransaction					= LocalInventoryTransaction
			Instance Selection
				where (related.Item								= RequisitionLine.Item
				and related.InventoryTransactionLine.LineNumber = RequisitionLine)

		InventoryTransactionLineRel
			one-to-one relation to InventoryTransactionLine
			Field Mapping uses symbolic key
				related.Company                                    = FromCompanyLocationBin.FromCompany
				related.InventoryLocation                          = FromCompanyLocationBin.FromLocation
				related.InventoryTransaction                       = LocalInventoryTransaction
				related.TransactionSystemCode                      = "RQ"
				related.InventoryTransactionLine                   = RequisitionLine

		GeneralLedgerCategoryRel
			one-to-one relation to GeneralLedgerCategory
			Field Mapping uses symbolic key
				related.Company               = ItemLocationRel.Company
				related.InventoryLocation     = ItemLocationRel.InventoryLocation
				related.GeneralLedgerCategory = ItemLocationRel.GeneralLedgerCategory

		WarehouseShipmentLinesRel
			classic name is WHSHIPLINE
			one-to-many relation to WarehouseShipmentLine
			Field Mapping uses Set2
				related.Company                             = FromCompanyLocationBin.FromCompany
				related.RequestingDocument.DemandSystemCode = "RQ"
				related.RequestingDocument.DocumentNumber   = Requisition
				related.WarehouseShipmentLine               = RequisitionLine
			Instance Selection
				where (related.RequestingDocument.RequestingCompany = Company) 

		AvailableWarehouseShipmentReqLineRel
			one-to-many relation to WarehouseShipmentLine
			Field Mapping uses Set2
				related.Company                             = FromCompanyLocationBin.FromCompany
				related.RequestingDocument.DemandSystemCode = "RQ"
				related.RequestingDocument.DocumentNumber   = Requisition
				related.WarehouseShipmentLine               = RequisitionLine
				related.WarehouseShipment					= LocalWarehouseShipment
			Instance Selection
				where (related.RequestingDocument.RequestingCompany = Company) 

		FilterRequisitionLineDistributionRel is a RequisitionLineDistribution set
			Instance Selection
				where (related.DistributionAmount > 0
				and    related.DistributionPercent = 0)


		KitItemFromLocationRel
			one-to-one relation to KitItem
			Field Mapping uses symbolic key
				related.ItemGroup                    = Company.ItemGroup
				related.KitItem.Company              = FromCompanyLocationBin.FromCompany
				related.KitItem.InventoryLocation = FromCompanyLocationBin.FromLocation
				related.KitItem.Item                 = Item

		PayablesDistributionCodeRel
			one-to-one relation to PayablesDistributionCode
			Field Mapping uses symbolic key
				related.VendorGroup              = Company.ItemGroup
				related.PayablesDistributionCode = DistributionCode

		PayablesDistributionCodeDetailsRel
			one-to-many relation to PayablesDistributionCodeDetail
			Field Mapping uses symbolic key
				related.VendorGroup              = Company.ItemGroup
				related.PayablesDistributionCode = LocalDistributionCode

		RequisitionLineDistributionFromDistributionCodeRel is a RequisitionLineDistribution set
			Instance Selection
				where (related.DistributionAccount            = LocalDistributionCodeAccount
				and    related.AssetInformation.Asset         = LocalDistributionCodeAsset
				and    related.AssetInformation.AssetTemplate = LocalDistributionCodeAssetTemplate
				and    related.DistributionPercent            = LocalDistributionCodePercent
				and    related.DistributionAmount             = LocalDistributionCodeAmount
				and not related.CreatedByFES)

		WarehouseLocationRuleDetailsRel
			one-to-many relation to WarehouseLocationRuleDetail
			Field Mapping uses symbolic key
				related.Company               = Company
				related.WarehouseLocationRule = LocationRule

		WarehouseLocationRuleItemLocationRel
			one-to-one relation to ItemLocation
			Field Mapping uses symbolic key
				related.Company               = LocalLocationRuleFromCompanyLocation.FromCompany
				related.InventoryLocation     = LocalLocationRuleFromCompanyLocation.FromLocation
				related.Item                  = Item

		WarehouseLocationRuleItemLocationForAnItemRel
			one-to-one relation to ItemLocation
			Field Mapping uses symbolic key
				related.Company               = LocalLocationRuleFromCompanyLocation.FromCompany
				related.InventoryLocation     = LocalLocationRuleFromCompanyLocation.FromLocation
				related.Item                  = LocalItem

		StockCheckItemRel
			one-to-many relation to ItemLocation
			Field Mapping uses symbolic key
				related.Company               = LocalLocationRuleFromCompanyLocation.FromCompany
				related.InventoryLocation     = LocalLocationRuleFromCompanyLocation.FromLocation
				related.Item                  = LocalItem
			Instance Selection
				where (related.AvailableQuantity > 0
				and    related.InventoryTracked
				and    related.Active)

		SubstituteItemAtLocationRel
			one-to-many relation to ItemLocation
			Field Mapping uses symbolic key
				related.Company               = LocalLocationRuleFromCompanyLocation.FromCompany
				related.InventoryLocation     = LocalLocationRuleFromCompanyLocation.FromLocation
				related.Item                  = LocalCheckItem
			Instance Selection
				where (related.InventoryTracked
				and    related.Active)

		OtherSubstituteItemLocationWithStocksRel
			one-to-many relation to ItemLocation
			Field Mapping uses symbolic key
				related.Company               = LocalOtherWarehouseFromCompanyLocation.FromCompany
				related.InventoryLocation     = LocalOtherWarehouseFromCompanyLocation.FromLocation
				related.Item                  = LocalSubstituteItem
			Instance Selection
				where (related.AvailableQuantity > 0
				and    related.InventoryTracked
				and    related.Active)

		OtherSubstituteItemLocationInventoriedRel
			one-to-many relation to ItemLocation
			Field Mapping uses symbolic key
				related.Company               = LocalOtherWarehouseFromCompanyLocation.FromCompany
				related.InventoryLocation     = LocalOtherWarehouseFromCompanyLocation.FromLocation
				related.Item                  = LocalSubstituteItem
			Instance Selection
				where (related.InventoryTracked
				and    related.Active)

		CheckOtherSubstituteItemLocationRel
			one-to-one relation to ItemLocation
			Field Mapping uses symbolic key
				related.Company               = LocalLocationRuleFromCompanyLocation.FromCompany
				related.InventoryLocation     = LocalLocationRuleFromCompanyLocation.FromLocation
				related.Item                  = LocalCheckItem

		OtherWarehouseLocationRuleDetailsRel
			one-to-many relation to WarehouseLocationRuleDetail
			Field Mapping uses symbolic key
				related.Company               = Company
				related.WarehouseLocationRule = LocationRule
			Instance Selection
				where (related.LocationCompany	 not = LocalSubstituteFromCompanyLocation.FromCompany
				or     related.InventoryLocation not = LocalSubstituteFromCompanyLocation.FromLocation)

		PurchaseOrderInterfacesRel
			one-to-many relation to PurchaseOrderInterface
			valid when (CreatePurchaseOrder)
			Field Mapping uses symbolic key
				related.Company                                      = FromCompanyLocationBin.FromCompany
				related.PurchaseOrderInterface.SourceDocumentOrigin  = "RQ"
				related.PurchaseOrderInterface.SourceDocumentNumeric = Requisition
				related.PurchaseOrderInterface.SourceDocumentAlpha   = blank
				related.PurchaseOrderInterface.OperatingCompany      = Company
				related.PurchaseOrderInterface.RequestingLocation    = RequestingLocation
				related.PurchaseOrderInterface.LineNumber            = RequisitionLine

		WarehouseDemandLines2Rel    
			one-to-many relation to WarehouseDemandLine
			Field Mapping uses Set1
				related.Company                               = FromCompanyLocationBin.FromCompany
				related.WarehouseDemand.DemandSystemCode      = "RQ"
				related.WarehouseDemand.DemandDocument        = Requisition
				related.WarehouseDemand.DemandCompany		  = Requisition.Company
				related.WarehouseDemandLine.LineNumber        = RequisitionLine
				related.WarehouseDemandLine.ComponentSequence = blank
				related.InventoryLocation                     = FromCompanyLocationBin.FromLocation

		WarehouseSupplyLinesRel
			one-to-many relation to WarehouseDemandLine
			Field Mapping uses Set1
				related.Company                               = Company
				related.WarehouseDemand.DemandSystemCode      = "RQ"
				related.WarehouseDemand.DemandDocument        = Requisition
				related.WarehouseDemand.DemandCompany		  = Requisition.Company
				related.WarehouseDemandLine.LineNumber        = RequisitionLine
				related.WarehouseDemandLine.ComponentSequence = blank
				related.InventoryLocation                     = RequestingLocation

		WarehouseSupplyTypeDemandLinesRel
			one-to-many relation to WarehouseDemandLine
			Field Mapping uses Set7
				related.Company                               = Company
				related.InventoryLocation                     = RequestingLocation
				related.WarehouseDemand.DemandSystemCode      = "RQ"
				related.WarehouseDemand.DemandDocument        = Requisition
				related.WarehouseDemand.DemandCompany		  = Requisition.Company
				related.WarehouseDemandLine.LineNumber        = RequisitionLine
				related.WarehouseDemandLine.ComponentSequence = blank

		WarehouseDemandLinesDrillRel
			one-to-many relation to WarehouseDemandLine
			Field Mapping uses Set1
				related.Company                               = FromCompanyLocationBin.FromCompany
				related.WarehouseDemand.DemandSystemCode      = "RQ"
				related.WarehouseDemand.DemandDocument        = Requisition
				related.WarehouseDemand.DemandCompany		  = Requisition.Company
				related.WarehouseDemandLine.LineNumber        = RequisitionLine

		ProcurementGroupRel
			one-to-one relation to ProcurementGroup
			Field Mapping uses symbolic key
				related.ProcurementGroup   = Company.ItemGroup

		PurchaseOrderLineRel
			one-to-one relation to PurchaseOrderLine
			valid when (IsCreatePurchaseOrder)
			Field Mapping uses symbolic key
				related.Company           = Company
				related.PurchaseOrder     = LocalPurchaseOrder
				related.PurchaseOrderLine = LocalPurchaseOrderLine

		PurchaseOrderRel
			one-to-one relation to PurchaseOrder
			valid when (IsCreatePurchaseOrder)
			Field Mapping uses symbolic key
				related.Company           = Company
				related.PurchaseOrder     = LocalPurchaseOrder

		VendorLocationRel
			one-to-one relation to VendorLocation
			Field Mapping uses symbolic key
				related.VendorGroup    = Company.ItemGroup
				related.Vendor         = Vendor
				related.VendorLocation = PurchaseFromLocation

		VendorClassRel
			one-to-one relation to VendorClass
			Field Mapping uses symbolic key
				related.VendorGroup = Company.ItemGroup
				related.VendorClass = Vendor.VendorClass

		DefaultVendorItemRel    
			one-to-many relation to VendorItem
			Field Mapping uses symbolic key
				related.ProcurementGroup = Company.ItemGroup
				related.Item             = Item
				related.Vendor           = Vendor
			Instance Selection
				where (related.UseAsDefault)

		VendorItemsRel
			one-to-many relation to VendorItem
			Field Mapping uses symbolic key
				related.ProcurementGroup = Company.ItemGroup
				related.Item             = Item
				related.Vendor           = Vendor

		PurchasingVendorRel
			one-to-one relation to PurchasingVendor
			Field Mapping uses symbolic key
				related.VendorGroup		= Company.ItemGroup
				related.Vendor			= Vendor

		ItemUOMRel
			one-to-one relation to ItemUOM
			Field Mapping uses symbolic key
				related.ItemGroup     = Company.ItemGroup
				related.Item          = Item
				related.UnitOfMeasure = EnteredUOM

		StandardCommentCodeRel
			one-to-many relation to StandardCommentCode
			Field Mapping uses Set1
				related.ProcurementGroup    = Company.ItemGroup
				related.StandardCommentCode = StandardCommentCode
			Instance Selection
				where (related.IsoLocale not entered)

		RequesterPurchasingClassRel
			one-to-many relation to RequesterPurchasingClass
			Field Mapping uses symbolic key
				related.HROrganization									= Requisition.Requester.HROrganization
				related.Requester										= Requisition.Requester
				related.ItemGroup										= Company.ItemGroup
			Instance Selection
				where (related.RequesterPurchasingClass.MajorPurchasingClass	= MajorPurchasingClass
				and   (related.RequesterPurchasingClass.MinorPurchasingClass	= MinorPurchasingClass
				or     related.RequesterPurchasingClass.MinorPurchasingClass	= blank))

		RequesterPurchasingClassMajorOnlyRel
			one-to-many relation to RequesterPurchasingClass
			Field Mapping uses symbolic key
				related.HROrganization									= Requisition.Requester.HROrganization
				related.Requester										= Requisition.Requester
				related.ItemGroup										= Company.ItemGroup
			Instance Selection
				where (related.RequesterPurchasingClass.MajorPurchasingClass	= MajorPurchasingClass)

		RequesterPurchasingClassBlankMinorRel
			one-to-one relation to RequesterPurchasingClass
			Field Mapping uses symbolic key
				related.HROrganization									= Requisition.Requester.HROrganization
				related.Requester										= Requisition.Requester
				related.ItemGroup										= Company.ItemGroup
				related.RequesterPurchasingClass.MajorPurchasingClass	= MajorPurchasingClass
				related.RequesterPurchasingClass.MinorPurchasingClass	= blank

		RequisitionLineCommentRel
			one-to-many relation to RequisitionLineComment
			Field Mapping uses part of key
				related.Company     	= Company
				related.Requisition 	= Requisition
				related.RequisitionLine = RequisitionLine

		RSSCommentRel
			one-to-many relation to RequisitionLineComment
			Field Mapping uses part of key
				related.Company     	= Company
				related.Requisition 	= Requisition
				related.RequisitionLine = RequisitionLine
			Instance Selection
				where 	(related.CommentType = Requisition.DefaultCommentType
				and 	 related.CommentText entered)

		RSSAttachmentRel
			one-to-many relation to RequisitionLineComment
		 	Field Mapping uses part of key
				related.Company     	= Company
				related.Requisition 	= Requisition
				related.RequisitionLine = RequisitionLine
			Instance Selection
				where 	(related.CommentType = Requisition.DefaultCommentType
				and	   related.Attachment.MimeType entered)

		RQGeneralLedgerSystemCodeRel
			one-to-one relation to GeneralLedgerSystemCode
			Field Mapping uses symbolic key
				related.FinanceEnterpriseGroup		= Company.ItemGroup.FinanceEnterpriseGroup
				related.GeneralLedgerSystemCode		= "RQ"

		BudgetEditDetailRel
			one-to-many relation to BudgetEditDetail
			Field Mapping uses ByBudgetGroup
				related.FinanceEnterpriseGroup				= Company.ItemGroup.FinanceEnterpriseGroup
				related.BudgetEditDetail.BudgetEditGroup	= LocalBudgetEditGroup


	   	PurchaseFromLocationRel
	   		one-to-one relation to PurchaseFromLocation
			Field Mapping uses symbolic key
				related.VendorGroup				= Vendor.VendorGroup
				related.Vendor					= Vendor
				related.PurchaseFromLocation	= PurchaseFromLocation

		RequisitionLineDistributionsRel is a RequisitionLineDistribution set
			Instance Selection
				where (related.AddOnCharge not entered)

		DistributionsWithBudgetErrorRel is a RequisitionLineDistribution set
			Instance Selection
				where (related.BudgetErrorExists)

		PfiWorkunitRel
			one-to-many relation to PfiWorkunit
			Field Mapping uses ByAppsKeyAppsValueWorkunit
				related.AppsKey		= "REQUISITIONLINE"		
				related.AppsValue	= DerivedAppsValue

		SourcingEventLineSourceRel
			one-to-many relation to SourcingEventLineSource
			Field Mapping uses ByRequisitionLine
				related.Company                 = Company
				related.SourceDocumentNumeric   = Requisition
				related.LineNumber              = RequisitionLine

		OtherPunchoutLinesWithDifferentVendorRel
			one-to-many relation to RequisitionLine
			Field Mapping uses symbolic key
				related.Company				= Company
				related.Requisition			= Requisition
			Instance Selection
				where (related.PunchoutId entered
				and	   related.Vendor entered
				and	   related.Vendor != Vendor)

		UncanceledRequisitionLinesRel
			one-to-many relation to RequisitionLine
			Field Mapping uses symbolic key
				related.Company				= Company
				related.Requisition			= Requisition
			Instance Selection
				where (!related.FullyCanceled
				and    related.UniqueID != UniqueID)

		PreviousLineWithSameContract
			one-to-many relation to RequisitionLine
			Field Mapping uses symbolic key
				related.Company                 = Company
				related.Requisition			    = Requisition
			Instance Selection
				where (related.RequisitionLine  < RequisitionLine
				and    related.Contract         = Contract)

		RequisitionLineSameContract
			one-to-many relation to RequisitionLine
			Field Mapping uses symbolic key
				related.Company                 = Company
				related.Requisition			    = Requisition
			Instance Selection
				where (related.Contract         = Contract)

		RequisitionLineSameContractSameDeliveryDate
			one-to-many relation to RequisitionLine
			Field Mapping uses symbolic key
				related.Company                 = Company
				related.Requisition			    = Requisition
			Instance Selection
				where (related.Contract         		= Contract
				and    related.RequestedDeliveryDate 	= RequestedDeliveryDate)

		LinesNotRejectedRel
			one-to-many relation to RequisitionLine
			Field Mapping uses symbolic key
				related.Company                 = Company
				related.Requisition			    = Requisition
			Instance Selection
				where (not related.IsRejectedStatus
				and    related.UniqueID			!= UniqueID)

		OtherRequisitionLinesForItemLocationRel 
			one-to-many relation to RequisitionLine
			Field Mapping uses ByDeliverFromLocation
				related.Company								= Company
				related.Requisition							= Requisition
				related.FromCompanyLocationBin.FromCompany	= FromCompanyLocationBin.FromCompany
				related.FromCompanyLocationBin.FromLocation	= FromCompanyLocationBin.FromLocation
				related.Item								= Item
			Instance Selection
				where (related.UniqueID != UniqueID)

		OtherInventoriedRequisitionLinesForItemLocationRel
			one-to-many relation to RequisitionLine
			Field Mapping uses ByDeliverFromLocation
				related.Company								= Company
				related.Requisition							= Requisition
				related.FromCompanyLocationBin.FromCompany	= FromCompanyLocationBin.FromCompany
				related.FromCompanyLocationBin.FromLocation	= FromCompanyLocationBin.FromLocation
				related.Item								= Item

			Instance Selection
				where (related.UniqueID != UniqueID
				and	   related.IsInventory)

		LineAddOnChargesByRateRel is a RequisitionLineAddOnCharge set
			Instance Selection
				where (related.AddOnChargeEntryMethod.RatePercentage)

		HeaderAddOnChargesRel
			one-to-many relation to RequisitionLineAddOnCharge
			Field Mapping uses symbolic key
				related.Company					= Company
				related.Requisition				= Requisition
				related.RequisitionLine			= blank

		HeaderAddOnChargesByRateRel
			one-to-many relation to RequisitionLineAddOnCharge
			Field Mapping uses symbolic key
				related.Company					= Company
				related.Requisition				= Requisition
				related.RequisitionLine			= blank
			Instance Selection
				where (related.AddOnChargeEntryMethod.RatePercentage)

		LandedLineAddOnCharges is a RequisitionLineAddOnCharge set
			Instance Selection
				where (related.IsLineAddOnCharge
				and    related.LandedAddOnCharge)

		LineAddOnChargesRel is a RequisitionLineAddOnCharge set
			Instance Selection
				where (related.IsLineAddOnCharge)

		ItemDefaultVendorItemNoVendorRel
			one-to-many relation to VendorItem
			Field Mapping uses Set2
				related.ProcurementGroup      = Company.ItemGroup
				related.VendorItem            = VendorItem

		ItemDefaultVendorItemWithVendorRel
			one-to-many relation to VendorItem
			Field Mapping uses Set3
				related.ProcurementGroup      = Company.ItemGroup
				related.Vendor 				  = Vendor
				related.VendorItem            = VendorItem

		ItemDefaultVendorItemManufacturerNumberRel
			one-to-many relation to VendorItem
			Field Mapping uses ByManufacturerNumber
				related.ProcurementGroup      = Company.ItemGroup
				related.ManufacturerNumber    = ManufacturerNumber

		ItemDefaultItemManufacturerNumberRel
			one-to-many relation to Item
			Field Mapping uses Set11
				related.ItemGroup             		= Company.ItemGroup
				related.ManufacturerNumberStripped	= DerivedStrippedManufacturerNumber

		ItemDefaultStrippedVendorItemNoVendorRel
			one-to-many relation to VendorItem
			Field Mapping uses Set2
				related.ProcurementGroup      = Company.ItemGroup
				related.VendorItem            = StrippedVendorItem

		AllRequesterItemCountRel
			one-to-many relation to RequesterItemCount
			Field Mapping uses Set1

		RequesterItemCountRel
			one-to-one relation to RequesterItemCount
			Field Mapping uses Set1
				related.BusinessGroup			= Company.BusinessGroup
				related.Requester				= Requisition.Requester
				related.Item					= Item

		EntityTaxCodeRel
			one-to-one relation to EntityTaxCode
			Field Mapping uses symbolic key
				related.FinanceEnterpriseGroup		= GeneralLedgerCompanyForCompanyRel.FinanceEnterpriseGroup
				related.TaxEntity					= Company.AccountingEntity
				related.TaxCode						= PurchaseTaxCode

		AllEntityTaxCodesRel
			one-to-many relation to EntityTaxCode
			Field Mapping uses symbolic key
				related.FinanceEnterpriseGroup		= GeneralLedgerCompanyForCompanyRel.FinanceEnterpriseGroup
				related.TaxEntity					= Company.AccountingEntity


		PurgeWarehouseShipmentRel
			one-to-many relation to WarehouseShipment
			Field Mapping uses DemandSet
				related.Company								= FromCompanyLocationBin.FromCompany
				related.InventoryLocation					= FromCompanyLocationBin.FromLocation
				related.WarehouseDemand.DemandSystemCode	= "RQ"
				related.WarehouseDemand.DemandDocument		= Requisition
				related.WarehouseDemand.DemandCompany		= Requisition.Company
			Instance Selection
				include deleted records

		PurgeWarehouseDemandRel
			one-to-many relation to WarehouseDemand
			Field Mapping uses symbolic key
				related.Company								= Requisition.Company
				related.WarehouseDemand.DemandSystemCode	= "RQ"
				related.WarehouseDemand.DemandDocument		= Requisition
				related.WarehouseDemand.DemandCompany		= Requisition.Company
			Instance Selection
				include deleted records

		PurgeRequisitionLineDistributionRel is a RequisitionLineDistribution set
			Instance Selection
				include deleted records

		PurgeRequisitionLineCommentRel is a RequisitionLineComment set
			Instance Selection
				include deleted records

		PurgeRequisitionLineErrorRel is a RequisitionLineError set
			Instance Selection
				include deleted records


		InventoryUDIDetailRel
			one-to-one relation to InventoryUDIDetail
			Field Mapping uses symbolic key
				related.Company										= FromCompanyLocationBin.FromCompany
				related.InventoryLocation							= FromCompanyLocationBin.FromLocation
				related.InventoryUDIDetail.InventoryTransactionType	= InventoryTransactionType
				related.InventoryUDIDetail.TransactionSystemCode 	= "RQ"
				related.InventoryUDIDetail.DocumentNumberNumeric	= Requisition
				related.InventoryUDIDetail.WarehouseShipment		= blank
				related.InventoryUDIDetail.LineNumber				= RequisitionLine
				related.InventoryUDIDetail.TransactionSequence		= 1

		TaxEntityRel
			one-to-one relation to TaxEntity
			Field Mapping uses symbolic key
				related.FinanceEnterpriseGroup	= GeneralLedgerCompanyForCompanyRel.FinanceEnterpriseGroup
				related.TaxEntity 				= Company.AccountingEntity

		RequisitionLineDistributionRel
			one-to-many relation to RequisitionLineDistribution
			Field Mapping uses symbolic key
				related.Company                 = Company
				related.Requisition             = Requisition
				related.RequisitionLine         = RequisitionLine

		FSMBODConfigurationParameterRel		
        	one-to-one relation to FSMBODConfigurationParameter
			Field Mapping uses symbolic key
            	related.FSMBODConfigurationParameter 		= LocalConfigurationParameter	


		FSMBODConfigurationRel
			one-to-one relation to FSMBODConfiguration
			Field Mapping uses symbolic key
				related.FSMBODConfiguration.Verb 		= 2
				related.FSMBODConfiguration.Noun 		= "AdvanceShipNotice"
				related.FSMBODConfiguration.Direction 	= 1


		FSMBODCrossReferenceDetailRel
			one-to-many relation to FSMBODCrossReferenceDetail
			Field Mapping uses symbolic key
				related.FSMBODCrossReference.SourceField		 = "CSFGLC"
				related.FSMBODCrossReference.DestinationField	 = "DESTAE"
			Instance Selection
				where (related.SourceValue = DerivedCrossGLC)

		FSMBODCrossReferenceDetailASRel
			one-to-many relation to FSMBODCrossReferenceDetail
			Field Mapping uses symbolic key
				related.FSMBODCrossReference.SourceField		 = "CSFGLC"
				related.FSMBODCrossReference.DestinationField	 = "DESTAE"
			Instance Selection
				where (related.SourceValue = DerivedBODCrossGLC)

		GeneralLedgerCompanyRel
			one-to-one relation to GeneralLedgerCompany
			Field Mapping uses symbolic key
				related.Company			= Requisition.FromCompanyLocation.FromCompany

		GeneralLedgerCompanyForCompanyRel
			one-to-one relation to GeneralLedgerCompany
			Field Mapping uses symbolic key
				related.Company			= Company

		SupplierRel
			one-to-one relation to Supplier
			Field Mapping uses symbolic key
 				related.SupplierGroup 	= actor.agent(SupplierSourceId).SupplierGroup
 				related.Supplier   		= actor.agent(SupplierSourceId).Supplier

		SupplierGroupRel
			one-to-one relation to SupplierGroup
			Field Mapping uses symbolic key
 				related.SupplierGroup 	= actor.agent(SupplierSourceId).SupplierGroup

		SupplierSourceIdRel
			one-to-one relation to SupplierSourceId
			Field Mapping uses symbolic key
 				related.SupplierGroup 		= actor.agent(SupplierSourceId).SupplierGroup
 				related.Supplier   			= actor.agent(SupplierSourceId).Supplier
				related.SupplierSourceId	= actor.agent(SupplierSourceId).SupplierSourceId

		RequesterRel
			one-to-one relation to Requester
			Field Mapping uses symbolic key
				related.HROrganization = actor.agent(Employee).HROrganization
				related.Requester = actor.agent(Employee).Employee.Requester.Requester
		
		FSMInboundBODTrackerRel
            one-to-one relation to FSMInboundBODTracker
            Field Mapping uses symbolic key
                related.FSMInboundBODTracker	= LocalFSMInboundBODTracker




		DistributionsCreatedByFESRel
			one-to-many relation to RequisitionLineDistribution
			Field Mapping uses symbolic key
				related.Company                      = Company
				related.Requisition                  = Requisition
				related.RequisitionLine              = RequisitionLine
			Instance Selection
				where (related.CreatedByFES)

		OneSourceEAMInventoryLocationRel
			one-to-one relation to InventoryLocation
			Field Mapping uses symbolic key
				related.Company 					= Company
				related.InventoryLocation			= LocalInventoryLocation

		TaxAttributesRel
			one-to-one relation to TaxAttribute
			Field Mapping uses symbolic key
	 			related.FinanceEnterpriseGroup 	= GeneralLedgerCompanyForCompanyRel.FinanceEnterpriseGroup
	 			related.TaxAttribute	        = TaxEntityRel.TaxAttributeCode

		TaxLineItemsRel
			one-to-many relation to TaxLineItem
			Field Mapping uses ByUniqueIdOfRelatedObject
				related.FinanceEnterpriseGroup				= GeneralLedgerCompanyForCompanyRel.FinanceEnterpriseGroup
				related.TaxLineItem.UniqueIdOfRelatedObject = LocalUniqueID
			Instance Selection
				where (related.InvoiceNumber				= Requisition)

		ContractRequestingLocationPurchaseFromRel
			one-to-many relation to ContractPurchaseFrom
			Field Mapping uses symbolic key
				related.ContractGroup												= Contract.ContractGroup
				related.Contract													= Contract
				related.ContractPurchaseFrom.ParticipantLocation.Company            = FromCompanyLocationBin.FromCompany			
				related.ContractPurchaseFrom.ParticipantLocation.Location     		= blank
				related.ContractPurchaseFrom.ParticipantLocation.RequestingLocation = RequestingLocation
				related.ContractPurchaseFrom.ParticipantLocation.PricingGroup 		= blank
			Instance Selection
				where (related.PayablesVendorLocationActive)
				
		ContractLocationPurchaseFromRel
			one-to-many relation to ContractPurchaseFrom
			Field Mapping uses symbolic key
				related.ContractGroup												= Contract.ContractGroup
				related.Contract													= Contract
				related.ContractPurchaseFrom.ParticipantLocation.Company            = FromCompanyLocationBin.FromCompany			
				related.ContractPurchaseFrom.ParticipantLocation.Location     		= FromCompanyLocationBin.FromLocation
				related.ContractPurchaseFrom.ParticipantLocation.RequestingLocation = blank
				related.ContractPurchaseFrom.ParticipantLocation.PricingGroup 		= blank
			Instance Selection
				where (related.PayablesVendorLocationActive)
				
		ContractCompanyPurchaseFromRel
			one-to-many relation to ContractPurchaseFrom
			Field Mapping uses symbolic key
				related.ContractGroup												= Contract.ContractGroup
				related.Contract													= Contract
				related.ContractPurchaseFrom.ParticipantLocation.Company            = FromCompanyLocationBin.FromCompany			
				related.ContractPurchaseFrom.ParticipantLocation.Location     		= blank
				related.ContractPurchaseFrom.ParticipantLocation.RequestingLocation = blank
				related.ContractPurchaseFrom.ParticipantLocation.PricingGroup 		= blank
			Instance Selection
				where (related.PayablesVendorLocationActive)
		RSSLPLSpecialItemRel
			one-to-one relation to Item
			Field Mapping uses symbolic key
				related.ItemGroup	= LocalRSSLPLSpecialItemGroup
				related.Item		= LocalRSSLPLSpecialItem

		RSSLPLSpecialItemDescriptionRel
			one-to-many relation to Item
			Field Mapping uses ByDescription
				related.ItemGroup			= LocalRSSLPLSpecialItemGroup
				related.Description			= LocalRSSLPLSpecialItemDescription

		RSSLPLByShadowItemItemRel
			one-to-one relation to KeywordShadow
			Field Mapping uses ByShadowItem
				related.ItemGroup = LocalRSSLPLSpecialItemGroup
				related.Item = LocalRSSLPLSpecialItem

		RSSLPLByShadowItemItemDescriptionRel
			one-to-many relation to KeywordShadow
			Field Mapping uses ByShadowItem
				related.ItemGroup = LocalRSSLPLSpecialItemGroup
			Instance Selection
				where (related.Description = LocalRSSLPLSpecialItemDescription)

		RSSLPLByContractLineItemItemRel
			one-to-many relation to KeywordShadow
			Field Mapping uses ByContractLine
				related.ItemGroup = LocalRSSLPLSpecialItemGroup
			Instance Selection
				where (related.Item = LocalRSSLPLSpecialItem)

		RSSLPLByContractLineItemDescriptionRel
			one-to-many relation to KeywordShadow
			Field Mapping uses ByContractLine
				related.ItemGroup = LocalRSSLPLSpecialItemGroup
			Instance Selection
				where (related.Description	 = LocalRSSLPLSpecialItemDescription)

		KitchenOrdersByOriginatingTransactionRel
			one-to-many relation to KitchenOrder
			Field Mapping uses ByOriginatingTransaction
				related.OriginatingTransaction							= reference to this instance
				related.Company											= FromCompanyLocationBin.FromCompany
				related.InventoryLocation								= FromCompanyLocationBin.FromLocation
				
		RequestingLocationItemUOMRel
			one-to-many relation to LocationItemUOM
			Field Mapping uses symbolic key
				related.Company  							= Company
				related.InventoryLocation 					= RequestingLocation
				related.Item								= Item
				related.UnitOfMeasure						= LocalUnitOfMeasure

		LocationItemUOMRel
			one-to-many relation to LocationItemUOM
			Field Mapping uses symbolic key
				related.Company  							= FromCompanyLocationBin.FromCompany
				related.InventoryLocation 					= FromCompanyLocationBin.FromLocation
				related.Item								= Item
				related.UnitOfMeasure						= EnteredUOM

		VendorItemLocationItemUOMRel
			one-to-many relation to LocationItemUOM
			Field Mapping uses symbolic key
				related.Company  							= FromCompanyLocationBin.FromCompany
				related.InventoryLocation 					= FromCompanyLocationBin.FromLocation
				related.Item								= Item
				related.UnitOfMeasure						= VendorItem.VendorBuyUOM.UnitOfMeasure

		LocationItemUOMForLocalStockUOMRel
			one-to-many relation to LocationItemUOM
			Field Mapping uses symbolic key
				related.Company  							= FromCompanyLocationBin.FromCompany
				related.InventoryLocation 					= FromCompanyLocationBin.FromLocation
				related.Item								= Item
				related.UnitOfMeasure						= LocalEnteredUOM

		LocationItemUOMDefaultTransactionRel
			one-to-many relation to LocationItemUOM
			Field Mapping uses symbolic key
				related.Company  							= FromCompanyLocationBin.FromCompany
				related.InventoryLocation 					= FromCompanyLocationBin.FromLocation
				related.Item								= Item
			Instance Selection
				where (related.DefaultForInventoryTransactions)

		LocationItemUOMDefaultBuyingRel
			one-to-many relation to LocationItemUOM
			Field Mapping uses symbolic key
				related.Company  							= FromCompanyLocationBin.FromCompany
				related.InventoryLocation 					= FromCompanyLocationBin.FromLocation
				related.Item								= Item
			Instance Selection
				where (related.DefaultForBuying)

		DefaultSourceUOMLocationItemUOMRel
			one-to-many relation to LocationItemUOM
			Field Mapping uses symbolic key
				related.Company  							= FromCompanyLocationBin.FromCompany
				related.InventoryLocation 					= FromCompanyLocationBin.FromLocation
				related.Item								= Item
				related.UnitOfMeasure						= ItemLocationRel.DefaultSourceUOM.UnitOfMeasure

		VendorBuyLocationItemUOMRel
			one-to-many relation to LocationItemUOM
			Field Mapping uses symbolic key
				related.Company  							= FromCompanyLocationBin.FromCompany
				related.InventoryLocation 					= FromCompanyLocationBin.FromLocation
				related.Item								= Item
				related.UnitOfMeasure						= VendorItem.VendorBuyUOM










		CurrencyRelationshipRel
			one-to-one relation to CurrencyRelationship
			Field Mapping uses symbolic key
				related.FinanceEnterpriseGroup				 = GeneralLedgerCompanyForCompanyRel.FinanceEnterpriseGroup
				related.CurrencyRelationship.FromCurrency	 = LocalFromCurrency
				related.CurrencyRelationship.ToCurrency		 = LocalToCurrency

		AllVendorBackorderDetailsRel
			one-to-many relation to VendorBackorderDetails
            Field Mapping uses ByVendorItemAvailabilityDate
				related.ProcurementGroup 			= Company.ItemGroup
				related.Vendor 						= Vendor
				related.VendorItem 					= VendorItem
				related.Item 						= Item
			Instance Selection
				where (related.IsOpen
				and    related.HasValidDate)

		ItemAndVendorBackorderDetailsRel
			one-to-many relation to VendorBackorderDetails
            Field Mapping uses ByVendorAvailabilityDate
				related.ProcurementGroup 			= Company.ItemGroup
				related.Vendor 						= Vendor
				related.Item 						= Item
			Instance Selection
				where (related.IsOpen
				and    related.HasValidDate)

		ItemOnlyVendorBackorderDetailsRel
			one-to-many relation to VendorBackorderDetails
            Field Mapping uses ByItemAvailabilityDate
				related.ProcurementGroup 			= Company.ItemGroup
				related.Item 						= Item
			Instance Selection
				where (related.IsOpen
				and    related.HasValidDate)

		RSSLPLConfigurationParameterRel
            one-to-many relation to ConfigurationParameter
            Field Mapping uses symbolic key
                related.ConfigurationParameter.ConfigurationID  = "config"
                related.ConfigurationParameter.Name             = "RSS_LPLAllocationPriorityLevel"
			Instance Selection
				where (related.ConfigurationParameter.Value = "true")
				
		RSSLPLAllocationPriorityLevelRel
			one-to-many relation to AllocationPriorityLevel
			Field Mapping uses symbolic key
				related.FinanceEnterpriseGroup	= actor.context.FinanceEnterpriseGroup
			Instance Selection
				where (related.UseAsDefault)
			
		ScheduledProcedureRel
			one-to-one relation to ScheduledProcedure
			Field Mapping uses symbolic key
				related.Company							= Company
				related.ScheduledProcedure				= ScheduledProcedure
			
		ScheduledProcedureLineRel
			one-to-one relation to ScheduledProcedureLine
			Field Mapping uses symbolic key
				related.Company							= Company
				related.ScheduledProcedure				= ScheduledProcedure
				related.ScheduledProcedureLine			= ScheduledProcedureLine

		RequestedScheduledProcedureLineRel
			one-to-many relation to ScheduledProcedureLine
			Field Mapping uses symbolic key
				related.Company							= Company
				related.ScheduledProcedure				= ScheduledProcedure
				related.ScheduledProcedureLine			= ScheduledProcedureLine
			Instance Selection
				where (related.IsRequested)				

		StockOnHandDetailRel
			one-to-many relation to StockOnHandDetail
			Field Mapping uses symbolic key
				related.Company									= FromCompanyLocationBin.FromCompany
				related.InventoryLocation						= FromCompanyLocationBin.FromLocation
				related.Item									= Item
			Instance Selection
				where (related.StockOnHandDetail.UnitOfMeasure	= EnteredUOM)

		WarehouseStorageLocationRel
			one-to-one relation to WarehouseStorageLocation
			Field Mapping uses symbolic key
				related.Company									= FromCompanyLocationBin.FromCompany
				related.InventoryLocation						= FromCompanyLocationBin.FromLocation
				related.WarehouseStorageLocation				= DerivedWarehouseStorageLocation

		InventoryIssueTransactionLineRel
			one-to-many relation to InventoryTransactionLine
			Field Mapping uses ByItem
				related.Company                  	= FromCompanyLocationBin.FromCompany
				related.InventoryLocation       	= FromCompanyLocationBin.FromLocation
				related.Item                     	= Item
			Instance Selection
				where (related.TransactionSystemCode    = "RQ"
				and    related.InventoryTransaction.IsInventoryIssues)

	Conditions
		RecordExists
			restricted
			when (RequisitionLine exists)

		IsServiceItemByAmount
			when (ItemType.Service
			and   ServiceCode.Amount)

		IsACapitatedProcedure 
			restricted 
			when (CapitatedProcedureLevel > 0
			and   CapitatedComponentGroup !entered)
		
		HasDuplicateSerialNumber 
			restricted 
			when (DuplicateProcedureSerialRel exists)
		
		PrimaryOrRevisionProcedure
			restricted
			when (IsACapitatedProcedure
			and   ContractLine.PrimaryOrRevisionProcedure)
		
		PrimaryProcedure 
			restricted 
			when (IsACapitatedProcedure
			and   ContractLine.PrimaryProcedure)
		
		RevisionProcedure 
			restricted 
			when (IsACapitatedProcedure
			and   ContractLine.RevisionProcedure)
		
		ProcedureHasComponents 
			restricted 
			when (IsACapitatedProcedure
			and   ComponentsForProcedureRel exists)

		ContractLineIsACapitatedComponent 
			restricted 
			when (CapitatedProcedureLine entered)

		NoChargeCapitatedComponent
			restricted 
			when (ContractLineIsACapitatedComponent
			and   CostOption.NoCharge)

		CanSwapNoChargeOnCapitated 
			restricted 
			when (ContractLineIsACapitatedComponent
			and    CostOption.NoCharge
			and    CapitatedSelectForSwapNoCharge = false
			and    NoChargeNotSelectedForSwap)		
		
		CanSwapNoChargeOnCapitatedForList
			restricted 
			when (ContractLineIsACapitatedComponent
			and    CostOption.NoCharge
			and    CapitatedSelectForSwapNoCharge = false)

		CanSwapChargedOnCapitated 
			restricted 
			when (ContractLineIsACapitatedComponent
			and   !CostOption.NoCharge
			and    CapitatedSelectForSwapCharged = false
			and    ChargeNotSelectedForSwap)

		CanSwapChargedOnCapitatedForList
			restricted 
			when (ContractLineIsACapitatedComponent
			and   !CostOption.NoCharge
			and    CapitatedSelectForSwapCharged = false)

		NoChargeNotSelectedForSwap
			restricted 
			when (NoChargeSelectedForSwapRel !exists)

		ChargeNotSelectedForSwap
			restricted 
			when (ChargeSelectedForSwapRel !exists)

		NoChargeSelectedForSwap
			restricted 
			when (NoChargeSelectedForSwapRel exists)

		ChargeSelectedForSwap
			restricted 
			when (ChargeSelectedForSwapRel exists)

		SelectedForSwap 
			restricted 
			when (CapitatedSelectForSwapNoCharge
			or    CapitatedSelectForSwapCharged)
		
		IsHSNSACCodeEnabled
			restricted
			when (Company.GeneralLedgerCompany.RequireHSNSACCode)

		IsIntraLocation
			restricted
			when (Company = FromCompanyLocationBin.FromCompany
			and   RequestingLocation = FromCompanyLocationBin.FromLocation)

		OriginalItemExists
			restricted
			when (OriginalItemRel exists)

		SubstituteItemsExists
			restricted
			when (ValidSubstituteItemsRel exists)

		DemandRecordsExist
			restricted
			when (WarehouseDemandLines2Rel exists)

		ShipmentRecordsExist
			restricted
			when (WarehouseShipmentLinesRel exists)

		TaxIsLanded
			restricted
			when ((DerivedLandedUnitCost - DerivedLandedUnitCostLessTax) > 0)

		OldCostCodeFromContracts
			restricted
			when (old CostCode.Contract
			or	  old CostCode.Blanket
			or	  old CostCode.CatalogQuote
			or	  old CostCode.Standing
			or	  old CostCode.TierReqLocParticipant
			or	  old CostCode.TierIcLocationParticipant
			or	  old CostCode.TierCompanyParticipant)

		HasVendorItem
			restricted
			when (VendorItem entered)

		HasVendorItemAndDoesNotExist
			restricted
			when (VendorItem entered
			and   VendorItem not exists)

		HasItemFromVendorItemNoVendor
			restricted
			when (ItemDefaultVendorItemNoVendorRel exists
			and   Vendor !entered
			and   VendorItem entered
			and   IsSpecial)

		HasItemFromVendorItemWithVendor
			restricted
			when (ItemDefaultVendorItemWithVendorRel exists
			and   Vendor entered
			and   VendorItem entered
			and   IsSpecial)

		HasItemFromVendorItemManufacturerNumber
			restricted
			when (ItemDefaultVendorItemManufacturerNumberRel exists
			and   ManufacturerNumber entered
			and   IsSpecial)

		HasItemFromItemManufacturerNumber
			restricted
			when (ItemDefaultItemManufacturerNumberRel exists
			and   ManufacturerNumber entered
			and   IsSpecial)

		HasItemFromVendorItemStripped
			restricted
			when (ItemDefaultStrippedVendorItemNoVendorRel exists
			and   VendorItem != StrippedVendorItem
			and   VendorItem entered
			and   IsSpecial)

		ItemFoundForSpecial
			when (HasItemFromVendorItemNoVendor
			or   HasItemFromVendorItemWithVendor
			or   HasItemFromVendorItemManufacturerNumber
			or   HasItemFromItemManufacturerNumber
			or   HasItemFromVendorItemStripped)

		LineErrorsExist
			restricted
			when (RequisitionLineErrorRel exists)

		HasBuyer
			restricted
			when (Buyer entered)

		HasWorkunit
			restricted
			when (PfiWorkunitRel exists)

		HasComments
			when (RequisitionLineCommentRel exists)

		ShowItemTooltip
			restricted
			when (Item.HasDescription2
			or	  Item.HasDesc3)

		UnreleasedLineSourcesExist
			restricted
			when (UnreleasedPurchaseOrderLineSourcesRel exists)

		NoReleasedLineSourcesExist
			restricted
			when (ReleasedPurchaseOrderLineSourcesRel !exists)

		IsUnreleased
			restricted
			when (Status.Unreleased)

		RecallProductItemForItemHardErrorExists
			restricted
			when (RecallProductItemForItemHardErrorRel exists)

		RecallProductItemForVendorItemHardErrorExists
			restricted
			when (RecallProductItemForVendorItemHardErrorRel exists)

		RecallProductItemForItemWarningExists
			restricted
			when (RecallProductItemForItemWarningRel exists)
			
		RecallProductItemForItemRelExists
			restricted
			when (RecallProductItemForItemRel exists)
			
		RecallProductItemForVendorItemWarningExists
			restricted
			when (RecallProductItemForVendorItemWarningRel exists)

		SourcingEstimate
			restricted
			when (SourcingEventRequired
			and   not CostCode.Entered)

		DistributionsExistButNotInBalance
			restricted
			when (RequisitionLineDistributionsRel exists
			and   not AmountsAndQuantitesInBalance)

		ByQuantityInBalance
			restricted
			when (DistributionBy.ByQuantity
			and   RemainingQuantityToBeDistributed not entered)

		ByAmountInBalance
			restricted
			when (DistributionBy.ByAmount
			and   RemainingAmountToBeDistributed not entered)

		ByPercentInBalance
			restricted
			when (DistributionBy.ByPercent
			and   RemainingPercentToBeDistributed not entered)

		AmountsAndQuantitesInBalance
			restricted
			when (ByQuantityInBalance
			or	  ByAmountInBalance
			or	  ByPercentInBalance)

		LineExists
			restricted
			when (RequisitionLine exists)

		ValidReplacementItem
			restricted
			when ((Item.EffectiveDate not entered or current corporate date >= Item.EffectiveDate)
			and   (Item.ExpirationDate not entered or current corporate date <= Item.ExpirationDate))

		HasPurchasingVendor
			restricted
			when (PurchasingVendorRel exists)

		IsMakeToOrderKitItemWithStock
			restricted
			when (IsKitItemFromLocation
			and   KitItemFromLocationRel exists
			and   KitItemFromLocationRel.HasComponentsWithStockOnHand)

		HasUnitCost
			restricted
			when (TransactionUnitCost entered)

		CanCreate
			restricted
	 		when (Requisition.IsUnreleased
	 		and   !Requisition.BudgetEditInProgress
	 		and   !Requisition.InterfaceInProcess
	 		and   Requisition.Requisition entered)

		CanUpdate
			restricted
			when (IsUnreleased
	 		and   !Requisition.BudgetEditInProgress
	 		and   !Requisition.InterfaceInProcess)

		IsClosed
			restricted
			when (Closed)

		ContractOutput
			restricted
			when (SourcingEventLineSourceRel.LineToContract)

		HasContract
			restricted
			classic name is CONTRACT-ENTRD
			when (Contract entered)

		HasContractAndDisplayContract
			restricted
			when (HasContract
			and   Requisition.Requester.DisplayContract)

		HasContractWithLifetimeEdit
			restricted
			classic name is CONTRACT-ENTRD
			when (HasContract
			and   Contract.LifetimeEdit.PurchaseOrdersAndReqs)

		ContractAmountIncludesTax
			restricted
			when (HasContract
			and   Contract.IncludeTaxInMaxEdits)

		ContractAmountIncludesAddOnCharge
			restricted
			when (HasContract
			and   Contract.IncludeAOCInMaxEdits)

		IsCreatePurchaseOrder
			restricted
			classic name is CREATE-PO
			when (CreatePurchaseOrder
			and   Status >= 1)

		IsCreatePurchaseOrderNotContract
			restricted
			when (IsCreatePurchaseOrder
			and  !IsInventory
			and  !ContractOutput)

		PurchaseOrderOnly
			restricted
			when (IsCreatePurchaseOrder
			and   !IsInventory)

		WarehouseOnly
			restricted
			when (!IsCreatePurchaseOrder
			and    IsInventory)

		PurchaseOrderAndWarehouse
			restricted
			when (IsCreatePurchaseOrder
			and   IsInventory)

		DistributionAccountExists
			restricted
			classic name is HAS-ACCOUNTS
			when (first RequisitionLineDistribution set exists)

		DemandExists
			restricted
			classic name is HAS-DEMAND
			when (first WarehouseDemandLinesRel exists)





		AssociatedItemExists
			restricted
			classic name is HAS-ITEMSUB
			when (first AssociatedItemsRel exists)

		PHDemandExists
			restricted
			classic name is HAS-PH-DEMAND
			when (PharmacyWarehouseDemandLineRel exists)

		SourceRecordExists
			restricted
			classic name is HAS-SOURCE
			when (first PurchaseOrderLineSourcesRel exists)

		ShipmentLineExists
			restricted
			classic name is HAS-WHSHIPLINE
			when (first WarehouseShipmentLinesRel exists)

		ShowShipmentLinesPanel
			restricted
			when (ShipmentLineExists
			and	  !CreatePurchaseOrder)

		DemandLinesExist
			restricted
			when (WarehouseDemandLinesDrillRel exists)

		ShowDemandLinesPanel
			restricted
			when (DemandLinesExist
			and	  !CreatePurchaseOrder)

		ItemExists
			restricted
			when ((Item exists)
			and !IsSpecialOrService)

		VendorLocationExists
			restricted
			when (VendorLocationRel exists)

		IsIntercompany
			restricted
			when (Company != FromCompanyLocationBin.FromCompany)

		IsInventory
			restricted
			when (ItemType.Inventoried)

		InventoryLocationLotTrackingMustMatch
			restricted
            when (RequestingItemLocationRel.InventoryLocation.InventoryLocationLotTracking.LotTrackingAtToAndFromLocation
            or   (RequestingItemLocationRel.InventoryLocation.InventoryLocationLotTracking.CheckICCompanyValue
            and   not RequestingItemLocationRel.InventoryLocation.Company.LotTrackingAtFromLocationOnly))

		NeedsUDIDetails
			restricted
			when (ItemType.Inventoried
			and   not CreatePurchaseOrder
			and   (ItemLocationRel.UDITracked.UDIRequiredAtReceipt or ItemLocationRel.UDITracked.UDIRequiredAtIssue))

		IsSpecialOrService
			when (ItemType.Special
			or ItemType.Service)

		IsSpecial
			restricted
			when (ItemType.Special)

		IsInventoryOrNonstock
			restricted
			classic name is ITEM
			when (ItemType.Inventoried
			or    ItemType.NonStock)

		IsCatchWeightItem
			restricted
			when (IsInventoryOrNonstock
			and   Item.IsCatchWeightItem)

		HasItemLocation
			restricted
			classic name is ITEM-LOCATION
			when (ItemType.Inventoried)

		IsOpen
			restricted
			when (not Closed)

		NonInventoryItem
			restricted
			classic name is PO-COMPANY
			when (not ItemType.Inventoried)

		ProcessedStatusAndPurchased
			restricted
			classic name is POLINESRC
			when (CreatePurchaseOrder
			and   Status.Processed)

		IsProcessedAndClosedStatus
			restricted
			classic name is PROCREJ-STATUS
			when (Status.Processed
			and   Closed)

		IsRejectedStatus
			restricted
			classic name is REJECT-STATUS
			when (Status.Rejected)

		IsReleasedStatus
			restricted
			classic name is RELEASE-STATUS
			when (Status.Released)

		IsUnreleasedStatus
			classic name is UNRELEASE-STAT
			when (Status.Unreleased)

		IsProcessedStatus
			restricted
			when (Status.Processed)

		IsReturned
			restricted
			when(ReturnQuantity entered)

		IsProcessedAndApproved
			restricted
			when (Status.Processed
			and Approved)

		AllowRequisitionReturn
			restricted
			when (RequestingLocation.InventoryTransactionType.Issue
			and   ItemType.Inventoried
			and   ShippedQuantity > 0)

		IsItemLocationInventoryTracked
			restricted
			when (ItemLocationRel.InventoryTracked)

		IsBinTrackFeedback    
			restricted



			when (ItemLocationRel.BinTracked)


		IsSerialTrackFeedback
			restricted
			when (ItemLocationRel.IsSerialTracked)

		IsLotTrackFeedback
			restricted
			when (ItemLocationRel.IsLotTracked)

		EnableFeedback
			restricted
			when ((IsBinTrackFeedback
			or	  IsSerialTrackFeedback
			or    IsLotTrackFeedback)
			and   Status.Processed)

		EnableReturnDetails
			restricted
			when ((IsBinTrackFeedback
			or	  IsSerialTrackFeedback
			or    IsLotTrackFeedback)
			and   Status.Processed
			and   IsReturned)

		EnableAlert
			restricted
			when (EnableFeedback
			and   RequisitionLineDetailAlert)

		CostCodeIsContractBlanketCatalog
			restricted
			when (CostCode.Contract
			or CostCode.Blanket
			or CostCode.CatalogQuote)

		CostCodeIsLastCostLastPO
			restricted
			when (CostCode.LastCost
			or CostCode.LastPoCreated)

		IsTransactionTypeTransfer
			restricted
			when (InventoryTransactionType.DirectTransfer
			or InventoryTransactionType.IntransitTransfer)

		IsKitItemFromLocation
			restricted
			when (KitItemFromLocationRel exists
			and KitItemFromLocationRel.first KitComponentsRel exists)

		IsKitItem
			when (IsInventoryOrNonstock
			and   KitItemFromLocationRel exists)

		IsMakeToOrderKitItem
			restricted
			when (IsKitItemFromLocation and KitItemFromLocationRel.IsMakeToOrder)

		IsCostNotEditable
			when ((not Requisition.Requester.OverrideContractCost
			and (CostCodeIsContractBlanketCatalog
			or CostCode.TierCompanyParticipant
			or CostCode.TierIcLocationParticipant
			or CostCode.TierReqLocParticipant))
			or (not Requisition.Requester.OverrideLastPOLastCost
			and CostCodeIsLastCostLastPO))

		DisplayOfProcedureInfo
			restricted
			when (Requisition.DisplayOfProcedureInfo)

		HasLinePatientProcedureInfo
			restricted
			when (TransientVisitNumber 			entered
			or 	  TransientPatientID 			entered
			or 	  TransientCaseNumber 			entered
			or 	  TransientProcedure 			entered
			or 	  TransientProcedureModifier 	entered
			or 	  TransientProcedureDate 		entered
			or 	  TransientPhysicianName 		entered
			or 	  TransientNurseCoordinator 	entered
			or 	  TransientPatientLastName 		entered
			or 	  TransientPatientFirstName 	entered
			or 	  TransientPatientMiddleName 	entered
			or 	  TransientBirthdate 			entered
			or 	  TransientGender 				entered
			or 	  TransientSocialSecurityNumber entered
			or 	  TransientSalesRepresentative 	entered
			or 	  TransientOrderNumber 			entered
			or 	  TransientRequestor 			entered
			or 	  TransientLot 					entered
			or 	  TransientSerialNumber 		entered
			or 	  TransientUserDefinedField1 	entered
			or 	  TransientUserDefinedField2 	entered
			or    TransientUniqueDeviceId		entered
			or    TransientGTIN					entered
			or    TransientManufacturer			entered
			or    TransientManufacturerNumber	entered
			or    TransientManufacturingDate	entered
			or    TransientExpirationDate		entered)

		HasPatientProcedureRecord
			when (PatientProcedure entered)

		HasInventoryUDIDetailRecord
			when (InventoryUDIDetailRel exists)

		HasScheduledProcedureRecord
			when (ScheduledProcedureLineRel exists)

		IsDeleteAllowed
			when (Requisition.IsUnreleased
			and   PatientProcedure entered)

	   	ProcedureInformationChanged
	   		restricted
			when (PatientProcedure entered
			and  (TransientVisitNumber 			changed
			or	  TransientPatientID 			changed
			or	  TransientCaseNumber 			changed
			or	  TransientProcedure 			changed
			or	  TransientProcedureModifier 	changed
			or	  TransientProcedureDate 		changed
			or	  TransientPhysicianName		changed
			or	  TransientNurseCoordinator 	changed
		   	or	  TransientPatientLastName 		changed
			or	  TransientPatientFirstName 	changed
			or	  TransientPatientMiddleName 	changed
			or	  TransientBirthdate 			changed
			or	  TransientGender 				changed
			or	  TransientSocialSecurityNumber changed
		   	or	  TransientSalesRepresentative	changed
			or	  TransientOrderNumber 			changed
			or	  TransientRequestor 			changed
		   	or	  TransientLot 					changed
			or	  TransientSerialNumber 		changed
			or	  TransientUserDefinedField1 	changed
			or	  TransientUserDefinedField2	changed
			or    TransientUniqueDeviceId		changed
			or    TransientGTIN					changed
			or    TransientManufacturer			changed
			or    TransientManufacturerNumber	changed
			or    TransientManufacturingDate	changed
			or    TransientExpirationDate		changed))

		HasProcedureInformationHeaderDefault
			restricted
			when (Requisition.DefaultProcedureInformation 			entered
			or    Requisition.PatientProcedure.VisitNumber 			entered
			or    Requisition.PatientProcedure.PatientID 			entered
			or    Requisition.PatientProcedure.CaseNumber			entered
			or    Requisition.PatientProcedure.PatientLastName		entered
			or    Requisition.PatientProcedure.PatientFirstName		entered
			or    Requisition.PatientProcedure.PatientMiddleName	entered
			or    Requisition.PatientProcedure.Birthdate			entered
			or    Requisition.PatientProcedure.Gender				entered
			or    Requisition.PatientProcedure.SocialSecurityNumber	entered)

		DistributionExists
			when (RequisitionLineDistributionsRel exists)

		LineAddOnChargeExists
			restricted
			when (RequisitionLineAddOnCharge set exists)

		HasSingleDistribution
			restricted
			when (instance count of RequisitionLineDistribution set = 1)

		HasMultipleDistributions
			restricted
			when (instance count of RequisitionLineDistribution set > 1)

		MultipleDistributionsExist
			when (instance count of RequisitionLineDistribution set > 1)

		SingleDistributionDisplay
			restricted
			when (not HasMultipleDistributions and InventoryTransactionType.Issue)

		IsInventoryType
			restricted
			when (ItemType.Inventoried)

		IsDistributionAllowed
			restricted
	   		when (InventoryTransactionType.Issue
	   		or 	 (IsTransactionTypeTransfer
	   		and   NonInventoryItem))

		DistributionUpdatesAllowed
			when (Status.Unreleased
			and   IsDistributionAllowed)

	   	IsOutofBalance   
	   		restricted
			when (not DerivedDetailsInBalance)

		ContractHasVendorLocation
			restricted
			when (Contract.HasApPurchFrom)

		PurchaseFromLocationMatchesContract
			restricted
			when ((Contract.ApPoPurchaseFrom.PurchaseFromLocation entered and PurchaseFromLocation = Contract.ApPoPurchaseFrom.PurchaseFromLocation)
			or    (Contract.ApPoPurchaseFrom.VendorLocation       entered and PurchaseFromLocation = Contract.ApPoPurchaseFrom.VendorLocation))

		QuantityNotEntered
			restricted
			when (Quantity !entered)

		SourcingEventExists
			restricted
			when (SourcingEventLineSourceRel exists)

		IsMyRequisitionLine
			restricted
			when (Requisition.Requester = actor.agent(Employee).Employee and IsValidForActorContext)

		IsValidForActorContext
			restricted
			when ((actor.context.FinanceEnterpriseGroup != ""
			and   GeneralLedgerCompanyForCompanyRel.FinanceEnterpriseGroup = actor.context.FinanceEnterpriseGroup)
			or   (actor.context.FinanceEnterpriseGroup = ""))

		HasBudgetErrors
			when (DistributionsWithBudgetErrorRel exists)

		MissingDistribution
			restricted
			when (LineExists
			and IsDistributionAllowed
			and not DistributionExists)

		IsPunchoutItem
			when (CostCode.Punchout)

		IsNotTransientBypassUnitCost
			when (!TransientBypassUnitCost)

		IsInventoried
			when (ItemType.Inventoried
			and CostCode.InventoryCost
			and TransactionUnitCost != 0)

		IsCostUpdateProhibited
			when (IsCostNotEditable
			or    IsInventoried
			or    IsPunchoutItem
			or    CostOption.NoCharge)

		VendorItemExists
			when (VendorItem exists)

		DeliveredQuantityEntered
			when (DeliveredQuantity > 0)

		InterfaceCancelQuantityEntered
			when (InterfaceCancelQuantity > 0)

		FullyCanceled
			restricted
			when (InterfaceCancelQuantity + DeliveredQuantity = Quantity)

		HasKilledQuantity
			when (KilledQuantity entered)

		WithinSearchDateRange
			restricted
			when (SearchDateRange not entered
			or   (SearchDateRange entered
			and   CreationDate within SearchDateRange))

		AllowCreateUpdateDeleteLineComments	
			when (Status.Unreleased or IsReleasedStatus)	

		ItemIsSerialTrackedAtReceipt
			restricted
			when (ItemLocationRel.SerialTracked.SerialRequiredAtReceipt)

		ItemIsLotTrackedAtReceipt
			restricted
			when (ItemLocationRel.LotTracked.LotRequiredAtReceipt)

		ItemIsDetailTracked
			restricted
			when (ItemLocationRel.BinTracked
			or	  ItemIsSerialTrackedAtReceipt
			or	  ItemIsLotTrackedAtReceipt)

		IsBalanced
			restricted
			when (CurrentReturnQuantity = DetailReturnQuantity
			and  (not IsCatchWeightItem
			or    CurrentReturnCatchWeightQuantity = LocalCatchWeightDetailReturnQuantity))

		ItemIsBinTrackedOnlyWithPreferredBin
			restricted
			when (ItemLocationRel.BinTracked
			and   ItemLocationRel.PreferredBin entered
			and   ItemLocationRel.IsNotLotTracked
			and   ItemLocationRel.IsNotSerialTracked)

		AllowUpdateToLinesFromPunchout
			when ((PurchaseFromLocationRel.AllowChangeToPunchoutPurchaseOrder
			or PurchasingVendorRel.AllowChangeToPunchoutPurchaseOrder)
			and Vendor not changed)

		PatientProcedureEntered
			restricted
			when (PatientProcedure entered)

		HasUOM
			restricted
			when (EnteredUOM entered)

		AllRequisitionLinesCanceled
			restricted
			when (UncanceledRequisitionLinesRel !exists)

		HasRequisitionHeaderAOC
			when (HeaderAddOnChargesRel exists)

		TaxEntityUsesThirdPartyTax
			restricted
			when (TaxEntityUsesVertex
			or    TaxEntityUsesSabrix)

		TaxEntityUsesVertex
			restricted
			when (TaxEntityRel.ThirdParty.VertexOSeries)

		TaxEntityUsesSabrix
			restricted
			when (TaxEntityRel.ThirdParty.Sabrix)

		DoOneSource
			restricted
			when (not TaxEntityRel.DelayTaxProcessing
			or    Status.Released)

		NeedsApproval				
			restricted
			when (Requisition.Status.Released
			or   (Requisition.Status.Processed
			and (Status.Released and not Approved)) and not Requisition.InterfaceInProcess)

		IsReplacementItem
			when (Item = OriginalItemRel.ReplacementItem)

		ReferencedContractHasHeaderCommitments
			restricted
			when (Contract entered
			and   Contract.AllowReferenceOfItemsNotOnContract
			and   Contract.UseHeaderCommitments)

		ValidateQuantityAgainstMaximumOnLocation
			restricted
			when (IsInventory
			and   ItemLocationRel.MaximumRequisitionQuantity entered   
			and  (FromInventoryCompanyRel.ApplyMaximumRequisitionQuantityTo.AllLocations
			or   (FromInventoryCompanyRel.ApplyMaximumRequisitionQuantityTo.NonParLocationsOnly and not RequestingLocation.ParOrExchangeLocation)))

		QuantityOnLineIsWithinMaximum
			restricted
			when (ItemLocationRel.MaximumRequisitionQuantity >= DerivedStockQuantity)

		TotalQuantityForItemIsWithinMaximum
			restricted
			when (ItemLocationRel.MaximumRequisitionQuantity >= DerivedTotalStockQuantity)

		ParItemWithReplenishmentSource
			restricted
			when (RequestingLocation.ParOrExchangeLocation
			and  (RequestingItemLocationRel exists
			or	 RequestingOriginalItemLocationRel exists))

		IsReplenishmentFromVendor
			restricted
			when (ParItemWithReplenishmentSource
			and  (RequestingItemLocationRel.ItemReplenishmentSourcesRel.Vendor entered
			or 	 RequestingOriginalItemLocationRel.ItemReplenishmentSourcesRel.Vendor entered))

		IsASupplier
			restricted
			when (SupplierRel exists)

		CanCreateForSupplier 
			restricted 
			when (CanCreateUpdateDeleteForSupplier
			and   Requisition.SupplierCanUseAdHoc)
		
		CanCreateUpdateDeleteForSupplier
			restricted
			when (IsASupplier
			and   Requisition.NotSubmittedForSupplier)

		TransientGTINEntered
			restricted 
			when (TransientGTIN entered)

		CanDisplayManufacturingDate
			restricted
			when ((SupplierSourceIdRel.ProcedureDetailsFromContact
			and    SupplierSourceIdRel.SupplierViewManufacturingDate)
			or    (!SupplierSourceIdRel.ProcedureDetailsFromContact
			and    SupplierGroupRel.SupplierViewManufacturingDate))

		CanDisplayExpirationDate
			restricted
			when ((SupplierSourceIdRel.ProcedureDetailsFromContact
			and    SupplierSourceIdRel.SupplierViewExpirationDate)
			or    (!SupplierSourceIdRel.ProcedureDetailsFromContact
			and    SupplierGroupRel.SupplierViewExpirationDate))

		CanDisplayLot
			restricted
			when ((SupplierSourceIdRel.ProcedureDetailsFromContact
			and    SupplierSourceIdRel.SupplierViewLotNumber)
			or    (!SupplierSourceIdRel.ProcedureDetailsFromContact
			and    SupplierGroupRel.SupplierViewLotNumber))

		CanDisplaySerialNumber
			restricted
			when ((SupplierSourceIdRel.ProcedureDetailsFromContact
			and    SupplierSourceIdRel.SupplierViewSerialNumber)
			or    (!SupplierSourceIdRel.ProcedureDetailsFromContact
			and    SupplierGroupRel.SupplierViewSerialNumber))

		CanDisplayGTIN	
			restricted
			when ((SupplierSourceIdRel.ProcedureDetailsFromContact
			and    SupplierSourceIdRel.SupplierViewGTIN)
			or    (!SupplierSourceIdRel.ProcedureDetailsFromContact
			and    SupplierGroupRel.SupplierViewGTIN))

		CanDisplayUDI
			restricted
			when ((SupplierSourceIdRel.ProcedureDetailsFromContact
			and    SupplierSourceIdRel.SupplierViewUniqueDeviceId)
			or    (!SupplierSourceIdRel.ProcedureDetailsFromContact
			and    SupplierGroupRel.SupplierViewUniqueDeviceId))			

		TaxableItem
			restricted
			when (PurchaseTaxable
			or    TransientPurchaseTaxable.Yes)



		ItemDateRange
			restricted
			when ((Item.EffectiveDate not entered
			and   Item.ExpirationDate > current corporate date)
			or   (Item.ExpirationDate not entered
			and   Item.EffectiveDate < current corporate date)
			or   (Item.EffectiveDate < current corporate date
			and   Item.ExpirationDate > current corporate date))

		ReplacementCheckForItemLocationQuantity
			restricted
			when (ItemLocationRel.AvailableQuantity not entered
			or   ItemLocationRel.AvailableQuantity < DerivedStockQuantity)


		IsRequesterCurrentRequisition
			restricted
			when (actor.agent(Employee).Employee.Requester.CurrentRequisitionForRQC = Requisition
			and   actor.agent(Employee).Employee.Requester.CurrentCompanyForRQC = Company)

		FrontEndSplitsEnabled
			restricted
			when(GeneralLedgerCompanyForCompanyRel.FinanceEnterpriseGroup.FrontEndSplits)

		AllowFrontEndSplit
			restricted
			when (Requisition.IsForRelease
			and	GeneralLedgerCompanyForCompanyRel.FinanceEnterpriseGroup.FrontEndSplits
			and !GeneralLedgerCompanyForCompanyRel.FinanceEnterpriseGroup.UseFundedAmounts
			and Company.FrontEndSplitRequisition)

		HasFrontEndSplitDistributions
			restricted
			when (Requisition.IsForRelease
			and DistributionsCreatedByFESRel exists)


		CatchWeightReturnQuantityRequired	
			restricted
			when (IsCatchWeightItem
			and ReturnQuantity entered)

		CommodityCodeRequired
			restricted
			when (Requisition.Requester.RequireCommodityCode
				and (!IsInventoryOrNonstock
					or Item.CommodityCode not entered)
				and ContractLine.CommodityCode not entered
				and (IsInventoryOrNonstock
					or Requisition.CommodityCode not entered))

		ContractRequired
			restricted
			when (EnteredContractLine entered
			or ContractLine entered)

		ContractLineRequired
			restricted
			when (ItemType.Service
			and Contract entered
			and not Contract.AllowReferenceOfItemsNotOnContract)

		ForContractLineEdit
			restricted
			when (ItemType.Service
			and   CostCode.Entered)

		DescriptionRequired
			restricted
			when (Item.Description not entered
				or ContractLine.ItemDescription not entered)

		EnteredUOMRequired
			restricted
			when ((IsNotTransientBypassUnitCost
					and (Company.RequireUnitOfMeasure
						or (not ItemType.Service
							or ContractLine not entered)))
				or (RecordExists
					and Status.Unreleased))

		HSNSACCodeRequired
			restricted
			when (IsHSNSACCodeEnabled
				and RecordExists
				and Status.Unreleased)

		MajorPurchasingClassRequired
			when ((IsInventoryOrNonstock
				and (!action type.Create
					or Item.MajorPurchasingClass not entered)
				and Requisition.Requester.RequesterPurchasingClassExists
				and Requisition.Requester.PurchasingClassValidationAllowed))
		
		RSSLPLMajorPurchasingClassRequired
				when (MajorPurchasingClassRequired
				or (!IsInventoryOrNonstock
				and RequesterRel.RequireMajorPurchaseClasses))

		MinorPurchasingClassRequired
			when (!IsInventoryOrNonstock
				and RequesterRel.RequireMinorPurchaseClasses)

		PurchaseTaxCodeRequired
			restricted
			when (PurchaseTaxable
				and CreatePurchaseOrder
				and ((!CostOption.NoCharge
						and (action type.Create
							or action type.Update)
						and not LocalCopyRequisition
						and (!IsInventoryOrNonstock
							or ItemLocationRel.PurchaseTaxCode not entered
							or Item.PurchaseTaxCode not entered)
						and Requisition.PurchaseTaxCode not entered
						and FromCompanyLocationBin.FromLocation.PurchaseOrderTaxCode not entered)
					or (RecordExists
						and Status.Unreleased)))

		QuantityRequired
			restricted
			when ((ServiceCode.Quantity
					and IsNotTransientBypassUnitCost)
				or (RecordExists
					and Status.Unreleased))

		ServiceCodeRequired
			restricted
			when (ItemType.Service
				and ContractLine not entered)

		TransactionUnitCostRequired
			restricted
			when ((CostOption.CostRequired
					or CostOption not entered)
				and (IsNotTransientBypassUnitCost
					or (RecordExists
						and Status.Unreleased)))

		VendorRequired
			restricted
			when ((not SourcingEventRequired
			and ((ItemType.Special and Requisition.Requester.RequireVendorForSpecials)
			or   (ItemType.Service and Requisition.Requester.RequireVendorForServices)))							
			or   (TransactionCurrencyCode entered and TransactionCurrencyCode != Requisition.BaseCurrencyCode))		

		CannotSetToNoChargeOrVendorDetermined
			restricted
			when (  ItemType.Inventoried
			and not CostOption.CostRequired
			and not CreatePurchaseOrder
			and not RequestingLocation.ParOrExchangeLocation
			and not ItemLocationRel.NoCostHistoryOrHasNoChargeReceipts
			and not ItemLocationRel.NoCharge)

		IgnoreSubstituteReplenishment   
			restricted
			when ((RequisitionSource.ReplenishmentByRequisition
			or    RequisitionSource.LocationReplenishmentReport)
			and   Item.ItemGroup.IgnoreSubstituteItemsInReplenishment)

		BypassSubstitution
			restricted
			when ((RequisitionSource.ReplenishmentByRequisition
			or     RequisitionSource.LocationReplenishmentReport)
			and    Item.ItemGroup.IgnoreSubstituteItemsInReplenishment)

		DoSubstituteItemChecking
			restricted
			when (action type.Create
			and   OriginalItem not entered
			and   Item.ItemGroup.AutomaticItemSubstitute
			and   Item.ItemGroup.AllowSubstitutesOnWarehouseLocationRule
			and   not BypassSubstitution
			and   not PreferenceCardTransaction)
		
		AllocatePriorToSubstitution
			restricted
			when	(Item.ItemGroup.AutomaticItemSubstitute
			and		action type.Create
			and		(InventoryCompanyRel.AllocatePriorToSubstitution.AllocatePriorToSubstitution
			or		(InventoryCompanyRel.AllocatePriorToSubstitution.DefaultToItemGroup
			and		Item.ItemGroup.AllocatePriorToSubstitution)))

		LatexItem
			restricted
			when (Item.Latex = 1)
		
		SingleCallToOneSource
			restricted
			when (PurchaseTaxable
			and	  TaxEntityUsesSabrix
			and	  TaxEntityRel.DelayTaxProcessing
			and	  Requisition.DerivedNumberOfTaxLineItems <= 200)

		RSSLPLCurrentRequisitionForRQCEntered
			restricted
			when (actor.agent(Employee).Employee.Requester.CurrentRequisitionForRQC entered)

		IsInventoriedItemWithCostOrNoCharge
			when (ItemLocationRel exists
			and	((ItemLocationRel.NoCharge
			and ItemLocationRel.InventoryTracked))
			or ItemLocationRel.LastReceiptCost > 0
			or ItemLocationRel.LastIssueCost > 0
			or ItemLocationRel.AverageCost > 0)

		MissingTransactionUnitCost
			restricted
			when (not HasUnitCost
			and CostOption.CostRequired
			and !IsInventoriedItemWithCostOrNoCharge)

		VertexDelayTaxCall
			when (TaxEntityRel.ThirdParty.VertexOSeries
			and   TaxEntityRel.TaxAttributeCode entered)	

		SingleCallToVertex  
			restricted
			when (PurchaseTaxable
			and   TaxEntityRel.ThirdParty.VertexOSeries
			and   TaxEntityRel.VertexCallMethod.ByTransaction
			and	  Requisition.DerivedNumberOfTaxLineItems <= 200)

		IsOngoingAverageCalculation
			restricted
			when (Requisition.FromCompanyLocation.FromCompany.UseGlobalAverageCost
			and   GlobalAverageCostAndSOHRel.AverageComputation.Ongoing)
					

		HasItemLocationStockUOM
			when (IsInventoryOrNonstock
			and	  ItemLocationRel.HasItemLocationStockUOM)

		HasRequestingLocationStockUOM
			when (RequestingItemLocationRel.HasItemLocationStockUOM)

		ParCountProcessing
			when (FromParCounting 				
			or    LocalCreatedFromParCounting)	


		HasSpecialHandlingCode
			restricted
			when (SpecialHandlingCode entered)

		HasSpecialHandlingInstructions
			restricted
			when (SpecialHandlingInstructions entered)

		HasHandlingInstructionsToDisplay
			restricted
			when (HasSpecialHandlingCode
			and   HasSpecialHandlingInstructions)

		IsDistributionDisplay
			when (DistributionExists and IsProcessedStatus)

		DisplayAOCOption
			restricted
			when (RequesterRel.DisplayAOCOption)

		DisplayRequestedDeliveryDate
			restricted
			when (RequesterRel.DisplayRequestedDeliveryDate)
			
		DisplayPOCode
			restricted
			when (RequesterRel.DisplayPOCode)
			
		DisplayTaxInfo
			restricted
			when (RequesterRel.DisplayTaxInfo)

		DisplayAccounting
			restricted
			when (RequesterRel.DisplayAccounting 
			and IsDistributionAllowed)

		DisplayBillCode
			restricted
			when (RequesterRel.DisplayBillCode)

		DisplayBuyer
			restricted
			when (RequesterRel.DisplayBuyer)

		DisplayOnlyBuyer
			restricted
			when (RequesterRel.DisplayOnlyBuyer)

		DisplayPatientProcedure
			restricted
			when (Requisition.DisplayOfProcedureInfo and RequesterRel.DisplayPatientProcedure)

		DisplayVendor
			restricted
			when (RequesterRel.DisplayVendor)

		DisplayPurchaseFrom
			restricted
			when (RequesterRel.DisplayPurchaseFrom)

		DisplayCommodityCode
			restricted
			when (RequesterRel.DisplayCommodityCode)
		
		DisplayGTIN
			restricted
			when (RequesterRel.DisplayGTIN)
		
		DisplayStrategicSourcingUsed
			restricted
			when(RequesterRel.StrategicSourcingUsed)
			
		DisplayStrategicSourcingUsedForCreatePurchaseOrder		
			restricted
			when ((CreatePurchaseOrder 
			and ItemType.Inventoried)
			or ((ItemType.NonStock 
			or ItemType.Special 
			or ItemType.Service)))

		ShowOnlyVendorsAssociatedWithItem
			restricted
			when (RequesterRel.ShowOnlyVendorsAssociatedWithItem)

		DisplayRequisitionDescription
			restricted
			when (RequesterRel.DisplayRequisitionDescription)

		DisplayDeliverTo
			restricted
			when (RequesterRel.DisplayDeliverTo)
		
		DisplayServiceInfo
			restricted
			when (ItemType.Service)
		
		DisplayStockOnHand
			restricted
			when (ItemType.Inventoried
			and RequesterRel.DisplayStockOnHand)

		SetToDisplayOnlyTransactionUOM
			restricted
			when (RequesterRel.SetToDisplayOnlyTransactionUOM)
		
		DisplayCostOption
			restricted
			when (RequesterRel.DisplayCostOption)

		DisplayDistributionCode
			restricted
			when (RequesterRel.DisplayDistributionCode)

		DisplayVendorItem
			restricted
			when (RequesterRel.DisplayVendorItem)

		DisplayInspectionRequired
			restricted
			when (RequesterRel.DisplayInspectionRequired)

		DisplayCertificationRequired
			restricted
			when (RequesterRel.DisplayCertificationRequired)

		DisplayPurchaseClasses
			restricted
			when (RequesterRel.DisplayPurchaseClasses)
		
		DisplayFillOrKillFlag
			restricted
			when (RequesterRel.DisplayFillOrKillFlag)

		DisplayAssetDisplayOption
			restricted
			when (RequesterRel.DisplayAssetDisplayOption)

		RequireAsset
			restricted
			when (RequesterRel.RequireAsset)

		RequireAssetTemplate
			restricted
			when (RequesterRel.RequireAssetTemplate)

		DisplayGLEncumbranceReference
			restricted
			when (RequesterRel.DisplayGLEncumbranceReference)
		
		DisplayGenericName
			restricted
			when (Item.GenericName entered
			and RequesterRel.DisplayGenericName)

		IsValidForCompany
			when (RequesterRel.Company = Company)
		
		DisplayAOCRequisitionLine
			restricted
			when (RequisitionLine exists 
			and RequesterRel.DisplayAOCOption)		
		
		ItemIsBackordered
			when ((HasAllBackorderDetails
			or    HasItemAndVendorBackorderDetails
			or    HasItemOnlyBackorderDetails)
			and	  not Closed)

		HasAllBackorderDetails
			when (CreatePurchaseOrder
			and  (Vendor 		entered
			and   VendorItem 	entered
			and	  AllVendorBackorderDetailsRel exists))

		HasItemAndVendorBackorderDetails
			when (CreatePurchaseOrder
			and  (Vendor 		entered
			and   VendorItem 	not entered
			and	  ItemAndVendorBackorderDetailsRel exists))			

		HasItemOnlyBackorderDetails
			when (CreatePurchaseOrder
			and  (Vendor 		not entered
			and   VendorItem 	not entered
			and	  ItemOnlyVendorBackorderDetailsRel exists))

		DisplayServiceCode
			restricted
			when (not LineExists
			or RequesterRel.DisplayServiceInfo)
		
		DisplaySpecialHandlingCode
			restricted
			when ((IsInventoryOrNonstock and HasSpecialHandlingCode)
			or IsSpecial)
		DisplayDistributionAccount
			restricted
			when (RequesterRel.DisplayAccounting)	

		RSSLPLAllocationPriorityLevelEnabled
			restricted
            when (RSSLPLConfigurationParameterRel exists)

		RSSLPLRequireCommodityCode
			restricted
			when (CommodityCodeRequired
			or RequesterRel.RequireCommodityCodeDisplay)

		RSSLPLRequireVendor
			restricted
			when (CreatePurchaseOrder
			and (VendorRequired
			or (RequesterRel.RequireVendor
			and not SourcingEventRequired)))
		
		RSSLPLValidateLineCommodityCode
			restricted
			when (RSSLPLRequireCommodityCode
			and CommodityCode not entered)
		
		RSSLPLValidateDeliverTo
			restricted
			when (RequesterRel.RequireDeliverTo
			and DeliverTo not entered)
		
		RSSLPLValidatePOCode
			restricted
			when (RequesterRel.RequirePOCode
			and POCode not entered)
		
		RSSLPLValidateBuyer
			restricted
			when (CreatePurchaseOrder
			and (RequesterRel.RequireBuyer
			and Buyer not entered))
		
		RSSLPLValidateAsset
			restricted
			when (RequireAsset
			and RequisitionLineDistributionsRel.AssetInformation.Asset not entered)
		
		RSSLPLValidateAssetTemplate
			restricted
			when (RequireAssetTemplate
			and RequisitionLineDistributionsRel.AssetInformation.AssetTemplate not entered)
		
		RSSLPLValidateGLEncumbranceReference
			restricted
			when (RequesterRel.RequireGLEncumbranceReference
			and RequisitionLineDistributionsRel.GLEncumbranceReference not entered)

		RSSLPLValidateManufacturer
			restricted
			when (RequesterRel.RequireManufacturer
			and Manufacturer not entered)
		
		RSSLPLValidateManufacturerNumber
			restricted
			when (RequesterRel.RequireManufacturerNumber
			and ManufacturerNumber not entered)
		
		RSSLPLValidateRequestedDeliveryDate
			restricted
			when (RequesterRel.RequireRequestedDeliveryDate
			and  RequestedDeliveryDate not entered)
		
		RSSLPLValidateVendor
			restricted
			when (RSSLPLRequireVendor
			and  Vendor not entered)
		
		RSSLPLValidateVendorItem
			restricted
			when (CreatePurchaseOrder
			and (RequesterRel.RequireVendorItem
			and  VendorItem not entered))
		
		RSSLPLValidateMajorPurchasingClass
			restricted
			when (RSSLPLMajorPurchasingClassRequired
			and  MajorPurchasingClass not entered)
		
		RSSLPLValidateMinorPurchasingClass
			restricted
			when (MinorPurchasingClassRequired
			and  MinorPurchasingClass not entered)
		
		RSSLPLMissingRequiredFields
			restricted
			when (RSSLPLValidateLineCommodityCode
			or RSSLPLValidateDeliverTo
			or RSSLPLValidateBuyer
			or RSSLPLValidatePOCode
			or RSSLPLValidateAsset
			or RSSLPLValidateAssetTemplate
			or RSSLPLValidateGLEncumbranceReference
			or RSSLPLValidateManufacturer
			or RSSLPLValidateManufacturerNumber
			or RSSLPLValidatePOCode
			or RSSLPLValidateRequestedDeliveryDate
			or RSSLPLValidateVendor
			or RSSLPLValidateVendorItem
			or RSSLPLValidateMajorPurchasingClass
			or RSSLPLValidateMinorPurchasingClass)
		
		RSSLPLShowRequiredFields
			restricted
			when (RequesterRel.RequireBuyer
			or RequesterRel.RequirePOCode
			or RSSLPLRequireCommodityCode
			or RequesterRel.RequireDeliverTo
			or (RequesterRel.RequireVendor
			and not SourcingEventRequired))

		PurchaseOrderReleasedOrIssued
			restricted
			when (PurchaseOrderLineSourcesRel.PurchaseOrderLine.PurchaseOrder.IsReleasedOrIssued)

		RSSLPLRequireBuyer
			restricted
			when (CreatePurchaseOrder
			and RequesterRel.RequireBuyer)
		
		RSSLPLRequireVendorItem
			restricted
			when (CreatePurchaseOrder
			and RequesterRel.RequireVendorItem)
		
		RSSLPLDisplayAllocationPriorityLevel
			restricted
			when (RSSLPLAllocationPriorityLevelEnabled
			and RequesterRel.RSSLPLDisplayPriority)
		
		RSSLPLDisplayPriority
			restricted
			when (not RSSLPLAllocationPriorityLevelEnabled
			and RequesterRel.RSSLPLDisplayPriority)
		
		RSSLPLDisplayViewOnlyMainPriority
			restricted
			when (RequesterRel.RSSLPLDisplayPriority)
		
		RSSLPLDisplayCurrencyCode
			restricted
			when (RequesterRel.RSSLPLDisplayCurrencyCode)
		
		RSSLPLDisplayFromCompany
			restricted
			when (RequesterRel.RSSLPLDisplayFromCompany)
		
		RSSLPLDisplayFromLocation
			restricted
			when (RequesterRel.RSSLPLDisplayFromLocation)
		
		RSSLPLDisplayCompany
			restricted
			when (RequesterRel.RSSLPLDisplayCompany)
		
		RSSLPLDisplayRequestingLocation
			restricted
			when (RequesterRel.RSSLPLDisplayRequestingLocation)
		
		RSSLPLDisplayRequestingLocationAndCompanyHidden
			restricted
			when (RSSLPLDisplayRequestingLocation
			and not RSSLPLDisplayCompany)
		
		RSSLPLDisplayCompanyAndRequestingLocationHidden
			restricted
			when (RSSLPLDisplayCompany
			and not RSSLPLDisplayRequestingLocation)
		
		RSSLPLDisplayCompanyAndRequestingLocation
			restricted
			when (RSSLPLDisplayCompany
			and RSSLPLDisplayRequestingLocation)
		
		RSSLPLHideCompanyAndRequestingLocation
			restricted
			when (not RSSLPLDisplayCompany
			and not RSSLPLDisplayRequestingLocation)
		
	Sets
		Set10
			indexed
			Instance Selection
				where (HasContract)
			Sort Order
				Company
				Requisition
				Contract
				Item
				VendorItem
				EnteredUOM
				RequisitionLine

		Set2
			indexed
			Instance Selection
				where (IsInventory)
			Sort Order
				Company
				Requisition
				RequisitionLine

		Set3
			indexed
			Sort Order
				Company
				FromCompanyLocationBin.FromCompany
				FromCompanyLocationBin.FromLocation
				Item
				Requisition
				RequisitionLine

		Set4
			indexed
			Instance Selection
				where (IsOpen)
			Sort Order
				Company
				Requisition
				RequisitionLine

		Set5
			indexed
			Sort Order
				Company
				RequestingLocation
				Item
				RequestedDeliveryDate descending
				Requisition
				RequisitionLine

		Set6
			indexed
			Sort Order
				Company
				RequestingLocation
				CreationDate
				Item
				Requisition
				RequisitionLine

		Set7
			indexed
			Sort Order
				Company
				Requisition
				RequisitionLine
				ItemType

		Set8
			indexed
			Sort Order
				Company
				Item
				Requisition
				RequisitionLine

		ByItem
			indexed
			Sort Order
				Item
				Company
				Requisition
				RequisitionLine

		ByVendor
			indexed
			Sort Order
				Vendor
				PurchaseFromLocation
				Company
				Requisition
				RequisitionLine

		ByContract
			indexed
			Sort Order
				Contract
				ContractLine
				Company
				Requisition
				RequisitionLine

		ByInventoryItem
			indexed
			Instance Selection
				where (IsInventory)
			Sort Order
				Company
				Requisition
				Item
				RequisitionLine

		ByPatientProcedure
			indexed
			Sort Order
				Company
				PatientProcedure
				Requisition
				RequisitionLine
			Instance Selection
				where (PatientProcedureEntered)

		ByCreationDate
			indexed
			Sort Order
				CreationDate descending
				Requisition descending
				RequisitionLine descending
				Company

		ByDeliverFromLocation
			indexed
			Instance Selection
				where (IsInventoryOrNonstock)
			Sort Order
				Company
				Requisition
				FromCompanyLocationBin.FromCompany
				FromCompanyLocationBin.FromLocation
				Item
				RequisitionLine

	Create Rules

		include ValidateOngoingCalculation
		initialize LocalNoUOM

		if (EnteredUOM not entered)
			LocalBypassQuantityConversion = true
			LocalNoUOM			  		  = true

		if (SourcingEventRequired
		and TransactionUnitCost entered)
			initialize Vendor
			initialize PurchaseFromLocation

		if (ItemType.Service and EnteredContractLine entered)
			constraint(Contract entered)
				"ContractMustBeEnteredIf_Contract_LineIsEntered"

	
			if (PurchaseFromLocation not entered)
				LocalBypassVendorLocationValidation = true

			include ValidateContract

			ContractLine = EnteredContractLine

		if (IsInventoryOrNonstock)
			if  (ItemLocationRel.InspectionRequired)
				InspectionRequired = ItemLocationRel.InspectionRequired

			if (Item.CertificationRequired)
				CertificationRequired = Item.CertificationRequired

		include BuildTextIndex

	Create Exit Rules
		log untranslatable:"Company<Company>;Requisition<Requisition>;RequisitionLine<RequisitionLine>;CreateDate<CreationDate>;RequisitionLineSource<this instance(locale of blank).RequisitionSource>;ItemType<this instance(locale of blank).ItemType>;ServiceCode<this instance(locale of blank).ServiceCode>;CostCode<this instance(locale of blank).CostCode>;CreatePurchaseOrder<this instance(locale of blank).CreatePurchaseOrder>."			

	Field Rules
		TransientLineTotalAmount

			force default to ApprovalValue
			constraint (TransientLineTotalAmount < 10000000000000000.00)
				"MaximumLineAmountExceeded"

		DistributionBy
			default to DistributionBy.ByPercent
			initial value is DistributionBy.ByPercent
			if (HasMultipleDistributions)
				cannot be changed
					"CannotChangeDistributionBy,MultipleDistributionsExist" 
			if (DistributionBy changed)
				initialize DistributionTotalsComputed

		ContractLine
			if (ItemType.Service
			and Contract entered
			and not Contract.AllowReferenceOfItemsNotOnContract)
				required
					"ContractLineIsRequiredForServiceItemOnContract"

				constraint (ContractLine.ForServiceCostDefaulting)
					"ContractLineIsNotAServiceItemType" 

				constraint (Item = ContractLine.ItemNumber)
					"Item<Item>DoesNotMatchItemOnContract<Contract>Line<ContractLine>"

				constraint (not ContractLine.ErrorsExist)
					"CannotEnterAServiceLineThatHasErrors"

				constraint (not ContractLine.ContractLineState.Closed)
					"CannotEnterAContractLineThatIsClosed"

				constraint (ContractLine.CanUseForCostDefaulting)
					"MustEnterAContractLineThatCanBeUsedForCostDefaulting"

		EnteredContractLine



			initialize EnteredContractLine

		RequestingLocation
			initial value is Requisition.RequestingLocation
			default to Requisition.RequestingLocation

			if (RequestingLocation.ParOrExchangeLocation)
				if (IsInventoryOrNonstock and RequestingItemLocationRel exists)    
					constraint (RequestingItemLocationRel.IsActive)
						"ItemLocationIsInactive;Location:<RequestingLocation>,Item:<Item>"
				if (RequestingItemLocationRel exists
				and not ParCountProcessing
				and not LocalBypassQuantityConversion
				and DerivedOrderMultiple > 1
				and EnteredUOM = DerivedParItemUOM)
					round Quantity up to nearest DerivedOrderMultiple

			if (Company = FromCompanyLocationBin.FromCompany
			and RequestingLocation = FromCompanyLocationBin.FromLocation)
				constraint (RequestingLocation.InventoryTransactionType.Issue)
					"RequestingLocationAndFromLocationCannotEqualOnTransactionTypeDirectTransferOrIntransitTransfer"

		FromCompanyLocationBin
			if (Requisition.RequestingLocation.InventoryTransactionType.Issue
			and RequestingItemLocationForDefaultingRel exists
			and RequestingItemLocationForDefaultingRel.HasReplenishmentFromCompanyLocation)
				FromCompanyLocationBin.FromCompany 	= RequestingItemLocationForDefaultingRel.first ItemReplenishmentSourcesRel.ReplenishFrom.ReplenishFromCompany
				FromCompanyLocationBin.FromLocation = RequestingItemLocationForDefaultingRel.first ItemReplenishmentSourcesRel.ReplenishFrom.ReplenishFromLocation

			default to Requisition.FromCompanyLocation
				default individual fields

			if (Company != FromCompanyLocationBin.FromCompany)
				constraint (Company.ItemGroup = FromCompanyLocationBin.FromCompany.ItemGroup)
					"BothCompaniesItemGroupsMustMatch"

			if (IsTransactionTypeTransfer
			and Requisition.RequestingLocation = FromCompanyLocationBin.FromLocation
			and Company = FromCompanyLocationBin.FromCompany)
				constraint (RequisitionSource.ReplenishmentByRequisition)
					"ToAndFromLocationCannotBeTheSameOnTansfer"

			if(IsInventoryOrNonstock and ItemLocationRel exists)
				constraint(ItemLocationRel.Active)
					"ItemLocationIsInactive;Location:<FromCompanyLocationBin.FromLocation>,Item:<Item>"

			if (not CreatePurchaseOrder)
				constraint (FromCompanyRel exists)
					"PurchasingCompanyDoesNotExist"
			
			else 
				constraint (FromPayablesCompanyRel exists)
					"PayablesCompanyDoesNotExist"

			constraint (not FromCompanyLocationBin.FromLocation.LocationType.ParLocation)
				"FromLocationIsAParLocation"

		Item
			if (LocationRule entered
			and not LocalIsPartialAllocationForSubstitution
			and not PreferenceCardTransaction)
				if  (Item exists
				and (ItemType not entered
				or  (ParCountProcessing and ItemType.NonStock)))
					if (not RequestingLocation.Stockless)
						if (Quantity not entered)
							default Quantity to 1
						default ItemType to ItemType.NonStock
						LocalItem				= Item
						LocalRemainingQuantity	= DerivedQuantityInStockUOM
						if (AllocatePriorToSubstitution and Item.ItemGroup.AllowSubstitutesOnWarehouseLocationRule)
							include FindAvailableQuantityForOriginalItemUsingLocationRule

						for each WarehouseLocationRuleDetailsRel
							initialize BypassWarehouseLocation
							LocalLocationRuleFromCompanyLocation.FromCompany  = each.LocationCompany
							LocalLocationRuleFromCompanyLocation.FromLocation = each.InventoryLocation
							if (DoDebug)
								display "DoSubstituteItemChecking:<DoSubstituteItemChecking>:LocationRuleFromCompanyLocation:<LocalLocationRuleFromCompanyLocation>"
							if (DoSubstituteItemChecking)     
								if (LocalAvailableQuantity not entered)

									if (DoDebug)
										display "GetSub:LocalSubstituteItem<LocalSubstituteItem>:LocalNonStockSubstitute:<LocalNonStockSubstitute>"
										display "WarehouseLocationInventoriedSub:<WarehouseLocationInventoriedSub>:WarehouseLocationInventoriedSubWithStock:<WarehouseLocationInventoriedSubWithStock>"
									
									if (LocalSubstituteItem not entered
									or (LocalNonStockSubstitute and not WarehouseLocationInventoriedSub) 
									or (not LocalNonStockSubstitute and not WarehouseLocationInventoriedSubWithStock))
										include FindWarehouseLocationSubstitute
										if (DoDebug)
											display "1:LocalSubstituteItem:<LocalSubstituteItem>"
										if (LocalSpecialItemUsed) 
											end for each

								if (LocalSubstituteItem entered
								and (SubstituteItemForWHCompanyAndLocationRel not exists
								and SubstituteItemForWHCompanyRel not exists
								and SubstituteItemForGlobalRel not exists))

									BypassWarehouseLocation = true
									if (DoDebug)
										display "BypassWarehouseLocation2"

							if (DoDebug)
								display "CheckStocksItemLoc"

							if (WarehouseLocationRuleItemLocationForAnItemRel exists
							and WarehouseLocationRuleItemLocationForAnItemRel.InventoryTracked
							and WarehouseLocationRuleItemLocationForAnItemRel.Active
							and not BypassWarehouseLocation)
								if (not IsReplenishmentFromVendor)
									initialize LocalNonStockSubstitute
									ItemType = ItemType.Inventoried
								if (WarehouseLocationRuleItemLocationForAnItemRel.AvailableQuantity >= LocalRemainingQuantity)
									LocalAvailableQuantity = WarehouseLocationRuleItemLocationForAnItemRel.AvailableQuantity
									LocalFromCompanyLocationFromRule.FromCompany = LocalLocationRuleFromCompanyLocation.FromCompany
									LocalFromCompanyLocationFromRule.FromLocation= LocalLocationRuleFromCompanyLocation.FromLocation
									if (DoDebug)
										display "EnoughStocks"
										display "LocalAvailableQuantity:<LocalAvailableQuantity>:LocalFromCompanyLocationFromRule:<LocalFromCompanyLocationFromRule>"

									end for each
								else
								if (WarehouseLocationRuleItemLocationForAnItemRel.AvailableQuantity > LocalAvailableQuantity
								or  LocalFromCompanyLocationFromRule not entered)
									LocalAvailableQuantity = WarehouseLocationRuleItemLocationForAnItemRel.AvailableQuantity
									LocalFromCompanyLocationFromRule.FromCompany = LocalLocationRuleFromCompanyLocation.FromCompany
									LocalFromCompanyLocationFromRule.FromLocation= LocalLocationRuleFromCompanyLocation.FromLocation
									if (DoDebug)
										display "NotEnoughStocks"
										display "LocalAvailableQuantity:<LocalAvailableQuantity>:LocalFromCompanyLocationFromRule:<LocalFromCompanyLocationFromRule>"

						
						if (DoDebug)
							display "DoneWHRLLoop:LocalSubstituteItem:<LocalSubstituteItem>"

						if (LocalSubstituteItem not entered)

							if (ItemType.Inventoried)
								FromCompanyLocationBin.FromCompany  = LocalFromCompanyLocationFromRule.FromCompany
								FromCompanyLocationBin.FromLocation = LocalFromCompanyLocationFromRule.FromLocation
						else

							if (not LocalSpecialItemUsed) 
								if (LocalAvailableQuantity not entered)

									for each WarehouseLocationRuleDetailsRel
										LocalLocationRuleFromCompanyLocation.FromCompany  = each.LocationCompany
										LocalLocationRuleFromCompanyLocation.FromLocation = each.InventoryLocation
										for each SpecialItemSubstituteWithLocationRel
											include CheckSpecialSubstituteForWarehouseLocation

										if (not LocalSpecialItemUsed) 
											for each WarehouseLocationSubstituteCompanyOnlyRel
												if (each.ContractLineForSubstitution)
													include CheckSpecialSubstituteForWarehouseLocation

										if (not LocalSpecialItemUsed) 
											for each SubstituteItemByPriorityNoLocationRel
												if (each.ContractLineForSubstitution)
													include CheckSpecialSubstituteForWarehouseLocation

										if (LocalSpecialItemUsed)
											end for each
							if (not AllocatePriorToSubstitution)

								include UseSubstituteItemWithLocationRule
							else
							if (not LocalOriginalCanFulfillQuantity)

								if (LocalAvailableQuantityForOriginal <= 0 or LocalSpecialItemUsed)

									include UseSubstituteItemWithLocationRule
									if (LocalSpecialItemUsed)
										LocalCreateActionCompletionMessageDetail	= SkippingAllocationOfOriginalForSpecialSubstituteMessage
								else

									LocalDoPartialAllocationForSubstitution	= true
									FromCompanyLocationBin.FromCompany	= LocalOriginalItemFromCompanyLocationFromRule.FromCompany
									FromCompanyLocationBin.FromLocation	= LocalOriginalItemFromCompanyLocationFromRule.FromLocation

									if (IsCatchWeightItem)
										LocalRemainingQuantity	= Quantity - LocalAvailableQuantityForOriginal
										Quantity				= LocalAvailableQuantityForOriginal
									else
										LocalRemainingQuantity	= DerivedQuantityInStockUOM - LocalAvailableQuantityForOriginal
										initialize UOMCalculation
										UOMCalculation.InputUOM			= Item.StockUOM
										UOMCalculation.InputToUOM		= EnteredUOM
										UOMCalculation.InputQuantity	= LocalAvailableQuantityForOriginal
										UOMCalculation.Method			= UOMCalculation.Method.ConvertToAlternate
										if (EnteredUOM = Item.StockUOM
										or UOMCalculation.OutputQuantity decimals > 0)
											EnteredUOM	= Item.StockUOM
											Quantity	= LocalAvailableQuantityForOriginal
										else
											Quantity	= UOMCalculation.OutputQuantity
							else

								FromCompanyLocationBin.FromCompany	= LocalOriginalItemFromCompanyLocationFromRule.FromCompany
								FromCompanyLocationBin.FromLocation	= LocalOriginalItemFromCompanyLocationFromRule.FromLocation

			default ItemType to DerivedDefaultItemType
			required


			if (LocationRule not entered
			and not PreferenceCardTransaction)

				if (IsInventoryOrNonstock)

					if (OriginalItem not entered
					and not LocalIsPartialAllocationForSubstitution
					and	(TransientItemSubstitute
					or	(Item.ItemGroup.AutomaticItemSubstitute and action type.Create
					and	not BypassSubstitution)))
						if (SubstituteItemsWithLocationAndPriorityRel exists) 
							for each SubstituteItemsWithLocationAndPriorityRel
								include FindSubstituteNoLocationRule

						if (LocalSubstituteItem not entered
						and	SubstituteItemByPriorityWithCompanyOnlyRel exists) 
							for each SubstituteItemByPriorityWithCompanyOnlyRel
								include FindSubstituteNoLocationRule
						
						if (LocalSubstituteItem not entered 
						and SubstituteItemByPriorityNoLocationRel exists) 
							for each SubstituteItemByPriorityNoLocationRel
								include FindSubstituteNoLocationRule

						if (LocalSubstituteItem entered)
							if (not AllocatePriorToSubstitution)

								include UseSubstituteItemNoLocationRule
							else
							if(DerivedQuantityInStockUOM > ItemLocationRel.AvailableQuantity)

								if (ItemLocationRel.AvailableQuantity <= 0 or LocalSpecialItemUsed)

									include UseSubstituteItemNoLocationRule
									if (LocalSpecialItemUsed)
										LocalCreateActionCompletionMessageDetail	= SkippingAllocationOfOriginalForSpecialSubstituteMessage
								else

									LocalDoPartialAllocationForSubstitution	= true
									if (IsCatchWeightItem)
										LocalRemainingQuantity	= Quantity - ItemLocationRel.AvailableQuantity
										Quantity				= ItemLocationRel.AvailableQuantity
									else
										LocalRemainingQuantity	= DerivedQuantityInStockUOM - ItemLocationRel.AvailableQuantity
										if (EnteredUOM = Item.StockUOM
										or DerivedAvailableQuantityInTransactionUOM decimals > 0)
											EnteredUOM	= Item.StockUOM
											Quantity	= ItemLocationRel.AvailableQuantity
										else
											Quantity	= DerivedAvailableQuantityInTransactionUOM


					if  (ItemType.Inventoried
					and  not CreatePurchaseOrder
					and  not IsIntraLocation
					and  not LocalPartialAllocation
					and  DerivedLineQuantity > DerivedAvailableQuantityInTransactionUOM)
						if (Item.HasReplacementItem and ValidReplacementItem)
							constraint (Item.ReplacementItem.Active)
								"ReplacementItemIsInactive<Item.ReplacementItem>"
							if (ReplacementItemLocationRel exists)
								constraint (ReplacementItemLocationRel.Active)
									"ReplacementItemLocationIsInactive:Company<FromCompanyLocationBin.FromCompany>,Location<FromCompanyLocationBin.FromLocation>,ReplacementItem<Item.ReplacementItem>"

							if (not Requisition.FromCompanyLocation.FromCompany.AllocatePartials
							or  ItemLocationRel.AvailableQuantity <= 0)
								if (ReplacementItemLocationRel.OverheadUnitCost entered)
									LocalInventoryCost				= ReplacementItemLocationRel.OverheadUnitCost
								OriginalItem					= Item
								Item							= Item.ReplacementItem
								if (IsCatchWeightItem)
									EnteredUOM					= Item.SecondaryUOM
								else
									if (EnteredUOM entered)
										if (CreatePurchaseOrder)





											if (HasItemLocationStockUOM)
												if (not LocationItemUOMRel.OKForBuying)
													initialize EnteredUOM
											else
												if (not ItemUOMRel.OKForBuying)
													initialize EnteredUOM
										else
											if (HasItemLocationStockUOM)
												if (not LocationItemUOMRel.OKForTransaction)
													initialize EnteredUOM
											else
												if (not ItemUOMRel.OKForTransaction)
													initialize EnteredUOM
								initialize ItemType

							else

								initialize LocalPartialQuantity
								if (IsCatchWeightItem)
									LocalPartialQuantity			= Quantity - ItemLocationRel.AvailableQuantity
									Quantity 						= ItemLocationRel.AvailableQuantity
								else
									LocalPartialQuantity			= DerivedLineQuantityInStockUOM - ItemLocationRel.AvailableQuantity

									if (EnteredUOM = Item.StockUOM
									or  Quantity % DerivedAvailableQuantityInTransactionUOM != 0)
										EnteredUOM					= Item.StockUOM
										Quantity 					= ItemLocationRel.AvailableQuantity
									else
										Quantity					= DerivedAvailableQuantityInTransactionUOM

			if (IsKitItemFromLocation)
				constraint (KitItemFromLocationRel.Active)
					"KitItem<Item>MustBeActive"








			if (IsInventoryOrNonstock)
				constraint (!RecallProductItemForItemHardErrorExists)
					"CannotAddItem;Item<Item>IsOnActiveRecallNotice<first RecallProductItemForItemHardErrorRel.RecallNotice>"
				if (RecallProductItemForItemWarningExists)
					confirmation required
						"Item<Item>IsOnActiveRecallNotice<first RecallProductItemForItemWarningRel.RecallNotice>;DoYouWantToContinue?"
				constraint (ItemExists)
					"ItemDoesNotExist<Item>"
				constraint (Item.Active)
					"ItemIsInactive<Item>"
				if (ItemLocationRel exists)
					if (action type.Create
					and IsInventoryType)
						constraint (ItemLocationRel.AllowIssue)
							"IssuesNotAllowedAtItemLocationForItem<Item>"	
					constraint (ItemLocationRel.ItemLocation.Active)
						"ItemLocationIsInactive:Company<FromCompanyLocationBin.FromCompany>,Location<FromCompanyLocationBin.FromLocation>,Item<Item>"

		Description 
			initial value is Item.Description
			if (IsInventoryOrNonstock
			and not CostCode.Punchout)
				force default to Item.Description
			else
			if (ContractLine entered)
				default to ContractLine.ItemDescription

			required
				"DescriptionIsRequiredForItem<Item>"

		HSNSACCode
			if (IsHSNSACCodeEnabled)
				if (ContractLine entered)
					default to ContractLine.HSNSACCode
				if (IsInventoryOrNonstock)
					default to Item.HSNSACCode
			else
				cannot be entered
					"CannotEnter,HSN_/SACCodeFlagIsNotSetAtGlobalLedgerCompany"
			if (IsReleasedStatus)
				cannot be changed
					"RequisitionIsReleased;CannotChangeHSN_/SACCode"
		EnteredUOM





			if (LocalIsPartialAllocationForSubstitution and EnteredUOM entered)
				if (CreatePurchaseOrder
				or  ItemType.NonStock)
					if (HasItemLocationStockUOM)
						if (not LocationItemUOMRel.OKForBuying)
							initialize
					else
						if (not ItemUOMRel.OKForBuying)
							initialize
				else
					if (HasItemLocationStockUOM)
						if (not LocationItemUOMRel.OKForTransaction)
							initialize
					else
						if (not ItemUOMRel.OKForTransaction)
							initialize

			if (Company.RequireUnitOfMeasure)
				if (IsNotTransientBypassUnitCost)
					required
						"CompanyRequiresUnitOfMeasureToBeEntered"
			else 
				if (IsInventoryOrNonstock)
					if (IsCatchWeightItem)
						default to Item.SecondaryUOM
					else
					if (CreatePurchaseOrder)
						default to VendorItem.VendorBuyUOM.UnitOfMeasure
						if (RequestingLocation.ParOrExchangeLocation and RequestingItemLocationRel exists
						and RequestingItemLocationRel.DefaultTransactionUOM.UnitOfMeasure.ValidBuyUnitOfMeasure)

							default to RequestingItemLocationRel.DefaultTransactionUOM.UnitOfMeasure
						default to ItemGTIN.UnitOfMeasure.UnitOfMeasure
						default to ItemLocationRel.DefaultSourceUOM.UnitOfMeasure
						default to LocationItemUOMDefaultBuyingRel.UnitOfMeasure
						default to Item.DefaultBuyUOM
					else
						if (RequestingLocation.ParOrExchangeLocation and RequestingItemLocationRel exists)
							default to RequestingItemLocationRel.DefaultTransactionUOM.UnitOfMeasure
						default to ItemGTIN.UnitOfMeasure.UnitOfMeasure
						default to ItemLocationRel.DefaultTransactionUOM.UnitOfMeasure
						default to LocationItemUOMDefaultTransactionRel.UnitOfMeasure
						default to Item.DefaultTransactionUOM
					default to Item.StockUOM
			if (IsNotTransientBypassUnitCost)
				if  (not ItemType.Service
				or   ContractLine not entered)
					required
						"UOMIsRequiredForItem<Item>"


			if (IsInventoryOrNonstock)
				constraint (ItemUOMRel exists)
					"<EnteredUOM>IsAnInvalidUnitOfMeasureForItem<Item>"

				if (IsCatchWeightItem)
					constraint (EnteredUOM = Item.SecondaryUOM)
						"MustUseTheItemSecondary_U\O\MForCatchWeightItems"

				if (CreatePurchaseOrder)
					if (HasItemLocationStockUOM)
						if (not LocationItemUOMRel.OKForBuying)


							constraint ((ParCountProcessing 	and DerivedOrderUOMRounding) 
									or  (not ParCountProcessing and LocalNoUOM))
								"<EnteredUOM>IsNotAValidBuyingUnitOfMeasureOnLocation<FromCompanyLocationBin.FromLocation>ForItem<Item>"

							if (not ParCountProcessing
							and LocalNoUOM	
							and not LocationItemUOMRel.OKForBuying)
								EnteredUOM = LocationItemUOMDefaultBuyingRel.UnitOfMeasure

						if (VendorItemExists
						and VendorItem.VendorBuyUOM.UnitOfMeasure entered)
							if (LocationItemUOMRel.OKForBuying)
								constraint (VendorItem.VendorBuyUOM.UnitOfMeasure = EnteredUOM)
									"VendorItemBuyUnitOfMeasureOf<VendorItem.VendorBuyUOM.UnitOfMeasure>DoesNotMatchEnteredUnitOfMeasureOf<EnteredUOM>"
							else
								constraint (VendorItem.VendorBuyUOM.UnitOfMeasure = DerivedDefaultBuyLocationItemUOM)
									"VendorItemBuyUnitOfMeasureOf<VendorItem.VendorBuyUOM.UnitOfMeasure>DoesNotMatchNewEnteredUnitOfMeasureOf<DerivedDefaultBuyLocationItemUOM>"
					else
						constraint (ItemUOMRel.OKForBuying)
							"<EnteredUOM>IsNotValidBuyingUnitOfMeasureForThisItem<Item>"
						if (VendorItemExists
						and VendorItem.VendorBuyUOM.UnitOfMeasure entered)
							constraint (VendorItem.VendorBuyUOM.UnitOfMeasure = EnteredUOM)
								"VendorItemBuyUnitOfMeasureOf<VendorItem.VendorBuyUOM.UnitOfMeasure>DoesNotMatchEnteredUnitOfMeasureOf<EnteredUOM>"

					if (LocalCreatedFromParCounting)
						include VendorUOMAndSourceUOMValidation
				else
					if (IsTransactionTypeTransfer)

						if (HasItemLocationStockUOM)

							if (LocationItemUOMRel not exist
							or	not LocationItemUOMRel.OKForTransaction)

								if (HasRequestingLocationStockUOM) 

									LocalUnitOfMeasure = ItemLocationRel.ItemLocationStockUOM

									if (RequestingLocationItemUOMRel.OKForTransaction
									and DerivedOrderUOMRounding)

										initialize UOMCalculation
										UOMCalculation.InputUOM			= EnteredUOM
										UOMCalculation.InputToUOM		= DerivedRoundToUOM 
										UOMCalculation.InputQuantity	= Quantity
										UOMCalculation.Method			= UOMCalculation.Method.ConvertToAlternate
										UOMCalculation.DoRounding 	 	= true
										UOMCalculation.InputRoundType	= UOMCalculation.InputRoundType.High			



										Quantity 				 		= UOMCalculation.OutputQuantity
										EnteredUOM 						= DerivedRoundToUOM


										LocationStockUOMRounded = true	
									else
										constraint (LocationItemUOMRel.OKForTransaction)
											"<EnteredUOM>IsNotAValidTransactionUnitOfMeasureOnLocation<FromCompanyLocationBin.FromLocation>ForItem<Item>"								
						else
							constraint (ItemUOMRel.OKForTransaction)
								"<EnteredUOM>IsNotValidTransactionUnitOfMeasureForThisItem<Item>"


						if (HasRequestingLocationStockUOM)
							LocalUnitOfMeasure = EnteredUOM
							constraint (RequestingLocationItemUOMRel.OKForTransaction)
								"<EnteredUOM>IsNotValidTransactionUnitOfMeasureOnLocation<RequestingLocation>ForItem<Item>"
						else
							constraint (ItemUOMRel.OKForTransaction)
								"<EnteredUOM>IsNotValidTransactionUnitOfMeasureForThisItem<Item>"

					else
					if (HasItemLocationStockUOM)
						if (not LocationItemUOMRel.OKForTransaction)


							constraint ((ParCountProcessing 	and DerivedOrderUOMRounding) 
									or  (not ParCountProcessing and LocalNoUOM))
								"<EnteredUOM>IsNotAValidTransactionUnitOfMeasureOnLocation<FromCompanyLocationBin.FromLocation>ForItem<Item>"
							if (ParCountProcessing)
								initialize UOMCalculation
								UOMCalculation.InputUOM			= EnteredUOM
								UOMCalculation.InputToUOM		= DerivedRoundToUOM
								UOMCalculation.InputQuantity	= Quantity
								UOMCalculation.Method			= UOMCalculation.Method.ConvertToAlternate
								UOMCalculation.DoRounding 	 	= true
								Quantity 				 		= UOMCalculation.OutputQuantity
							EnteredUOM 							= DerivedRoundToUOM

					else
						constraint (ItemUOMRel.OKForTransaction)
							"<EnteredUOM>IsNotValidTransactionUnitOfMeasureForThisItem<Item>"

				if (not FromParCounting)
					include ConvertUOM
				if (CreatePurchaseOrder
				and EnteredUOM changed
				and not ItemGTIN changed)
					initialize ItemGTIN

		EnteredUOMMultiplier
			if (IsSpecialOrService)
				default to 1
			else
				if (Status.Unreleased)
					if (not PreferenceCardTransaction)
						if (ItemUOMRel exists)
							force default to ItemUOMRel.UOMConversion
						else
							force default to 1

		Quantity
			if (not ServiceCode.Quantity)
				default to 1
			if (IsNotTransientBypassUnitCost)
				if (ServiceCode.Amount)
					constraint(Quantity = 1)
						"ServiceItemByAmount,QuantityMustBe1ForItem<Item>"
				required
					"QuantityIsRequiredForItem<Item>"

			if (ValidateQuantityAgainstMaximumOnLocation)
				if (OtherInventoriedRequisitionLinesForItemLocationRel exists)
					constraint (TotalQuantityForItemIsWithinMaximum)
						"MultipleRequisitionLinesExistForItem<Item>;ThisLineExceedsTheMaximumRequisitionQuantityOf<ItemLocationRel.MaximumRequisitionQuantity>_<Item.StockUOM>"
				else
					constraint (QuantityOnLineIsWithinMaximum)
						"MaximumRequisitionQuantityOf<ItemLocationRel.MaximumRequisitionQuantity>_<Item.StockUOM>ExceededForItem<Item>"
							
		ConversionRate
			SavedFinanceEnterpriseGroup			= Requisition.Company.ItemGroup.BusinessGroup.FinanceEnterpriseGroup
			SavedExchangeDate					= current corporate date
			if (IsInventory and not CreatePurchaseOrder)												
				SavedFromCurrency					= Requisition.BaseCurrencyCode
			else
				SavedFromCurrency					= TransactionCurrencyCode
			SavedCurrencyTable                  = Requisition.CurrencyTable
			SavedToCurrency						= Requisition.BaseCurrencyCode
			SavedTransactionAmount				= TransactionUnitCost

			default to LocalCurrencyExchange.OutputCurrencyRate

		ItemType
			default to DerivedDefaultItemType

			if (RequestingLocation.Stockless and IsInventoryOrNonstock
			and FromCompanyRel.CostOrVendorItemDefaultingOrder.CostBeforeVendorItem)
				ProcurementCostDefault.InCompany				= FromCompanyLocationBin.FromCompany 
				ProcurementCostDefault.InRequestingCompany		= Requisition.Company 
				ProcurementCostDefault.InLocation				= FromCompanyLocationBin.FromLocation
				ProcurementCostDefault.InRequestingLocation		= RequestingLocation

				ProcurementCostDefault.InVendor					= Vendor
				ProcurementCostDefault.InPurchaseFromLocation	= PurchaseFromLocation
				ProcurementCostDefault.InStockless				= true
				ProcurementCostDefault.InItem					= Item
				ProcurementCostDefault.InItemType				= ItemType
				ProcurementCostDefault.InDate					= current corporate date
				ProcurementCostDefault.InProcurementGroup		= FromCompanyRel.ProcurementGroup
				ProcurementCostDefault.InDoDebug				= false

				if (DoDebug)
					display "RQL:CallProcurementCostDefault.DoStocklessContracts"

				Execute = ProcurementCostDefault.DoStocklessContracts
				
				if (ProcurementCostDefault.LocalFoundCost)
					Contract = ProcurementCostDefault.OutputContract
					ItemType = ItemType.NonStock
					Vendor   = ProcurementCostDefault.OutputVendor
					if (ProcurementCostDefault.OutputPurchaseFromLocation not entered)
						LocalBlankVendorLocation = true
					else
						PurchaseFromLocation = ProcurementCostDefault.OutputPurchaseFromLocation

				initialize ProcurementCostDefault

			if (ItemType entered
			and ItemType changed)
				if (old ItemType.Inventoried and ItemType.NonStock
				or (old ItemType.NonStock    and ItemType.Inventoried))
					cannot be changed
						"CannotChangeItemType"

				if (Contract not changed)
					initialize Contract
					initialize ContractLine
					initialize Tier
					initialize Preferred

			if (IsInventory)





				constraint (not CreatePurchaseOrder
				or 			not Requisition.Dropship)
					"CreatePurchaseOrderAndDropshipReceiveNotAllowedWithInventoriedTypeItems"

				if (IsTransactionTypeTransfer)
					constraint (RequestingItemLocationRel exists)
						"Item<Item>DoesNotExistAtThisLocation<RequestingLocation>"
					constraint (RequestingItemLocationRel.InventoryTracked)
						"Item<Item>NotInventoryTracked"
					if (InventoryLocationLotTrackingMustMatch)
						constraint (ItemLocationRel.LotTracked = RequestingItemLocationRel.LotTracked)
							"LotTrackingFlagsAtToAndFromLocationsDoNotMatch"
					constraint (ItemLocationRel.SerialTracked = RequestingItemLocationRel.SerialTracked)
						"SerialTrackingFlagsAtToAndFromLocationsDoNotMatch"

				if  (RequestingLocation.ParOrExchangeLocation
				and  ItemLocationRel not exists)
					constraint (RequestingItemLocationRel.RecordExists)
					   	"Item<Item>DoesNotExistAtThisLocation<RequestingLocation>"
				else
					constraint (ItemLocationRel exists)
						"Item<Item>DoesNotExistAtThisLocation<FromCompanyLocationBin.FromLocation>"
					constraint (ItemLocationRel.InventoryTracked)
						"Item<Item>NotInventoryTracked"

		CreatePurchaseOrder
			if (not IsInventory
			or  IsIntraLocation)
				CreatePurchaseOrder = true

			if  (CreatePurchaseOrder changed)
				initialize CostOption

				if (ItemType.Inventoried	
				and !CreatePurchaseOrder)	
					initialize Contract		
					initialize ContractLine
					initialize Preferred
					initialize Tier
					initialize Vendor
					initialize VendorItem
					initialize PurchaseFromLocation
					initialize CostCode

			if (not CreatePurchaseOrder)
				constraint (IsInventory)
					"MustCreatePurchaseOrderForNon-stockItems"

			if (Requisition.Dropship
			and CreatePurchaseOrder)
				constraint (NonInventoryItem)
					"CreatePurchaseOrderAndDropshipReceiveNotAllowedWithInventoriedTypeItems"

			if (IsInventoryOrNonstock and CreatePurchaseOrder)
				constraint (not Item.Discontinued)
					"CannotCreatePOForDiscontinuedItem<Item>ForLine<RequisitionLine>"
				if (ItemLocationRel exists)
					constraint (not ItemLocationRel.ItemLocation.Discontinued)
						"CannotCreatePOForDiscontinuedItem<Item>InItemLocation<FromCompanyLocationBin.FromLocation>ForLine<RequisitionLine>"


		POCode
			if (TransientRSSLPLRequisitionLineScreen entered
			and RequesterRel.RequirePOCode)
				required
					"Field_P\O_CodeIsRequired"

			default to Requisition.POCode
			initial value is Requisition.POCode
			if (PurchasingCompanyRel.ManualPOCodeAllowed.No	
			or PurchasingCompanyRel.ManualPOCodeAllowed.PurchaseOrdersOnly)
				cannot be entered
					"ManualEntryOfP\OCodeNotAllowed"

		ServiceCode
			if (ItemType.Service)
				if (ContractLine not entered)
					required
						"ServiceCodeIsRequiredForServiceItems"
			else
				initialize ServiceCode

		ProductTaxCategory
			if (IsInventoryOrNonstock)
				default to Item.ProductTaxCategory

		PurchaseTaxable
			if (action type.Create
			and not LocalCopyRequisition
			and not TransientPurchaseTaxable.TaxExempt)
				PurchaseTaxable = TransientPurchaseTaxable

			if (CostOption.NoCharge)
				cannot be entered
					"NoChargeItem<Item>CannotBeTaxable"
			else
				if (action type.Create
				and not LocalCopyRequisition
				and not TransientPurchaseTaxable.TaxExempt)
					if (PurchaseTaxable and CreatePurchaseOrder)
						constraint (DerivedTaxCode entered)
							"TaxCodeIsRequiredForItem<Item>"

					if (IsInventoryOrNonstock and not ItemLocationRel.PurchaseTaxable.DefaultToNextLevel)
						if (ItemLocationRel.PurchaseTaxable.Yes)
							default to true
					else
					if (IsInventoryOrNonstock and not Item.PurchaseTaxable.DefaultToNextLevel)
						if (Item.PurchaseTaxable.Yes)
							default to true
					else
						default to Requisition.PurchaseTaxable

					initialize TransientPurchaseTaxable

			if (PurchaseTaxable)
	   			constraint (TaxableLineAllowancesWithDifferentTaxRel not exist)
	   				"MustUseSameTaxCodeAsRequisitionLineAllowanceAddOnCharge"
	   		else
	   			constraint (LineAllowancesWithTaxRel not exists)
	   				"CannotHaveTaxOnAllowanceAddOnChargeIfLineDoesNotHaveTax"


		PurchaseTaxCode
			if (PurchaseTaxable)
				default to DerivedTaxCode
				if (action type.Update and CreatePurchaseOrder)
					required

			constraint (PurchaseTaxable)
				"TaxCodeCannotBeEnteredWhenItem<Item>IsNotTaxable"

			if (not TaxEntityUsesSabrix 
			and not TaxEntityRel.ThirdParty.VertexOSeries)
				initialize CalculateTax
				CalculateTax.TaxEntity                      = FromCompanyLocationBin.FromCompany.AccountingEntity	
				CalculateTax.TaxCode                        = PurchaseTaxCode
				CalculateTax.ProductTaxCategory				= ProductTaxCategory
				CalculateTax.Function                       = CalculateTax.Function.Inquire
				TaxOut                                      = CalculateTax.ExecuteCalculateTax
				constraint (CalculateTax.OutputErrorNumber not entered)
					"<CalculateTax.OutputErrorMessage>"

			if (TaxEntityRel.ThirdParty.VertexOSeries
			and Requisition.DropshipAddress not entered
			and PurchaseTaxCode = "00")
				constraint (RequestingLocation.PostalAddress entered)
					"AddressRequiredOnRequestingLocationToCalculateTax"

		MajorPurchasingClass
			if (TransientRSSLPLRequisitionLineScreen entered
			and RSSLPLMajorPurchasingClassRequired
			and TransientIgnoreRSSLPLRequisitionLineScreen not entered)
				required
					"Field_Major_Purchasing_ClassIsRequired"
			
			if (IsInventoryOrNonstock)
				if (action type.Create)
					default to Item.MajorPurchasingClass

				if (Requisition.Requester.RequesterPurchasingClassExists)
					if (Requisition.Requester.PurchasingClassValidationAllowed)
						required
							"PurchaseClassesAreRequiredForRequester<Requisition.Requester>"

						constraint (RequesterPurchasingClassMajorOnlyRel exists)
							"MajorPurchaseClassMustMatchOneSpecifiedForRequester<Requisition.Requester>"
					else
						constraint (not RequesterPurchasingClassBlankMinorRel exists)
							"MajorPurchaseClassMustNotMatchOneSpecifiedForRequester<Requisition.Requester>"

				constraint (Item.MajorPurchasingClass entered
				or  		MajorPurchasingClass not entered)
					"MajorClassMustBeBlank.ItemMajorClassIsBlank"

				constraint (MajorPurchasingClass = Item.MajorPurchasingClass)
					"PurchaseClassMustMatchItem'sPurchaseClassOf<Item.MajorPurchasingClass>"

			else
				default to ContractLine.MajorPurchasingClass


		MinorPurchasingClass
			if (TransientRSSLPLRequisitionLineScreen entered
			and MinorPurchasingClassRequired
			and TransientIgnoreRSSLPLRequisitionLineScreen not entered)
				required
					"Field_Minor_Purchasing_ClassIsRequired"
			
			constraint (MajorPurchasingClass entered)	
				"CannotEnterAMinorClassWithoutAMajorClass"
			if (IsInventoryOrNonstock)
				if (action type.Create)
					default to Item.MinorPurchasingClass

				if (Requisition.Requester.RequesterPurchasingClassExists)
					if (Requisition.Requester.PurchasingClassValidationAllowed)
						constraint (RequesterPurchasingClassRel exists)
							"MinorPurchaseClassMustMatchOneSpecifiedForRequester<Requisition.Requester>"
					else
						constraint (not RequesterPurchasingClassRel exists)
							"MinorPurchasingClassMustNotMatchOneSpecifiedForRequester<Requisition.Requester>"

				constraint (Item.MinorPurchasingClass entered
				or  		MinorPurchasingClass not entered)
					"MinorClassMustBeBlank.ItemMinorClassIsBlank"
				constraint (MinorPurchasingClass = Item.MinorPurchasingClass)
					"PurchaseClassMustMatchItem'sPurchaseClassOf<Item.MinorPurchasingClass>"

			else
				default to ContractLine.MinorPurchasingClass

		SourcingEventRequired
			if (SourcingEventRequired)
				constraint (Requisition.SourcingCompanyRel exists)
					"StrategicSourcingNotUsed;CannotSetSourcingEventRequired"
				constraint (not RequestingLocation.ParOrExchangeLocation)
					"ParLocation;CannotSetSourcingEventRequired"
				constraint (CreatePurchaseOrder)
					"Create\Purchase\OrderNotSet;CannotSetSourcingEventRequired"
				constraint (not CostCode.Punchout)
					"Punchout\Item;CannotSetSourcingEventRequired"
				if (Contract entered)
					constraint (LocalContractWouldDefault)
						"SourcingEventRequired;CannotEnterContract"
				if (CostCode.Entered)
					initialize Vendor
					initialize PurchaseFromLocation

		ItemEntryMethod
			initial value is DerivedItemEntryMethod
			default to DerivedItemEntryMethod

		InventoryTransactionType
			initial value is RequestingLocation.InventoryTransactionType
			force default to RequestingLocation.InventoryTransactionType

		FillOrKill
			if (IsInventoryOrNonstock
			and	Item.Recipe)
				force default to FillOrKill.FillBackorders
				
			if (CreatePurchaseOrder)
				force default to FillOrKill.FillBackorders
			else
				if (not RequestingLocation.IsActive)
					default to FillOrKill.KillBackorders
				else
					default to RequestingLocation.FillOrKill

		GlobalLineType
			if (ItemLocationRel exists and ItemLocationRel.GlobalLineType entered)
				default to ItemLocationRel.GlobalLineType

			constraint (GlobalLineType.Active)
				"GlobalLineType<GlobalLineType>IsInactive"

		EnteredItem
			if (ItemEntryMethod entered and not ItemEntryMethod.Item)
				Item = EnteredItem
				initialize EnteredItem

		DistributionCode
			LocalDistributionCode = DistributionCode
			if (PayablesDistributionCodeRel exists)
				constraint (PayablesDistributionCodeRel.AccountEdit.Contracts or PayablesDistributionCodeRel.AccountEdit.CodeAndInvoiceEntry)
					"MustUseDistributionCodeHavingAccountEditFlagSetToCodeAndInvoiceEntryOrContracts"
			for each PayablesDistributionCodeDetailsRel
				constraint (each.DistributionAmount >= 0)
					"CannotUseDistributionCodeHavingNegativeAmounts"
				if (each.DistributionAmount > 0)
					constraint (Company.Currency = TransactionCurrencyCode)
						"RequisitionMustBeInBaseCurrencyWhenDistributionsAreByAmount"
			if (Contract entered)
				constraint (!Contract.UseCommitments)
					"DistributionCodeNotAllowedForCommittedContract"

			if (DistributionCode changed)
				if (old DistributionCode not entered)
					constraint (not DistributionAccountExists)
						"CannotAddBothDistributionCodeAndLineDistribution"
				else

					LocalDistributionCode = old DistributionCode
					for each PayablesDistributionCodeDetailsRel
						LocalDistributionCodeAccount           = each.DistributionAccount
						LocalDistributionCodeAsset             = each.Asset
						LocalDistributionCodeAssetTemplate     = each.AssetTemplate
						LocalDistributionCodePercent           = each.DistributionPercent
						LocalDistributionCodeAmount            = each.DistributionAmount
						invoke Delete RequisitionLineDistributionFromDistributionCodeRel


				include CheckDistributionByFromDistributionCode

				LocalDistributionCode = DistributionCode
				for each PayablesDistributionCodeDetailsRel
					invoke Create RequisitionLineDistribution
						fill in fields from this instance
						invoked.DistributionAccount            = each.DistributionAccount
						invoked.AssetInformation.Asset         = each.Asset
						invoked.AssetInformation.AssetTemplate = each.AssetTemplate
						invoked.DistributionPercent            = each.DistributionPercent
						invoked.DistributionAmount             = each.DistributionAmount

		Vendor
			if (TransientRSSLPLRequisitionLineScreen entered
			and RSSLPLRequireVendor
			and TransientIgnoreRSSLPLRequisitionLineScreen not entered)
				required
					"Field_VendorIsRequired"
			

			if (Vendor changed)
				if (Vendor not entered)
					initialize PurchaseFromLocation
				initialize TransactionCurrencyCode
				initialize VendorItem

			constraint (Vendor.IsPoAddActive)
				"A\PVendor<Vendor>IsInactiveForAddingPurchaseOrders"

			if (PunchoutId entered
			and not Requisition.BuyingOrganizationRel.AllowMultiplePunchoutVendors)
				constraint (OtherPunchoutLinesWithDifferentVendorRel not exists)
					"EachPunchoutVendorMustBeOnASeparateRequisition"
			
			if (FromCompanyRel.CostOrVendorDefaultingOrder.VendorFirstThenCost
			or  CostCode.Punchout
			or	RequestingLocation.ParOrExchangeLocation)
				include VendorDefaulting

		TransactionCurrencyCode
			include CurrencyCodeDefaulting	

			if (IsInventory and not CreatePurchaseOrder)
				force default to Requisition.BaseCurrencyCode		

		PurchaseFromLocation

			constraint (VendorLocationExists)
				"Vendor<Vendor>Location<PurchaseFromLocation>IsInvalid"
			constraint (VendorLocationRel.IsActive)
				"Vendor<Vendor>Location<PurchaseFromLocation>IsInactive"
			constraint (VendorLocationRel.IsPoAddActive)
				"Vendor<Vendor>Location<PurchaseFromLocation>IsInactiveForAddingPurchaseOrders"
			constraint (not VendorLocationRel.LocationType.RemitTo)
				"Vendor<Vendor>_\Location<PurchaseFromLocation>CannotBeA_\Remit_\ToOnly_\Vendor_\Location"

			if (Contract entered)
				if (ItemType.Service and EnteredContractLine entered)
					include ValidateContract

				if (Contract.ApPoPurchaseFrom entered)
					constraint (PurchaseFromLocationMatchesContract)
						"PurchaseFromLocationDoesNotMatchVendorLocation<Contract.ApPoPurchaseFrom.PurchaseFromLocation><Contract.ApPoPurchaseFrom.VendorLocation>OnContract<Contract>"

		VendorItem
			if (TransientRSSLPLRequisitionLineScreen entered
			and RequesterRel.RequireVendorItem
			and TransientIgnoreRSSLPLRequisitionLineScreen not entered
			and CreatePurchaseOrder)
				required
					"Field_Vendor_ItemIsRequired"
			
			if (FromCompanyRel.CostOrVendorItemDefaultingOrder.VendorItemBeforeCost)
				include VendorItemDefaulting	

			if (IsInventoryOrNonstock)
				if (Vendor entered
				and CreatePurchaseOrder
				and VendorItemsRel exists)
					constraint (VendorItem exists)
						"CannotEnterVendorItemDifferentFromExisting"
					constraint (VendorItem.Active)
						"VendorItemIsInactive"
					constraint (!RecallProductItemForVendorItemHardErrorExists)
						"CannotAddItem<Item>;VendorItemIsOnActiveRecallNotice<first RecallProductItemForVendorItemHardErrorRel.RecallNotice>"
					if (RecallProductItemForVendorItemWarningExists)
						confirmation required
							"VendorItemIsOnActiveRecallNotice<first RecallProductItemForVendorItemWarningRel.RecallNotice>;DoYouWantToContinue?"

		CostOption
			if (CostOption.NoCharge) 
				constraint (not ServiceCode.Amount)
					"CannotSet_Cost_OptionTo_No_ChargeFor_Service_ItemBy_Amount"

				initialize TransactionUnitCost
				initialize UnitCost

			if  (CostOption changed
			and !LocalFromCapitatedSwap)
				constraint (Contract not entered)
					"CannotChangeCostOptionWhileContractIsEntered"

				if (ItemType.Inventoried
				and ItemLocationRel.NoCharge
				and old CostOption.NoCharge)
					cannot be changed
						"Item<Item>IsFlaggedAsNoChargeAtThisLocation"

		CostCode



			if (not LocalCopyRequisition
			and not LocalReqLineFromTemplateLine		
			and not Contract.BlanketPurchaseType			
			and not Contract.AllowReferenceOfItemsNotOnContract)
				if (TransactionUnitCost entered
				or CostOption.NoCharge 
				or CostOption.VendorDetermined)
					default to CostCode.Entered
					if (TransactionUnitCost changed)
						force default to CostCode.Entered
				else
					if (CostOption.CostRequired)
						if (CostOption changed
						or	TransactionUnitCost changed)
							initialize CostCode
					else

						if  (CostOption entered
						and (action type.Create or CostOption changed)
						and  not CostCode.Punchout)
							force default to CostCode.Entered
							
		TransactionUnitCost
			if (((TransactionUnitCost not entered and not CostOption.NoCharge and not CostOption.VendorDetermined)
			or  TransactionUnitCost changed
			or  EnteredUOM changed
			or  action type.Create
			or  CreatePurchaseOrder changed
			or  Contract changed	
			or	Vendor changed	
			or	VendorItem changed
			or  Item changed
			or  ItemType changed
			or  (Quantity changed
				and  Contract.LineLevelBreaks.OrderTotals))
			and not CostCode.Punchout)
				initialize LocalUnitCostDefaultingExecuted

				if (CreatePurchaseOrder
				and TransactionUnitCost not changed
				and TransactionCurrencyCode changed
				and old TransactionCurrencyCode != TransactionCurrencyCode)
					initialize LocalCurrencyExchange
					SavedFinanceEnterpriseGroup		= Requisition.Company.ItemGroup.BusinessGroup.FinanceEnterpriseGroup
					SavedExchangeDate				= DefaultExchangeDate
					SavedCurrencyTable              = Requisition.CurrencyTable
					SavedFromCurrency				= old TransactionCurrencyCode
					SavedToCurrency					= TransactionCurrencyCode
					SavedTransactionAmount			= TransactionUnitCost

					LocalConversionRate				= LocalCurrencyExchange.OutputCurrencyRate
					LocalFromCurrency	      		= old TransactionCurrencyCode
					LocalToCurrency	      			= TransactionCurrencyCode
					if (CurrencyRelationshipRel.MultDiv.Divide)
						TransactionUnitCost				= (TransactionUnitCost / LocalConversionRate)
					else
						TransactionUnitCost				= (TransactionUnitCost * LocalConversionRate)

				if (Contract changed and not ItemType.Service)
					initialize ContractLine					
					initialize Preferred
					initialize Tier

				if (ContractLine entered
				and ContractLine.UsesUOMSMustMatch
				and ContractLine.UOM != EnteredUOM)
					initialize Contract
					initialize ContractLine
					initialize Preferred
					initialize Tier
				
				if (Item changed)
					initialize CostCode
				
				if (CreatePurchaseOrder
				and not TransientBypassCostDefaulting
				and not IsMakeToOrderKitItem)
					LocalUnitCostDefaultingExecuted = true
					include UnitCostDefaulting

				if (not CreatePurchaseOrder
				or (not TransientBypassCostDefaulting and not LocalFoundCost and not CostCode.Entered))
					initialize LocalDefaultedCost


					if (IsMakeToOrderKitItem)
						initialize LocalInventoryCost

						for each KitItemFromLocationRel.KitComponentsRel
							LocalComponentItem = each.ComponentItem

							initialize InventoryCostDefault
							InventoryCostDefault.InCompany 				= FromCompanyLocationBin.FromCompany
							InventoryCostDefault.InInventoryLocation 	= FromCompanyLocationBin.FromLocation
							InventoryCostDefault.InItem 				= LocalComponentItem
							InventoryCostDefault.InQuantity 			= Quantity

							LocalInventoryCost += (InventoryCostDefault.DefaultInventoryCost * each.Quantity)


					else
					if (LocalInventoryCost not entered)
						if (FromCompanyLocationBin.FromCompany.CostingMethod.StandardCosting)
							if (ItemLocationRel.StandardCost entered)
								LocalInventoryCost	= ItemLocationRel.StandardCost
						else
							if (ItemType.Inventoried
							and ItemLocationRel.NoCharge)
								CostOption = CostOption.NoCharge
								initialize TransactionUnitCost
								include SetInventoryCostValues
							else
								if (FromCompanyLocationBin.FromCompany.CostingMethod.AverageCosting)
									if (ItemLocationRel.DerivedItemAverageCost entered)
										LocalInventoryCost = ItemLocationRel.DerivedItemAverageCost
								else
									if (FromCompanyLocationBin.FromCompany.CostingMethod.FirstInFirstOut)

										LocalCurrentQuantity = Quantity
										for each InventoryCostHistoryFIFORel
											include InventoryCostDefaulting
											if (LocalCurrentQuantity = 0)
												end for each

										if (LocalTotalQuantity = 0 or (InventoryCostHistoryFIFORel not exists and ItemLocationRel.AverageCost entered))
											LocalInventoryCost = ItemLocationRel.DerivedItemAverageCost
										else
											LocalInventoryCost /= LocalTotalQuantity
									else
										if (FromCompanyLocationBin.FromCompany.CostingMethod.LastInFirstOut)

											LocalCurrentQuantity = Quantity
											for each InventoryCostHistoryLIFORel
												include InventoryCostDefaulting
												if (LocalCurrentQuantity = 0)
													end for each

											if (LocalTotalQuantity = 0 or (InventoryCostHistoryLIFORel not exists and ItemLocationRel.LastReceiptCost entered))
												LocalInventoryCost = ItemLocationRel.LastReceiptCost
											else
												LocalInventoryCost /= LocalTotalQuantity

					if (Item.StockUOM != EnteredUOM)
						initialize UOMCalculation
						UOMCalculation.InputUOM			= Item.StockUOM
						UOMCalculation.InputToUOM		= EnteredUOM
						UOMCalculation.InputUnitCost	= LocalInventoryCost
						UOMCalculation.DoRounding		= true
						UOMCalculation.Method			= UOMCalculation.Method.ConvertToAlternate
						LocalInventoryCost				= UOMCalculation.OutputUnitCost


					if (LocalInventoryCost entered)
						LocalDefaultedCost = LocalInventoryCost
						LocalDefaultedCurrency = Requisition.BaseCurrencyCode
						CostOption = CostOption.CostRequired
						include SetInventoryCostValues

					if ((CostCode changed
					and old CostCode.InventoryCost 
					and not CreatePurchaseOrder)
					and CreatePurchaseOrder not changed)
						cannot be changed
							"CannotChangeCostOfInventoryItem"


					if (not CostCode.InventoryCost
					and not TransientBypassCostDefaulting
					and not LocalUnitCostDefaultingExecuted
					and not IsMakeToOrderKitItem)
						include UnitCostDefaulting


				if (TransactionCurrencyCode entered
				and LocalDefaultedCurrency entered
				and TransactionCurrencyCode != LocalDefaultedCurrency)
					initialize LocalCurrencyExchange
					SavedFinanceEnterpriseGroup		= Requisition.Company.ItemGroup.BusinessGroup.FinanceEnterpriseGroup
					SavedExchangeDate				= DefaultExchangeDate
					SavedCurrencyTable              = Requisition.CurrencyTable
					SavedFromCurrency				= LocalDefaultedCurrency
					SavedToCurrency					= TransactionCurrencyCode
					SavedTransactionAmount			= LocalDefaultedCost

					LocalConversionRate				= LocalCurrencyExchange.OutputCurrencyRate
					LocalFromCurrency	      		= LocalDefaultedCurrency
					LocalToCurrency	      			= TransactionCurrencyCode
					if (CurrencyRelationshipRel.MultDiv.Divide)
						LocalDefaultedCost				= (LocalDefaultedCost / LocalConversionRate)
					else
						LocalDefaultedCost				= (LocalDefaultedCost * LocalConversionRate)


				if (LocalDefaultedCost entered)
					TransactionUnitCost = LocalDefaultedCost
			else
				if (TransactionUnitCost not changed
				and old TransactionCurrencyCode != TransactionCurrencyCode)
					initialize LocalCurrencyExchange
					SavedFinanceEnterpriseGroup		= Requisition.Company.ItemGroup.BusinessGroup.FinanceEnterpriseGroup
					SavedExchangeDate				= DefaultExchangeDate
					SavedCurrencyTable              = Requisition.CurrencyTable
					SavedFromCurrency				= old TransactionCurrencyCode
					SavedToCurrency					= TransactionCurrencyCode
					SavedTransactionAmount			= TransactionUnitCost

					LocalConversionRate				= LocalCurrencyExchange.OutputCurrencyRate
					LocalFromCurrency	      		= old TransactionCurrencyCode
					LocalToCurrency	      			= TransactionCurrencyCode
					if (CurrencyRelationshipRel.MultDiv.Divide)
						TransactionUnitCost				= (TransactionUnitCost / LocalConversionRate)
					else
						TransactionUnitCost				= (TransactionUnitCost * LocalConversionRate)


			if (LocalDefaultedCost entered)
				constraint (TransactionUnitCost entered)
					"CannotDefaultCost.UOMConversionResultedToUnitCostBeingRoundedOffTo0BasedOnItem'sDecimalSetupForCost"

			if (ServiceCode.Amount)
				constraint(Quantity = 1)
					"ServiceItemByAmount,QuantityMustBe1ForItem<Item>"

			include ConvertUOM

			if (ItemLocationRel exists
			and ItemLocationRel.NoCharge)
				CostOption = CostOption.NoCharge

			if (CostOption not entered)
				CostOption = CostOption.CostRequired

			if (CostOption.NoCharge)
				initialize PurchaseTaxable
				initialize PurchaseTaxCode

			if (IsNotTransientBypassUnitCost)
				if (CostOption.CostRequired)
					if (OriginalItem entered)
						if (LocalIsPartialAllocationForSubstitution)
							default to LocalOriginalItemUnitCost
						required
							"UnitCostIsRequiredForSubstituteItem<Item>"
					else
						required
							"MustEnterUnitCostForItem<Item>"
				else  
					if (ItemType.Inventoried
					and not CreatePurchaseOrder
					and not RequestingLocation.ParOrExchangeLocation
					and not ItemLocationRel.NoCostHistoryOrHasNoChargeReceipts)
						constraint (ItemLocationRel.NoCharge)
							"<CannotSetToNoChargeOrVendorDeterminedDisplay>"


			if (TransactionCurrencyCode != Requisition.BaseCurrencyCode)
				constraint (Vendor entered)
					"VendorRequiredIfCurrencyIsEnteredForTransactionCurrencyCode"
					
		UnitCost

			if (TransactionCurrencyCode != Requisition.BaseCurrencyCode)
				initialize LocalCurrencyExchange
				SavedFinanceEnterpriseGroup		= Requisition.Company.ItemGroup.BusinessGroup.FinanceEnterpriseGroup
				SavedExchangeDate				= DefaultExchangeDate
				SavedCurrencyTable				= Requisition.CurrencyTable
				SavedFromCurrency				= TransactionCurrencyCode
				SavedToCurrency					= Requisition.BaseCurrencyCode
				SavedTransactionAmount			= TransactionUnitCost

				ConversionRate					= LocalCurrencyExchange.OutputCurrencyRate
				LocalFromCurrency	      		= TransactionCurrencyCode
				LocalToCurrency	      			= Requisition.BaseCurrencyCode
				if (CurrencyRelationshipRel.MultDiv.Divide)
					UnitCost					= (TransactionUnitCost / ConversionRate)
				else
					UnitCost					= (TransactionUnitCost * ConversionRate)

			else
				UnitCost = TransactionUnitCost
				ConversionRate = 1

			if (ItemType.Inventoried and not CreatePurchaseOrder)
				initialize Contract
				initialize ContractLine
				initialize Preferred
				initialize Tier
				initialize Vendor
				initialize VendorItem
				initialize PurchaseFromLocation
				initialize Buyer







		OverrideCost

			if (CreatePurchaseOrder)
				if (action type.Create or CostCode changed)
					if (CostCodeIsContractBlanketCatalog)
						OverrideCost = Requisition.Requester.OverrideContractCost
					else
						if (CostCodeIsLastCostLastPO)
							OverrideCost = Requisition.Requester.OverrideLastPOLastCost
						else
							if (CostCode.Entered)
								OverrideCost = Requisition.Requester.ManualOverrideAllowed
							else
								OverrideCost = false
			else
				OverrideCost = false

			if (FromCompanyRel.CostOrVendorItemDefaultingOrder.CostBeforeVendorItem)
				include VendorItemDefaulting

				if (VendorItem entered)
					if (CreatePurchaseOrder
					and not InventoryCompanyRel.AllowOverrideOfSourceUOM
					and ItemLocationRel.DefaultSourceUOM.UnitOfMeasure entered
					and VendorItem.VendorBuyUOM.UnitOfMeasure entered)
						constraint (VendorItem.VendorBuyUOM.UnitOfMeasure = ItemLocationRel.DefaultSourceUOM.UnitOfMeasure)
								"ConflictBetweenVendorBuyUOMAndSourceUOM"
					include ConvertUOM

		Buyer
			if (TransientRSSLPLRequisitionLineScreen entered
			and RequesterRel.RequireBuyer
			and CreatePurchaseOrder)
				required
					"Field_BuyerIsRequired"
			
			if (CreatePurchaseOrder)
				default to Requisition.Buyer
				default to ItemLocationRel.Buyer
				default to PurchaseFromLocation.PurchaseFromLocationRel.Buyer
				default to PurchasingVendorRel.Buyer

                if (action type.Create
                or (action type.Update
                and (Buyer changed
                or   RequestingLocation changed
                or   FromCompanyLocationBin.FromCompany changed
                or   FromCompanyLocationBin.FromLocation changed
                or   Vendor changed
                or   PurchaseFromLocation changed
                or   ItemType changed
                or   MajorPurchasingClass changed
                or   MinorPurchasingClass changed)))
					initialize ValidateBuyer
					ValidateBuyer.InRequestingLocation		= RequestingLocation
					ValidateBuyer.InPurchasingCompany		= FromCompanyLocationBin.FromCompany
					ValidateBuyer.InShipToLocation			= FromCompanyLocationBin.FromLocation
					ValidateBuyer.InVendor					= Vendor
					ValidateBuyer.InPurchaseFromLocation	= PurchaseFromLocation
					ValidateBuyer.InItemType				= ItemType
					ValidateBuyer.InMajorPurchasingClass	= MajorPurchasingClass
					ValidateBuyer.InMinorPurchasingClass	= MinorPurchasingClass
					constraint (ValidateBuyer.IsValidBuyer)
						"<ValidateBuyer.ErrorMessage>"


		LocationRule
			default to Requisition.LocationRule

			constraint(LocationRule.DetailsExist)
				"CannotAddLocationRuleThatDoesNotHaveAnyLocations"

		AllocationPriority
			default to Requisition.AllocationPriority
			if (Company.AllocationBasis.ByDate)
				if (AllocationPriority = 1)
					constraint (CreatePurchaseOrder)
						"AllocationByDate.HighPriorityAllowedIfCreatePurchaseOrder"
				else
				if (AllocationPriority > 1)
					display "CostRequired"	

		RequestedDeliveryDate


			if (TransientRSSLPLRequisitionLineScreen entered
			and RequesterRel.RequireRequestedDeliveryDate
			and TransientIgnoreRSSLPLRequisitionLineScreen not entered)
				required
					"Field_Requested_Delivery_DateIsRequired"

			if (CreatePurchaseOrder)
				if (RequestingLocation.ParOrExchangeLocation)										
					if (RequestingItemLocationRel.LeadtimeDays entered)								
						default to current corporate date + RequestingItemLocationRel.LeadtimeDays as days	
					if (not IsReplenishmentFromVendor)
						if (ItemLocationRel.LeadtimeDays entered)
							default to current corporate date + ItemLocationRel.LeadtimeDays as days
					if (PurchaseFromLocationRel.LeadtimeDays entered)
						default to current corporate date + PurchaseFromLocationRel.LeadtimeDays as days
					if (PurchasingVendorRel.LeadtimeDays entered)
						default to current corporate date + PurchasingVendorRel.LeadtimeDays as days
					default to Requisition.RequestedDeliveryDate
					default to current corporate date
				else
					default to Requisition.RequestedDeliveryDate
					if (ItemLocationRel.LeadtimeDays entered)
						default to current corporate date + ItemLocationRel.LeadtimeDays as days 
					if (PurchaseFromLocationRel.LeadtimeDays entered)
						default to current corporate date + PurchaseFromLocationRel.LeadtimeDays as days
					if (PurchasingVendorRel.LeadtimeDays entered)
						default to current corporate date + PurchasingVendorRel.LeadtimeDays as days
			else
				default to Requisition.RequestedDeliveryDate											
				default to current corporate date

			if (not AllowRequisitionReturn
			and RequestedDeliveryDate entered
			and RequestedDeliveryDate < current corporate date)
	 			if (Requisition.RequestedDeliveryDate entered)											
					RequestedDeliveryDate = Requisition.RequestedDeliveryDate							
				else																					
					RequestedDeliveryDate = current corporate date
			
			if (LateDeliveryDate entered)
				constraint (LateDeliveryDate >= RequestedDeliveryDate)
					"LateDeliveryDateCannotBePriorToEarlyDeliveryDate"

		LateDeliveryDate
			if (not AllowRequisitionReturn)
				constraint (LateDeliveryDate >= current corporate date)
					"LateDeliveryDateCannotBeLessThanToday'sDate"

		ConsignCode
			if (not RequestingLocation.DoNotDefaultBillCode)
				default to ContractLine.ConsignCode
			default to Requisition.DefaultBillCode
			default to POCode.ConsignCode

		DeliverTo
			if (TransientRSSLPLRequisitionLineScreen entered
			and RequesterRel.RequireDeliverTo)
				required
					"Field_Deliver_ToIsRequired"
			default to Requisition.DeliverTo

		RequisitionSource
			if (TransientRSSLPLRequisitionLineScreen entered)
				default to RqSource.RequisitionSelfService
			default to RqSource.Requisition

		CreatedBy
			initial value is actor
			default to actor

		CreationDate
			initial value is current timestamp
			default to current timestamp

		LastUpdateBy
			force default to actor

		LastUpdateDate
			force default to current timestamp

		CommodityCode
			if (TransientRSSLPLRequisitionLineScreen entered
			and RSSLPLRequireCommodityCode)
				required
					"Field_Commodity_CodeIsRequired"
			
			if (IsInventoryOrNonstock
			and Item.CommodityCode entered)
				force default to Item.CommodityCode
				constraint (Item.CommodityCode = CommodityCode)
					"CommodityCodeWillDefaultFromItemMaster"

			if (Requisition.Requester.RequireCommodityCode)
				required
					"RequesterRequiresACommodityCode"

			if (ContractLine entered)
				default to ContractLine.CommodityCode

			if (!IsInventoryOrNonstock)
				default to Requisition.CommodityCode

			constraint (CommodityCode.Active)
				"CommodityCodeIsInactive"

		Contract
			if  (not ItemType.Service
			and (Contract entered
			and not Contract.AllowReferenceOfItemsNotOnContract))
				if (IsInventoryOrNonstock)
					constraint (ItemOnContractLineRel exists)
						"Item<Item>IsNotOnReferencedContract<Contract>"

				if (VendorItem entered)
					constraint (VendorItemOnContractLineRel exists)
						"VendorItem<VendorItem>IsNotOnReferencedContract<Contract>"

			if (Contract changed
			and Contract not entered
			and CreatePurchaseOrder)
				if (!Requisition.Requester.OverrideContractCost)
					cannot be changed
						"RequesterNotAuthorizedToChangeUnitCost"
				else
					CostCode = CostCode.Entered
					initialize ContractLine

			if (Contract changed
			and old Contract.UseCommitments
			and (!Contract.UseCommitments
			or   Contract not entered))
			   	for each RequisitionLineDistribution set
			   		invoke UpdateGLCommitmentIndirect each
			   			invoked.RemoveContractReversal = true

			if (Contract changed
			and (old Contract.UseCommitments = false
			or   old Contract not entered)
			and Contract.UseCommitments)
			   	for each RequisitionLineDistribution set
			   		invoke UpdateGLCommitmentIndirect each
			   			invoked.AddContractReversal = true

			if (Contract changed)
				invoke UpdateFast RequisitionLineDistribution set









			if (Contract.LifetimeEdit.PurchaseOrdersAndReqs
			and Contract.CreateCommitments.HeaderSpread
			and ProcurementGroupRel.RequisitionCommitmentDate.LineEarlyDeliveryDate)
				constraint (RequestedDeliveryDate entered)
					"MustEnterAnEarlyDeliveryDateForContractCommitmentRelatedLine"

			if (ContractLine entered
			and not CostCode.Punchout)
				constraint (ContractLine.UseForCostDefaultingSomewhere)
					"CannotCreateRequisitionLine<RequisitionLine>;CannotUseContract<Contract>"


		ItemGTIN
			if (IsSpecialOrService)																
				if (ContractLine.GlobalTradeItemNumber entered)
					default to ContractLine.GlobalTradeItemNumber
					constraint (ItemGTIN = ContractLine.GlobalTradeItemNumber)
						"GTINMustMatchContractLineForSpecialItem"
			else 																				
				if (Item.ItemGroup.AllowMultipleGTINs)												
					if (ContractLine.GlobalTradeItemNumber entered										
					and ContractLine.GlobalTradeItemNumber.UnitOfMeasure.UnitOfMeasure = EnteredUOM)	
						default to ContractLine.GlobalTradeItemNumber
					else																				
						if (CreatePurchaseOrder)															
							LocalManufacturer				= VendorItem.Manufacturer
							LocalManufacturerNumber			= VendorItem.ManufacturerNumber
							if (VendorItem.VendorBuyUOM entered)
								LocalUnitOfMeasure				= VendorItem.VendorBuyUOM
							else 
								LocalUnitOfMeasure				= EnteredUOM
						else															
							LocalUnitOfMeasure				= EnteredUOM
							if (Manufacturer entered 
							and ManufacturerNumber entered)									
								LocalManufacturer 			= Manufacturer
								LocalManufacturerNumber 	= ManufacturerNumber
							else
							if (ItemLocationRel.Manufacturer entered 						
							and ItemLocationRel.ManufacturerNumber entered)
								LocalManufacturer			= ItemLocationRel.Manufacturer
								LocalManufacturerNumber		= ItemLocationRel.ManufacturerNumber
						default to GTINWithMatchingManufacturerInfoRel.ItemGTIN
						default to NoDefaultGTINRel.ItemGTIN

				if (ItemGTIN changed)
					if (ItemGTIN entered)
						Manufacturer = ItemGTIN.Manufacturer
						ManufacturerNumber = ItemGTIN.ManufacturerNumber
					else
						initialize Manufacturer
						initialize ManufacturerNumber

				if (PurchasingVendorRel.GTINInUse)
					default to ItemGTINRel.ItemGTIN

				if  (IsNotTransientBypassUnitCost
				and	 ContractLine not entered)
					constraint (EnteredUOM entered)
						"UnitOfMeasureIsRequired"
			include ValidateGTIN

		Manufacturer
			if (TransientRSSLPLRequisitionLineScreen entered
			and RequesterRel.RequireManufacturer)
				required
					"Field_ManufacturerIsRequired"
			
			if (IsInventoryOrNonstock)
				if (VendorItem entered
				and CreatePurchaseOrder)
					default to VendorItem.Manufacturer
				else
				if (ItemLocationRel.Manufacturer entered)	
					default to ItemLocationRel.Manufacturer
				else
				if (Item.Manufacturer entered)
					default to Item.Manufacturer
				else
				if (ItemGTIN entered
				and ItemGTIN.Manufacturer entered)
					default to ItemGTIN.Manufacturer

			default to ContractLine.Manufacturer

			if (IsSpecial
			and ContractLine.Manufacturer entered)
				constraint (Manufacturer = ContractLine.Manufacturer)
					"ManufacturerDoesNotMatchManufacturer<ContractLine.Manufacturer>OnContractLine"

		ManufacturerNumber
			if (TransientRSSLPLRequisitionLineScreen entered
			and RequesterRel.RequireManufacturerNumber)
				required
					"Field_Manufacturer_NumberIsRequired"
			
			if (IsInventoryOrNonstock)
				if (VendorItem entered
				and CreatePurchaseOrder)
					default to VendorItem.ManufacturerNumber
				else
				if (ItemLocationRel.Manufacturer entered)
					default to ItemLocationRel.ManufacturerNumber
				else
				if (Item.Manufacturer entered)
					default to Item.ManufacturerNumber
				else
				if (ItemGTIN entered
				and ItemGTIN.Manufacturer entered)
					default to ItemGTIN.ManufacturerNumber

			default to ContractLine.ManufacturerNumber

			if (IsSpecial
			and ContractLine.ManufacturerNumber entered)
				constraint (ManufacturerNumber = ContractLine.ManufacturerNumber)
					"ManufacturerNumberDoesNotMatchManufacturerNumber<ContractLine.ManufacturerNumber>OnContractLine"

		NewRequisition
			if (NewRequisition)
				constraint (RequestingLocation.Active)
					"RequestingLocationIsInactive\,CannotCreateNewRequisition"    

		LandedUnitCost
			force default to DerivedLandedUnitCost

		CatchWeightReturnQuantity
			if (IsCatchWeightItem
			and ReturnQuantity entered)
				required
					"CatchWeightStockQuantityIsRequiredForLine<RequisitionLine>"


		TransientPatientID
			if (TransientVisitNumber exists)
				force default to TransientVisitNumber.Patient
		TransientPatientLastName
			if (TransientPatientID exists)
				force default to TransientPatientID.LastName
		TransientPatientFirstName
			if (TransientPatientID exists)
				force default to TransientPatientID.FirstName
		TransientPatientMiddleName
			if (TransientPatientID exists)
				force default to TransientPatientID.MiddleInitial
		TransientBirthdate
			if (TransientPatientID exists)
				force default to TransientPatientID.BirthDate
		TransientSocialSecurityNumber
			if (TransientPatientID exists)
				force default to TransientPatientID.FicaNbr

		EAMWorkOrder
			if (action type.Create)
				default to Requisition.EAMWorkOrder

		EAMWorkOrderActivity
			if (action type.Create)
				default to Requisition.EAMWorkOrderActivity


		UNSPSCCode
			if (IsInventoryOrNonstock)
				default to Item.UNSPSCCode
			if (IsSpecial and ContractLine entered)
				default to ContractLine.UNSPSCCode

		TransientTaxEntity
			force default to DerivedTaxEntity

		SpecialHandlingCode
			if (IsInventoryOrNonstock)
				force default to Item.SpecialHandlingCode
			else
			if (IsSpecial)
				if (ContractLineRel.SpecialHandlingCode.Active)
					default to ContractLineRel.SpecialHandlingCode
				if  (SpecialHandlingCode changed
				and  SpecialHandlingCode entered)
					constraint (SpecialHandlingCode.Active)
						"SpecialHandlingCodeMustBeActive"

		SpecialHandlingInstructions
			if (SpecialHandlingCode entered)
				required
					"InstructionsRequiredForSpecialHandling"
			if (IsInventoryOrNonstock)
				force default to Item.SpecialHandlingInstructions
			else
			if (IsSpecial)
				if (ContractLineRel.SpecialHandlingCode.Active)
					default to ContractLineRel.SpecialHandlingInstructions
				if (SpecialHandlingCode not entered)
					initialize SpecialHandlingInstructions

		HandlingTimeInMinutes
			if (SpecialHandlingCode.TimeSensitive)
				required
					"HandlingTimeIsRequiredForTimeSensitiveItem"
			if (IsInventoryOrNonstock)
				force default to Item.HandlingTimeInMinutes
			else
			if (IsSpecial)
				if (ContractLineRel.SpecialHandlingCode.Active
				and ContractLineRel.SpecialHandlingCode = SpecialHandlingCode)
					default to ContractLineRel.HandlingTimeInMinutes
				if (SpecialHandlingCode not entered 
				or  not SpecialHandlingCode.TimeSensitive)
					initialize HandlingTimeInMinutes

		TransientAllocationPriorityLevel
			if(action type.Update
			and TransientAllocationPriorityLevel changed)
				AllocationPriority = TransientAllocationPriorityLevel

		DeliveryMethod
			if (CreatePurchaseOrder and action type.Create)
				default to Requisition.DeliveryMethod
	Actions
		SendAdvanceShipNoticeNativeLPLBOD is an Instance Action
			restricted
			Entrance Rules
			Parameters
			Action Rules
				send ion bod
					bod is RequisitionReturnXMLBOD
					bod type is "Process.AdvanceShipNotice"
					accounting entity is DerivedBODAccountingEntity
					document id is DerivedDocumentID
					location is RequestingLocation
		
		TriggerAdvanceShipNoticeNativeLPLBOD is an Instance Action
			restricted
			Entrance Rules
			Parameters
			Action Rules
				invoke NativeLPLBODTriggerChecks FSMBODConfigurationRel
					invoked.PrmVerb 					= 2
					invoked.PrmNoun						= "AdvanceShipNotice"
					invoked.PrmDirection				= 1
					invoked.PrmTriggerFrom				= "RequisitionLine"
					invoked.PrmFinanceEnterpriseGroup	= GeneralLedgerCompanyForCompanyRel.FinanceEnterpriseGroup
					invoked.PrmAccountingEntity 		= Company.AccountingEntity
					invoked.PrmCompany 					= Company
					invoked.PrmMainUserTemplate 		= "IONSyncRequisitionReturn_RequisitionLine_ST"
				NativeLPLBODTrigger = FSMBODConfigurationRel.NativeLPLBODTrigger
				if (GeneralLedgerCompanyForCompanyRel.FinanceEnterpriseGroup.BODTrigger and NativeLPLBODTrigger)
					if(FSMInboundBODTracker not entered)
						invoke Create FSMInboundBODTracker
							assign result to NewBODTracker
							invoked.Verb 					= 2
							invoked.Noun 					= "AdvanceShipNotice"						
							invoked.BODDocumentID			= DerivedDocumentID
							invoked.BODVariationID			= DerivedVariationID
							invoked.Status					= 1
							invoked.Direction				= 1
							invoked.StartDate				= system current timestamp
							invoked.FinanceEnterpriseGroup	= DerivedFinanceEnterpriseGroup
							invoked.BODAccountingEntity		= DerivedBODAccountingEntity
							invoked.Reference1				= Company
							invoked.Reference2				= Requisition
							invoked.Reference3				= RequisitionLine
							invoked.Reference4				= "RequisitionReturn"
							initialize invoked.Error			
							initialize invoked.ErrorMessage					
						LocalFSMInboundBODTracker	= NewBODTracker.FSMInboundBODTracker
					else 
						LocalFSMInboundBODTracker		= FSMInboundBODTracker	
						invoke Update FSMInboundBODTrackerRel
							invoked.FinanceEnterpriseGroup	= DerivedFinanceEnterpriseGroup
							invoked.BODDocumentID			= DerivedDocumentID
							invoked.BODVariationID			= DerivedVariationID
							invoked.Status					= 1
							invoked.StartDate				= system current timestamp
							invoked.Direction				= 1
							invoked.BODAccountingEntity		= DerivedBODAccountingEntity
							invoked.Reference1				= Company
							invoked.Reference2				= Requisition
							invoked.Reference3				= RequisitionLine
							invoked.Reference4				= "RequisitionReturn"
							initialize invoked.Error			
							initialize invoked.ErrorMessage
					invoke SendAdvanceShipNoticeNativeLPLBOD
						resume on error
	                   		Error            							= true
	                        ErrorMessage     							= error message
	                if(Error)
						invoke Update FSMInboundBODTrackerRel
							invoked.Error 								= Error
							invoked.ErrorMessage 						= ErrorMessage
							invoked.Status								= 2
							invoked.CloseDate							= system current timestamp
							invoked.BODID								= DerivedBodID
							invoked.BODXML								= RequisitionReturnXMLBOD
					else
						invoke Update FSMInboundBODTrackerRel
							invoked.Status								= 3
							invoked.CloseDate							= system current timestamp
							invoked.BODID								= DerivedBodID
							invoked.BODXML								= RequisitionReturnXMLBOD	
	
		ProcessOneSourceForRQLines is a Set Action
			restricted
			Parameters
				PrmCompany			is an InventoryCompany
				PrmRequisition		is a Requisition
			Local Fields
				AsyncId				is an AsyncActionRequest
			Instance Selection
				where (PrmCompany		= Company
				and	   PrmRequisition	= Requisition
				and	   PurchaseTaxable)

			Sort Order
				Company
				Requisition
				RequisitionLine
			Action Rules
				Requisition Set Rules
					Entrance Rules
						if (SingleCallToOneSource)
							LocalUniqueID = Requisition.UniqueID
							if (TaxLineItemsRel exists)
								for each TaxLineItemsRel
									invoke Delete each.LineItemUserFieldsRel
									invoke Delete each
							
							if (Requisition.AddOnChargesExist)
								for each Requisition.TaxableRequisitionAddOnChargesRel
									LocalUniqueID = each.UniqueID
									if (TaxLineItemsRel exists)
										for each TaxLineItemsRel
											invoke Delete each.LineItemUserFieldsRel
											invoke Delete each

							if (LineAddOnChargesRel exists)
								for each Requisition.TaxableRequisitionLineAddOnChargesRel
									LocalUniqueID = each.UniqueID
									if (TaxLineItemsRel exists)
										for each TaxLineItemsRel
											invoke Delete each.LineItemUserFieldsRel
											invoke Delete each

							AsyncId = current async action request id

					Exit Rules
						invoke ProcessOneSourceForRQAOC RequisitionLineAddOnCharge in foreground
							invoked.PrmCompany			= Company
							invoked.PrmRequisition		= Requisition

						if (SingleCallToOneSource
						and Requisition.DerivedNumberOfTaxableHeaderAOCs not entered
						and Requisition.DerivedNumberOfTaxableLineAOCs not entered)
							CalculateTax.SendMultLineItems					= true
							CalculateTax.UpdateLineItems					= true
							CalculateTax.UniqueIdOfRelatedObject			= Requisition.UniqueID
							CalculateTax.UserElementLevel					= "L"

							LocalCalculateTaxExecuted						= CalculateTax.ExecuteCalculateTax
							
							constraint (CalculateTax.OutputErrorNumber not entered)
								"<CalculateTax.OutputErrorMessage>;ContactAdministrator"

							invoke UpdateRQTaxAmounts TaxLineItem in foreground
								invoked.PrmFinanceEnterpriseGroup	= GeneralLedgerCompanyForCompanyRel.FinanceEnterpriseGroup
								invoked.PrmCompany					= Company
								invoked.PrmInvoiceNumber			= Requisition
								invoked.PrmUniqueIdOfRelatedObject  = Requisition.UniqueID
					
				Instance Rules
					LocalUniqueID = UniqueID
					if (TaxLineItemsRel exists)
						for each TaxLineItemsRel
							invoke Delete each.LineItemUserFieldsRel
							invoke Delete each
					
					include CalculateTaxAndLandedUnitCost
					include LoadOneSourceInputFields
					include CreateTaxLineItem
					include CreateTaxLineItemUserFields

		ProcessVertexOneCallForRQLines is a Set Action
			restricted
			Parameters
				PrmCompany			is an InventoryCompany
				PrmRequisition		is a Requisition
			Local Fields
				AsyncId				is an AsyncActionRequest
			Instance Selection
				where (PrmCompany		= Company
				and	   PrmRequisition	= Requisition
				and	   PurchaseTaxable)

			Sort Order
				Company
				Requisition
				RequisitionLine
			Action Rules
				Requisition Set Rules
					Entrance Rules
						if (SingleCallToVertex)
							LocalUniqueID = Requisition.UniqueID
							if (TaxLineItemsRel exists)
								for each TaxLineItemsRel
									invoke Delete each.LineItemUserFieldsRel
									invoke Delete each
							
							if (Requisition.AddOnChargesExist)
								for each Requisition.TaxableRequisitionAddOnChargesRel
									LocalUniqueID = each.UniqueID
									if (TaxLineItemsRel exists)
										for each TaxLineItemsRel
											invoke Delete each.LineItemUserFieldsRel
											invoke Delete each

							if (LineAddOnChargesRel exists)
								for each Requisition.TaxableRequisitionLineAddOnChargesRel
									LocalUniqueID = each.UniqueID
									if (TaxLineItemsRel exists)
										for each TaxLineItemsRel
											invoke Delete each.LineItemUserFieldsRel
											invoke Delete each

							AsyncId = current async action request id

					Exit Rules
						invoke ProcessVertexOneCallForRQAOC RequisitionLineAddOnCharge
							run after AsyncId
							assign async action request id to AsyncId
							invoked.PrmCompany			= Company
							invoked.PrmRequisition		= Requisition

						if (SingleCallToVertex
						and Requisition.DerivedNumberOfTaxableHeaderAOCs not entered
						and Requisition.DerivedNumberOfTaxableLineAOCs not entered)
							display "777VtxCalcTax(Line)"
							display "777;Postal;<CalculateTax.PostalAddress>"
							display "777;POA;<CalculateTax.POAAddress>"		 	
							display "777;From;<CalculateTax.FromPostalAddress>"

							CalculateTax.SendMultLineItems					= true
							CalculateTax.UpdateLineItems					= true
							CalculateTax.UniqueIdOfRelatedObject			= Requisition.UniqueID
							CalculateTax.UserElementLevel					= "L"

							LocalJurisdictionLookupKey						= "RQ:" + Requisition + ":" + CurrentTimestamp 
							CalculateTax.AppendToJurisFile					= true					
							CalculateTax.JurisdictionResultsKey				= LocalJurisdictionLookupKey
							CalculateTax.RelatedObjectReference				= reference to Requisition   				 

							LocalCalculateTaxExecuted						= CalculateTax.ExecuteCalculateTax

							invoke UpdateRQTaxAmounts TaxLineItem
								run after AsyncId
								assign async action request id to AsyncId
								invoked.PrmFinanceEnterpriseGroup	= GeneralLedgerCompanyForCompanyRel.FinanceEnterpriseGroup
								invoked.PrmCompany					= Company
								invoked.PrmInvoiceNumber			= Requisition
								invoked.PrmUniqueIdOfRelatedObject 	= Requisition.UniqueID
					
				Instance Rules
					LocalUniqueID = UniqueID
					if (TaxLineItemsRel exists)
						for each TaxLineItemsRel
							invoke Delete each.LineItemUserFieldsRel
							invoke Delete each
					
					include CalculateTaxAndLandedUnitCost
					include LoadVertexOneCall
					include CreateTaxLineItem
					include CreateTaxLineItemUserFields

		UpdateFromTaxLineItem is an Instance Action
			restricted
			Parameters
				PrmAccruedTaxAmount		is an InternalAmount
				PrmInvoicedTaxAmount	is an InternalAmount
				PrmLandedUnitCost		is an InternationalCost
				PrmTaxCode 				is like TaxCode 
			Action Rules
				AccruedTaxAmount	 = PrmAccruedTaxAmount
				InvoicedTaxAmount	 = PrmInvoicedTaxAmount
				LandedUnitCost		+= PrmLandedUnitCost
				if (PurchaseTaxCode = "00"
				and PrmTaxCode entered)
					PurchaseTaxCode = PrmTaxCode 
			Exit Rules
				invoke UpdateTotalsFromLine Requisition
					invoked.PrmLineExtendedAmount	= LineExtendedAmount - old LineExtendedAmount
					invoked.PrmApprovalValue		= DerivedBaseAmountWithTax - old DerivedBaseAmountWithTax
					invoked.PrmItemType				= ItemType

		ProcessVertexForRQLines is a Set Action
			restricted
			Parameters
				PrmCompany			is an InventoryCompany
				PrmRequisition		is a Requisition
			Local Fields
				AsyncId				is an AsyncActionRequest
			Instance Selection
				where (PrmCompany		= Company
				and	   PrmRequisition	= Requisition
				and	   PurchaseTaxable)

			Sort Order
				Company
				Requisition
				RequisitionLine
			Action Rules
				Requisition Set Rules
					Entrance Rules
						AsyncId = current async action request id

					Exit Rules
						invoke ProcessVertexForRQAOC RequisitionLineAddOnCharge
							run after AsyncId
							assign async action request id to AsyncId
							invoked.PrmCompany			= Company
							invoked.PrmRequisition		= Requisition

				Instance Rules				
					include CalculateTaxAndLandedUnitCost

					initialize AccruedTaxAmount 
					initialize InvoicedTaxAmount 
					for each CalculateTax.TaxTable.TaxTableOutput
						if (each.AccrualFlag = "A")
							AccruedTaxAmount 					+= each.TaxAmount5DP
						else
							InvoicedTaxAmount 					+= each.TaxAmount5DP

						if (each.LandCostFlag)
							LandedUnitCost 					+= (each.TaxAmount5DP / Quantity)

					invoke UpdateTotalsFromLine Requisition
						invoked.PrmLineExtendedAmount	= LineExtendedAmount - old LineExtendedAmount
						invoked.PrmApprovalValue		= DerivedBaseAmountWithTax - old DerivedBaseAmountWithTax
						invoked.PrmItemType				= ItemType

		CreateRequisitionTransaction is an Instance Action
			restricted
			Parameters
				PrmRequisitionDocumentType		is a RequisitionDocumentType
				PrmTransactionDate				is a ExchangeDate
				PrmDocumentNumberNumeric		is a DocumentNumberNumeric
				PrmStockQuantity				is like Quantity
			Action Rules
				invoke Create RequisitionTransaction
					invoked.FromCompanyLocation								= Requisition.FromCompanyLocation
					invoked.RequisitionTransaction.RequisitionDocumentType	= PrmRequisitionDocumentType
					invoked.RequisitionTransaction.Requisition				= Requisition
					invoked.RequisitionTransaction.DocumentNumberNumeric	= PrmDocumentNumberNumeric
					if (PrmRequisitionDocumentType.RequisitionReturn)
						invoked.RequisitionTransaction.RequisitionSequence	= Requisition.ReturnSequence
					else
						invoked.RequisitionTransaction.RequisitionSequence	= Requisition.LastDeliverySequence + 1
					invoked.Quantity										= PrmStockQuantity
					invoked.RequisitionTransaction.RequisitionLine			= RequisitionLine
					invoked.StockUOM										= Item.StockUOM
					invoked.TransactionDate									= PrmTransactionDate
					invoked.ItemType										= ItemType
					invoked.Item											= Item
					invoked.Company											= Company
					invoked.RequestingLocation								= Requisition.RequestingLocation
					invoked.Note											= Requisition.ReturnNote
					invoked.MajorPurchasingClass							= MajorPurchasingClass
					invoked.MinorPurchasingClass							= MinorPurchasingClass
					invoked.TransactionUnitCost								= DerivedTransactionUnitCostInStockUOM
					invoked.TransactionCurrencyCode							= TransactionCurrencyCode
					invoked.ConversionRate									= ConversionRate
					invoked.UnitCost										= DerivedUnitCostInStockUOM

		CreateRequisitionLineFromItemTrial is a Create Action
			restricted
			Parameters
				PrmInventoryCompany 			is an InventoryCompany
				PrmRequisition                  is a Requisition
				PrmItem                         is an Item
				PrmVendorItem                   is a VendorItem
				PrmVendor                       is a Vendor
				PrmManufacturerNumber           is a ManufacturerNumber
				PrmGlobalTradeItemNumber        is an ItemGTIN
				PrmDescription                  is a Description
				PrmUOM                          is a UnitOfMeasure
				PrmUnitCost                     is an UnsignedUnitCost

			Action Rules
				invoke Create this instance
					invoked.Company					= PrmInventoryCompany
					invoked.Requisition				= PrmRequisition
					invoked.VendorItem				= PrmVendorItem
					invoked.Item					= PrmItem
					invoked.Quantity				= 1
	   				invoked.ManufacturerNumber		= PrmManufacturerNumber
					invoked.ItemGTIN				= PrmGlobalTradeItemNumber
					invoked.Description				= PrmDescription
					invoked.TransactionUnitCost		= PrmUnitCost
					if (PrmUnitCost = 0)
						invoked.CostOption			= CostOption.NoCharge
					invoked.EnteredUOM				= PrmUOM

		CreateFromProcurementTemplateLine is a Create Action
			restricted
			Parameters
				PrmInventoryCompany				is an InventoryCompany
				PrmProcurementGroup             is a ProcurementGroup
				PrmProcurementTemplate			is a ProcurementTemplate
					context of PrmProcurementGroup
				PrmProcurementTemplateLine		is a ProcurementTemplateLine
					context of PrmProcurementGroup
 				PrmRequisition					is a Requisition
				PrmCopyAllLines					is Boolean
				PrmVendor						is like Vendor
				PrmPurchaseFromLocation			is like VendorLocation
				PrmQuantity						is like Quantity
				PrmFromSupplierRequisition      is Boolean
			Action Rules
				invoke Create this instance
					invoked.Company						= PrmInventoryCompany
					invoked.Requisition					= PrmRequisition
					invoked.TransientBypassUnitCost 	= true
					invoked.TransientBypassVendor		= true
					invoked.Contract					= PrmProcurementTemplateLine.Contract
					invoked.ContractLine				= PrmProcurementTemplateLine.ContractLine
					invoked.Vendor						= PrmVendor
					invoked.PurchaseFromLocation		= PrmPurchaseFromLocation
					if (PrmProcurementTemplateLine.HasContractLine)
						invoked.VendorItem				= PrmProcurementTemplateLine.ContractLine.VendorItem

					if (PrmProcurementTemplateLine.FromCompanyLocation entered)
						invoked.FromCompanyLocationBin  = PrmProcurementTemplateLine.FromCompanyLocation
					invoked.Item                        = PrmProcurementTemplateLine.Item
					if (PrmCopyAllLines
					and PrmProcurementTemplateLine.Quantity not entered)
						invoked.Quantity                = 1
					else
					if (PrmQuantity not entered)
						invoked.Quantity                = PrmProcurementTemplateLine.Quantity
					else
						invoked.Quantity                = PrmQuantity
					invoked.EnteredUOM                  = PrmProcurementTemplateLine.UnitOfMeasure
					invoked.CommodityCode               = PrmProcurementTemplateLine.CommodityCode
					invoked.RequisitionSource			= RqSource.Requisition
					if (PrmProcurementTemplateLine.ServiceCode.Quantity or PrmProcurementTemplateLine.ServiceCode.Amount)
						invoked.ItemType                = ItemType.Service
						invoked.Description             = PrmProcurementTemplateLine.ServiceDescription
						invoked.ServiceCode             = PrmProcurementTemplateLine.ServiceCode
					else
						if (PrmProcurementTemplateLine.SpecialItem)
							invoked.ItemType                = ItemType.Special
							invoked.Description             = PrmProcurementTemplateLine.SpecialItemDescription
							if (not PrmProcurementTemplateLine.HasContractLine)
								invoked.VendorItem    			= PrmProcurementTemplateLine.Item
						else
							invoked.Description             = PrmProcurementTemplateLine.Item.Description
							invoked.MajorPurchasingClass    = PrmProcurementTemplateLine.Item.MajorPurchasingClass
							invoked.MinorPurchasingClass    = PrmProcurementTemplateLine.Item.MinorPurchasingClass
					invoked.Manufacturer	            = PrmProcurementTemplateLine.Manufacturer
					invoked.ManufacturerNumber          = PrmProcurementTemplateLine.ManufacturerNumber
					if (PrmRequisition.NotSubmittedForSupplier)
						invoked.TransientManufacturerNumber = PrmProcurementTemplateLine.ManufacturerNumber
						invoked.TransientManufacturer       = PrmProcurementTemplateLine.Manufacturer 
					invoked.ItemEntryMethod             = ItemEntryMethod.Item
					initialize invoked.OverrideCost

					if (PrmProcurementTemplateLine.UseRequestingLocationAcctUnit
					and PrmRequisition.RequestingLocation.IssueAccount entered)
						invoked.TemplateAccount				= PrmRequisition.RequestingLocation.IssueAccount
					else
						invoked.TemplateAccount             = PrmProcurementTemplateLine.DistributionAccount
					if (PrmCopyAllLines)
						invoked.LocalBypassComputeTotals	= true

				if ((HasLinePatientProcedureInfo
				or   HasProcedureInformationHeaderDefault)
				and  PrmFromSupplierRequisition)  
					invoke Create PatientProcedure
						assign result to LocalPatientProcedureView
						invoked.Lot						= TransientLot
						invoked.SerialNumber			= TransientSerialNumber
						invoked.UniqueDeviceId			= TransientUniqueDeviceId
						invoked.GTIN					= TransientGTIN
						invoked.Manufacturer			= TransientManufacturer
						invoked.ManufacturerNumber		= TransientManufacturerNumber
						invoked.ManufacturingDate		= TransientManufacturingDate
						invoked.ExpirationDate			= TransientExpirationDate
						invoked.LocalItem				= TransientItem
						invoked.LocalRequisition		= Requisition
						invoked.LocalRequisitionLine	= RequisitionLine
						invoked.Company                 = FromCompanyLocationBin.FromCompany
						invoked.Procedure				= Requisition.DefaultProcedureInformation.DefaultProcedure
						invoked.ProcedureModifier		= Requisition.DefaultProcedureInformation.DefaultProcedureModifier
						invoked.ProcedureDate			= Requisition.DefaultProcedureInformation.DefaultProcedureDate
						invoked.PhysicianName			= Requisition.DefaultProcedureInformation.DefaultPractitioner
						invoked.NurseCoordinator		= Requisition.DefaultProcedureInformation.DefaultNurseCoordinator
						invoked.SalesRepresentative		= Requisition.DefaultProcedureInformation.DefaultSalesRepresentative
						invoked.OrderNumber				= Requisition.DefaultProcedureInformation.DefaultSupplierOrderNumber
						invoked.Requestor				= Requisition.DefaultProcedureInformation.DefaultRequester
						invoked.VisitNumber				= Requisition.PatientProcedure.VisitNumber
						invoked.PatientID				= Requisition.PatientProcedure.PatientID
						invoked.CaseNumber				= Requisition.PatientProcedure.CaseNumber
						invoked.PatientLastName			= Requisition.PatientProcedure.PatientLastName
						invoked.PatientFirstName		= Requisition.PatientProcedure.PatientFirstName
						invoked.PatientMiddleName		= Requisition.PatientProcedure.PatientMiddleName
						invoked.Birthdate				= Requisition.PatientProcedure.Birthdate
						invoked.Gender					= Requisition.PatientProcedure.Gender

					PatientProcedure = LocalPatientProcedureView.PatientProcedure						

		CreateFromProcurementTemplateLineForRSS is a Create Action 
			restricted
			Local Fields
				LocalQuantity						is a Quantity
			Parameters
				PrmInventoryCompany             	is an InventoryCompany
				PrmProcurementTemplate            	is a ProcurementTemplate
				PrmProcurementTemplateLine        	is a ProcurementTemplateLine
				PrmRequisition                    	is a Requisition
				PrmQuantity                     	is a Quantity
				PrmTransactionCurrencyCode			is a Currency
				PrmEnteredUOM                   	is a UnitOfMeasure
				PrmTransactionUnitCost            	is an InternationalCost
				PrmItemType                        	is an ItemType
				PrmServiceCode                    	is a ServiceCode
				PrmDescription                    	is a Description
				PrmVendorItem                    	is like VendorItem
				PrmToAccountingEntity				is a AccountingEntity
				PrmGeneralLedgerChartAccount		is a GeneralLedgerChartAccount
				PrmAccountingUnit					is like AccountingUnit
				PrmProject							is a Project
				PrmFinanceDimension1				is a FinanceDimension1
				PrmFinanceDimension2				is a FinanceDimension2
				PrmFinanceDimension3				is a FinanceDimension3
				PrmFinanceDimension4				is a FinanceDimension4
				PrmFinanceDimension5				is a FinanceDimension5
				PrmFinanceDimension6				is a FinanceDimension6
				PrmFinanceDimension7				is a FinanceDimension7
				PrmFinanceDimension8				is a FinanceDimension8
				PrmFinanceDimension9				is a FinanceDimension9
				PrmFinanceDimension10				is a FinanceDimension10
				PrmSourcingEventRequired			is Boolean
				PrmAsset							is an Asset
				PrmAssetTemplate					is an AssetTemplate
				PrmContract							is a Contract
				PrmContractLine						is a ContractLine
				PrmAllocationPriority			    is a AllocationPriority
				PrmCostOption             	        is a CostOption
				PrmVendor							is a Vendor
				PrmPurchaseFromLocation				is a VendorLocation
				PrmMajorPurchasingClass         	is a MajorPurchasingClass
				PrmMinorPurchasingClass				is a MinorPurchasingClass
				PrmCommodityCode					is a CommCodes
				PrmFromCompany						is like InventoryCompany
				PrmFromLocation						is like InventoryLocation
				PrmManufacturer						is AlphaUpper size 9
				PrmManufacturerNumber				is a ManufacturerNumber
				PrmRequestingLocation  				is a RequestingLocation
				PrmDate                				is Date
				PrmBuyer							is a Buyer
				PrmDeliverTo						is a DeliverTo
				PrmPOCode							is a POCode
				PrmPurchaseTaxCode					is a TaxCode
				PrmPurchaseTaxable					is Boolean
				PrmCopyAllLines						is Boolean	
				PrmCreatePurchaseOrder				is Boolean	
				PrmQuantityMultiplier				is a Quantity
				PrmGLEncumbranceReference			is AlphaUpper size 60
				PrmRSSSourceInformation				is Numeric size 1
					States
            			NotApplicable         	value is 0
            			SearchCatalog    		value is 1
						RecentlyRequestedItem   value is 2
            			ShoppingList    		value is 3
						Punchout				value is 4
						SpecialAndService		value is 5
						CopyRequisitionLine 	value is 6
			Parameter Rules
				PrmProcurementTemplate
					required
				PrmProcurementTemplateLine
					required
				PrmInventoryCompany
					required
				PrmRequisition
					required


				PrmEnteredUOM
					default to PrmProcurementTemplateLine.UnitOfMeasure

			Action Rules
				initialize LocalReqLineFromTemplateLine			

				invoke Create this instance
					invoked.Company						= PrmInventoryCompany
					invoked.Requisition					= PrmRequisition

					if (PrmProcurementTemplateLine.FromCompanyLocation entered)
						invoked.FromCompanyLocationBin  = PrmProcurementTemplateLine.FromCompanyLocation
					else
						if (PrmFromCompany entered)
							invoked.FromCompanyLocationBin.FromCompany  = PrmFromCompany
						if (PrmFromLocation entered)
							invoked.FromCompanyLocationBin.FromLocation  = PrmFromLocation
					invoked.Requisition                 = PrmRequisition
					invoked.Item                        = PrmProcurementTemplateLine.Item

					invoked.TransactionCurrencyCode		= PrmTransactionCurrencyCode
					invoked.EnteredUOM                  = PrmEnteredUOM
					invoked.TransactionUnitCost			= PrmTransactionUnitCost
					invoked.TransientBypassUnitCost     = true
					invoked.ItemType                    = PrmItemType
					invoked.Description                 = PrmDescription
					if (PrmProcurementTemplateLine.HasContractLine)
						invoked.VendorItem              = PrmProcurementTemplateLine.ContractLine.VendorItem
					else
						invoked.VendorItem              = PrmVendorItem
					invoked.ServiceCode                 = PrmServiceCode
					if (PrmCommodityCode entered)
						invoked.CommodityCode           = PrmCommodityCode
					else
					if (PrmProcurementTemplateLine.CommodityCode entered)
						invoked.CommodityCode           = PrmProcurementTemplateLine.CommodityCode
					if (PrmManufacturer entered)
						invoked.Manufacturer                = PrmManufacturer
					else
						invoked.Manufacturer                = PrmProcurementTemplateLine.Manufacturer
					if (PrmManufacturerNumber entered)
						invoked.ManufacturerNumber          = PrmManufacturerNumber
					else
						invoked.ManufacturerNumber          = PrmProcurementTemplateLine.ManufacturerNumber
					invoked.ItemEntryMethod             = ItemEntryMethod.Item
					invoked.EnteredProject              = PrmProject
					invoked.EnteredToAccountingEntity	= PrmToAccountingEntity
					invoked.EnteredGeneralLedgerChartAccount = PrmGeneralLedgerChartAccount
					invoked.EnteredAccountingUnit		= PrmAccountingUnit
					invoked.EnteredProject				= PrmProject
					invoked.EnteredFinanceDimension1	= PrmFinanceDimension1
					invoked.EnteredFinanceDimension2	= PrmFinanceDimension2
					invoked.EnteredFinanceDimension3	= PrmFinanceDimension3
					invoked.EnteredFinanceDimension4	= PrmFinanceDimension4
					invoked.EnteredFinanceDimension5	= PrmFinanceDimension5
					invoked.EnteredFinanceDimension6	= PrmFinanceDimension6
					invoked.EnteredFinanceDimension7	= PrmFinanceDimension7
					invoked.EnteredFinanceDimension8	= PrmFinanceDimension8
					invoked.EnteredFinanceDimension9	= PrmFinanceDimension9
					invoked.EnteredFinanceDimension10	= PrmFinanceDimension10
					invoked.PurchaseFromLocation        = PrmPurchaseFromLocation
					if (PrmCopyAllLines)											
						LocalReqLineFromTemplateLine	= true
					if (PrmQuantity entered)
						LocalQuantity                 	= PrmQuantity
					else
						if (PrmProcurementTemplateLine.Quantity entered)
							LocalQuantity			= PrmProcurementTemplateLine.Quantity
						else
							LocalQuantity			= 1
					if (PrmQuantityMultiplier > 1
					and !PrmProcurementTemplateLine.ServiceCode.Amount)
						invoked.Quantity                 = LocalQuantity * PrmQuantityMultiplier
					else
						invoked.Quantity                 = LocalQuantity
					initialize invoked.OverrideCost
					initialize invoked.PatientProcedure
					initialize invoked.TransientVisitNumber
					initialize invoked.TransientPatientID
					initialize invoked.TransientCaseNumber
					initialize invoked.TransientPatientLastName
					initialize invoked.TransientPatientFirstName
					initialize invoked.TransientPatientMiddleName
					initialize invoked.TransientBirthdate
					initialize invoked.TransientGender
					initialize invoked.TransientSocialSecurityNumber
					if (!PrmProcurementTemplateLine.IsValidItem)
						invoked.MajorPurchasingClass    = PrmMajorPurchasingClass
						invoked.MinorPurchasingClass    = PrmMinorPurchasingClass
					invoked.RequisitionSource           = RqSource.RequisitionSelfService
					if (PrmProcurementTemplateLine.UseRequestingLocationAcctUnit
					and PrmRequisition.RequestingLocation.IssueAccount entered)
						invoked.TemplateAccount         = PrmRequisition.RequestingLocation.IssueAccount
					else
						invoked.TemplateAccount         = PrmProcurementTemplateLine.DistributionAccount
					invoked.SourcingEventRequired		= PrmSourcingEventRequired
					invoked.EnteredAsset	   		   	= PrmAsset
					invoked.EnteredAssetTemplate		= PrmAssetTemplate
					invoked.AllocationPriority			= PrmAllocationPriority
					invoked.CostOption					= PrmCostOption
					invoked.Contract					= PrmContract
					invoked.ContractLine				= PrmContractLine
					invoked.CreatePurchaseOrder			= PrmCreatePurchaseOrder	



					if (PrmVendor entered)
						invoked.Vendor					= PrmVendor
						invoked.PurchaseFromLocation    = PrmPurchaseFromLocation




					if (PrmProcurementTemplateLine.ServiceCode.Quantity or PrmProcurementTemplateLine.ServiceCode.Amount)
						invoked.ItemType                = ItemType.Service
						invoked.Description             = PrmProcurementTemplateLine.ServiceDescription
						invoked.ServiceCode             = PrmProcurementTemplateLine.ServiceCode
					else
						if (PrmProcurementTemplateLine.SpecialItem)
							invoked.ItemType                = ItemType.Special
							invoked.Description             = PrmProcurementTemplateLine.SpecialItemDescription
							if (PrmProcurementTemplateLine.HasContractLine or PrmProcurementTemplateLine.HasItemContract)
								invoked.VendorItem				= PrmProcurementTemplateLine.ContractLine.VendorItem
							else
								invoked.VendorItem  			= PrmProcurementTemplateLine.Item
						else
							invoked.Description             = PrmProcurementTemplateLine.Item.Description
							invoked.MajorPurchasingClass    = PrmMajorPurchasingClass
							invoked.MinorPurchasingClass    = PrmMinorPurchasingClass

					if (PrmDate entered)
						invoked.RequestedDeliveryDate 		= PrmDate
					if (PrmRequestingLocation entered)
						invoked.RequestingLocation 			= PrmRequestingLocation
					if (PrmBuyer entered)
						invoked.Buyer 						= PrmBuyer
					if (PrmDeliverTo entered)
						invoked.DeliverTo					= PrmDeliverTo
					if (PrmPOCode entered)
						invoked.POCode						= PrmPOCode
					if (PrmPurchaseTaxCode entered)
						invoked.PurchaseTaxCode				= PrmPurchaseTaxCode
					if (PrmPurchaseTaxable entered)
						invoked.PurchaseTaxable				= PrmPurchaseTaxable
					if (PrmGLEncumbranceReference entered)
						invoked.EnteredGLEncumbranceReference	= PrmGLEncumbranceReference
					invoked.RSSSourceInformation 				= PrmRSSSourceInformation.ShoppingList

		Create is a Create Action
			valid when (CanCreate)
			completion message is "<CreateActionCompletionMessage>"
			Field Rules

				SourcingEventRequired
					if (Requisition.SourcingEventRequired and not SourcingEventRequired)
						if (not RequestingLocation.ParOrExchangeLocation
						and CreatePurchaseOrder
						and not CostCode.Punchout)

							SourcingEventRequired = Requisition.SourcingEventRequired

			Entrance Rules 

				if (RequestingLocation.ParOrExchangeLocation)
					if (RequestingItemLocationRel exists
					and RequestingItemLocationRel.RecordExists)    

						FromCompanyLocationBin.FromCompany 	= RequestingItemLocationRel.first ItemReplenishmentSourcesRel.ReplenishFrom.ReplenishFromCompany
						FromCompanyLocationBin.FromLocation = RequestingItemLocationRel.first ItemReplenishmentSourcesRel.ReplenishFrom.ReplenishFromLocation
				if (FromParCounting) 



					RequestingLocation = Requisition.RequestingLocation
					if (IsReplenishmentFromVendor) 
						Vendor 					= RequestingItemLocationRel.ItemReplenishmentSourcesRel.Vendor
						PurchaseFromLocation 	= RequestingItemLocationRel.ItemReplenishmentSourcesRel.PurchaseFromLocation
						CreatePurchaseOrder		= true
						ItemType				= ItemType.NonStock
					include ValidateParLocationCount
					FillOrKill 					= RequestingLocation.FillOrKill
					RequisitionSource 			= RqSource.ParLocationCounts
					ItemEntryMethod     		= ItemEntryMethod.Item

					ActualCount					= ParLocationCount

				if (not FromInterfaceImport
				and not Requisition.IsCreateInProgress)
					constraint (CanCreate)
						"CannotCreateRequisitionLine;RequisitionMustBeUnreleased"
				include DefaultValues
				if (!Requisition.AllowPunchoutAndNonPunchout)
					if (CostCode.Punchout
					or (CostCode.Contract
					and PunchoutId entered))
	 					constraint (!Requisition.NonPunchoutLineExists)
	 						"CannotAddAPunchoutItemToARequestWithNon\-\punchoutItems"
		 			else
						constraint (!Requisition.RequisitionLinePunchoutIdExists)
		 					"CannotAddANon\-\punchoutItemToARequestWithPunchoutItems"

			Action Rules








			Exit Rules
				if (LocalDoPartialAllocationForSubstitution)
					invoke Create RequisitionLine
						fill in fields from this instance
							except invoked.RequisitionLine
							except invoked.Status
							except invoked.Closed
							except invoked.LastUpdateDate
							except invoked.LastUpdateBy
							except invoked.CreatedBy
							except invoked.CreationDate
							except invoked.ApprovedRejectedDate
							except invoked.ApprovingRejectingOperatorID
							except invoked.ReleasedDate
							except invoked.ReleasingOperatorID
							except invoked.Approved
							except invoked.KilledQuantity
							except invoked.LastDistributionSequence
							except invoked.LastReturnSequence
							except invoked.ReturnQuantity
							except invoked.DetailReturnQuantity
							except invoked.CatchWeightReturnQuantity
							except invoked.OverrideCost
							except invoked.Vendor
							except invoked.VendorItem
							except invoked.AccruedTaxAmount
							except invoked.InvoicedTaxAmount
							except invoked.LineAddOnChargeTotal
							except invoked.LandedUnitCost
							except invoked.InterfaceCancelQuantity
							except invoked.PatientProcedure
							except invoked.ItemType
							except invoked.TransientAllocationPriorityLevel
							except invoked.OriginalItem
							except invoked.FromCompanyLocationBin
							except invoked.Contract
							except invoked.ContractLine
							except invoked.TransactionUnitCost
							except invoked.CostOption
							except invoked.CostCode
							except invoked.ItemGTIN
							except invoked.Manufacturer
							except invoked.ManufacturerNumber
							except invoked.MajorPurchasingClass
							except invoked.MinorPurchasingClass
							except invoked.CommodityCode
							except invoked.UNSPSCCode
							except invoked.TransientItem
							except invoked.TransientExpirationDate
							except invoked.TransientLot
							except invoked.TransientSerialNumber
							except invoked.TransientManufacturingDate
							except invoked.TransientGTIN
							except invoked.TransientUniqueDeviceId
						invoked.LocalIsPartialAllocationForSubstitution	= true
						invoked.OriginalItem							= Item
						invoked.Item									= LocalSubstituteItem
						invoked.Contract								= LocalContract
						invoked.ContractLine							= LocalContractLine
						invoked.LocalOriginalItemUnitCost				= TransactionUnitCost

						if (SubstituteItemRel.IsCatchWeightItem)
							invoked.EnteredUOM	= SubstituteItemRel.SecondaryUOM
							invoked.Quantity	= LocalRemainingQuantity
						else
							initialize UOMCalculation
							UOMCalculation.InputUOM			= Item.StockUOM
							UOMCalculation.InputToUOM		= EnteredUOM
							UOMCalculation.InputQuantity	= LocalRemainingQuantity
							UOMCalculation.Method			= UOMCalculation.Method.ConvertToAlternate
							if (UOMCalculation.OutputQuantity decimals > 0)
								invoked.EnteredUOM	= SubstituteItemRel.StockUOM
								invoked.Quantity	= LocalRemainingQuantity
							else
								invoked.Quantity	= UOMCalculation.OutputQuantity
						invoked.RequisitionLine	= RequisitionLine + 1

						if (LocalFromCompanyLocationFromRule entered)
							invoked.FromCompanyLocationBin.FromCompany	= LocalFromCompanyLocationFromRule.FromCompany
							invoked.FromCompanyLocationBin.FromLocation	= LocalFromCompanyLocationFromRule.FromLocation
						else
						if (LocalNonStockSubstitute)
							invoked.FromCompanyLocationBin.FromCompany  = LocalSubstituteFromCompanyLocation.FromCompany
							invoked.FromCompanyLocationBin.FromLocation = LocalSubstituteFromCompanyLocation.FromLocation



				if (LocalPartialQuantity entered)
					invoke Create RequisitionLine
						fill in fields from this instance
							except invoked.RequisitionLine
							except invoked.Status
							except invoked.Closed
							except invoked.LastUpdateDate
							except invoked.LastUpdateBy
							except invoked.CreatedBy
							except invoked.CreationDate
							except invoked.ApprovedRejectedDate
							except invoked.ApprovingRejectingOperatorID
							except invoked.ReleasedDate
							except invoked.ReleasingOperatorID
							except invoked.Approved
							except invoked.KilledQuantity
							except invoked.LastDistributionSequence
							except invoked.LastReturnSequence
							except invoked.ReturnQuantity
							except invoked.DetailReturnQuantity
							except invoked.CatchWeightReturnQuantity
							except invoked.OverrideCost
							except invoked.Vendor
							except invoked.AccruedTaxAmount
							except invoked.InvoicedTaxAmount
							except invoked.LineAddOnChargeTotal
							except invoked.LandedUnitCost
							except invoked.InterfaceCancelQuantity
							except invoked.PatientProcedure
							except invoked.ItemType
							except invoked.TransientAllocationPriorityLevel
						if (ReplacementItemLocationRel.OverheadUnitCost entered)
							invoked.LocalInventoryCost			= ReplacementItemLocationRel.OverheadUnitCost
						else
							invoked.TransactionUnitCost		= TransactionUnitCost
						invoked.OriginalItem				= Item
						invoked.Item						= Item.ReplacementItem
						if (IsCatchWeightItem)
							invoked.EnteredUOM				= Item.ReplacementItem.SecondaryUOM
						else
							invoked.EnteredUOM				= Item.ReplacementItem.StockUOM
						invoked.Quantity					= LocalPartialQuantity
						invoked.RequisitionLine				= RequisitionLine + 1
						invoked.LocalPartialAllocation		= true


				if (!FromInterfaceImport)
					invoke UpdateTotalsFromLine Requisition
						invoked.PrmLineExtendedAmount	= LineExtendedAmount
						invoked.PrmApprovalValue		= ApprovalValue
						invoked.PrmItemType				= ItemType
				increment Requisition.NumberOfLines by 1












				if (StandardCommentCode entered)
					include CopyStandardCommentCode

				if (InventoryTransactionType.Issue
				or not IsInventory)
					include CreateRequisitionLineDistribution

				if (ContractLine entered) 
					for each ContractLineAOCRel
						include CreateRequisitionLineAOCFromContract

				if (DisplayOfProcedureInfo)
					include CheckPatientProcedure

				if (InventoryTransactionType.Issue)
					if (CostCode.Punchout)
						LongDescription70 = LongDescription
						if (LongDescription70[61:70] entered)
							invoke Create RequisitionLineComment
								fill in fields from this instance
								invoked.CommentTitle = ItemDescriptionTitle
								invoked.CommentType  = "P"
								invoked.CommentText  = LongDescription
				if (FromParCounting)
					invoke SendRequesterRQCreateNotification Requisition

		CreateCopy is a Create Action
			restricted
			Action Rules
				LocalCopyRequisition = true

				include DefaultValues
				if (!Requisition.AllowPunchoutAndNonPunchout)
					if (CostCode.Punchout or PunchoutId entered)
	 					constraint (!Requisition.NonPunchoutLineExists)
	 						"CannotAddAPunchoutItemToARequestWithNon\-\punchoutItems"
		 			else
						constraint (!Requisition.PunchoutLineExists)
		 					"CannotAddANon\-\punchoutItemToARequestWithPunchoutItems"
			Exit Rules
				invoke UpdateTotalsFromLine Requisition
					invoked.PrmLineExtendedAmount	= LineExtendedAmount
					invoked.PrmApprovalValue		= DerivedBaseAmountWithTax
					invoked.PrmItemType				= ItemType

				if (LocalRecreateRequisitionLineDistribution)
					if (InventoryTransactionType.Issue
					or not IsInventory)
						include CreateRequisitionLineDistribution

				increment Requisition.NumberOfLines by 1

		SupplierCreate is a Create Action   
			default label is "CreateAdHoc"
			valid when (CanCreateForSupplier)

			Entrance Rules

				if (TransientNoChargeFromSupplier)
					TransientBypassUnitCost = true
				Vendor = Requisition.Vendor
				if (Item !entered
				and	ItemDefaultVendorItemWithVendorRel exists
				and VendorItem entered)
					Item = first ItemDefaultVendorItemWithVendorRel.Item
				if (Item !entered)
					if (ItemDefaultVendorItemManufacturerNumberRel exists
					and ManufacturerNumber entered)
						Item = first ItemDefaultVendorItemManufacturerNumberRel.Item
				if (Item !entered)
					Item = VendorItem
				if (Item !entered)
					Item = ManufacturerNumber

			Field Rules
				VendorItem
					default to Item
					required

			Action Rules

				if (TransientNoChargeFromSupplier)
					CostOption = 2
				if (CapitatedComponentGroup entered)
					if (CapitatedProcedureLine entered)
						CapitatedProcedureLevel = first ProcedureForThisRequisitionRel.CapitatedProcedureLevel
					if (CapitatedProcedureLine = 0)
						if (TransientPrimaryOrRevision > 0)
							CapitatedProcedureLevel = TransientPrimaryOrRevision
						if (TransientPrimaryOrRevision = 0)
							if (Requisition.PrimaryProcedure)
								CapitatedProcedureLevel = 1
							if (Requisition.RevisionProcedure)
								CapitatedProcedureLevel = 2
				LocalContractLine 	= ContractLine  
				LocalContract 		= Contract 
				LocalComponentGroup	= CapitatedComponentGroup
				LocalProcedureLine  = CapitatedProcedureLine
				if (Requisition.ForCapitatedProcedure
				and IsACapitatedProcedure)
					LocalProcedureItem 	= Item 
					LocalProcedureLevel = CapitatedProcedureLevel
					constraint (RequisitionLineForThisProcedureRel !exists)
						"ProcedureForThisProcedureLevelAlreadyExistsOnThisRequisition"

				CreatePurchaseOrder = true

				increment Requisition.NumberOfLines by 1

				if (TransientServiceFlag = true)
					ItemType    = "S"
					ServiceCode = "Q" 

				if (Contract entered
				and Vendor entered)
					if (Contract.ApPoPurchaseFrom.PurchaseFromLocation entered)
						PurchaseFromLocation = Contract.ApPoPurchaseFrom.PurchaseFromLocation
					if (Contract.ApPoPurchaseFrom.VendorLocation entered)
						PurchaseFromLocation = Contract.ApPoPurchaseFrom.VendorLocation 

			Exit Rules

				TransientManufacturerNumber = ManufacturerNumber
				TransientManufacturer       = Manufacturer 
				if (ContractLine = 0
				and LocalContractLine entered)
					ContractLine = LocalContractLine
				if (CapitatedProcedureLine = 0
				and LocalProcedureLine entered)
					CapitatedProcedureLine = LocalProcedureLine 
				if (CapitatedComponentGroup = 0
				and LocalComponentGroup     entered)
					CapitatedComponentGroup = LocalComponentGroup
				if (HasLinePatientProcedureInfo
				or  HasProcedureInformationHeaderDefault)
					invoke Create PatientProcedure
						assign result to LocalPatientProcedureView
						invoked.Lot						= TransientLot
						invoked.SerialNumber			= TransientSerialNumber
						invoked.UniqueDeviceId			= TransientUniqueDeviceId
						invoked.GTIN					= TransientGTIN
						invoked.Manufacturer			= TransientManufacturer
						invoked.ManufacturerNumber		= TransientManufacturerNumber
						invoked.ManufacturingDate		= TransientManufacturingDate
						invoked.ExpirationDate			= TransientExpirationDate
						invoked.LocalItem				= TransientItem
						invoked.LocalRequisition		= Requisition
						invoked.LocalRequisitionLine	= RequisitionLine
						invoked.Company                 = FromCompanyLocationBin.FromCompany
						invoked.Procedure				= Requisition.DefaultProcedureInformation.DefaultProcedure
						invoked.ProcedureModifier		= Requisition.DefaultProcedureInformation.DefaultProcedureModifier
						invoked.ProcedureDate			= Requisition.DefaultProcedureInformation.DefaultProcedureDate
						invoked.PhysicianName			= Requisition.DefaultProcedureInformation.DefaultPractitioner
						invoked.NurseCoordinator		= Requisition.DefaultProcedureInformation.DefaultNurseCoordinator
						invoked.SalesRepresentative		= Requisition.DefaultProcedureInformation.DefaultSalesRepresentative
						invoked.OrderNumber				= Requisition.DefaultProcedureInformation.DefaultSupplierOrderNumber
						invoked.Requestor				= Requisition.DefaultProcedureInformation.DefaultRequester
						invoked.VisitNumber				= Requisition.PatientProcedure.VisitNumber
						invoked.PatientID				= Requisition.PatientProcedure.PatientID
						invoked.CaseNumber				= Requisition.PatientProcedure.CaseNumber
						invoked.PatientLastName			= Requisition.PatientProcedure.PatientLastName
						invoked.PatientFirstName		= Requisition.PatientProcedure.PatientFirstName
						invoked.PatientMiddleName		= Requisition.PatientProcedure.PatientMiddleName
						invoked.Birthdate				= Requisition.PatientProcedure.Birthdate
						invoked.Gender					= Requisition.PatientProcedure.Gender

					PatientProcedure = LocalPatientProcedureView.PatientProcedure

				invoke UpdateTotalsFromLine Requisition
					invoked.PrmLineExtendedAmount	= LineExtendedAmount
					invoked.PrmApprovalValue		= ApprovalValue
					invoked.PrmItemType				= ItemType

				if (InventoryTransactionType.Issue
				or not IsInventory)
					include CreateRequisitionLineDistribution

				if (RequestedDeliveryDate !entered)
					RequestedDeliveryDate = current date

		SupplierUpdate is an Update Action
			default label is "Update"
			valid when (CanCreateUpdateDeleteForSupplier)

			Field Rules
				VendorItem
					default to Item
					required

			Action Rules
				LocalContractLine 	= ContractLine  
				LocalContract 		= Contract 
				LocalComponentGroup	= CapitatedComponentGroup
				LocalProcedureLine  = CapitatedProcedureLine
				if (VendorItem changed
				and VendorItem entered)
					if (ItemDefaultVendorItemWithVendorRel exists)
						Item = first ItemDefaultVendorItemWithVendorRel.Item
				if (ManufacturerNumber changed
				and ManufacturerNumber entered)
					if (ItemDefaultVendorItemManufacturerNumberRel exists)
						Item = first ItemDefaultVendorItemManufacturerNumberRel.Item
				if (Item !entered)
					Item = VendorItem			
				if (Item !entered)
					Item = ManufacturerNumber
				if (CapitatedProcedureLevel changed)
					constraint (CapitatedProcedureLevel != 0)
						"MustDefineAProcedureLevel"
				if (ContractLineIsACapitatedComponent
				and CostOption = 2
				and ContractCapitatedComponentGroupRel.ItemsAllowed > 0)
					if (Quantity changed
					and Quantity > old Quantity)
						constraint (QuantityForAComponentGroup <= ContractCapitatedComponentGroupRel.ItemsAllowed)
							"QuantityIncreaseWillCauseSomeQuantitiesOfThisComponentToBeCharged;MustUse_Add_ComponentsToAddNewQuantities"
				if (FromSwapFromNoCharge)
					LocalFromCapitatedSwap = true
					CostOption      				= 1 
					CapitatedSelectForSwapNoCharge 	= false 
		
				if (FromSwapToNoCharge)
					LocalFromCapitatedSwap = true
					CostOption = 2
					CapitatedSelectForSwapCharged = false		
				constraint (CapitatedSelectForSwapCharged = false
				and         CapitatedSelectForSwapNoCharge = false)
					"CannotUpdateWhenSelectedForSwap"		
			Exit Rules

				if (Contract = 0
				and LocalContract entered)
					Contract = LocalContract
				if (ContractLine = 0
				and LocalContractLine entered)
					ContractLine = LocalContractLine
				if (CapitatedProcedureLine = 0
				and LocalProcedureLine entered)
					CapitatedProcedureLine = LocalProcedureLine 
				if (CapitatedComponentGroup = 0
				and LocalComponentGroup     entered)
					CapitatedComponentGroup = LocalComponentGroup
				if (TextSearchable changed)
					include BuildTextIndex

				if (TransientLot changed
				or  TransientSerialNumber changed
				or  TransientGTIN changed 
				or  TransientManufacturingDate changed
				or  TransientExpirationDate changed
				or  ManufacturerNumber changed)
					TransientManufacturerNumber = ManufacturerNumber
					TransientManufacturer       = Manufacturer 
					invoke Update PatientProcedure
						invoked.Lot						= TransientLot
						invoked.SerialNumber			= TransientSerialNumber
						invoked.UniqueDeviceId			= TransientUniqueDeviceId
						invoked.GTIN					= TransientGTIN
						invoked.Manufacturer			= TransientManufacturer
						invoked.ManufacturerNumber		= TransientManufacturerNumber
						invoked.ManufacturingDate		= TransientManufacturingDate
						invoked.ExpirationDate			= TransientExpirationDate
						invoked.Procedure				= Requisition.DefaultProcedureInformation.DefaultProcedure
						invoked.ProcedureModifier		= Requisition.DefaultProcedureInformation.DefaultProcedureModifier
						invoked.ProcedureDate			= Requisition.DefaultProcedureInformation.DefaultProcedureDate
						invoked.PhysicianName			= Requisition.DefaultProcedureInformation.DefaultPractitioner
						invoked.NurseCoordinator		= Requisition.DefaultProcedureInformation.DefaultNurseCoordinator
						invoked.SalesRepresentative		= Requisition.DefaultProcedureInformation.DefaultSalesRepresentative
						invoked.OrderNumber				= Requisition.DefaultProcedureInformation.DefaultSupplierOrderNumber
						invoked.Requestor				= Requisition.DefaultProcedureInformation.DefaultRequester
						invoked.VisitNumber				= Requisition.PatientProcedure.VisitNumber
						invoked.PatientID				= Requisition.PatientProcedure.PatientID
						invoked.CaseNumber				= Requisition.PatientProcedure.CaseNumber
						invoked.PatientLastName			= Requisition.PatientProcedure.PatientLastName
						invoked.PatientFirstName		= Requisition.PatientProcedure.PatientFirstName
						invoked.PatientMiddleName		= Requisition.PatientProcedure.PatientMiddleName
						invoked.Birthdate				= Requisition.PatientProcedure.Birthdate
						invoked.Gender					= Requisition.PatientProcedure.Gender

				if (LineExtendedAmount changed
				or  ApprovalValue changed)
					invoke UpdateTotalsFromLine Requisition
						invoked.PrmLineExtendedAmount	= LineExtendedAmount - old LineExtendedAmount
						invoked.PrmApprovalValue		= DerivedBaseAmountWithTax - old DerivedBaseAmountWithTax 
						invoked.PrmItemType				= ItemType


				if (GeneralLedgerSystemCodeRel.EncumbranceOption.TrackAndEdit
				or  GeneralLedgerSystemCodeRel.EncumbranceOption.Track)
					if ((old RequestedDeliveryDate != RequestedDeliveryDate and ProcurementGroupRel.RequisitionCommitmentDate.LineEarlyDeliveryDate)
					or   old TransactionUnitCost != TransactionUnitCost
					or   old PurchaseTaxCode != PurchaseTaxCode
					or   old Quantity != Quantity
					or   old TransactionCurrencyCode != TransactionCurrencyCode)
						for each RequisitionLineDistribution set
							invoke UpdateGLCommitmentIndirect each
								if (old RequestedDeliveryDate != RequestedDeliveryDate and ProcurementGroupRel.RequisitionCommitmentDate.LineEarlyDeliveryDate
								and old TransactionUnitCost = TransactionUnitCost
								and old Quantity = Quantity)
									invoked.FromDateChange = true
								invoked.PrmUpdateLine  = true
								if (GeneralLedgerSystemCodeRel.EncumbranceOption.TrackAndEdit)
									invoked.PerformBudgetEdit = true
		
		SupplierDelete is a Delete Action
			default label is "Delete"
			valid when (CanCreateUpdateDeleteForSupplier)

			Entrance Rules
				constraint (not Requisition.IsClosedStatus)
					"CannotDelete;RequisitionIsClosed"

				if (Requisition.ForCapitatedProcedure)
					if (IsACapitatedProcedure)
						constraint (!ProcedureHasComponents)
							"CannotDeleteProcedure;ProcedureHasComponents;MustDeleteComponentsFirst"

					if (NoChargeCapitatedComponent)
						constraint (ChargedCapitatedComponentRel !exists)
							"CannotDeleteANoChargeComponentForThisComponentGroupWhenChargedComponentsExist;MustDeleteChargedComponentsFirst"

				if (RQGeneralLedgerSystemCodeRel.EncumbranceOption.TrackAndEdit
				or  RQGeneralLedgerSystemCodeRel.EncumbranceOption.Track)
					for each RequisitionLineDistribution set
						invoke PurgeGLCommitment each

				if (HasPatientProcedureRecord)
					invoke DeletePatientProcedure

				if (HasInventoryUDIDetailRecord)
					invoke Delete InventoryUDIDetailRel

			Exit Rules
				decrement Requisition.NumberOfLines by 1
				invoke UpdateTotalsFromLine Requisition
					invoked.PrmLineExtendedAmount	= LineExtendedAmount * -1
					invoked.PrmApprovalValue		= DerivedBaseAmountWithTax * -1 
					invoked.PrmItemType				= ItemType

		SelectChargedForSwap is an Instance Action 
			valid when (CanSwapChargedOnCapitated)
			Action Rules 
		
				if (NoChargeSelectedForSwap)
					constraint (first NoChargeSelectedForSwapRel.CapitatedProcedureLine  = CapitatedProcedureLine
					and         first NoChargeSelectedForSwapRel.Contract                = Contract
					and         first NoChargeSelectedForSwapRel.CapitatedComponentGroup = CapitatedComponentGroup
					and         first NoChargeSelectedForSwapRel.CapitatedProcedureLevel = CapitatedProcedureLevel)
						"BothItemsSelectedMustBeForTheSameProcedureAndComponentGroup"
					
					constraint (first NoChargeSelectedForSwapRel.Quantity = Quantity)
						"MustSwapLinesWithTheSameQuantity"

					constraint (first NoChargeSelectedForSwapRel.Contract                != Contract
					or          first NoChargeSelectedForSwapRel.ContractLine            != ContractLine)
						"CannotSwapTheSameComponentItem" 
				
				CapitatedSelectForSwapCharged = true 		

		SelectNoChargeForSwap is an Instance Action 
			valid when (CanSwapNoChargeOnCapitated)
			Action Rules 

				if (ChargeSelectedForSwap)
					constraint (first ChargeSelectedForSwapRel.CapitatedProcedureLine  = CapitatedProcedureLine
					and         first ChargeSelectedForSwapRel.Contract                = Contract
					and         first ChargeSelectedForSwapRel.CapitatedComponentGroup = CapitatedComponentGroup
					and         first ChargeSelectedForSwapRel.CapitatedProcedureLevel = CapitatedProcedureLevel)
						"BothItemsSelectedMustBeForTheSameProcedureAndComponentGroup"		

					constraint (first ChargeSelectedForSwapRel.Contract                != Contract
					or          first ChargeSelectedForSwapRel.ContractLine            != ContractLine)
						"CannotSwapTheSameComponentItem" 

					constraint (first ChargeSelectedForSwapRel.Quantity = Quantity)
						"MustSwapLinesWithTheSameQuantity"		
				
				CapitatedSelectForSwapNoCharge = true 

		UnselectForSwap is an Instance Action 
			valid when (SelectedForSwap)

			Action Rules 
				CapitatedSelectForSwapCharged 	= false 
				CapitatedSelectForSwapNoCharge	= false

		UpdateNoEdits is an Update Action
			bypass field rules
			restricted

			Action Rules
				if (TextSearchable changed)
					include BuildTextIndex

		UpdateBODIdFields is an Instance Action
			restricted
			Parameters
				PrmAccountingEntity  is Alpha size 22
					default label is "AccountingEntity"
				PrmLocation          is Alpha size 22
					default label is "Location"
				PrmDocumentID        is Alpha size 100
					default label is "DocumentID"
				PrmSystemOfRecord    is Alpha size 1
					default label is "SystemOfRecord"
				PrmVariationID       is Alpha size 22
					default label is "VariationID"
			Action Rules
				if (bod id.AccountingEntity != PrmAccountingEntity)
					bod id.AccountingEntity 	= PrmAccountingEntity
				if (bod id.Location != PrmLocation)
					bod id.Location				= PrmLocation
				if (bod id.DocumentID != PrmDocumentID)
					bod id.DocumentID			= PrmDocumentID
				if (bod id.SystemOfRecord != PrmSystemOfRecord)
					bod id.SystemOfRecord		= PrmSystemOfRecord
				if (bod id.VariationID != PrmVariationID)
					bod id.VariationID			= PrmVariationID

		Update is an Update Action
			valid when (CanUpdate)
			refresh and lock this instance

			Field Rules
				Vendor
					if  (Vendor entered
					and (Contract entered and (Contract.Vendor != Vendor)))
						include ValidateContract





				TransactionCurrencyCode
					if (TransactionCurrencyCode changed)
						LocalChangeInAmount	= ApprovalValue
						LocalItemType		= ItemType
						OffsetFirstBeforeConversion = true

				PurchaseFromLocation
					if (PurchaseFromLocation changed and PurchaseFromLocation.InvoiceCurrency entered)
						TransactionCurrencyCode = PurchaseFromLocation.InvoiceCurrency

				ConversionRate
					if (TransactionCurrencyCode changed)
						initialize ConversionRate
						initialize UnitCost

				Contract
					if (Contract entered
					and old Contract !entered)
						if (ReferencedContractHasHeaderCommitments)
							constraint (not HasMultipleDistributions and first RequisitionLineDistributionRel.DistributionAccount = Contract.CommitmentAccount)
								"ReferencedContractHasHeaderCommitments.RequisitionLineDistributionMustMatchContractHeaderCommitmentDistribution."

			Entrance Rules
				if (FromParCounting)
					include ValidateParLocationCount

				if (ItemType.Service and EnteredContractLine entered)
					constraint(Contract entered)
						"Contract_Line_does_not_exist._Contract=,_Contract_Line=<EnteredContractLine>"
					ContractLine = EnteredContractLine

				if (CostCode.Punchout)
					constraint (AllowUpdateToLinesFromPunchout)
						"CannotChangeLine,ItHasACostCodeOfPunchout"
						
				if (SourcingEventRequired
				and CostCode.Entered
				and TransactionUnitCost entered)
					initialize Vendor
					initialize PurchaseFromLocation

				if (Vendor entered)
					constraint (not SourcingEventRequired)
						"CannotEnterBothVendorAndSourcingEvent"

				include InventoryLocationStatusValidation

			Action Rules

				if (ItemGTIN changed
				and IsInventoryOrNonstock)
					initialize EnteredUOM

				constraint (CapitatedSelectForSwapCharged = false
				and         CapitatedSelectForSwapNoCharge = false)
					"CannotUpdateWhenSelectedForSwap"
				
				if (CapitatedProcedureLevel changed)
					constraint (CapitatedProcedureLevel != 0)
						"MustDefineAProcedureLevel"
					if (CapitatedProcedureLevel = 1)
						TransactionUnitCost = ContractLine.BaseCost 
						include ConvertUOM
					else 
					if (CapitatedProcedureLevel = 2)
						TransactionUnitCost = ContractLine.RevisionProcedureCost
						include ConvertUOM
				
				if (ContractLineIsACapitatedComponent
				and CostOption = 2
				and ContractCapitatedComponentGroupRel.ItemsAllowed > 0)
					if (Quantity changed
					and Quantity > old Quantity)
						constraint (QuantityForAComponentGroup <= ContractCapitatedComponentGroupRel.ItemsAllowed)
							"QuantityIncreaseWillCauseSomeQuantitiesOfThisComponentToBeCharged;MustUse_Add_ComponentsToAddNewQuantities"						

				if (PurchaseTaxCode changed)
					for each TaxableLineAndAddOnChargeRel
						invoke FastUpdate each
							invoked.Taxable = PurchaseTaxable
							invoked.TaxCode = PurchaseTaxCode

			Exit Rules
				if (DistributionBy changed)
					invoke Update first RequisitionLineDistribution set
						invoked.DistributionPercent 	= 0
						invoked.DistributionQuantity 	= 0
						invoked.DistributionAmount		= 0

				if (TextSearchable changed)
					include BuildTextIndex

				if (StandardCommentCode entered)
					include CopyStandardCommentCode

				if (DisplayOfProcedureInfo)
					if (Requisition.ForCapitatedProcedure)
						TransientUpdatePatientProcedure = "Y"
					include CheckPatientProcedure

				if (LineExtendedAmount changed
				or  ApprovalValue changed)
					invoke UpdateTotalsFromLine Requisition
						invoked.PrmLineExtendedAmount	= LineExtendedAmount - old LineExtendedAmount
						invoked.PrmApprovalValue		= DerivedBaseAmountWithTax - old DerivedBaseAmountWithTax 
						invoked.PrmItemType				= ItemType


				if (GeneralLedgerSystemCodeRel.EncumbranceOption.TrackAndEdit
				or  GeneralLedgerSystemCodeRel.EncumbranceOption.Track)
					if ((old RequestedDeliveryDate != RequestedDeliveryDate and ProcurementGroupRel.RequisitionCommitmentDate.LineEarlyDeliveryDate)
					or   old TransactionUnitCost != TransactionUnitCost
					or   old PurchaseTaxCode != PurchaseTaxCode
					or   old Quantity != Quantity
					or   old TransactionCurrencyCode != TransactionCurrencyCode)
						if (DerivedEntityCalendarPeriod entered
						and EntityLedgerPeriodRel exists)
							if (RequisitionLineDistributionErrorRel.ErrorMessage entered)
								invoke Update first RequisitionLineDistributionErrorRel							
									invoked.ErrorMessageNumber = 999
						for each RequisitionLineDistribution set
							invoke UpdateGLCommitmentIndirect each
								if (old RequestedDeliveryDate != RequestedDeliveryDate and ProcurementGroupRel.RequisitionCommitmentDate.LineEarlyDeliveryDate)
									invoked.RequisitionDateChanged = true
									if (old TransactionUnitCost = TransactionUnitCost
									and old Quantity = Quantity)
										invoked.FromDateChange = true									
								invoked.PrmUpdateLine  = true
								if (GeneralLedgerSystemCodeRel.EncumbranceOption.TrackAndEdit)
									invoked.PerformBudgetEdit = true

				if (CreatePurchaseOrder changed
				and old CreatePurchaseOrder)
					invoke DeleteRequisitionAddOnCharge RequisitionLineAddOnCharge set
						confirmation required
							"ExistingAddOnChargesForLineWillBeDeleted.Continue?"

				if (Contract changed)
					for each OldContractLineAOCRel
						LocalAddOnCharge = each.AOC
						if (!LineAddOnChargeFromContractRel.FromSpread)
							invoke DeleteRequisitionAddOnCharge LineAddOnChargeFromContractRel

					for each ContractLineAOCRel
						LocalAddOnCharge = each.AOC
						if (LineAddOnChargeFromContractRel not exists)
							include CreateRequisitionLineAOCFromContract

				if (Quantity changed)
					for each RequisitionLineAddOnCharge set
						invoke Update each
				else
				if (TransactionUnitCost changed)
					for each LineAddOnChargesByRateRel
						invoke Update each

				if (MissingDistribution)
					include RequisitionLineDistributionAccountDefaulting

		FastUpdate is an Update Action
			restricted
			bypass field rules

			Action Rules
				if (TextSearchable changed)
					include BuildTextIndex

		ReleaseUpdate is an Update Action
			restricted

		CopyRequisitionLine is an Instance Action
			restricted
			Parameters
				PrmCompany							is an InventoryCompany
				PrmRequisition                      is a Requisition
				PrmCreateNewRequisition				is Boolean
				PrmFromLocationChanged				is Boolean
				PrmReturnQuantity					is a Quantity
				PrmCreateRequisitionLineFromReturn	is Boolean
				PrmVendor							is a Vendor
				PrmCopyNonRSS						is Boolean
				PrmRequestedDeliveryDate			is Date
				PrmDeliverTo						is a DeliverTo
				PrmAllocationPriority		    	is a AllocationPriority
				PrmPurchaseFromLocation				is a VendorLocation
				PrmRequisitionDescription			is Alpha size 30
				PrmBuyer							is a Buyer
				PrmCommodityCode					is a CommCodes
				PrmPurchaseTaxCode					is a TaxCode
				PrmPurchaseTaxable					is Boolean
				PrmPOCode							is a POCode
				PrmAsset							is an Asset
				PrmAssetTemplate					is an AssetTemplate
				PrmMajorPurchasingClass        	 	is a MajorPurchasingClass
				PrmMinorPurchasingClass				is a MinorPurchasingClass
				PrmManufacturer						is AlphaUpper size 9
				PrmManufacturerNumber				is a ManufacturerNumber
				PrmHeaderInfoChanged				is Boolean
				PrmGLEncumbranceReference			is AlphaUpper size 60
				PrmRequisitionSource			is a RqSource
				PrmRSSSourceInformation			is Numeric size 1
					States
            			NotApplicable         	value is 0
            			SearchCatalog    		value is 1
						RecentlyRequestedItem   value is 2
            			ShoppingList    		value is 3
						Punchout				value is 4
						SpecialAndService		value is 5
						CopyRequisitionLine 	value is 6
			Local Fields
				LocalRequisitionLine                is a RequisitionLine view
				LocalInitializeContract				is Boolean
			Action Rules
				constraint(!CostCode.Punchout)
					"CannotCopyALineCreatedFromPunchout"

				if (PrmCreateNewRequisition)
					invoke Create Requisition
						assign result to PrmRequisition
						fill in fields from Requisition
							except invoked.Requisition
							except invoked.CreationDate
							except invoked.ReferenceNumber
							except invoked.LastRequisitionLine
							except invoked.LastDeliverySequence
							except invoked.ReturnSequence
							except invoked.Status
							except invoked.LastApprovalDate
							except invoked.Approved
							except invoked.AttainedLevel
							except invoked.ApprovalLevel
							except invoked.NumberOfLines
							except invoked.NumberOfClosedLines
							except invoked.Closed
							except invoked.InventoryItemsTotal
							except invoked.NonstockItemsTotal
							except invoked.SpecialAndServiceItemsSTotal
							except invoked.HeaderAddOnChargeTotal
							except invoked.LineAddOnChargeTotal
							except invoked.AOCTotal
							except invoked.ExtendedAmountTotal
							except invoked.Printed
							except invoked.ReturnNote
							except invoked.ReturnDate
							except invoked.OperatorID
							except invoked.CapitalTotal
							except invoked.TechnicalTotal
							except invoked.CapitalTechnicalTotal
							except invoked.ProcessFlowApprovalLevel
							except invoked.ReleasedDate
							except invoked.ReleasingOperatorID
							except invoked.ApprovedRejectedDate
							except invoked.ApprovingRejectingOperatorID
							except invoked.CreatedBy
							except invoked.LastUpdateDate
							except invoked.LastUpdateBy
							except invoked.OneSourceDocumentToOnePO
							except invoked.BudgetEditProcessing
							except invoked.RequisitionApprovalType
							except invoked.PatientProcedure
							except invoked.TransientAllocationPriorityLevel
						if (PrmCompany entered)
							invoked.Company = PrmCompany
						else
							invoked.Company = actor.agent(Employee).Employee.Requester.Company
						invoked.Requisition = 0

						invoked.RequestedDeliveryDate	= PrmRequestedDeliveryDate
						invoked.DeliverTo				= PrmDeliverTo
						invoked.AllocationPriority		= PrmAllocationPriority
						invoked.Vendor					= PrmVendor
						invoked.PurchaseFromLocation	= PrmPurchaseFromLocation
						invoked.Buyer					= PrmBuyer
						invoked.RequisitionDescription	= PrmRequisitionDescription
						invoked.CommodityCode			= PrmCommodityCode
						invoked.PurchaseTaxCode			= PrmPurchaseTaxCode
						invoked.PurchaseTaxable			= PrmPurchaseTaxable
						invoked.POCode					= PrmPOCode
						if (not PrmCopyNonRSS)
							invoked.RequisitionSource       = RqSource.RequisitionSelfService

					NewRequisitionFromCopy = PrmRequisition.Requisition

				if 	  (Contract entered
				and	(((Contract.ExpirationDate entered
				and   Contract.LastInvoiceAllowedDate not entered
				and   Requisition.DerivedCreationDate > Contract.ExpirationDate)
				or   (Contract.FirstInvoiceAllowedDate not entered
				and   Requisition.DerivedCreationDate < Contract.EffectiveDate))
				or    not (Contract.ContractStatus.Active)))
					LocalInitializeContract = true

				invoke CreateCopy RequisitionLine
					assign result to LocalRequisitionLine
					fill in fields from this instance
						except invoked.RequisitionLine
						except invoked.Status
						except invoked.Closed
						except invoked.LastUpdateDate
						except invoked.LastUpdateBy
						except invoked.CreatedBy
						except invoked.CreationDate
						except invoked.ApprovedRejectedDate
						except invoked.ApprovingRejectingOperatorID
						except invoked.ReleasedDate
						except invoked.ReleasingOperatorID
						except invoked.Approved
						except invoked.KilledQuantity
						except invoked.LastDistributionSequence
						except invoked.LastReturnSequence
						except invoked.ReturnQuantity
						except invoked.DetailReturnQuantity
						except invoked.OverrideCost
						except invoked.ItemType
						except invoked.Vendor
						except invoked.PurchaseFromLocation
						except invoked.AccruedTaxAmount
						except invoked.InvoicedTaxAmount
						except invoked.LineAddOnChargeTotal
						except invoked.LandedUnitCost
						except invoked.InterfaceCancelQuantity
						except invoked.PatientProcedure
						except invoked.CostCode
						except invoked.RequisitionSource
						except invoked.CatchWeightReturnQuantity
						except invoked.RequestedDeliveryDate
						except invoked.LateDeliveryDate
						except invoked.TransientAllocationPriorityLevel
						except invoked.ScheduledProcedure
						except invoked.ScheduledProcedureLine
						except invoked.PreferenceCardTransaction
					invoked.Company                 = PrmRequisition.Company
					invoked.Requisition             = PrmRequisition
					invoked.RequisitionLine			= 0
					invoked.RequestingLocation      = PrmRequisition.RequestingLocation
					invoked.ItemEntryMethod         = ItemEntryMethod.Item
					invoked.MajorPurchasingClass	= PrmMajorPurchasingClass
					invoked.MinorPurchasingClass    = PrmMinorPurchasingClass
					invoked.RequisitionSource		= PrmRequisitionSource
					invoked.RSSSourceInformation 	= PrmRSSSourceInformation


					if (PrmPurchaseTaxable entered
					and PurchaseTaxable not entered)
						invoked.PurchaseTaxable			= PrmPurchaseTaxable
					if (PrmPurchaseTaxCode entered
					and PurchaseTaxCode not entered)
						invoked.PurchaseTaxCode			= PrmPurchaseTaxCode
					if (PrmCommodityCode entered
					and CommodityCode not entered)
						invoked.CommodityCode			= PrmCommodityCode
					if (LocalInitializeContract)
						initialize invoked.Contract
						initialize invoked.ContractLine
						initialize invoked.Preferred
						initialize invoked.Tier

					if (PrmCreateRequisitionLineFromReturn)
						invoked.Quantity			= PrmReturnQuantity
						invoked.ReturnQuantity		= 0

					if (Contract entered)
					 	invoked.Vendor						= Vendor
						invoked.PurchaseFromLocation		= PurchaseFromLocation
					else
					if (Vendor entered)
						invoked.Vendor						= Vendor
						if (PurchaseFromLocation entered)
							invoked.PurchaseFromLocation	= PurchaseFromLocation
						else
						if (PrmPurchaseFromLocation entered
						and Vendor = PrmVendor)
							invoked.PurchaseFromLocation 	= PrmPurchaseFromLocation
					else
						invoked.Vendor						= PrmVendor
						invoked.PurchaseFromLocation		= PrmPurchaseFromLocation

					if (not ItemType.Inventoried)			
						invoked.ItemType = ItemType

					if (PrmFromLocationChanged)
						invoked.FromCompanyLocationBin = PrmRequisition.FromCompanyLocation


					if (not PrmCopyNonRSS)
						invoked.RequisitionSource       = RqSource.RequisitionSelfService

					if (PrmHeaderInfoChanged)
						invoked.LocalRecreateRequisitionLineDistribution = true

					if (PrmManufacturer entered)
						invoked.Manufacturer			= PrmManufacturer

					if (PrmManufacturerNumber entered)
						invoked.ManufacturerNumber		= PrmManufacturerNumber
					
					if (PrmRequisitionSource.RequisitionSelfService
					or initiating action = "Requisition.RSSLPLCopyRequisition"
					or initiating action = "Requisition.RSSLPLCopyAllLinesFromRequisitionUnreleased") 
						invoked.TransientRSSLPLRequisitionLineScreen = blank

				for each RequisitionLineCommentRel
					invoke Create RequisitionLineComment
						fill in fields from each
							except invoked.Attachment.FSMAttachmentIDM
						invoked.Requisition         = PrmRequisition
						invoked.RequisitionLine     = LocalRequisitionLine.RequisitionLine
						invoked.Attachment.File		= each.Attachment.File
						invoked.Attachment.MimeType	= each.Attachment.MimeType
						invoked.Attachment.Title	= each.Attachment.Title

				for each LineAddOnChargesRel
					invoke Create RequisitionLineAddOnCharge
						invoked.Company 				= PrmRequisition.Company
						invoked.Requisition				= PrmRequisition
						invoked.RequisitionLine			= LocalRequisitionLine.RequisitionLine
						invoked.AddOnCharge				= each.AddOnCharge
						if (each.AddOnChargeEntryMethod.UnitCost)
							invoked.EnteredUnitCost = each.EnteredUnitCost
						else
							if (each.AddOnChargeEntryMethod.RatePercentage)
								invoked.AddOnChargePercent = each.AddOnChargePercent
							else
								if (each.AddOnChargeEntryMethod.TotalAmount)
									invoked.TotalAddOnChargeAmount = each.TotalAddOnChargeAmount

				if (not PrmHeaderInfoChanged)
					if (not IsDistributionAllowed)
						if (DoDebug)
							display "DoNotCreateDistribution"
					else
						if (DistributionCode entered)

							if (DoDebug)
								display "CreatingRequisition\Line\DistributionFromDistributionCode"

							include CheckDistributionByFromDistributionCode

							LocalDistributionCode = DistributionCode
							for each PayablesDistributionCodeDetailsRel
								invoke Create RequisitionLineDistribution
									fill in fields from this instance
									invoked.Requisition                    = PrmRequisition
									invoked.RequisitionLine                = LocalRequisitionLine.RequisitionLine
									invoked.DistributionAccount            = each.DistributionAccount
									invoked.AssetInformation.Asset         = each.Asset
									invoked.AssetInformation.AssetTemplate = each.AssetTemplate
									invoked.DistributionPercent            = each.DistributionPercent
									invoked.DistributionAmount             = each.DistributionAmount
									invoked.TransientBypassCommittedContractValidation = true
									if (PrmGLEncumbranceReference entered)
										invoked.GLEncumbranceReference	= PrmGLEncumbranceReference
									if (PrmRequisitionSource.RequisitionSelfService
									or initiating action = "Requisition.RSSLPLCopyAllLinesFromRequisitionUnreleased") 
										invoked.TransientRSSLPLScreenOnDisplay = blank
						else
							if (DistributionAccountExists)
								if (DistributionBy.ByQuantity)
									LocalDistributionQuantity = LocalRequisitionLine.Quantity
								for each RequisitionLineDistributionsRel
									if (DistributionBy.ByQuantity
									and LocalDistributionQuantity not entered)
										end for each
									invoke Create RequisitionLineDistribution
										fill in fields from each
										invoked.Requisition                    = PrmRequisition
										invoked.RequisitionLine                = LocalRequisitionLine.RequisitionLine
										if (DistributionBy.ByAmount)
											invoked.DistributionAmount			= ((LocalRequisitionLine.Quantity * LocalRequisitionLine.TransactionUnitCost) * (each.DerivedDistributionAmount / DerivedDistributionTotal))
										else
										if (DistributionBy.ByQuantity
										and each.DistributionQuantity >= LocalDistributionQuantity)
											invoked.DistributionQuantity	= LocalDistributionQuantity
										invoked.TransientBypassCommittedContractValidation = true
										if (PrmGLEncumbranceReference entered)
											invoked.GLEncumbranceReference	= PrmGLEncumbranceReference

										if (PrmAsset entered)
											invoked.AssetInformation.Asset 			= PrmAsset

										if (PrmAssetTemplate entered)
											invoked.AssetInformation.AssetTemplate	= PrmAssetTemplate

										if (PrmRequisitionSource.RequisitionSelfService
										or initiating action = "Requisition.RSSLPLCopyAllLinesFromRequisitionUnreleased") 
											invoked.TransientRSSLPLScreenOnDisplay = blank

									if (DistributionBy.ByQuantity)
										if (each.DistributionQuantity >= LocalDistributionQuantity)
											initialize LocalDistributionQuantity
										else
											LocalDistributionQuantity -= each.DistributionQuantity
				LocalChangeInAmount = ApprovalValue
				LocalItemType 		= ItemType

				NewRequisitionLineFromCopy = LocalRequisitionLine.RequisitionLine

        ModalCopyRequisitionLine is an Instance Action
			restricted
       		default label is "AddItem_toRequisition"
        	completion message is "<SelectedItemsAddedMessage>"
        	disable multiple instance selection
            Local Fields
                LocalRequisition	           	is a Requisition view
                LocalRequisitionLine            is a RequisitionLine view
                LocalInitializeContract			is Boolean
			Parameters
				PrmCompany						is an InventoryCompany
                PrmRequestingLocation			is a RequestingLocation
				PrmRequisition                  is a Requisition
				PrmQuantity						is like UnsignedQuantity
					precision is DerivedNumberOfDecimalsQuantity
				PrmEnteredUOM                   is a UnitOfMeasure
				PrmTransactionUnitCost          is an UnsignedUnitCost
					precision is DerivedNumberOfDecimalsCost
				PrmTransactionCurrencyCode      is a Currency
				PrmAddToRequisition				is Numeric size 1
					States
						AddToExistingRequisition	value is 0
						StartNewRequisition			value is 1				
				PrmAllocationPriority			is an AllocationPriority
				PrmRequestedDeliveryDate		is Date
				PrmFromCompanyLocation 			is a FromCompanyLocation
				PrmRequisitionDescription		is Alpha size 30
				PrmRequisitionSource			is a RqSource
				PrmRSSSourceInformation			is Numeric size 1
					States
            			NotApplicable         	value is 0
            			SearchCatalog    		value is 1
						RecentlyRequestedItem   value is 2
            			ShoppingList    		value is 3
						Punchout				value is 4
						SpecialAndService		value is 5
						CopyRequisitionLine 	value is 6
				PrmAllocationPriorityLevel		is an AllocationPriorityLevel
				PrmBuyer						is a Buyer
				PrmCommodityCode				is a CommCodes
				PrmPOCode						is a POCode
				PrmDeliverTo					is a DeliverTo
				PrmVendor						is a Vendor
			Parameter Rules
				PrmCompany
					default to actor.agent(Employee).Employee.Requester.CurrentCompanyForRQC
                	initial value is actor.agent(Employee).Employee.Requester.CurrentCompanyForRQC
					default to actor.agent(Employee).Employee.Requester.Company
	            	initial value is actor.agent(Employee).Employee.Requester.Company					
				PrmRequisition
					if (PrmAddToRequisition.AddToExistingRequisition)
						required
							"FieldIsRequired"
						constraint(PrmRequisition.UpdateAllowed)
							"RequisitionMustBeUnreleased"
				PrmQuantity
					default to Quantity
					initial value is Quantity
				PrmEnteredUOM
					default to EnteredUOM
					initial value is EnteredUOM
				PrmAllocationPriority							
					if (RSSLPLConfigurationParameterRel exists)
						default to PrmAllocationPriorityLevel
						default to RSSLPLAllocationPriorityLevelRel.AllocationPriorityLevel
				PrmRequestedDeliveryDate
					if (PrmAddToRequisition.StartNewRequisition
					and RequesterRel.RequireRequestedDeliveryDate)
						required
							"Field_Requested_Delivery_DateIsRequired"
				PrmRequisitionDescription
					if (PrmAddToRequisition.StartNewRequisition
					and RequesterRel.RequireRequisitionDescription)
						required
							"Field_Requisition_DescriptionIsRequired"
				PrmBuyer
					initial value is PrmRequestingLocation.Buyer

					if (PrmAddToRequisition.StartNewRequisition
					and RequesterRel.RequireBuyer)
						required
							"Field_BuyerIsRequired"
				PrmPOCode
					initial value is PrmRequestingLocation.POCode

					if (PrmAddToRequisition.StartNewRequisition
					and RequesterRel.RequirePOCode)
						required
							"Field_PO_CodeIsRequired"
				PrmCommodityCode
					initial value is Item.CommodityCode

					if (PrmAddToRequisition.StartNewRequisition
					and RequesterRel.RequireCommodityCodeDisplay)
						required
							"Field_Commodity_CodeIsRequired"
				PrmDeliverTo
					if (PrmAddToRequisition.StartNewRequisition
					and RequesterRel.RequireDeliverTo)
						required
							"Field_Deliver_ToIsRequired"
	            PrmVendor
					if (PrmAddToRequisition.StartNewRequisition
					and (RequesterRel.RequireVendor 
					and not SourcingEventRequired))
						required
							"Field_VendorIsRequired"
            Entrance Rules
            	constraint(!CostCode.Punchout)
            		"CannotCopyALineCreatedFromPunchout"
         	
            Action Rules
				PrmRSSSourceInformation 	= PrmRSSSourceInformation.RecentlyRequestedItem
				PrmRequisitionSource 		= RqSource.RequisitionSelfService

            	include CopyLineInformation
            		
	        Exit Rules
				invoke UpdateCurrentRequisitionForRQC this instance.RequesterRel
					invoked.PrmCompany				= PrmCompany
					invoked.PrmRequisition     		= NewRequisitionFromCopy
				
       	ModalCopyMultipleRequisitionLines is an Instance Action
     		default label is "AddSelected_toRequisition"
        	completion message is "SelectedItemsAdded_toRequisition"
			Parameters
				PrmCompany						is an InventoryCompany
                PrmRequestingLocation			is a RequestingLocation
				PrmRequisition                  is a Requisition
			 	PrmAddToRequisition				is Numeric size 1
					States
						AddToExistingRequisition	value is 0
						StartNewRequisition			value is 1				
				PrmAllocationPriority			is an AllocationPriority
				PrmRequestedDeliveryDate		is Date
				PrmFromCompanyLocation 			is a FromCompanyLocation
				PrmRequisitionDescription			is Alpha size 30
				PrmRequisitionSource			is a RqSource
				PrmRSSSourceInformation			is Numeric size 1
					States
            			NotApplicable         	value is 0
            			SearchCatalog    		value is 1
						RecentlyRequestedItem   value is 2
            			ShoppingList    		value is 3
						Punchout				value is 4
						SpecialAndService		value is 5
						CopyRequisitionLine 	value is 6
				PrmAllocationPriorityLevel		is an AllocationPriorityLevel
				PrmBuyer						is a Buyer
				PrmCommodityCode				is a CommCodes
				PrmPOCode						is a POCode
				PrmDeliverTo					is a DeliverTo
				PrmVendor						is a Vendor
            Local Fields
                LocalRequisition	           	is a Requisition view
                LocalRequisitionLine            is a RequisitionLine view
                LocalInitializeContract			is Boolean
				PrmQuantity						is like Quantity
				PrmEnteredUOM               	is a UnitOfMeasure
				PrmTransactionUnitCost          is an UnsignedUnitCost
					precision is DerivedNumberOfDecimalsCost
				PrmTransactionCurrencyCode      is a Currency
			Parameter Rules
				PrmCompany
					default to actor.agent(Employee).Employee.Requester.CurrentCompanyForRQC
                	initial value is actor.agent(Employee).Employee.Requester.CurrentCompanyForRQC
					default to actor.agent(Employee).Employee.Requester.Company
	            	initial value is actor.agent(Employee).Employee.Requester.Company					
				PrmRequisition
					if (PrmAddToRequisition.AddToExistingRequisition)
						required
							"FieldIsRequired"
						constraint(PrmRequisition.UpdateAllowed)
							"RequisitionMustBeUnreleased"
				PrmAllocationPriority							
					if (RSSLPLConfigurationParameterRel exists)
						default to PrmAllocationPriorityLevel
						default to RSSLPLAllocationPriorityLevelRel.AllocationPriorityLevel
				PrmBuyer
					initial value is PrmRequestingLocation.Buyer

					if (PrmAddToRequisition.StartNewRequisition
					and RequesterRel.RequireBuyer)
						required
							"Field_BuyerIsRequired"
				PrmPOCode
					initial value is PrmRequestingLocation.POCode

					if (PrmAddToRequisition.StartNewRequisition
					and RequesterRel.RequirePOCode)
						required
							"Field_PO_CodeIsRequired"
				PrmCommodityCode
					if (PrmAddToRequisition.StartNewRequisition
					and RequesterRel.RequireCommodityCodeDisplay)
						required
							"Field_Commodity_CodeIsRequired"
				PrmDeliverTo
					if (PrmAddToRequisition.StartNewRequisition
					and RequesterRel.RequireDeliverTo)
						required
							"Field_Deliver_ToIsRequired"
	            PrmVendor
					if (PrmAddToRequisition.StartNewRequisition
					and (RequesterRel.RequireVendor 
					and not SourcingEventRequired))
						required
							"Field_VendorIsRequired"

				PrmRequestedDeliveryDate
					if (PrmAddToRequisition.StartNewRequisition
					and RequesterRel.RequireRequestedDeliveryDate)
						required
							"Field_Requested_Delivery_DateIsRequired"
				
				PrmRequisitionDescription
					if (PrmAddToRequisition.StartNewRequisition
					and RequesterRel.RequireRequisitionDescription)
						required
							"Field_Requisition_DescriptionIsRequired"
            Entrance Rules
            	constraint(!CostCode.Punchout)
            		"CannotCopyALineCreatedFromPunchout"           	
            	
            Action Rules            	
				PrmRSSSourceInformation 	= PrmRSSSourceInformation.RecentlyRequestedItem
				PrmRequisitionSource 		= RqSource.RequisitionSelfService       	
            	      	
            	include CopyLineInformation
            		
	        Exit Rules
				invoke UpdateCurrentRequisitionForRQC this instance.RequesterRel
					invoked.PrmCompany				= actor.agent(Employee).Employee.Requester.Company
					invoked.PrmRequisition     		= NewRequisitionFromCopy

       	NonModalCopyRequisitionLine is an Instance Action
     		default label is "AddSelected_toRequisition"
        	completion message is "<LocalCompletionMessage>"
            Local Fields
                LocalRequisition	           	is a Requisition view
                LocalRequisitionLine            is a RequisitionLine view
                LocalInitializeContract			is Boolean
                PrmCompany						is like Company
                PrmRequestingLocation			is like RequestingLocation
                PrmRequisition					is like Requisition	
				PrmQuantity						is like Quantity
				PrmEnteredUOM               	is a UnitOfMeasure
				PrmAllocationPriority			is an AllocationPriority
				PrmRequestedDeliveryDate		is Date
				PrmFromCompanyLocation 			is a FromCompanyLocation
				PrmTransactionUnitCost          is an UnsignedUnitCost
					precision is DerivedNumberOfDecimalsCost
				PrmTransactionCurrencyCode      is a Currency
				PrmRequisitionDescription		is Alpha size 30
				PrmAddToRequisition				is Numeric size 1
					States
						AddToExistingRequisition	value is 0
						StartNewRequisition			value is 1				
				PrmRequisitionSource			is a RqSource
				PrmRSSSourceInformation			is Numeric size 1
					States
            			NotApplicable         	value is 0
            			SearchCatalog    		value is 1
						RecentlyRequestedItem   value is 2
            			ShoppingList    		value is 3
						Punchout				value is 4
						SpecialAndService		value is 5
						CopyRequisitionLine 	value is 6			
				PrmAllocationPriorityLevel		is an AllocationPriorityLevel
				PrmBuyer						is a Buyer
				PrmCommodityCode				is a CommCodes
				PrmPOCode						is a POCode
				PrmDeliverTo					is a DeliverTo
				PrmVendor						is a Vendor
            Entrance Rules
            	constraint(!CostCode.Punchout)
            		"CannotCopyALineCreatedFromPunchout"
            	
            Action Rules
            	if (actor.agent(Employee).Employee.Requester.CurrentCompanyForRQC entered)
            		PrmCompany = actor.agent(Employee).Employee.Requester.CurrentCompanyForRQC
            		PrmRequestingLocation = actor.agent(Employee).Employee.Requester.RequisitionRel.RequestingLocation
	            	PrmRequisition = actor.agent(Employee).Employee.Requester.CurrentRequisitionForRQC
					PrmRequisitionSource 		= RqSource.RequisitionSelfService
					PrmRSSSourceInformation 	= PrmRSSSourceInformation.RecentlyRequestedItem
            	else
            		PrmCompany = actor.agent(Employee).Employee.Requester.Company
            		PrmRequestingLocation = actor.agent(Employee).Employee.Requester.RequestingLocation
					PrmAddToRequisition = PrmAddToRequisition.StartNewRequisition
					PrmRequisitionSource 		= RqSource.RequisitionSelfService
					PrmRSSSourceInformation 	= PrmRSSSourceInformation.RecentlyRequestedItem

				LocalCompletionMessage = SelectedItemsAddedMessage
				LocalCompanyForQuantityAdd = actor.agent(Employee).Employee.Requester.CurrentCompanyForRQC
				LocalCostUOMForQuantityAdd = EnteredUOM
				LocalRequisitionForQuantityAdd = actor.agent(Employee).Employee.Requester.CurrentRequisitionForRQC






				if (RequisitionLineItemRel exists
				and RequesterRel.ValidateDuplicateItem
				and !IsServiceItemByAmount)
					LocalCompletionMessage = ItemUpdatedMessage
					invoke RSSLPLUpdateRequisitionLineQTY RequisitionLineItemMatchRel
						invoked.PrmQuantity							= RequisitionLineItemMatchRel.Quantity + Quantity
						invoked.PrmUOM								= RequisitionLineItemMatchRel.EnteredUOM
				else
            		include CopyLineInformation
            		
	        Exit Rules
				if (!RequisitionLineItemRel exists
				and RequesterRel.ValidateDuplicateItem
				and !IsServiceItemByAmount)
					invoke UpdateCurrentRequisitionForRQC this instance.RequesterRel
						if (RequesterRel.CurrentCompanyForRQC entered)
							invoked.PrmCompany			= RequesterRel.CurrentCompanyForRQC
						else
							invoked.PrmCompany			= actor.agent(Employee).Employee.Requester.Company
						invoked.PrmRequisition     		= NewRequisitionFromCopy
		
		RSSLPLAddNewSpecialServiceToNewRequisition is a Create Action
			default label is "CreateNew"
			valid when (not RSSLPLCurrentRequisitionForRQCEntered)
            Local Fields
            	LocalRequisitionView 				is a Requisition view
                LocalRequisition					is a Requisition
			Parameters
				PrmCompany							is an InventoryCompany
					default label is "Company"
                PrmRequestingLocation				is a RequestingLocation
					default label is "RequestingLocation"
				PrmRequisition                  	is a Requisition
					default label is "Requisition"
				PrmAddToRequisition					is Numeric size 1
					States
						AddToExistingRequisition	value is 0
						StartNewRequisition			value is 1				
				PrmAllocationPriority				is an AllocationPriority
				PrmFromCompanyLocation 				is a FromCompanyLocation
				PrmDate								is Date
				PrmRequisitionDescription			is Alpha size 30
				PrmItemType							is AlphaUpper size 1
					default label is "Select_Item_Type"
					States
           				Special				value is "X"
           				ServiceByAmount 	value is "A"
						ServiceByQuantity	value is "Q"
				PrmItemDescription					is 	Alpha size up to 60
					default label is "Item_Description"
				PrmItem								is like Item
					default label is "Item"
				PrmVendorItem						is like VendorItem
					default label is "Vendor_Item"
				PrmRequestedDeliveryDate			is Date
					default label is "Requester_Delivery_Date"
				PrmQuantity							is a UnsignedQuantity
					precision is RequesterRel.RequestingLocation.FromCompanyLocation.FromCompany.NumberOfDecimalsQuantity
					default label is "Quantity"
				PrmUOM								is a UnitOfMeasure
					default label is "UOM"
				PrmTransactionUnitCost				is an UnsignedUnitCost
					precision is RequesterRel.RequestingLocation.FromCompanyLocation.FromCompany.NumberOfDecimalsCost
					default label is "Cost"
				PrmTransactionCurrencyCode			is a Currency
					default label is "Currency"
				PrmCostOption						is a CostOption
					default label is "Cost_Option"
				PrmDeliverTo						is a DeliverTo
					default label is "Deliver_To"
				PrmLineVendor						is a Vendor
					default label is "Vendor"
				PrmLineVendorPurchaseFrom			is a VendorLocation
					default label is "Vendor_Purchase_From"
				PrmManufacturer						is a Manufacturer
					default label is "Manufacturer"
				PrmManufacturerNumber				is a ManufacturerNumber
					default label is "ManufacturerNumber"
				PrmGLEncumbranceReference			is AlphaUpper size 60
					default label is "GLEncumbranceReference"
				PrmLineDistribution					is a FinanceCodeBlock
					default label is "DistributionAccount"
				PrmAsset							is an Asset
					default label is "Asset"
				PrmAssetTemplate					is an AssetTemplate
					default label is "Asset_Template"
				PrmLineCommodityCode				is a CommCodes
					default label is "CommodityCode"
				PrmLinePurchaseTaxable				is Numeric size 1
					default label is "Taxable"
					States
						Yes			value is 1
						TaxExempt	value is 2
				PrmLinePurchaseTaxCode				is a TaxCode
					default label is "TaxCode"
				PrmLineSourcingEventRequired		is Boolean
					default label is "SourcingEventRequired"
				PrmItemGTIN							is like ItemGTIN
					default label is "GTIN"
				PrmEnterDistribution				is Boolean
					default label is "EnterDistribution"
				PrmEnterComments					is Boolean
					default label is "EnterComments"
				PrmLineConsignCode					is a ConsignCode
					default label is "BillCode"
				PrmLineCommentText					is a CommentText
					default label is "Notes"
				PrmLineAttachment					is BinaryDocument
					default label is "Attachment"
				PrmLineFromCompanyLocation			is a FromCompanyLocation
				PrmLineAllocationPriority			is like AllocationPriority
					default label is "Priority"
				PrmMajorPurchasingClass				is a MajorPurchasingClass
					default label is "MajorPurchasingClass"
				PrmMinorPurchasingClass				is a MinorPurchasingClass
					default label is "MinorPurchasingClass"
				PrmLinePOCode						is a POCode
					default label is "POCode"
				PrmRequisitionSource			is a RqSource
				PrmRSSSourceInformation			is Numeric size 1
					States
            			NotApplicable         	value is 0
            			SearchCatalog    		value is 1
						RecentlyRequestedItem   value is 2
            			ShoppingList    		value is 3
						Punchout				value is 4
						SpecialAndService		value is 5
						CopyRequisitionLine 	value is 6	
				PrmVendorRequiredForSpecials	is Boolean
				PrmVendorRequiredForServices	is Boolean
				PrmAllocationPriorityLevel			is an AllocationPriorityLevel
				PrmLineAllocationPriorityLevel		is an AllocationPriorityLevel
					default label is "Priority"	
				PrmHeaderBuyer					is a Buyer
				PrmHeaderPOCode					is a POCode
				PrmHeaderDeliverTo				is a DeliverTo
				PrmHeaderCommodityCode			is a CommCodes	
			Parameter Rules
				PrmCompany
				    default to RequesterRel.Company
				    initial value is RequesterRel.Company

				PrmRequestingLocation
            		default to PrmRequisition.RequestingLocation
            		initial value is PrmRequisition.RequestingLocation
            		default to RequesterRel.RequestingLocation
            		initial value is RequesterRel.RequestingLocation
					
				PrmRequisition
					if (PrmAddToRequisition.AddToExistingRequisition)
						required
							"FieldIsRequired"
						constraint(PrmRequisition.UpdateAllowed)
							"RequisitionMustBeUnreleased"

				PrmFromCompanyLocation
					initial value is PrmRequestingLocation.FromCompanyLocation
					default to PrmRequestingLocation.FromCompanyLocation
						default individual fields

				PrmItemType
					initial value is "X"
					default to "X"

				PrmQuantity
					initial value is 1
					default to 1

				PrmLineDistribution
					initial value is PrmRequisition.DefaultDistributionAccount
					default to PrmRequisition.DefaultDistributionAccount
					default to RequesterRel.RequestingLocation.IssueAccount

				PrmLineFromCompanyLocation
					initial value is PrmRequestingLocation.FromCompanyLocation
					default to PrmRequestingLocation.FromCompanyLocation
						default individual fields

				PrmLineVendor
					initial value is PrmRequisition.Vendor

					if (RequesterRel.RequireVendorForSpecials
					and PrmItemType.Special)
						required
							"RequesterSetup:VendorIsRequiredForSpecialTypeItems"
					if  (RequesterRel.RequireVendorForServices
					and (PrmItemType.ServiceByAmount
					or   PrmItemType.ServiceByQuantity))
						required
							"RequesterSetup:VendorIsRequiredForServiceTypeItems"
					if (RequesterRel.RequireVendor)
						required
							"Field_VendorIsRequired"

				PrmVendorItem
					if (RequesterRel.RequireVendorItem)
						required
							"Field_Vendor_ItemIsRequired"
					initial value is PrmItem
					default to PrmItem

				PrmLineAllocationPriority
					if (RSSLPLConfigurationParameterRel exists)
						default to PrmLineAllocationPriorityLevel
						default to PrmAllocationPriorityLevel
			
				PrmAllocationPriority							
					if (RSSLPLConfigurationParameterRel exists)
						default to PrmAllocationPriorityLevel
						default to RSSLPLAllocationPriorityLevelRel.AllocationPriorityLevel
				
				PrmLineCommodityCode
					initial value is PrmRequisition.CommodityCode
					if (RequesterRel.RequireCommodityCodeDisplay)
						required
							"Field_Commodity_CodeIsRequired"
					
				PrmAsset
					if (RequesterRel.RequireAsset)
						required
							"Field_AssetIsRequired"
				
				PrmAssetTemplate
					if (RequesterRel.RequireAssetTemplate)
						required
							"Field_Asset_TemplateIsRequired"

				PrmHeaderDeliverTo
					if (PrmAddToRequisition.StartNewRequisition
					and RequesterRel.RequireDeliverTo)
						required
							"Field_Deliver_ToIsRequired"
				
				PrmHeaderCommodityCode
					if (PrmAddToRequisition.StartNewRequisition
					and RequesterRel.RequireCommodityCodeDisplay)
						required
							"Field_Commodity_CodeIsRequired"
				PrmHeaderPOCode
					initial value is PrmRequestingLocation.POCode

					if (PrmAddToRequisition.StartNewRequisition
					and RequesterRel.RequirePOCode)
						required
							"Field_P\O_CodeIsRequired"
				PrmHeaderBuyer
					initial value is PrmRequestingLocation.Buyer

					if (PrmAddToRequisition.StartNewRequisition
					and RequesterRel.RequireBuyer)
						required
							"Field_BuyerIsRequired"

				PrmDeliverTo
					initial value is PrmRequisition.DeliverTo

					if (RequesterRel.RequireDeliverTo)
						required
							"Field_Deliver_ToIsRequired"
				
				PrmRequestedDeliveryDate
					initial value is PrmRequisition.RequestedDeliveryDate

					if (RequesterRel.RequireRequestedDeliveryDate)
						required
							"Field_Requested_Delivery_DateIsRequired"
				
				PrmDate
					if (PrmAddToRequisition.StartNewRequisition
					and RequesterRel.RequireRequestedDeliveryDate)
						required
							"Field_Requested_Delivery_DateIsRequired"
				
				PrmRequisitionDescription
					if (PrmAddToRequisition.StartNewRequisition
					and RequesterRel.RequireRequisitionDescription)
						required
							"Field_Requisition_DescriptionIsRequired"
				
				PrmManufacturer
					if (RequesterRel.RequireManufacturer)
						required
							"Field_ManufacturerIsRequired"

				PrmManufacturerNumber
					if (RequesterRel.RequireManufacturerNumber)
						required
							"Field_Manufacturer_NumberIsRequired"

				PrmLinePOCode
					initial value is PrmRequisition.POCode
					
					if (RequesterRel.RequirePOCode)
						required
							"Field_P\O_CodeIsRequired"

				PrmMajorPurchasingClass
					if (RequesterRel.RequireMajorPurchaseClasses)
						required
							"Field_Major_Purchasing_ClassIsRequired"

				PrmMinorPurchasingClass
					if (RequesterRel.RequireMinorPurchaseClasses)
						required
							"Field_Minor_Purchasing_ClassIsRequired"
				
				PrmGLEncumbranceReference
					if (RequesterRel.RequireGLEncumbranceReference)
						required
							"Field_GL_Encumbrance_ReferenceIsRequired"
				
				PrmLineVendorPurchaseFrom
					initial value is PrmRequisition.PurchaseFromLocation
					default to PrmRequisition.PurchaseFromLocation

				PrmLinePurchaseTaxable
					initial value is PrmRequisition.PurchaseTaxable
					if (!PrmCostOption.NoCharge)
						default to PrmRequisition.PurchaseTaxable
				
				PrmLinePurchaseTaxCode
					initial value is PrmRequisition.PurchaseTaxCode
					if (!PrmCostOption.NoCharge)
						default to PrmRequisition.PurchaseTaxCode
				
				PrmLineSourcingEventRequired
					initial value is PrmRequisition.SourcingEventRequired
					default to PrmRequisition.SourcingEventRequired
				
				PrmLineConsignCode
					initial value is PrmRequisition.DefaultBillCode
					default to PrmRequisition.DefaultBillCode

			Action Rules

				LocalRSSLPLSpecialItemGroup			= PrmFromCompanyLocation.FromCompany.ItemGroup
				LocalRSSLPLSpecialItem				= PrmItem
				LocalRSSLPLSpecialItemDescription	= PrmItemDescription

				if (RequesterRel.DerivedSpecialItemValidation = "W"
				and (RSSLPLByShadowItemItemDescriptionRel exists
				or RSSLPLByContractLineItemDescriptionRel exists))
					confirmation required
						"YourDescriptionMatchesOneOrMoreItemsInTheCatalog\.Proceed\?"

				if (RequesterRel.DerivedSpecialItemValidation = "W"
				and (RSSLPLByShadowItemItemRel exists
				or RSSLPLByContractLineItemItemRel exists))
					confirmation required
						"Warning:ItemExistsInCatalog\._Proceed\?"

				if (PrmAddToRequisition.StartNewRequisition)
					if (PrmRequisition = RequesterRel.CurrentRequisitionForRQC)
		            	invoke Create Requisition
	    	            	assign result to LocalRequisitionView
		    	            invoked.Company					= PrmCompany
		        	        invoked.RequestingLocation		= PrmRequestingLocation
							invoked.AllocationPriority				 	= PrmAllocationPriority
							if (RSSLPLConfigurationParameterRel exists)
								invoked.TransientAllocationPriorityLevel 	= PrmAllocationPriority
							invoked.RequestedDeliveryDate	= PrmDate
							invoked.RequisitionDescription	= PrmRequisitionDescription
							if (PrmFromCompanyLocation entered)
								invoked.FromCompanyLocation	= PrmFromCompanyLocation
							invoked.RequisitionSource		= RqSource.RequisitionSelfService
							invoked.DeliverTo				= PrmHeaderDeliverTo
							invoked.CommodityCode			= PrmHeaderCommodityCode
							invoked.POCode					= PrmHeaderPOCode
							invoked.Buyer					= PrmHeaderBuyer
		               	LocalRequisition = LocalRequisitionView.Requisition
		               	PrmRequisition   = LocalRequisitionView.Requisition
					else
						LocalRequisition = RequesterRel.CurrentRequisitionForRQC
	           	else
	          		LocalRequisition = PrmRequisition

				invoke Create this instance
					invoked.Company								= LocalRequisition.Company
					invoked.Requisition							= LocalRequisition
					if (PrmItemType.Special)
						invoked.ItemType						= "X"
					else 
					if (PrmItemType.ServiceByAmount)
						invoked.ItemType						= "S"
						invoked.ServiceCode						= "A"
						initialize PrmQuantity
					else
					if (PrmItemType.ServiceByQuantity)
						invoked.ItemType						= "S"
						invoked.ServiceCode						= "Q"
					invoked.Item								= PrmItem
					invoked.Description							= PrmItemDescription
					if (PrmVendorItem not entered)
						invoked.VendorItem						= PrmItem
					else
						invoked.VendorItem						= PrmVendorItem
					invoked.Quantity							= PrmQuantity
					invoked.EnteredUOM							= PrmUOM
					invoked.TransactionUnitCost					= PrmTransactionUnitCost
					invoked.TransactionCurrencyCode				= PrmTransactionCurrencyCode
					invoked.CostOption							= PrmCostOption
					invoked.RequestedDeliveryDate				= PrmRequestedDeliveryDate
					invoked.DeliverTo							= PrmDeliverTo
					invoked.AllocationPriority				 	= PrmLineAllocationPriority
					if (RSSLPLConfigurationParameterRel exists)
						invoked.TransientAllocationPriorityLevel = PrmLineAllocationPriority
					invoked.VendorItem							= PrmVendorItem
					invoked.Vendor								= PrmLineVendor
					invoked.PurchaseFromLocation				= PrmLineVendorPurchaseFrom
					invoked.FromCompanyLocationBin				= PrmLineFromCompanyLocation
					invoked.Manufacturer						= PrmManufacturer
					invoked.ManufacturerNumber					= PrmManufacturerNumber
					invoked.TransientPurchaseTaxable   			= PrmLinePurchaseTaxable
					invoked.PurchaseTaxCode						= PrmLinePurchaseTaxCode
					invoked.CommodityCode						= PrmLineCommodityCode
					invoked.MajorPurchasingClass				= PrmMajorPurchasingClass
					invoked.MinorPurchasingClass				= PrmMinorPurchasingClass
					invoked.ItemGTIN							= PrmItemGTIN
					invoked.SourcingEventRequired				= PrmLineSourcingEventRequired
					invoked.ConsignCode							= PrmLineConsignCode
					invoked.POCode								= PrmLinePOCode
					invoked.EnteredAsset						= PrmAsset
					invoked.EnteredAssetTemplate				= PrmAssetTemplate
					invoked.EnteredGLEncumbranceReference		= PrmGLEncumbranceReference
					invoked.EnteredToAccountingEntity			= PrmLineDistribution.ToAccountingEntity
					invoked.EnteredGeneralLedgerChartAccount	= PrmLineDistribution.GeneralLedgerChartAccount
					invoked.EnteredAccountingUnit				= PrmLineDistribution.AccountingUnit
					invoked.EnteredProject						= PrmLineDistribution.Project
					invoked.EnteredFinanceDimension1			= PrmLineDistribution.FinanceDimension1
					invoked.EnteredFinanceDimension2			= PrmLineDistribution.FinanceDimension2
					invoked.EnteredFinanceDimension3			= PrmLineDistribution.FinanceDimension3
					invoked.EnteredFinanceDimension4			= PrmLineDistribution.FinanceDimension4
					invoked.EnteredFinanceDimension5			= PrmLineDistribution.FinanceDimension5
					invoked.EnteredFinanceDimension6			= PrmLineDistribution.FinanceDimension6
					invoked.EnteredFinanceDimension7			= PrmLineDistribution.FinanceDimension7
					invoked.EnteredFinanceDimension8			= PrmLineDistribution.FinanceDimension8
					invoked.EnteredFinanceDimension9			= PrmLineDistribution.FinanceDimension9
					invoked.EnteredFinanceDimension10			= PrmLineDistribution.FinanceDimension10
					invoked.RSSSourceInformation				= PrmRSSSourceInformation.SpecialAndService
					invoked.RequisitionSource					= RqSource.RequisitionSelfService


				if (PrmLineCommentText entered
				or PrmLineAttachment entered)
					invoke Create RequisitionLineComment
						fill in fields from this instance
						if (PrmLineCommentText entered)
							invoked.CommentTitle 		= RSSLPLRequisitionLineComment
							invoked.CommentType  		= RequesterRel.DerivedDefaultCommentType
							invoked.CommentText  		= PrmLineCommentText
						if (PrmLineAttachment entered)
							invoked.Attachment.File		= PrmLineAttachment	

			Exit Rules
				invoke UpdateCurrentRequisitionForRQC RequesterRel
						invoked.PrmCompany				= PrmCompany
						invoked.PrmRequisition     		= LocalRequisition

		RSSLPLAddNewSpecialServiceToRequisition is a Create Action
			default label is "CreateNew"
			valid when (RSSLPLCurrentRequisitionForRQCEntered)
            Local Fields
            	LocalRequisitionView 				is a Requisition view
                LocalRequisition					is a Requisition
			Parameters
				PrmCompany							is an InventoryCompany
					default label is "Company"
                PrmRequestingLocation				is a RequestingLocation
					default label is "RequestingLocation"
				PrmRequisition                  	is a Requisition
					default label is "Requisition"
				PrmAddToRequisition					is Numeric size 1
					States
						AddToExistingRequisition	value is 0
						StartNewRequisition			value is 1				
				PrmAllocationPriority				is an AllocationPriority
				PrmFromCompanyLocation 				is a FromCompanyLocation
				PrmDate								is Date
				PrmRequisitionDescription			is Alpha size 30
				PrmItemType							is AlphaUpper size 1
					default label is "ItemType"
					States
           				Special     		value is "X"
           				ServiceByAmount     value is "A"
						ServiceByQuantity	value is "Q"
				PrmItemDescription					is 	Alpha size up to 60
					default label is "Item_Description"
				PrmItem								is like Item
					default label is "Item"
				PrmVendorItem						is like VendorItem
					default label is "Vendor_Item"
				PrmRequestedDeliveryDate			is Date
					default label is "Requested_Delivery_Date"
				PrmQuantity							is a UnsignedQuantity
					precision is RequesterRel.RequestingLocation.FromCompanyLocation.FromCompany.NumberOfDecimalsQuantity
					default label is "Quantity"
				PrmUOM								is a UnitOfMeasure
					default label is "UOM"
				PrmTransactionUnitCost				is an UnsignedUnitCost
					precision is RequesterRel.RequestingLocation.FromCompanyLocation.FromCompany.NumberOfDecimalsCost
					default label is "Cost"
				PrmTransactionCurrencyCode			is a Currency
					default label is "Currency"
				PrmCostOption						is a CostOption
					default label is "Cost_Option"
				PrmDeliverTo						is a DeliverTo
					default label is "Deliver_To"
				PrmLineVendor						is a Vendor
					default label is "Vendor"
				PrmLineVendorPurchaseFrom			is a VendorLocation
					default label is "Vendor_Purchase_From"
				PrmManufacturer						is a Manufacturer
					default label is "Manufacturer"
				PrmManufacturerNumber				is a ManufacturerNumber
					default label is "ManufacturerNumber"
				PrmGLEncumbranceReference			is AlphaUpper size 60
					default label is "GLEncumbranceReference"
				PrmLineDistribution					is a FinanceCodeBlock
					default label is "DistributionAccount"
				PrmAsset							is an Asset
					default label is "Asset"
				PrmAssetTemplate					is an AssetTemplate
					default label is "Asset_Template"
				PrmLineCommodityCode				is a CommCodes
					default label is "CommodityCode"
				PrmLinePurchaseTaxable				is Numeric size 1
					default label is "Taxable"
					States
						Yes			value is 1
						TaxExempt	value is 2
				PrmLinePurchaseTaxCode				is a TaxCode
					default label is "TaxCode"
				PrmLineSourcingEventRequired		is Boolean
					default label is "SourcingEventRequired"
				PrmItemGTIN							is like ItemGTIN
					default label is "GTIN"
				PrmEnterDistribution				is Boolean
					default label is "EnterDistribution"
				PrmEnterComments					is Boolean
					default label is "EnterComments"
				PrmLineConsignCode					is a ConsignCode
					default label is "BillCode"
				PrmLineCommentText					is a CommentText
					default label is "Notes"
				PrmLineAttachment					is BinaryDocument
					default label is "Attachment"
				PrmLineFromCompanyLocation			is a FromCompanyLocation
				PrmLineAllocationPriority			is like AllocationPriority
					default label is "Priority"
				PrmMajorPurchasingClass				is a MajorPurchasingClass
					default label is "MajorPurchasingClass"
				PrmMinorPurchasingClass				is a MinorPurchasingClass
					default label is "MinorPurchasingClass"
				PrmLinePOCode						is a POCode
					default label is "POCode"
				PrmRequisitionSource			is a RqSource
				PrmRSSSourceInformation			is Numeric size 1
					States
            			NotApplicable         	value is 0
            			SearchCatalog    		value is 1
						RecentlyRequestedItem   value is 2
            			ShoppingList    		value is 3
						Punchout				value is 4
						SpecialAndService		value is 5
						CopyRequisitionLine 	value is 6
				PrmVendorRequiredForSpecials	is Boolean
				PrmVendorRequiredForServices	is Boolean
				PrmLineAllocationPriorityLevel		is an AllocationPriorityLevel
					default label is "Priority"
			Parameter Rules

				PrmRequisition
					initial value is RequesterRel.CurrentRequisitionForRQC
					default to RequesterRel.CurrentRequisitionForRQC

				PrmCompany
					initial value is RequesterRel.CurrentCompanyForRQC
					default to RequesterRel.CurrentCompanyForRQC

				PrmRequestingLocation
            		initial value is PrmRequisition.RequestingLocation
            		default to PrmRequisition.RequestingLocation
					
				PrmFromCompanyLocation
					default to  PrmRequisition.FromCompanyLocation
						default individual fields

				PrmItemType
					initial value is "X"
					default to "X"

				PrmQuantity
					initial value is 1
					default to 1

				PrmLineDistribution
					initial value is RequesterRel.RequisitionRel.DefaultDistributionAccount
					default to RequesterRel.RequisitionRel.DefaultDistributionAccount
					default to RequesterRel.RequisitionRel.RequestingLocation.IssueAccount

				PrmLineFromCompanyLocation
					initial value is RequesterRel.RequisitionRel.FromCompanyLocation
					default to RequesterRel.RequisitionRel.FromCompanyLocation
						default individual fields

				PrmLineVendor
					initial value is RequesterRel.RequisitionRel.Vendor

					if (RequesterRel.RequireVendorForSpecials
					and PrmItemType.Special)
						required
							"RequesterSetup:VendorIsRequiredForSpecialTypeItems"
					if  (RequesterRel.RequireVendorForServices
					and (PrmItemType.ServiceByAmount
					or   PrmItemType.ServiceByQuantity))
						required
							"RequesterSetup:VendorIsRequiredForServiceTypeItems"
					if (RequesterRel.RequireVendor)
						required
							"Field_VendorIsRequired"

				PrmLineVendorPurchaseFrom
					initial value is RequesterRel.RequisitionRel.PurchaseFromLocation

				PrmVendorItem
					if (RequesterRel.RequireVendorItem)
						required
							"Field_Vendor_ItemIsRequired"
					initial value is PrmItem
					default to PrmItem
				
				PrmLinePOCode
					initial value is RequesterRel.RequisitionRel.POCode

					if (RequesterRel.RequirePOCode)
						required
							"Field_P\O_CodeIsRequired"
				
				PrmLinePurchaseTaxCode
					initial value is RequesterRel.RequisitionRel.PurchaseTaxCode
					if (!PrmCostOption.NoCharge)
						default to RequesterRel.RequisitionRel.PurchaseTaxCode
				
				PrmLinePurchaseTaxable
					initial value is RequesterRel.RequisitionRel.PurchaseTaxable
					if (!PrmCostOption.NoCharge)
						default to RequesterRel.RequisitionRel.PurchaseTaxable

				PrmLineAllocationPriority
					if (RSSLPLConfigurationParameterRel exists
					and PrmLineAllocationPriorityLevel entered)
						default to PrmLineAllocationPriorityLevel
				
				PrmLineCommodityCode
					initial value is RequesterRel.RequisitionRel.CommodityCode
					
					if (RequesterRel.RequireCommodityCodeDisplay)
						required
							"Field_Commodity_CodeIsRequired"
					
				PrmAsset
					if (RequesterRel.RequireAsset)
						required
							"Field_AssetIsRequired"
				
				PrmAssetTemplate
					if (RequesterRel.RequireAssetTemplate)
						required
							"Field_Asset_TemplateIsRequired"

				PrmDeliverTo
					initial value is RequesterRel.RequisitionRel.DeliverTo

					if (RequesterRel.RequireDeliverTo)
						required
							"Field_Deliver_ToIsRequired"
				
				PrmRequestedDeliveryDate
					initial value is RequesterRel.RequisitionRel.RequestedDeliveryDate

					if (RequesterRel.RequireRequestedDeliveryDate)
						required
							"Field_Requested_Delivery_DateIsRequired"
				
				PrmRequisitionDescription
					if (PrmAddToRequisition.StartNewRequisition
					and RequesterRel.RequireRequisitionDescription)
						required
							"Field_Requisition_DescriptionIsRequired"
				
				PrmManufacturer
					if (RequesterRel.RequireManufacturer)
						required
							"Field_ManufacturerIsRequired"

				PrmManufacturerNumber
					if (RequesterRel.RequireManufacturerNumber)
						required
							"Field_Manufacturer_NumberIsRequired"

				PrmMajorPurchasingClass
					if (RequesterRel.RequireMajorPurchaseClasses)
						required
							"Field_MajorPurchasing_ClassIsRequired"

				PrmMinorPurchasingClass
					if (RequesterRel.RequireMinorPurchaseClasses)
						required
							"Field_Minor_Purchasing_ClassIsRequired"
				
				PrmGLEncumbranceReference
					if (RequesterRel.RequireGLEncumbranceReference)
						required
							"Field_GL_Encumbrance_ReferenceIsRequired"
							
				PrmLineSourcingEventRequired
					initial value is RequesterRel.RequisitionRel.SourcingEventRequired
					default to RequesterRel.RequisitionRel.SourcingEventRequired
				
				PrmLineConsignCode
					initial value is RequesterRel.RequisitionRel.DefaultBillCode
					default to RequesterRel.RequisitionRel.DefaultBillCode
			Action Rules

				LocalRequisition 					= RequesterRel.CurrentRequisitionForRQC
				LocalRSSLPLSpecialItemGroup			= PrmFromCompanyLocation.FromCompany.ItemGroup
				LocalRSSLPLSpecialItem				= PrmItem
				LocalRSSLPLSpecialItemDescription	= PrmItemDescription

				if (RequesterRel.DerivedSpecialItemValidation = "W"
				and (RSSLPLByShadowItemItemDescriptionRel exists
				or RSSLPLByContractLineItemDescriptionRel exists))
					confirmation required
						"YourDescriptionMatchesOneOrMoreItemsInTheCatalog\.Proceed\?"

				if (RequesterRel.DerivedSpecialItemValidation = "W"
				and (RSSLPLByShadowItemItemRel exists
				or RSSLPLByContractLineItemItemRel exists))
					confirmation required
						"Warning:ItemExistsInCatalog\._Proceed\?"

				invoke Create this instance
					invoked.Company								= LocalRequisition.Company
					invoked.Requisition							= LocalRequisition
					if (PrmItemType.Special)
						invoked.ItemType						= "X"
					else 
					if (PrmItemType.ServiceByAmount)
						invoked.ItemType						= "S"
						invoked.ServiceCode						= "A"
						initialize PrmQuantity
					else
					if (PrmItemType.ServiceByQuantity)
						invoked.ItemType						= "S"
						invoked.ServiceCode						= "Q"
					invoked.Item								= PrmItem
					invoked.Description							= PrmItemDescription
					if (PrmVendorItem not entered)
						invoked.VendorItem						= PrmItem
					else
						invoked.VendorItem						= PrmVendorItem
					invoked.Quantity							= PrmQuantity
					invoked.EnteredUOM							= PrmUOM
					invoked.TransactionUnitCost					= PrmTransactionUnitCost
					invoked.TransactionCurrencyCode				= PrmTransactionCurrencyCode
					invoked.CostOption							= PrmCostOption
					invoked.RequestedDeliveryDate				= PrmRequestedDeliveryDate
					invoked.DeliverTo							= PrmDeliverTo
					invoked.AllocationPriority				 	= PrmLineAllocationPriority
					if (RSSLPLConfigurationParameterRel exists)
						invoked.TransientAllocationPriorityLevel = PrmLineAllocationPriority
					invoked.VendorItem							= PrmVendorItem
					invoked.Vendor								= PrmLineVendor
					invoked.PurchaseFromLocation				= PrmLineVendorPurchaseFrom
					invoked.FromCompanyLocationBin				= PrmLineFromCompanyLocation
					invoked.Manufacturer						= PrmManufacturer
					invoked.ManufacturerNumber					= PrmManufacturerNumber
					invoked.TransientPurchaseTaxable   			= PrmLinePurchaseTaxable
					invoked.PurchaseTaxCode						= PrmLinePurchaseTaxCode
					invoked.CommodityCode						= PrmLineCommodityCode
					invoked.MajorPurchasingClass				= PrmMajorPurchasingClass
					invoked.MinorPurchasingClass				= PrmMinorPurchasingClass
					invoked.ItemGTIN							= PrmItemGTIN
					invoked.SourcingEventRequired				= PrmLineSourcingEventRequired
					invoked.ConsignCode							= PrmLineConsignCode
					invoked.POCode								= PrmLinePOCode
					invoked.EnteredAsset						= PrmAsset
					invoked.EnteredAssetTemplate				= PrmAssetTemplate
					invoked.EnteredGLEncumbranceReference		= PrmGLEncumbranceReference
					invoked.EnteredToAccountingEntity			= PrmLineDistribution.ToAccountingEntity
					invoked.EnteredGeneralLedgerChartAccount	= PrmLineDistribution.GeneralLedgerChartAccount
					invoked.EnteredAccountingUnit				= PrmLineDistribution.AccountingUnit
					invoked.EnteredProject						= PrmLineDistribution.Project
					invoked.EnteredFinanceDimension1			= PrmLineDistribution.FinanceDimension1
					invoked.EnteredFinanceDimension2			= PrmLineDistribution.FinanceDimension2
					invoked.EnteredFinanceDimension3			= PrmLineDistribution.FinanceDimension3
					invoked.EnteredFinanceDimension4			= PrmLineDistribution.FinanceDimension4
					invoked.EnteredFinanceDimension5			= PrmLineDistribution.FinanceDimension5
					invoked.EnteredFinanceDimension6			= PrmLineDistribution.FinanceDimension6
					invoked.EnteredFinanceDimension7			= PrmLineDistribution.FinanceDimension7
					invoked.EnteredFinanceDimension8			= PrmLineDistribution.FinanceDimension8
					invoked.EnteredFinanceDimension9			= PrmLineDistribution.FinanceDimension9
					invoked.EnteredFinanceDimension10			= PrmLineDistribution.FinanceDimension10
					invoked.RSSSourceInformation				= PrmRSSSourceInformation.SpecialAndService
					invoked.RequisitionSource					= RqSource.RequisitionSelfService


				if (PrmLineCommentText entered
				or PrmLineAttachment entered)
					invoke Create RequisitionLineComment
						fill in fields from this instance
						if (PrmLineCommentText entered)
							invoked.CommentTitle 		= RSSLPLRequisitionLineComment
							invoked.CommentType  		= RequesterRel.RequisitionRel.DefaultCommentType
							invoked.CommentText  		= PrmLineCommentText
						if (PrmLineAttachment entered)
							invoked.Attachment.File		= PrmLineAttachment	

			Exit Rules
				invoke UpdateCurrentRequisitionForRQC RequesterRel
						invoked.PrmCompany				= PrmCompany
						invoked.PrmRequisition     		= LocalRequisition

       	MobileCopyRequisitionLine is an Instance Action
       		default label is "AddItem_toRequisition"
        	completion message is "<SelectedItemsAddedMessage>"
            Local Fields
                LocalRequisition	           	is a Requisition view
                LocalRequisitionLine            is a RequisitionLine view
                LocalInitializeContract			is Boolean
                PrmCompany						is like Company
                PrmRequestingLocation			is like RequestingLocation
                PrmRequisition					is like Requisition	
				PrmQuantity						is like Quantity
				PrmEnteredUOM               	is a UnitOfMeasure
				PrmAllocationPriority			is an AllocationPriority
				PrmRequestedDeliveryDate		is Date
				PrmFromCompanyLocation 			is a FromCompanyLocation
				PrmTransactionUnitCost          is an UnsignedUnitCost
					precision is DerivedNumberOfDecimalsCost
				PrmTransactionCurrencyCode      is a Currency
				PrmRequisitionDescription		is Alpha size 30
				PrmAddToRequisition				is Numeric size 1
					States
						AddToExistingRequisition	value is 0
						StartNewRequisition			value is 1				
				PrmRequisitionSource			is a RqSource	
				PrmRSSSourceInformation			is Numeric size 1
					States
            			NotApplicable         	value is 0
            			SearchCatalog    		value is 1
						RecentlyRequestedItem   value is 2
            			ShoppingList    		value is 3
						Punchout				value is 4
						SpecialAndService		value is 5
						CopyRequisitionLine 	value is 6	
				PrmAllocationPriorityLevel		is an AllocationPriorityLevel
				PrmBuyer						is a Buyer
				PrmCommodityCode				is a CommCodes
				PrmPOCode						is a POCode
				PrmDeliverTo					is a DeliverTo
				PrmVendor						is a Vendor
            Entrance Rules
            	constraint(!CostCode.Punchout)
            		"CannotCopyALineCreatedFromPunchout"
            	
            Action Rules
            	if (actor.agent(Employee).Employee.Requester.CurrentCompanyForRQC entered)
            		PrmCompany = actor.agent(Employee).Employee.Requester.CurrentCompanyForRQC
            		PrmRequestingLocation = actor.agent(Employee).Employee.Requester.RequisitionRel.RequestingLocation
	            	PrmRequisition = actor.agent(Employee).Employee.Requester.CurrentRequisitionForRQC
					PrmRequisitionSource	= RqSource.RequisitionSelfService
					PrmRSSSourceInformation 	= PrmRSSSourceInformation.RecentlyRequestedItem

            	else
            		PrmCompany = actor.agent(Employee).Employee.Requester.Company
            		PrmRequestingLocation = actor.agent(Employee).Employee.Requester.RequestingLocation
					PrmAddToRequisition = PrmAddToRequisition.StartNewRequisition
					PrmRequisitionSource	= RqSource.RequisitionSelfService
					PrmRSSSourceInformation 	= PrmRSSSourceInformation.RecentlyRequestedItem
            	
            	include CopyLineInformation
            		
	        Exit Rules
				invoke UpdateCurrentRequisitionForRQC this instance.RequesterRel
					invoked.PrmCompany				= actor.agent(Employee).Employee.Requester.Company
					invoked.PrmRequisition     		= NewRequisitionFromCopy

		RecallRequisitionLineQuery is a Set Action  
			restricted
			Parameters
				PrmRecallGroup     is a RecallGroup
				PrmRecallNotice    is a RecallNotice
				PrmRecallProduct   is a RecallProduct
				PrmRecallProductItem is a RecallProductItem
				PrmItem            is an Item
				PrmManufacturerNumber	is like ManufacturerNumber
				PrmManufacturerCode	is like ManufacturerCode
				PrmManufacturerDivision is like ManufacturerDivision
				PrmGTIN            is like ItemGTIN
				PrmVendorItem      is like VendorItem
				PrmQueryDateRange  is a DateRange
				PrmQueryPriority   is Numeric size 2
					States
						High       value is 1
						Medium     value is 2
						Low        value is 3
				PrmQueryDueDate    is TimeStamp
				PrmCreateTasks     is Boolean

			Sort Order
				Item
				VendorItem
				Manufacturer
				ManufacturerNumber
				ItemGTIN
				Company
				Requisition
				RequisitionLine

			Set Is 
				Item
				VendorItem
				Manufacturer
				ManufacturerNumber
				ItemGTIN
				Company
				Requisition
				RequisitionLine
				PrmRecallGroup 
				PrmRecallNotice 
				PrmRecallProduct	
				PrmRecallProductItem 		
			Instance Selection
				where (Company.ItemGroup = PrmRecallGroup
				and    !Closed
				and    !Status.Rejected
				and    !ItemType.Service
				and    CreationDate date within PrmQueryDateRange
				and    !SourceRecordExists)				
		
			Action Rules 
			
				Instance Rules
                  	if ((Item                               = PrmItem
					and ((PrmItem							= PrmManufacturerNumber
					and  ItemType.Special)
					or  (PrmItem                           != PrmManufacturerNumber
					and !ItemType.Special)))
					or  (ItemType.Special
					and ((ManufacturerNumber entered
					and   ManufacturerNumber                = PrmManufacturerNumber
					and (PrmManufacturerCode !entered
                    or  (PrmManufacturerCode entered
					and  PrmManufacturerDivision !entered
                    and  Manufacturer.ManufacturerCode      = PrmManufacturerCode)
					or  (PrmManufacturerDivision entered
					and  Manufacturer.ManufacturerCode      = PrmManufacturerCode 
                    and  Manufacturer.ManufacturerDivision  = PrmManufacturerDivision)))
					or  (PrmGTIN entered
					and  ItemGTIN entered
					and  ItemGTIN                           = PrmGTIN)
					or  (PrmVendorItem entered
					and	 VendorItem entered
					and  VendorItem                         = PrmVendorItem))))
						include CreateRecallProductTransaction

		RecallRequisitionLineManufacturerNumberQuery is a Set Action  
			restricted
			Parameters
				PrmRecallGroup     is a RecallGroup
				PrmRecallNotice    is a RecallNotice
				PrmRecallProduct   is a RecallProduct
				PrmItem            is an Item
				PrmVendorItem      is like VendorItem
				PrmNDCNumber       is like ManufacturerNumber
				PrmManufacturerNumber	is like ManufacturerNumber
				PrmManufacturerCode	is like ManufacturerCode
				PrmManufacturerDivision is like ManufacturerDivision
				PrmQueryDateRange  is a DateRange
				PrmQueryPriority   is Numeric size 2
					States
						High       value is 1
						Medium     value is 2
						Low        value is 3
				PrmQueryDueDate    is TimeStamp
				PrmCreateTasks     is Boolean

			Sort Order
				Item
				VendorItem
				Manufacturer
				ManufacturerNumber
				Company
				Requisition
				RequisitionLine

			Instance Selection
				where (Manufacturer.ManufacturerCode = PrmManufacturerCode
				and    Manufacturer.ManufacturerDivision = PrmManufacturerDivision
				and    ManufacturerNumber = PrmManufacturerNumber
				and    Company.ItemGroup = PrmRecallGroup
				and    !Closed
				and    !SourceRecordExists
				and    !Status.Rejected
				and    PrmQueryDateRange entered
				and    CreationDate date within PrmQueryDateRange)

			Action Rules
				Empty Set Rules 
					if (PrmVendorItem entered)
						invoke RecallRequisitionLineVendorItemQuery RequisitionLine
							invoked.PrmRecallGroup		= PrmRecallGroup
							invoked.PrmRecallNotice		= PrmRecallNotice
							invoked.PrmRecallProduct 	= PrmRecallProduct
							invoked.PrmVendorItem       = PrmVendorItem
							invoked.PrmItem             = PrmItem
							invoked.PrmNDCNumber        = PrmNDCNumber
							invoked.PrmManufacturerNumber = PrmManufacturerNumber
							invoked.PrmQueryDateRange	= PrmQueryDateRange
							invoked.PrmQueryPriority	= PrmQueryPriority
							invoked.PrmQueryDueDate		= PrmQueryDueDate
							invoked.PrmCreateTasks      = PrmCreateTasks
					else 
					if (PrmItem entered)
						invoke RecallRequisitionLineItemQuery RequisitionLine
							invoked.PrmRecallGroup		= PrmRecallGroup
							invoked.PrmRecallNotice		= PrmRecallNotice
							invoked.PrmRecallProduct 	= PrmRecallProduct
							invoked.PrmVendorItem       = PrmVendorItem
							invoked.PrmItem             = PrmItem
							invoked.PrmNDCNumber        = PrmNDCNumber
							invoked.PrmManufacturerNumber = PrmManufacturerNumber
							invoked.PrmQueryDateRange	= PrmQueryDateRange
							invoked.PrmQueryPriority	= PrmQueryPriority
							invoked.PrmQueryDueDate		= PrmQueryDueDate
							invoked.PrmCreateTasks      = PrmCreateTasks
					else
						invoke RecallRequisitionLineItemFromOtherQuery RequisitionLine
							invoked.PrmRecallGroup		= PrmRecallGroup
							invoked.PrmRecallNotice		= PrmRecallNotice
							invoked.PrmRecallProduct 	= PrmRecallProduct
							invoked.PrmManufacturerNumber = PrmManufacturerNumber
							invoked.PrmQueryDateRange	= PrmQueryDateRange
							invoked.PrmQueryPriority	= PrmQueryPriority
							invoked.PrmQueryDueDate		= PrmQueryDueDate
							invoked.PrmCreateTasks      = PrmCreateTasks					
				Set Rules 
					Exit Rules 
						if (PrmVendorItem entered)
							invoke RecallRequisitionLineVendorItemQuery RequisitionLine
								invoked.PrmRecallGroup		= PrmRecallGroup
								invoked.PrmRecallNotice		= PrmRecallNotice
								invoked.PrmRecallProduct 	= PrmRecallProduct
								invoked.PrmVendorItem       = PrmVendorItem
								invoked.PrmItem             = PrmItem
								invoked.PrmNDCNumber        = PrmNDCNumber
								invoked.PrmManufacturerNumber = PrmManufacturerNumber
								invoked.PrmQueryDateRange	= PrmQueryDateRange
								invoked.PrmQueryPriority	= PrmQueryPriority
								invoked.PrmQueryDueDate		= PrmQueryDueDate
								invoked.PrmCreateTasks      = PrmCreateTasks
						else 
						if (PrmItem entered)
							invoke RecallRequisitionLineItemQuery RequisitionLine
								invoked.PrmRecallGroup		= PrmRecallGroup
								invoked.PrmRecallNotice		= PrmRecallNotice
								invoked.PrmRecallProduct 	= PrmRecallProduct
								invoked.PrmVendorItem       = PrmVendorItem
								invoked.PrmItem             = PrmItem
								invoked.PrmNDCNumber        = PrmNDCNumber
								invoked.PrmManufacturerNumber = PrmManufacturerNumber
								invoked.PrmQueryDateRange	= PrmQueryDateRange
								invoked.PrmQueryPriority	= PrmQueryPriority
								invoked.PrmQueryDueDate		= PrmQueryDueDate
								invoked.PrmCreateTasks      = PrmCreateTasks
						else
							invoke RecallRequisitionLineItemFromOtherQuery RequisitionLine
								invoked.PrmRecallGroup		= PrmRecallGroup
								invoked.PrmRecallNotice		= PrmRecallNotice
								invoked.PrmRecallProduct 	= PrmRecallProduct
								invoked.PrmManufacturerNumber = PrmManufacturerNumber
								invoked.PrmQueryDateRange	= PrmQueryDateRange
								invoked.PrmQueryPriority	= PrmQueryPriority
								invoked.PrmQueryDueDate		= PrmQueryDueDate
								invoked.PrmCreateTasks      = PrmCreateTasks				
				
				Instance Rules

					include CreateRecallProductTransaction

		RecallRequisitionLineVendorItemQuery is a Set Action   
			restricted
			Parameters
				PrmRecallGroup     is a RecallGroup
				PrmRecallNotice    is a RecallNotice
				PrmRecallProduct   is a RecallProduct
				PrmVendorItem      is like VendorItem
				PrmItem            is an Item
				PrmNDCNumber       is like ManufacturerNumber
				PrmManufacturerNumber	is like ManufacturerNumber
				PrmQueryDateRange  is a DateRange
				PrmQueryPriority   is Numeric size 2
					States
						High       value is 1
						Medium     value is 2
						Low        value is 3
				PrmQueryDueDate    is TimeStamp
				PrmCreateTasks     is Boolean

			Sort Order
				Item
				VendorItem
				Manufacturer
				ManufacturerNumber
				Company
				Requisition
				RequisitionLine

			Instance Selection
				where (VendorItem = PrmVendorItem
				and    Company.ItemGroup = PrmRecallGroup
				and    !Closed
				and    !SourceRecordExists
				and    !Status.Rejected
				and    PrmQueryDateRange entered
				and    CreationDate date within PrmQueryDateRange)

			Action Rules
				Empty Set Rules 
					if (PrmItem entered)
						invoke RecallRequisitionLineItemQuery RequisitionLine
							invoked.PrmRecallGroup		= PrmRecallGroup
							invoked.PrmRecallNotice		= PrmRecallNotice
							invoked.PrmRecallProduct 	= PrmRecallProduct
							invoked.PrmVendorItem       = PrmVendorItem
							invoked.PrmItem             = PrmItem
							invoked.PrmNDCNumber        = PrmNDCNumber
							invoked.PrmManufacturerNumber = PrmManufacturerNumber
							invoked.PrmQueryDateRange	= PrmQueryDateRange
							invoked.PrmQueryPriority	= PrmQueryPriority
							invoked.PrmQueryDueDate		= PrmQueryDueDate
							invoked.PrmCreateTasks      = PrmCreateTasks
					else
						invoke RecallRequisitionLineItemFromOtherQuery RequisitionLine
							invoked.PrmRecallGroup		= PrmRecallGroup
							invoked.PrmRecallNotice		= PrmRecallNotice
							invoked.PrmRecallProduct 	= PrmRecallProduct
							if  (PrmManufacturerNumber entered)
								invoked.PrmManufacturerNumber = PrmManufacturerNumber
							else
							if (PrmNDCNumber entered)
								invoked.PrmManufacturerNumber = PrmNDCNumber
							else
							if (PrmVendorItem entered)
								invoked.PrmManufacturerNumber = PrmVendorItem
							invoked.PrmQueryDateRange	= PrmQueryDateRange
							invoked.PrmQueryPriority	= PrmQueryPriority
							invoked.PrmQueryDueDate		= PrmQueryDueDate
							invoked.PrmCreateTasks      = PrmCreateTasks					
				
				Set Rules 
					Exit Rules 
						if (PrmItem entered)
							invoke RecallRequisitionLineItemQuery RequisitionLine
								invoked.PrmRecallGroup		= PrmRecallGroup
								invoked.PrmRecallNotice		= PrmRecallNotice
								invoked.PrmRecallProduct 	= PrmRecallProduct
								invoked.PrmVendorItem       = PrmVendorItem
								invoked.PrmItem             = PrmItem
								invoked.PrmNDCNumber        = PrmNDCNumber
								invoked.PrmManufacturerNumber = PrmManufacturerNumber
								invoked.PrmQueryDateRange	= PrmQueryDateRange
								invoked.PrmQueryPriority	= PrmQueryPriority
								invoked.PrmQueryDueDate		= PrmQueryDueDate
								invoked.PrmCreateTasks      = PrmCreateTasks
						else
							invoke RecallRequisitionLineItemFromOtherQuery RequisitionLine
								invoked.PrmRecallGroup		= PrmRecallGroup
								invoked.PrmRecallNotice		= PrmRecallNotice
								invoked.PrmRecallProduct 	= PrmRecallProduct
								if (PrmManufacturerNumber entered)
									invoked.PrmManufacturerNumber = PrmManufacturerNumber
								else
								if (PrmNDCNumber entered)
									invoked.PrmManufacturerNumber = PrmNDCNumber
								else
								if (PrmVendorItem entered)
									invoked.PrmManufacturerNumber = PrmVendorItem
								invoked.PrmQueryDateRange	= PrmQueryDateRange
								invoked.PrmQueryPriority	= PrmQueryPriority
								invoked.PrmQueryDueDate		= PrmQueryDueDate
								invoked.PrmCreateTasks      = PrmCreateTasks							

				Instance Rules

					include CreateRecallProductTransaction

		RecallRequisitionLineItemQuery is a Set Action  
			restricted
			Parameters
				PrmRecallGroup     is a RecallGroup
				PrmRecallNotice    is a RecallNotice
				PrmRecallProduct   is a RecallProduct
				PrmItem            is an Item
				PrmVendorItem      is like VendorItem
				PrmNDCNumber       is like ManufacturerNumber
				PrmManufacturerNumber	is like ManufacturerNumber
				PrmQueryDateRange  is a DateRange
				PrmQueryPriority   is Numeric size 2
					States
						High       value is 1
						Medium     value is 2
						Low        value is 3
				PrmQueryDueDate    is TimeStamp
				PrmCreateTasks     is Boolean

			Sort Order
 				Item
				Company
				Requisition
				RequisitionLine

			Instance Selection
				where (Item = PrmItem
				and    Company.ItemGroup = PrmRecallGroup
				and    !Closed
				and    !SourceRecordExists
				and    !Status.Rejected
				and    PrmQueryDateRange entered
				and    CreationDate date within PrmQueryDateRange)

			Action Rules
				Empty Set Rules 
					if (PrmManufacturerNumber entered
					or  PrmVendorItem entered
					or  PrmNDCNumber entered)
						invoke RecallRequisitionLineItemFromOtherQuery RequisitionLine
							invoked.PrmRecallGroup		= PrmRecallGroup
							invoked.PrmRecallNotice		= PrmRecallNotice
							invoked.PrmRecallProduct 	= PrmRecallProduct
							if (PrmManufacturerNumber entered)
								invoked.PrmManufacturerNumber = PrmManufacturerNumber
							else
							if (PrmNDCNumber entered)
								invoked.PrmManufacturerNumber = PrmNDCNumber
							else
							if (PrmVendorItem entered)
								invoked.PrmManufacturerNumber = PrmVendorItem
							invoked.PrmQueryDateRange	= PrmQueryDateRange
							invoked.PrmQueryPriority	= PrmQueryPriority
							invoked.PrmQueryDueDate		= PrmQueryDueDate
							invoked.PrmCreateTasks      = PrmCreateTasks
				
				Set Rules 
					Exit Rules 
						if (PrmManufacturerNumber entered
						or  PrmVendorItem entered
						or  PrmNDCNumber entered)
							invoke RecallRequisitionLineItemFromOtherQuery RequisitionLine
								invoked.PrmRecallGroup		= PrmRecallGroup
								invoked.PrmRecallNotice		= PrmRecallNotice
								invoked.PrmRecallProduct 	= PrmRecallProduct
								if (PrmManufacturerNumber entered)
									invoked.PrmManufacturerNumber = PrmManufacturerNumber
								else
								if (PrmNDCNumber entered)
									invoked.PrmManufacturerNumber = PrmNDCNumber
								else
								if (PrmVendorItem entered)
									invoked.PrmManufacturerNumber = PrmVendorItem
								invoked.PrmQueryDateRange	= PrmQueryDateRange
								invoked.PrmQueryPriority	= PrmQueryPriority
								invoked.PrmQueryDueDate		= PrmQueryDueDate
								invoked.PrmCreateTasks      = PrmCreateTasks

				Instance Rules
					include CreateRecallProductTransaction

		RecallRequisitionLineItemFromOtherQuery is a Set Action   
			restricted
			Parameters
				PrmRecallGroup     is a RecallGroup
				PrmRecallNotice    is a RecallNotice
				PrmRecallProduct   is a RecallProduct
				PrmManufacturerNumber	is like Item
				PrmQueryDateRange  is a DateRange
				PrmQueryPriority   is Numeric size 2
					States
						High       value is 1
						Medium     value is 2
						Low        value is 3
				PrmQueryDueDate    is TimeStamp
				PrmCreateTasks     is Boolean

			Sort Order
				Item
				VendorItem
				Manufacturer
				ManufacturerNumber
				Company
				Requisition
				RequisitionLine

			Instance Selection
			 	where (PrmManufacturerNumber entered
				and    Item = PrmManufacturerNumber
				and    ItemType.Special
				and    Company.ItemGroup = PrmRecallGroup
				and    !Closed
				and    !SourceRecordExists
				and    !Status.Rejected
				and    PrmQueryDateRange entered
				and    CreationDate within PrmQueryDateRange)

			Action Rules
				Instance Rules

					include CreateRecallProductTransaction

		UpdateTotalsComputation is an Instance Action   
			restricted
			Parameters
				PrmLandedUnitCost			    			is an InternationalCost
				PrmLineAddOnChargeTotalAddOnChargeAmount	is an InternationalAmount
				PrmIsLandedAddOnCharge						is Boolean
				PrmBypassComputeTotals						is Boolean
			Action Rules
				LandedUnitCost				    	+= PrmLandedUnitCost
				LineAddOnChargeTotal				+= PrmLineAddOnChargeTotalAddOnChargeAmount
				if (not PrmIsLandedAddOnCharge)
					LineNonLandedAddOnChargeTotal 	+= PrmLineAddOnChargeTotalAddOnChargeAmount

			Exit Rules

				if (PrmIsLandedAddOnCharge = true)
					if (GeneralLedgerSystemCodeRel.EncumbranceOption.TrackAndEdit
					or  GeneralLedgerSystemCodeRel.EncumbranceOption.Track)
						for each DistributionsNotAddOnChargeRel
							invoke UpdateGLCommitmentIndirect each
								invoked.PrmUpdateLine = true
								if (GeneralLedgerSystemCodeRel.EncumbranceOption.TrackAndEdit)
									invoked.PerformBudgetEdit = true

				if (not PrmBypassComputeTotals and LineAddOnChargeTotal changed)
					if (TransactionCurrencyCode != Requisition.BaseCurrencyCode)
						SavedFinanceEnterpriseGroup		= Requisition.Company.ItemGroup.BusinessGroup.FinanceEnterpriseGroup
						SavedExchangeDate				= DefaultExchangeDate
						SavedCurrencyTable              = Requisition.CurrencyTable
						SavedFromCurrency				= TransactionCurrencyCode
						SavedToCurrency					= Requisition.BaseCurrencyCode
						SavedTransactionAmount			= PrmLineAddOnChargeTotalAddOnChargeAmount
						LocalLineAddOnChargeTotal		= LocalCurrencyExchange.OutputCurrencyAmount
					else
						LocalLineAddOnChargeTotal		= PrmLineAddOnChargeTotalAddOnChargeAmount
					invoke UpdateTotalsFromAOC Requisition
						invoked.PrmLineAddOnChargeTotal	= LocalLineAddOnChargeTotal 

		DeletePatientProcedure is an Instance Action
			restricted
			Action Rules
				LocalPatientProcedure = PatientProcedure
				initialize PatientProcedure
			Exit Rules
				if (LocalPatientProcedure entered)
					invoke Delete PatientProcedureRel

		CloseLineOrCommitFromContract is an Instance Action
			restricted
			Action Rules
		   		TransientCancel = true
		   		include CloseLine

		CancelTrialItems is an Instance Action
			restricted
			Action Rules

				invoke Cancel PurchaseOrderInterfaceRel
				for each PurchaseOrderLineSourcesRel
					LocalPurchaseOrder     = each.PurchaseOrder
					LocalPurchaseOrderLine = each.PurchaseOrderLine
					if (PurchaseOrderLineRel exists)
						if (PurchaseOrderLineRel.PurchaseOrderLineEligibleToBeCancelled)
							invoke CancelLine PurchaseOrderLineRel

		CreateWarehouseDemand is an Instance Action
			restricted
			Parameters
				PrmAllocate				is Boolean
				PrmQuantity				is a Quantity
			Parameter Rules
				PrmQuantity
					default to Quantity
			Local Fields
				LocalIsForSupply		is Boolean
			Action Rules
				if (PreferenceCardTransaction
				and IsInventoryType)
					invoke ReserveBeforeAllocate ScheduledProcedureLineRel
						invoked.PrmDemandQuantity = DerivedQuantityInStockUOM
				
				if (Company.AllocationMethod.Online
				and FillOrKill.KillBackorders
				and not IsMakeToOrderKitItemWithStock)
					if (PreferenceCardTransaction)
						if (IsInventoryType)
							if (PrmQuantity >= DerivedReservedQuantityInTransactionUOM)
								if (PrmQuantity = ScheduledProcedureLineRel.DerivedQuantityToProcess)
									KilledQuantity = DerivedUnreservedQuantityInTransactionUOM
								else
								if (PrmQuantity > DerivedReservedQuantityInTransactionUOM)
									LocalExcessQuantity = PrmQuantity - DerivedReservedQuantityInTransactionUOM

									if (DerivedUnreservedQuantityInTransactionUOM entered)
										KilledQuantity = LocalExcessQuantity
									else
										if (DerivedAvailableQuantityInTransactionUOM < 0)
											KilledQuantity = LocalExcessQuantity
										else
											if (DerivedAvailableQuantityInTransactionUOM < LocalExcessQuantity)
												KilledQuantity = LocalExcessQuantity - DerivedAvailableQuantityInTransactionUOM

					else 
						if (Item.StockUOM != EnteredUOM
						and not IsCatchWeightItem)
							initialize UOMCalculation
							UOMCalculation.InputUOM				= Item.StockUOM
							UOMCalculation.InputToUOM			= EnteredUOM
							UOMCalculation.InputQuantity		= ItemLocationRel.AvailableQuantity
							UOMCalculation.Method				= UOMCalculation.Method.ConvertToAlternate
							UOMCalculation.DoRounding			= false
							LocalAvailableQuantity 				= UOMCalculation.OutputQuantity
							round LocalAvailableQuantity down to nearest 1
						else
							LocalAvailableQuantity				= ItemLocationRel.AvailableQuantity

						if (LocalAvailableQuantity < 0)
							KilledQuantity						= PrmQuantity
						else
							if (LocalAvailableQuantity < PrmQuantity)
								KilledQuantity 					= PrmQuantity - LocalAvailableQuantity

				if (IsCatchWeightItem)
					LocalWarehouseDemandQuantity = (PrmQuantity - KilledQuantity)
				else
					LocalWarehouseDemandQuantity = ((PrmQuantity - KilledQuantity) * EnteredUOMMultiplier)
					initialize RoundedValue
					RoundedValue.RoundInput			= LocalWarehouseDemandQuantity
					RoundedValue.RoundingType		= RoundedValue.RoundingType.Low
					RoundedValue.RoundTo			= UOMCalculation.DerivedQtyRoundTo
					RoundedValue.RoundingMethodFW	= RoundedValue.RoundingMethodFW.MultipleOf
					LocalWarehouseDemandQuantity 	= RoundedValue.RoundResult

				if (LocalWarehouseDemandQuantity > 0)
					include ProcessWarehouseDemand
				else
					if (Requisition.HasLinesToKill)
						LocalSkipCommitment = true
					include CloseLine

		UpdateRequisitionLine is an Instance Action   
			restricted
			Parameters
				PrmCompany             			is an InventoryCompany
				PrmRequisition         			is a Requisition
				PrmEAMDescription				is a Description3
				PrmQuantity            			is a Quantity
				PrmTransactionCurrencyCode		is a Currency
				PrmUOM                 			is a UnitOfMeasure
				PrmTransactionUnitCost 			is an InternationalCost
				PrmItem							is an Item
				PrmRequisitionLine				is a RequisitionLine
				PrmVendor						is a Vendor
				PrmPurchaseFromLocation			is a VendorLocation
				PrmCreatePurchaseOrder			is Boolean
				PrmToAccountingEntity			is a AccountingEntity
				PrmGeneralLedgerChartAccount	is a GeneralLedgerChartAccount
				PrmAccountingUnit				is like AccountingUnit
				PrmProject			  			is a Project
				PrmFinanceDimension1			is a FinanceDimension1
				PrmFinanceDimension2			is a FinanceDimension2
				PrmFinanceDimension3			is a FinanceDimension3
				PrmFinanceDimension4			is a FinanceDimension4
				PrmFinanceDimension5			is a FinanceDimension5
				PrmFinanceDimension6			is a FinanceDimension6
				PrmFinanceDimension7			is a FinanceDimension7
				PrmFinanceDimension8			is a FinanceDimension8
				PrmFinanceDimension9			is a FinanceDimension9
				PrmFinanceDimension10			is a FinanceDimension10
				PrmSourcingEventRequired		is Boolean
				PrmAsset						is an Asset
				PrmAssetTemplate				is an AssetTemplate
				PrmBuyer						is a Buyer
				PrmPurchaseTaxable				is Boolean
				PrmRequestedDeliveryDate		is Date
				PrmDeliverTo					is a DeliverTo
				PrmAllocationPriority		    is a AllocationPriority
				PrmPurchaseTaxCode				is a TaxCode
				PrmCommodityCode				is a CommCodes
				PrmPOCode						is a POCode
				PrmConsignCode					is a ConsignCode
				PrmMajorPurchasingClass			is a MajorPurchasingClass
				PrmMinorPurchasingClass			is a MinorPurchasingClass
				PrmInspectionRequired           is Boolean
				PrmFillOrKill					is a FillOrKill
				PrmCertificationRequired		is Boolean
				PrmServiceCode					is a ServiceCode
				PrmCostOption             	    is a CostOption
				PrmDescription					is a Description
				PrmContract						is a Contract
				PrmFromLocation					is like InventoryLocation
				PrmFromCompany					is like InventoryCompany
				PrmGLEncumbranceReference		is AlphaUpper size 60
				PrmByPassUnitCost				is Boolean
				PrmSpecialHandlingCode			is a SpecialHandlingCode
				PrmSpecialHandlingInstructions	is a Description4
				PrmHandlingTime					is Numeric 3
				PrmDefaultCommentCode			is a StandardCommentCode

			Action Rules
				if (RequisitionLineDistributionsRel not exists
				and (PrmToAccountingEntity entered
					or PrmGeneralLedgerChartAccount entered
					or PrmAccountingUnit entered
					or PrmProject entered
					or PrmFinanceDimension1 entered
					or PrmFinanceDimension2 entered
					or PrmFinanceDimension3 entered
					or PrmFinanceDimension4 entered
					or PrmFinanceDimension5 entered
					or PrmFinanceDimension6 entered
					or PrmFinanceDimension7 entered
					or PrmFinanceDimension8 entered
					or PrmFinanceDimension9 entered
					or PrmFinanceDimension10 entered))
						invoke Create RequisitionLineDistribution
							fill in fields from this instance
							invoked.TransientBypassCommittedContractValidation		= true
							invoked.DistributionAccount.ToAccountingEntity			= PrmToAccountingEntity
							invoked.DistributionAccount.GeneralLedgerChartAccount	= PrmGeneralLedgerChartAccount
							invoked.DistributionAccount.AccountingUnit				= PrmAccountingUnit
							invoked.DistributionAccount.Project						= PrmProject
							invoked.DistributionAccount.FinanceDimension1			= PrmFinanceDimension1
							invoked.DistributionAccount.FinanceDimension2			= PrmFinanceDimension2
							invoked.DistributionAccount.FinanceDimension3			= PrmFinanceDimension3
							invoked.DistributionAccount.FinanceDimension4			= PrmFinanceDimension4
							invoked.DistributionAccount.FinanceDimension5			= PrmFinanceDimension5
							invoked.DistributionAccount.FinanceDimension6			= PrmFinanceDimension6
							invoked.DistributionAccount.FinanceDimension7			= PrmFinanceDimension7
							invoked.DistributionAccount.FinanceDimension8			= PrmFinanceDimension8
							invoked.DistributionAccount.FinanceDimension9			= PrmFinanceDimension9
							invoked.DistributionAccount.FinanceDimension10			= PrmFinanceDimension10
							invoked.AssetInformation.Asset							= PrmAsset
							invoked.AssetInformation.AssetTemplate					= PrmAssetTemplate
							invoked.GLEncumbranceReference							= PrmGLEncumbranceReference
				else
				if (PrmToAccountingEntity !=  first RequisitionLineDistributionsRel.DistributionAccount.ToAccountingEntity
				or  PrmGeneralLedgerChartAccount !=  first RequisitionLineDistributionsRel.DistributionAccount
				or  PrmAccountingUnit !=  first RequisitionLineDistributionsRel.DistributionAccount.AccountingUnit
				or  PrmProject !=  first RequisitionLineDistributionsRel.DistributionAccount.Project
				or  PrmFinanceDimension1 !=  first RequisitionLineDistributionsRel.DistributionAccount.FinanceDimension1
				or  PrmFinanceDimension2 !=  first RequisitionLineDistributionsRel.DistributionAccount.FinanceDimension2
				or  PrmFinanceDimension3 !=  first RequisitionLineDistributionsRel.DistributionAccount.FinanceDimension3
				or  PrmFinanceDimension4 !=  first RequisitionLineDistributionsRel.DistributionAccount.FinanceDimension4
				or  PrmFinanceDimension5 !=  first RequisitionLineDistributionsRel.DistributionAccount.FinanceDimension5
				or  PrmFinanceDimension6 !=  first RequisitionLineDistributionsRel.DistributionAccount.FinanceDimension6
				or  PrmFinanceDimension7 !=  first RequisitionLineDistributionsRel.DistributionAccount.FinanceDimension7
				or  PrmFinanceDimension8 !=  first RequisitionLineDistributionsRel.DistributionAccount.FinanceDimension8
				or  PrmFinanceDimension9 !=  first RequisitionLineDistributionsRel.DistributionAccount.FinanceDimension9
				or  PrmFinanceDimension10 !=  first RequisitionLineDistributionsRel.DistributionAccount.FinanceDimension10
				or  PrmAsset !=  first RequisitionLineDistributionsRel.AssetInformation.Asset
				or  PrmAssetTemplate !=  first RequisitionLineDistributionsRel.AssetInformation.AssetTemplate
				or  PrmGLEncumbranceReference != first RequisitionLineDistributionsRel.GLEncumbranceReference)
					invoke Update first RequisitionLineDistribution set
						invoked.DistributionAccount.ToAccountingEntity			= PrmToAccountingEntity
						invoked.DistributionAccount.GeneralLedgerChartAccount	= PrmGeneralLedgerChartAccount
						invoked.DistributionAccount.AccountingUnit				= PrmAccountingUnit
						invoked.DistributionAccount.Project						= PrmProject
						invoked.DistributionAccount.FinanceDimension1			= PrmFinanceDimension1
						invoked.DistributionAccount.FinanceDimension2			= PrmFinanceDimension2
						invoked.DistributionAccount.FinanceDimension3			= PrmFinanceDimension3
						invoked.DistributionAccount.FinanceDimension4			= PrmFinanceDimension4
						invoked.DistributionAccount.FinanceDimension5			= PrmFinanceDimension5
						invoked.DistributionAccount.FinanceDimension6			= PrmFinanceDimension6
						invoked.DistributionAccount.FinanceDimension7			= PrmFinanceDimension7
						invoked.DistributionAccount.FinanceDimension8			= PrmFinanceDimension8
						invoked.DistributionAccount.FinanceDimension9			= PrmFinanceDimension9
						invoked.DistributionAccount.FinanceDimension10			= PrmFinanceDimension10
						invoked.AssetInformation.Asset							= PrmAsset
						invoked.AssetInformation.AssetTemplate					= PrmAssetTemplate
						invoked.GLEncumbranceReference							= PrmGLEncumbranceReference
				if (AllowUpdateToLinesFromPunchout
				or  !CostCode.Punchout)
					invoke Update RequisitionLine
						invoked.Company								= PrmCompany
						invoked.Requisition							= PrmRequisition
						invoked.Item								= PrmItem
						invoked.RequisitionLine						= PrmRequisitionLine
						invoked.EAMDescription						= PrmEAMDescription
						invoked.Vendor								= PrmVendor
						invoked.PurchaseFromLocation				= PrmPurchaseFromLocation
						invoked.Quantity							= PrmQuantity
						invoked.TransactionCurrencyCode				= PrmTransactionCurrencyCode
						invoked.EnteredUOM							= PrmUOM
						invoked.TransactionUnitCost					= PrmTransactionUnitCost
						invoked.TransientBypassUnitCost				= PrmByPassUnitCost
						invoked.SourcingEventRequired				= PrmSourcingEventRequired
						invoked.Buyer								= PrmBuyer
						invoked.PurchaseTaxable						= PrmPurchaseTaxable
						invoked.RequestedDeliveryDate				= PrmRequestedDeliveryDate
						invoked.DeliverTo							= PrmDeliverTo
						invoked.AllocationPriority					= PrmAllocationPriority
						invoked.PurchaseTaxCode						= PrmPurchaseTaxCode
						invoked.CommodityCode						= PrmCommodityCode
						invoked.POCode								= PrmPOCode
						invoked.ConsignCode							= PrmConsignCode
						invoked.MajorPurchasingClass				= PrmMajorPurchasingClass
						invoked.MinorPurchasingClass				= PrmMinorPurchasingClass
						invoked.InspectionRequired					= PrmInspectionRequired
						invoked.FillOrKill							= PrmFillOrKill
						invoked.CertificationRequired				= PrmCertificationRequired
						invoked.ServiceCode							= PrmServiceCode
						invoked.CostOption							= PrmCostOption
						invoked.CreatePurchaseOrder					= PrmCreatePurchaseOrder
						invoked.Contract							= PrmContract
						invoked.FromCompanyLocationBin.FromLocation	= PrmFromLocation
						invoked.FromCompanyLocationBin.FromCompany	= PrmFromCompany
						if(!IsInventoryOrNonstock)
							invoked.Description						= PrmDescription
						invoked.EnteredGLEncumbranceReference		= PrmGLEncumbranceReference
						invoked.SpecialHandlingCode					= PrmSpecialHandlingCode
						invoked.SpecialHandlingInstructions			= PrmSpecialHandlingInstructions
						invoked.HandlingTimeInMinutes				= PrmHandlingTime

		UpdateCommitmentFromJournalPosting is an Instance Action
			restricted
			Action Rules
				for each RequisitionLineDistribution set
					if (each.CurrentCommitmentExists)
						invoke UpdateGLCommitmentIndirect each
							invoked.PrmFromJournalPosting = true

		BuildTextIndexes is an Instance Action
			restricted
			Action Rules
				include BuildTextIndex

		CreateTemplateLine is an Instance Action
			restricted
			Parameters
				PrmProcurementTemplate              is a ProcurementTemplate

			Action Rules
				invoke Create ProcurementTemplateLine
					fill in fields from this instance
					invoked.ProcurementGroup        	= PurchasingCompanyRel.ProcurementGroup
					invoked.ProcurementTemplate 		= PrmProcurementTemplate
					invoked.UnitOfMeasure				= EnteredUOM
					if (ItemType.Special)
						invoked.SpecialItemDescription	= Description
						invoked.SpecialItem				= true
					else
						invoked.SpecialItem				= false
						invoked.SpecialItemDescription	= ""
					if (ItemType.Service)
						invoked.ServiceDescription		= Description
					else
						invoked.ServiceDescription		= ""
					if (HasSingleDistribution)
						invoked.DistributionAccount		= first RequisitionLineDistributionsRel.DistributionAccount

		RecalculateRequesterItemCount is a Set Action
			restricted
			Parameters
				PrmAll			is Boolean
					default label is "RecalculateAll"
				PrmCompany		is an InventoryCompany
				PrmRequester	is a Requester
					default label is "Requester"
			Parameter Rules
				PrmAll
					initial value is true
				PrmCompany
					constraint (not PrmAll)
						"MustEitherBeRecalculateAllOrEnterACompany"
			Local Fields
				AsyncId			is a AsyncActionRequest
			Action Rules
				Set Rules
					Entrance Rules
						invoke DeleteRequesterItemCount RequesterItemCount
							assign async action request id to AsyncId
							invoked.PrmAll 			= PrmAll
							invoked.PrmCompany 		= PrmCompany
							invoked.PrmRequester	= PrmRequester
						invoke ProcessRequesterItemCount
							run after AsyncId
							invoked.PrmAll 			= PrmAll
							invoked.PrmCompany 		= PrmCompany
							invoked.PrmRequester	= PrmRequester

		ProcessRequesterItemCount is a Set Action
			restricted
			Parameters
				PrmAll			is Boolean
				PrmCompany		is an InventoryCompany
				PrmRequester	is a Requester
			Instance Selection
				where (PrmAll
				or	  ((PrmCompany.BusinessGroup	= Company.BusinessGroup)
				and	   (PrmRequester not entered    or PrmRequester = Requisition.Requester)))
			Action Rules
				Instance Rules
					if (IsInventoryOrNonstock and (Status.Released or Status.Processed))
						invoke UpdateRequesterItemCount RequisitionLine

		UpdateRequesterItemCount is an Instance Action
			restricted
			Action Rules
				if (RequesterItemCountRel exists)
					increment RequesterItemCountRel.Count by DerivedStockQuantity
				else
					invoke Create RequesterItemCount
						invoked.BusinessGroup 			= Company.BusinessGroup
						invoked.Requester 				= Requisition.Requester
						invoked.Item 					= Item
						invoked.Count					= DerivedStockQuantity

		PopulateBlankItem is a Set Action
			restricted
			Parameters
				PrmCompany		is a InventoryCompany
			Instance Selection
				where (Company = PrmCompany
				and	  (ItemType.Service or ItemType.Special)
				and	   Item not entered)
			Action Rules
				Instance Rules
					if (ItemType.Special
					and VendorItem entered)
						Item = VendorItem
					else
						Item = Description

		BODDataInitialLoadRequisitionReturnCriteria1 is a Set Action
			restricted
			Parameters
				PrmCompany						is a InventoryCompany
				PrmReturnedQuantity				is a Quantity
			Parameter Rules
			Instance Selection
				where  (((PrmCompany entered
				and		  PrmCompany = Company)
				or		  PrmCompany not entered)
				and		(ReturnQuantity > 0))

			Sort Order
				Company

			Local Fields

			Action Rules
				Instance Rules
					if (GeneralLedgerCompanyForCompanyRel.FinanceEnterpriseGroup.BODTrigger)
						LocalTitle = "EG:"+GeneralLedgerCompanyForCompanyRel.FinanceEnterpriseGroup+" CO:"+Company+" RQ:"+Requisition+" RQL:"+RequisitionLine
						increment bod id.VariationID
						ActionCode = ActionCode.Create
						include TriggerRequisitionReturnServiceRules


		ValidateSupplyTypeDemand is an Instance Action  
			restricted
			Local Fields
				LocalIsForSupply		is Boolean

			Action Rules
				if (SupplyWarehouseDemandRel not exists)
					LocalIsForSupply = true
					include CreateWarehouseDemandHeader

				if (DerivedFixitQuantityInStockForSupplyDemand > 0)
					if (!WarehouseSupplyTypeDemandLinesRel exists)
						invoke CreateSupply WarehouseDemandLine  
							invoked.DemandRecordType									= WarehouseDemandLine.DemandRecordType.Supply
							invoked.Company												= Company
							invoked.InventoryLocation									= RequestingLocation
							invoked.CompanyAndLocation.RequestingCompany				= FromCompanyLocationBin.FromCompany
							invoked.CompanyAndLocation.RequestingLocation 				= FromCompanyLocationBin.FromLocation
							invoked.Destination											= RequestingLocation
							invoked.WarehouseDemand.DemandSystemCode					= DemandSystemCode.Requisitions
							invoked.DocumentNumberNumeric								= Requisition
							invoked.WarehouseDemand.DemandDocument						= Requisition
							invoked.WarehouseDemand.DemandCompany						= Requisition.Company
							invoked.WarehouseDemandLine.LineNumber						= RequisitionLine
							invoked.WarehouseDemandLine.DemandDocumentType				= InventoryTransactionType
							invoked.EstimatedTransactionDate							= RequestedDeliveryDate
							invoked.AllocationDate										= RequestedDeliveryDate
							invoked.TransactionUOMMultiplier							= EnteredUOMMultiplier
							invoked.LineType											= ItemType
							invoked.ItemDescription										= Description
							invoked.Quantity											= DerivedFixitQuantityInStockForSupplyDemand
							invoked.TransactionUOM										= EnteredUOM
							invoked.UnitCost											= UnitCost * EnteredUOMMultiplier
							invoked.Status												= WarehouseDemandLine.Status.ReleasedForProcessing
							invoked.RequirePickingFeedback								= FromCompanyLocationBin.FromLocation.WarehouseProcessType.RequirePickingFeedback
							invoked.RequirePackingFeedback								= FromCompanyLocationBin.FromLocation.WarehouseProcessType.RequirePackingFeedback
							if (CreatePurchaseOrder)
								invoked.BasedOnPurchaseOrderReceipt						= true
							if (FromCompanyLocationBin.FromCompany.AllocationBasis.ByPriority)
								invoked.AllocationPriority								= AllocationPriority
							invoked.Item												= Item
							invoked.EnteredItem											= EnteredItem
							invoked.ItemEntryMethod										= ItemEntryMethod
							invoked.FillOrKill											= FillOrKill
							invoked.Allocatable											= true
					else
						if (first WarehouseSupplyTypeDemandLinesRel.Quantity != DerivedFixitQuantityInStockForSupplyDemand)
							invoke FastUpdate first WarehouseSupplyTypeDemandLinesRel 
								invoked.Quantity							= DerivedFixitQuantityInStockForSupplyDemand
				else
					invoke DeleteWithoutLocationUpdate WarehouseSupplyTypeDemandLinesRel  

		BatchProcess is a Set Action
			restricted
			Parameters
				PrmCompany		is an InventoryCompany
				PrmRequisition	is a  Requisition

			Sort Order
				Company
				Requisition
				RequisitionLine

			Instance Selection
				where (Company		= PrmCompany
				and	   Requisition	= PrmRequisition)

			Action Rules
				Requisition Set Rules
					Exit Rules
						invoke Released.TransitionToProcessed Requisition
						if (GeneralLedgerSystemCodeRel.EncumbranceOption.TrackAndEdit
						or  GeneralLedgerSystemCodeRel.EncumbranceOption.Track)
							if (Requisition.HasLinesToKill)
								for each Requisition.RequisitionLineDistributionRel
									invoke UpdateGLCommitmentIndirect each
								invoke UpdateToReleased GLCommit
									invoked.PrmFinanceEnterpriseGroup           		= Company.ItemGroup.FinanceEnterpriseGroup
									invoked.PrmUniqueID                       			= Requisition.UniqueID
									invoked.PrmAccountingEntity                			= Company.AccountingEntity
								if (Requisition.BudgetEditingInformationExists)
									invoke EditTotalsRoute BudgetTemplateGroupTotal
										invoked.PrmFinanceEnterpriseGroup    			= Company.ItemGroup.FinanceEnterpriseGroup
										invoked.PrmBudgetEditGroup           			= Requisition.UniqueID
										invoked.PrmMode									= BudgetEditMode.UpdateOnly
										invoked.PrmBusinessClassName                    = "Requisition"
										invoked.PrmEditContext                          = "Killed Quantity"

				Instance Rules
					invoke Released.Process

		CloseRequisitionBatch is an Instance Action	
			restricted
			Parameters
				
			Action Rules
				invoke CloseRequisition Requisition
			Exit Rules
				for each RequisitionLineDistributionRel
					invoke UpdateGLCommitmentIndirect each

		Purge is a Purge Action
			restricted
			bypass relational integrity rules
			Entrance Rules
				invoke Purge PurgeWarehouseShipmentRel
				invoke Purge PurgeWarehouseDemandRel
				invoke Purge PurgeRequisitionLineDistributionRel
				invoke Purge PurgeRequisitionLineCommentRel
				invoke Purge PurgeRequisitionLineErrorRel

		BatchReleaseLines is a Set Action
			restricted
			Parameters
				PrmCompany		is an InventoryCompany
				PrmRequisition	is a  Requisition

			Sort Order
				Company
				Requisition
				RequisitionLine

			Instance Selection
				where (Company		= PrmCompany
				and	   Requisition	= PrmRequisition
				and    Status.Unreleased)

			Action Rules
				Requisition Set Rules
					Exit Rules
						display "777;BatchRelease;SingleVtx<SingleCallToVertex>VsReqSingleCall<Requisition.SingleCallToVertex>"
						if (Requisition.SingleCallToOneSource)
							invoke ProcessOneSourceForRQLines RequisitionLine in foreground
								invoked.PrmCompany		= PrmCompany
								invoked.PrmRequisition	= PrmRequisition
						else 
						if (Requisition.SingleCallToVertex)
							display "777;Invoke"
							invoke ProcessVertexOneCallForRQLines RequisitionLine
								invoked.PrmCompany		= PrmCompany
								invoked.PrmRequisition	= PrmRequisition
						else 
						if (Requisition.VertexDelayTaxCall)
							invoke ProcessVertexForRQLines RequisitionLine
								invoked.PrmCompany		= PrmCompany
								invoked.PrmRequisition	= PrmRequisition

						invoke FinalReleaseCompletion PrmRequisition
				Instance Rules
					invoke Unreleased.Release

		UpdateContractAmounts is an Instance Action
			restricted
			Parameters
				PrmQuantity 			is like Quantity
				PrmDate					is Date
				PrmFromCancelOrDelete	is Boolean
				PrmCloseRequisitionLine is Boolean
				PrmFromPORelease        is Boolean
			Local Fields
				LocalTaxAmount			is an InternationalAmount
				LocalAOCAmount			is an InternationalAmount
				LocalConsignment		is Boolean
				LocalDate				is Date

			Action Rules
				if (Contract.LifetimeEdit.PurchaseOrdersAndReqs)
					if (Quantity = PrmQuantity)			
						LocalTaxAmount 		= (AccruedTaxAmount + InvoicedTaxAmount)
						LocalAOCAmount 		= LineAddOnChargeTotal
					else 								
						LocalTaxAmount		= (((AccruedTaxAmount + InvoicedTaxAmount) / Quantity) * PrmQuantity)
						LocalAOCAmount		= ((LineAddOnChargeTotal / Quantity) * PrmQuantity)

					if (IsInventoryOrNonstock)
						if (ItemLocationRel exists)
							LocalConsignment			= ItemLocationRel.Consignment
						else
							LocalConsignment 			= Item.Consignment

				if (ProcurementGroupRel.RequisitionCommitmentDate.LineEarlyDeliveryDate
				and RequisitionLine.RequestedDeliveryDate entered)
					LocalDate			= RequisitionLine.RequestedDeliveryDate
				else
					LocalDate			= Requisition.CreationDate

				if (ContractLine entered)
					invoke UpdateAmountsAndQuantities ContractLine
						invoked.InUOM							= EnteredUOM
						invoked.InCurrency						= TransactionCurrencyCode
						if (not PrmCloseRequisitionLine)
							invoked.InRequestedAmount			= TransactionUnitCost * PrmQuantity
						invoked.InDate							= LocalDate
						invoked.InTaxAmount         			= LocalTaxAmount
						invoked.InAddOnChargeAmount 			= LocalAOCAmount
						invoked.InConsignment					= LocalConsignment
						invoked.FromCancelOrDelete 				= PrmFromCancelOrDelete
						invoked.FromMatch                       = PrmFromPORelease
				else 
					invoke UpdateContractAmounts Contract
						invoked.InCurrency						= TransactionCurrencyCode
						invoked.InRequestedAmount				= PrmQuantity * TransactionUnitCost
						invoked.InTransactionDate				= LocalDate
						invoked.InTaxAmount						= LocalTaxAmount
						invoked.InAddOnChargeAmount				= LocalAOCAmount
						
		CreateKitchenOrderFromBatch is an Instance Action
			restricted
			Action Rules
				if (KitchenOrdersByOriginatingTransactionRel not exists)
					include CreateKitchenOrder
		
		CloseFromBatch is an Instance Action
			restricted
			Action Rules
				Closed = true
				if (RequestedScheduledProcedureLineRel exists)
					invoke CloseLine RequestedScheduledProcedureLineRel
				

		ModalCopyRequisitionLineForSpecialAndService is an Instance Action
			restricted
       		default label is "AddItem_toRequisition"
        	completion message is "<SelectedItemsAddedMessage>"
        	disable multiple instance selection
            Local Fields
                LocalRequisition	           	is a Requisition view
                LocalRequisitionLine            is a RequisitionLine view
                LocalInitializeContract			is Boolean
			Parameters
				PrmCompany						is an InventoryCompany
                PrmRequestingLocation			is a RequestingLocation
				PrmRequisition                  is a Requisition
				PrmQuantity						is like UnsignedQuantity
					precision is DerivedNumberOfDecimalsQuantity
				PrmEnteredUOM                   is a UnitOfMeasure
				PrmTransactionUnitCost          is an UnsignedUnitCost
					precision is DerivedNumberOfDecimalsCost
				PrmTransactionCurrencyCode      is a Currency
				PrmAddToRequisition				is Numeric size 1
					States
						AddToExistingRequisition	value is 0
						StartNewRequisition			value is 1				
				PrmAllocationPriority			is an AllocationPriority
				PrmRequestedDeliveryDate		is Date
				PrmFromCompanyLocation 			is a FromCompanyLocation
				PrmRequisitionDescription		is Alpha size 30
				PrmRequisitionSource			is a RqSource
				PrmRSSSourceInformation			is Numeric size 1
					States
            			NotApplicable         	value is 0
            			SearchCatalog    		value is 1
						RecentlyRequestedItem   value is 2
            			ShoppingList    		value is 3
						Punchout				value is 4
						SpecialAndService		value is 5
						CopyRequisitionLine 	value is 6
				PrmAllocationPriorityLevel		is an AllocationPriorityLevel
				PrmBuyer						is a Buyer
				PrmCommodityCode				is a CommCodes
				PrmPOCode						is a POCode
				PrmDeliverTo					is a DeliverTo
				PrmVendor						is a Vendor
			Parameter Rules
				PrmCompany
					default to actor.agent(Employee).Employee.Requester.CurrentCompanyForRQC
                	initial value is actor.agent(Employee).Employee.Requester.CurrentCompanyForRQC
					default to actor.agent(Employee).Employee.Requester.Company
	            	initial value is actor.agent(Employee).Employee.Requester.Company					
				PrmRequisition
					if (PrmAddToRequisition.AddToExistingRequisition)
						required
							"FieldIsRequired"
						constraint(PrmRequisition.UpdateAllowed)
							"RequisitionMustBeUnreleased"
				PrmQuantity
					default to Quantity
					initial value is Quantity
				PrmEnteredUOM
					default to EnteredUOM
					initial value is EnteredUOM
				PrmAllocationPriority							
					if (RSSLPLConfigurationParameterRel exists)
						default to PrmAllocationPriorityLevel
						default to RSSLPLAllocationPriorityLevelRel.AllocationPriorityLevel
				PrmRequestedDeliveryDate
					if (RequesterRel.RequireRequestedDeliveryDate)
						required
							"Field_Requested_Delivery_DateIsRequired"
				PrmRequisitionDescription
					if (PrmAddToRequisition.StartNewRequisition
					and RequesterRel.RequireRequisitionDescription)
						required
							"Field_Requisition_DescriptionIsRequired"
				PrmBuyer
					initial value is PrmRequestingLocation.Buyer

					if (PrmAddToRequisition.StartNewRequisition
					and RequesterRel.RequireBuyer)
						required
							"Field_BuyerIsRequired"
				PrmPOCode
					initial value is PrmRequestingLocation.POCode

					if (PrmAddToRequisition.StartNewRequisition
					and RequesterRel.RequirePOCode)
						required
							"Field_PO_CodeIsRequired"
				PrmCommodityCode
					initial value is Item.CommodityCode

					if (PrmAddToRequisition.StartNewRequisition
					and RequesterRel.RequireCommodityCodeDisplay)
						required
							"Field_Commodity_CodeIsRequired"
				PrmDeliverTo
					if (PrmAddToRequisition.StartNewRequisition
					and RequesterRel.RequireDeliverTo)
						required
							"Field_Deliver_ToIsRequired"
	            PrmVendor
					if (PrmAddToRequisition.StartNewRequisition
					and (RequesterRel.RequireVendor 
					and not SourcingEventRequired))
						required
							"Field_VendorIsRequired"
            Entrance Rules
            	constraint(!CostCode.Punchout)
            		"CannotCopyALineCreatedFromPunchout"
          	
            Action Rules
				PrmRSSSourceInformation 	= PrmRSSSourceInformation.SpecialAndService
				PrmRequisitionSource 		= RqSource.RequisitionSelfService

            	include CopyLineInformation
            		
	        Exit Rules
				invoke UpdateCurrentRequisitionForRQC this instance.RequesterRel
					invoked.PrmCompany				= PrmCompany
					invoked.PrmRequisition     		= NewRequisitionFromCopy
		

		NonModalCopyRequisitionLineForSpecialAndService is an Instance Action
     		default label is "AddSelected_toRequisition"
        	completion message is "<LocalCompletionMessage>"
            Local Fields
                LocalRequisition	           	is a Requisition view
                LocalRequisitionLine            is a RequisitionLine view
                LocalInitializeContract			is Boolean
                PrmCompany						is like Company
                PrmRequestingLocation			is like RequestingLocation
                PrmRequisition					is like Requisition	
				PrmQuantity						is like Quantity
				PrmEnteredUOM               	is a UnitOfMeasure
				PrmAllocationPriority			is an AllocationPriority
				PrmRequestedDeliveryDate		is Date
				PrmFromCompanyLocation 			is a FromCompanyLocation
				PrmTransactionUnitCost          is an UnsignedUnitCost
					precision is DerivedNumberOfDecimalsCost
				PrmTransactionCurrencyCode      is a Currency
				PrmRequisitionDescription		is Alpha size 30
				PrmAddToRequisition				is Numeric size 1
					States
						AddToExistingRequisition	value is 0
						StartNewRequisition			value is 1	
				PrmRequisitionSource			is a RqSource
				PrmRSSSourceInformation			is Numeric size 1
					States
            			NotApplicable         	value is 0
            			SearchCatalog    		value is 1
						RecentlyRequestedItem   value is 2
            			ShoppingList    		value is 3
						Punchout				value is 4
						SpecialAndService		value is 5
						CopyRequisitionLine 	value is 6			
				PrmAllocationPriorityLevel		is an AllocationPriorityLevel		
				PrmBuyer						is a Buyer
				PrmCommodityCode				is a CommCodes
				PrmPOCode						is a POCode
				PrmDeliverTo					is a DeliverTo
				PrmVendor						is a Vendor
            Entrance Rules
            	constraint(!CostCode.Punchout)
            		"CannotCopyALineCreatedFromPunchout"
            	
            Action Rules
            	if (actor.agent(Employee).Employee.Requester.CurrentCompanyForRQC entered)
            		PrmCompany = actor.agent(Employee).Employee.Requester.CurrentCompanyForRQC
            		PrmRequestingLocation = actor.agent(Employee).Employee.Requester.RequisitionRel.RequestingLocation
	            	PrmRequisition = actor.agent(Employee).Employee.Requester.CurrentRequisitionForRQC
					PrmRequisitionSource 		= RqSource.RequisitionSelfService
					PrmRSSSourceInformation 	= PrmRSSSourceInformation.SpecialAndService

            	else
            		PrmCompany = actor.agent(Employee).Employee.Requester.Company
            		PrmRequestingLocation = actor.agent(Employee).Employee.Requester.RequestingLocation
					PrmAddToRequisition = PrmAddToRequisition.StartNewRequisition
					PrmRequisitionSource 		= RqSource.RequisitionSelfService
					PrmRSSSourceInformation 	= PrmRSSSourceInformation.SpecialAndService

				LocalCompletionMessage = SelectedItemsAddedMessage
				LocalCompanyForQuantityAdd = actor.agent(Employee).Employee.Requester.CurrentCompanyForRQC
				LocalCostUOMForQuantityAdd = EnteredUOM
				LocalRequisitionForQuantityAdd = actor.agent(Employee).Employee.Requester.CurrentRequisitionForRQC






				if (RequisitionLineItemRel exists
				and RequesterRel.ValidateDuplicateItem
				and !IsServiceItemByAmount)
					LocalCompletionMessage = ItemUpdatedMessage
					invoke RSSLPLUpdateRequisitionLineQTY RequisitionLineItemMatchRel
						invoked.PrmQuantity							= RequisitionLineItemMatchRel.Quantity + Quantity
						invoked.PrmUOM								= RequisitionLineItemMatchRel.EnteredUOM
				else	
	            	include CopyLineInformation
            		
	        Exit Rules
				if (!RequisitionLineItemRel exists
				and RequesterRel.ValidateDuplicateItem
				and !IsServiceItemByAmount)	
					invoke UpdateCurrentRequisitionForRQC this instance.RequesterRel
						if (RequesterRel.CurrentCompanyForRQC entered)
							invoked.PrmCompany			= RequesterRel.CurrentCompanyForRQC
						else
							invoked.PrmCompany			= actor.agent(Employee).Employee.Requester.Company
						invoked.PrmRequisition     		= NewRequisitionFromCopy
	

		ModalCopyMultipleRequisitionLinesForSpecialAndService is an Instance Action
     		default label is "AddSelected_toRequisition"
        	completion message is "<SelectedItemsAddedMessage>"
			Parameters
				PrmCompany						is an InventoryCompany
                PrmRequestingLocation			is a RequestingLocation
				PrmRequisition                  is a Requisition
			 	PrmAddToRequisition				is Numeric size 1
					States
						AddToExistingRequisition	value is 0
						StartNewRequisition			value is 1				
				PrmAllocationPriority			is an AllocationPriority
				PrmRequestedDeliveryDate		is Date
				PrmFromCompanyLocation 			is a FromCompanyLocation
				PrmRequisitionDescription			is Alpha size 30
				PrmRequisitionSource			is a RqSource
				PrmRSSSourceInformation			is Numeric size 1
					States
            			NotApplicable         	value is 0
            			SearchCatalog    		value is 1
						RecentlyRequestedItem   value is 2
            			ShoppingList    		value is 3
						Punchout				value is 4
						SpecialAndService		value is 5
						CopyRequisitionLine 	value is 6
				PrmAllocationPriorityLevel		is an AllocationPriorityLevel
				PrmBuyer						is a Buyer
				PrmCommodityCode				is a CommCodes
				PrmPOCode						is a POCode
				PrmDeliverTo					is a DeliverTo
				PrmVendor 						is a Vendor
            Local Fields
                LocalRequisition	           	is a Requisition view
                LocalRequisitionLine            is a RequisitionLine view
                LocalInitializeContract			is Boolean
				PrmQuantity						is like Quantity
				PrmEnteredUOM               	is a UnitOfMeasure
				PrmTransactionUnitCost          is an UnsignedUnitCost
					precision is DerivedNumberOfDecimalsCost
				PrmTransactionCurrencyCode      is a Currency
			Parameter Rules
				PrmCompany
					default to actor.agent(Employee).Employee.Requester.CurrentCompanyForRQC
                	initial value is actor.agent(Employee).Employee.Requester.CurrentCompanyForRQC
					default to actor.agent(Employee).Employee.Requester.Company
	            	initial value is actor.agent(Employee).Employee.Requester.Company					
				PrmRequisition
					if (PrmAddToRequisition.AddToExistingRequisition)
						required
							"FieldIsRequired"
						constraint(PrmRequisition.UpdateAllowed)
							"RequisitionMustBeUnreleased"
				PrmAllocationPriority							
					if (RSSLPLConfigurationParameterRel exists)
						default to PrmAllocationPriorityLevel
						default to RSSLPLAllocationPriorityLevelRel.AllocationPriorityLevel
				PrmRequestedDeliveryDate
					if (PrmAddToRequisition.StartNewRequisition
					and RequesterRel.RequireRequestedDeliveryDate)
						required
							"Field_Requested_Delivery_DateIsRequired"
				PrmRequisitionDescription
					if (PrmAddToRequisition.StartNewRequisition
					and RequesterRel.RequireRequisitionDescription)
						required
							"Field_Requisition_DescriptionIsRequired"
				PrmBuyer
					initial value is PrmRequestingLocation.Buyer

					if (PrmAddToRequisition.StartNewRequisition
					and RequesterRel.RequireBuyer)
						required
							"Field_BuyerIsRequired"
				PrmPOCode
					initial value is PrmRequestingLocation.POCode
					
					if (PrmAddToRequisition.StartNewRequisition
					and RequesterRel.RequirePOCode)
						required
							"Field_PO_CodeIsRequired"
				PrmCommodityCode
					if (PrmAddToRequisition.StartNewRequisition
					and RequesterRel.RequireCommodityCodeDisplay)
						required
							"Field_Commodity_CodeIsRequired"
				PrmDeliverTo
					if (PrmAddToRequisition.StartNewRequisition
					and RequesterRel.RequireDeliverTo)
						required
							"Field_Deliver_ToIsRequired"
	            PrmVendor
					if (PrmAddToRequisition.StartNewRequisition
					and (RequesterRel.RequireVendor 
					and not SourcingEventRequired))
						required
							"Field_VendorIsRequired"
            Entrance Rules
            	constraint(!CostCode.Punchout)
            		"CannotCopyALineCreatedFromPunchout"
            	
            Action Rules     
				PrmRSSSourceInformation 	= PrmRSSSourceInformation.SpecialAndService
				PrmRequisitionSource 		= RqSource.RequisitionSelfService       	
            	
				include CopyLineInformation
            		
	        Exit Rules
				invoke UpdateCurrentRequisitionForRQC this instance.RequesterRel
					invoked.PrmCompany				= actor.agent(Employee).Employee.Requester.Company
					invoked.PrmRequisition     		= NewRequisitionFromCopy
		

		MobileCopyRequisitionLineForSpecialAndService is an Instance Action
       		default label is "AddItem_toRequisition"
        	completion message is "ItemAdded_toRequisition"
            Local Fields
                LocalRequisition	           	is a Requisition view
                LocalRequisitionLine            is a RequisitionLine view
                LocalInitializeContract			is Boolean
                PrmCompany						is like Company
                PrmRequestingLocation			is like RequestingLocation
                PrmRequisition					is like Requisition	
				PrmQuantity						is like Quantity
				PrmEnteredUOM               	is a UnitOfMeasure
				PrmAllocationPriority			is an AllocationPriority
				PrmRequestedDeliveryDate		is Date
				PrmFromCompanyLocation 			is a FromCompanyLocation
				PrmTransactionUnitCost          is an UnsignedUnitCost
					precision is DerivedNumberOfDecimalsCost
				PrmTransactionCurrencyCode      is a Currency
				PrmRequisitionDescription		is Alpha size 30
				PrmAddToRequisition				is Numeric size 1
					States
						AddToExistingRequisition	value is 0
						StartNewRequisition			value is 1			
				PrmRequisitionSource			is a RqSource	
				PrmRSSSourceInformation			is Numeric size 1
					States
            			NotApplicable         	value is 0
            			SearchCatalog    		value is 1
						RecentlyRequestedItem   value is 2
            			ShoppingList    		value is 3
						Punchout				value is 4
						SpecialAndService		value is 5
						CopyRequisitionLine 	value is 6	
				PrmAllocationPriorityLevel		is an AllocationPriorityLevel
				PrmBuyer						is a Buyer
				PrmCommodityCode				is a CommCodes
				PrmPOCode						is a POCode
				PrmDeliverTo					is a DeliverTo
				PrmVendor						is a Vendor

            Entrance Rules
            	constraint(!CostCode.Punchout)
            		"CannotCopyALineCreatedFromPunchout"
            	
            Action Rules
            	if (actor.agent(Employee).Employee.Requester.CurrentCompanyForRQC entered)
            		PrmCompany = actor.agent(Employee).Employee.Requester.CurrentCompanyForRQC
            		PrmRequestingLocation = actor.agent(Employee).Employee.Requester.RequisitionRel.RequestingLocation
	            	PrmRequisition = actor.agent(Employee).Employee.Requester.CurrentRequisitionForRQC
					PrmRequisitionSource	= RqSource.RequisitionSelfService
					PrmRSSSourceInformation 	= PrmRSSSourceInformation.SpecialAndService
            	else
            		PrmCompany = actor.agent(Employee).Employee.Requester.Company
            		PrmRequestingLocation = actor.agent(Employee).Employee.Requester.RequestingLocation
					PrmAddToRequisition = PrmAddToRequisition.StartNewRequisition
					PrmRequisitionSource	= RqSource.RequisitionSelfService
					PrmRSSSourceInformation 	= PrmRSSSourceInformation.SpecialAndService
            	
            	include CopyLineInformation
            		
	        Exit Rules
				invoke UpdateCurrentRequisitionForRQC this instance.RequesterRel
					invoked.PrmCompany				= actor.agent(Employee).Employee.Requester.Company
					invoked.PrmRequisition     		= NewRequisitionFromCopy

		RecalculateLandedUnitCost is a Set Action
			restricted





			Parameters
				PrmCompany is an InventoryCompany
			Instance Selection
				where ((PrmCompany not entered
				or	    Company = PrmCompany)
				and    (LandedUnitCost not entered and TransactionUnitCost entered))
			Action Rules
				Instance Rules
					for each LandedLineAddOnCharges
						invoke RecalculateAOCLandedUnitCost each
					LandedUnitCost = DerivedLandedUnitCost
		
		CopyRequisitionSet is a Set Action
			restricted
			Parameters
				PrmExistingRequisition		is a Requisition
				PrmCopyFromRequisition  	is a Requisition
				PrmCompany 					is an InventoryCompany
				PrmRSSSourceInformation     is Numeric size 1
                    States
                        NotApplicable           value is 0
                        SearchCatalog           value is 1
                        RecentlyRequestedItem   value is 2
                        ShoppingList            value is 3
                        Punchout                value is 4
                        SpecialAndService       value is 5
                        CopyRequisitionLine     value is 6
				PrmRequisitionSource		is a RqSource
			Instance Selection
				where (Company 		= PrmCompany
				and    Requisition	= PrmCopyFromRequisition)
			Action Rules
				Instance Rules
					invoke CopyRequisitionLine 
						invoked.PrmCompany				= PrmCompany
						invoked.PrmRequisition			= PrmExistingRequisition
						invoked.PrmRSSSourceInformation = PrmRSSSourceInformation
						invoked.PrmRequisitionSource    = PrmRequisitionSource

	StateCycles
		RequisitionLineLifeCycle is a StateCycle
			state field is Status

			Unreleased is a State

				ReleaseRequisition is an Instance Action
					valid when (Requisition.IsForRelease)
					Action Rules
						invoke Release Requisition

				EditRelease is an Instance Action
					restricted
					Action Rules

						constraint (Quantity entered)
							"MustEnterAQuantityForLine<RequisitionLine>"

						if (Company.RequireUnitOfMeasure)
							constraint (EnteredUOM entered)
								"CompanyRequiresUnitOfMeasureToBeEnteredForLine<RequisitionLine>"
						constraint (EnteredUOM entered)
							"UOMIsRequiredForLine<RequisitionLine>"

						if (Vendor entered)
							constraint (Vendor.IsPoAddActive)
								"Vendor<Vendor>IsInactiveForLine<RequisitionLine>"
						if (TransactionCurrencyCode not = Requisition.BaseCurrencyCode)
			 				constraint (Vendor entered)
								"VendorRequiredIfCurrencyIsEnteredForTransactionCurrencyCodeForLine<RequisitionLine>"
						if (PurchaseFromLocation entered)
							constraint (VendorLocationExists)
								"Vendor<Vendor>Location<PurchaseFromLocation>IsInvalidForLine<RequisitionLine>"
							constraint (VendorLocationRel.IsActive)
								"Vendor<Vendor>Location<PurchaseFromLocation>IsInactiveForLine<RequisitionLine>"
							constraint (VendorLocationRel.IsPoAddActive)
								"Vendor<Vendor>Location<PurchaseFromLocation>IsInactiveForAddingPurchaseOrdersForLine<RequisitionLine>"
				   			constraint (not VendorLocationRel.LocationType.RemitTo)
								"Vendor<Vendor>_\Location<PurchaseFromLocation>CannotBeA_\Remit_\ToOnly_\Vendor_\LocationForLine<RequisitionLine>"

						if (IsInventoryOrNonstock)


							constraint (Item.Active)
								"Item<Item>IsInactiveForLine<RequisitionLine>"
							if (ItemLocationRel exists)
								if (IsInventoryType)
									constraint (ItemLocationRel.AllowIssue)
										"IssuesNotAllowedAtItemLocationForItem<Item>"	
								constraint (ItemLocationRel.ItemLocation.Active)
									"Item<Item>AtLocation<FromCompanyLocationBin.FromLocation>IsInactiveForLine<RequisitionLine>"

								if (ValidateQuantityAgainstMaximumOnLocation)
									constraint (TotalQuantityForItemIsWithinMaximum)
										"MaximumRequisitionQuantityOf<ItemLocationRel.MaximumRequisitionQuantity>_<Item.StockUOM>ExceededForItem<Item>OnLine<RequisitionLine>"




							if (CreatePurchaseOrder)
								if (HasItemLocationStockUOM)
									constraint (LocationItemUOMRel.OKForBuying)
										"<EnteredUOM>IsNotAValidLocationBuyingUnitOfMeasureForThisItem<Item>ForLine<RequisitionLine>"
								else
									constraint (ItemUOMRel.OKForBuying) 
										"<EnteredUOM>IsNotValidForBuyingUnitOfMeasureForThisItem<Item>ForLine<RequisitionLine>"
								if (VendorItemExists)
									constraint (VendorItem.Active)
										"VendorItem<VendorItem>IsInactiveForLine<RequisitionLine>"
									if (VendorItem.VendorBuyUOM.UnitOfMeasure entered)
										constraint (EnteredUOM = VendorItem.VendorBuyUOM.UnitOfMeasure)
											"VendorItemBuyUnitOfMeasureOf<VendorItem.VendorBuyUOM.UnitOfMeasure>DoesNotMatchEnteredUnitOfMeasureOf<EnteredUOM>ForLine<RequisitionLine>"
									constraint (not RecallProductItemForVendorItemHardErrorExists)
										"VendorItemIsOnActiveRecallNotice<first RecallProductItemForVendorItemHardErrorRel.RecallNotice>ForLine<RequisitionLine>"
								if (ItemLocationRel.DefaultSourceUOM entered
								and not InventoryCompanyRel.AllowOverrideOfSourceUOM)
									constraint (EnteredUOM = ItemLocationRel.DefaultSourceUOM.UnitOfMeasure)
										"SourceUOMExists;UseUOM<ItemLocationRel.DefaultSourceUOM.UnitOfMeasure>ForLine<RequisitionLine>"
									if (VendorItem.VendorBuyUOM.UnitOfMeasure entered)
										constraint (VendorItem.VendorBuyUOM.UnitOfMeasure = ItemLocationRel.DefaultSourceUOM.UnitOfMeasure)
												"ConflictBetweenVendorBuyUOMAndSourceUOMForLine<RequisitionLine>"
								if (IsInventoryOrNonstock)
									constraint (not Item.Discontinued)
										"CannotCreatePOForDiscontinuedItem<Item>ForLine<RequisitionLine>"
									if (ItemLocationRel exists)
										constraint (not ItemLocationRel.ItemLocation.Discontinued)
											"CannotCreatePOForDiscontinuedItem<Item>InItemLocation<FromCompanyLocationBin.FromLocation>ForLine<RequisitionLine>"
							else
								if (HasItemLocationStockUOM)
									constraint (LocationItemUOMRel.OKForTransaction)
										"<EnteredUOM>IsNotAValidLocationTransactionUnitOfMeasureForThisItem<Item>ForLine<RequisitionLine>"
								else
									constraint (ItemUOMRel.OKForTransaction)
										"<EnteredUOM>IsAnInvalidTransactionUnitOfMeasureForThisItem<Item>ForLine<RequisitionLine>"
							if (RequestingLocation.ParOrExchangeLocation
							and RequestingItemLocationRel exists)
								constraint (RequestingItemLocationRel.IsActive)
									"ItemLocationIsInactiveForLine<RequisitionLine>;Location:<RequestingLocation>,Item:<Item>"

						if (CreatePurchaseOrder)
							if (ItemGTIN entered and ItemGTIN exists)
								constraint (ItemGTIN.UnitOfMeasure.UnitOfMeasure = EnteredUOM)
									"ItemGTINUnitOfMeasureOf<ItemGTIN.UnitOfMeasure.UnitOfMeasure>DoesNotMatchEnteredUnitOfMeasureOf<EnteredUOM>ForLine<RequisitionLine>"
							if (Requisition.Dropship)
								constraint (NonInventoryItem)
									"CreatePurchaseOrderAndDropshipReceiveNotAllowedWithInventoriedTypeItemsForLine<RequisitionLine>"

						constraint (not RecallProductItemForItemHardErrorExists)
							"Item<Item>IsOnActiveRecallNotice<first RecallProductItemForItemHardErrorRel.RecallNotice>ForLine<RequisitionLine>"


						if (IsKitItemFromLocation)
							constraint (KitItemFromLocationRel.Active)
								"KitItem<Item>MustBeActiveForLine<RequisitionLine>"
						if (Company 			= FromCompanyLocationBin.FromCompany
						and RequestingLocation 	= FromCompanyLocationBin.FromLocation)
							constraint (RequestingLocation.InventoryTransactionType.Issue)
								"RequestingLocationAndFromLocationCannotEqualOnTransactionTypeDirectTransferOrIntransitTransferForLine<RequisitionLine>"
						if (IsInventory)
							if (LocationRule entered
							and CreatePurchaseOrder)
								for each WarehouseLocationRuleDetailsRel
									LocalLocationRuleFromCompanyLocation.FromCompany = each.LocationCompany
									LocalLocationRuleFromCompanyLocation.FromLocation = each.InventoryLocation
									if (WarehouseLocationRuleItemLocationRel exists
									and WarehouseLocationRuleItemLocationRel.InventoryTracked)
										IsValidLocationRule = true
										end for each
								constraint (IsValidLocationRule)
									"NoValidLocationForLocationRuleForLine<RequisitionLine>"
							if (IsTransactionTypeTransfer)
								constraint (RequestingItemLocationRel exists)
									"Item<Item>DoesNotExistAtThisLocation<RequestingLocation>ForLine<RequisitionLine>"
								constraint (RequestingItemLocationRel.InventoryTracked)
									"Item<Item>NotInventoryTrackedForLine<RequisitionLine>"
								if (InventoryLocationLotTrackingMustMatch)
									constraint (ItemLocationRel.LotTracked = RequestingItemLocationRel.LotTracked)
										"LotTrackingFlagsAtToAndFromLocationsDoNotMatchForLine<RequisitionLine>"
								constraint (ItemLocationRel.SerialTracked = RequestingItemLocationRel.SerialTracked)
									"SerialTrackingFlagsAtToAndFromLocationsDoNotMatchForLine<RequisitionLine>"
							if  (RequestingLocation.ParOrExchangeLocation
							and  ItemLocationRel not exists)
								constraint (RequestingItemLocationRel.RecordExists)
								   	"Item<Item>DoesNotExistAtThisLocation<RequestingLocation>ForLine<RequisitionLine>"
							else
								constraint (ItemLocationRel exists)
									"Item<Item>DoesNotExistAtThisLocation<FromCompanyLocationBin.FromLocation>ForLine<RequisitionLine>"
								constraint (ItemLocationRel.InventoryTracked)
									"Item<Item>NotInventoryTrackedForLine<RequisitionLine>"



						constraint (RequisitionLineDistributionsRel exists
						or			not IsDistributionAllowed)
							"MissingDistributionLineForLine<RequisitionLine>"

						invoke UpdateDuringRelease RequisitionLineDistribution set

						constraint (!LineErrorsExist)
							"ErrorsExistForLine<RequisitionLine>"

						constraint (not DistributionsExistButNotInBalance)
							"DistributionsOutOfBalanceForLine<RequisitionLine>"

						if (CostOption.CostRequired)
							constraint(TransactionUnitCost entered)
								"MustEnterUnitCostForItem<Item>_-_<Description>ForLine<RequisitionLine>"
						else
							constraint (not CannotSetToNoChargeOrVendorDetermined)
								"<CannotSetToNoChargeOrVendorDeterminedDisplay>ForLine<RequisitionLine>"

						if (CostOption.NoCharge)
							constraint (not ServiceCode.Amount)
								"CannotSet_Cost_OptionTo_No_ChargeFor_Service_ItemBy_AmountForLine<RequisitionLine>"


						if (Contract entered)
							LocalRelease = true
							include ValidateContract

							if  (not ItemType.Service
							and  not Contract.AllowReferenceOfItemsNotOnContract)
								if (IsInventoryOrNonstock)
									constraint (ItemOnContractLineRel exists)
										"Item<Item>IsNotOnReferencedContract<Contract>ForLine<RequisitionLine>"
								if (VendorItem entered)
									constraint (VendorItemOnContractLineRel exists)
										"VendorItem<VendorItem>IsNotOnReferencedContract<Contract>ForLine<RequisitionLine>"

							if (DistributionCode entered)
								constraint (not Contract.UseCommitments)
									"DistributionCodeNotAllowedForCommittedContract"
							if (Contract.CreateCommitments.HeaderSpread)
								if (ProcurementGroupRel.RequisitionCommitmentDate.LineEarlyDeliveryDate)
									constraint (RequestedDeliveryDate entered)
										"MustEnterAnEarlyDeliveryDateForContractCommitmentRelatedLineForLine<RequisitionLine>"
								if (not PreviousLineWithSameContract exists)
									invoke EditHeaderSpread ContractRel
										if (ProcurementGroupRel.RequisitionCommitmentDate.LineEarlyDeliveryDate)
											invoked.InTransactionDate	= RequestedDeliveryDate
											invoked.InAmount            = sum RequisitionLineSameContractSameDeliveryDate.CommitmentValue
										else
											invoked.InTransactionDate   = Requisition.CreationDate
											invoked.InAmount			= sum RequisitionLineSameContract.CommitmentValue
										invoked.InCurrency				= Requisition.BaseCurrencyCode
										invoked.InAddOnChargeAmount     = LineNonLandedAddOnChargeTotal

							if (ContractLine entered)
								if (ItemType.Service
								and not Contract.AllowReferenceOfItemsNotOnContract)
									constraint (ContractLine.ForServiceCostDefaulting)
										"ContractLineIsNotForServiceCostDefaultingForLine<RequisitionLine>"
									constraint (not ContractLine.ErrorsExist)
										"CannotUseAContractLineThatHasErrorsForLine<RequisitionLine>"
									constraint (not ContractLine.ContractLineState.Closed)
										"CannotUseAContractLineThatIsClosedForLine<RequisitionLine>"
									constraint (ContractLine.CanUseForCostDefaulting)
										"MustEnterAContractLineThatCanBeUsedForCostDefaultingForLine<RequisitionLine>"
								if ((Contract.LifetimeEdit.PurchaseOrdersAndReqs
								or  (Contract.LifetimeEdit.PurchaseOrders 
								and  Contract.CreateCommitments.LineSpread))
								and  not CostCode.Punchout)
									invoke EditLimits ContractLineRel
										if (ProcurementGroupRel.RequisitionCommitmentDate.LineEarlyDeliveryDate
										and RequisitionLine.RequestedDeliveryDate entered)
											invoked.InDate	= RequisitionLine.RequestedDeliveryDate
										else
											invoked.InDate   = Requisition.CreationDate
										invoked.InCurrency				= Requisition.BaseCurrencyCode
										invoked.InAmount				= UnitCost * Quantity
										invoked.InAddOnChargeAmount     = LineNonLandedAddOnChargeTotal
										invoked.InQuantity              = Quantity
										invoked.InUOM                   = EnteredUOM
										invoked.InTaxAmount             = AccruedTaxAmount + InvoicedTaxAmount
										invoked.FromRQ                  = true
										if (Contract.LifetimeEdit.PurchaseOrders 
										and Contract.CreateCommitments.LineSpread)
											invoked.LineSpreadOnly      = true
								if (not CostCode.Punchout)
									constraint (ContractLine.UseForCostDefaultingSomewhere)
										"ContractLineNotAvailableForCostDefaultingForLine<RequisitionLine>"

						if (PurchaseTaxable and CreatePurchaseOrder)
							constraint (PurchaseTaxCode entered)
								"PurchaseTaxCodeIsRequiredForLine<RequisitionLine>"

						if (PurchaseTaxCode entered)
							constraint (PurchaseTaxable)
								"TaxCodeCannotBeEnteredWhenItemIsNotTaxableForLine<RequisitionLine>"

							if (not TaxEntityUsesSabrix 
							and not TaxEntityRel.ThirdParty.VertexOSeries)
								initialize CalculateTax
								CalculateTax.TaxEntity                      = FromCompanyLocationBin.FromCompany.AccountingEntity	
								CalculateTax.TaxCode                        = PurchaseTaxCode
								CalculateTax.ProductTaxCategory				= ProductTaxCategory
								CalculateTax.Function                       = CalculateTax.Function.Inquire
								TaxOut                                      = CalculateTax.ExecuteCalculateTax
								constraint (CalculateTax.OutputErrorNumber not entered)
									"<CalculateTax.OutputErrorMessage>ForLine<RequisitionLine>"

							constraint (TaxableLineAllowancesWithDifferentTaxRel not exist)

								"TaxOnAllowanceAddOnChargeMustMatchTaxCodeForLine<RequisitionLine>"
						else
							constraint (LineAllowancesWithTaxRel not exists)
								"CannotHaveTaxOnAllowanceAddOnChargeIfLine<RequisitionLine>DoesNotHaveTax"

						if (IsHSNSACCodeEnabled)
							constraint (HSNSACCode entered)
								"HSN_/SACCodeIsRequiredForLine<RequisitionLine>"
						else
							constraint (HSNSACCode not entered)
								"CannotEnter,HSN_/SACCodeFlagIsNotSetAtGlobalLedgerCompanyForLine<RequisitionLine>"

						if (Company.AllocationBasis.ByDate)
							if (AllocationPriority = 1)
								constraint (CreatePurchaseOrder)
									"AllocationByDate.HighPriorityAllowedIfCreatePurchaseOrderForLine<RequisitionLine>"
						if (PurchasingCompanyRel.ManualPOCodeAllowed.No
						or  PurchasingCompanyRel.ManualPOCodeAllowed.PurchaseOrdersOnly)
							constraint (POCode not entered)
								"ManualEntryOfP\OCodeNotAllowedForLine<RequisitionLine>"

						if (SourcingEventRequired)
							constraint (Requisition.SourcingCompanyRel exists)
								"StrategicSourcingNotUsed;CannotSetSourcingEventRequiredForLine<RequisitionLine>"
							constraint (not RequestingLocation.ParOrExchangeLocation)
								"ParLocation;CannotSetSourcingEventRequiredForLine<RequisitionLine>"
						
						if (initiating action = "Requisition.RSSLPLRelease")
							constraint (not RSSLPLMissingRequiredFields)
								"CannotSubmit\._ThereAreRequiredFieldsMissingAValueInLine."

				Release is an Instance Action
					restricted
					Action Rules
						RemainingCommitment             = Quantity

						invoke UpdateContractAmounts
							invoked.PrmQuantity			= Quantity

						ReleasedDate                    = current timestamp
						ReleasingOperatorID             = actor

						if (IsInventoryOrNonstock)
							invoke UpdateRequesterItemCount

						make transition to Released

						if (TaxEntityRel.ThirdParty.Sabrix
						and TaxEntityRel.DelayTaxProcessing
						and not SingleCallToOneSource
						and not SingleCallToVertex)
							initialize LandedUnitCost
							LandedUnitCost = DerivedLandedUnitCost



						if (Requisition.RequisitionApprovalType.LineApproval)
							initiate RequisitionLineApproval process
								title is "LineApprovalForCompany<Company>,Requisition<Requisition>,Line<RequisitionLine>"
								Criteria
									Company
									RequestingLocation
								category filter is RequestingLocation
								Variables
									Company
									Requisition
									RequisitionLine

								URLs
									"<linkback(webapp is Approver navigation is ApprovalRequisitionLineNav text is \"ViewRequisitionLine\")>"





					Exit Rules
						if (TaxEntityRel.ThirdParty.Sabrix
						and TaxEntityRel.DelayTaxProcessing
						and not SingleCallToOneSource
						and not SingleCallToVertex)

							invoke UpdateTotalsFromLine Requisition
								invoked.PrmLineExtendedAmount	= LineExtendedAmount - old LineExtendedAmount
								invoked.PrmApprovalValue		= DerivedBaseAmountWithTax - old DerivedBaseAmountWithTax
								invoked.PrmItemType				= ItemType

							for each LineAddOnChargesRel
								invoke CalculateOneSourceLandedUnitCost each

				Delete is a Delete Action    
					valid when (Requisition.BudgetEditAndInterfaceNotInProcess)
					Entrance Rules
						constraint (not Requisition.IsClosedStatus)
							"CannotDelete;RequisitionIsClosed"

						if (RQGeneralLedgerSystemCodeRel.EncumbranceOption.TrackAndEdit
						or  RQGeneralLedgerSystemCodeRel.EncumbranceOption.Track)
							for each RequisitionLineDistribution set
								invoke PurgeGLCommitment each

						if (Requisition.ForCapitatedProcedure)
							if (IsACapitatedProcedure)
								constraint (!ProcedureHasComponents)
									"CannotDeleteProcedure;ProcedureHasComponents;MustDeleteComponentsFirst"

							if (NoChargeCapitatedComponent)
								constraint (ChargedCapitatedComponentRel !exists)
									"CannotDeleteANoChargeComponentForThisComponentGroupWhenChargedComponentsExist;MustDeleteChargedComponentsFirst"

						if (HasPatientProcedureRecord)
							invoke DeletePatientProcedure

						if (HasInventoryUDIDetailRecord)
							invoke Delete InventoryUDIDetailRel

						for each RequisitionLineAddOnCharge set
							invoke DeleteRequisitionAddOnCharge each

						if (PreferenceCardTransaction
						and HasScheduledProcedureRecord)
							if (initiating action = "ScheduledProcedure.MassRequisitionFromScheduledProcedure")
								invoke RemoveRequisition ScheduledProcedureLineRel
							else
								invoke CancelLine ScheduledProcedureLineRel
									invoked.PrmCancelQuantity = ScheduledProcedureLineRel.DerivedTotalQuantity

					Exit Rules
						decrement Requisition.NumberOfLines by 1
						invoke UpdateTotalsFromLine Requisition
							invoked.PrmLineExtendedAmount	= LineExtendedAmount * -1
							invoked.PrmApprovalValue		= DerivedBaseAmountWithTax * -1 
							invoked.PrmItemType				= ItemType
						
						if (Requisition.Status.InProcess
						and	Requisition.ForApprovalRequisitionLinesRel not exists
						and Requisition.UnreleasedRequisitionLinesRel not exists)
							invoke InProcess.TransitionToProcessed Requisition


				FrontEndSplitDistributions	is an Instance Action
					valid when(AllowFrontEndSplit)
					Action Rules
						invoke SplitFESDistributions RequisitionLineDistribution in foreground
							invoked.PrmCompany 			= Company
							invoked.PrmRequisition		= Requisition
							invoked.PrmRequisitionLine	= RequisitionLine

				DeleteFrontEndSplitDistributions	is an Instance Action
					valid when(HasFrontEndSplitDistributions)
					Action Rules
						invoke DeleteFrontEndSplitDistributions RequisitionLineDistribution
							invoked.PrmCompany 				= Company
							invoked.PrmRequisition			= Requisition
							invoked.PrmRequisitionLine		= RequisitionLine

				RSSLPLUpdateRequisitionLine is an Instance Action
					completion message is "ItemUpdated"
					Parameters
						PrmQuantity            			is an UnsignedQuantity
							precision is DerivedNumberOfDecimalsQuantity
						PrmUOM                 			is a UnitOfMeasure
						PrmTransactionUnitCost 			is an UnsignedUnitCost
							precision is DerivedNumberOfDecimalsCost
						PrmCommodityCode				is a CommCodes
						PrmDeliverTo					is a DeliverTo
						PrmBuyer						is a Buyer
						PrmPOCode						is a POCode
						PrmManufacturer					is a Manufacturer
						PrmManufacturerNumber			is a ManufacturerNumber
						PrmAsset 						is an Asset
						PrmAssetTemplate				is an AssetTemplate
						PrmGLEncumbranceReference		is AlphaUpper size 60
						PrmRequestedDeliveryDate		is Date
						PrmMajorPurchasingClass         is a MajorPurchasingClass
						PrmMinorPurchasingClass			is a MinorPurchasingClass
						PrmItem                         is an Item
						PrmVendor						is a Vendor
						PrmVendorItem					is a VendorItem
					Parameter Rules
						PrmCommodityCode
							initial value is CommodityCode
							default to CommodityCode

							if (RSSLPLValidateLineCommodityCode)
								required
									"Field_Commodity_CodeIsRequired"
						PrmDeliverTo
							initial value is DeliverTo
							default to DeliverTo

							if (RSSLPLValidateDeliverTo)
								required
									"Field_Deliver_ToIsRequired"
						PrmBuyer
							initial value is Buyer
							default to Buyer

							if (RSSLPLValidateBuyer)
								required
									"Field_BuyerIsRequired"
						PrmPOCode
							initial value is POCode
							default to POCode

							if (RSSLPLValidatePOCode)
								required
									"Field_PO_CodeIsRequired"
						PrmManufacturer
							initial value is Manufacturer
							default to Manufacturer

							if (RSSLPLValidateManufacturer)
								required
									"Field_ManufacturerIsRequired"
						PrmManufacturerNumber
							initial value is ManufacturerNumber
							default to ManufacturerNumber

							if (RSSLPLValidateManufacturerNumber)
								required
									"Field_Manufacturer_NumberIsRequired"
						PrmAsset
							initial value is RequisitionLineDistributionsRel.AssetInformation.Asset
							default to RequisitionLineDistributionsRel.AssetInformation.Asset

							if (RSSLPLValidateAsset)
								required
									"Field_AssetIsRequired"
						PrmAssetTemplate
							initial value is RequisitionLineDistributionsRel.AssetInformation.AssetTemplate
							default to RequisitionLineDistributionsRel.AssetInformation.AssetTemplate

							if (RSSLPLValidateAssetTemplate)
								required
									"Field_Asset_TemplateIsRequired"
						PrmGLEncumbranceReference
							initial value is RequisitionLineDistributionsRel.GLEncumbranceReference
							default to RequisitionLineDistributionsRel.GLEncumbranceReference

							if (RSSLPLValidateGLEncumbranceReference)
								required
									"Field_GL_Encumbrance_ReferenceIsRequired"
						
						PrmRequestedDeliveryDate
							initial value is RequestedDeliveryDate
							default to RequestedDeliveryDate

							if (RSSLPLValidateRequestedDeliveryDate)
								required
									"Field_Requested_Delivery_DateIsRequired"
						
						PrmVendor
							initial value is Vendor
							default to Vendor
							
							if (RSSLPLValidateVendor)
								required
									"Field_VendorIsRequired"
						
						PrmItem
							initial value is Item
							default to Item
						
						PrmVendorItem
							initial value is VendorItem
							default to VendorItem
							
							if (RSSLPLValidateVendorItem)
								required
									"Field_VendorIsRequired"
						
						PrmMajorPurchasingClass
							initial value is MajorPurchasingClass
							default to MajorPurchasingClass
							
							if (RSSLPLValidateMajorPurchasingClass)
								required
									"Field_Major_Purchasing_ClassIsRequired"
						
						PrmMinorPurchasingClass
							initial value is MinorPurchasingClass
							default to MinorPurchasingClass
							
							if (RSSLPLValidateMinorPurchasingClass)
								required
									"Field_Minor_Purchasing_ClassIsRequired"
					Action Rules
						if (AllowUpdateToLinesFromPunchout
						or  !CostCode.Punchout)
							invoke Update RequisitionLine
								invoked.Quantity							= PrmQuantity
								invoked.EnteredUOM							= PrmUOM
								invoked.TransactionUnitCost					= PrmTransactionUnitCost
								invoked.CommodityCode						= PrmCommodityCode
								invoked.DeliverTo							= PrmDeliverTo
								invoked.Buyer								= PrmBuyer
								invoked.POCode								= PrmPOCode
								invoked.Manufacturer						= PrmManufacturer
								invoked.ManufacturerNumber					= PrmManufacturerNumber
								invoked.RequestedDeliveryDate				= PrmRequestedDeliveryDate
								invoked.Vendor								= PrmVendor
								invoked.VendorItem							= PrmVendorItem
								invoked.MajorPurchasingClass				= PrmMajorPurchasingClass
								invoked.MinorPurchasingClass				= PrmMinorPurchasingClass
								
							if ((PrmAsset not = RequisitionLineDistributionsRel.AssetInformation.Asset
							or PrmAssetTemplate not = RequisitionLineDistributionsRel.AssetInformation.AssetTemplate)
							or PrmGLEncumbranceReference not = RequisitionLineDistributionsRel.GLEncumbranceReference)
								invoke Update first RequisitionLineDistribution set
									invoked.AssetInformation.Asset			= PrmAsset
									invoked.AssetInformation.AssetTemplate	= PrmAssetTemplate
									invoked.GLEncumbranceReference			= PrmGLEncumbranceReference

				RSSLPLUpdateRequisitionLineQTY is an Instance Action
					completion message is "<Item>_ItemUpdated"
					Parameters
						PrmQuantity            			is an UnsignedQuantity
							precision is DerivedNumberOfDecimalsQuantity
						PrmUOM                 			is a UnitOfMeasure
					Action Rules
						if (AllowUpdateToLinesFromPunchout
						or  !CostCode.Punchout)
							invoke Update RequisitionLine
								invoked.Quantity							= PrmQuantity
								invoked.EnteredUOM							= PrmUOM
								invoked.TransientBypassUnitCost 			= true 

			Released is a State
				Process is an Instance Action    
					restricted
					Entrance Rules
						if (Requisition.RequisitionApprovalType.LineApproval)
							Approved = true
							invoke RefreshAndLock Requisition

					Action Rules

						ApprovedRejectedDate			= current timestamp
						ApprovingRejectingOperatorID	= actor
						LastUpdateDate					= current timestamp
						LastUpdateBy					= actor
						if (Requisition.RequisitionApprovalType.HeaderApproval)
							Approved = true
						make transition to Processed

						if (IsInventory
						and LocationRule entered
						and not PreferenceCardTransaction)
							initialize LocalAvailableQuantity
							for each WarehouseLocationRuleDetailsRel
								LocalLocationRuleFromCompanyLocation.FromCompany = each.LocationCompany
								LocalLocationRuleFromCompanyLocation.FromLocation = each.InventoryLocation
								if (WarehouseLocationRuleItemLocationRel exists
								and WarehouseLocationRuleItemLocationRel.InventoryTracked
								and WarehouseLocationRuleItemLocationRel.Active)
									if (WarehouseLocationRuleItemLocationRel.AvailableQuantity >= DerivedQuantityStockOrSecondary)
										LocalFromCompanyLocationFromRule.FromCompany = LocalLocationRuleFromCompanyLocation.FromCompany
										LocalFromCompanyLocationFromRule.FromLocation= LocalLocationRuleFromCompanyLocation.FromLocation
										end for each
									else
										if (WarehouseLocationRuleItemLocationRel.AvailableQuantity > LocalAvailableQuantity
										or LocalFromCompanyLocationFromRule not entered)
											LocalAvailableQuantity = WarehouseLocationRuleItemLocationRel.AvailableQuantity
											LocalFromCompanyLocationFromRule.FromCompany = LocalLocationRuleFromCompanyLocation.FromCompany
											LocalFromCompanyLocationFromRule.FromLocation= LocalLocationRuleFromCompanyLocation.FromLocation

							FromCompanyLocationBin.FromCompany = LocalFromCompanyLocationFromRule.FromCompany
							FromCompanyLocationBin.FromLocation = LocalFromCompanyLocationFromRule.FromLocation

						include CreateInterfaceOrDemand


						RemainingCommitment -= KilledQuantity
						if (RemainingCommitment < 0)
							RemainingCommitment = 0





					Exit Rules
						if (Buyer entered
						and DeliveryMethod entered
						and CreatePurchaseOrder)
							send email
								to Buyer.EmailAddress
								from config.DefaultFromEmailAddress
								subject "RequisitionCreatedWithDeliveryMethod"
								Contents
									"Company<Company>_Requisition<Requisition>_Line<RequisitionLine>HasADeliveryMethodOf<DeliveryMethod>\.PleaseTakeAppropriateAction."

						if (Requisition.RequisitionApprovalType.LineApproval
						and Requisition.ForApprovalRequisitionLinesRel not exists
						and Requisition.UnreleasedRequisitionLinesRel not exists) 
							invoke Released.TransitionToProcessed Requisition

						if (IsInventoryOrNonstock
						and Item.Recipe
						and RecipeRel exists
						and WarehouseDemandLines2Rel.BackorderedQuantity entered)
							include CreateKitchenOrder

				ManualApprove is an Instance Action
					valid when (Requisition.RequisitionApprovalType.LineApproval)
					Action Rules
						invoke Process
						cancel RequisitionLineApproval process

				UnreleaseLine	is an Instance Action
					restricted
					Action Rules
						invoke ManualAndPFIUnrelease

				ManualUnrelease is an Instance Action
					valid when (Requisition.RequisitionApprovalType.LineApproval)
					Action Rules
						invoke ManualAndPFIUnrelease
						cancel RequisitionLineApproval process

				ManualAndPFIUnrelease is an Instance Action
					restricted
					Action Rules
						if (not IsProcessedAndApproved)
							RemainingCommitment = 0
							Status                = 0

						invoke UpdateContractAmounts
							invoked.PrmQuantity = Quantity * -1

					   	initialize ReleasedDate
					   	initialize ReleasingOperatorID

					   	make transition to Unreleased
					Exit Rules
						if (Requisition.Status.Released)
							invoke Released.Unrelease Requisition
						else
						if (Requisition.Status.InProcess)

							invoke InProcess.Unrelease Requisition


				ManualReject is an Instance Action
					valid when (Requisition.RequisitionApprovalType.LineApproval)
					Action Rules
						invoke ManualAndPFIRejectLine
						cancel RequisitionLineApproval process

				RejectLine is an Instance Action
					restricted
					Action Rules
						invoke ManualAndPFIRejectLine

				ManualAndPFIRejectLine is an Instance Action
					restricted
					Action Rules
						if (not IsProcessedAndApproved)
							RemainingCommitment = 0
							Closed                = true
							invoke CloseRequisition Requisition

						if (RQGeneralLedgerSystemCodeRel.EncumbranceOption.TrackAndEdit
						or  RQGeneralLedgerSystemCodeRel.EncumbranceOption.Track)
							for each RequisitionLineDistribution set
								if (each.CurrentCommitmentExists)
									invoke UpdateGLCommitmentIndirect each
										invoked.ApprovalReject = true

						invoke UpdateContractAmounts
							invoked.PrmQuantity = Quantity * -1
							invoked.PrmFromCancelOrDelete = true

						make transition to Rejected
					Exit Rules
						invoke Rejected.Close
						if (Requisition.Status.Released)
							if (LinesNotRejectedRel not exists)
								invoke Released.RejectFromLine Requisition
							else
							if (Requisition.ForApprovalRequisitionLinesRel not exists)
								invoke Released.TransitionToProcessed Requisition

						if (RequestedScheduledProcedureLineRel exists)
							invoke RejectLine RequestedScheduledProcedureLineRel

			Rejected is a State
				Close is an Instance Action
					restricted
					valid when (IsOpen)
					Parameters
						PrmWarehouseShipment 	is like WarehouseShipment
					Action Rules

						if (PrmWarehouseShipment entered)
							LocalWarehouseShipment = PrmWarehouseShipment
							LocalWarehouseShipmentLine = true

							if (LocalWarehouseShipment entered)
								if (instance count of AvailableWarehouseShipmentReqLineRel = 0)
									LocalWarehouseShipmentLine = false

							if (LocalWarehouseShipmentLine)

								include CloseLine


			Processed is a State
				UpdateLineReturn is an Update Action
					Entrance Rules
						if (SourcingEventRequired
						and CostCode.Entered
						and TransactionUnitCost entered)
							initialize Vendor
							initialize PurchaseFromLocation
					Action Rules
						include ValidateEntry
					Exit Rules
						if (ItemIsBinTrackedOnlyWithPreferredBin)
							if (CurrentReturnQuantity entered)
								if (RequisitionLineDetailRel not exists)
									invoke Create RequisitionLineDetail
										invoked.Company									= Company
										invoked.Requisition								= Requisition
										invoked.RequisitionLine							= RequisitionLine
										invoked.InventoryLocation						= FromCompanyLocationBin.FromLocation
										invoked.RequisitionLineDetail.Bin 				= ItemLocationRel.PreferredBin
										invoked.RequisitionLineDetail.UnitOfMeasure		= EnteredUOM
										invoked.Quantity								= CurrentReturnQuantity
										if (IsCatchWeightItem)
											invoked.CatchWeightQuantity					= CurrentReturnCatchWeightQuantity

								if (instance count of RequisitionLineDetailRel = 1)
									invoke Update first RequisitionLineDetailRel
										invoked.Quantity			= CurrentReturnQuantity
										if (IsCatchWeightItem)
											invoked.CatchWeightQuantity	= CurrentReturnCatchWeightQuantity
							else
							if (instance count of RequisitionLineDetailRel = 1)
								invoke Delete first RequisitionLineDetailRel


				UpdateKilledQuantity is an Instance Action    
					restricted
					valid when (IsOpen)
					Parameters
						PrmKilledQuantity                  is a Quantity

					Action Rules
						if (Item.StockUOM not = EnteredUOM
						and not IsCatchWeightItem)

							initialize UOMCalculation
							UOMCalculation.InputToUOM      = EnteredUOM
							UOMCalculation.InputUOM        = Item.StockUOM
							UOMCalculation.InputQuantity   = PrmKilledQuantity
							UOMCalculation.Method          = UOMCalculation.Method.ConvertToAlternate
							KilledQuantity 				  += UOMCalculation.OutputQuantity
						else
							KilledQuantity				  += PrmKilledQuantity

						LastUpdateDate					   = current timestamp
						LastUpdateBy					   = actor

						if (KilledQuantity + DeliveredQuantity + DerivedShippedAndVoided = Quantity)
							LocalFromKilledQuantity = true
							include CloseLine
						else
						if (KilledQuantity > 0)
							for each RequisitionLineDistribution set
								if (each.CurrentCommitmentExists)
									invoke UpdateGLCommitmentIndirect each
										invoked.KilledQuantity = true

				UpdateInterfaceCancelQuantity is an Instance Action
					restricted
					valid when (IsOpen)
					Parameters
						PrmCancelQuantity                  is a Quantity
						PrmFromContract                    is Boolean
						PrmFromPOLineDelete                is Boolean
					Action Rules

						InterfaceCancelQuantity  += PrmCancelQuantity
						if (PrmFromContract)
							InterfaceCancelQuantity = Quantity
							RemainingCommitment     = 0
						RemainingCommitment -= PrmCancelQuantity
						if (RemainingCommitment < 0)
							RemainingCommitment = 0
						LastUpdateDate					   = current timestamp
						LastUpdateBy					   = actor

						if (InterfaceCancelQuantity + DeliveredQuantity = Quantity)
							TransientCancel = true
							if (PrmFromPOLineDelete = true)
								LocalSkipCommitment = true
							include CloseLine
							if (HasRequisitionHeaderAOC
							and AllRequisitionLinesCanceled)
								for each HeaderAddOnChargesRel
									invoke CancelAddOnChargeFromPO each
						else
							for each RequisitionLineDistribution set
								if (each.CurrentCommitmentExists)
									invoke UpdateGLCommitmentIndirect each
										invoked.PrmCancelQuantity = PrmCancelQuantity

						invoke UpdateContractAmounts
							invoked.PrmQuantity = PrmCancelQuantity * -1 

				Close is an Instance Action    
					restricted
					Parameters
						PrmCloseFromSource		is Boolean
						PrmWarehouseShipment 	is like WarehouseShipment
						FromInterfaceCancel     is Boolean
						ParmSkipCommitment      is Boolean
						PrmFromPOLineCancel     is Boolean
					Local Fields
						LocalRequisitionLineIsOpen is Boolean
							value is false
					Action Rules
						LocalWarehouseShipment = PrmWarehouseShipment
						LocalWarehouseShipmentLine = true
						if (LocalWarehouseShipment entered
						and DerivedVoidedQuantity = 0)
							ParmSkipCommitment = true 
						if (CreatePurchaseOrder and PurchaseOrderInterfacesRel exists)

							LocalRequisitionLineIsOpen = true
						else
						if (IsInventory and WarehouseDemandLines2Rel exists
						and not PrmCloseFromSource)
							LocalRequisitionLineIsOpen = true
						else

							if (not SourceRecordExists)
								display "ShouldCloseLine?"

							else
								if (PrmCloseFromSource)
									LocalRequisitionLineIsOpen = false
								else
									for each PurchaseOrderLineSourcesRel
										LocalPurchaseOrder     = each.PurchaseOrder
										LocalPurchaseOrderLine = each.PurchaseOrderLine
										if (PurchaseOrderLineRel exists)
											if (PurchaseOrderLineRel.ServiceCode.Amount
											and PurchaseOrderLineRel.QuantityToProcess > 0
											and PurchaseOrderLineRel.MatchedAmount < PurchaseOrderLineRel.EnteredUnitCost
											and PurchaseOrderLineRel.EnteredUnitCost > (PurchaseOrderLineRel.MatchedAmount + PurchaseOrderLineRel.ServiceCancelAmount)
											and not PurchaseOrderLineRel.CostOption.NoCharge)
												LocalRequisitionLineIsOpen = true
												end for each
											else
											if (PurchaseOrderLineRel.ServiceCode.Quantity
											and PurchaseOrderLineRel.QuantityToProcess > 0
											and PurchaseOrderLineRel.MatchedQuantity < PurchaseOrderLineRel.QuantityToProcess
											and not PurchaseOrderLineRel.CostOption.NoCharge)
												LocalRequisitionLineIsOpen = true
												end for each
											else
											if (PurchaseOrderLineRel.ServiceCode not entered)
												if ((each.DeliveredQuantity + each.ProcessedQuantity) < each.Quantity)
													LocalRequisitionLineIsOpen = true
													end for each

						if (LocalWarehouseShipment entered)
							if (instance count of AvailableWarehouseShipmentReqLineRel = 0)
								LocalWarehouseShipmentLine = false

						if (LocalWarehouseShipmentLine
						and !LocalRequisitionLineIsOpen)
							if (FromInterfaceCancel
							or  DerivedVoidedQuantity > 0)
								TransientCancel = true
							if (ParmSkipCommitment = true)
								LocalSkipCommitment = true

							include CloseLine

						if (!PrmFromPOLineCancel)
							invoke UpdateContractAmounts  
								invoked.PrmQuantity				= ((Quantity - InterfaceCancelQuantity) * -1)
								invoked.PrmCloseRequisitionLine = true
					
				UpdateReturnDetails is an Instance Action
					restricted
					Action Rules
						if (ReturnQuantity changed
						or FromCompanyLocationBin.Bin changed)
							include ValidateEntry

						if (ReturnQuantity not entered)
							initialize DetailReturnQuantity

						LastUpdateDate           = current timestamp
						LastUpdateBy             = actor



				ReleaseReturn is an Instance Action        
					restricted
					valid when (IsReturned)

					Local Fields
						NewInventoryTransaction				is an InventoryTransaction view
						NewInventoryTransactionLine			is an InventoryTransactionLine view
						LocalReturnQuantity					is like Quantity

					Action Rules
						include ValidateEntry
						if (ItemLocationRel.BinTracked)
							constraint (RequisitionLineDetailRel exists)
								"Line<RequisitionLine>BinRequiredForThisItem<Item>"

							for each RequisitionLineDetailRel
								if (LocalLineBin not entered)
									LocalLineBin = each.RequisitionLineDetail.Bin
								if (LocalLineBin = each.RequisitionLineDetail.Bin)
									LocalOneBin = true
								else
									LocalOneBin = false

						if (ItemIsSerialTrackedAtReceipt)
							constraint (RequisitionLineDetailRel exists)
								"Line<RequisitionLine>SerialRequiredForThisItem<Item>"
						if (ItemIsLotTrackedAtReceipt)
							constraint (RequisitionLineDetailRel exists)
								"Line<RequisitionLine>LotRequiredForThisItem<Item>"

						if (ItemIsDetailTracked)
							DetailReturnQuantity = (sum RequisitionLineDetail set.Quantity)
							LocalCatchWeightDetailReturnQuantity = (sum RequisitionLineDetail set.CatchWeightQuantity)
							if (RequisitionLineDetailRel exists)
								constraint (IsBalanced)
									"Line<RequisitionLine>OutOfBalance"

						constraint (ShipmentLineExists)
							"ShipmentDoesNotExist"

						if (GeneralLedgerCompanyForCompanyRel.FinanceEnterpriseGroup.BODTrigger)
							LocalTitle = "EG:"+GeneralLedgerCompanyForCompanyRel.FinanceEnterpriseGroup+" CO:"+Company+" RQ:"+Requisition+" RQL:"+RequisitionLine
								increment bod id.VariationID
								ActionCode = ActionCode.Update
								include TriggerRequisitionReturnServiceRules


						invoke Unreleased.Create InventoryTransactionRel
							assign result to NewInventoryTransaction
							fill in fields from this instance
								except invoked.InventoryTransactionType
							invoked.Company											= FromCompanyLocationBin.FromCompany
							invoked.InventoryLocation								= FromCompanyLocationBin.FromLocation
							invoked.InventoryDocumentType							= "RR"
							invoked.FromToCompanyLocation.FromToCompany				= Company
							if (RequestingLocation.InventoryTransactionType.Issue)
								invoked.FromToCompanyLocation.RequestingLocation	= RequestingLocation
							else
							if (RequestingLocation.InventoryTransactionType.DirectTransfer
							or  RequestingLocation.InventoryTransactionType.IntransitTransfer)
								invoked.FromToCompanyLocation.FromToLocation		= RequestingLocation
							invoked.OriginatingTransaction							= reference to Requisition

						LocalInventoryTransaction = NewInventoryTransaction.InventoryTransaction
						LocalReturnQuantity 	  = CurrentReturnQuantity
						invoke Unreleased.Create ReturnInventoryTransactionLineRel
							assign result to NewInventoryTransactionLine
							invoked.OriginatingTransaction 					= reference to this instance
							invoked.TransientDetailTransfer					= true
							invoked.Company									= FromCompanyLocationBin.FromCompany
							invoked.InventoryLocation						= FromCompanyLocationBin.FromLocation
							invoked.InventoryTransaction					= LocalInventoryTransaction
							invoked.TransactionSystemCode					= "RQ"
							invoked.InventoryTransactionLine.LineNumber		= RequisitionLine
							invoked.UpdateDate								= current timestamp
							invoked.TransactionDate							= current corporate date
							invoked.GeneralLedgerDate						= current corporate date
							invoked.Item									= Item
							invoked.StockOnHandQuantity						= ItemLocationRel.StockOnHandQuantity
							if (LocalOneBin)
								invoked.Bin									= first RequisitionLineBinDetailRel.RequisitionLineDetail.Bin
							else
							if (ItemLocationRel.BinTracked)
								invoked.MultipleBins						= true
							if (IsCatchWeightItem)
								invoked.SecondaryUOM						= EnteredUOM
								invoked.SecondaryUOMMultiplier				= EnteredUOMMultiplier
								invoked.SecondaryQuantity					= CurrentReturnQuantity
								invoked.Quantity							= CurrentReturnCatchWeightQuantity
								invoked.TransactionUOM						= Item.StockUOM
								invoked.TransactionUOMMultiplier			= 1
							else
								invoked.Quantity							= CurrentReturnQuantity
								invoked.TransactionUOM						= EnteredUOM
								invoked.TransactionUOMMultiplier			= EnteredUOMMultiplier
							invoked.UnitCost								= DerivedLastIssueCost
							invoked.EAMWorkOrder							= EAMWorkOrder
							invoked.EAMWorkOrderActivity					= EAMWorkOrderActivity



						if (ItemIsDetailTracked
						and InventoryTransactionLineDetailRel not exists)
							for each RequisitionLineDetailRel
								invoke Unreleased.Create InventoryTransactionLineDetail
									invoked.Company										= NewInventoryTransactionLine.Company
									invoked.InventoryLocation							= NewInventoryTransactionLine.InventoryLocation
									invoked.InventoryTransaction						= NewInventoryTransactionLine.InventoryTransaction
									invoked.TransactionSystemCode						= NewInventoryTransactionLine.TransactionSystemCode
									invoked.InventoryTransactionLine.LineNumber			= NewInventoryTransactionLine.InventoryTransactionLine.LineNumber
									invoked.InventoryTransactionLine.WarehouseShipment 	= NewInventoryTransactionLine.InventoryTransactionLine.WarehouseShipment
									invoked.InventoryTransactionLine.ComponentSequence 	= NewInventoryTransactionLine.InventoryTransactionLine.ComponentSequence
									invoked.Item										= NewInventoryTransactionLine.Item
									invoked.UnitOfMeasure								= each.RequisitionLineDetail.UnitOfMeasure
									invoked.Bin											= each.RequisitionLineDetail.Bin
									invoked.Lot											= each.RequisitionLineDetail.Lot
									invoked.Sublot										= each.RequisitionLineDetail.Sublot
									invoked.Serial										= each.RequisitionLineDetail.Serial
									invoked.UpdateDate									= current timestamp
									invoked.TransactionDate								= NewInventoryTransactionLine.TransactionDate
									invoked.UOMMultiplier								= each.UOMMultiplier
									if (IsCatchWeightItem)
										invoked.SecondaryQuantity	 					= each.Quantity
										invoked.Quantity								= each.CatchWeightQuantity
									else
										invoked.Quantity								= each.Quantity

						invoke Unreleased.FinalRelease NewInventoryTransaction.InventoryTransaction
							invoked.PrmSkipDistributionFromPO							= true

						include CreateDistributions

					Exit Rules
						invoke Processed.Update Requisition        
							invoked.ReleasedDate                                       = current timestamp

						for each RequisitionLineDetailRel
							invoke Delete each


						invoke CreateRequisitionTransaction
							invoked.PrmRequisitionDocumentType	= NewInventoryTransaction.InventoryDocumentType
							invoked.PrmTransactionDate			= NewInventoryTransactionLine.TransactionDate
							if (IsCatchWeightItem)
								invoked.PrmStockQuantity		= CatchWeightReturnQuantity
							else
								invoked.PrmStockQuantity		= LocalReturnQuantity * EnteredUOMMultiplier
							invoked.PrmDocumentNumberNumeric	= first WarehouseShipmentLinesRel.WarehouseShipment
	

