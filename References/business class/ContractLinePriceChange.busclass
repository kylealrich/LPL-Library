ContractLinePriceChange is a BusinessClass
    owned by po
    prefix is CLPC

	Ontology
  		symbolic key is ContractLinePriceChange
  		
    Patterns
    	implements ContextualParent
		
	Persistent Fields
		Company							is an InventoryCompany				
		Location						is an InventoryLocation			
		RequestingLocation
		PricingGroup
 		ProcessingType                  is Numeric size 1
 			States
 				ImportUpdate            value is 1
 				ImportPriceCompare      value is 2
 				ContractPriceCompare    value is 3
				BidWorksheet            value is 4
 				PreviousCostCompare     value is 5
				ManualUpdate            value is 6
 		FromImport                      is a ContractImport
 			default label is "FromInterface"
 		FromContract                    is a Contract
 		FromLineNumber                  is Numeric size 6
 		FromTier                        is like ContractTier
 		ContractTier  
 			context of Contract                  
 		ItemNumber						is an Item
		VendorItem                      
		UOM 							is a UnitOfMeasureEdit
		BaseCost						is an UnitCost	
			precision is ContractLine.DerivedNumberOfDecimalsCost
		ManufacturerInformation
    	EffectiveDate 					is Date
		ExpirationDate 					is Date
		FutureCostDate 					is Date                   
		FutureCost 						is an UnitCost			  
			precision is ContractLine.DerivedNumberOfDecimalsCost
		QuantityOrdered 
			precision is ContractLine.DerivedNumberOfDecimalsQuantity
		TotalQuantityOrdered			is a QuantityOrdered
			precision is ContractLine.DerivedNumberOfDecimalsQuantity
		DifferenceAmount                is an InternationalCost
			precision is ContractLine.DerivedNumberOfDecimalsCost
		ExtendedDifferenceAmount        is an InternationalAmount
		TotalExtendedDifferenceAmount   is an InternationalAmount
    	BidSupplier                     is a Supplier
    			
    Local Fields
    	LocalBaseCost					is an UnitCost
    	LocalQuantity					is Decimal size 13.4
    	UOMCalculation	
		LocalForDefaultBuyUnitCost      is an UnitCost
		LocalDistContract               is like Contract
		LocalDistContractLine           is like ContractLine
	
   	Transient Fields
   		QuantityOrderedDateRange        is a DateRange
   		CompareUnitOfMeasure            is a UnitOfMeasureEdit
   		Description                     
   			derive value from ContractLine.ItemDescription
   		2ndDescription                  is a Description
   			derive value from ContractLine.ItemDescription2
   		UnitOfMeasure                   is like UnitOfMeasure
   			derive value from UOM.UnitOfMeasure
   		UOMQuantity                     is like UOMConversion
   			derive value from DerivedUOMConversion
   		CommodityCodeDescription        is Alpha size 150
   			derive value from ContractLine.CommodityCode.Description
   		TotalOrderedAmount              is an InternationalAmount
   			derive value from DerivedOrderedAmount
   		MfgNumber                       is like ManufacturerNumber
   			derive value from ManufacturerInformation.ManufacturerNumber
   		MfgDescription                  is a Description
   			derive value from ManufacturerInformation.Manufacturer.Description
   	
   	Derived Fields
			
		DerivedOrderedAmount is a ComputeField
			type is like InternationalAmount
			(TotalQuantityOrdered * BaseCost)
		
		DifferencePercent is a ComputeField
			type is Percent size 6.3
			(DifferenceAmount / BaseCost)
			
		DerivedDifferencePercent is a ConditionalField
			type is Percent size 6.3
			if (DifferencePercent < 0)
				DifferencePercent * -1
			else
				DifferencePercent
				
		DerivedDefaultBuyUnitCost is a DerivedField
			type is Numeric size 18
			restricted
			initialize UOMCalculation
			if (ItemNumberExists
			and ItemNumber.DefaultBuyUOM != UOM.UnitOfMeasure)
				UOMCalculation.InputUOM					= UOM.UnitOfMeasure
				UOMCalculation.InputToUOM				= ItemNumber.DefaultBuyUOM
				UOMCalculation.InputUnitCost			= LocalForDefaultBuyUnitCost
				UOMCalculation.Method					= UOMCalculation.Method.ConvertToAlternate
				return UOMCalculation.OutputUnitCost * 100000
			else
				return LocalForDefaultBuyUnitCost * 100000
		
		DerivedUOMConversion is a DerivedField
			type is Unsigned Decimal size 13.7
			if (ItemNumberExists)
				return ContractLine.ItemUOMRel.UOMConversion
			else
				return ContractLine.UOMConversion	 
		
		OffContractQuantity is a DerivedField
			type is like Quantity
			return (TotalQuantityOrdered - QuantityOrdered)
		
		OffContractPurchases is a DerivedField
			type is like InternationalAmount
			if (ItemNumber entered)
				return (sum OtherPurchaseOrderLineForItemRel.ExtendedAmount)
			else
			if (!ItemNumber entered)
				return ((sum OtherPurchaseOrderLineForManufacturerInformationRel.ExtendedAmount) + (sum OtherPurchaseOrderLineForVendorItemRel.ExtendedAmount))  
			
	Conditions
		UpdateProcessing
			restricted
			when (ProcessingType.ImportUpdate
			or    ProcessingType = 0)
		
		ManualUpdateProcessing
			restricted
			when (ProcessingType.ManualUpdate)

		CanAcceptCost
			restricted
			when (UpdateProcessing
			or    ManualUpdateProcessing)
		
		ComparisonOnly
			restricted
			when (ProcessingType.ContractPriceCompare
			or    ProcessingType.ImportPriceCompare)
			
		CanUpdate
			restricted
			when (ComparisonOnly
			or    ProcessingType.BidWorksheet
			or    ProcessingType.PreviousCostCompare
			or    ProcessingType.ManualUpdate)

		FromImportCondition
			restricted
			when (FromImport entered)
			
		FromContractCondition
			restricted
			when (FromContract entered)
			
		ManufacturerContract
			restricted
			when (Contract.IsManufacturerContract)
			
		HasLocations
			restricted
			when (Contract.IsManufacturerOrDistributorContract)
		
		ContractHasCompareContract
			restricted
			when (Contract.HasCompareContract)
			
		ContractHasCompareImport
			restricted
			when (Contract.HasCompareImport)
			
		ContractHasCompareTier
			restricted
			when (Contract.HasCompareTier)
		
		ItemNumberExists
			restricted	
			when (ItemNumber exists)

		PreviousCostCompareForMember
			restricted
			when (ProcessingType = 5
			and  (Company entered
			or    PricingGroup entered))
		
	Relations
	
		ContractPurchaseOrderLineRel
			one-to-many relation to PurchaseOrderLine
			Field Mapping uses ByContractLine
				related.ProcurementGroup    = ContractGroup
				related.Contract            = Contract
				related.ContractLine        = ContractLine
			Instance Selection
                where (related.PurchaseOrder.PurchaseOrderDate >= EffectiveDate 
				and    related.PurchaseOrder.PurchaseOrderDate <= ExpirationDate)
		
		PreviousCostContractPurchaseOrderLineCompanyRel
			one-to-many relation to PurchaseOrderLine
			Field Mapping uses ByContractLine
				related.ProcurementGroup    = ContractGroup
				related.Contract            = Contract
				related.ContractLine        = ContractLine
			Instance Selection
                where (related.PurchaseOrder.PurchaseOrderDate >= EffectiveDate 
				and    related.PurchaseOrder.PurchaseOrderDate <= ExpirationDate
				and    related.Company                          = Company)

		PreviousCostDistPOLineCompanyRel
			one-to-many relation to PurchaseOrderLine
			Field Mapping uses ByContractLine
				related.ProcurementGroup    = ContractGroup
				related.Contract            = LocalDistContract
				related.ContractLine        = LocalDistContractLine
			Instance Selection
                where (related.PurchaseOrder.PurchaseOrderDate >= EffectiveDate 
				and    related.PurchaseOrder.PurchaseOrderDate <= ExpirationDate
				and    related.Company                          = Company)

		PreviousCostDistPOLineLocationRel
			one-to-many relation to PurchaseOrderLine
			Field Mapping uses ByContractLine
				related.ProcurementGroup    = ContractGroup
				related.Contract            = LocalDistContract
				related.ContractLine        = LocalDistContractLine
			Instance Selection
                where (related.PurchaseOrder.PurchaseOrderDate >= EffectiveDate 
				and    related.PurchaseOrder.PurchaseOrderDate <= ExpirationDate
				and    related.Company                          = Company
				and    related.ShipToLocation                   = Location)

		PreviousCostDistContractPurchaseOrderLinePricingGroupCompanyRel
			one-to-many relation to PurchaseOrderLine
			Field Mapping uses ByContractLine
				related.ProcurementGroup    = ContractGroup
				related.Contract            = LocalDistContract
				related.ContractLine        = LocalDistContractLine
			Instance Selection
                where (related.PurchaseOrder.PurchaseOrderDate >= EffectiveDate 
				and    related.PurchaseOrder.PurchaseOrderDate <= ExpirationDate
				and    related.Company.InventoryCompanyRel.PricingGroup   = PricingGroup)

		PreviousCostDistContractPurchaseOrderLinePricingGroupLocationRel
			one-to-many relation to PurchaseOrderLine
			Field Mapping uses ByContractLine
				related.ProcurementGroup    = ContractGroup
				related.Contract            = LocalDistContract
				related.ContractLine        = LocalDistContractLine
			Instance Selection
                where (related.PurchaseOrder.PurchaseOrderDate >= EffectiveDate 
				and    related.PurchaseOrder.PurchaseOrderDate <= ExpirationDate
				and    related.ShipToLocation.PricingGroup   = PricingGroup)

		PreviousCostContractPurchaseOrderLineLocationRel
			one-to-many relation to PurchaseOrderLine
			Field Mapping uses ByContractLine
				related.ProcurementGroup    = ContractGroup
				related.Contract            = Contract
				related.ContractLine        = ContractLine
			Instance Selection
                where (related.PurchaseOrder.PurchaseOrderDate >= EffectiveDate 
				and    related.PurchaseOrder.PurchaseOrderDate <= ExpirationDate
				and    related.Company                          = Company
				and    related.ShipToLocation                   = Location)

		PreviousCostContractPurchaseOrderLinePricingGroupCompanyRel
			one-to-many relation to PurchaseOrderLine
			Field Mapping uses ByContractLine
				related.ProcurementGroup    = ContractGroup
				related.Contract            = Contract
				related.ContractLine        = ContractLine
			Instance Selection
                where (related.PurchaseOrder.PurchaseOrderDate >= EffectiveDate 
				and    related.PurchaseOrder.PurchaseOrderDate <= ExpirationDate
				and    related.Company.InventoryCompanyRel.PricingGroup   = PricingGroup)

		PreviousCostContractPurchaseOrderLinePricingGroupLocationRel
			one-to-many relation to PurchaseOrderLine
			Field Mapping uses ByContractLine
				related.ProcurementGroup    = ContractGroup
				related.Contract            = Contract
				related.ContractLine        = ContractLine
			Instance Selection
                where (related.PurchaseOrder.PurchaseOrderDate >= EffectiveDate 
				and    related.PurchaseOrder.PurchaseOrderDate <= ExpirationDate
				and    related.ShipToLocation.PricingGroup      = PricingGroup)

		OtherPurchaseOrderLineForItemRel
			one-to-many relation to PurchaseOrderLine
			Field Mapping uses ByItem
				related.ProcurementGroup	= ContractGroup
				related.Item				= ItemNumber
			Instance Selection
                where (related.PurchaseOrder.PurchaseOrderDate >= EffectiveDate 
				and    related.PurchaseOrder.PurchaseOrderDate <= ExpirationDate
				and    related.Contract                       != Contract)
		
		OtherPurchaseOrderLineForManufacturerInformationRel
			one-to-many relation to PurchaseOrderLine
			Field Mapping uses ByManufacturerNumber
				related.ManufacturerNumber         = ManufacturerInformation.ManufacturerNumber
			Instance Selection
				where (related.PurchaseOrder.PurchaseOrderDate >= Contract.EffectiveDate
				and    related.PurchaseOrder.PurchaseOrderDate <= Contract.ExpirationDate
				and    related.ProcurementGroup                = ContractGroup
				and    related.Contract                       != Contract
				and    related.Manufacturer                    = ManufacturerInformation.Manufacturer
				and    ManufacturerInformation.ManufacturerNumber entered)

		OtherPurchaseOrderLineForVendorItemRel
			one-to-many relation to PurchaseOrderLine
			Field Mapping uses ByVendorItem
				related.VendorItem                             = VendorItem
			Instance Selection
				where (related.PurchaseOrder.PurchaseOrderDate >= Contract.EffectiveDate
				and    related.PurchaseOrder.PurchaseOrderDate <= Contract.ExpirationDate
				and    related.ProcurementGroup                = ContractGroup
				and    related.Contract                       != Contract
				and    related.Vendor                          = Contract.Vendor
				and    related.ManufacturerNumber             != ManufacturerInformation.ManufacturerNumber
				and    VendorItem entered)
		
		ContractLineTierCostRel 
			one-to-one relation to ContractLineTierCost
			Field Mapping uses symbolic key
				related.ContractGroup	= ContractGroup
        		related.Contract        = Contract
        		related.ContractLine    = ContractLine
        		related.ContractTier    = ContractTier
        		
		DistributorContractLineRel
			one-to-many relation to ContractLine
			Field Mapping uses ByDistributorContractLines
				related.ContractGroup 				= ContractGroup
				related.ManufacturerContract		= Contract
				related.ManufacturerContractLine	= ContractLine
			Instance Selection
				where (!related.ContractLineState.Closed)

        ContractLineImportRel
        	one-to-one relation to ContractLineImport
        	Field Mapping uses symbolic key
        		related.ContractGroup		= ContractGroup
        		related.ContractImport  	= FromImport
        		related.ContractLineImport  = FromLineNumber

	Sets
		ByBaseCost
			duplicates
			Sort Order
				ContractGroup
				Contract
				ContractLine
				ItemNumber
				UOM
				VendorItem
				ContractTier
				BaseCost
				
		ByMember
			Sort Order
				ContractGroup
				Contract
				Company				
				Location			
				RequestingLocation
				PricingGroup
				ContractLine
				ContractLinePriceChange
			Instance Selection
				where (PreviousCostCompareForMember)
				
		ByExtendedDifference
			duplicates
			Sort Order
				ExtendedDifferenceAmount descending
				
		ByTotalExtendedDifference
			duplicates
			Sort Order
				TotalExtendedDifferenceAmount descending
		
		ByTierOnly
			duplicates
			Sort Order
				ContractTier
				
		ByFromContract
			duplicates
			Sort Order
				FromContract
				
		ByLineNumber
			duplicates
			Sort Order
				ContractLine
				
		ByBidSupplier
			duplicates
			Sort Order
				BidSupplier
		
		ByFromImport
			duplicates
			Sort Order
				FromImport
				
	Rule Blocks
		
		UpdateDraftContractLine
			invoke Update Draft ContractLine
				invoked.NonManualUpdate             = true
				if (FutureCostDate > 0
				or  ProcessingType = 6)
					if (FutureCostDate > current corporate date    
					and invoked.HasBeenActivated
					and !ProcessingType = 6)
						invoked.effective date 		= FutureCostDate
					invoked.EffectiveDate			= FutureCostDate 					
					invoked.FutureCost              = ContractLine.BaseCost
					invoked.BaseCost				= FutureCost
					if (ItemNumber.Consignment)
						invoked.ConsignmentCurrentNetCost 	= FutureCost
					else
						invoked.CurrentNetCost   			= FutureCost
					LocalForDefaultBuyUnitCost 		= FutureCost
					invoked.DefaultBuyUnitCost 		= DerivedDefaultBuyUnitCost 
				else
					if (FutureCostDate > current corporate date
					and invoked.HasBeenActivated)
						invoked.effective date 		= EffectiveDate
					invoked.EffectiveDate			= EffectiveDate 					
					invoked.FutureCost              = ContractLine.BaseCost
					invoked.BaseCost				= BaseCost
					if (ItemNumber.Consignment)
						invoked.ConsignmentCurrentNetCost 	= BaseCost
					else
						invoked.CurrentNetCost   			= BaseCost
					LocalForDefaultBuyUnitCost 		= BaseCost
					invoked.DefaultBuyUnitCost 		= DerivedDefaultBuyUnitCost 

	 			if (ProcessingType = 1)
					if (ItemNumber not = blank)
		 				invoked.ItemNumber				= ItemNumber
		 			invoked.ItemType				    = ContractLineImportRel.ItemType		
					invoked.ItemDescription			    = ContractLineImportRel.ItemDescription		
					if (ContractLineImportRel.ItemDescription2 not = blank)
						invoked.ItemDescription2		= ContractLineImportRel.ItemDescription2		
					if (ContractLineImportRel.ItemDescription3 not = blank)
						invoked.ItemDescription3		= ContractLineImportRel.ItemDescription3	
					if (VendorItem not = blank)
						invoked.VendorItem              = VendorItem        
					if (ContractLineImportRel.VendorItemDescription not = blank)
			    		invoked.VendorItemDescription	= ContractLineImportRel.VendorItemDescription		
					if (ContractLineImportRel.ServiceCode not = blank)
						invoked.ServiceCode				= ContractLineImportRel.ServiceCode		
					if (ContractLineImportRel.Quantity not = 0)
						invoked.Quantity 				= ContractLineImportRel.Quantity		
					invoked.UOM 					    = UOM		
					if (ContractLineImportRel.CommodityCode not = blank)
						invoked.CommodityCode			= ContractLineImportRel.CommodityCode		
					if (ContractLineImportRel.Priority not = 0)
						invoked.Priority				= ContractLineImportRel.Priority		
					if (ContractLineImportRel.PayablesDistributionCode not = blank)
						invoked.PayablesDistributionCode = ContractLineImportRel.PayablesDistributionCode
					if (ContractLineImportRel.BlanketStandingRequestingLocation entered)
							invoked.BlanketStandingRequestingLocation		= ContractLineImportRel.BlanketStandingRequestingLocation			
					if (ContractLineImportRel.CurrentPercent not = 0)
						invoked.CurrentPercent 			= ContractLineImportRel.CurrentPercent		
					if (ContractLineImportRel.PerOrderMaximumQuantity not = 0)
						invoked.PerOrderMaximumQuantity 			= ContractLineImportRel.PerOrderMaximumQuantity		
					if (ContractLineImportRel.PerOrderMaximumAmount not = 0)
						invoked.PerOrderMaximumAmount 			= ContractLineImportRel.PerOrderMaximumAmount		
					if (ContractLineImportRel.PerOrderMinimumQuantity not = 0)
						invoked.PerOrderMinimumQuantity 			= ContractLineImportRel.PerOrderMinimumQuantity		
					if (ContractLineImportRel.PerOrderMinimumAmount not =0)
						invoked.PerOrderMinimumAmount 			= ContractLineImportRel.PerOrderMinimumAmount		
					invoked.Taxable			 			= ContractLineImportRel.Taxable		
					if (ContractLineImportRel.TaxCode not = blank)
						invoked.TaxCode					= ContractLineImportRel.TaxCode
					if (ContractLineImportRel.TaxUsageCode not = blank)
						invoked.TaxUsageCode			= ContractLineImportRel.TaxUsageCode
					if (ContractLineImportRel.ExpirationDate not = 0)
						invoked.ExpirationDate 			= ExpirationDate		
					if (ContractLineImportRel.BasePercent not = 0)
						invoked.BasePercent 			= ContractLineImportRel.BasePercent		
					if (ContractLineImportRel.ConsignmentPricingMarkupOrDiscount not = blank)
						invoked.ConsignmentPricingMarkupOrDiscount = ContractLineImportRel.ConsignmentPricingMarkupOrDiscount
					if	(ContractLineImportRel.ConsignmentLinePriceBreakOn not = blank)
						invoked.ConsignmentLinePriceBreakOn	= ContractLineImportRel.ConsignmentLinePriceBreakOn		
					if (ContractLineImportRel.ConsignmentPriceBreak entered)
			    		invoked.ConsignmentPriceBreak	= ContractLineImportRel.ConsignmentPriceBreak		
					if (ContractLineImportRel.PricingMarkupOrDiscount not = blank)
						invoked.PricingMarkupOrDiscount	= ContractLineImportRel.PricingMarkupOrDiscount		
					if (ContractLineImportRel.LinePriceBreakOn not = blank)
						invoked.LinePriceBreakOn 			= ContractLineImportRel.LinePriceBreakOn		
					if (ContractLineImportRel.PriceBreakImport entered)
			    		invoked.PriceBreak				= ContractLineImportRel.PriceBreakImport		
					if (ContractLineImportRel.Retainage not = blank)
						invoked.Retainage 				= ContractLineImportRel.Retainage		
					if (ContractLineImportRel.RetainagePercent1 not = 0)
						invoked.RetainagePercent1 		= ContractLineImportRel.RetainagePercent1		
					if (ContractLineImportRel.RetainageUpToPercent not = 0)
						invoked.RetainageUpToPercent 	= ContractLineImportRel.RetainageUpToPercent		
					if (ContractLineImportRel.RetainagePercent2 not = 0)
						invoked.RetainagePercent2 		= ContractLineImportRel.RetainagePercent2		
					if (ContractLineImportRel.RetainageOverridePercent not = 0)
						invoked.RetainageOverridePercent = ContractLineImportRel.RetainageOverridePercent		
					if (ContractLineImportRel.LifetimeMaximumQuantity not = 0)
						invoked.LifetimeMaximumQuantity 				= ContractLineImportRel.LifetimeMaximumQuantity		
					if (ContractLineImportRel.CostOption not = blank)
						invoked.CostOption 				= ContractLineImportRel.CostOption		
					if (ContractLineImportRel.HCPCSCode entered)
						invoked.HCPCSCode                = ContractLineImportRel.HCPCSCode 
					if (ContractLineImportRel.ClinicalSystemUse = true)
						invoked.ClinicalSystemUse        = ContractLineImportRel.ClinicalSystemUse 
					if (ContractLineImportRel.PatientChargeable = true)
						invoked.PatientChargeable        = ContractLineImportRel.PatientChargeable
					if (ContractLineImportRel.Latex > 0)
						invoked.Latex                    = ContractLineImportRel.Latex
					if (ContractLineImportRel.UsageIdentifier entered)
						invoked.UsageIdentifier          = ContractLineImportRel.UsageIdentifier 
					if (ContractLineImportRel.HSNSACCode entered)
						invoked.HSNSACCode               = ContractLineImportRel.HSNSACCode 
					if (ContractLineImportRel.CriticalItem = true)
						invoked.CriticalItem             = ContractLineImportRel.CriticalItem 					
					if (ContractLineImportRel.PersonalProtectiveEquipment = true) 
						invoked.PersonalProtectiveEquipment = ContractLineImportRel.PersonalProtectiveEquipment		
					if (ContractLineImportRel.GMDNPTCode entered)
						invoked.GMDNPTCode               = ContractLineImportRel.GMDNPTCode 
					if (ContractLineImportRel.UserField1 entered)
						invoked.UserField1 				= ContractLineImportRel.UserField1					
					if (ContractLineImportRel.UserField2 entered)
						invoked.UserField2 				= ContractLineImportRel.UserField2					
					if (ContractLineImportRel.UserField3 entered)	
						invoked.UserField3 				= ContractLineImportRel.UserField3					
					if (ContractLineImportRel.UserField4 entered)	
						invoked.UserField4 				= ContractLineImportRel.UserField4					
					if (ContractLineImportRel.UserField5 entered)
						invoked.UserField5 				= ContractLineImportRel.UserField5					
					if (ContractLineImportRel.UserFieldN1 entered)
						invoked.UserFieldN1 			= ContractLineImportRel.UserFieldN1					
					if (ContractLineImportRel.UserFieldN2 entered)	
						invoked.UserFieldN2 			= ContractLineImportRel.UserFieldN2								
					if (ContractLineImportRel.UserFieldN3 entered)
						invoked.UserFieldN3  			= ContractLineImportRel.UserFieldN3 
					if (ContractLineImportRel.ChargeNumber entered)
						invoked.ChargeNumber            = ContractLineImportRel.ChargeNumber
					if (ContractLineImportRel.UNSPSCCode entered
					and ContractGroup.UseUNSPSCCode)
						invoked.UNSPSCCode.UNSPSCSegment 	= ContractLineImportRel.UNSPSCCode[1:2]
						invoked.UNSPSCCode.UNSPSCFamily  	= ContractLineImportRel.UNSPSCCode[3:4]
						invoked.UNSPSCCode.UNSPSCClass   	= ContractLineImportRel.UNSPSCCode[5:6]
						invoked.UNSPSCCode.UNSPSCCommodity	= ContractLineImportRel.UNSPSCCode[7:8]  
				invoked.FutureCostDate			= 0 					

				
		UpdateAmendmentContractLine
			invoke Update Amendment ContractLine
				invoked.NonManualUpdate             = true
				if (FutureCostDate > 0
				or  ProcessingType = 6)
					if (FutureCostDate > current corporate date
					and invoked.HasBeenActivated
					and !ProcessingType = 6)
						invoked.effective date 		= FutureCostDate
					invoked.EffectiveDate			= FutureCostDate 					
					invoked.LocalCostEffectiveDate  = FutureCostDate
					invoked.FutureCost              = ContractLine.BaseCost
					invoked.BaseCost				= FutureCost
					if (ItemNumber.Consignment)
						invoked.ConsignmentCurrentNetCost 	= FutureCost
					else
						invoked.CurrentNetCost   			= FutureCost
					LocalForDefaultBuyUnitCost 		= FutureCost
					invoked.DefaultBuyUnitCost 		= DerivedDefaultBuyUnitCost 
				else
					if (EffectiveDate > current corporate date
					and invoked.HasBeenActivated)
						invoked.effective date 		= EffectiveDate
					invoked.EffectiveDate			= EffectiveDate 					
					invoked.LocalCostEffectiveDate  = EffectiveDate
					invoked.FutureCost              = ContractLine.BaseCost
					invoked.BaseCost				= BaseCost
					if (ItemNumber.Consignment)
						invoked.ConsignmentCurrentNetCost 	= BaseCost
					else
						invoked.CurrentNetCost   			= BaseCost
					LocalForDefaultBuyUnitCost 		= BaseCost
					invoked.DefaultBuyUnitCost 		= DerivedDefaultBuyUnitCost 
				if (ProcessingType = 1)
					if (ItemNumber not = blank)
			 			invoked.ItemNumber				= ItemNumber
		 			invoked.ItemType				    = ContractLineImportRel.ItemType		
					invoked.ItemDescription			    = ContractLineImportRel.ItemDescription		
					if (ContractLineImportRel.ItemDescription2 not = blank)
						invoked.ItemDescription2		= ContractLineImportRel.ItemDescription2		
					if (ContractLineImportRel.ItemDescription3 not = blank)
						invoked.ItemDescription3		= ContractLineImportRel.ItemDescription3	
					if (VendorItem not = blank)
						invoked.VendorItem              = VendorItem        
					if (ContractLineImportRel.VendorItemDescription not = blank)
			    		invoked.VendorItemDescription	= ContractLineImportRel.VendorItemDescription		
					if (ContractLineImportRel.ServiceCode not = blank)
						invoked.ServiceCode				= ContractLineImportRel.ServiceCode		
					if (ContractLineImportRel.Quantity not = 0)
						invoked.Quantity 				= ContractLineImportRel.Quantity		
					invoked.UOM 					    = UOM		
					if (ContractLineImportRel.CommodityCode not = blank)
						invoked.CommodityCode			= ContractLineImportRel.CommodityCode		
					if (ContractLineImportRel.Priority not = 0)
						invoked.Priority				= ContractLineImportRel.Priority		
					if (ContractLineImportRel.PayablesDistributionCode not = blank)
						invoked.PayablesDistributionCode = ContractLineImportRel.PayablesDistributionCode
					if (ContractLineImportRel.BlanketStandingRequestingLocation entered)
							invoked.BlanketStandingRequestingLocation		= ContractLineImportRel.BlanketStandingRequestingLocation			
					if (ContractLineImportRel.CurrentPercent not = 0)
						invoked.CurrentPercent 			= ContractLineImportRel.CurrentPercent		
					if (ContractLineImportRel.PerOrderMaximumQuantity not = 0)
						invoked.PerOrderMaximumQuantity 			= ContractLineImportRel.PerOrderMaximumQuantity		
					if (ContractLineImportRel.PerOrderMaximumAmount not = 0)
						invoked.PerOrderMaximumAmount 			= ContractLineImportRel.PerOrderMaximumAmount		
					if (ContractLineImportRel.PerOrderMinimumQuantity not = 0)
						invoked.PerOrderMinimumQuantity 			= ContractLineImportRel.PerOrderMinimumQuantity		
					if (ContractLineImportRel.PerOrderMinimumAmount not =0)
						invoked.PerOrderMinimumAmount 			= ContractLineImportRel.PerOrderMinimumAmount		
					invoked.Taxable			 			= ContractLineImportRel.Taxable		
					if (ContractLineImportRel.TaxCode not = blank)
						invoked.TaxCode					= ContractLineImportRel.TaxCode
					if (ContractLineImportRel.TaxUsageCode not = blank)
						invoked.TaxUsageCode			= ContractLineImportRel.TaxUsageCode
					if (ContractLineImportRel.ExpirationDate not = 0)
						invoked.ExpirationDate 			= ExpirationDate		
					if (ContractLineImportRel.BasePercent not = 0)
						invoked.BasePercent 			= ContractLineImportRel.BasePercent		
					if (ContractLineImportRel.ConsignmentPricingMarkupOrDiscount not = blank)
						invoked.ConsignmentPricingMarkupOrDiscount = ContractLineImportRel.ConsignmentPricingMarkupOrDiscount
					if	(ContractLineImportRel.ConsignmentLinePriceBreakOn not = blank)
						invoked.ConsignmentLinePriceBreakOn	= ContractLineImportRel.ConsignmentLinePriceBreakOn		
					if (ContractLineImportRel.ConsignmentPriceBreak entered)
			    		invoked.ConsignmentPriceBreak	= ContractLineImportRel.ConsignmentPriceBreak		
					if (ContractLineImportRel.PricingMarkupOrDiscount not = blank)
						invoked.PricingMarkupOrDiscount	= ContractLineImportRel.PricingMarkupOrDiscount		
					if (ContractLineImportRel.LinePriceBreakOn not = blank)
						invoked.LinePriceBreakOn 			= ContractLineImportRel.LinePriceBreakOn		
					if (ContractLineImportRel.PriceBreakImport entered)
			    		invoked.PriceBreak				= ContractLineImportRel.PriceBreakImport		
					if (ContractLineImportRel.Retainage not = blank)
						invoked.Retainage 				= ContractLineImportRel.Retainage		
					if (ContractLineImportRel.RetainagePercent1 not = 0)
						invoked.RetainagePercent1 		= ContractLineImportRel.RetainagePercent1		
					if (ContractLineImportRel.RetainageUpToPercent not = 0)
						invoked.RetainageUpToPercent 	= ContractLineImportRel.RetainageUpToPercent		
					if (ContractLineImportRel.RetainagePercent2 not = 0)
						invoked.RetainagePercent2 		= ContractLineImportRel.RetainagePercent2		
					if (ContractLineImportRel.RetainageOverridePercent not = 0)
						invoked.RetainageOverridePercent = ContractLineImportRel.RetainageOverridePercent		
					if (ContractLineImportRel.LifetimeMaximumQuantity not = 0)
						invoked.LifetimeMaximumQuantity 				= ContractLineImportRel.LifetimeMaximumQuantity		
					if (ContractLineImportRel.CostOption not = blank)
						invoked.CostOption 				= ContractLineImportRel.CostOption		
					if (ContractLineImportRel.HCPCSCode entered)
						invoked.HCPCSCode                = ContractLineImportRel.HCPCSCode 
					if (ContractLineImportRel.ClinicalSystemUse = true)
						invoked.ClinicalSystemUse        = ContractLineImportRel.ClinicalSystemUse 
					if (ContractLineImportRel.PatientChargeable = true)
						invoked.PatientChargeable        = ContractLineImportRel.PatientChargeable
					if (ContractLineImportRel.Latex > 0)
						invoked.Latex                    = ContractLineImportRel.Latex
					if (ContractLineImportRel.UsageIdentifier entered)
						invoked.UsageIdentifier          = ContractLineImportRel.UsageIdentifier 
					if (ContractLineImportRel.HSNSACCode entered)
						invoked.HSNSACCode               = ContractLineImportRel.HSNSACCode 
					if (ContractLineImportRel.CriticalItem = true)
						invoked.CriticalItem             = ContractLineImportRel.CriticalItem 					
					if (ContractLineImportRel.PersonalProtectiveEquipment = true) 
						invoked.PersonalProtectiveEquipment = ContractLineImportRel.PersonalProtectiveEquipment		
					if (ContractLineImportRel.GMDNPTCode entered)
						invoked.GMDNPTCode               = ContractLineImportRel.GMDNPTCode 
					if (ContractLineImportRel.UserField1 entered)
						invoked.UserField1 				= ContractLineImportRel.UserField1					
					if (ContractLineImportRel.UserField2 entered)
						invoked.UserField2 				= ContractLineImportRel.UserField2					
					if (ContractLineImportRel.UserField3 entered)	
						invoked.UserField3 				= ContractLineImportRel.UserField3					
					if (ContractLineImportRel.UserField4 entered)	
						invoked.UserField4 				= ContractLineImportRel.UserField4					
					if (ContractLineImportRel.UserField5 entered)
						invoked.UserField5 				= ContractLineImportRel.UserField5					
					if (ContractLineImportRel.UserFieldN1 entered)
						invoked.UserFieldN1 			= ContractLineImportRel.UserFieldN1					
					if (ContractLineImportRel.UserFieldN2 entered)	
						invoked.UserFieldN2 			= ContractLineImportRel.UserFieldN2								
					if (ContractLineImportRel.UserFieldN3 entered)
						invoked.UserFieldN3  			= ContractLineImportRel.UserFieldN3 
					if (ContractLineImportRel.ChargeNumber entered)
						invoked.ChargeNumber            = ContractLineImportRel.ChargeNumber
					if (ContractLineImportRel.UNSPSCCode entered
					and ContractGroup.UseUNSPSCCode)
						invoked.UNSPSCCode.UNSPSCSegment 	= ContractLineImportRel.UNSPSCCode[1:2]
						invoked.UNSPSCCode.UNSPSCFamily  	= ContractLineImportRel.UNSPSCCode[3:4]
						invoked.UNSPSCCode.UNSPSCClass   	= ContractLineImportRel.UNSPSCCode[5:6]
						invoked.UNSPSCCode.UNSPSCCommodity	= ContractLineImportRel.UNSPSCCode[7:8] 
				invoked.FutureCostDate			= 0 					

				
		UpdateActiveContractLine
			invoke Update Active ContractLine
				invoked.NonManualUpdate             = true
				if (FutureCostDate > 0
				or  ProcessingType = 6)
					if (FutureCostDate > current corporate date    
					and invoked.HasBeenActivated
					and !ProcessingType = 6)
						invoked.effective date 		= FutureCostDate
					invoked.EffectiveDate			= FutureCostDate 					
					invoked.FutureCost              = ContractLine.BaseCost
					invoked.BaseCost				= FutureCost
					if (ItemNumber.Consignment)
						invoked.ConsignmentCurrentNetCost 	= FutureCost
					else
						invoked.CurrentNetCost   			= FutureCost
					LocalForDefaultBuyUnitCost 		= FutureCost
					invoked.DefaultBuyUnitCost 		= DerivedDefaultBuyUnitCost 
				else
					if (FutureCostDate > current corporate date
					and invoked.HasBeenActivated)
						invoked.effective date 		= EffectiveDate
					invoked.EffectiveDate			= EffectiveDate 					
					invoked.FutureCost              = ContractLine.BaseCost
					invoked.BaseCost				= BaseCost
					if (ItemNumber.Consignment)
						invoked.ConsignmentCurrentNetCost 	= BaseCost
					else
						invoked.CurrentNetCost   			= BaseCost
					LocalForDefaultBuyUnitCost 		= BaseCost
					invoked.DefaultBuyUnitCost 		= DerivedDefaultBuyUnitCost 
				if (ProcessingType = 1)
					if (ItemNumber not = blank)
			 			invoked.ItemNumber				= ItemNumber
		 			fill in user fields from ContractLineImportRel
					invoked.ItemType				    = ContractLineImportRel.ItemType		
					invoked.ItemDescription			    = ContractLineImportRel.ItemDescription		
					if (ContractLineImportRel.ItemDescription2 not = blank)
						invoked.ItemDescription2		= ContractLineImportRel.ItemDescription2		
					if (ContractLineImportRel.ItemDescription3 not = blank)
						invoked.ItemDescription3		= ContractLineImportRel.ItemDescription3	
					if (VendorItem not = blank)
						invoked.VendorItem              = VendorItem        
					if (ContractLineImportRel.VendorItemDescription not = blank)
			    		invoked.VendorItemDescription	= ContractLineImportRel.VendorItemDescription		
					if (ContractLineImportRel.ServiceCode not = blank)
						invoked.ServiceCode				= ContractLineImportRel.ServiceCode		
					if (ContractLineImportRel.Quantity not = 0)
						invoked.Quantity 				= ContractLineImportRel.Quantity		
					invoked.UOM 					    = UOM		
					if (ContractLineImportRel.CommodityCode not = blank)
						invoked.CommodityCode			= ContractLineImportRel.CommodityCode		
					if (ContractLineImportRel.Priority not = 0)
						invoked.Priority				= ContractLineImportRel.Priority		
					if (ContractLineImportRel.PayablesDistributionCode not = blank)
						invoked.PayablesDistributionCode = ContractLineImportRel.PayablesDistributionCode
					if (ContractLineImportRel.BlanketStandingRequestingLocation entered)
							invoked.BlanketStandingRequestingLocation		= ContractLineImportRel.BlanketStandingRequestingLocation			
					if (ContractLineImportRel.CurrentPercent not = 0)
						invoked.CurrentPercent 			= ContractLineImportRel.CurrentPercent		
					if (ContractLineImportRel.PerOrderMaximumQuantity not = 0)
						invoked.PerOrderMaximumQuantity 			= ContractLineImportRel.PerOrderMaximumQuantity		
					if (ContractLineImportRel.PerOrderMaximumAmount not = 0)
						invoked.PerOrderMaximumAmount 			= ContractLineImportRel.PerOrderMaximumAmount		
					if (ContractLineImportRel.PerOrderMinimumQuantity not = 0)
						invoked.PerOrderMinimumQuantity 			= ContractLineImportRel.PerOrderMinimumQuantity		
					if (ContractLineImportRel.PerOrderMinimumAmount not =0)
						invoked.PerOrderMinimumAmount 			= ContractLineImportRel.PerOrderMinimumAmount		
					invoked.Taxable			 			= ContractLineImportRel.Taxable		
					if (ContractLineImportRel.TaxCode not = blank)
						invoked.TaxCode					= ContractLineImportRel.TaxCode
					if (ContractLineImportRel.TaxUsageCode not = blank)
						invoked.TaxUsageCode			= ContractLineImportRel.TaxUsageCode
					if (ContractLineImportRel.ExpirationDate not = 0)
						invoked.ExpirationDate 			= ExpirationDate		
					if (ContractLineImportRel.BasePercent not = 0)
						invoked.BasePercent 			= ContractLineImportRel.BasePercent		
					if (ContractLineImportRel.ConsignmentPricingMarkupOrDiscount not = blank)
						invoked.ConsignmentPricingMarkupOrDiscount = ContractLineImportRel.ConsignmentPricingMarkupOrDiscount
					if	(ContractLineImportRel.ConsignmentLinePriceBreakOn not = blank)
						invoked.ConsignmentLinePriceBreakOn	= ContractLineImportRel.ConsignmentLinePriceBreakOn		
					if (ContractLineImportRel.ConsignmentPriceBreak entered)
			    		invoked.ConsignmentPriceBreak	= ContractLineImportRel.ConsignmentPriceBreak		
					if (ContractLineImportRel.PricingMarkupOrDiscount not = blank)
						invoked.PricingMarkupOrDiscount	= ContractLineImportRel.PricingMarkupOrDiscount		
					if (ContractLineImportRel.LinePriceBreakOn not = blank)
						invoked.LinePriceBreakOn 			= ContractLineImportRel.LinePriceBreakOn		
					if (ContractLineImportRel.PriceBreakImport entered)
			    		invoked.PriceBreak				= ContractLineImportRel.PriceBreakImport		
					if (ContractLineImportRel.Retainage not = blank)
						invoked.Retainage 				= ContractLineImportRel.Retainage		
					if (ContractLineImportRel.RetainagePercent1 not = 0)
						invoked.RetainagePercent1 		= ContractLineImportRel.RetainagePercent1		
					if (ContractLineImportRel.RetainageUpToPercent not = 0)
						invoked.RetainageUpToPercent 	= ContractLineImportRel.RetainageUpToPercent		
					if (ContractLineImportRel.RetainagePercent2 not = 0)
						invoked.RetainagePercent2 		= ContractLineImportRel.RetainagePercent2		
					if (ContractLineImportRel.RetainageOverridePercent not = 0)
						invoked.RetainageOverridePercent = ContractLineImportRel.RetainageOverridePercent		
					if (ContractLineImportRel.LifetimeMaximumQuantity not = 0)
						invoked.LifetimeMaximumQuantity 				= ContractLineImportRel.LifetimeMaximumQuantity		
					if (ContractLineImportRel.CostOption not = blank)
						invoked.CostOption 				= ContractLineImportRel.CostOption		
					if (ContractLineImportRel.HCPCSCode entered)
						invoked.HCPCSCode                = ContractLineImportRel.HCPCSCode 
					if (ContractLineImportRel.ClinicalSystemUse = true)
						invoked.ClinicalSystemUse        = ContractLineImportRel.ClinicalSystemUse 
					if (ContractLineImportRel.PatientChargeable = true)
						invoked.PatientChargeable        = ContractLineImportRel.PatientChargeable
					if (ContractLineImportRel.Latex > 0)
						invoked.Latex                    = ContractLineImportRel.Latex
					if (ContractLineImportRel.UsageIdentifier entered)
						invoked.UsageIdentifier          = ContractLineImportRel.UsageIdentifier 
					if (ContractLineImportRel.HSNSACCode entered)
						invoked.HSNSACCode               = ContractLineImportRel.HSNSACCode 
					if (ContractLineImportRel.CriticalItem = true)
						invoked.CriticalItem             = ContractLineImportRel.CriticalItem 					
					if (ContractLineImportRel.PersonalProtectiveEquipment = true) 
						invoked.PersonalProtectiveEquipment = ContractLineImportRel.PersonalProtectiveEquipment		
					if (ContractLineImportRel.GMDNPTCode entered)
						invoked.GMDNPTCode               = ContractLineImportRel.GMDNPTCode 
					if (ContractLineImportRel.UserField1 entered)
						invoked.UserField1 				= ContractLineImportRel.UserField1					
					if (ContractLineImportRel.UserField2 entered)
						invoked.UserField2 				= ContractLineImportRel.UserField2					
					if (ContractLineImportRel.UserField3 entered)	
						invoked.UserField3 				= ContractLineImportRel.UserField3					
					if (ContractLineImportRel.UserField4 entered)	
						invoked.UserField4 				= ContractLineImportRel.UserField4					
					if (ContractLineImportRel.UserField5 entered)
						invoked.UserField5 				= ContractLineImportRel.UserField5					
					if (ContractLineImportRel.UserFieldN1 entered)
						invoked.UserFieldN1 			= ContractLineImportRel.UserFieldN1					
					if (ContractLineImportRel.UserFieldN2 entered)	
						invoked.UserFieldN2 			= ContractLineImportRel.UserFieldN2								
					if (ContractLineImportRel.UserFieldN3 entered)
						invoked.UserFieldN3  			= ContractLineImportRel.UserFieldN3 
					if (ContractLineImportRel.ChargeNumber entered)
						invoked.ChargeNumber            = ContractLineImportRel.ChargeNumber
					if (ContractLineImportRel.UNSPSCCode entered
					and ContractGroup.UseUNSPSCCode)
						invoked.UNSPSCCode.UNSPSCSegment 	= ContractLineImportRel.UNSPSCCode[1:2]
						invoked.UNSPSCCode.UNSPSCFamily  	= ContractLineImportRel.UNSPSCCode[3:4]
						invoked.UNSPSCCode.UNSPSCClass   	= ContractLineImportRel.UNSPSCCode[5:6]
						invoked.UNSPSCCode.UNSPSCCommodity	= ContractLineImportRel.UNSPSCCode[7:8] 
				invoked.FutureCostDate			= 0 					


	Field Rules
		FutureCost
		
			if (ProcessingType = 5)
				DifferenceAmount = (BaseCost - FutureCost)
			else
				DifferenceAmount = (FutureCost - BaseCost)
			
		QuantityOrdered
		
			if (ProcessingType = 5)
				ExtendedDifferenceAmount = ((DifferenceAmount * QuantityOrdered) * -1)
			else
				ExtendedDifferenceAmount = (DifferenceAmount * QuantityOrdered)
			
		TotalQuantityOrdered
		
			TotalExtendedDifferenceAmount = (DifferenceAmount * TotalQuantityOrdered)
			
	Actions
		Create is a Create Action
			restricted
			
			Action Rules
				if (!PreviousCostCompareForMember)
					if   (EffectiveDate  = Contract.EffectiveDate
					and  (ExpirationDate  = Contract.ExpirationDate
					or    ExpirationDate  = current date
					or    UpdateProcessing
					or    ManualUpdateProcessing))
						QuantityOrdered = ContractLine.QuantityOrdered
					else
						if (ItemNumber exists)
							for each ContractPurchaseOrderLineRel
								if (each.EnteredBuyUOM = UOM)
									QuantityOrdered += each.Quantity
								else
									initialize UOMCalculation
									initialize LocalQuantity
									UOMCalculation.InputQuantity		= each.Quantity
									UOMCalculation.InputUOM				= each.EnteredBuyUOM
									UOMCalculation.InputToUOM			= UOM
									UOMCalculation.Method				= UOMCalculation.Method.ConvertToAlternate
									LocalQuantity						= UOMCalculation.OutputQuantity
									QuantityOrdered += LocalQuantity
						else
							for each ContractPurchaseOrderLineRel
								QuantityOrdered += each.Quantity
					
					if (ProcessingType !=5)
						TotalQuantityOrdered = QuantityOrdered
					
						if (ItemNumber exists)
							for each OtherPurchaseOrderLineForItemRel
								if (each.EnteredBuyUOM = UOM)
									TotalQuantityOrdered += each.Quantity
								else
									initialize UOMCalculation
									initialize LocalQuantity
									UOMCalculation.InputQuantity		= each.Quantity
									UOMCalculation.InputUOM				= each.EnteredBuyUOM
									UOMCalculation.InputToUOM			= UOM
									UOMCalculation.Method				= UOMCalculation.Method.ConvertToAlternate
									LocalQuantity						= UOMCalculation.OutputQuantity
									TotalQuantityOrdered += LocalQuantity
						else
						if (ItemNumber !exists)
							TotalQuantityOrdered += sum OtherPurchaseOrderLineForManufacturerInformationRel.Quantity	
						
							TotalQuantityOrdered += sum OtherPurchaseOrderLineForVendorItemRel.Quantity
				else
				if (PreviousCostCompareForMember)
					if (Company entered
					and Location !entered)
						for each DistributorContractLineRel
							LocalDistContract 		= each.Contract
							LocalDistContractLine 	= each.ContractLine
							for each PreviousCostDistPOLineCompanyRel
								if (ItemNumber exists
								and each.EnteredBuyUOM = UOM)
									initialize UOMCalculation
									initialize LocalQuantity
									UOMCalculation.InputQuantity		= each.Quantity
									UOMCalculation.InputUOM				= each.EnteredBuyUOM
									UOMCalculation.InputToUOM			= UOM
									UOMCalculation.Method				= UOMCalculation.Method.ConvertToAlternate
									LocalQuantity						= UOMCalculation.OutputQuantity
									QuantityOrdered += LocalQuantity
								else
									QuantityOrdered += each.Quantity								
						for each PreviousCostContractPurchaseOrderLineCompanyRel
							if (ItemNumber exists
							and each.EnteredBuyUOM != UOM)
								initialize UOMCalculation
								initialize LocalQuantity
								UOMCalculation.InputQuantity		= each.Quantity
								UOMCalculation.InputUOM				= each.EnteredBuyUOM
								UOMCalculation.InputToUOM			= UOM
								UOMCalculation.Method				= UOMCalculation.Method.ConvertToAlternate
								LocalQuantity						= UOMCalculation.OutputQuantity
								QuantityOrdered += LocalQuantity
							else
								QuantityOrdered += each.Quantity					
					else
					if (Company entered
					and Location entered)

						for each DistributorContractLineRel
							LocalDistContract 		= each.Contract
							LocalDistContractLine 	= each.ContractLine
							for each PreviousCostDistPOLineLocationRel

								if (ItemNumber exists
								and each.EnteredBuyUOM = UOM)
									initialize UOMCalculation
									initialize LocalQuantity
									UOMCalculation.InputQuantity		= each.Quantity
									UOMCalculation.InputUOM				= each.EnteredBuyUOM
									UOMCalculation.InputToUOM			= UOM
									UOMCalculation.Method				= UOMCalculation.Method.ConvertToAlternate
									LocalQuantity						= UOMCalculation.OutputQuantity
									QuantityOrdered += LocalQuantity
								else
									QuantityOrdered += each.Quantity

						for each PreviousCostContractPurchaseOrderLineLocationRel

							if (ItemNumber exists
							and each.EnteredBuyUOM != UOM)
								initialize UOMCalculation
								initialize LocalQuantity
								UOMCalculation.InputQuantity		= each.Quantity
								UOMCalculation.InputUOM				= each.EnteredBuyUOM
								UOMCalculation.InputToUOM			= UOM
								UOMCalculation.Method				= UOMCalculation.Method.ConvertToAlternate
								LocalQuantity						= UOMCalculation.OutputQuantity
								QuantityOrdered += LocalQuantity
							else
								QuantityOrdered += each.Quantity

					else 
					if (PricingGroup entered
					and PricingGroup.PricingGroupType = 1)
						for each DistributorContractLineRel
							LocalDistContract 		= each.Contract
							LocalDistContractLine 	= each.ContractLine
							for each PreviousCostDistContractPurchaseOrderLinePricingGroupCompanyRel
								if (ItemNumber exists
								and each.EnteredBuyUOM = UOM)
									initialize UOMCalculation
									initialize LocalQuantity
									UOMCalculation.InputQuantity		= each.Quantity
									UOMCalculation.InputUOM				= each.EnteredBuyUOM
									UOMCalculation.InputToUOM			= UOM
									UOMCalculation.Method				= UOMCalculation.Method.ConvertToAlternate
									LocalQuantity						= UOMCalculation.OutputQuantity
									QuantityOrdered += LocalQuantity
								else
									QuantityOrdered += each.Quantity	
						for each PreviousCostContractPurchaseOrderLinePricingGroupCompanyRel
							if (ItemNumber exists
							and each.EnteredBuyUOM != UOM)
								initialize UOMCalculation
								initialize LocalQuantity
								UOMCalculation.InputQuantity		= each.Quantity
								UOMCalculation.InputUOM				= each.EnteredBuyUOM
								UOMCalculation.InputToUOM			= UOM
								UOMCalculation.Method				= UOMCalculation.Method.ConvertToAlternate
								LocalQuantity						= UOMCalculation.OutputQuantity
								QuantityOrdered += LocalQuantity
							else
								QuantityOrdered += each.Quantity	
					else 
					if (PricingGroup entered
					and PricingGroup.PricingGroupType = 2)
						
						for each DistributorContractLineRel
							LocalDistContract 		= each.Contract
							LocalDistContractLine 	= each.ContractLine
							for each PreviousCostDistContractPurchaseOrderLinePricingGroupLocationRel
								if (ItemNumber exists
								and each.EnteredBuyUOM = UOM)
									initialize UOMCalculation
									initialize LocalQuantity
									UOMCalculation.InputQuantity		= each.Quantity
									UOMCalculation.InputUOM				= each.EnteredBuyUOM
									UOMCalculation.InputToUOM			= UOM
									UOMCalculation.Method				= UOMCalculation.Method.ConvertToAlternate
									LocalQuantity						= UOMCalculation.OutputQuantity
									QuantityOrdered += LocalQuantity
								else
									QuantityOrdered += each.Quantity	
						for each PreviousCostContractPurchaseOrderLinePricingGroupLocationRel
							if (ItemNumber exists
							and each.EnteredBuyUOM != UOM)
								initialize UOMCalculation
								initialize LocalQuantity
								UOMCalculation.InputQuantity		= each.Quantity
								UOMCalculation.InputUOM				= each.EnteredBuyUOM
								UOMCalculation.InputToUOM			= UOM
								UOMCalculation.Method				= UOMCalculation.Method.ConvertToAlternate
								LocalQuantity						= UOMCalculation.OutputQuantity
								QuantityOrdered += LocalQuantity
							else
								QuantityOrdered += each.Quantity
								
			
			Exit Rules
			
				if (ProcessingType = 5
				and QuantityOrdered = 0)
					invoke Delete
					 																	
		Update is an Update Action
			valid when (CanUpdate)
			
			Field Rules
			
				FutureCost
				
					if FutureCost changed
						constraint (FutureCost >= 0)
							"CannotChangeToAnAmountLessThanZero"
				
				QuantityOrdered		
				
					if QuantityOrdered changed
						constraint (QuantityOrdered > 0)
							"MustChangeQuantityOrderedToAQuantityGreaterThanZero"

		Delete is a Delete Action
			restricted
			
		DeleteForContract is a Set Action
			restricted
			Parameters
				ParmContractGroup 	 is a ContractGroup
				ParmContract         is a Contract
 				ParmProcessingType   is Numeric size 1
 					States
 						ImportUpdate            value is 1
 						ImportPriceCompare      value is 2
 						ContractPriceCompare    value is 3
						BidWorksheet            value is 4
 						PreviousCostCompare     value is 5
						ManualUpdate            value is 6	
			Instance Selection
				where (ParmContractGroup  = ContractGroup
				and    ParmContract       = Contract
				and    ParmProcessingType = ProcessingType)
				
			Action Rules
			
				Instance Rules
				
					invoke Delete			

		AcceptCost is an Instance Action
			valid when (CanAcceptCost)
			Action Rules
				LocalBaseCost = ContractLine.BaseCost
				if (ContractTier !entered)
					if (ContractLine.DraftLine)
						include UpdateDraftContractLine
					else
					if (ContractLine.ContractLineState.Amendment)
						include UpdateAmendmentContractLine
					else
					if (ContractLine.ContractLineState.Active)
						include UpdateActiveContractLine
				else
					invoke Update ContractLineTierCostRel
						invoked.TierCost                = FutureCost
						invoked.NonManualUpdate         = true
						if (FutureCostDate > current corporate date
						and ContractLine.HasBeenActivated)
							invoked.effective date 		= FutureCostDate
					
			Exit Rules
				if (Contract.HasBeenActivated)
					invoke FastUpdateWithoutEdits Contract
						if (FutureCostDate > 0)
							if (FutureCostDate > current corporate date)
								invoked.effective date 			= FutureCostDate
						else
							if (EffectiveDate > current corporate date)
								invoked.effective date 			= EffectiveDate
						invoked.ProcessPricingChangesTrue = true 
				invoke Delete
				
		DeleteCost is an Instance Action   
			Action Rules
				invoke Delete
