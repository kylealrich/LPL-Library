AnalyticsCalendar is a BusinessClass
	owned by analytics
	prefix is ANCAL
	representative text is "<AnalyticsCalendar>-<Description>"
	
	Ontology
		symbolic key is AnalyticsCalendar
	
	Patterns
		implements BODId
	
	Persistent Fields
		Description
		CalendarSequence	is Numeric 4
		TopNode				is like AnalyticsCalendarPeriod 
		YTDTopNode			is like AnalyticsCalendarPeriod
				
		CalendarType		is Numeric 2
			States
				Months				value is 1
				445        	        value is 2
				454                 value is 3
				544                 value is 4
				5253Week			value is 5
				4WeekPeriods		value is 6				
				Weeks				value is 7
				Days				value is 8
				Other				value is 99		
						
		YearEndMonth		is Numeric 2     
			States
				January				value is 1
				February			value is 2
				March				value is 3
				April				value is 4
				May					value is 5
				June				value is 6
				July				value is 7
				August				value is 8
				September			value is 9
				October				value is 10
				November			value is 11
				December			value is 12
				
		YearEndLastDay		is Numeric 1 
			States
				Sunday				value is 1
				Monday				value is 2
				Tuesday				value is 3
				Wednesday			value is 4
				Thursday			value is 5
				Friday				value is 6
				Saturday			value is 7
				
		YearEndLastDayMethod is Numeric 1
			States
				WithinYearEndMonth			value is 1
				NearestToEndOfYearEndMonth  value is 2			
				
		WeeksMethod			is Numeric 1
		    States
		    	ISO		   			value is 1
		    	Excel1     			value is 2
		    	Excel2     			value is 3
		    	Simple     			value is 4

		DaysHierarchy		is Numeric 1
			States
				DaysWithinYear		value is 1
				DaysWithinMonth 	value is 2
				DaysWithinWeek  	value is 3
			
	Local Fields
		LocalYear				is Year
		LocalQuarter			is Numeric 1
		LocalMonth				is Numeric 2
		LocalWeek				is Numeric 2
		LocalDay				is Numeric 3
		LocalDate				is Date
		LocalAlphaYear			is Alpha 4
		LocalAlphaDay			is Alpha 3
		LocalYearKey			is a AnalyticsCalendarPeriod
		LocalQuarterKey			is a AnalyticsCalendarPeriod
		LocalPeriodKey			is a AnalyticsCalendarPeriod
		TopNodeFound			is Boolean
		LocalSummaryPeriod		is a AnalyticsCalendarPeriod
		LocalPeriod				is a AnalyticsCalendarPeriod
		DatePeriod				is a AnalyticsCalendarPeriod
		LocalJulian				is Numeric 7
		LocalCreateWithinKey	is a AnalyticsCalendarPeriod
		LocalWeekAlpha			is Alpha 2
		LocalMonthAlpha			is Alpha 2
		LocalDayAlpha			is Alpha 3
		PeriodBegin				is like AnalyticsCalendarPeriod
		PeriodEnd				is like AnalyticsCalendarPeriod
		PeriodCount				is Numeric size 3
		WeekCount       		is Numeric size 2		
		Quarter					is Numeric size 1
		MaxPeriods				is Numeric size 3
		FirstOfMonth    		is Boolean
		FromDate				is Date
		ToDate					is Date
		LastDateBefore  		is Date
		LastDateAfter   		is Date
		NearestEndDate  		is Date
		StartDateMonth  		is Numeric 2
		YearMonthEnd			is Date
		YearEndDate				is Date
		TempDay		    		is Numeric 1
		TempMonth				is Numeric 2
		TempYear				is Year
		TempYearPlus1   		is Year
		TempYearMinus1  		is Year
		WeekArray				is a GLCalendarWeekArray
		YearDiff				is Numeric 6
		DiffBeforeYearEnd 		is Numeric 2
		DiffAfterYearEnd  		is Numeric 2
		SkipPeriod				is Boolean
		LookupPeriod    		is a AnalyticsCalendarPeriod
		SkipShadow
		LocalPeriodType			is Numeric 2
		LocalActionCode				is an ActionCode
		LocalBODCurrentTimeStamp	is a BODCurrentTimeStamp
		LocalReportingBasis		is a ReportingBasis
		LocalPeriodArray		is a AnalyticsCalendarPeriodArray
		NewDateCount			is Numeric 3
		LocalParentPeriod		is a AnalyticsCalendarPeriod
		SaveMonth				is Numeric 2
		CurrentMonth			is Numeric 2
		SaveWeek				is Numeric 2
		CurrentWeek				is Numeric 2
								  	
	Derived Fields
		TopNodeString	    is a StringField
			type is AlphaUpper 20
			restricted
			CalendarSequence
			"_TOP_NODE"

		YTDTopNodeString	    is a StringField
			type is AlphaUpper 20
			restricted
			CalendarSequence
			"_TOP_NODE_YTD"






					
		NewEndDateString is a DerivedField
			type is AlphaUpper 20
			restricted
			LocalAlphaYear = LocalDate year
			LocalAlphaDay  = LocalDate year day
			NewEndDateString = LocalAlphaYear
			if (LocalAlphaDay size = 1)
				NewEndDateString += "00"
			else
			if (LocalAlphaDay size = 2)
				NewEndDateString += "0"
			NewEndDateString += LocalAlphaDay 
									
		NewYearString is a StringField
			type is AlphaUpper 20
			restricted
			CalendarSequence
			"_"			
			LocalYear
			
		NewQuarterString is a StringField
			type is AlphaUpper 20
			restricted
			CalendarSequence
			"_"		
			LocalYear
			"Q"	
			LocalQuarter
			
		NewMonthString is a StringField
			type is AlphaUpper 20
			restricted
			CalendarSequence
			"_"	
			LocalYear
			"M"		
			LocalMonthAlpha				
		
		NewWeekString is a StringField
			type is AlphaUpper 20
			restricted
			CalendarSequence
			"_"	
			LocalYear
			"W"		
			LocalWeekAlpha

		NewDayString is a StringField
			type is AlphaUpper 20
			restricted
			CalendarSequence
			"_"	
			LocalYear
			"D"		
			LocalDayAlpha
			
		DerivedBeginningBalanceString is a StringField
			type is AlphaUpper 20
			restricted
			LocalYear
			"000"
							
		DerivedBeginningBalanceDisplayPeriod is a StringField
			type is Alpha 30
			restricted
			LocalYear
			" Beginning Balance"
											
		StartDateJulian is a DerivedField
			type is AlphaUpper 7
			restricted
			return TopNodeRel.first ChildrenRel.AnalyticsCalendarPeriod.StartDateJulian

		EndDateJulian is a DerivedField
			type is AlphaUpper 7	
			restricted
			return (last AnalyticsPeriodShadow set.AnalyticsCalendarPeriod.EndDateJulian)				
		
		Description25 is a DerivedField
			type is Alpha 25
			restricted
			return Description
			
		Description21 is a DerivedField
			type is Alpha 21
			restricted
			return Description
						









	Conditions
		EligibleForYearCreation
			restricted
			when (!CalendarType.Other)
		
		NotWeeks
			restricted
			when (!CalendarType.Weeks)
			
		445OrVariant
			restricted
			when (CalendarType.445
			or    CalendarType.454
			or    CalendarType.544)

		PeriodDataExists
			restricted
			when (AnalyticsCalendarPeriodRel exists)

		ShowStartDate
			restricted
			when (!CalendarType.Weeks)
		
		TopNodeEntered
			restricted
			when (TopNode entered)
			
		YTDTopNodeEntered
			restricted
			when (YTDTopNode entered)




							
		CalendarExists
			restricted
			when (AnalyticsCalendar exists)
							
	Field Rules
		CalendarSequence
			autosequence using ByCalendarSequence

		CalendarType
			required
			
		WeeksMethod
			if (CalendarType.Weeks)
				default to WeeksMethod.ISO
				
		YearEndMonth
			if (CalendarType.5253Week)
				required
				
		YearEndLastDay
			if (CalendarType.5253Week)
				required
						
		YearEndLastDayMethod
			if (CalendarType.5253Week)
				required		
				
		TopNode
			TopNode 	= TopNodeString
		
		DaysHierarchy
			if (CalendarType.Days)
				default to DaysHierarchy.DaysWithinYear
																		
	Relations
		TopNodeRel
			one-to-one relation to AnalyticsCalendarPeriod
			Field Mapping uses symbolic key
				related.FinanceEnterpriseGroup      = FinanceEnterpriseGroup
				related.AnalyticsCalendarPeriod = TopNode

		YTDTopNodeRel
			one-to-one relation to AnalyticsCalendarPeriod
			Field Mapping uses symbolic key
				related.FinanceEnterpriseGroup      = FinanceEnterpriseGroup
				related.AnalyticsCalendarPeriod = YTDTopNode






											


		AnalyticsCalendarPeriodRel
			one-to-many relation to AnalyticsCalendarPeriod
			Field Mapping uses symbolic key
				related.FinanceEnterpriseGroup		= FinanceEnterpriseGroup
			Instance Selection
				where (related.PeriodType.EndDate)

		PeriodsTopNodeRel
			one-to-many relation to AnalyticsCalendarPeriod
			Field Mapping uses ByTopNode
				related.FinanceEnterpriseGroup = FinanceEnterpriseGroup
				related.TopNode         	   = TopNode

		PeriodsYTDTopNodeRel
			one-to-many relation to AnalyticsCalendarPeriod
			Field Mapping uses ByTopNode
				related.FinanceEnterpriseGroup = FinanceEnterpriseGroup
				related.TopNode         	   = YTDTopNode






										
		HierarchyTopNodeRel
			one-to-many relation to AnalyticsPeriodHierarchy
			Field Mapping uses SubordinatesByTopNode
				related.FinanceEnterpriseGroup = FinanceEnterpriseGroup
				related.TopNode         	   = TopNode					

		HierarchyYTDTopNodeRel
			one-to-many relation to AnalyticsPeriodHierarchy
			Field Mapping uses SubordinatesByTopNode
				related.FinanceEnterpriseGroup = FinanceEnterpriseGroup
				related.TopNode         	   = YTDTopNode







		HierarchyYearTopNodeRel
			one-to-one relation to AnalyticsPeriodHierarchy
			Field Mapping uses part of key
				related.FinanceEnterpriseGroup 		= FinanceEnterpriseGroup
				related.AnalyticsCalendarPeriod = TopNode
				related.SubordinatePeriod			= LocalYearKey
												
		EndDatesInCalendarRel
			one-to-many relation to AnalyticsPeriodHierarchy
			Field Mapping uses SubordinatesByTopNode
				related.FinanceEnterpriseGroup = FinanceEnterpriseGroup
				related.TopNode         	   = TopNode
			Instance Selection
				where (related.SubordinatePeriod.PeriodType.EndDate
				or     related.SubordinatePeriod.PeriodType.BeginningBalance)

		EndDateInPeriodRel
			one-to-one relation to AnalyticsPeriodHierarchy
			Field Mapping uses SubordinatesByTopNode
				related.FinanceEnterpriseGroup 		= FinanceEnterpriseGroup
				related.TopNode				  		= TopNode
				related.SubordinatePeriod	   		= LocalPeriod
				related.AnalyticsCalendarPeriod = LocalSummaryPeriod
				
		EndDatesInYTDCalendarRel
			one-to-many relation to AnalyticsPeriodHierarchy
			Field Mapping uses SubordinatesByTopNode
				related.FinanceEnterpriseGroup = FinanceEnterpriseGroup
				related.TopNode         	   = YTDTopNode
			Instance Selection
				where (related.SubordinatePeriod.PeriodType.EndDate
				or     related.SubordinatePeriod.PeriodType.BeginningBalance)
				








								
		PreviousEndDateRel
			one-to-many relation to AnalyticsCalendarPeriod
			Field Mapping uses LeafRecords
				related.FinanceEnterpriseGroup = FinanceEnterpriseGroup
			Instance Selection
				where (related.AnalyticsCalendarPeriod < DatePeriod)
		
		DatesWithinPeriodRangeRel
			one-to-many relation to AnalyticsCalendarPeriod
			Field Mapping uses LeafRecords
				related.FinanceEnterpriseGroup = FinanceEnterpriseGroup
			Instance Selection
				where (related.AnalyticsCalendarPeriod >= PeriodBegin
				and    related.AnalyticsCalendarPeriod <= PeriodEnd)
		
		SummaryPeriodsForYearRel
			one-to-many relation to AnalyticsPeriodHierarchy
			Field Mapping uses SubordinatesByTopNode
				related.FinanceEnterpriseGroup = FinanceEnterpriseGroup
				related.TopNode				   = TopNode
			Instance Selection
				where (related.SubordinatePeriod.Year 	     = LocalYear
				and    related.SubordinatePeriod.PeriodType  = LocalPeriodType)
		
		ShadowForLocalYearKeyRel
			one-to-many relation to AnalyticsPeriodShadow
			Field Mapping uses BySummaryPeriod
				related.FinanceEnterpriseGroup 			   = FinanceEnterpriseGroup
				related.AnalyticsCalendar  			   = AnalyticsCalendar
				related.SummaryAnalyticsCalendarPeriod = LocalYearKey																	
		
		DateWithinJulianRangeRel
			one-to-many relation to AnalyticsCalendarPeriod
			Field Mapping uses ByTopNodeAndType
				related.FinanceEnterpriseGroup = FinanceEnterpriseGroup
				related.TopNode				   = TopNode
				related.PeriodType			   = LocalPeriodType
			Instance Selection
				where (related.StartDateJulian <= LookupPeriod
				and    related.EndDateJulian   >= LookupPeriod)
		
		PeriodInHierarchyRel
			one-to-one relation to AnalyticsPeriodHierarchy
			Field Mapping uses ByParent
				related.FinanceEnterpriseGroup 		= FinanceEnterpriseGroup
				related.AnalyticsCalendarPeriod = LocalParentPeriod
				related.SubordinatePeriod			= LookupPeriod
		
		OtherCalendarsRel
			one-to-many relation to AnalyticsCalendar
			Field Mapping uses symbolic key
				related.FinanceEnterpriseGroup 		= FinanceEnterpriseGroup
			Instance Selection
				where (related.UniqueID			   != UniqueID)	
								
	Sets
		ByCalendarSequence
			Sort Order
				FinanceEnterpriseGroup
				CalendarSequence	
		
		ByTopNode
			Sort Order
				FinanceEnterpriseGroup
				TopNode
				













													
	Action Exit Rules
		if (FinanceEnterpriseGroup.BODTrigger)
			if (!action type.Delete)
				if (action != "UpdateBODIdFields") 
					LocalActionCode = LocalActionCode.Update
					if (action type.Create)
						LocalActionCode = LocalActionCode.Create
					else
						if (action type.Delete)
							LocalActionCode = LocalActionCode.Delete
		
					increment bod id.VariationID
		
					trigger "AnalyticsCalendarService" PA service
						resume on error
						title is "EG:<FinanceEnterpriseGroup>"
						Criteria
							FinanceEnterpriseGroup
						Variables
							LocalActionCode
								variable name is ActionCode
							include persistent fields from FinanceEnterpriseGroup
							include persistent fields from AnalyticsCalendar
							LocalBODCurrentTimeStamp.OutputBODCurrentTimeStamp
								variable name is CurrentTimeStamp

	Rule Blocks
 		DeleteRules
			if (FinanceEnterpriseGroup.BODTrigger)
				LocalActionCode = LocalActionCode.Delete
	
				increment bod id.VariationID
	
				trigger "AnalyticsCalendarService" PA service
					resume on error
					title is "EG:<FinanceEnterpriseGroup>"
					Criteria
						FinanceEnterpriseGroup
					Variables
						LocalActionCode
							variable name is ActionCode
						include persistent fields from FinanceEnterpriseGroup
						include persistent fields from AnalyticsCalendar
						LocalBODCurrentTimeStamp.OutputBODCurrentTimeStamp
							variable name is CurrentTimeStamp

	Actions				
		Create is an Action
			Action Rules	

				CalendarType  = CalendarType.Days
				DaysHierarchy = DaysHierarchy.DaysWithinMonth
										
			Exit Rules

				invoke CreateTopNode AnalyticsCalendarPeriod
					invoked.FinanceEnterpriseGroup		= FinanceEnterpriseGroup
					invoked.AnalyticsCalendarPeriod = TopNodeString
					invoked.DisplayPeriod				= (Description25 + " Node")
			
				if (!CalendarType.Other)

					invoke CreateTopNode AnalyticsCalendarPeriod
						invoked.FinanceEnterpriseGroup		= FinanceEnterpriseGroup
						invoked.AnalyticsCalendarPeriod = YTDTopNodeString
						invoked.DisplayPeriod				= (Description21 + " YTD Node")
	





					YTDTopNode  = YTDTopNodeString

												
		Update is an Action
			Action Rules
			Exit Rules
					
				if (!CalendarType.Other)

					if (!YTDTopNode entered)
						invoke CreateTopNode AnalyticsCalendarPeriod
							invoked.FinanceEnterpriseGroup		= FinanceEnterpriseGroup
							invoked.AnalyticsCalendarPeriod = YTDTopNodeString
							invoked.DisplayPeriod				= (Description21 + " YTD Node")
						YTDTopNode = YTDTopNodeString
	






							
		Delete is an Action
			confirmation required
				"CalendarWillBeDeleted"
	
			Entrance Rules
				for each EndDatesInCalendarRel
					invoke RemovePeriodFromHierarchy each.AnalyticsCalendarPeriod
				if (YTDTopNode entered)
					for each EndDatesInYTDCalendarRel
						invoke RemovePeriodFromHierarchy each.AnalyticsCalendarPeriod	



				if (TopNode entered)
					invoke Delete HierarchyTopNodeRel
				if (YTDTopNode entered)
					invoke Delete HierarchyYTDTopNodeRel


				if (TopNode entered)
					invoke Delete PeriodsTopNodeRel	
				if (YTDTopNode entered)
					invoke Delete PeriodsYTDTopNodeRel


				include DeleteRules										
										
		CreateCalendarYear is an Instance Action
			valid when (EligibleForYearCreation)
		
			Parameters
				Year						   is Year
				StartDate					   is Date	
				EndDate					       is Date 
				RecreatingFollowingYear		   is Boolean
				InvokedByGeneralLedgerCalendar is Boolean
					default label is "InvokedByGlobalLedgerCalendar"




			Parameter Rules
				Year
					required
					LocalYear    = Year
					LocalYearKey = NewYearString


			
				StartDate
					if (CalendarType.Weeks)
						cannot be entered
					else
						required						

						TempYear       = StartDate year
						TempYearPlus1  = (TempYear + 1)

						
						constraint (Year >= TempYear
						and			Year <= TempYearPlus1) 
							"StartDateOutOfRangeForYear"
							
						if (StartDate month = 1
						and StartDate day = 1)
							constraint (Year = TempYear)
								"YearMustMatchYearOfDate"							
						
						if (CalendarType.5253Week)
							StartDateMonth = StartDate month
							if (StartDateMonth = 1
							and YearEndMonth   = 12)
								StartDateMonth = 13  
							constraint (StartDateMonth = YearEndMonth
							or          StartDateMonth = (YearEndMonth + 1))
								"StartDateInvalidForSpecifiedYearEndMonthOf<YearEndMonth>"
						
				EndDate
					constraint (445OrVariant
					or			CalendarType.Days)
						"EndDateCannotBeSpecifiedForThisCalendarType"
					
					if (!InvokedByGeneralLedgerCalendar)
						constraint (EndDate >= (StartDate + 364)
						and         EndDate <= (StartDate + 371))
							"InvalidEndDate<EndDate>"						
					
					if (CalendarType.Days)
						required
				
			Action Rules

				SkipShadow = true
				SkipPeriod  = false
				PeriodCount = 0
							
				if (!CalendarType.Other)

					if (!YTDTopNode entered)
						LookupPeriod = YTDTopNodeString
						if (!LookupPeriod exists)
							invoke CreateTopNode AnalyticsCalendarPeriod
							
								invoked.FinanceEnterpriseGroup		= FinanceEnterpriseGroup
								invoked.AnalyticsCalendarPeriod = YTDTopNodeString
								invoked.DisplayPeriod				= ("YTD Top Node for " + AnalyticsCalendar)
					
						YTDTopNode = YTDTopNodeString
	









																											
				if (!LocalYearKey exists)
					invoke Create AnalyticsCalendarPeriod
						invoked.FinanceEnterpriseGroup = FinanceEnterpriseGroup
						invoked.CreatePeriodType 	   = 1
						invoked.Year 			 	   = Year
						
						
						
						
				else
					invoke Update HierarchyYearTopNodeRel
						invoked.Weight = 1
						
					for each ShadowForLocalYearKeyRel
						if (each.AnalyticsCalendarPeriod.BegBalAndEndDate)
							invoke RemovePeriodFromHierarchy each.AnalyticsCalendarPeriod
					LocalPeriodType = 8 
					for each SummaryPeriodsForYearRel
						invoke Delete each.SubordinatePeriod						
					LocalPeriodType = 4 
					for each SummaryPeriodsForYearRel
						invoke Delete each.SubordinatePeriod
					LocalPeriodType = 3 
					for each SummaryPeriodsForYearRel
						invoke Delete each.SubordinatePeriod				
					invoke Delete LocalYearKey.ChildrenRel
					if (!CalendarType.Other)

						LookupPeriod = LocalYearKey + "_YTD"
						if (LookupPeriod exists)
							invoke Delete LookupPeriod
						invoke CreateYTDYear AnalyticsCalendarPeriod
							fill in fields from LocalYearKey
							invoked.AnalyticsCalendarPeriod = LookupPeriod
							invoked.DisplayPeriod				= (LocalYearKey.DisplayPeriod + "_YTD")										







								
				LookupPeriod = DerivedBeginningBalanceString
				if (!LookupPeriod exists)
					invoke CreateBeginningBalanceKey AnalyticsCalendarPeriod
						invoked.FinanceEnterpriseGroup 		= FinanceEnterpriseGroup
						invoked.AnalyticsCalendarPeriod = LookupPeriod
						invoked.Year 			 	   		= Year
						invoked.DisplayPeriod				= DerivedBeginningBalanceDisplayPeriod
				







				if (CalendarType.Days)
					MaxPeriods = ((EndDate - StartDate) + 1)
				else				
				if (CalendarType.Weeks)
					MaxPeriods = 53
				else
				if (CalendarType.Months)
					MaxPeriods = 12
				else

				if (CalendarType.445)
					if (EndDate entered)
						MaxPeriods = 13
					else
						MaxPeriods = 12
					while (WeekCount < MaxPeriods)
						WeekCount +=1
						if (WeekCount = 3
						or  WeekCount = 6
						or  WeekCount = 9
						or  WeekCount = 12)
							WeekArray.DayCount[WeekCount] = 34
						else
							WeekArray.DayCount[WeekCount] = 27
				else
				if (CalendarType.454)
					if (EndDate entered)
						MaxPeriods = 13
					else
						MaxPeriods = 12
					while (WeekCount < MaxPeriods)
						WeekCount +=1
						if (WeekCount = 2
						or  WeekCount = 5
						or  WeekCount = 8
						or  WeekCount = 11)
							WeekArray.DayCount[WeekCount] = 34
						else
							WeekArray.DayCount[WeekCount] = 27					
				else
				if (CalendarType.544)
					if (EndDate entered)
						MaxPeriods = 13
					else
						MaxPeriods = 12
					while (WeekCount < MaxPeriods)
						WeekCount +=1					
						if (WeekCount = 1
						or  WeekCount = 4
						or  WeekCount = 7
						or  WeekCount = 10)
							WeekArray.DayCount[WeekCount] = 34
						else
							WeekArray.DayCount[WeekCount] = 27					
				else
				if (CalendarType.5253Week)
					MaxPeriods     = 13
					YearMonthEnd   = (StartDate + 365)
					StartDateMonth = StartDate month
					TempMonth      = YearMonthEnd month	
					if (StartDateMonth = YearEndMonth)
						while (TempMonth = YearEndMonth)					
							YearMonthEnd += 1
						    TempMonth    = YearMonthEnd month							
						YearMonthEnd -= 1					
					else
						while (TempMonth != YearEndMonth)
							YearMonthEnd -= 1
						    TempMonth    = YearMonthEnd month								

					LastDateBefore		= YearMonthEnd
					TempDay			    = LastDateBefore week day
					while (TempDay != YearEndLastDay)
						LastDateBefore -= 1
						TempDay			= LastDateBefore week day
					
					LastDateAfter		= YearMonthEnd
					TempDay			    = LastDateAfter week day
					while (TempDay != YearEndLastDay)
						LastDateAfter  += 1
						TempDay			= LastDateAfter week day						
							
					DiffBeforeYearEnd = (YearMonthEnd - LastDateBefore)
					DiffAfterYearEnd  = (LastDateAfter - YearMonthEnd)		
								
					if (DiffBeforeYearEnd > DiffAfterYearEnd) 
						NearestEndDate	= LastDateAfter
					else
						NearestEndDate  = LastDateBefore
						
					if (YearEndLastDayMethod.WithinYearEndMonth)
						YearEndDate		= LastDateBefore
					else
						YearEndDate		= NearestEndDate																										 

					while (WeekCount < MaxPeriods)
						WeekCount +=1
						if (WeekCount = 3
						or  WeekCount = 6
						or  WeekCount = 9
						or  WeekCount = 12)
							WeekArray.DayCount[WeekCount] = 34
						else
							WeekArray.DayCount[WeekCount] = 27
				else
				if (CalendarType.4WeekPeriods)
					MaxPeriods = 13
					while (WeekCount < MaxPeriods)
						WeekCount +=1					
						WeekArray.DayCount[WeekCount] = 27						
					
				if (CalendarType.Months)
					FromDate = (StartDate - StartDate day + 1)
				else
				if (CalendarType.Weeks)
					FromDate = "20120101"
					YearDiff = (Year - FromDate year)
					FromDate += YearDiff as years
					if (WeeksMethod.ISO)
						while (FromDate week day != 5)
							FromDate += 1
						while (FromDate week day != 2)
							FromDate -= 1
					StartDate = FromDate						  
				else
					FromDate = StartDate
				
				LocalDate	 = StartDate
				PeriodBegin  = NewEndDateString	
					




				if (CalendarType.Months)
					invoke CreatePeriodWithin LocalYearKey
						invoked.NewPeriodType		= 2
						invoked.CreateAll			= true
				else
				if (CalendarType.Days)
					if (DaysHierarchy.DaysWithinMonth) 
						invoke CreatePeriodWithin LocalYearKey
							invoked.NewPeriodType		= 3
							invoked.CreateAll			= true						
					else
					if (DaysHierarchy.DaysWithinWeek) 
						invoke CreatePeriodWithin LocalYearKey
							invoked.NewPeriodType		= 4
							invoked.CreateAll			= true
					else 
						invoke CreatePeriodWithin LocalYearKey				
							invoked.NewPeriodType		= 8
							invoked.NumberOfDays		= MaxPeriods						
							invoked.CreateAll			= true
					ToDate = StartDate
																
				while (PeriodCount < MaxPeriods)
					
					PeriodCount += 1
					
					if (CalendarType.Months)
						if (PeriodCount < 4)
							LocalQuarter = 1
						else
						if (PeriodCount < 7)
							LocalQuarter = 2
						else
						if (PeriodCount < 10)
							LocalQuarter = 3
						else
							LocalQuarter = 4
						if (PeriodCount < 10)
							LocalMonthAlpha = ("0" + PeriodCount)
						else
							LocalMonthAlpha 	 = PeriodCount
						LocalCreateWithinKey 	 = NewMonthString
					else
					if (CalendarType.Weeks)
						if (PeriodCount < 10)
							LocalWeekAlpha = ("0" + PeriodCount)
						else
							LocalWeekAlpha 		 = PeriodCount
						LocalCreateWithinKey 	 = NewWeekString
					else
					if (CalendarType.Days)
						ToDate = FromDate					
						if (DaysHierarchy.DaysWithinMonth)
							if (ToDate month != SaveMonth)
								SaveMonth	  = ToDate month
								CurrentMonth += 1
							if (CurrentMonth < 10)
								LocalMonthAlpha = ("0" + CurrentMonth)
							else
								LocalMonthAlpha 	 = CurrentMonth
							LocalCreateWithinKey 	 = NewMonthString



						else
						if (DaysHierarchy.DaysWithinWeek)
							if (ToDate week != SaveWeek)
								SaveWeek	 = ToDate week
								CurrentWeek += 1
							if (CurrentWeek < 10)
								LocalWeekAlpha = ("0" + CurrentWeek)
							else
								LocalWeekAlpha 	 	= CurrentWeek
							LocalCreateWithinKey 	= NewWeekString
							if (CurrentWeek = 53)
								if (!LocalCreateWithinKey exists)
									invoke CreatePeriodWithin LocalYearKey
										invoked.NewPeriodType = 4
										invoked.NewWeek		  = 53



						if (PeriodCount < 10)
							LocalDayAlpha = ("00" + PeriodCount)
						else					
						if (PeriodCount < 100)
							LocalDayAlpha = ("0" + PeriodCount)
						else
							LocalDayAlpha 		 = PeriodCount

					else					
					if (!CalendarType.Other)
						if (PeriodCount < 10)
							LocalMonthAlpha = ("0" + PeriodCount)
						else
							LocalMonthAlpha 	 = PeriodCount
						LocalCreateWithinKey 	 = NewMonthString
					else
						LocalCreateWithinKey	 = NewYearString
						
					if (CalendarType.Weeks)
						if (PeriodCount = 1)
							if (WeeksMethod.ISO
							or  WeeksMethod.Excel2)
								ToDate = FromDate

								while (ToDate week day != 1)
									ToDate += 1
						    else
						    if (WeeksMethod.Excel1)
						    	ToDate = FromDate

								while (ToDate week day != 7)
									ToDate += 1
							else

								ToDate = (FromDate + 6)
						else
							ToDate = (FromDate + 6)
						if (ToDate year > Year)
							if (WeeksMethod.ISO)
								if (ToDate day > 3)



									while (ToDate week day != 1
									or     ToDate year != Year)
										ToDate -= 1
									if (ToDate < FromDate)
										SkipPeriod = true	
							else
								ToDate = "20121231"
								ToDate += YearDiff as years
							if (SkipPeriod)
								PeriodCount  = 53

						if (!SkipPeriod)
							invoke CreatePeriodWithin LocalYearKey
								invoked.NewPeriodType = 4
								invoked.NewWeek   	  = PeriodCount
					else
					if (CalendarType.Months)
						ToDate = (FromDate + FromDate days in month - 1)

						LocalQuarterKey	= NewQuarterString
						invoke CreatePeriodWithin LocalQuarterKey
							invoked.NewPeriodType = 3
							invoked.NewMonth   	  = PeriodCount
						
					if (CalendarType.445
					or  CalendarType.454
					or  CalendarType.544
					or  CalendarType.5253Week
					or  CalendarType.4WeekPeriods)
						ToDate = (FromDate + WeekArray.DayCount[PeriodCount])

						invoke CreatePeriodWithin LocalYearKey
							invoked.NewPeriodType = 3
							invoked.NewMonth   	  = PeriodCount						
						
					if (CalendarType.5253Week)
						if (ToDate > YearEndDate)
							ToDate = YearEndDate
						if (FromDate > YearEndDate)
							SkipPeriod = true
							
					if (445OrVariant
					or  CalendarType.Days)
						if (EndDate entered)
							if (ToDate > EndDate)
								ToDate = EndDate
							if (FromDate > EndDate)
								SkipPeriod = true

					if (!SkipPeriod)
						LocalDate	 = ToDate
						LookupPeriod = NewEndDateString
						PeriodEnd 	 = LookupPeriod
						invoke CreatePeriodWithin LocalCreateWithinKey
							if (!LookupPeriod exists)
								NewDateCount += 1
								LocalPeriodArray.EndDateJulian[NewDateCount] = LookupPeriod
								invoked.NewPeriodType		= 5							
								invoked.NewEndDate			= ToDate
							else
								invoked.ExistingEndDateBegin = LookupPeriod
								
						LocalSummaryPeriod = LocalCreateWithinKey
						for each DatesWithinPeriodRangeRel
							LocalPeriod = each.AnalyticsCalendarPeriod
							if (!EndDateInPeriodRel exists)
								invoke CreatePeriodWithin LocalCreateWithinKey
									invoked.ExistingEndDateBegin = LocalPeriod

					FromDate 	= (ToDate + 1)
					LocalDate	= FromDate
					PeriodBegin = NewEndDateString									

			Exit Rules
				
				if ((!CalendarType.Days)
				and (!CalendarType.Other))
					LocalYear    = (Year + 1)
					LocalYearKey = NewYearString				
			 		if (LocalYearKey.ParentRel exists)
			 			PeriodCount = 0
			 			SkipPeriod  = false
						invoke CreateCalendarYear
							invoked.Year					= LocalYear
							if (!CalendarType.Weeks)
								invoked.StartDate				= FromDate	
			 		else
						SkipShadow = false
						invoke BuildShadowFile









				else
					SkipShadow = false
					invoke BuildShadowFile					
				
				if (NewDateCount > 0)
					for each OtherCalendarsRel
						invoke PropagateNewDates each.AnalyticsCalendar
							invoked.PrmPeriodArray			  = LocalPeriodArray
						
		BuildShadowFile is an Instance Action
			restricted
			run in background
			
			Action Rules
				invoke Delete AnalyticsPeriodShadow set

				for each EndDatesInCalendarRel
					TopNodeFound  = false
					LocalPeriod   = each.SubordinatePeriod
					DatePeriod    = LocalPeriod
					while (!TopNodeFound)
						if (!LocalPeriod.SubordinateInTopNodeRel.AnalyticsCalendarPeriod.PeriodType.TopNode)		
							invoke Create AnalyticsPeriodShadow
								resume on error
								invoked.FinanceEnterpriseGroup 			   = FinanceEnterpriseGroup
								invoked.AnalyticsCalendar  			   = AnalyticsCalendar
								invoked.AnalyticsCalendarPeriod		   = DatePeriod
								invoked.SummaryAnalyticsCalendarPeriod = LocalPeriod.SubordinateInTopNodeRel.AnalyticsCalendarPeriod
								invoked.SummaryPeriodType				   = LocalPeriod.SubordinateInTopNodeRel.AnalyticsCalendarPeriod.PeriodType
						if (LocalPeriod.SubordinateInTopNodeRel.AnalyticsCalendarPeriod.PeriodType.TopNode)
							TopNodeFound = true
						else
							LocalPeriodKey = LocalPeriod
							LocalPeriod = LocalPeriodKey.SubordinateInTopNodeRel.AnalyticsCalendarPeriod	
			Exit Rules
				invoke PersistJulianRange AnalyticsCalendarPeriod
					invoked.PrmFinanceEnterpriseGroup = FinanceEnterpriseGroup
					invoked.PrmCalendar				  = AnalyticsCalendar
					
		PropagateNewDates is an Instance Action
			restricted
			run in background
			
			Parameters
				PrmPeriodArray			  is a AnalyticsCalendarPeriodArray
					
			Local Fields
				I1						  is Numeric 3
				DatesAdded				  is Boolean
							
			Action Rules
			
				SkipShadow = true
				I1		   = 1
				
				while (I1 < 367)
					if (PrmPeriodArray.EndDateJulian[I1] = blank)
						I1 = 367
						end while 
						
					LookupPeriod 		= PrmPeriodArray.EndDateJulian[I1]
					if (CalendarType.Weeks)
						LocalPeriodType = 4 
					else
					if (CalendarType.Days)
						LocalPeriodType = 8
					else
						LocalPeriodType = 3
												
					if (DateWithinJulianRangeRel exists)
						LocalParentPeriod = first DateWithinJulianRangeRel.AnalyticsCalendarPeriod
						if (!PeriodInHierarchyRel exists)
							DatesAdded = true
							invoke CreatePeriodWithin LocalParentPeriod
								invoked.ExistingEndDateBegin = LookupPeriod			
					I1 += 1
						
				if (DatesAdded)
					SkipShadow = false
					invoke BuildShadowFile
												























