FranchiseContractCharge is a BusinessClass
    owned by fr
    prefix is FRG
    classic name is FRCHARGE

    Ontology
        symbolic key is FranchiseContractCharge
            classic set name is FRGSET1
            classic name is SEQ
            classic name for CustomerShipTo is SHIP-TO
            classic name for FranchiseContract is CONTR-NBR

    Patterns
        implements StaticJava
        disable AuditIndex

    Persistent Fields
        FranchiseStandardCharge
            classic name for FranchiseStandardCharge.Currency is CURRENCY-CODE
        Description
            classic name is DESC
        ChargeType                      is Numeric size 1
            States
                SalesBased value is 1
                    default label is "Sales-Based"
                NoteBased  value is 2
                    default label is "Note-Based"
                Special    value is 3
        BeginDate                       is Date
        EndDate                         is Date
        NextCycleDate                   is Date
            classic name is NEXT-CYC-DATE
        Active                          is Boolean
            classic name is ACTIVE-FLAG
        Frequency                       is AlphaUpper size 1
            States
                Weekly    value is "W"
                Monthly   value is "M"
                Quarterly value is "Q"
                Yearly    value is "Y"
        InterestRate
        NoteAmount                      is an InternationalAmount
        CurrentBalance                  is an InternationalAmount
            classic name is CURRENT-BAL
        ChargeToDate                    is an InternationalAmount
        PaymentAmount                   is an InternationalAmount
            classic name is PAYMNT-AMT
        NumberOfPayments                is Numeric size 4
            classic name is NBR-OF-PMTS
        RemainingPayments               is Numeric size 4
            classic name is REMAINING-PMTS
        CalculationType
            classic name is CALC-TYPE
		TaxableFlag 					is AlphaUpper size 1
	        States
	            Exempt  value is "E"
	            Taxable value is "T"
        TaxCode
        MinimumAmount                   is an InternationalAmount
            classic name is MIN-AMOUNT
        MaximumAmount                   is an InternationalAmount
            classic name is MAX-AMOUNT
        PercentOfSales
            classic name is PERC-OF-SALES
        BaseAmount                      is an InternationalAmount
        StepOperand
        StepLimits
            classic name is STEP-LIMIT
        StepPercents
            classic name is STEP-PCT
        BalanceFlag
            classic name is BALANCE-FL
        AccrualAccount                 	is a FinanceCodeBlock
        AccrualOffsetAccount            is a FinanceCodeBlock
        RevenueAccount                  is a FinanceCodeBlock
        NoteAssetAccount                is a FinanceCodeBlock
        NoteAccrual              		is a FinanceCodeBlock
	
        NoteAccrualOffsetAccount  		is a FinanceCodeBlock
        ProcessLevel 					is a BillingProcessLevel
        InitializeSpecialCharges 		is Boolean

	Context Fields
		FranchiseCompany

 	Local Fields
		LocalCounter 			is Numeric 2
		LastLimit 				is Numeric 2		
		LocalCycleDate			is Date
		InputDate				is Date
		LocalFrequency			is a Frequency
		LocalPeriodNumber   	is Numeric 2
	    CycleDateFound			is Boolean
	    MaxLimitValue           is like InternationalAmount 
	    
	Derived Fields
		TotalRemainingAmount is a DerivedField							
			type is like InternationalAmount
			return (PaymentAmount * RemainingPayments)	

		TotalCycleChargeSubmittedAmt is a DerivedField	
			type is like InternationalAmount
			restricted
			return (sum FranchiseCycleChargeRel.SubmittedAmount)
		
		DefaultNextCycleDate is a DerivedField
			type is Date
			restricted
			if (FranchiseContractChargeRel exists)
				return first FranchiseContractChargeRel.NextCycleDate
		
		IsCalendarHasBeginDate is a DerivedField
	    	type is Boolean
	    	restricted
	    	if (any CalendarDatesByFrequencyRel.Dates.Date = BeginDate)
				return true
			else
				return false		
		
		FranchiseContractChargeFormTitle is a DerivedField
			type is Alpha size up to 80
			if (RecordExists)
				return FranchiseContractChargeTitle
				
		FranchiseContractChargeTitleNoRecord is a LabelField	
			restricted
			"ContractCharge"
					
		FranchiseContractChargeTitle is a LabelField
			restricted
			"ContractCharge<FranchiseStandardCharge>_for_Contract<FranchiseContract>"
				
		ActiveStatus is a DerivedField
			type is Alpha size 10
			if(Active)
				return "Active"
			if(not Active)
				return ("InActive")
						
    Conditions
			
        NoteChargeAndCurrentBalance
        	restricted
        	when (ChargeType.NoteBased
        	and   CurrentBalance <= 0)
        	
        IsStatementRpt
        	restricted
            when (ChargeType.NoteBased
            and   BalanceFlag.Yes)
        NoteBasedCharge
        	restricted
        	when (ChargeType.NoteBased)
        SalesBasedCharge
        	restricted
        	when (ChargeType.SalesBased)
        SpecialBasedCharge
        	restricted
        	when (ChargeType.Special)
        StepsExist
        	restricted
    		when (StepLimits entered or StepPercents entered)	    
		RecordExists
			restricted
			when (FranchiseContract exists)
			
    Relations
        FranchiseCycleChargeRel
            one-to-many relation to FranchiseCycleCharge
            Field Mapping uses Set2
                related.Company           		= Company
                related.Customer          		= Customer
                related.CustomerShipTo    		= CustomerShipTo
                related.FranchiseContract 		= FranchiseContract
                related.FranchiseContractCharge	= FranchiseContractCharge
        
        FranchiseContractChargeRel
            one-to-many relation to FranchiseContractCharge
            Field Mapping uses symbolic key
                related.Company           		= Company
                related.Customer          		= Customer
                related.CustomerShipTo    		= CustomerShipTo
                related.FranchiseContract 		= FranchiseContract
            Instance Selection
				where (related.FranchiseContractCharge	!= FranchiseContractCharge)
        
        FranchiseSalesRel
            one-to-many relation to FranchiseSales
            Field Mapping uses symbolic key
                related.Company           		= Company
                related.Customer          		= Customer
                related.CustomerShipTo    		= CustomerShipTo
                related.FranchiseContract 		= FranchiseContract                
        
        CYFranchiseCalendarDatesRel
        	one-to-one relation to FranchiseCalendarDates
        	Field Mapping uses symbolic key
        		related.Company 						 = Company
        		related.FranchiseCalendar				 = FranchiseContract.FranchiseCalendar
        		related.FranchiseCalendarDates.Year		 = Company.CurrentYear
        		related.FranchiseCalendarDates.Frequency = Frequency

        LYFranchiseCalendarDatesRel
        	one-to-one relation to FranchiseCalendarDates
        	Field Mapping uses symbolic key
        		related.Company 						 = Company
        		related.FranchiseCalendar				 = FranchiseContract.FranchiseCalendar
        		related.FranchiseCalendarDates.Year		 = Company.PreviousYear
        		related.FranchiseCalendarDates.Frequency = Frequency 

        NYFranchiseCalendarDatesRel
        	one-to-one relation to FranchiseCalendarDates
        	Field Mapping uses symbolic key
        		related.Company 						 = Company
        		related.FranchiseCalendar				 = FranchiseContract.FranchiseCalendar
        		related.FranchiseCalendarDates.Year		 = Company.NextYear
        		related.FranchiseCalendarDates.Frequency = Frequency        		       	
        	   
        CalendarDatesByFrequencyRel
        	one-to-many relation to FranchiseCalendarDates
        	Field Mapping uses CalendarDatesByFrequency
        		related.Company 						 = Company
        		related.FranchiseCalendar				 = FranchiseContract.FranchiseCalendar
        		related.FranchiseCalendarDates.Frequency = Frequency       
	
		ActualInvoiceFranchiseCycleChargeRel
            one-to-many relation to FranchiseCycleCharge
            Field Mapping uses Set2
                related.Company           		= Company
                related.Customer          		= Customer
                related.CustomerShipTo    		= CustomerShipTo
                related.FranchiseContract 		= FranchiseContract
                related.FranchiseContractCharge	= FranchiseContractCharge
			Instance Selection
				where (related.FranchiseCycleCharge.FranchiseSales.SalesType.Actualinvoice)
				
        CompanyCustomerRel
            one-to-one relation to CompanyCustomer
            required
            Field Mapping uses symbolic key
                related.Company  = Company
                related.Customer = Customer


        FranchiseContractRel
            one-to-one relation to FranchiseContract
            Field Mapping uses symbolic key
                related.Company        		= Company
                related.Customer       		= Customer
                related.CustomerShipTo 		= CustomerShipTo
                related.FranchiseContract	= FranchiseContract
		
		FranchiseCompanyRel
            one-to-one relation to FranchiseCompany
            required
            Field Mapping uses symbolic key
                related.Company        = Company

        FranchisePrepaymentRel
            one-to-many relation to FranchisePrepayment
            Field Mapping uses Set1
                related.Company                 = Company
                related.Customer                = Customer
                related.CustomerShipTo          = CustomerShipTo
                related.FranchiseContract       = FranchiseContract
                related.FranchiseContractCharge = FranchiseContractCharge
                related.Charge                  = FranchiseStandardCharge.Charge

        FranchiseStandardChargeRel
            one-to-one relation to FranchiseStandardCharge
            required
            Field Mapping uses symbolic key
                related.Company                          	= Company
                related.FranchiseStandardCharge   			= FranchiseStandardCharge

        CustomerShipToRel
            one-to-one relation to CustomerShipTo
            required
            Field Mapping uses symbolic key
                related.Company        = Company
                related.Customer       = Customer
                related.CustomerShipTo = CustomerShipTo

        ReceivableCustomerRel
            one-to-one relation to Customer
            required
            Field Mapping uses symbolic key
                related.CustomerGroup = Company.CustomerGroupField.CustomerGroup	
                related.Customer      = Customer

		 

    Sets

        Set2
            indexed
            Instance Selection
                where (IsStatementRpt)
            Sort Order
                Company
                Customer
                CustomerShipTo
                FranchiseContract
                FranchiseContractCharge

        ByFranchiseContractCharge
            Sort Order
                Company
                Customer
                CustomerShipTo
                FranchiseContract
                FranchiseContractCharge
		

    Field Rules
    	Company 
    		required
    		
    	Customer
    		required
    	
    	CustomerShipTo
    		required

		FranchiseStandardCharge
			required
   			constraint (FranchiseStandardCharge.Currency = FranchiseContract.Currency)
   				"CannotAdd;CurrencyDoesNotMatchContract" 
			constraint (FranchiseCompanyRel.LastCurrentAndNextCalendarsExist)
				"NotAllLastCurrentAndNextYearCalendarsHaveBeenDefined"			
			
				    			
		Description
	    	initial value is FranchiseStandardCharge.Description
	    	default to FranchiseStandardCharge.Description	
	    	required
		

		ChargeType
	    	initial value is FranchiseStandardCharge.ChargeType
	    	default to FranchiseStandardCharge.ChargeType
	    	if (FranchiseStandardCharge.ChargeType.NoteBased)
	    		constraint (InterestRate entered)
	    			"InterestRateIsRequiredOnNoteBasedCharge"
	    		constraint (NumberOfPayments entered)
	    			"NumberOfPaymentsRequiredOnNoteBasedCharge"
	    		constraint (PaymentAmount entered)	
	    			"PaymentAmountRequiredOnNoteBasedCharge"	
	    		constraint (EndDate entered)
	    			"EndDateRequiredOnNoteBasedCharge"		 

        InterestRate
	    	initial value is FranchiseStandardCharge.InterestRate
	    	default to FranchiseStandardCharge.InterestRate
            if (!ChargeType.NoteBased)
            	cannot be entered
            		"InterestRateAllowedOnNoteBasedChargeOnly"
		Frequency
	    	initial value is FranchiseStandardCharge.Frequency
	    	default to FranchiseStandardCharge.Frequency		
	    	required
	    	constraint (CYFranchiseCalendarDatesRel exists)	
	    		"PreviousYearCalendarDatesDoNotExistForFrequency<Frequency>"
	    	constraint (LYFranchiseCalendarDatesRel exists)	
	    		"CurrentYearCalendarDatesDoNotExistForFrequency<Frequency>"	
	    	constraint (NYFranchiseCalendarDatesRel exists)	
	    		"NextYearCalendarDatesDoNotExistForFrequency<Frequency>"	    		    		
 		
		BeginDate
			if (FranchiseContract.LastActivityDate < FranchiseContract.ContractDate)
				default to FranchiseContract.ContractDate
			else 
				default to (FranchiseContract.LastActivityDate + 1)	
			required
			constraint (BeginDate >= FranchiseContract.ContractDate)
				"BeginDateCannotBeLessThanContractDate<FranchiseContract.ContractDate>"						
			if (BeginDate != old BeginDate)
				constraint (BeginDate > FranchiseContract.LastActivityDate)
					"BeginDateMustBeGreaterThanDateOfLastSalesEntry"										

        EndDate
			default to FranchiseContract.TerminateDate
			constraint (EndDate > BeginDate)
				"EndDateMustBeGreaterThanBeginDate"															
			constraint (EndDate <= FranchiseContract.TerminateDate)
				"EndDateCannotBeGreaterThanTheContractTerminationDate<FranchiseContract.TerminateDate>"		
        
        
        NextCycleDate
        
        BalanceFlag
            required
	    	initial value is FranchiseStandardCharge.BalanceFlag	            
            default to "N"

            
        CalculationType
	    	initial value is FranchiseStandardCharge.CalculationType
	    	default to FranchiseStandardCharge.CalculationType

		MaximumAmount
	    	initial value is FranchiseStandardCharge.MaximumAmount 
	    	if (SalesBasedCharge)
	    		if (MinimumAmount entered)
					constraint (MaximumAmount >= MinimumAmount)
						"MaxAmountMustBeGreaterThanOrEqualToTheMinAmount"//"Max amount must be greater than or equal to the min amount"   
            else		
            	cannot be entered
            	
       	MinimumAmount
	    	initial value is FranchiseStandardCharge.MinimumAmount     
	

		PercentOfSales
	    	initial value is FranchiseStandardCharge.PercentOfSales
			if (PercentOfSales entered)
				constraint (StepLimits.StepLimit[1] not entered)
					"CannotHave_\PercentOf_\SalesAnd_\Sliding_\Scale"//"Cannot have Percent of Sales and Sliding Scale"       
	    	
	    BaseAmount	
	    	initial value is FranchiseStandardCharge.BaseAmount
	    	
	    StepOperand
	    	initial value is FranchiseStandardCharge.StepOperand	    		
	    
	    StepLimits
	    	initial value is FranchiseStandardCharge.StepLimits
	    	
	    StepPercents
	    	initial value is FranchiseStandardCharge.StepPercents    		
    		LocalCounter = 1
    		LastLimit = 10
    		MaxLimitValue = 9999999999999
    		while (LocalCounter < LastLimit)
    			if (StepPercents.StepPercent[LocalCounter] entered)
    				constraint (StepLimits.StepLimit[LocalCounter] entered)
    					"MustHaveAnUpperLimitForEachPercentage"//"Must have an upper limit for each percentage"       




				if (LocalCounter != 1
				and StepLimits.StepLimit[LocalCounter] > 0)					
					constraint (StepLimits.StepLimit[LocalCounter] > StepLimits.StepLimit[LocalCounter - 1])
						"UpperLimitMustBeGreaterThanThePreviousLimit"//"Upper limit must be greater than the previous limit"     

   				if (StepLimits.StepLimit[LocalCounter] <= 0
   				and StepPercents.StepPercent[LocalCounter] <= 0)
   					LastLimit = LocalCounter - 1
   				
   				LocalCounter += 1
			if (StepLimits.StepLimit[LastLimit] != MaxLimitValue)				
				constraint (false)
					"LastLimitTypedMustBe_9999999999999.00"//"Last limit typed must be 9999999999999.00" 
	    	    
        RevenueAccount   
	    	initial value is FranchiseStandardCharge.RevenueAccount
	    	        
        NoteAssetAccount
	    	initial value is FranchiseStandardCharge.NoteAccount              
  
        NoteAccrual  
	    	initial value is FranchiseStandardCharge.NoteAccrualAccount

        NoteAccrualOffsetAccount  
	    	initial value is FranchiseStandardCharge.NoteAccrualOffsetAccount

        AccrualAccount      
	    	initial value is FranchiseStandardCharge.AccrualAccount

        AccrualOffsetAccount    
 	    	initial value is FranchiseStandardCharge.AccrualOffsetAccount       
	
		ProcessLevel
 	    	initial value is FranchiseStandardCharge.ProcessLevel        
        
        TaxableFlag
	    	initial value is FranchiseStandardCharge.TaxableFlag
			if (TaxableFlag.Taxable) 
				constraint (TaxCode entered)
					"TaxCodeRequiredForTaxableCharges"//"Tax code required for taxable charges"       
		TaxCode
	    	initial value is FranchiseStandardCharge.TaxCode
			if (TaxableFlag.Exempt)
				cannot be entered
					"ChargeIsExempt;TaxCodeCannotBeSelected"

	
		PaymentAmount
          	if (SalesBasedCharge)		
				cannot be entered
					"PaymentAmountNotValidForSalesBasedCharge"
				
        NumberOfPayments
            if (!ChargeType.NoteBased)
            	cannot be entered
            		"PaymentsAllowedOnNoteBasedChargeOnly"
            	
        RemainingPayments
            if (!ChargeType.NoteBased)
            	cannot be entered
            		"PaymentsAllowedOnNoteBasedChargeOnly"

        NoteAmount
            if (!ChargeType.NoteBased)
            	cannot be entered
            		"NoteAmountAllowedOnNoteBasedChargeOnly"

        CurrentBalance
        	if (ChargeType.NoteBased)
        		default to NoteAmount     
        		
            if (!ChargeType.NoteBased)
            	cannot be entered
            		"CurrentBalanceAllowedOnNoteBasedChargeOnly"
		
        ChargeToDate			
            if (!ChargeType.NoteBased)
            	cannot be entered
            		"ChargeToDateAllowedOnNoteBasedChargeOnly"
            		
        Active
			initial value is true    		

		InitializeSpecialCharges
			if (!SpecialBasedCharge)
				cannot be entered
		
	Attach Rules
		constraint (Active)
			"FranchiseContractChargeIsNotActive"
	
	Rule Blocks
		AccountBlock
			if (RevenueAccount not entered)
	    		RevenueAccount = FranchiseStandardCharge.RevenueAccount
	    	        
	        if (NoteAssetAccount not entered)
		    	NoteAssetAccount = FranchiseStandardCharge.NoteAccount              
	  
	        if (NoteAccrual not entered) 
		    	NoteAccrual = FranchiseStandardCharge.NoteAccrualAccount
	
	        if (NoteAccrualOffsetAccount not entered) 
		    	NoteAccrualOffsetAccount = FranchiseStandardCharge.NoteAccrualOffsetAccount
	
	        if (AccrualAccount not entered )   
		    	AccrualAccount = FranchiseStandardCharge.AccrualAccount
	
	        if (AccrualOffsetAccount not entered)   
	 	    	AccrualOffsetAccount = FranchiseStandardCharge.AccrualOffsetAccount       
		GetNextCycleDate 
			InputDate 			= LocalCycleDate
			LocalFrequency		= Frequency
			LocalPeriodNumber 	= 1
			CycleDateFound		= false
			for each CalendarDatesByFrequencyRel
				LocalPeriodNumber 	= 1
				if (!CycleDateFound)
					while (LocalPeriodNumber <= 53)
						if (each.Dates.Date[LocalPeriodNumber] entered)					
							if (each.Dates.Date[LocalPeriodNumber] >= InputDate)
								NextCycleDate = each.Dates.Date[LocalPeriodNumber]
								CycleDateFound = true
								LocalPeriodNumber = 54
								end for each
							else
								LocalPeriodNumber += 1	
						else
							LocalPeriodNumber = 54
			if ((NextCycleDate > EndDate
			or  NextCycleDate < BeginDate)
			or (ChargeType.NoteBased 
			and RemainingPayments = 0))
				initialize NextCycleDate
				
    Actions
        Create is a Create Action
        			
			Field Rules
				RemainingPayments
					if (ChargeType.NoteBased
					and RemainingPayments = 0)
						default to NumberOfPayments					
				
			Action Rules
				constraint (FranchiseContract.Active = true)
					"ContractIsInactive"
				if (ChargeType.NoteBased)
					constraint (RemainingPayments > 0)
						"RemainingPaymentsOnNoteCannotBe0"						
					constraint (PaymentAmount = TotalCycleChargeSubmittedAmt)
						"SubmittedAmountForNoteBasedChargeMustEqualPayment"		
			Exit Rules	



    			LocalCycleDate	= BeginDate
    			include GetNextCycleDate


        Update is an Update Action
			Action Rules
				if (ChargeType.SalesBased
				or  ChargeType.Special)
					if (BeginDate changed
					or  EndDate changed
					or  Frequency changed)
						constraint (ActualInvoiceFranchiseCycleChargeRel not exists)
							"CannotChange;SalesEntryExists"//"Cannot change; sales entry exists"  
				if (ChargeType.NoteBased)
					if (BeginDate changed
					or  EndDate changed
					or  Frequency changed
					or  InterestRate changed
					or  RemainingPayments changed
					or  NumberOfPayments changed
					or  CurrentBalance changed
					or  NoteAmount changed
					or  PaymentAmount changed)
						constraint (ActualInvoiceFranchiseCycleChargeRel not exists)
							"CannotChange;SalesEntryExists"//"Cannot change; sales entry exists"  
					if (RemainingPayments 	= 0
					and ChargeToDate		= 0)
						RemainingPayments	= NumberOfPayments
						CurrentBalance		= NoteAmount
						Description			= FranchiseStandardCharge.Description
						if (InterestRate 	= 0)
							InterestRate 	= FranchiseStandardCharge.InterestRate 
					
					
						
				if (Active changed)
					if (!old Active)
						constraint (FranchiseCycleChargeRel not exists)
							"ChargeCannotBeReactivated"//"Charge cannot be reactivated"    
						if (ChargeType.NoteBased)	
							constraint (CurrentBalance > 0)
								"CurrentBalanceMustBeGreaterThan0WhenChangingStatusToActive"

				if (BeginDate changed)





					LocalCycleDate = BeginDate
					include GetNextCycleDate
					
				if (Frequency changed
				and ActualInvoiceFranchiseCycleChargeRel not exists)
					LocalCycleDate = BeginDate
					include GetNextCycleDate
							
		
		UpdateNextCycleDate is an Instance Action
			restricted
			Action Rules
				if (!NoteChargeAndCurrentBalance)	
					LocalCycleDate = NextCycleDate + 1
					include GetNextCycleDate
				if (InitializeSpecialCharges)
					initialize PaymentAmount
		
		UpdateLastActivityDate is an Instance Action
			restricted
			Action Rules
				if (FranchiseContract.LastActivityDate < NextCycleDate)
					invoke Update FranchiseContract
						invoked.LastActivityDate = NextCycleDate

        Delete is a Delete Action
			Action Rules
				constraint (FranchiseCycleChargeRel not exists)
					"CannotDelete;SalesEntryExists"						
				constraint (FranchiseContract.Active)
					"Cannot_\Delete,_\ContractIs_\Inactive"				



		FastUpdate is an Update Action
			restricted
			bypass field rules
				
		
		CopyFromStandardChargeGroup is a Create Action
			restricted
			bypass field rules
			Action Rules
				include AccountBlock
			Exit Rules	
				if (FranchiseContractChargeRel exists)					
        			NextCycleDate = DefaultNextCycleDate 
        		else
        			LocalCycleDate	= BeginDate
        			include GetNextCycleDate
			
		
		PrepaymentRelease is an Instance Action
			restricted
			Parameters
				FranchisePrepayment
				TransactionAmount is an InternationalAmount
			Action Rules
				CurrentBalance -= TransactionAmount     
				ChargeToDate += TransactionAmount
				if (CurrentBalance not entered)
					confirmation required
						"0BalanceChargeWillBeInactivatedOnceReleased;SelectOKToContinue"
					Active = false


		CreateChargePrepayment is an Instance Action
			restricted
			Parameters
				PrmFranchisePrepayment is Date
				PrmTransactionAmount is an InternationalAmount			
				
			Parameter Rules
				PrmFranchisePrepayment
					required
					constraint (BeginDate <= PrmFranchisePrepayment)
						"PrepaymentDateMustBeWithinContractChargeDateRange"
					constraint (EndDate >= PrmFranchisePrepayment)
						"PrepaymentDateMustBeWithinContractChargeDateRange"
						
				PrmTransactionAmount
					required
					
													                    	
			Action Rules
				invoke Create FranchisePrepayment
					invoked.Charge						= FranchiseStandardCharge.Charge
			        invoked.FranchisePrepayment			= PrmFranchisePrepayment
			        invoked.Status  					= 0
        			invoked.TransactionAmount			= PrmTransactionAmount 
					fill in fields from this instance
