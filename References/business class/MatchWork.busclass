MatchWork is a BusinessClass
    owned by ma
    prefix is MtWrk
    








    Ontology
        symbolic key is MatchWork

    Patterns

        disable AuditIndex
        disable Auditing
        disable EffectiveDated


    Persistent Fields

		PayablesInvoice
		PurchaseOrder
		Vendor
		MatchPoint								is Alpha 1
			States
				RuleGroupOne	value is "1"
				RuleGroupTwo	value is "2"
				RuleGroupThree	value is "3"
		ProcessMode								is Alpha 1
			States
				Online			value is "O"
				Batch			value is "B"
				Reconciliation	value is "R"
		DocumentType							is Alpha 1
			States
				Invoice			value is "I"
				Receipt			value is "R"
		MatchTable
		MatchRule
		PoolOption
		OutMatchObjectID						is an ObjId
		OutMatchStatus							is Numeric 3
			States
				NoMatch							value is 0
				MatchedOutOfToleranceReference	value is 1
				Matched							value is 2
				MatchedOutOfToleranceRecon		value is 3
				MatchedInTolerance				value is 4
				MatchedWithChargeback			value is 5
				ApprovedNoReceipt				value is 6
				
		OutTotalTransactionAmount				is an InternationalAmount
		OutTotalTransactionCount				is Numeric 9
		ChargebackObjectID						is an ObjId
		MatchErrorType  						is Numeric size 2  
        MatchRuleType                       	is AlphaUpper size 3
            States
                OneToOne value is "1-1"
                    default label is "One to One"
                OneToAll value is "1-A"
                    default label is "One to All"
                AllToOne value is "A-1"
                    default label is "All to One"
                AllToAll value is "A-A"
                    default label is "All to All"
		MatchRuleResult							is AlphaUpper size 3			
            States
                OneToOne value is "1-1"
                    default label is "One to One"
                OneToAll value is "1-A"
                    default label is "One to All"
                AllToOne value is "A-1"
                    default label is "All to One"
                AllToAll value is "A-A"
                    default label is "All to All"
		CurrencyExchangeSetPoint
        MatchLevel            					is AlphaUpper size 3
            States
                DetailMatch  value is "DM"
                InvoiceMatch value is "IM"
		InPrepaids								is Boolean
		ChargebackTransactionTotalDistribution  is an InternationalAmount  
		TotalAddOnChargeDistributionAmount		is an InternationalAmount	
		TotalMatchDistributionAmount			is an InternationalAmount	
		TotalBaseDistribution						is an InternationalAmount
		ChargebackInvoice						is like PayablesInvoice			
		ReconciliationUpdate					is Boolean				
		ReconciliationChargebackIndicator		is Boolean				
		ReconciliationOverrideDetail			is Boolean
		ReconciliationMatchLevel				is AlphaUpper size 3
            States
                DetailMatch  value is "DM"
                InvoiceMatch value is "IM"
		Difference3Amount						is an InternationalCost	
		ReconciliationInvoiceMatchedAmount  	is an InternationalAmount 		
		ReconciliationInvoiceAddOnCharge 		is an InternationalAmount 		
		ReconciliationInvoiceQuantity  			is a Quantity					

		ReconciliationReceiptMatchedAmount		is an InternationalAmount 		
		ReconciliationReceiptAddOnCharge 		is an InternationalAmount 		
		ReconciliationReceiptQuantity  			is a Quantity					

		ReconciliationServiceTotal				is an InternationalAmount 		
		ReconciliationServiceAddOnCharge 		is an InternationalAmount 		
		ReconciliationServiceQuantity 			is a Quantity					
		DetailDifference1Amount					is an InternationalCost
		InvoiceDetailKeyed						is Boolean						
		InvoiceAddOnChargeKeyed					is Boolean						
		WithPreviousDetailMatch					is Boolean
		MatchSub1								is Numeric 3					
		VerifyMatchMessage						is Alpha 200
 		LinkedAutoMatchResult					is like AutoMatchResult
		
	Transient Fields
		InVbReconciliation						is Boolean				
		ReconciliationReasonCode				is like ProcurementReasonCode
		SkipAllToAll							is Boolean
		OverrideDetail							is Boolean
		OverrideAOCDetail						is Boolean
		
		InReceiptNumber							is like PurchaseOrderReceipt  
		InPayVendor								is like Vendor
		InRemitToCode							is like VendorLocation
		InPurchaseFromLocation					is like VendorLocation
		ReconciliationHoldCode					is like PayablesHoldCode

		TermsCalculation														

		TransientTermsCode						is a TermsCode		

		InvoiceCurrencyExchangeRate				is like Rate			

		FromInterface							is Boolean
		ToleranceDistributions					is Boolean
		TransientSumDetails						is Boolean	
		PerformCreateDetailsInSetAction			is Boolean
		BypassPurge								is Boolean
		BypassBuildWorkFileConstraints			is Boolean
		BypassValidateMatchInvoiceBalance		is Boolean
		BypassEAMConstraint						is Boolean
		
	Context Fields
		MatchReconQueue
		
	Local Fields
		AccountingEntity

		ChargebackInvoiceView					is a PayablesInvoice view
		NewDistribution							is a PayablesInvoiceDistribution view
		NewInvoiceDetail						is a PayablesInvoiceDetail view
		NewInvoiceAddOnCharge					is a PayablesInvoiceAddOnCharge view

		CurrentPayablesInvoice					is like PayablesInvoice
		CurrentInvoiceDetail					is like PayablesInvoiceDetail
		CurrentPurchaseOrder					is like PurchaseOrder
		CurrentPurchaseOrderLine				is like PurchaseOrderLine
		CurrentReceipt							is like PurchaseOrderReceipt
		CurrentReceiptLine						is like PurchaseOrderReceiptLine
		CurrentAddOnCharge						is like AddOnCharge
		SpecificReceipt							is like PurchaseOrderReceipt
		LocalItem								is an Item
		LocalItemType							is like ItemType
		LocalMatchDetailKey						is like MatchDetailKey
		LocalLocation							is like Location
		LocalMatchWorkInvoiceAddOnCharge		is like PayablesInvoiceAddOnCharge
		LocalPurchaseOrderReceipt				is like PurchaseOrderReceipt
		CurrentContract							is like Contract
		CurrentContractLine						is like ContractLine

		LocalOriginalInvoice					is like PayablesInvoice
		LocalOriginalInvoiceDetail				is like PayablesInvoiceDetail
		OriginalInvoiceTotalMNR 				is like Quantity
		WorkEnteredQuantity						is like Quantity
		AbsoluteUnitCost						is like InternationalCost
		CostDifference							is like InternationalCost
		CostBasis								is like InternationalCost
		LocalQuantity							is like Quantity
		QuantityDifference						is like Quantity







		LocalPayablesInvoice					is like PayablesInvoice

		WorkDistributionGroup					is a MatchWorkDistributionGroup
		BypassActiveCodeBlockEdit

		LocalMatchRuleToleranceGroup			is a MatchRuleToleranceGroup
		LocalMatchMessageToleranceGroup			is a MatchMessageToleranceGroup
		DistributionProcessLevel				is like PayablesProcessLevel
		LocalDefaultAccount						is a FinanceCodeBlock
		WorkToleranceAccount					is a FinanceCodeBlock
		LocalStatus								is Numeric size 1
		
		LocalDoRetainageDistribution			is Boolean
		LocalRetainageTaxableAmount				is an InternationalAmount
		LocalRetainageTranAmount				is an InternationalAmount
		LocalRetainageUnitAmount				is an InternationalAmount
				
		LocalTotalDistributionAmount			is an InternationalAmount
		LocalAccruedTaxAmount					is an InternationalAmount

		BuildWorkFileError						is Boolean
			
		Sub1									is Numeric 3
		I1										is Numeric 3
		I4										is Numeric 3
		I9										is Numeric 3
		LocalCounter 							is Numeric size 3			
		RuleCount								is Numeric 3
		ReceiptLineCount						is Numeric 7
		ReceiptLineAOCCount						is Numeric 7
		WorkLinesRead							is Numeric 7
		NoReceipts								is Boolean
		HasReceipt								is Boolean
		CompletionMessage						is Alpha 200
        LocalRecordSource                		is like RecSource


		CalculateTax												
		LocalCalculateTaxExecuted				is Alpha 1				
		CalculateTaxAmount
		LocalCalculateTaxAmount					is Boolean
		MatchInvoiceErrorMessages
		EditSystemCode													
		LocalEditSystemCode						is AlphaUpper 1				
		UOMCalculation
		LocalTermsCalTrigger					is Alpha size 1
		CalculateTerms
		CalculateBestTerms
		GetRetainage
		LocalGetRetainage						is Alpha 1

		LastCompany								is like Company
		LastDueDate								is Date
		LastPayablesInvoice						is like PayablesInvoice
		LastPurchaseOrder						is like PurchaseOrder
		LastLocation							is like Location

		OriginalRuleType						is AlphaUpper 3
		Done									is Boolean
		Process									is Boolean
		NextSentence							is Boolean

		MatchErrorTable
		MatchTestOK								is Boolean
		WithinTolerance							is Boolean
		EditMode								is Boolean

		ExtendedAndQuantityToleranceExists		is Boolean
		OneToAllDetailMatchRuleExists			is Boolean
		DetailMatch								is Boolean
		OneToAllRuleExists						is Boolean
		AllToAllRuleExists						is Boolean
		AllToOneRuleExists						is Boolean
		InvoiceMatchAllExists					is Boolean
		WithInvoiceMatch						is Boolean
		SkipInvoiceMatch						is Boolean

		Continue								is Boolean
		ERS										is Boolean
		DistributionByAmount					is Boolean						
		UseReceiptNumber						is Boolean
		ReceiptHasIncompleteInspection			is Boolean
		DetailRecord							is Boolean
		Skip									is Boolean
		RulesOK									is Boolean
		TaxOutOfBalance							is Boolean
		NoReceiptMessage						is Boolean
		AddOnToleranceMessage					is Boolean
		ExitLoop								is Boolean
		OverQuantityRestricted					is Boolean 


		Msg1									is Alpha 150
		Msg2									is Alpha 150


		MNRDistrib								is Boolean						
		TaxTolerance							is Boolean						
		PayablesChargebackIndicator				is Boolean						
		Approved 								is AlphaUpper 1	 				
            States
                Yes                  value is "Y"
                No                   value is "N"
                Disapproved          value is "D"
                MessageExists        value is "M"
                MessagePendingAction value is "P"
                MatchPrepayment      value is "R"

		PercentToleranceAmount					is an InternationalCost
		DifferenceWorkAmount					is an InternationalCost
		Difference1Amount						is an InternationalCost
		Difference1Absolute						is an InternationalCost
		PercentToleranceAmount2					is an InternationalCost
		Difference2WorkAmount					is an InternationalCost
		Difference2Amount						is an InternationalCost
		Difference2Absolute						is an InternationalCost
		FESCounter								is Numeric 4
		FESFundingSourceTable
		LocalPercent							is Percent 8.5
			precision is 4
		MatapiwrkPercentTotal					is Percent 8.5	
			precision is 4




		WorkMatchAddOnCharge 					is an InternationalAmount
		WorkTotalAddOnCharge					is an InternationalAmount
		WorkOpenToMatchQuantity					is like Quantity
		WorkUnmatchedQuantity					is like Quantity
		WorkMatchAmount							is an InternationalCost
		WorkUnitCost							is like UnitCost
		WorkAmount1								is an InternationalCost
		WorkAmount2								is an InternationalCost
		WorkMatchUnitCost						is an InternationalCost

 		InvoiceMatchedAmount					is an InternationalAmount
		InvoiceMatchedAddOnCharge				is an InternationalAmount
		InvoiceMatchedQuantity					is like Quantity
		InvoiceServiceAmount					is an InternationalAmount

		ReceiptMatchedAmount					is an InternationalAmount
		ReceiptMatchedService					is an InternationalAmount
		ReceiptMatchedAddOnCharge				is an InternationalAmount
		ReceiptMatchedQuantity					is like Quantity
		
		ServiceMatchedAmount					is an InternationalAmount

		
		MatchedFromRoutine						is Alpha 4

		DetailMatchAmount						is an InternationalAmount
		DetailMatchService						is an InternationalAmount
		DetailMatchQuantity						is like Quantity
		DetailMatchAddOnCharge					is an InternationalAmount
		DetailMatchAllToOneMatchAmount			is an InternationalAmount
		DetailMatchAllToOnePreviousMatchAmount 	is an InternationalAmount
		DetailMatchAllToOneMatchQuantity		is like Quantity
		DetailMatchAllToOneAddOnChargeAmount	is an InternationalAmount
		DetailMatchAllToOneAddOnChargeQuantity 	is like Quantity
		DetailMatchAddonCharge					is an InternationalAmount

		TotalDetailRecords 						is Numeric 9					
		TotalAocRecords							is Numeric 9					

		TotalInvoiceDetailAmount				is an InternationalCost
		TotalInvoiceMatchAmount					is an InternationalCost
		TotalDetailsMatchAmount					is an InternationalCost
		
		TotalReceiptDetailAddOnCharge			is an InternationalCost  	
		TotalReceiptLineDetailAmount			is an InternationalCost  	
		TotalReceiptLineDetailService			is an InternationalCost  	
		TotalReceiptLineDetailQuantity			is like Quantity			  	

		TotalReceiptLineQuantity				is like Quantity				
		TotalReceiptQuantity					is like Quantity				

   		AccumulatedChargebackAmount				is an InternationalCost

		SelectedInvoiceDetailMatchAmount		is an InternationalAmount		
		SelectedInvoiceDetailMatchCount			is Numeric 9
		SelectedInvoiceDetailMatchService		is an InternationalAmount		
		SelectedInvoiceAddOnChargeMatchAmount 	is an InternationalAmount		
		SelectedInvoiceAddOnChargeMatchCount	is Numeric 9
		SelectedInvoiceAddOnChargeMatchService 	is an InternationalAmount		

		MatchedNotReceivedQuantity				is an InternationalAmount
		ReceivedAmountToMatch					is an InternationalAmount
		ServiceToleranceDifference				is an InternationalCost

		LocalRoundingPercentAmount				is like InternationalAmount
		RoundingDifferenceWithinTolerance   	is Boolean

		TotalWorkfileAmount						is an InternationalAmount
		TotalWorkfileAddOnCharge				is an InternationalAmount
		TotalWorkfileQuantity					is like Quantity
		TotalWorkfileCount						is Numeric 9

		TotalSelectedInvoiceDetails				is Numeric 9  					
		WriteoffAmount							is an InternationalAmount

		MatmadwrkCount							is Numeric 7

        MatporwrkCount							is Numeric 7
        MatporwrkAmount							is an InternationalAmount
        MatporwrkAddOnCharge					is an InternationalAmount
        MatporwrkQuantity						is like Quantity

        MatprlwrkCount							is Numeric 7
        MatprlwrkServiceCount					is Numeric 3
        MatprlwrkServiceAmount					is Numeric 3
        MatprlwrkServiceAddOnCharge				is an InternationalAmount
        MatprlwrkServiceQuantity				is like Quantity
        MatprlwrkDropshipCount					is Numeric 3
        MatprlwrkDropshipAmount					is an InternationalAmount
        MatprlwrkDropshipAddOnCharge			is an InternationalAmount
        MatprlwrkDropshipQuantity				is like Quantity

        MatrecwrkCount							is Numeric 7
        MatrecwrkAddOnCharge					is an InternationalAmount

		ApMatchAmt 								is an InternationalAmount  

		LocalTaxCode							is a TaxCode
		LocalTaxUsageCode						is like TaxUsageCode
		LocalProductTaxCategory					is like ProductTaxCategory

		WorkEnteredUnitCost						is like UnitCost
		LocalBuyUOMMatchedQuantity				is like Quantity
		LocalTaxAmount							is an InternationalAmount





		ChargebackCreated						is Boolean





			      
		LocalRevisedDueDate						is Date
		LocalDiscountDate						is Date
		LocalBestTermsCode						is like TermsCode
		LastTermsCode							is like TermsCode
		BestReceiptDate							is Date						
		LocalDiscountPercent					is like Percent
		LocalDiscountAmount						is an InternationalAmount
		LocalReasonCode							is like ProcurementReasonCode
		LocalChargebackReference				is like Reference

		PowsReceiptLineCountTotal				is Numeric 7 				
		PowsReceiptLineCountStatus5 			is Numeric 7				
		PowsReceiptLineCountStatus9				is Numeric 7				

		LineChargeback							is Boolean  				



		LocalMatchSequence						is a MatchSequence  		
		









		ServiceLineChargebackQuantity			is a Quantity				
		ServiceLineChargebackUnitCost			is a UnitCost				





		DistributionDetailMatchAmount			is an InternationalAmount	
		SkipPostings							is Boolean					
		TotalDistributionAmount					is an InternationalAmount	
			
        WorkReceiptConversionRate    			is an EnteredCurrencyConversionRate  

		ChargebackDetailSequenceNumber			is a SequenceNumber			
				
		DetailsMatchedQuantity              	is a Quantity				
		DetailsMatchUnitCost                	is a UnitCost				
		DetailsVBuyMatchedQuantity          	is a Quantity				
		DetailsItem								is like Item				
		DetailsMatchDetailKey					is like MatchDetailKey
		DetailsItemType							is like ItemType			
		DetailsLocation							is like Location			
		DetailsAddOnCharge						is like AddOnCharge			
		DetailsInvoice							is like PayablesInvoice		
		DetailsInvoiceType						is like InvoiceType			
		DetailsTaxCode							is like TaxCode				
		DetailsRecordSource						is a RecSource				
        DetailsBuyUOMMatchedQuantity       		is a Quantity				
        DetailsEnteredUnitCost					is a UnitCost				
		DetailsLandedAddOnCharge				is Boolean					
		DetailsProductTaxCategory				is like ProductTaxCategory	
		DetailsTotalDistributionAmount			is an InternationalAmount
		
		DistributionUnitCost					is a UnitCost				



		WorkVarianceQuantity					is a Quantity				

		AmMatchedQuantity						is like Quantity  			
		WorkAccrualCode							is like PayablesAccrualCode	
		

					
		WorkPostingSwitch						is Numeric 1				
        	States
        		TaxGoods			value is 1
        		TaxVariance			value is 2
        		TaxTolerance		value is 3
        		MatchNotReceived	value is 4
        		Writeoff			value is 5
        		TaxWriteoff			value is 6

		MtxTotalTaxAmt							is an InternationalAmount	
		MtxPrevMatchQty							is a Quantity				
		MtxMatchedQuantity						is a Quantity
		MtxMatchUnitCost						is a UnitCost
		MtxTaxableAmount						is an InternationalAmount

		Difference4Amount 						is an InternationalCost	
		TaxDifference 							is an InternationalCost	
		PurchaseOrderInvoiceTax 				is an InternationalAmount	
		ChargebackTotalTaxDistribution 			is an InternationalAmount	
		ChargebackTransactionTaxableAmount 		is an InternationalAmount	
        
		MessageQuantityDifference				is like Quantity			
		MessageUnitCostDifference				is like UnitCost			
		MessageExtendedDifference				is an InternationalAmount	
		MessageOverQuantityPercentDifference	is like Quantity				
		MessageUnderQuantityPercentDifference	is like Quantity				
		MessageOverUnitPercentDifference		is like Percent				
		MessageUnderUnitPercentDifference		is like Percent				
		MessageOverTotalPercentDifference		is like Percent				
		MessageOverCtPercentDifference			is like Percent				
		MessageUnmatchedQuantity				is like Quantity			
		MessageReasonCode 						is like ReasonCode  		
        MessageType                 			is AlphaUpper size 2		
            States
                Cost          value is "C"
                Quantity      value is "Q"
                Item          value is "I"
                NoReceiptLine value is "NR"
        MessageSubType              			is AlphaUpper size 1		
            States
                ItemDifference      value is blank
                InvoiceOverReceipt  value is "O"
                InvoiceUnderReceipt value is "U"
		WorkPercent								is a Percent				

		SaveUnmatchedQuantity					is a Quantity				
		FirstDistQuantity						is a Quantity				
		PreviousQuantity						is a Quantity				
		DetailDistAmount						is a Quantity				

		RemainingDistAmount						is an InternationalAmount	
		WorkDistQuantity 						is a Quantity  				

		LocalRetainagePercent 					is a Pct 					



		LocalUnitOfMeasure						is like UnitOfMeasure

		PotxwsAddOnCharge						is like AddOnCharge

		LocalTotalNewTaxAmount					is an InternationalAmount	
		LocalTotalAddOnChargeAmount				is an InternationalAmount	
				
		TaxError								is Boolean					
		TaxErrorMessage							is Alpha 100			
		PerformedFrom							is Numeric 1				
			States
				Match			value is 1
				BatchRelease	value is 2
				POADI			value is 3
				MA61			value is 4
				Contract    	value is 5

		TotalTax3dp								is an InternationalAmount	
		DetailsTax3dp							is an InternationalAmount	
		TotalGoods								is an InternationalAmount	
		CalcTaxRate								is a Rate					
		CalcAccrual								is Boolean					
		SavePurchaseOrder						is like PurchaseOrder		
		UsePODate								is Boolean					
		TemporaryTaxType						is a TaxType				

		LocalSumDistributionAmount				is an InternationalAmount
		LocalSumTaxableAmount					is an InternationalAmount
		LocalSumUnitAmount						is an InternationalAmount
		LocalSumMatchedQuantity					is like Quantity
		LocalSummaryCount						is Numeric 9

		WorkTotalInvoiceMatchAmount				is an InternationalAmount	
		WorkTotalInvoiceMatchAddOnCharge		is an InternationalAmount	
		WorkTotalInvoiceHashQuantity			is like Quantity			

		LocalFEG								is like FinanceEnterpriseGroup	
		LocalScenario							is like Scenario 
		LocalBudgetTemplate						is like BudgetTemplate 
		LocalBudgetGroup 						is like BudgetGroup 
		LocalGeneralLedgerCalendarPeriod 		is like GeneralLedgerCalendarPeriod 
		LocalGeneralLedgerCalendarYear 			is like GeneralLedgerCalendarYear 

		NoBudgetChanges 						is Boolean
		DetailFound								is Boolean
		TaxAmountFound							is Boolean




		SumOpenPurchaseAmount					is an InternationalAmount


   		MatchByRefRule					is Boolean  


		DistribCount					is Numeric size 9

		Start							is TimeStamp

	Derived Fields
		LeftPar is a MessageField
        	restricted
			"_("
		RightPar is a MessageField
        	restricted
			")"
		SingleSpace is a MessageField

			restricted
			"_"

		WorkInReconMsg is a MessageField
			restricted
			";_work_in_Match_Reconciliation"

		NumberOfInvoices is a DerivedField
			type is Numeric 5
			restricted
			return (instance count of MatchWorkInvoiceRel)
			
		NumberOfInvoiceDetails is a DerivedField
			type is Numeric 5
			restricted
			return (instance count of MatchWorkInvoiceDetailRel)
			
		NumberOfInvoicesWithDetails is a DerivedField
			type is Numeric 5
			restricted
			return (instance count of MatchWorkInvoiceWithDetailsRel)

		NumberOfReceipts is a DerivedField
			type is Numeric 5
			restricted
			return (instance count of MatchWorkReceiptRel)

		NumberOfServiceReceiptLines is a DerivedField
			type is Numeric 5
			restricted
			return (instance count of MatchWorkServiceReceiptLineRel)

		NumberOfDropshipReceiptLines is a DerivedField
			type is Numeric 5
			restricted
			return (instance count of MatchWorkDropshipReceiptLineRel)

		ReceiptInvoiceLinkMatchedQuantity is a DerivedField
			type is like InternationalAmount
			restricted
			return (sum PurchaseOrderReceiptInvoiceLinkMatchRel.MatchedQuantity)
			
		ReceiptInvoiceLinkMatchedAmount is a DerivedField
			type is like InternationalAmount
			restricted
			return (sum PurchaseOrderReceiptInvoiceLinkMatchRel.MatchAmount)
			
		LastCostUpdate is a DerivedField
			type is like InternationalAmount
			restricted
			return (first PurchaseOrderReceiptInvoiceLinkLastCostRel.PoCostUpd)
			
		NumberOfLinesForSetActionConfig		is a DerivedField
			type is Numeric 9
			return config.match_invoice_number_of_lines_set_action	        

		NumberOfLinesForSetAction		is a DerivedField
			type is Numeric 9
			if (NumberOfLinesForSetActionConfig not entered)
				return 20
			else
				return NumberOfLinesForSetActionConfig

	Field Rules
		Company
			required
		Vendor
			required
			force default to PayablesInvoice.Vendor
			
		InPrepaids
			if (PayablesInvoice.InvoiceType.MatchPrepayment)
				InPrepaids = true			

		PayablesInvoice


			
			constraint (!PayablesInvoice.MatchStatus.POCostMessagesExist)
				"<MatchInvoiceErrorMessages.POCostMessagesExistMsg>"

			constraint (PayablesInvoice.MatchStatus.Unmatched)
				"CannotMatch;InvoiceHasAlreadyBeenMatched"

			constraint (PayablesInvoice.Status.Unreleased
			or          PayablesInvoice.Status.Released
			or			PayablesInvoice.Status.Approved)
				"CannotMatch;InvoiceNotInUnreleased,ReleasedOrApprovedStatus"





			if  (PayablesInvoice.CostComponentMatch
			and  PayablesInvoice.MatchProcessType.AOCOnly)
				constraint  (!ReconciliationMatchLevel.InvoiceMatch)
					"CannotPerformInvoiceMatchForAOCOnlyInvoice"

			constraint (!PayablesInvoice.MatchProcessType.Expense)
				"CannotPerformMatchOnExpenseInvoice"

			constraint (PayablesInvoice.MatchProcessType entered)
				"MatchProcessTypeMustBeEnteredToPerformMatch"
			
			if ((PayablesInvoice.TaxEntityUsesSabrix
			or   PayablesInvoice.CallVertexByDocument)
			and BypassValidateMatchInvoiceBalance)
				NextSentence = true
			else
			if (!ProcessMode.Reconciliation)

				invoke ValidateMatchInvoiceBalance PayablesInvoice

		PurchaseOrder
			if (PayablesInvoice.DerivedNumberOfPurchaseOrders = 1)
				PurchaseOrder = PayablesInvoice.first MatchPurchaseOrderInvoicesRel.PurchaseOrder

									
		MatchTable
			required
			if (DocumentType.Invoice)
				default to PayablesInvoice.MatchTable
			default to Vendor.MatchTable
			default to Company.MatchTable


		MatchPoint
			default to "1"
			
		MatchRule

			if (DocumentType.Invoice)
				default to PayablesInvoice.RuleGroup
				
			if ((PayablesInvoice.MatchProcessType.Service   
			or  PayablesInvoice.MatchProcessType.ServiceContract)
			and Company.ServiceMessageMatchRule entered)   
			    default to Company.ServiceMessageMatchRule  
			else				                            
			if (MatchPoint.RuleGroupOne)
				default to MatchTable.RuleGroup1
			else
			if (MatchPoint.RuleGroupTwo)
				default to MatchTable.RuleGroup2
			else
			if (MatchPoint.RuleGroupThree)
				default to MatchTable.RuleGroup3



		PoolOption

			if (!Vendor.PoolOption.UseCompany)
				default to Vendor.PoolOption
			default to Company.PoolOption
			required
				"VendorPoolOptionRequired"  
			
		DocumentType
			default to "I"

		ProcessMode
			default to "O"
			
        ReconciliationMatchLevel
        	default to "DM"

		ReconciliationChargebackIndicator
			if (!ReconciliationUpdate)
				ReconciliationChargebackIndicator = false
				
		TermsCalculation
			default to Vendor.TermsCalculation
			default to PayablesCompanyRel.TermsCalculation

		CurrencyExchangeSetPoint
			default to PurchaseOrder.CurrencyExchangeSetPoint
			default to first PayablesInvoice.MatchPurchaseOrderInvoicesRel.PurchaseOrder.CurrencyExchangeSetPoint
																
		InvoiceCurrencyExchangeRate
			default to PayablesInvoice.InvoiceAmount.FunctionalAmount.EnteredCurrencyRate
			default to 1

	Conditions		
		MultiplePurchaseOrders
			restricted
			when (PayablesInvoice.DerivedNumberOfPurchaseOrders > 1)

		HasGoods
			restricted
			when  (first MatchWorkInvoiceDetailGoodsRel exists)

		HasServiceLines
			restricted
			when  (first ServiceLinesRel exists
			or     first ServiceLinesAOCRel exists)

		MemoInvoice
			restricted
			when ((PayablesInvoice.InvoiceType.DebitMemo
			or     PayablesInvoice.InvoiceType.CreditMemo)
			and   !PayablesInvoice.MatchProcessType.AOCOnly
			and   !PayablesInvoice.MatchProcessType.Expense)

		ProcessByMatchReference
			when (Vendor.RequireMatchReference
			and   PayablesInvoice.MatchReferenceNumber entered)

		BypassBudgetEditIfNoDifferences
			when (Company.BypassBudgetEditIfNoDifferences)   

		CreateMatchReconMessage		
			when (Company.CreateReconMessageForLines
			and MatchReconQueue.DerivedWithDiscrepancy
			and MatchReconQueue.ChargebackType.Option2) 
	Relations
        PayablesCompanyRel
            one-to-one relation to PayablesCompany
            Field Mapping uses symbolic key
                related.Company = Company

		FinanceResourceActorRel
			one-to-one relation to FinanceResource
			Field Mapping uses symbolic key
				related.HROrganization		= actor.agent(Employee).HROrganization
				related.FinanceResource		= actor.agent(Employee).Employee

      	TaxEntityRel				 
            one-to-one relation to TaxEntity
            Field Mapping uses symbolic key
				related.FinanceEnterpriseGroup		= Company.FinanceEnterpriseGroup
                related.TaxEntity 					= Company.AccountingEntity
                
		TaxConfigurationRel		
        	one-to-one relation to TaxConfiguration
        	Field Mapping uses symbolic key
				related.TaxConfiguration			= Company.FinanceEnterpriseGroup
	   	
        InventoryCompanyRel
            one-to-one relation to InventoryCompany
            Field Mapping uses symbolic key
                related.Company = Company

		DistributionProcessLevelRel
			one-to-one relation to PayablesProcessLevel
            Field Mapping uses symbolic key
                related.Company 					= Company
				related.PayablesProcessLevel		= DistributionProcessLevel

		GeneralLedgerCompanyRel			
				one-to-one relation to GeneralLedgerCompany
				Field Mapping uses symbolic key
					related.Company		= Company
				
		BudgetTemplateGroupTotalRel
			one-to-many relation to BudgetTemplateGroupTotal
			Field Mapping uses ByBudgetGroup
				related.FinanceEnterpriseGroup                    = GeneralLedgerCompanyRel.FinanceEnterpriseGroup
				related.BudgetTemplateGroupTotal.BudgetEditGroup  = PayablesInvoice.UniqueID			
		MatchWorkInvoiceRel
			one-to-many relation to MatchWorkInvoice
			Field Mapping uses symbolic key
                related.Company                 	= Company
				related.MatchWork					= MatchWork

		ThisMatchWorkInvoiceRel
			one-to-one relation to MatchWorkInvoice
			Field Mapping uses symbolic key
                related.Company                 	= Company
				related.MatchWork					= MatchWork
				related.PayablesInvoice				= PayablesInvoice

		MatchWorkInvoiceWithDetailsRel
			one-to-many relation to MatchWorkInvoice
			Field Mapping uses symbolic key
                related.Company                 	= Company
				related.MatchWork					= MatchWork
			Instance Selection
				where (related.HasDetails)

		MatchWorkReceiptRel
			one-to-many relation to MatchWorkReceipt
			Field Mapping uses symbolic key
                related.Company                 	= Company
				related.MatchWork					= MatchWork

		MatchWorkReceiptForInvoiceRel
			one-to-many relation to MatchWorkReceipt
			Field Mapping uses symbolic key
                related.Company                 	= Company
				related.MatchWork					= MatchWork
			Instance Selection
				where (related.PayablesInvoice		= PayablesInvoice)

		LocalMatchReceiptWorkRel
			one-to-one relation to MatchWorkReceipt
			Field Mapping uses symbolic key
                related.Company                 	= Company
				related.MatchWork					= MatchWork
				related.PurchaseOrderReceipt		= LocalPurchaseOrderReceipt
				
		PseudoMatchReceiptWorkRel
			one-to-one relation to MatchWorkReceipt
			Field Mapping uses symbolic key
                related.Company                 	= Company
                related.MatchWork					= MatchWork
				related.PurchaseOrderReceipt		= 0
		
		SelectedInvoiceDetailRel
			one-to-many relation to MatchWorkInvoiceDetail
			Field Mapping uses ByVendorMatchDetailKey
				related.MatchWork					= MatchWork
				related.Company						= Company
				related.Vendor						= Vendor
			Instance Selection
				where (related.Selected)

		SelectedReceiptLineRel
			one-to-many relation to MatchWorkReceiptLine
			Field Mapping uses ByVendorMatchDetailKey
				related.MatchWork					= MatchWork
				related.Company						= Company
				related.Vendor						= Vendor
			Instance Selection
				where (related.Selected)

		MatchWorkInvoiceDetailRel
			one-to-many relation to MatchWorkInvoiceDetail
			Field Mapping uses ByVendorMatchDetailKey
				related.MatchWork					= MatchWork
				related.Company						= Company
				related.Vendor						= Vendor

		CurrentWorkInvoiceDetailRel
			one-to-many relation to MatchWorkInvoiceDetail
			Field Mapping uses ByVendorMatchDetailKey
				related.MatchWork					= MatchWork
				related.Company						= Company
				related.Vendor						= Vendor
			Instance Selection
				where (related.PayablesInvoice		= CurrentPayablesInvoice)				

		MatchWorkInvoiceDetailNoReceiptRel
			one-to-many relation to MatchWorkInvoiceDetail
			Field Mapping uses ByVendorMatchDetailKey
				related.MatchWork					= MatchWork
				related.Company						= Company
				related.Vendor						= Vendor
			Instance Selection
				where (!related.MatchToReceipt)

		MatchWorkInvoiceDetailReceiptRel
			one-to-many relation to MatchWorkInvoiceDetail
			Field Mapping uses ByVendorMatchDetailKey
				related.MatchWork					= MatchWork
				related.Company						= Company
				related.Vendor						= Vendor
			Instance Selection
				where (related.MatchToReceipt)

		MatchWorkInvoiceAddOnChargeRel
			one-to-many relation to MatchWorkInvoiceAddOnCharge
			Field Mapping uses ByVendorMatchDetailKey
				related.MatchWork					= MatchWork
				related.Company						= Company
				related.Vendor						= Vendor

		CurrentWorkInvoiceAddOnChargeRel
			one-to-many relation to MatchWorkInvoiceAddOnCharge
			Field Mapping uses ByVendorMatchDetailKey
				related.MatchWork					= MatchWork
				related.Company						= Company
				related.Vendor						= Vendor
			Instance Selection
				where (related.PayablesInvoice		= CurrentPayablesInvoice)				

		MatchWorkInvoiceAddOnChargeNoReceiptRel
			one-to-many relation to MatchWorkInvoiceAddOnCharge
			Field Mapping uses ByVendorMatchDetailKey
				related.MatchWork					= MatchWork
				related.Company						= Company
				related.Vendor						= Vendor
			Instance Selection
				where (!related.MatchToReceipt)

		MatchWorkInvoiceAddOnChargeReceiptRel
			one-to-many relation to MatchWorkInvoiceAddOnCharge
			Field Mapping uses ByVendorMatchDetailKey
				related.MatchWork					= MatchWork
				related.Company						= Company
				related.Vendor						= Vendor
			Instance Selection
				where (related.MatchToReceipt)

		MatchWorkReceiptLineRel
			one-to-many relation to MatchWorkReceiptLine
			Field Mapping uses ByVendorMatchDetailKey
				related.MatchWork					= MatchWork
				related.Company						= Company
				related.Vendor						= Vendor

		MatchWorkReceiptLineAOCRel
			one-to-many relation to MatchWorkReceiptLineAOC
			Field Mapping uses ByVendorMatchDetailKey
				related.MatchWork					= MatchWork
				related.Company						= Company
				related.Vendor						= Vendor

		MatchWorkServiceReceiptLineRel
			one-to-many relation to MatchWorkReceiptLine
			Field Mapping uses ByVendorMatchDetailKey
				related.MatchWork					= MatchWork
				related.Company						= Company
				related.Vendor						= Vendor
			Instance Selection
				where (related.ItemType.Service)

		MatchWorkDropshipReceiptLineRel
			one-to-many relation to MatchWorkReceiptLine
			Field Mapping uses ByVendorMatchDetailKey
				related.MatchWork					= MatchWork
				related.Company						= Company
				related.Vendor						= Vendor
			Instance Selection
				where (related.PurchaseOrder.IsDropship)

        MatchWorkInvoiceDetailGoodsRel
            one-to-many relation to MatchWorkInvoiceDetail
            Field Mapping uses ByVendorMatchDetailKey
				related.MatchWork					= MatchWork
                related.Company                 	= Company
                related.Vendor                  	= Vendor
            Instance Selection
				where  (related.PayablesInvoice		= PayablesInvoice
				and    !related.ItemType.Service)

		PurchaseOrderItemRel
            one-to-many relation to PurchaseOrderLine
            Field Mapping uses ByMatchDetailKey
                related.Company                 	= Company
                related.PurchaseOrder          	 	= CurrentPurchaseOrder
                related.ItemType					= LocalItemType
                related.MatchDetailKey				= LocalMatchDetailKey
		
        ServiceLinesRel
            one-to-many relation to MatchWorkInvoiceDetail
            Field Mapping uses ByVendorMatchDetailKey
				related.MatchWork					= MatchWork
                related.Company                 	= Company
                related.Vendor                  	= Vendor
            Instance Selection
				where  (related.PayablesInvoice		= PayablesInvoice
				and     related.ItemType.Service)

        ServiceLinesAOCRel
            one-to-many relation to MatchWorkInvoiceAddOnCharge
            Field Mapping uses ByVendorMatchDetailKey
				related.MatchWork					= MatchWork
                related.Company                 	= Company
                related.Vendor                  	= Vendor
            Instance Selection
				where  (related.PayablesInvoice		= PayablesInvoice
				and     related.ItemType.Service)

        InventoryRel
            one-to-many relation to MatchWorkInvoiceDetail
            Field Mapping uses ByVendorMatchDetailKey
				related.MatchWork					= MatchWork
                related.Company                 	= Company
                related.Vendor                 	 	= Vendor
            Instance Selection
				where  (related.PayablesInvoice		= PayablesInvoice
				and    !related.ItemType.Inventoried)

		PurchaseOrderReceiptInvoiceLinkMatchRel
			one-to-many relation to PurchaseOrderReceiptInvoiceLink
			Field Mapping uses symbolic key
                related.Company                 											= Company
			Instance Selection
                where (related.PurchaseOrderReceiptInvoiceLink.PurchaseOrderReceipt			= CurrentReceipt
                and    related.PurchaseOrderReceiptInvoiceLink.PurchaseOrderReceiptLine    	= CurrentReceiptLine
				and    related.Type															= "MA"
				and    related.Status														= 1
				and    related.PurchaseOrderReceiptInvoiceLink.AddOnCharge					= CurrentAddOnCharge)

		ReceiptInvoiceLinkNoAddOnChargeRel
			one-to-many relation to PurchaseOrderReceiptInvoiceLink
			Field Mapping uses symbolic key
                related.Company                 											= Company
			Instance Selection
                where (related.PurchaseOrderReceiptInvoiceLink.PurchaseOrderReceipt			= CurrentReceipt
                and    related.PurchaseOrderReceiptInvoiceLink.PurchaseOrderReceiptLine    	= CurrentReceiptLine
				and    related.PurchaseOrderReceiptInvoiceLink.AddOnCharge 					= blank
				and    !related.Status.Cancelled)

		PurchaseOrderReceiptInvoiceLinkLastCostRel
			one-to-many relation to PurchaseOrderReceiptInvoiceLink
			Field Mapping uses Set3
                related.Company                 											= Company
			Instance Selection
                where (related.PurchaseOrderReceiptInvoiceLink.PurchaseOrder				= CurrentPurchaseOrder
                and    related.PurchaseOrderLine	    									= CurrentPurchaseOrderLine
				and    related.Status														= 1
				and   (related.Type															= "PO"
				or     related.Type															= "CS"))

		PurchaseOrderReceiptInvoiceLinkLastSequenceRel
			one-to-many relation to PurchaseOrderReceiptInvoiceLink
			Field Mapping uses Set4
                related.Company                 											= Company
                related.PurchaseOrderReceiptInvoiceLink.MatchObjectID						= OutMatchObjectID

		PurchaseOrderReceiptVendorRel
			one-to-many relation to PurchaseOrderReceipt
			Field Mapping uses Set9
                related.Company             		= Company
                related.Vendor						= Vendor
            Instance Selection
            	where (related.ReceiptAmount > related.MatchedAmount  
				or     related.ReceiptAmount not entered)

		PurchaseOrderReceiptMatchReferenceRel
			one-to-many relation to PurchaseOrderReceipt
			Field Mapping uses Set9
                related.Company             		= Company
                related.Vendor						= Vendor
            Instance Selection
            	where (related.MatchReferenceNumber = PayablesInvoice.MatchReferenceNumber
            	and   (related.ReceiptAmount > related.MatchedAmount  
				or     related.ReceiptAmount not entered))

		PurchaseOrderReceiptVendorPORel
			one-to-many relation to PurchaseOrderReceipt
			Field Mapping uses Set9
                related.Company             		= Company
                related.Vendor						= Vendor
				related.PurchaseOrder				= CurrentPurchaseOrder

        PurchaseOrderReceiptPool1Rel
            one-to-many relation to PurchaseOrderReceipt
            Field Mapping uses Set9
                related.Company                 	= PayablesInvoice.Company
                related.Vendor                  	= PayablesInvoice.Vendor

        PurchaseOrderReceiptPool2Rel
            one-to-many relation to PurchaseOrderReceipt
            Field Mapping uses Set9
                related.Company                 	= PayablesInvoice.Company
                related.Vendor                  	= PayablesInvoice.Vendor
                related.PurchaseOrder  				= CurrentPurchaseOrder

        PurchaseOrderReceiptPool3Rel
            one-to-many relation to PurchaseOrderReceipt
            Field Mapping uses Set9
                related.Company                 	= PayablesInvoice.Company
                related.Vendor                  	= PayablesInvoice.Vendor
                related.PurchaseOrder  				= CurrentPurchaseOrder
				related.ShipToLocation				= PayablesInvoice.Location
																			
		CurrentWorkInvoiceRel
			one-to-one relation to MatchWorkInvoice
			Field Mapping uses symbolic key
                related.Company                 	= Company
				related.MatchWork					= MatchWork
				related.PayablesInvoice				= CurrentPayablesInvoice

		LocalWorkInvoiceRel
			one-to-one relation to MatchWorkInvoice
			Field Mapping uses symbolic key
                related.Company                 	= Company
				related.MatchWork					= MatchWork
				related.PayablesInvoice				= LocalPayablesInvoice

		LocalMatchWorkInvoiceDistributionsRel
			one-to-many relation to MatchWorkInvoiceDistribution
			Field Mapping uses ByDateAndAccount
				related.Company						= Company
				related.MatchWork					= MatchWork
				related.PayablesInvoice				= CurrentPayablesInvoice

		CurrentPayablesInvoiceRel
			one-to-one relation to PayablesInvoice
			Field Mapping uses symbolic key
				related.Company						= Company
				related.PayablesInvoice				= CurrentPayablesInvoice

		PayablesInvoiceByVendorRel
			one-to-many relation to PayablesInvoice
			Field Mapping uses Set14
				related.Company						= Company
				related.Vendor						= Vendor
			Instance Selection
				where (!related.MatchProcessType.Expense
				and    !related.ErrorsExists)

		PayablesInvoiceByMatchReferenceRel
			one-to-many relation to PayablesInvoice
			Field Mapping uses Set14
				related.Company						= Company
				related.Vendor						= Vendor
			Instance Selection
				where (related.MatchReferenceNumber = PayablesInvoice.MatchReferenceNumber
				and    !related.MatchProcessType.Expense
				and    !related.ErrorsExists)

		PayablesInvoiceByVendorPORel
			one-to-many relation to PayablesInvoice
			Field Mapping uses Set14
				related.Company						= Company
				related.Vendor						= Vendor
			Instance Selection
				where (!related.MatchProcessType.Expense
				and    !related.ErrorsExists
				and     related.FirstPurchaseOrder	= PurchaseOrder)

		PayablesInvoiceByVendorPOLocationRel
			one-to-many relation to PayablesInvoice
			Field Mapping uses Set14
				related.Company						= Company
				related.Vendor						= Vendor
			Instance Selection
				where (!related.MatchProcessType.Expense
				and    !related.ErrorsExists
				and     related.FirstPurchaseOrder	= PurchaseOrder
				and     related.Location			= CurrentPayablesInvoiceRel.Location)

 		CurrentInvoiceDetailRel
			one-to-one relation to MatchWorkInvoiceDetail
			Field Mapping uses symbolic key
                related.Company                 	= Company
				related.MatchWork					= MatchWork
				related.PayablesInvoice				= PayablesInvoice
				related.PurchaseOrder				= CurrentPurchaseOrder
				related.PurchaseOrderLine			= CurrentPurchaseOrderLine
				related.Contract					= CurrentContract
				related.ContractLine				= CurrentContractLine
				related.PayablesInvoiceDetail		= CurrentInvoiceDetail

 		CurrentInvoiceDetailThisInvoiceRel
			one-to-one relation to MatchWorkInvoiceDetail
			Field Mapping uses symbolic key
                related.Company                 	= Company
				related.MatchWork					= MatchWork
				related.PayablesInvoice				= CurrentPayablesInvoice
				related.PurchaseOrder				= CurrentPurchaseOrder
				related.PurchaseOrderLine			= CurrentPurchaseOrderLine
				related.Contract					= CurrentContract
				related.ContractLine				= CurrentContractLine
				related.PayablesInvoiceDetail		= CurrentInvoiceDetail
 		CurrentInvoiceServiceDetailsForPOLineRel
			one-to-many relation to MatchWorkInvoiceDetail
			Field Mapping uses symbolic key
                related.Company                 	= Company
				related.MatchWork					= MatchWork
				related.PayablesInvoice				= PayablesInvoice
				related.PurchaseOrder				= CurrentPurchaseOrder
				related.PurchaseOrderLine			= CurrentPurchaseOrderLine
				related.Contract					= CurrentContract
				related.ContractLine				= CurrentContractLine
			
 		LocalInvoiceDetailRel
			one-to-one relation to MatchWorkInvoiceDetail
			Field Mapping uses symbolic key
                related.Company                 	= Company
				related.MatchWork					= MatchWork
				related.PayablesInvoice				= CurrentPayablesInvoice
				related.PurchaseOrder				= CurrentPurchaseOrder
				related.PurchaseOrderLine			= CurrentPurchaseOrderLine
				related.Contract					= CurrentContract
				related.ContractLine				= CurrentContractLine
				related.PayablesInvoiceDetail		= CurrentInvoiceDetail
			
		CurrentReceiptRel
			one-to-one relation to MatchWorkReceipt
			Field Mapping uses symbolic key
                related.Company                 	= Company
				related.MatchWork					= MatchWork
				related.PurchaseOrderReceipt		= CurrentReceipt
			
		CurrentReceiptLineRel
			one-to-one relation to MatchWorkReceiptLine
			Field Mapping uses symbolic key
                related.Company                 	= Company
				related.MatchWork					= MatchWork
				related.PurchaseOrder				= CurrentPurchaseOrder
				related.PurchaseOrderLine			= CurrentPurchaseOrderLine
				related.PurchaseOrderReceipt		= CurrentReceipt
				related.PurchaseOrderReceiptLine	= CurrentReceiptLine
			
 		CurrentInvoiceAddOnChargeRel
			one-to-one relation to MatchWorkInvoiceAddOnCharge
			Field Mapping uses symbolic key
                related.Company                 	= Company
				related.MatchWork					= MatchWork
				related.PayablesInvoice				= PayablesInvoice
				related.PurchaseOrder				= CurrentPurchaseOrder
				related.PurchaseOrderLine			= CurrentPurchaseOrderLine
				related.Contract					= CurrentContract
				related.ContractLine				= CurrentContractLine
				related.AddOnCharge					= CurrentAddOnCharge
				related.MatchWorkInvoiceAddOnCharge = LocalMatchWorkInvoiceAddOnCharge

		CurrentInvoiceAddOnChargeThisInvoiceRel
			one-to-one relation to MatchWorkInvoiceAddOnCharge
			Field Mapping uses symbolic key
                related.Company                 	= Company
				related.MatchWork					= MatchWork
				related.PayablesInvoice				= CurrentPayablesInvoice
				related.PurchaseOrder				= CurrentPurchaseOrder
				related.PurchaseOrderLine			= CurrentPurchaseOrderLine
				related.Contract					= CurrentContract
				related.ContractLine				= CurrentContractLine
				related.AddOnCharge					= CurrentAddOnCharge
				related.MatchWorkInvoiceAddOnCharge = LocalMatchWorkInvoiceAddOnCharge

		CurrentReceiptLineAOCRel
			one-to-one relation to MatchWorkReceiptLineAOC
			Field Mapping uses symbolic key
                related.Company                 	= Company
				related.MatchWork					= MatchWork
				related.PurchaseOrder				= CurrentPurchaseOrder
				related.PurchaseOrderLine			= CurrentPurchaseOrderLine
				related.PurchaseOrderReceipt		= CurrentReceipt
				related.PurchaseOrderReceiptLine	= CurrentReceiptLine
				related.AddOnCharge					= CurrentAddOnCharge

		CurrentReceiptLineAOCWithReceiptRel
			one-to-many relation to MatchWorkReceiptLineAOC
			Field Mapping uses symbolic key
                related.Company                 	= Company
				related.MatchWork					= MatchWork
				related.PurchaseOrder				= CurrentPurchaseOrder
				related.PurchaseOrderLine			= CurrentPurchaseOrderLine
			Instance Selection 
				where (related.PurchaseOrderReceipt	entered 
				and    related.AddOnCharge			= CurrentAddOnCharge)


		CurrentPurchaseOrderLineRel
			one-to-one relation to PurchaseOrderLine
			Field Mapping uses symbolic key
				related.Company						= Company
				related.PurchaseOrder				= CurrentPurchaseOrder
				related.PurchaseOrderLine			= CurrentPurchaseOrderLine

		CurrentPurchaseOrderRel
			one-to-one relation to PurchaseOrder
			Field Mapping uses symbolic key
				related.Company						= Company
				related.PurchaseOrder				= CurrentPurchaseOrder

        CurrentMatchPurchaseOrderInvoiceRel
            one-to-one relation to MatchPurchaseOrderInvoice
            Field Mapping uses Set2
                related.Company						= Company
                related.Vendor  					= Vendor
                related.PayablesInvoice				= PayablesInvoice
				related.PurchaseOrder				= CurrentPurchaseOrder

        DropshipPurchaseOrdersRel
            one-to-many relation to MatchPurchaseOrderInvoice
            Field Mapping uses Set2
                related.Company						= Company
                related.Vendor  					= Vendor
                related.PayablesInvoice				= PayablesInvoice
			Instance Selection 
				where (related.PurchaseOrder.IsDropship) 

		CurrentPurchaseOrderAndLineAddOnChargeRel
			one-to-one relation to PurchaseOrderAndLineAddOnCharge
			Field Mapping uses symbolic key
				related.Company						= Company
				related.PurchaseOrder				= CurrentPurchaseOrder
				related.PurchaseOrderLine			= CurrentPurchaseOrderLine
				related.AddOnCharge					= CurrentAddOnCharge
			
		PurchasingCompanyRel
			one-to-one relation to PurchasingCompany
			Field Mapping uses symbolic key
				related.Company						= Company

        POLineInvoiceMessageRel
            one-to-many relation to MatchInvoiceMessage
            Field Mapping uses Set1
                related.Company						= Company
                related.Vendor						= Vendor
                related.PayablesInvoice				= PayablesInvoice
     			related.PurchaseOrder				= CurrentPurchaseOrder
			Instance Selection
				where (related.MatchMessageOrigin.PoCost
				and    related.Status.Closed
				and    related.ApplicationAction.AdjustCost
				and    related.PurchaseOrderLine		= CurrentPurchaseOrderLine)

        POCostMessageWithReasonRel
            one-to-many relation to MatchInvoiceMessage
            Field Mapping uses Set1
                related.Company						= Company
                related.Vendor						= Vendor
                related.PayablesInvoice				= PayablesInvoice
			Instance Selection
				where (related.MatchMessageOrigin.PoCost
				and    related.ReasonCode entered)

        POCostMessageInvoiceOverReceiptRel
            one-to-many relation to MatchInvoiceMessage
            Field Mapping uses Set1
                related.Company						= Company
                related.Vendor						= Vendor
                related.PayablesInvoice				= PayablesInvoice
			Instance Selection
				where (related.MatchMessageOrigin.PoCost
				and    related.MessageSubType.InvoiceOverReceipt)

		PurchaseOrderReceiptLineAOCSet2Rel
			one-to-many relation to PurchaseOrderReceiptLineAOC
			Field Mapping uses Set2
				related.Company						= Company
				related.Vendor						= Vendor

		PurchaseOrderReceiptLineAOCSet2PORel
			one-to-many relation to PurchaseOrderReceiptLineAOC
			Field Mapping uses Set2
				related.Company						= Company
				related.Vendor						= Vendor
				related.PurchaseOrder				= PurchaseOrder

		ReceiptLineAOCMatchReferenceRel
			one-to-many relation to PurchaseOrderReceiptLineAOC
			Field Mapping uses Set2
				related.Company						= Company
				related.Vendor						= Vendor
			Instance Selection
				where (related.MatchReferenceNumber	= PayablesInvoice.MatchReferenceNumber)

		PurchaseOrderReceiptLineForCurrentReceiptRel
			one-to-many relation to PurchaseOrderReceiptLine
			Field Mapping uses symbolic key
				related.Company						= Company
				related.PurchaseOrderReceipt		= CurrentReceipt

		PurchaseOrderReceiptLineAOCForCurrentReceiptRel
			one-to-many relation to PurchaseOrderReceiptLineAOC
			Field Mapping uses symbolic key
				related.Company						= Company
				related.PurchaseOrderReceipt		= CurrentReceipt

        PayablesInvoiceDetailRel
            classic name is MAINVDTL
            one-to-many relation to PayablesInvoiceDetail
            Field Mapping uses ByCompanyVendorPayablesInvoice
                related.Company 					= Company
                related.Vendor  					= Vendor
                related.PayablesInvoice				= PayablesInvoice

		CurrentPayablesInvoiceDetailRel
            classic name is MAINVDTL
            one-to-one relation to PayablesInvoiceDetail
            Field Mapping uses symbolic key
                related.Company 					= Company
                related.PayablesInvoice				= PayablesInvoice
                related.PurchaseOrder				= CurrentPurchaseOrder
                related.PurchaseOrderLine			= CurrentPurchaseOrderLine
                related.Contract					= CurrentContract
                related.ContractLine				= CurrentContractLine
                related.PayablesInvoiceDetail		= CurrentInvoiceDetail

        InvoiceDetailCreatedFromMatchRel
            classic name is MAINVDTL
            one-to-many relation to PayablesInvoiceDetail
            Field Mapping uses ByCompanyVendorPayablesInvoice
                related.Company 					= Company
                related.Vendor  					= Vendor
                related.PayablesInvoice				= PayablesInvoice
            Instance Selection
            	where (related.RecordSource.CreatedWithinMatch)

        InternalInvoiceDetailsCreatedFromMatchRel
            classic name is MAINVDTL
            one-to-many relation to PayablesInvoiceDetail
            Field Mapping uses ByCompanyVendorPayablesInvoice
                related.Company 					= Company
                related.Vendor  					= Vendor
                related.PayablesInvoice				= PayablesInvoice
            Instance Selection
            	where (related.RecordSource.InternalMatchDetails)

		NonServiceByAmountLineRel
            classic name is MAINVDTL
            one-to-many relation to PayablesInvoiceDetail
            Field Mapping uses symbolic key
                related.Company 					= Company
                related.PayablesInvoice				= PayablesInvoice
			Instance Selection
				where (!related.ItemType.Service
				or      related.PurchaseOrderLine.ServiceCode.Quantity
				or      related.ContractLine.ServiceCode.Quantity)

		PayablesInvoiceAddOnChargeRel
            one-to-many relation to PayablesInvoiceAddOnCharge
            Field Mapping uses symbolic key
                related.Company 					= Company
				related.PayablesInvoice				= PayablesInvoice

 		CurrentPayablesInvoiceAddOnChargeRel
            one-to-many relation to PayablesInvoiceAddOnCharge
            Field Mapping uses symbolic key
                related.Company 					= Company
				related.PayablesInvoice				= CurrentPayablesInvoice
				related.PurchaseOrder				= CurrentPurchaseOrder
				related.PurchaseOrderLine			= CurrentPurchaseOrderLine
				related.Contract					= CurrentContract
				related.ContractLine				= CurrentContractLine
				related.AddOnCharge					= CurrentAddOnCharge
		DefaultVendorItemRel
			one-to-many relation to VendorItem
			Field Mapping uses symbolic key
				related.ProcurementGroup			= PurchasingCompanyRel.ProcurementGroup
				related.Item						= LocalItem
				related.Vendor						= Vendor
			Instance Selection
				where  (related.UseAsDefault)
			
		VendorCompanyDefaultRel
			one-to-one relation to VendorCompanyDefault
			Field Mapping uses symbolic key
				related.VendorGroup						= Company.VendorGroup
				related.Vendor 							= Vendor
				related.VendorLocation					= LocalLocation
				related.Company 						= Company

		VendorLocationRel
			one-to-one relation to VendorLocation
			Field Mapping uses symbolic key
				related.VendorGroup						= Company.VendorGroup
				related.Vendor 							= Vendor
				related.VendorLocation					= LocalLocation

		LocalEntityTaxCodeRel
			one-to-one relation to EntityTaxCode
			Field Mapping uses symbolic key
		    	related.FinanceEnterpriseGroup			= Company.AccountingEntity.FinanceEnterpriseGroup
                related.TaxEntity 						= Company.AccountingEntity
                related.TaxCode 						= LocalTaxCode
			
		InventoryLocationRel
			one-to-one relation to InventoryLocation
			Field Mapping uses symbolic key
				related.Company 						= Company
				related.InventoryLocation				= LocalLocation

		CurrentAddOnChargeRel
			one-to-one relation to AddOnCharge
			Field Mapping uses symbolic key
				related.Company							= Company
				related.AddOnCharge						= CurrentAddOnCharge

		MatchMessageToleranceRel
			one-to-one relation to MatchMessageTolerance
			Field Mapping uses symbolic key
				related.FinanceEnterpriseGroup			= MatchRule.FinanceEnterpriseGroup
				related.MatchRule						= MatchRule
						
		CurrentContractLineRel
			one-to-one relation to ContractLine
			Field Mapping uses symbolic key
				related.ContractGroup					= PayablesCompanyRel.VendorGroup
                related.Contract     					= CurrentContract
                related.ContractLine					= CurrentContractLine

		CurrentContractLineDistributionRel
			one-to-many relation to ContractLineDistribution
			Field Mapping uses symbolic key
				related.ContractGroup					= PayablesCompanyRel.VendorGroup
                related.Contract     					= CurrentContract
                related.ContractLine					= CurrentContractLine

		CurrentContractRel
			one-to-one relation to Contract
			Field Mapping uses symbolic key
				related.ContractGroup					= PayablesCompanyRel.VendorGroup
                related.Contract     					= CurrentContract

		PurchaseOrderLineDistributionRel
			one-to-many relation to PurchaseOrderLineDistribution
			Field Mapping uses symbolic key
                related.Company							= Company
                related.PurchaseOrder					= CurrentPurchaseOrder
            Instance Selection
                where (related.PurchaseOrderLine		= CurrentPurchaseOrderLine
                and    related.AddOnCharge				= CurrentAddOnCharge)

		CurrentInvoiceNonMatchCreatedTaxDistributions
			one-to-many relation to PayablesInvoiceDistribution
			Field Mapping uses symbolic key
				related.Company							= Company
				related.PayablesInvoice					= CurrentPayablesInvoice
			Instance Selection
				where (related.MatchCreated 			= blank
				and    related.TaxCode entered)

		CurrentInvoiceAccruedTaxDistributions
			one-to-many relation to PayablesInvoiceDistribution
			Field Mapping uses symbolic key
				related.Company							= Company
				related.PayablesInvoice					= CurrentPayablesInvoice
			Instance Selection
				where (related.TaxCode entered
				and    related.IsAccruedTaxDistribution)

		CurrentInvoiceTaxDistributions
			one-to-many relation to PayablesInvoiceDistribution
			Field Mapping uses symbolic key
				related.Company							= Company
				related.PayablesInvoice					= CurrentPayablesInvoice
			Instance Selection
				where (related.TaxCode entered
				and    related.TaxType.Invoiced
				and    related.DistributionAmount.CurrencyAmount entered)

		CurrentInvoiceRetainageDistributions
			one-to-many relation to PayablesInvoiceDistribution
			Field Mapping uses symbolic key
				related.Company							= Company
				related.PayablesInvoice					= CurrentPayablesInvoice
			Instance Selection
				where (related.MatchCreated 			= blank
				and    related.Retainage)

		InvoiceDistributionsForPurchaseOrderLineRel  
			one-to-many relation to PayablesInvoiceDistribution
			Field Mapping uses symbolic key
				related.Company							= Company
				related.PayablesInvoice					= PayablesInvoice
			Instance Selection
				where  (related.PurchaseOrder			= CurrentPurchaseOrder
				and     related.PurchaseOrderLine		= CurrentPurchaseOrderLine
                and     related.PayablesInvoiceDetail   = CurrentInvoiceDetail
				and     related.AddOnCharge 			= CurrentAddOnCharge
				and     related.NotMatchCreated)
				
			
		InvoiceDistributionsForContractLineRel  
			one-to-many relation to PayablesInvoiceDistribution
			Field Mapping uses symbolic key
				related.Company							= Company
				related.PayablesInvoice					= PayablesInvoice
			Instance Selection
				where  (related.PurchasingContract		= CurrentContract
				and     related.ContractLine			= CurrentContractLine
                and     related.PayablesInvoiceDetail   = CurrentInvoiceDetail
				and     related.AddOnCharge 			= CurrentAddOnCharge
				and     related.NotMatchCreated)
			
		PurchaseOrderLineDistributionLocationRel
			one-to-many relation to PurchaseOrderLineDistribution
			Field Mapping uses symbolic key
                related.Company							= Company
                related.PurchaseOrder					= CurrentPurchaseOrder
            Instance Selection
                where (related.PurchaseOrderLine		= CurrentPurchaseOrderLine
                and    related.AddOnCharge				= CurrentAddOnCharge
                and    related.PurchaseOrderLine.ShipToLocation	= DetailsLocation)

		OriginalInvoiceDetailRel
			one-to-one relation to PayablesInvoiceDetail
			Field Mapping uses symbolic key
				related.Company 						= Company
				related.PayablesInvoice 				= LocalOriginalInvoice
				related.PurchaseOrder  					= CurrentPurchaseOrder
				related.PurchaseOrderLine    			= CurrentPurchaseOrderLine
				related.Contract	  					= CurrentContract
				related.ContractLine    				= CurrentContractLine
				related.PayablesInvoiceDetail			= LocalOriginalInvoiceDetail

		LocalOriginalInvoiceDetailRel
			one-to-many relation to PayablesInvoiceDetail
			Field Mapping uses symbolic key
				related.Company 						= Company
				related.PayablesInvoice 				= LocalOriginalInvoice
				related.PurchaseOrder  					= CurrentPurchaseOrder
				related.PurchaseOrderLine    			= CurrentPurchaseOrderLine
				related.Contract	  					= CurrentContract
				related.ContractLine    				= CurrentContractLine

		LocalItemUOMRel
			one-to-one relation to ItemUOM
			Field Mapping uses symbolic key
				related.ItemGroup						= InventoryCompanyRel.ItemGroup
				related.Item							= LocalItem
				related.UnitOfMeasure					= LocalUnitOfMeasure

		MatchReconQueueRel
			one-to-one relation to MatchReconQueue
			Field Mapping uses symbolic key
				related.Company							= Company
				related.PayablesInvoice					= PayablesInvoice

		CurrentInvoiceMatchReconQueueRel
			one-to-one relation to MatchReconQueue
			Field Mapping uses symbolic key
				related.Company							= Company
				related.PayablesInvoice					= CurrentPayablesInvoice

		ClosedPurchaseOrderAocRel
			one-to-many relation to PurchaseOrderAndLineAddOnCharge
			Field Mapping uses symbolic key	
				related.Company							= Company
    			related.PurchaseOrder					= PurchaseOrder
			Instance Selection
				where  (related.Closed.Yes)

		CompanySystemClosingControlRel
			one-to-one relation to CompanySystemClosingControl
			Field Mapping uses BySystemCode
				related.GeneralLedgerSystemCode		= "AP"
				related.Company						= Company

		SystemClosingControlRel
			one-to-one relation to SystemClosingControl
			Field Mapping uses symbolic key
				related.FinanceEnterpriseGroup	= Company.FinanceEnterpriseGroup
				related.AccountingEntity 		= Company.AccountingEntity
				related.GeneralLedgerSystemCode	= "AP"

		ICSystemClosingControlRel
			one-to-one relation to CompanySystemClosingControl
			Field Mapping uses symbolic key
				related.Company						= Company
				related.GeneralLedgerSystemCode		= "IC"
						
		GeneralLedgerSystemCodeRel		
			one-to-one relation to GeneralLedgerSystemCode
			Field Mapping uses symbolic key
				related.FinanceEnterpriseGroup	= Company.FinanceEnterpriseGroup
				related.GeneralLedgerSystemCode	= "AP"	

 		AutoMatchResultRel
			one-to-one relation to AutoMatchResult
			Field Mapping uses symbolic key
				related.FinanceEnterpriseGroup	= Company.FinanceEnterpriseGroup
				related.AutoMatchResult			= LinkedAutoMatchResult
				
 		AutoMatchResultInvoiceRel
			one-to-one relation to AutoMatchResultInvoice
			Field Mapping uses symbolic key
				related.Company					= Company
				related.AutoMatchResult			= LinkedAutoMatchResult
				related.PayablesInvoice			= PayablesInvoice
				
		AutoMatchResultCurrInvRel				
			one-to-one relation to AutoMatchResultInvoice
			Field Mapping uses symbolic key
				related.Company					= Company
				related.AutoMatchResult			= LinkedAutoMatchResult
				related.PayablesInvoice			= CurrentPayablesInvoice

		POGeneralLedgerSystemCodeRel		
			one-to-one relation to GeneralLedgerSystemCode
			Field Mapping uses symbolic key
				related.FinanceEnterpriseGroup	= Company.FinanceEnterpriseGroup
				related.GeneralLedgerSystemCode	= "PO"

		LocalBudgetGroupTotalRel
			one-to-one relation to BudgetGroupTotal
			Field Mapping uses symbolic key			
				related.FinanceEnterpriseGroup				= LocalFEG
				related.Scenario							= LocalScenario
				related.BudgetTemplate						= LocalBudgetTemplate
				related.BudgetGroup 						= LocalBudgetGroup
				related.GeneralLedgerCalendarPeriod 		= LocalGeneralLedgerCalendarPeriod

		AllowPrepayMatchWithoutReceiptRel
			one-to-many relation to ConfigurationParameter
			Field Mapping uses symbolic key
				related.ConfigurationParameter.ConfigurationID	= "config"
				related.ConfigurationParameter.Name				= "AllowPrepayMatchWithoutReceipt"
			Instance Selection
				where (related.Value	= "YES")

	Sets
		ByPayablesInvoice
            indexed
            Sort Order
            	Company
            	PayablesInvoice
            	MatchWork
		
	Rule Blocks
		UpdateDefaults


			if (PayablesInvoice.InvoiceType.MatchPrepayment)
			    InPrepaids = true
			
			if (DocumentType.Invoice
			and PayablesInvoice.MatchTable entered)
				MatchTable = PayablesInvoice.MatchTable
			else
			if (Vendor.MatchTable entered)
				MatchTable = Vendor.MatchTable
			else
				MatchTable = Company.MatchTable


	
			if (DocumentType.Invoice
			and PayablesInvoice.RuleGroup entered)
				MatchRule = PayablesInvoice.RuleGroup
			else	
			if ((PayablesInvoice.MatchProcessType.Service     
			or   PayablesInvoice.MatchProcessType.ServiceContract)
			and Company.ServiceMessageMatchRule entered)     
			    MatchRule = Company.ServiceMessageMatchRule  
			else	                                         
			if (MatchPoint.RuleGroupOne)
				MatchRule = MatchTable.RuleGroup1
			else
			if (MatchPoint.RuleGroupTwo)
				MatchRule = MatchTable.RuleGroup2
			else
			if (MatchPoint.RuleGroupThree)
				MatchRule = MatchTable.RuleGroup3
	

	
			if (!Vendor.PoolOption.UseCompany)
				PoolOption = Vendor.PoolOption
			else
				PoolOption = Company.PoolOption


				
			if (Vendor.TermsCalculation entered)	
				TermsCalculation = Vendor.TermsCalculation
			else
				TermsCalculation = PayablesCompanyRel.TermsCalculation
	


			if (PurchaseOrder.CurrencyExchangeSetPoint entered)
				CurrencyExchangeSetPoint = PurchaseOrder.CurrencyExchangeSetPoint
			else
				CurrencyExchangeSetPoint = first PayablesInvoice.MatchPurchaseOrderInvoicesRel.PurchaseOrder.CurrencyExchangeSetPoint
																	


			if (PayablesInvoice.InvoiceAmount.FunctionalAmount.EnteredCurrencyRate entered)
				InvoiceCurrencyExchangeRate = PayablesInvoice.InvoiceAmount.FunctionalAmount.EnteredCurrencyRate
			else
				InvoiceCurrencyExchangeRate = 1



		FESReleaseEdit
			initialize FESFundingSourceTable
			for each CurrentPayablesInvoiceRel.PayablesInvoiceDistribution set
				if (each.Status.Unreleased				
				and each.DistributionAccount.Project entered
				and each.DistributionAccount.FinanceDimension2 entered
				and each.ProjectFundingSourceRel exists
				and each.UncommittedProjectAmount entered)
					FESCounter = 1
					while (FESCounter < 1000)
						if (FESFundingSourceTable.FESFundingSource[FESCounter] not entered)
							FESFundingSourceTable.FESFundingSource[FESCounter].ProjectContract   = each.ProjectFundingSourceRel.ProjectContract
							FESFundingSourceTable.FESFundingSource[FESCounter].FinanceDimension2 = each.ProjectFundingSourceRel.FinanceDimension2
							FESFundingSourceTable.FESFundingSource[FESCounter].RemainingAmount	 = each.ProjectFundingSourceRel.RemainingFESAmount - each.UncommittedProjectAmount
							FESCounter = 1000
						else
						if (FESFundingSourceTable.FESFundingSource[FESCounter].ProjectContract   = each.ProjectFundingSourceRel.ProjectContract
						and	FESFundingSourceTable.FESFundingSource[FESCounter].FinanceDimension2 = each.ProjectFundingSourceRel.FinanceDimension2)
							FESFundingSourceTable.FESFundingSource[FESCounter].RemainingAmount  -= each.UncommittedProjectAmount
							FESCounter = 1000
						else
							FESCounter += 1
			FESCounter = 1
			while (FESCounter < 1000)
				if (FESFundingSourceTable.FESFundingSource[FESCounter] not entered)
					FESCounter = 1000
				else
					constraint (FESFundingSourceTable.FESFundingSource[FESCounter].RemainingAmount >= 0)
						"APFES:\Front_\End_\SplitAmountExceedsRemainingFundedAmountFor<FESFundingSourceTable.FESFundingSource[FESCounter].FinanceDimension2>"
				FESCounter += 1

		EditMatch 
			NoReceipts									= false
			HasReceipt									= false

			constraint (MatchRule entered)
				"MatchRuleNotFound"
							
			constraint (PayablesInvoice.InvoiceAmount.CurrencyAmount entered
			or          PayablesInvoice.AllowZeroCostInvoice)				
				"<MatchInvoiceErrorMessages.EdMsg109>"
				
			if  (PayablesInvoice.TaxCode.TaxType.CalculatedRate)
				TaxAmountFound = false
	
				for each PayablesInvoiceDetailRel
					if (each.TaxAmount entered
					or  each.AccruedTaxAmount entered)
						TaxAmountFound= true
	
				if (!TaxAmountFound)
					for each PayablesInvoiceAddOnChargeRel
						if (each.TaxAmount entered
						or  each.AccruedTaxAmount entered)
							TaxAmountFound= true

				constraint (TaxAmountFound)
					"<MatchInvoiceErrorMessages.EdMsg121>"
					
			constraint (PayablesInvoice.InvoiceAmount.CurrencyAmount = PayablesInvoice.TotalPaymentAmount.TransactionTotal)
				"<MatchInvoiceErrorMessages.EdMsg116>"

			if (PayablesInvoice.IsNotPrepayment)
				constraint (PayablesInvoice.DerivedTotalPaymentAmount = PayablesInvoice.InvoiceAmount.CurrencyAmount)
					"<MatchInvoiceErrorMessages.EdMsg116>"

			if  (PayablesInvoice.MatchPrepaymentMethod.PrepayFromInvoice
			and  PayablesInvoice.TaxAmount entered
			and  PayablesInvoice.TaxAmount != PayablesInvoice.FirstPurchaseOrder.DerivedVendorInvoicedTaxAmount)
			    constraint (PayablesCompanyRel.TaxCode entered)
				    "TaxToleranceNotSetupOnPayablesCompanyAndEnteredTaxDoesNotMatchPurchaseOrderInvoicedTax"

			if (PayablesInvoice.MatchPrepaymentMethod entered)
				for each PayablesInvoice.MatchPurchaseOrderInvoicesRel 
		            constraint (each.OpenReceiptsRel exists)
    		            "CannotMatchPrepaymentWithoutReceipts"

			if  (PayablesInvoice.MatchProcessType.Service) 
				constraint  (!ReconciliationMatchLevel.InvoiceMatch)
					"CannotPerformInvoiceMatchForServicePOInvoice"

			if  (PayablesInvoice.MatchProcessType.DropShip) 
				constraint  (!ReconciliationMatchLevel.InvoiceMatch)
					"CannotPerformInvoiceMatchForDropShipPurchaseOrder"

			if (PayablesInvoice.PayablesAccrualCodeDetailRel.DistributionAccount.GeneralLedgerChartAccount.Currency entered)
				constraint (PayablesInvoice.PayablesAccrualCodeDetailRel.DistributionAccount.GeneralLedgerChartAccount.Currency     = PayablesInvoice.InvoiceCurrency)
					"InvoiceCurrency<PayablesInvoice.InvoiceCurrency>MustEqualAccrualCodeCurrency<PayablesInvoice.PayablesAccrualCodeDetailRel.DistributionAccount.GeneralLedgerChartAccount.Currency>" 

			if (PayablesInvoice.TaxAdjustment.Calculate
			or  PayablesInvoice.TaxAdjustment.IgnoreProductAndAOC)

				TaxDifference = PayablesInvoice.TaxAmount - (PayablesInvoice.DerivedInvoiceDetailTotalTaxAmount + PayablesInvoice.DerivedMatchMiscellaneousTaxAmount + PayablesInvoice.DerivedMatchAdditionalTax)
				if (TaxDifference < 0)
					TaxDifference *= -1

				constraint (TaxDifference not entered
				or TaxDifference <= PayablesInvoice.DerivedTaxToleranceAmount)
					"<MatchInvoiceErrorMessages.EdMsg113>"

			if  (ProcessByMatchReference)
				for each PurchaseOrderReceiptMatchReferenceRel
					constraint (!each.UnreleasedAdjustmentRel exists)
						"<MatchInvoiceErrorMessages.CannotMatchDueToUnreleasedAdjMsg>"
					constraint (!each.Status.ReleasedPendingTwoStepReceiving)
						"<MatchInvoiceErrorMessages.CannotMatchDueToPendingTwoStepReceivingMsg>"	
					if  (Vendor.HoldUntilInspected.Yes
					or   Company.HoldUntilInspected.Yes)
						constraint (!each.UnreleasedInspectionRel exists)
							"<MatchInvoiceErrorMessages.CannotMatchDueToUnreleasedInspMsg>"
			else
				for each PayablesInvoice.MatchPurchaseOrderInvoicesRel
					for each each.OpenReceiptsRel
						constraint (!each.UnreleasedAdjustmentRel exists)
							"<MatchInvoiceErrorMessages.CannotMatchDueToUnreleasedAdjMsg>"
						constraint (!each.Status.ReleasedPendingTwoStepReceiving)
							"<MatchInvoiceErrorMessages.CannotMatchDueToPendingTwoStepReceivingMsg>"	
						if  (Vendor.HoldUntilInspected.Yes
						or   Company.HoldUntilInspected.Yes)
							constraint (!each.UnreleasedInspectionRel exists)
								"<MatchInvoiceErrorMessages.CannotMatchDueToUnreleasedInspMsg>"

							if  (ProcessMode.Reconciliation)
								for each each.PurchaseOrderReceipt.PurchaseOrderReceiptLine set
									constraint (each.Status.ReleasedInspected)
										"<MatchInvoiceErrorMessages.Msg199>"

			if (!PayablesInvoice.MatchProcessType.ServiceContract)
				constraint (PayablesInvoice.MatchPurchaseOrderInvoicesRel exists
				or          PayablesInvoice.MatchReferenceNumber entered)
					"<MatchInvoiceErrorMessages.EdMsg117>"
						
				if  (ProcessByMatchReference)
					if  (!PayablesInvoice.InvoiceType.DebitMemo
					and  !PayablesInvoice.InvoiceType.CreditMemo)
            			if  (!PurchaseOrderReceiptMatchReferenceRel exists)
	
							NoReceipts						= true  

						else
							for each PurchaseOrderReceiptMatchReferenceRel
								CurrentPurchaseOrder					= each.PurchaseOrder
		
								if (each.PurchaseOrder.SubcontractorPurchaseOrder)
									constraint (each.PurchaseOrder.Approved)
										"<MatchInvoiceErrorMessages.EdMsg118>"
									
								constraint (each.PurchaseOrder.Released)
									"<MatchInvoiceErrorMessages.EdMsg120>"

				else

					for each PayablesInvoice.MatchPurchaseOrderInvoicesRel
						CurrentPurchaseOrder					= each.PurchaseOrder

						if (each.PurchaseOrder.SubcontractorPurchaseOrder)
							constraint (each.PurchaseOrder.Approved)
								"<MatchInvoiceErrorMessages.EdMsg118>"
							
						constraint (each.PurchaseOrder.Released)
							"<MatchInvoiceErrorMessages.EdMsg120>"

									
			else
			if (PayablesInvoice.MatchProcessType.ServiceContract) 
				constraint (PayablesCompanyRel.TaxRoundingAccount entered
				or  		PayablesInvoice.TaxAdjustment not entered
				or  		PayablesInvoice.TaxCode not entered
				or  		PayablesInvoice.TaxAmount not entered)
					"<MatchInvoiceErrorMessages.EdMsg108>"

				if (PayablesInvoice.RetainageAccrualCode entered)
					if  (PayablesInvoice.ServiceContract.ExpirationDate entered)
						constraint (PayablesInvoice.ServiceContract.ExpirationDate + PayablesInvoice.ServiceContract.RetainageDueDays as days >= PayablesInvoice.InvoiceDate)
							"CannotHaveInvoiceDateAfterServiceContractExpirationDatePlusRetainageDueDays"
					
			if (PayablesInvoice.InvoiceType.MatchPrepayment
			and AllowPrepayMatchWithoutReceiptRel exists)
			    NextSentence = true
			else
			if (!PayablesInvoice.MatchProcessType.ServiceContract
			and !PayablesInvoice.MatchProcessType.DropShip
			and !PayablesInvoice.MatchProcessType.AOCOnly
			and !PayablesInvoice.InvoiceType.DebitMemo
			and !PayablesInvoice.InvoiceType.CreditMemo)

				if  (LinkedAutoMatchResult entered
				and  NoReceipts)
					invoke UpdateFromMatch AutoMatchResultInvoiceRel
						invoked.SystemOwner 	= 2  
						if (MatchErrorType not entered)
							invoked.MatchErrorType 	= 3
						else
							invoked.MatchErrorType 	= MatchErrorType
					initialize LinkedAutoMatchResult

				if  (Vendor.RequireMatchReference)
					constraint (!NoReceipts)
						"<MatchInvoiceErrorMessages.EdMsg114Ref>"
				else
					constraint (!NoReceipts)
						"<MatchInvoiceErrorMessages.EdMsg114>"



			if (MemoInvoice)

				initialize LocalOriginalInvoice

				if  (!PayablesInvoice.MatchProcessType.ServiceContract
				and  !PayablesInvoice.MatchProcessType.Service
				and  !PayablesInvoice.MatchProcessType.AOCOnly)
					constraint (PayablesInvoice.MatchInvoiceReferenceRel exists)
						"OriginalInvoiceRequiredForMatchDebitOrCreditMemo;UseAction:'LinkToOriginalInvoice'"

				if (PayablesInvoice.MatchInvoiceReferenceRel exists)
					constraint (PayablesInvoice.MatchInvoiceReferenceRel.OriginalInvoice.MatchStatus > 1)
						"OriginalInvoiceMustBeMatched"

					if  (!PayablesInvoice.MatchInvoiceReferenceRel.OriginalInvoice.MatchProcessType.ServiceContract
					and  !PayablesInvoice.MatchInvoiceReferenceRel.OriginalInvoice.MatchProcessType.Service)
						constraint (PayablesInvoice.MatchInvoiceReferenceRel.OriginalInvoice.MatchLevel.DetailMatch)
							"OriginalInvoiceMustHaveBeenDetailMatched"		

					LocalOriginalInvoice			= first PayablesInvoice.MatchInvoiceReferenceRel.OriginalInvoice

				for each PayablesInvoice.PayablesInvoiceDetailRel
				    if (each.EAMWorkOrder entered
				    and !BypassEAMConstraint)
				        constraint (PayablesInvoice.MatchInvoiceReferenceRel exists)
				            "OriginalInvoiceRequiredWhenUsingEAM"

					constraint (each.EnteredQuantity entered)
					    "<MatchInvoiceErrorMessages.QuantityRequiredForItemMsg><each.Item>"
					    
					constraint (each.EnteredUnitCost entered)
					    "<MatchInvoiceErrorMessages.UnitCostRequiredForItemMsg><each.Item>"
					    
					CurrentPurchaseOrder				= each.PurchaseOrder
					CurrentPurchaseOrderLine			= each.PurchaseOrderLine
					CurrentContract						= each.Contract
					CurrentContractLine					= each.ContractLine
					CurrentInvoiceDetail				= each.PayablesInvoiceDetail
					LocalItem 							= each.Item 





					LocalOriginalInvoiceDetail 		= first LocalOriginalInvoiceDetailRel.PayablesInvoiceDetail

					if (each.PurchaseOrderLine not entered)
						for each LocalOriginalInvoiceDetailRel
							if (each.Item = LocalItem)
								LocalOriginalInvoiceDetail 		= each.PayablesInvoiceDetail
								end for each 




					if (PayablesInvoice.MatchProcessType.ServiceContract)
						WorkEnteredQuantity = each.EnteredQuantity * -1
		
						if  (each.QuantityAdjustment)
							constraint (!each.ContractLine.ServiceCode.Amount)
								"QuantityAdjustmentNotAllowedOnAmountTypeServiceLineForItem<each.ItemDescription>"						
		
						if  (each.ContractLine.ServiceCode.Quantity)
							constraint (WorkEnteredQuantity <= each.ContractLine.QuantityOrdered)
								"CannotCreditMoreThanOrderedQuantityForItem<each.ItemDescription>"										
		
							if (LocalOriginalInvoice entered)
								constraint (WorkEnteredQuantity <= OriginalInvoiceDetailRel.EnteredQuantity)
									"CostAdjustmentQuantityCannotBeGreaterThanOriginalInvoiceQuantityForItem<each.ItemDescription>"			

						if  (each.EnteredUnitCost < 0)
							AbsoluteUnitCost				= each.EnteredUnitCost* -1
						else
							AbsoluteUnitCost				= each.EnteredUnitCost
		
						if (LocalOriginalInvoice entered)
							constraint (AbsoluteUnitCost <= OriginalInvoiceDetailRel.EnteredUnitCost)
								"CostAdjustmentUnitCostCannotBeGreaterThanOriginalInvoiceUnitCostForItem<each.ItemDescription>"  
						else
							constraint (AbsoluteUnitCost <= each.ContractLine.DerivedMatchBaseCost)
								"CostAdjustmentUnitCostMustBeLessThanContractLineUnitCostForItem<each.ItemDescription>"  


						if  (each.CostAdjustment
						and  each.ContractLine.ServiceCode.Quantity)
							constraint (AbsoluteUnitCost < each.ContractLine.DerivedMatchBaseCost)
								"CostAdjustmentMustBeLessThanContractLineCostForItem<each.ItemDescription>"						
		
						if  (each.CostAdjustment)
							if  (each.ContractLine.ServiceCode.Amount)
								CostDifference 		= each.ContractLine.MaximumLineAmountInUse - AbsoluteUnitCost
								constraint (CostDifference >= 0)
									"CostCreditCannotExceedAmountOrderedForItem<each.ItemDescription>"
					
					else  
						if  (each.ItemType.Service)
							WorkEnteredQuantity = each.EnteredQuantity * -1
			
							if (LocalOriginalInvoice entered)
								constraint (WorkEnteredQuantity <= OriginalInvoiceDetailRel.EnteredQuantity)
									"CreditQuantityCannotBeGreaterThanOriginalInvoiceQuantityForItem<each.Item>"  
			
							if  (each.QuantityAdjustment)
								constraint (!each.PurchaseOrderLine.ServiceCode.Amount)
									"QuantityAdjustmentNotAllowedOnAmountTypeServiceLineForItem<each.Item>"							
			

							if (each.PurchaseOrderLine.ServiceCode.Quantity)
								constraint  (WorkEnteredQuantity <= each.PurchaseOrderLine.MatchedQuantity)
									"CreditQuantityCannotBeGreaterThanMatchedQuantityForItem<each.Item>"
							else
								constraint  (each.EnteredQuantity = 1)
									"CreditQuantityMustBe1ForServiceByAmountForItem<each.Item>"
						else
						if (!each.CreditForRebill)
							if  (each.CostAdjustment)
								constraint (each.EnteredQuantity <= OriginalInvoiceDetailRel.EnteredQuantity)
									"CostAdjustmentQuantityCannotBeGreaterThanOriginalInvoiceQuantityForItem<each.Item>"  
			
							if  (each.QuantityAdjustment
							and  each.PurchaseOrderLine entered)


								WorkEnteredQuantity = each.EnteredQuantity * -1
								if (each.IsCatchWeight)
									constraint (WorkEnteredQuantity <= each.PurchaseOrderLine.CatchWeightMatchQuantity)
										"CreditQuantity<WorkEnteredQuantity>CannotBeGreaterThanMatchedNotReceivedQuantity<each.PurchaseOrderLine.MatchedNotReceivedQuantity>ForItem<each.Item>" 
									constraint  (WorkEnteredQuantity <= sum OriginalInvoiceDetailRel.PurchaseOrderReceiptInvoiceLinkMNRRel.CatchWeightMatchedNotReceivedQuantity)
										"CreditQuantity<WorkEnteredQuantity>CannotBeGreaterThanOriginalInvoiceMatchedNotReceivedQuantityForItem<each.Item>"   	
								else
								if  (PayablesInvoice.MatchProcessType.ReceiptMatch)
									constraint (WorkEnteredQuantity <= each.PurchaseOrderLine.MatchedNotReceivedQuantity)
										"CreditQuantity<WorkEnteredQuantity>CannotBeGreaterThanMatchedNotReceivedQuantity<each.PurchaseOrderLine.MatchedNotReceivedQuantity>ForItem<each.Item>" 

									OriginalInvoiceTotalMNR = (sum OriginalInvoiceDetailRel.PurchaseOrderReceiptInvoiceLinkMNRRel.MatchedNotReceivedQuantity)

									if  (OriginalInvoiceTotalMNR not entered
									and  each.ExcessQuantityProcess.MatchNoReceipt)
										LocalQuantity = each.MatchedQuantity

									constraint  (WorkEnteredQuantity <= OriginalInvoiceTotalMNR)
										"CreditQuantity<WorkEnteredQuantity>CannotBeGreaterThanOriginalInvoiceMatchedNotReceivedQuantity<OriginalInvoiceTotalMNR>ForItem<each.Item>"   	
								else
									QuantityDifference			= each.PurchaseOrderLine.MatchedQuantity - each.PurchaseOrderLine.Quantity
									constraint  (QuantityDifference >= 0)
										"QuantityCreditNotAllowedIfOriginalInvoiceQuantityLessThanPurchaseOrderLineQuantityForItem<each.Item>"   	
									constraint  (WorkEnteredQuantity <= QuantityDifference)
										"CreditQuantityCannotBeGreaterThanMatchedNotReceivedQuantityForItem<each.Item>"						
			
			
						if  (each.QuantityAdjustment)
							AbsoluteUnitCost				= each.EnteredUnitCost
		
						if  (each.CostAdjustment)
							AbsoluteUnitCost				= each.EnteredUnitCost * -1
		

						if (each.PurchaseOrderLine.ServiceCode.Amount) 											
							constraint (AbsoluteUnitCost <= each.PurchaseOrderLine.MatchedAmount) 				
								"CostAdjustmentUnitCostCannotBeGreaterThanPurchaseOrderLineMatchedAmountForItem<each.Item>" 	
						else
						if (LocalOriginalInvoice entered)
							constraint (AbsoluteUnitCost <= OriginalInvoiceDetailRel.EnteredUnitCost)
								"CostAdjustmentUnitCostCannotBeGreaterThanOriginalInvoiceUnitCostForItem<each.Item>"  
						else
						if (each.PurchaseOrderLine entered)
							constraint (AbsoluteUnitCost <= each.PurchaseOrderLine.EnteredUnitCost)
								"CostAdjustmentMustBeLessThanPurchaseOrderLineUnitCostForItem<each.Item>"  
		
						if  (each.ItemType.Service
						and  each.PurchaseOrderLine entered
						and  each.PurchaseOrderLine.ServiceCode.Amount)
							AbsoluteUnitCost = each.EnteredUnitCost * -1
							constraint (AbsoluteUnitCost <= each.PurchaseOrderLine.MatchedAmount)
								"CostCreditCannotBeGreaterThanPurchaseOrderLineMatchedAmountForItem<each.Item>"
						else
						if  (PayablesInvoice.MatchProcessType.ReceiptMatch

						and  each.PurchaseOrderLine.ItemType.Inventoried
						and  each.CostAdjustment)
							if  (OriginalInvoiceDetailRel.PurchaseOrderReceiptLine entered 
							and  OriginalInvoiceDetailRel.PurchaseOrderReceiptLine.MatchObjectID = OriginalInvoiceDetailRel.MatchObjectID)
								AbsoluteUnitCost = each.EnteredUnitCost * -1
								if  (each.PurchaseOrderLine.CostOption.VendorDetermined
								or   OriginalInvoiceDetailRel.EnteredUnitCost = each.PurchaseOrderReceiptLine.OriginalUnitCost)
									CostDifference = OriginalInvoiceDetailRel.EnteredUnitCost - each.PurchaseOrderReceiptLine.MatchUnitCost
								else
								if  (each.VendorPriceUOM = each.PurchaseOrderLine.VendorPriceUOM)
									CostDifference = OriginalInvoiceDetailRel.EnteredUnitCost - each.PurchaseOrderLine.VendorPriceUnitCost
								else
									CostDifference = OriginalInvoiceDetailRel.EnteredUnitCost - each.PurchaseOrderLine.EnteredUnitCost
	
								constraint (CostDifference entered)
									"CostCreditNotAllowedIfNoCostDifferenceExistsForItem<each.Item>" 							
								constraint (CostDifference > 0)
									"CostCreditNotAllowedIfOriginalInvoiceCostIsLessThanPOLineCostForItem<each.Item>" 				
								CostBasis = OriginalInvoiceDetailRel.EnteredUnitCost
								if  (OriginalInvoiceDetailRel.EnteredUnitCost > CostDifference)
									CostBasis = CostDifference
								constraint (AbsoluteUnitCost <= CostBasis)
									"CostCreditCannotBeGreaterThanCostDifferenceForItem<each.Item>" 									
		
						if  (PayablesInvoice.InvoiceType.DebitMemo)
							if  (each.CostAdjustment
							and  each.PurchaseOrderLine entered)
								constraint (OriginalInvoiceDetailRel.EnteredUnitCost + each.EnteredUnitCost <= each.PurchaseOrderLine.EnteredUnitCost)
									"OriginalCostPlusAdjustedCostIsGreaterThanPOLineCostForItem<each.Item>"									



			if (!MemoInvoice)

				for each PayablesInvoice.MiscPayablesInvoiceAddOnChargeRel
					constraint (each.AddOnCharge.SpreadMethod.NoSpread)
						"<MatchInvoiceErrorMessages.CannotUseASpreadAddOnChargeCodeOnMiscAOCMsg>"
			
				for each PayablesInvoice.PayablesInvoiceDetailRel

					if (each.LinkedToAsset)
						constraint (each.AssetDetailsInBalance)
							"<MatchInvoiceErrorMessages.AssetDetailsAreNotInBalanceMsg>Line<each.PurchaseOrderLine.LineNumber>"

						for each each.PurchaseOrderLine.PurchaseOrderLineAssetDetailslRel 
							if (each.SerialNumber entered)
								constraint (each.PurchaseOrderLineAssetDetailDuplicateSerialNumberRel not exists)
									"DuplicateSerialNumber<each.SerialNumber>"
						
								constraint(each.DuplicateAssetItemSerialRel not exists)
									"SerialNumber<each.SerialNumber>AlreadyExistsOnAssetItem"		
									
								constraint(each.DuplicateAssetInterfaceSerialRel not exists)
									"SerialNumber<each.SerialNumber>AlreadyExistsInAssetInterface"		
									
							if (each.BarCode entered)
								constraint (each.PurchaseOrderLineAssetDetailDuplicateBarCodeRel not exists)
									"DuplicateBarcode<each.BarCode>"

								constraint(each.DuplicateBarCodeRel not exists)
									"Barcode<each.BarCode>AlreadyExistsOnAssetItem"		
									
								constraint(each.DuplicateAssetInterfaceBarCodeRel not exists)
									"Barcode<each.BarCode>AlreadyExistsInAssetInterface"		

					if (each.ItemType.Inventoried
					and each.TaxCode.TaxType.CalculatedRate)
						constraint (PayablesCompanyRel.TaxCode entered)
							"TaxToleranceSetupOnPayablesCompanyRequiredWhenUsingCalculatedRateTaxCode"

					if (!each.ItemType.Inventoried)
						if (PayablesInvoice.MatchProcessType.ServiceContract)
							constraint (each.TotalDistributionAmount = each.SumOfDistributions)
    	                    	"<MatchInvoiceErrorMessages.DistributionsOutOfBalanceForLineMsg>_<each.ContractLine>" 
							if (each.TaxCode entered
							and (each.TaxAmount entered 
							or   each.AccruedTaxAmount entered)
							and !PayablesInvoice.CallVertexByDocument
							and !TaxEntityRel.ThirdParty.Sabrix)
								constraint (each.TaxDistributionsRel exist)
									"MissingTaxDistributionsForLine<each.ContractLine>"
						else 
	                        constraint (each.DistributionsInBalance)
    	                    	"<MatchInvoiceErrorMessages.DistributionsOutOfBalanceForLineMsg><each.PurchaseOrderLine.LineNumber>" 





					if  (each.PurchaseOrderLine entered)
						constraint (each.ItemType = each.PurchaseOrderLine.ItemType
						or          each.ItemType = each.PurchaseOrderReceiptLine.ItemType)
							"<MatchInvoiceErrorMessages.ItemTypeOnInvoiceDoesNotMatchItemTypeOnPurchaseOrderMsg>_<each.PurchaseOrderLine.LineNumber>"
	
						constraint (each.Item = each.PurchaseOrderLine.Item
						or          each.Item = each.PurchaseOrderReceiptLine.Item)  
							"<MatchInvoiceErrorMessages.ItemOnInvoiceDoesNotMatchItemOnPurchaseOrderLineMsg>_<each.PurchaseOrderLine.LineNumber>"
	
						constraint (each.VendorItem = each.PurchaseOrderLine.VendorItem
						or          each.VendorItem = each.PurchaseOrderReceiptLine.VendorItem)
							"<MatchInvoiceErrorMessages.VendorItemOnInvoiceDoesNotMatchVendorItemOnPurchaseOrderMsg>_<each.PurchaseOrderLine.LineNumber>"

						if (each.ItemType.Special or each.ItemType.Service)
							if  (each.PurchaseOrderReceiptLine entered)
								constraint (each.EnteredUOM = each.PurchaseOrderReceiptLine.ReceivedUOM)
									"<MatchInvoiceErrorMessages.MustUsePurchaseOrderReceiptLineUOMMsg>" 
							else
								constraint (each.EnteredUOM = each.PurchaseOrderLine.VendorPriceUOM
								or          each.EnteredUOM = each.PurchaseOrderReceiptLine.VendorPriceUOM)
									"<MatchInvoiceErrorMessages.MustUsePurchaseOrderLineUOMMsg>" 

						if (each.IsCatchWeight)
							if  (each.PurchaseOrderReceiptLine entered)
								if (each.BuyUOMMatchedQuantity > each.PurchaseOrderReceiptLine.EnteredReceivedQuantity)
									constraint (each.EnteredQuantity > each.PurchaseOrderReceiptLine.CatchWeightQuantity)
										"<MatchInvoiceErrorMessages.CatchWeightSecondaryQuantityError>" 
								if (each.EnteredQuantity < each.PurchaseOrderReceiptLine.CatchWeightQuantity)
										constraint (each.BuyUOMMatchedQuantity < each.PurchaseOrderReceiptLine.BuyUOMQuantity)
                        					"CannotEnterPartialQuantityForCatchWeightItemIfBuyQuantityIsSetToFullQuantity"							
							else
								if (each.BuyUOMMatchedQuantity > each.PurchaseOrderLine.ReceivedQuantity)
									constraint (each.EnteredQuantity > each.PurchaseOrderLine.CatchWeightQuantity)
										"<MatchInvoiceErrorMessages.CatchWeightSecondaryQuantityError>" 
								if (each.EnteredQuantity < each.PurchaseOrderLine.CatchWeightQuantity)
										constraint (each.BuyUOMMatchedQuantity < each.PurchaseOrderLine.ReceivedQuantity)
                        					"CannotEnterPartialQuantityForCatchWeightItemIfBuyQuantityIsSetToFullQuantity"							

					if  (!ProcessMode.Reconciliation
					and   each.PurchaseOrderReceiptLine entered
					and   each.EnteredUOM = each.PurchaseOrderReceiptLine.ReceivedUOM)
						constraint (each.EnteredQuantity <= each.PurchaseOrderReceiptLine.EnteredReceivedQuantity)
							"<MatchInvoiceErrorMessages.EnteredQtyGreaterThanReceivedQtyMsg>ForLine<each.PurchaseOrderLine.LineNumber>"

					if  (each.EAMWorkOrder entered
					and  each.EAMWorkOrder.CompletionDate entered)
						constraint  (current corporate date <= each.EAMWorkOrder.CompletionDate + each.EAMWorkOrder.ChargeableDays as days)
							"WorkOrderIsPastChargeableDateForLine<each.PurchaseOrderLine.LineNumber>"

					if (each.ItemType.Inventoried)
						if  (ICSystemClosingControlRel.Control = true
						and  ICSystemClosingControlRel.ValidEntryDate entered)
							if  (each.EnteredUnitCost != each.PurchaseOrderLine.EnteredUnitCost)
								constraint (current corporate date within ICSystemClosingControlRel.ValidEntryDate)
									"PostDateOf<current corporate date>NotWithinValidEntryDatesForCompany<Company>;ValidDateRangeIs<ICSystemClosingControlRel.ValidEntryDate.Begin>-<ICSystemClosingControlRel.ValidEntryDate.End>"

							for each each.PayablesInvoiceAddOnChargeRel
							    if (!each.POAndLineAOCRel exists
							    and  each.LandedAddOnCharge)
									constraint (current corporate date within ICSystemClosingControlRel.ValidEntryDate)
										"PostDateOf<current corporate date>NotWithinValidEntryDatesForCompany<Company>;ValidDateRangeIs<ICSystemClosingControlRel.ValidEntryDate.Begin>-<ICSystemClosingControlRel.ValidEntryDate.End>"

					if (each.PurchaseOrderLine entered
					and !each.ItemType.Service 
					and each.SamePOLineDifferentInvoiceLineRel exists)
						constraint (each.PurchaseOrderReceiptLine entered) 
							"CouldNotMatchMultipleInvoicesForSinglePurchaseOrderLinePleaseDeleteAllDetailsAndRecreateReceiptDetails"

					if  (PayablesInvoice.MatchProcessType.ServiceContract
					and  !Company.EnableServiceCostMessaging)
						if (each.ContractLine.ServiceCode.Amount)
							invoke EditLimits each.ContractLine
								invoked.InDate                                  = PayablesInvoice.InvoiceDate
								invoked.InUOM.UnitOfMeasure                     = each.EnteredUOM
								invoked.InAmount                                = each.EnteredUnitCost 
								initialize invoked.InQuantity
						else
							invoke EditLimits each.ContractLine
								invoked.InDate              = PayablesInvoice.InvoiceDate
								invoked.InUOM.UnitOfMeasure = each.EnteredUOM
								invoked.InAmount            = each.EnteredQuantity * each.EnteredUnitCost
								invoked.InQuantity          = each.EnteredQuantity

				for each PayablesInvoice.PayablesInvoiceAddOnChargeRel
                    constraint (each.DistributionsInBalance)
                    	"<MatchInvoiceErrorMessages.DistributionsOutOfBalanceForAddOnChargeMsg><each.AddOnCharge>" 

			if (PayablesInvoice.RequireRemitTo) 
				constraint (PayablesInvoice.RemitToCode entered)
					"Field_\Remit_\To_\LocationIsRequiredBySetup"	

		100EditTran
		

			constraint (PayablesCompanyRel exists)
				"PayablesCompanyDoesNotExist"

            constraint (Company.ReceiptAccrualAccount entered)
                "ReceiptAccrualAccountHasNotBeenSetupForCompany"                
            constraint (Company.CostVarianceAccount entered)                  
                "CostVarianceAccountHasNotBeenSetupForCompany"                
            constraint (Company.ToleranceOffsetAccount entered)               
                "ToleranceOffsetAccountHasNotBeenSetupForCompany"                
            constraint (Company.ReceiptWriteOffAccount entered)               
                "ReceiptWriteOffAccountHasNotBeenSetupForCompany"                
            constraint (Company.MatchedNotReceivedAccount entered)            
                "MatchedNotReceivedAccountHasNotBeenSetupForCompany"                
            constraint (Company.MatchWriteOffAccount entered)                 
                "MatchWriteOffAccountHasNotBeenSetupForCompany"                
            constraint (Company.PrepayAccount entered)                        
                "PrepayAccountHasNotBeenSetupForCompany"                
            constraint (Company.AddOnChargeDifferenceAccount entered)         
                "AddOnChargeDifferenceAccountHasNotBeenSetupForCompany"                
            constraint (Company.InventoryReceiptArchivalAccount entered)      
                "InventoryReceiptArchivalAccountHasNotBeenSetupForCompany"                

			if (PayablesInvoice.InvoiceSource.SupplierCreated) 
            	constraint (!PayablesInvoice.SupplierCreatedInvoiceStatus.UnsubmittedSupplierCreatedInvoice)
                	"CannotMatch:SupplierInvoiceHasNotBeenSubmitted"

			if (!PayablesInvoice.MatchProcessType.ServiceContract
			and !PayablesInvoice.MatchProcessType.AOCOnly)
				for each PayablesInvoice.MatchPurchaseOrderInvoicesRel
					constraint (each.PurchaseOrder.Currency = PayablesInvoice.InvoiceCurrency)
						"InvoiceCurrency<PayablesInvoice.InvoiceCurrency>MustEqualPurchaseOrderCurrency<each.PurchaseOrder.Currency>"                   


			if  (ProcessMode.Reconciliation)
				MatchLevel												= ReconciliationMatchLevel
				LocalMatchRuleToleranceGroup.InvoiceMatchLevel			= ReconciliationMatchLevel

				if  (ReconciliationUpdate
				and  ReconciliationChargebackIndicator)
					LocalMatchRuleToleranceGroup.CreateChargeback		= true
				else
					LocalMatchRuleToleranceGroup.CreateChargeback		= false		
		      
				if  (ReconciliationMatchLevel.DetailMatch)
					LocalMatchRuleToleranceGroup.MatchRuleType 			= "1-A"
				else
					LocalMatchRuleToleranceGroup.MatchRuleType 			= "A-A"

				MatchRuleType											= LocalMatchRuleToleranceGroup.MatchRuleType										
				MatchRuleResult											= LocalMatchRuleToleranceGroup.MatchRuleType

				OverrideDetail											= false
				OverrideAOCDetail										= false

				if  (ReconciliationUpdate
				and  ReconciliationOverrideDetail)
					OverrideDetail										= true
					OverrideAOCDetail									= true
		
		
		300MatchProcessing


		
			Sub1 = 1
			Done = false
			initialize RuleCount
			
            while (!Done)
            	RuleCount += 1
            	
            	if  (MatchRule.MatchRuleToleranceArray.MatchRuleToleranceGroup[Sub1].InvoiceMatchLevel.InvoiceMatch
            	and  MatchRule.MatchRuleToleranceArray.MatchRuleToleranceGroup[Sub1].MatchToleranceOption.ExtendedAndQuantity)
					ExtendedAndQuantityToleranceExists	= true  

            	if  (MatchRule.MatchRuleToleranceArray.MatchRuleToleranceGroup[Sub1].MatchRuleType.OneToAll
            	and  MatchRule.MatchRuleToleranceArray.MatchRuleToleranceGroup[Sub1].InvoiceMatchLevel.InvoiceMatch)
            		OneToAllDetailMatchRuleExists		= true 

            	if  (MatchRule.MatchRuleToleranceArray.MatchRuleToleranceGroup[Sub1].InvoiceMatchLevel.DetailMatch)
            		DetailMatch							= true  

            	if  (MatchRule.MatchRuleToleranceArray.MatchRuleToleranceGroup[Sub1].MatchRuleType.OneToAll)
            		OneToAllRuleExists					= true  

				if  (MatchRule.MatchRuleToleranceArray.MatchRuleToleranceGroup[Sub1].InvoiceMatchLevel.InvoiceMatch)
            		MatchByRefRule						= true
				
            	if  (MatchRule.MatchRuleToleranceArray.MatchRuleToleranceGroup[Sub1].MatchRuleType.AllToAll)
            		AllToAllRuleExists					= true  

            	if  (MatchRule.MatchRuleToleranceArray.MatchRuleToleranceGroup[Sub1].MatchRuleType.AllToOne)
            		AllToOneRuleExists					= true  

            	if  (MatchRule.MatchRuleToleranceArray.MatchRuleToleranceGroup[Sub1].InvoiceMatchLevel.InvoiceMatch
            	and (MatchRule.MatchRuleToleranceArray.MatchRuleToleranceGroup[Sub1].MatchRuleType.AllToOne
            	or   MatchRule.MatchRuleToleranceArray.MatchRuleToleranceGroup[Sub1].MatchRuleType.AllToAll))
            		InvoiceMatchAllExists				= true  
            		
            	if  (MatchRule.MatchRuleToleranceArray.MatchRuleToleranceGroup[Sub1].InvoiceMatchLevel.InvoiceMatch
				and  !WithInvoiceMatch)
					WithInvoiceMatch					= true  

				Sub1 += 1
				
            	if (Sub1 > 6
            	or  MatchRule.MatchRuleToleranceArray.MatchRuleToleranceGroup[Sub1].InvoiceMatchLevel not entered)
            		Done = true
      
			if  (MultiplePurchaseOrders
			and  !OneToAllRuleExists
			and ((PayablesInvoice.MatchProcessType.ReceiptMatch
			or    PayablesInvoice.MatchProcessType.Service
			or    PayablesInvoice.MatchProcessType.DropShip)
			or    PayablesInvoice.CostComponentMatch))
				constraint (!MultiplePurchaseOrders)
					"1-ARuleRequiredForMultiplePOProcessing"

			if  (PayablesInvoice.TaxCode.TaxType.CalculatedRate)
				constraint (DetailMatch)
					"<MatchInvoiceErrorMessages.Msg412>"	

			if (ProcessByMatchReference)
				constraint (MatchByRefRule)
					"MatchReferenceMatchingRequiresInvoiceMatchRule"


					

			Sub1 = 1
			Done = false

			initialize WithPreviousDetailMatch
				



			include 301MatchLoop

			if (!Done)  
				include 301MatchLoop
			if (!Done)  
				include 301MatchLoop
			if (!Done)  
				include 301MatchLoop
			if (!Done)  
				include 301MatchLoop
			if (!Done)  
				include 301MatchLoop


			if (!MatchTestOK)
				if  (Sub1 > 2)
					NoReceiptMessage						= false
					AddOnToleranceMessage					= false
					ExitLoop								= false

					Msg1									= MatchErrorTable.MatchErrorGroup[1].MatchErrorMessage
					
					I4 = 1
					
					while (I4 <= 6 and !ExitLoop and MatchErrorTable.MatchErrorGroup[I4].MatchErrorMessage entered)

						Msg2								= MatchErrorTable.MatchErrorGroup[I4].MatchErrorMessage








						if  (MatchErrorTable.MatchErrorGroup[I4].MatchErrorMessage contains "Receipt")

							NoReceiptMessage				= true
							if  (MatchErrorTable.MatchErrorGroup[1].MatchErrorMessage contains "Receipt")
							    NextSentence = true
							else
								MatchErrorTable.MatchErrorGroup[1].MatchErrorMessage = MatchErrorTable.MatchErrorGroup[I4].MatchErrorMessage
						else
						if  (PayablesInvoice.CostComponentMatch
						and  MatchErrorTable.MatchErrorGroup[I4].MatchErrorMessage contains "add on charge line out of tolerance")

							AddOnToleranceMessage				= true





							
						I4 += 1



																							
					MatchSub1	= 1



					if  (TotalDetailRecords entered)
						if (!NoReceiptMessage
						and !AddOnToleranceMessage)
							MatchErrorTable.MatchErrorGroup[MatchSub1].MatchErrorMessage 		= MatchInvoiceErrorMessages.Msg255 
							MatchErrorTable.MatchErrorGroup[MatchSub1].MatchError				= true
					else
						MatchErrorTable.MatchErrorGroup[MatchSub1].MatchErrorMessage 			= MatchInvoiceErrorMessages.Msg213 
						MatchErrorTable.MatchErrorGroup[MatchSub1].MatchError					= true
						if  (WithInvoiceMatch 
						or  (InPrepaids
						and  PayablesInvoice.MatchPrepaymentMethod.PrepayFromInvoice))
							MatchErrorTable.MatchErrorGroup[MatchSub1].MatchErrorMessage 		= MatchInvoiceErrorMessages.Msg255
							
					if  (TotalAocRecords entered
					and  SkipInvoiceMatch) 
						MatchErrorTable.MatchErrorGroup[MatchSub1].MatchErrorMessage 			= MatchInvoiceErrorMessages.Msg256 
						MatchErrorTable.MatchErrorGroup[MatchSub1].MatchError					= true 


					if (NoReceiptMessage 
					and OverQuantityRestricted)
						MatchErrorTable.MatchErrorGroup[MatchSub1].MatchErrorMessage 			= MatchInvoiceErrorMessages.MnrQuantitiesNotAllowedMsg 


					constraint (MatchErrorTable.MatchErrorGroup[MatchSub1].MatchError not entered)
						"<MatchErrorTable.MatchErrorGroup[MatchSub1].MatchErrorMessage>"

				else
					MatchSub1	= 1

					if  (TotalAocRecords entered
					and  SkipInvoiceMatch) 
						MatchErrorTable.MatchErrorGroup[MatchSub1].MatchErrorMessage 			= MatchInvoiceErrorMessages.Msg257 
						MatchErrorTable.MatchErrorGroup[MatchSub1].MatchError					= true 
					
					LocalMatchRuleToleranceGroup.InvoiceMatchLevel	= MatchRule.MatchRuleToleranceArray.MatchRuleToleranceGroup[MatchSub1].InvoiceMatchLevel
						 
			if  (!MatchTestOK)

				MatchErrorType = MatchErrorTable.MatchErrorGroup[MatchSub1].MatchErrorType














						














				constraint (MatchErrorTable.MatchErrorGroup[MatchSub1].MatchError not entered)
					"<MatchErrorTable.MatchErrorGroup[MatchSub1].MatchErrorMessage>"
			else
					





				include 304BuildWorkFiles
	      

	
				if  (MatchWorkInvoiceDetailRel exists)
					InvoiceDetailKeyed												= true
				else
					InvoiceDetailKeyed												= false
					
				if  (MatchWorkInvoiceAddOnChargeRel exists)
					InvoiceAddOnChargeKeyed											= true
				else
					InvoiceAddOnChargeKeyed											= false
	


				if  (LocalMatchRuleToleranceGroup.InvoiceMatchLevel.InvoiceMatch)
					if  (InvoiceDetailKeyed)
						OverrideDetail												= true
	
					if  (!InvoiceAddOnChargeKeyed)
						OverrideAOCDetail											= true

		301MatchLoop


			LocalMatchRuleToleranceGroup = MatchRule.MatchRuleToleranceArray.MatchRuleToleranceGroup[Sub1] 
			LocalMatchMessageToleranceGroup = MatchMessageToleranceRel.MatchMessageToleranceArray.MatchMessageToleranceGroup[Sub1]



			MatchLevel 		= LocalMatchRuleToleranceGroup.InvoiceMatchLevel
			MatchRuleType 	= LocalMatchRuleToleranceGroup.MatchRuleType           	




		
			Continue	= true
           	RuleCount 	-= 1

        	if  (LocalMatchRuleToleranceGroup.InvoiceMatchLevel.InvoiceMatch)
				if  (PayablesInvoice.RetainageAccrualCode entered)
					MatchErrorTable.MatchErrorGroup[Sub1].MatchErrorMessage 	= MatchInvoiceErrorMessages.Msg179
					MatchErrorTable.MatchErrorGroup[Sub1].MatchError			= true 
				if  (PayablesInvoice.MatchProcessType.DropShip)
					MatchErrorTable.MatchErrorGroup[Sub1].MatchErrorMessage 	= MatchInvoiceErrorMessages.Msg123
					MatchErrorTable.MatchErrorGroup[Sub1].MatchError			= true 
				if  (PayablesInvoice.MatchProcessType.Service
				or   PayablesInvoice.MatchProcessType.ServiceContract)
					MatchErrorTable.MatchErrorGroup[Sub1].MatchErrorMessage 	= MatchInvoiceErrorMessages.Msg124
					MatchErrorTable.MatchErrorGroup[Sub1].MatchError			= true 
				if  (DistributionByAmount   
				and (!PayablesInvoice.MatchProcessType.AOCOnly
				or    PayablesInvoice.CostComponentMatch))
					MatchErrorTable.MatchErrorGroup[Sub1].MatchErrorMessage 	= MatchInvoiceErrorMessages.Msg125
					MatchErrorTable.MatchErrorGroup[Sub1].MatchError			= true 

			if (MatchErrorTable.MatchErrorGroup[Sub1].MatchError)

				Continue 									= false
				
			if (Continue)

				if ((LinkedAutoMatchResult entered
				or   PayablesInvoice.RuleGroup entered)
				and PayablesInvoice.MatchPrepaymentMethod.PrepayFromInvoice
		        and AutoMatchResultRel.PrmPrepaymentInvoiceMatchRule entered)
				    NextSentence = true
				else
				if ((LinkedAutoMatchResult entered
				or   PayablesInvoice.RuleGroup entered)
				and PayablesInvoice.MatchPrepaymentMethod.EligibleForPrepay
		        and AutoMatchResultRel.PrmPrepaymentDetailMatchRule entered)
				    NextSentence = true
				else
				if (InPrepaids
				and PayablesInvoice.MatchPrepaymentMethod.PrepayFromInvoice)
					if (MultiplePurchaseOrders)
						LocalMatchRuleToleranceGroup.MatchRuleType 			= "1-A"
					else
						LocalMatchRuleToleranceGroup.MatchRuleType 			= "1-1"
					initialize LocalMatchRuleToleranceGroup.MatchUnderAmountTolerance
					initialize LocalMatchRuleToleranceGroup.MatchUnderAmountPercentage
					initialize LocalMatchRuleToleranceGroup.MatchUnderAmountCondition
					initialize LocalMatchRuleToleranceGroup.MatchOverAmountTolerance
					initialize LocalMatchRuleToleranceGroup.MatchOverAmountPercentage
					initialize LocalMatchRuleToleranceGroup.MatchOverAmountCondition
					initialize LocalMatchRuleToleranceGroup.CreateChargeback
					initialize LocalMatchRuleToleranceGroup.MatchOverQuantityTolerance
					initialize LocalMatchRuleToleranceGroup.MatchOverQuantityCondition
					initialize LocalMatchRuleToleranceGroup.MatchOverQuantityPercentage
					initialize LocalMatchRuleToleranceGroup.MatchUnderQuantityTolerance
					initialize LocalMatchRuleToleranceGroup.MatchUnderQuantityCondition
					initialize LocalMatchRuleToleranceGroup.MatchUnderQuantityPercentage
					initialize LocalMatchRuleToleranceGroup.CreateChargeback



				if ((LinkedAutoMatchResult entered
				or   PayablesInvoice.RuleGroup entered)
				and PayablesInvoice.MatchPrepaymentMethod.PrepayFromInvoice
		        and AutoMatchResultRel.PrmPrepaymentInvoiceMatchRule entered)
				    NextSentence = true
				else
				if ((LinkedAutoMatchResult entered
				or   PayablesInvoice.RuleGroup entered)
				and PayablesInvoice.MatchPrepaymentMethod.EligibleForPrepay
		        and AutoMatchResultRel.PrmPrepaymentDetailMatchRule entered)
				    NextSentence = true
				else
				if (InPrepaids
				and ProcessMode.Batch)
					if (PayablesInvoice.MatchPrepaymentMethod.PrepayFromInvoice)
						LocalMatchRuleToleranceGroup.InvoiceMatchLevel 	= "IM"
						MatchLevel										= "IM"
					else
						LocalMatchRuleToleranceGroup.InvoiceMatchLevel 	= "DM"
						MatchLevel										= "DM"

				if (PayablesInvoice.InvoiceSource.ERS)

					OriginalRuleType 									= LocalMatchRuleToleranceGroup.MatchRuleType
					LocalMatchRuleToleranceGroup.MatchRuleType			= "1-1"
		
					if (LocalMatchRuleToleranceGroup.InvoiceMatchLevel.DetailMatch)
						include 370Detail1To1Matching
					else
						include 304BuildWorkFiles
						
						if (!MatchWorkReceiptForInvoiceRel exists)
							ERS 										= false
							LocalMatchRuleToleranceGroup.MatchRuleType	= OriginalRuleType
						else
							ERS											= true
		      
							InvoiceMatchedAmount             			= PayablesInvoice.MatchAmount
							InvoiceMatchedQuantity         				= PayablesInvoice.HashQuantity
							ReceiptMatchedAmount                		= sum MatchWorkReceiptForInvoiceRel.UnmatchedAmount
							ReceiptMatchedQuantity          			= sum MatchWorkReceiptForInvoiceRel.HashQuantity - sum MatchWorkReceiptForInvoiceRel.HashQuantityMatched
		
							invoke FastUpdate MatchWorkReceiptForInvoiceRel
								invoked.MatchSub						= Sub1
								invoked.Selected						= true	      
		
							MatchTestOK									= true
							MatchSub1									= Sub1
							MatchRuleResult								= LocalMatchRuleToleranceGroup.MatchRuleType
							MatchedFromRoutine							= "310"



					if (ERS)
						Continue = false

			if (Continue)
				if (ProcessByMatchReference)
					if  (!MatchErrorTable.MatchErrorGroup[Sub1].MatchError
					and  LocalMatchRuleToleranceGroup.InvoiceMatchLevel.InvoiceMatch)
						include 390MatchRefIM	

					Continue = false
               
			if (Continue)
	      
				if 	(LocalMatchRuleToleranceGroup.InvoiceMatchLevel.InvoiceMatch
				and  LocalMatchRuleToleranceGroup.MatchToleranceOption.ExtendedAndQuantity)
					if (PayablesInvoice.MatchProcessType.AOCOnly)
						MatchErrorTable.MatchErrorGroup[Sub1].MatchErrorMessage 	= MatchInvoiceErrorMessages.Msg174 
						MatchErrorTable.MatchErrorGroup[Sub1].MatchError			= true 
						MatchErrorTable.MatchErrorGroup[Sub1].MatchErrorType		= 4
						Continue													= false
					else
					if  (instance count of MatchWorkInvoiceDetailRel = 0
					and  instance count of PayablesInvoice.PayablesInvoiceDetailRel = 0)
						MatchErrorTable.MatchErrorGroup[Sub1].MatchErrorMessage 	= MatchInvoiceErrorMessages.Msg173
						MatchErrorTable.MatchErrorGroup[Sub1].MatchError			= true 
						MatchErrorTable.MatchErrorGroup[Sub1].MatchErrorType		= 4
						Continue													= false
	      
			if (Continue)
            	if  (LocalMatchRuleToleranceGroup.MatchRuleType.OneToOne
            	and  LocalMatchRuleToleranceGroup.InvoiceMatchLevel.InvoiceMatch)

		
					include 304BuildWorkFiles
					include InvoiceMatchEdits
					if  (!MatchErrorTable.MatchErrorGroup[Sub1].MatchError)
						WithinTolerance												= false      
						include 351Match1To1Source      
		
					if  (!MatchErrorTable.MatchErrorGroup[Sub1].MatchError
					and   WithinTolerance)
						MatchTestOK													= true
						MatchSub1													= Sub1
						MatchRuleResult												= LocalMatchRuleToleranceGroup.MatchRuleType
						MatchedFromRoutine											= "350"


            	else
            	if  ((LocalMatchRuleToleranceGroup.MatchRuleType.OneToAll
            	and   LocalMatchRuleToleranceGroup.InvoiceMatchLevel.InvoiceMatch)
            	or   (LocalMatchRuleToleranceGroup.MatchRuleType.AllToOne
            	and   LocalMatchRuleToleranceGroup.InvoiceMatchLevel.InvoiceMatch))

					WithinTolerance													= false
					include 304BuildWorkFiles
					include InvoiceMatchEdits

					if  (!MatchErrorTable.MatchErrorGroup[Sub1].MatchError)
						if  (PoolOption.CompanyVendor
						and  MultiplePurchaseOrders)
							include 363Match1ToAllMult
						else	      
			            if  (LocalMatchRuleToleranceGroup.MatchRuleType.OneToAll)
			            	include 361Match1ToAllReceipts
						else	      
						if  (!SkipAllToAll
						and  !MultiplePurchaseOrders
			            and  LocalMatchRuleToleranceGroup.MatchRuleType.AllToOne)
							include 362MatchEachReceipt
		

            	else
            	if  (LocalMatchRuleToleranceGroup.MatchRuleType.AllToAll
            	and  LocalMatchRuleToleranceGroup.InvoiceMatchLevel.InvoiceMatch)
            		include 340MatchAllToAllHandlingTable
            	else
				if  ((PayablesInvoice.MatchProcessType.Service
				or    PayablesInvoice.MatchProcessType.DropShip)
            	and  LocalMatchRuleToleranceGroup.InvoiceMatchLevel.DetailMatch)
            		include 380Detail1ToAllMatching
				else
            	if   ((LocalMatchRuleToleranceGroup.MatchRuleType.OneToOne
            	and    LocalMatchRuleToleranceGroup.InvoiceMatchLevel.DetailMatch)
            	or    (LocalMatchRuleToleranceGroup.MatchRuleType.AllToOne
            	and    LocalMatchRuleToleranceGroup.InvoiceMatchLevel.DetailMatch))
            		include 370Detail1To1Matching
				else
            	if   (LocalMatchRuleToleranceGroup.MatchRuleType.OneToAll
            	and   LocalMatchRuleToleranceGroup.InvoiceMatchLevel.DetailMatch)
            		include 380Detail1ToAllMatching
      
			Sub1 += 1

			if  (Sub1 > 6
           	or   MatchRule.MatchRuleToleranceArray.MatchRuleToleranceGroup[Sub1].InvoiceMatchLevel not entered
           	or   MatchTestOK)

           		Done = true

		InvoiceMatchEdits

			if  (HasServiceLines)
				MatchErrorTable.MatchErrorGroup[Sub1].MatchErrorMessage 		= MatchInvoiceErrorMessages.Msg209
				MatchErrorTable.MatchErrorGroup[Sub1].MatchError				= true 
			else
			if  (PayablesInvoice.CostComponentMatch
			and  first MatchWorkInvoiceAddOnChargeRel exists)
				SkipInvoiceMatch												= true
				MatchErrorTable.MatchErrorGroup[Sub1].MatchErrorMessage 		= MatchInvoiceErrorMessages.Msg256
				MatchErrorTable.MatchErrorGroup[Sub1].MatchError				= true 
			else
			if  (DistributionByAmount
			and  RuleCount not entered)
				MatchErrorTable.MatchErrorGroup[Sub1].MatchErrorMessage 		= MatchInvoiceErrorMessages.Msg125
				MatchErrorTable.MatchErrorGroup[Sub1].MatchError				= true 
			else
			if  (PayablesInvoice.MatchProcessType.DropShip
			and  RuleCount not entered)
				MatchErrorTable.MatchErrorGroup[Sub1].MatchErrorMessage 		= MatchInvoiceErrorMessages.Msg124
				MatchErrorTable.MatchErrorGroup[Sub1].MatchError				= true 
			else
			if  (Vendor.RequireMatchReference
            and  !PurchaseOrderReceiptMatchReferenceRel exists)
				MatchErrorTable.MatchErrorGroup[Sub1].MatchErrorMessage 		= MatchInvoiceErrorMessages.Msg200Ref
				MatchErrorTable.MatchErrorGroup[Sub1].MatchError				= true 
				MatchErrorTable.MatchErrorGroup[Sub1].MatchErrorType	 		= 3
			else
			if  (!first MatchWorkReceiptRel exists
			and  !first MatchWorkReceiptLineRel exists)
				MatchErrorTable.MatchErrorGroup[Sub1].MatchErrorMessage 		= MatchInvoiceErrorMessages.Msg200
				MatchErrorTable.MatchErrorGroup[Sub1].MatchError				= true 
				MatchErrorTable.MatchErrorGroup[Sub1].MatchErrorType	 		= 3


		340MatchAllToAllHandlingTable


			if  (!SkipAllToAll
			and  !MultiplePurchaseOrders)
				WithinTolerance									= true
				initialize MatchErrorTable.MatchErrorGroup[Sub1]

				include 304BuildWorkFiles				      
      
				include InvoiceMatchEdits
				
				InvoiceMatchedAddOnCharge										= PayablesInvoice.MatchedAddOnChargeAmount
				ReceiptMatchedAddOnCharge										= MatporwrkAddOnCharge						
	            if (!PayablesInvoice.MatchProcessType.AOCOnly)
	                InvoiceMatchedAmount                     					= WorkTotalInvoiceMatchAmount
	                InvoiceMatchedQuantity		                     			= WorkTotalInvoiceHashQuantity
	                ReceiptMatchedAmount		                     			= MatporwrkAmount
	                ReceiptMatchedQuantity		                     			= MatporwrkQuantity

				if  (!MatchErrorTable.MatchErrorGroup[Sub1].MatchError)
	      
					if  (LocalMatchRuleToleranceGroup.MatchToleranceOption.ExtendedAndQuantity
					and  !PayablesInvoice.MatchProcessType.AOCOnly)
						Difference2Amount											= InvoiceMatchedQuantity - ReceiptMatchedQuantity
						Difference2WorkAmount										= PayablesInvoice.MatchAmount
						if (Difference2Amount entered)
							WithinTolerance											= false
							MatchErrorTable.MatchErrorGroup[Sub1].MatchErrorMessage = MatchInvoiceErrorMessages.Msg301
							MatchErrorTable.MatchErrorGroup[Sub1].MatchError		= true 
							MatchErrorTable.MatchErrorGroup[Sub1].MatchErrorType	= 4

				if  (!MatchErrorTable.MatchErrorGroup[Sub1].MatchError)


				
					if  (!PayablesInvoice.MatchProcessType.AOCOnly)
						Difference1Amount											= InvoiceMatchedAmount - ReceiptMatchedAmount
						DifferenceWorkAmount										= InvoiceMatchedAmount



						if (Difference1Amount < 0)
							include 303aCheckExtUnderTol
						else
						if (Difference1Amount > 0)
							include 303bCheckExtOverTol
							
						if (!WithinTolerance)
							MatchErrorTable.MatchErrorGroup[Sub1].MatchErrorMessage = MatchInvoiceErrorMessages.Msg205
							MatchErrorTable.MatchErrorGroup[Sub1].MatchError		= true 
							MatchErrorTable.MatchErrorGroup[Sub1].MatchErrorType	= 2
		  
				if  (!MatchErrorTable.MatchErrorGroup[Sub1].MatchError)
	
					WithinTolerance													= true
					MatchTestOK														= true
					MatchSub1														= Sub1
					MatchRuleResult													= LocalMatchRuleToleranceGroup.MatchRuleType
					MatchedFromRoutine												= "340"


		351Match1To1Source


			for each MatchWorkReceiptRel


				CurrentReceipt													= each.PurchaseOrderReceipt
				CurrentPurchaseOrder 											= each.PurchaseOrder
				
				if (CurrentMatchPurchaseOrderInvoiceRel exists)
				
					if  (LocalMatchRuleToleranceGroup.MatchToleranceOption.ExtendedAndQuantity
					and  !PayablesInvoice.MatchProcessType.AOCOnly)
						Difference2WorkAmount									= each.HashQuantity - each.HashQuantityMatched
						Difference2Amount										= PayablesInvoice.HashQuantity - Difference2WorkAmount



						if (Difference2Amount entered)
							WithinTolerance											= false
							MatchErrorTable.MatchErrorGroup[Sub1].MatchErrorMessage = MatchInvoiceErrorMessages.Msg301
							MatchErrorTable.MatchErrorGroup[Sub1].MatchError		= true 
							MatchErrorTable.MatchErrorGroup[Sub1].MatchErrorType	= 4
							
					if  (!MatchErrorTable.MatchErrorGroup[Sub1].MatchError
					and  !PayablesInvoice.MatchProcessType.AOCOnly)
						DifferenceWorkAmount									= each.UnmatchedAmount
						Difference1Amount										= PayablesInvoice.MatchAmount - DifferenceWorkAmount 




						if  (Difference1Amount < 0)
							include 303aCheckExtUnderTol
						else
						if  (Difference1Amount > 0)
							include 303bCheckExtOverTol
						else
							WithinTolerance = true
							
						if (!WithinTolerance)						
							MatchErrorTable.MatchErrorGroup[Sub1].MatchErrorMessage = MatchInvoiceErrorMessages.Msg206
							MatchErrorTable.MatchErrorGroup[Sub1].MatchError		= true 
							MatchErrorTable.MatchErrorGroup[Sub1].MatchErrorType	= 2
		
					if (!MatchErrorTable.MatchErrorGroup[Sub1].MatchError)
						WithinTolerance = true
						
						invoke FastUpdate each
							invoked.MatchSub										= Sub1
							invoked.Selected										= true
							
						invoke FastUpdate ThisMatchWorkInvoiceRel
							invoked.Selected										= true	      

						InvoiceMatchedAddOnCharge									= PayablesInvoice.MatchedAddOnChargeAmount
						ReceiptMatchedAddOnCharge									= MatporwrkAddOnCharge						


										        
			            if (!PayablesInvoice.MatchProcessType.AOCOnly)
			                InvoiceMatchedAmount                     				= PayablesInvoice.MatchAmount
			                InvoiceMatchedQuantity		                     		= PayablesInvoice.HashQuantity
			                ReceiptMatchedAmount		                     		= each.PurchaseOrderReceipt.ReceiptAmount - each.MatchedAmount
			                ReceiptMatchedQuantity		                     		= each.PurchaseOrderReceipt.HashQuantity - each.HashQuantityMatched





		      
						end for each

					
		361Match1ToAllReceipts


			if  (LocalMatchRuleToleranceGroup.MatchToleranceOption.ExtendedAndQuantity
			and  !PayablesInvoice.MatchProcessType.AOCOnly)
				Difference2Amount											= PayablesInvoice.HashQuantity - MatporwrkQuantity
				Difference2WorkAmount										= MatporwrkQuantity
	  
	  			if (Difference2Amount not entered)
	  				WithinTolerance = true
	  			else
					WithinTolerance											= false
					MatchErrorTable.MatchErrorGroup[Sub1].MatchErrorMessage = MatchInvoiceErrorMessages.Msg301
					MatchErrorTable.MatchErrorGroup[Sub1].MatchError		= true 
					MatchErrorTable.MatchErrorGroup[Sub1].MatchErrorType	= 4
	  			


			if  (!MatchErrorTable.MatchErrorGroup[Sub1].MatchError
			and  !PayablesInvoice.MatchProcessType.AOCOnly)
				Difference1Amount											= PayablesInvoice.MatchAmount - MatporwrkAmount
				DifferenceWorkAmount										= MatporwrkAmount
				
				if  (Difference1Amount not entered)
					WithinTolerance											= true
				else
				if  (Difference1Amount < 0)
					include 303aCheckExtUnderTol
				else
				if  (Difference1Amount > 0)
					include 303bCheckExtOverTol

				if (!WithinTolerance)
					WithinTolerance											= false
					MatchErrorTable.MatchErrorGroup[Sub1].MatchErrorMessage = MatchInvoiceErrorMessages.Msg210
					MatchErrorTable.MatchErrorGroup[Sub1].MatchError		= true 
					MatchErrorTable.MatchErrorGroup[Sub1].MatchErrorType	= 2

			if  (!MatchErrorTable.MatchErrorGroup[Sub1].MatchError)
				WithinTolerance												= true
	    
				InvoiceMatchedAddOnCharge									= WorkTotalInvoiceMatchAddOnCharge
				ReceiptMatchedAddOnCharge									= MatporwrkAddOnCharge						
	        
	            if (!PayablesInvoice.MatchProcessType.AOCOnly)
	                InvoiceMatchedAmount                     				= PayablesInvoice.MatchAmount
	                InvoiceMatchedQuantity		                     		= PayablesInvoice.HashQuantity
	                ReceiptMatchedAmount		                     		= MatporwrkAmount
	                ReceiptMatchedQuantity		                     		= MatporwrkQuantity

				MatchTestOK													= true
				MatchSub1													= Sub1
				MatchRuleResult												= LocalMatchRuleToleranceGroup.MatchRuleType
				MatchedFromRoutine											= "361"
	
	      
		362MatchEachReceipt	      


				
			for each MatchWorkReceiptRel
	            if  (LocalMatchRuleToleranceGroup.MatchToleranceOption.ExtendedAndQuantity
	            and  !PayablesInvoice.MatchProcessType.AOCOnly)



	            	Difference2Amount											= WorkTotalInvoiceHashQuantity - (each.HashQuantity - each.HashQuantityMatched)
	            	Difference2WorkAmount										= WorkTotalInvoiceHashQuantity
	            	
	            	if (Difference2Amount entered)
	            		WithinTolerance											= false
						MatchErrorTable.MatchErrorGroup[Sub1].MatchErrorMessage = MatchInvoiceErrorMessages.Msg301
						MatchErrorTable.MatchErrorGroup[Sub1].MatchError		= true 
						MatchErrorTable.MatchErrorGroup[Sub1].MatchErrorType	= 4
	            		

				if  (!MatchErrorTable.MatchErrorGroup[Sub1].MatchError
				and  !PayablesInvoice.MatchProcessType.AOCOnly)
					Difference1Amount											= WorkTotalInvoiceMatchAmount - each.UnmatchedAmount
					DifferenceWorkAmount										= WorkTotalInvoiceMatchAmount
					


					if  (Difference1Amount not entered)
						include 362MatchEachReceiptSuccessful
						end for each
					else
					if  (Difference1Amount < 0)
						include 303aCheckExtUnderTol
					else
					if  (Difference1Amount > 0)
						include 303bCheckExtOverTol
	
					if (!WithinTolerance)
						MatchTestOK												= false
						MatchErrorTable.MatchErrorGroup[Sub1].MatchErrorMessage = MatchInvoiceErrorMessages.Msg211
						MatchErrorTable.MatchErrorGroup[Sub1].MatchError		= true 
						MatchErrorTable.MatchErrorGroup[Sub1].MatchErrorType	= 2
	  

	
				if  (!MatchErrorTable.MatchErrorGroup[Sub1].MatchError)
					include 362MatchEachReceiptSuccessful


		362MatchEachReceiptSuccessful

				
			WithinTolerance												= true
    
			InvoiceMatchedAddOnCharge									= WorkTotalInvoiceMatchAddOnCharge
			ReceiptMatchedAddOnCharge									= each.UnmatchedAddOnCharge						
        
            if (!PayablesInvoice.MatchProcessType.AOCOnly)
                InvoiceMatchedAmount                     				= WorkTotalInvoiceMatchAmount
                InvoiceMatchedQuantity		                     		= WorkTotalInvoiceHashQuantity
                ReceiptMatchedAmount		                     		= each.PurchaseOrderReceipt.ReceiptAmount - each.MatchedAmount
                ReceiptMatchedQuantity		                     		= each.PurchaseOrderReceipt.HashQuantity - each.HashQuantityMatched





  
			invoke FastUpdate MatchWorkReceiptForInvoiceRel
				invoked.MatchSub										= Sub1
				invoked.Selected										= true	      

			invoke FastUpdate ThisMatchWorkInvoiceRel

				invoked.Selected										= true	      

			MatchTestOK													= true
			MatchSub1													= Sub1
			MatchRuleResult												= LocalMatchRuleToleranceGroup.MatchRuleType
			MatchedFromRoutine											= "362"

		363Match1ToAllMult

	      
			initialize TotalWorkfileAmount
			initialize TotalWorkfileAddOnCharge
			initialize TotalWorkfileQuantity
			initialize TotalWorkfileCount
			
			for each MatchWorkReceiptRel  

				TotalWorkfileAmount												+= each.PurchaseOrderReceipt.ReceiptAmount - each.PurchaseOrderReceipt.MatchedAmount
				TotalWorkfileAddOnCharge										+= each.UnmatchedAddOnCharge
				TotalWorkfileQuantity											+= each.HashQuantity - each.HashQuantityMatched
				TotalWorkfileCount												+= 1	      

				invoke FastUpdate each	      
					invoked.MatchSub											= Sub1
					invoked.Selected											= true	      
				      
	      
			if  (LocalMatchRuleToleranceGroup.MatchToleranceOption.ExtendedAndQuantity
            and  !PayablesInvoice.MatchProcessType.AOCOnly)
            	Difference2Amount												= WorkTotalInvoiceHashQuantity - TotalWorkfileQuantity
            	Difference2WorkAmount											= TotalWorkfileQuantity
            	
            	if (Difference2Amount entered)
            		WithinTolerance												= false
					MatchErrorTable.MatchErrorGroup[Sub1].MatchErrorMessage 	= MatchInvoiceErrorMessages.Msg211
					MatchErrorTable.MatchErrorGroup[Sub1].MatchError			= true 
					MatchErrorTable.MatchErrorGroup[Sub1].MatchErrorType		= 4
	      
			if  (!MatchErrorTable.MatchErrorGroup[Sub1].MatchError
			and  !PayablesInvoice.MatchProcessType.AOCOnly)
				Difference1Amount												= WorkTotalInvoiceMatchAmount - TotalWorkfileAmount
				DifferenceWorkAmount											= TotalWorkfileAmount
				
				if  (Difference1Amount not entered)
					WithinTolerance												= true
				else
				if  (Difference1Amount < 0)
					include 303aCheckExtUnderTol
				else
				if  (Difference1Amount > 0)
					include 303bCheckExtOverTol

				if (!WithinTolerance)
					WithinTolerance												= false
					MatchErrorTable.MatchErrorGroup[Sub1].MatchErrorMessage 	= MatchInvoiceErrorMessages.Msg211
					MatchErrorTable.MatchErrorGroup[Sub1].MatchError			= true 
					MatchErrorTable.MatchErrorGroup[Sub1].MatchErrorType		= 2
	  
	
				if  (!MatchErrorTable.MatchErrorGroup[Sub1].MatchError)
					WithinTolerance												= true
		    
					InvoiceMatchedAddOnCharge									= WorkTotalInvoiceMatchAddOnCharge
					ReceiptMatchedAddOnCharge									= TotalWorkfileAddOnCharge					
		        
		            if (!PayablesInvoice.MatchProcessType.AOCOnly)
		                InvoiceMatchedAmount                     				= WorkTotalInvoiceMatchAmount
		                InvoiceMatchedQuantity		                     		= WorkTotalInvoiceHashQuantity
		                ReceiptMatchedAmount		                     		= TotalWorkfileAmount
		                ReceiptMatchedQuantity		                     		= TotalWorkfileQuantity

					MatchTestOK													= true
					MatchSub1													= Sub1
					MatchRuleResult												= LocalMatchRuleToleranceGroup.MatchRuleType
					MatchedFromRoutine											= "363"
	      

		370Detail1To1Matching


			if  (MultiplePurchaseOrders
			and ((PayablesInvoice.MatchProcessType.ReceiptMatch
			or    PayablesInvoice.MatchProcessType.Service
			or    PayablesInvoice.MatchProcessType.DropShip)
			or    PayablesInvoice.CostComponentMatch))
				MatchErrorTable.MatchErrorGroup[Sub1].MatchErrorMessage 	= MatchInvoiceErrorMessages.Msg113
				MatchErrorTable.MatchErrorGroup[Sub1].MatchError			= true 
			else
				include 304BuildWorkFiles

				if  (!PayablesInvoice.CostComponentMatch
				and  !PayablesInvoice.MatchProcessType.AOCOnly
				and  !first MatchWorkInvoiceDetailRel exists
				and  !first MatchWorkInvoiceAddOnChargeRel exists
				and  !first MatchWorkReceiptLineRel exists
				and  !first MatchWorkServiceReceiptLineRel exists
				and  !first MatchWorkDropshipReceiptLineRel exists)
					if (MatchErrorTable.MatchErrorGroup[Sub1].MatchErrorMessage not entered)
						if  (LocalMatchRuleToleranceGroup.MatchRuleType.AllToOne)
							MatchErrorTable.MatchErrorGroup[Sub1].MatchErrorMessage 	= MatchInvoiceErrorMessages.Msg214
							MatchErrorTable.MatchErrorGroup[Sub1].MatchError			= true 
						else						
							MatchErrorTable.MatchErrorGroup[Sub1].MatchErrorMessage 	= MatchInvoiceErrorMessages.Msg217
							MatchErrorTable.MatchErrorGroup[Sub1].MatchError			= true 



			if (!MatchErrorTable.MatchErrorGroup[Sub1].MatchError)
			
				if  (PayablesInvoice.InvoiceSource.ERS)
					if (!MatchWorkReceiptForInvoiceRel exists)
						ERS = false
						LocalMatchRuleToleranceGroup.MatchRuleType	= OriginalRuleType
					else
						ERS = true

				if  (!PayablesInvoice.InvoiceSource.ERS
				or    ERS)

					initialize TotalInvoiceDetailAmount
					initialize TotalReceiptLineDetailAmount
					initialize TotalReceiptDetailAddOnCharge
					initialize TotalReceiptLineDetailQuantity
					initialize Difference1Amount
					initialize DetailMatchAmount
					initialize AccumulatedChargebackAmount
					initialize Difference3Amount
					initialize WithinTolerance
					initialize DetailMatchAmount
					initialize DetailMatchService
					initialize DetailMatchQuantity
					initialize DetailMatchAddOnCharge
					initialize SelectedInvoiceDetailMatchAmount
					initialize SelectedInvoiceDetailMatchService

					if (DocumentType.Invoice
					and UseReceiptNumber)
						
						include 375Match1To1DetailGoods
					else
						include 371Match1To1Detail
						






						if  (!MatchErrorTable.MatchErrorGroup[Sub1].MatchError		
						and   PayablesInvoice.CostComponentMatch)					
							WithinTolerance			= true
							include 383Match1ToAllDetailAOC
							if (!WithinTolerance)
								MatchErrorTable.MatchErrorGroup[Sub1].MatchErrorMessage 	= MatchInvoiceErrorMessages.Msg267
								MatchErrorTable.MatchErrorGroup[Sub1].MatchError			= true


					if  (!PayablesInvoice.CostComponentMatch
					and   PayablesInvoice.MatchProcessType.AOCOnly
					and  !MatchErrorTable.MatchErrorGroup[Sub1].MatchError)
						NextSentence = true
					else
					if  (PayablesInvoice.CostComponentMatch
					and  MatchErrorTable.MatchErrorGroup[Sub1].MatchError)
						NextSentence = true
					else

						if (MatchErrorTable.MatchErrorGroup[Sub1].MatchError
						and !PayablesInvoice.CostComponentMatch
						and CurrentReceiptLine not entered)
							NextSentence = true
						else	
						if (WithinTolerance)
							initialize MatchErrorTable.MatchErrorGroup[Sub1].MatchError
							initialize MatchErrorTable.MatchErrorGroup[Sub1].MatchErrorMessage
						else
						if (ReceiptHasIncompleteInspection)  
							MatchErrorTable.MatchErrorGroup[Sub1].MatchErrorMessage 			= MatchInvoiceErrorMessages.Msg199
							MatchErrorTable.MatchErrorGroup[Sub1].MatchError					= true 
						else
						if  (LocalMatchRuleToleranceGroup.MatchRuleType.AllToOne)
							if  (MatchErrorTable.MatchErrorGroup[Sub1].MatchErrorMessage != MatchInvoiceErrorMessages.MissingReceiptDetailMsg) 		
								MatchErrorTable.MatchErrorGroup[Sub1].MatchErrorMessage 		= MatchInvoiceErrorMessages.Msg211	
							MatchErrorTable.MatchErrorGroup[Sub1].MatchError					= true 
							MatchErrorTable.MatchErrorGroup[Sub1].MatchErrorType				= 2 
						else
							MatchErrorTable.MatchErrorGroup[Sub1].MatchErrorMessage 			= MatchInvoiceErrorMessages.Msg216
							MatchErrorTable.MatchErrorGroup[Sub1].MatchError					= true 
							MatchErrorTable.MatchErrorGroup[Sub1].MatchErrorType				= 2 
									

						
					if (!MatchErrorTable.MatchErrorGroup[Sub1].MatchError)
						invoke FastUpdate ThisMatchWorkInvoiceRel
							invoked.Selected													= true


						if (PayablesInvoice.MatchAmount	!= SelectedInvoiceDetailMatchAmount)
							if (RuleCount = 0)
								if (ReceiptHasIncompleteInspection)  
									MatchErrorTable.MatchErrorGroup[Sub1].MatchErrorMessage 	= MatchInvoiceErrorMessages.Msg199
									MatchErrorTable.MatchErrorGroup[Sub1].MatchError			= true
								else 
								if  (PayablesInvoice.MatchProcessType.DropShip
								or   PayablesInvoice.MatchProcessType.Service)
									MatchErrorTable.MatchErrorGroup[Sub1].MatchErrorMessage 	= MatchInvoiceErrorMessages.Msg122
									MatchErrorTable.MatchErrorGroup[Sub1].MatchError			= true
								else
								if  (SelectedInvoiceDetailMatchAmount not entered) 
									MatchErrorTable.MatchErrorGroup[Sub1].MatchErrorMessage 	= MatchInvoiceErrorMessages.Msg200
									MatchErrorTable.MatchErrorGroup[Sub1].MatchError			= true
								else	
									MatchErrorTable.MatchErrorGroup[Sub1].MatchErrorMessage 	= MatchInvoiceErrorMessages.Msg900 + PayablesInvoice.MatchAmount + "vs" + SelectedInvoiceDetailMatchAmount
									MatchErrorTable.MatchErrorGroup[Sub1].MatchError			= true


						if  (PayablesInvoice.CostComponentMatch
						and  PayablesInvoice.MatchedAddOnChargeAmount != SelectedInvoiceAddOnChargeMatchAmount)
							if (RuleCount = 0)

								MatchErrorTable.MatchErrorGroup[Sub1].MatchErrorMessage 		= MatchInvoiceErrorMessages.Msg198
								MatchErrorTable.MatchErrorGroup[Sub1].MatchError				= true



					if (!MatchErrorTable.MatchErrorGroup[Sub1].MatchError)
						if  (LocalMatchRuleToleranceGroup.MatchRuleType.AllToOne)
							ReceiptMatchedAmount												= PayablesInvoice.MatchAmount
							InvoiceMatchedAmount												= PayablesInvoice.MatchAmount
							ReceiptMatchedAddOnCharge											= PayablesInvoice.MatchedAddOnChargeAmount
							InvoiceMatchedAddOnCharge											= PayablesInvoice.MatchedAddOnChargeAmount
							ReceiptMatchedQuantity												= PayablesInvoice.HashQuantity
							InvoiceMatchedQuantity												= PayablesInvoice.HashQuantity
						else
							ReceiptMatchedAmount												= TotalReceiptLineDetailAmount
							InvoiceMatchedAmount												= PayablesInvoice.MatchAmount
							ReceiptMatchedAddOnCharge											= TotalReceiptDetailAddOnCharge
							InvoiceMatchedAddOnCharge											= PayablesInvoice.MatchedAddOnChargeAmount
							ReceiptMatchedQuantity												= TotalReceiptLineDetailQuantity
							InvoiceMatchedQuantity												= PayablesInvoice.HashQuantity
	
						MatchTestOK 															= true
						MatchSub1 																= Sub1
						MatchRuleResult 														= LocalMatchRuleToleranceGroup.MatchRuleType
						MatchedFromRoutine														= "370"
							


		371Match1To1Detail


			for each MatchWorkInvoiceDetailNoReceiptRel   			
				CurrentPurchaseOrder												= each.PurchaseOrder
				CurrentPurchaseOrderLine											= each.PurchaseOrderLine
				CurrentContract														= each.Contract
				CurrentContractLine													= each.ContractLine
				CurrentInvoiceDetail												= each.PayablesInvoiceDetail


				if (CurrentInvoiceDetailRel.ItemType.Service)
					initialize CurrentReceipt
					initialize CurrentReceiptLine				
					include 389ServiceDropshipEdits
					if (!WithinTolerance)
						MatchErrorTable.MatchErrorGroup[Sub1].MatchErrorMessage = MatchInvoiceErrorMessages.Msg208
						MatchErrorTable.MatchErrorGroup[Sub1].MatchError		= true 
						end for each
				else
					if (each.MatchWorkNoReceiptLineRel exists)
						for each each.MatchWorkNoReceiptLineRel

					        invoke FastUpdate CurrentInvoiceDetailRel
								invoked.Selected									= true
						        

					        invoke FastUpdate each
					        	invoked.Selected									= true
					        	invoked.MatchSub									= Sub1

							invoke FastUpdate each.MatchWorkReceiptRel
					        	invoked.Selected									= true
								invoked.MatchSub									= Sub1
	
							end for each
						
					else

						MatchErrorTable.MatchErrorGroup[Sub1].MatchErrorMessage 		= "PurchaseOrderLineNotFoundForItem"+ each.Item
						MatchErrorTable.MatchErrorGroup[Sub1].MatchError				= true 
				 	
			if (!MatchErrorTable.MatchErrorGroup[Sub1].MatchError)
				for each MatchWorkInvoiceDetailReceiptRel

					CurrentPurchaseOrder												= each.PurchaseOrder
					CurrentPurchaseOrderLine											= each.PurchaseOrderLine
					CurrentContract														= each.Contract
					CurrentContractLine													= each.ContractLine
					CurrentInvoiceDetail												= each.PayablesInvoiceDetail

					initialize CurrentReceipt
					initialize CurrentReceiptLine
	
					if  (CurrentInvoiceDetailRel.PayablesInvoiceDetail.PurchaseOrderReceiptLine entered)

						CurrentReceipt												= CurrentInvoiceDetailRel.PayablesInvoiceDetail.PurchaseOrderReceipt
						CurrentReceiptLine											= CurrentInvoiceDetailRel.PayablesInvoiceDetail.PurchaseOrderReceiptLine
			           	if (LocalMatchRuleToleranceGroup.MatchRuleType.AllToOne)
							include 373MatchAllTo1Detail
						else
							include 372Match1To1Detail
	
						if (MatchErrorTable.MatchErrorGroup[Sub1].MatchError)
							end for each
					else
					if  ((Vendor.PoolOption.CompanyVendorPoShipTo
					and   CurrentInvoiceDetailRel.first MatchWorkPOLineLocationRel not exists)
					or   (Vendor.PoolOption.CompanyVendorPoShipTo
					and   CurrentInvoiceDetailRel.first MatchWorkPOLineRel not exists))


						MatchErrorTable.MatchErrorGroup[Sub1].MatchErrorMessage 	= MatchInvoiceErrorMessages.ReceiptLineNotFoundForItemMsg + SingleSpace + CurrentInvoiceDetailRel.Item + WorkInReconMsg
						MatchErrorTable.MatchErrorGroup[Sub1].MatchError			= true 
					else
					if  (Vendor.PoolOption.CompanyVendorPoShipTo)

	
						if (CurrentInvoiceDetailRel.MatchWorkPOLineLocationRel not exists)

							MatchErrorTable.MatchErrorGroup[Sub1].MatchErrorMessage 	= MatchInvoiceErrorMessages.ReceiptLineNotFoundForItemMsg + SingleSpace + CurrentInvoiceDetailRel.Item + WorkInReconMsg
							MatchErrorTable.MatchErrorGroup[Sub1].MatchError			= true 
						else
							for each CurrentInvoiceDetailRel.MatchWorkPOLineLocationRel
								CurrentReceipt						= each.PurchaseOrderReceipt
								CurrentReceiptLine					= each.PurchaseOrderReceiptLine
		
								MatchErrorTable.MatchErrorGroup[Sub1].MatchErrorMessage 	= blank
								MatchErrorTable.MatchErrorGroup[Sub1].MatchError			= false
								MatchErrorTable.MatchErrorGroup[Sub1].MatchErrorType		= blank
		
					           	if (LocalMatchRuleToleranceGroup.MatchRuleType.AllToOne)
									include 373MatchAllTo1Detail
								else
									include 372Match1To1Detail
									
								if  (CurrentReceiptLineRel.Selected)
									end for each
					else

						if (CurrentInvoiceDetailRel.MatchWorkPOLineRel not exists)

							MatchErrorTable.MatchErrorGroup[Sub1].MatchErrorMessage 	= MatchInvoiceErrorMessages.ReceiptLineNotFoundForItemMsg + SingleSpace + CurrentInvoiceDetailRel.Item + WorkInReconMsg
							MatchErrorTable.MatchErrorGroup[Sub1].MatchError			= true 
	
						else

							for each CurrentInvoiceDetailRel.MatchWorkPOLineRel
								CurrentReceipt						= each.PurchaseOrderReceipt
								CurrentReceiptLine					= each.PurchaseOrderReceiptLine
		
								MatchErrorTable.MatchErrorGroup[Sub1].MatchErrorMessage 	= blank
								MatchErrorTable.MatchErrorGroup[Sub1].MatchError			= false
								MatchErrorTable.MatchErrorGroup[Sub1].MatchErrorType		= blank
		
					           	if (LocalMatchRuleToleranceGroup.MatchRuleType.AllToOne)
									include 373MatchAllTo1Detail
								else
									include 372Match1To1Detail
							
								if  (CurrentReceiptLineRel.Selected)
									end for each
	

					if (MatchErrorTable.MatchErrorGroup[Sub1].MatchError)
						end for each
					else
					if (!MatchErrorTable.MatchErrorGroup[Sub1].MatchError)
						if (!PayablesInvoice.CostComponentMatch)
							TotalReceiptDetailAddOnCharge	+= sum CurrentReceiptLineAOCRel.MiscellaneousAddOnChargeInvoicedAmount


	
		372Match1To1Detail

			
			if  (CurrentReceiptLineRel.ItemType.Special
			and  CurrentReceiptLineRel.VendorPriceUOM != CurrentInvoiceDetailRel.PayablesInvoiceDetail.VendorPriceUOM)

				MatchErrorTable.MatchErrorGroup[Sub1].MatchErrorMessage = MatchInvoiceErrorMessages.Msg223
				MatchErrorTable.MatchErrorGroup[Sub1].MatchError		= true 
				MatchErrorTable.MatchErrorGroup[Sub1].MatchErrorType	= 2 
				WithinTolerance											= false 

			if (!MatchErrorTable.MatchErrorGroup[Sub1].MatchError)

				if  (MatchTable.ChargebackType.Overbill
				and  CurrentInvoiceDetailRel.MatchAmount > CurrentReceiptLineRel.DerivedMatchAmount)
					AccumulatedChargebackAmount					+= CurrentInvoiceDetailRel.MatchAmount - CurrentReceiptLineRel.DerivedMatchAmount
	
				if  (LocalMatchRuleToleranceGroup.MatchToleranceOption.Extended
				or   LocalMatchRuleToleranceGroup.MatchToleranceOption.ExtendedAndQuantity)
	
					Difference1Amount							= CurrentInvoiceDetailRel.MatchAmount - CurrentReceiptLineRel.DerivedMatchAmount
					DifferenceWorkAmount			 			= CurrentReceiptLineRel.DerivedMatchAmount




							
					if (Difference1Amount not entered)
						WithinTolerance							= true
					else
					if  (Difference1Amount						< 0)
						include 303aCheckExtUnderTol
					else
						include 303bCheckExtOverTol
				else
					Difference2Amount							= CurrentInvoiceDetailRel.MatchUnitCost - CurrentReceiptLineRel.DerivedMatchUnitCost
					Difference2WorkAmount						= CurrentReceiptLineRel.DerivedMatchUnitCost
					



							
					if (Difference2Amount = 0)
						WithinTolerance							= true
					else
					if  (Difference2Amount						< 0)
						include 303cCheckUnitUnderTol
					else
						include 303dCheckUnitOverTol
			

			if (WithinTolerance
			and !MatchErrorTable.MatchErrorGroup[Sub1].MatchError)

				if  (LocalMatchRuleToleranceGroup.MatchToleranceOption.UnitCost)
					if (CurrentInvoiceDetailRel.IsCatchWeight)
						if (CurrentReceiptLineRel.PurchaseOrderReceiptLine.CalculateRemainingQuantity > 0)
							Difference2Amount		= CurrentInvoiceDetailRel.PayablesInvoiceDetail.BuyUOMMatchedQuantity - CurrentReceiptLineRel.PurchaseOrderReceiptLine.CalculateRemainingQuantity
							Difference2WorkAmount	= CurrentReceiptLineRel.PurchaseOrderReceiptLine.CalculateRemainingQuantity
						else
							Difference2Amount		= CurrentInvoiceDetailRel.BuyUOMMatchedQuantity - CurrentReceiptLineRel.PurchaseOrderReceiptLine.BuyUOMQuantity
							Difference2WorkAmount	= CurrentReceiptLineRel.PurchaseOrderReceiptLine.BuyUOMQuantity
					else
					if (CurrentReceiptLineRel.DerivedOpenToMatchQuantity > 0)
						Difference2Amount		= CurrentInvoiceDetailRel.MatchedQuantity - CurrentReceiptLineRel.DerivedOpenToMatchQuantity
						Difference2WorkAmount	= CurrentReceiptLineRel.DerivedOpenToMatchQuantity
					else
						Difference2Amount		= CurrentInvoiceDetailRel.MatchedQuantity - CurrentReceiptLineRel.PurchaseOrderReceiptLine.VendorPriceUOMQuantity
						Difference2WorkAmount	= CurrentReceiptLineRel.PurchaseOrderReceiptLine.VendorPriceUOMQuantity



					if (Difference2Amount = 0)
						WithinTolerance							= true
					else
					if  (Difference2Amount						< 0)
						include 303eCheckQtyUnderTol
					else
						include 303fCheckQtyOverTol

			if (!WithinTolerance)
				if  (CurrentInvoiceDetailRel.EnteredQuantity > (CurrentPurchaseOrderLineRel.ReceivedQuantity - CurrentPurchaseOrderLineRel.MatchedQuantity))				
					MatchErrorTable.MatchErrorGroup[Sub1].MatchErrorMessage 	= MatchInvoiceErrorMessages.MissingReceiptDetailMsg + SingleSpace + CurrentInvoiceDetailRel.Item
					MatchErrorTable.MatchErrorGroup[Sub1].MatchError			= true
				else 
					MatchErrorTable.MatchErrorGroup[Sub1].MatchErrorMessage 		= MatchInvoiceErrorMessages.Msg211
					MatchErrorTable.MatchErrorGroup[Sub1].MatchError				= true 
					MatchErrorTable.MatchErrorGroup[Sub1].MatchErrorType			= 2


			if (!MatchErrorTable.MatchErrorGroup[Sub1].MatchError)

				TotalReceiptLineDetailAmount									+= CurrentReceiptLineRel.DerivedMatchAmount
				TotalReceiptLineDetailQuantity									+= CurrentReceiptLineRel.DerivedUnmatchedQuantity
				DetailDifference1Amount											+= Difference1Amount
				DetailMatchAmount												+= CurrentInvoiceDetailRel.MatchAmount
				SelectedInvoiceDetailMatchAmount								+= CurrentInvoiceDetailRel.MatchAmount


				if (CurrentInvoiceDetailRel.MatchedQuantity > CurrentReceiptLineRel.DerivedUnmatchedQuantity)
					MatchedNotReceivedQuantity = CurrentInvoiceDetailRel.MatchedQuantity - CurrentReceiptLineRel.DerivedUnmatchedQuantity
			        invoke FastUpdate CurrentInvoiceDetailRel
						invoked.Selected										= true
						invoked.MatchedNotReceivedQuantity						= MatchedNotReceivedQuantity
						invoked.DifferenceAmount								= MatchedNotReceivedQuantity * CurrentInvoiceDetailRel.MatchUnitCost
						invoked.MatchSub										= Sub1
				else
				if (CurrentInvoiceDetailRel.MatchSub != Sub1)
			        invoke FastUpdate CurrentInvoiceDetailRel
						invoked.Selected										= true
						initialize invoked.MatchedNotReceivedQuantity
						initialize invoked.DifferenceAmount
						invoked.MatchSub										= Sub1
				else
			        invoke FastUpdate CurrentInvoiceDetailRel
						invoked.Selected										= true
						invoked.MatchSub										= Sub1
      
		        invoke FastUpdate CurrentReceiptLineRel
		        	invoked.Selected											= true
					invoked.MatchSub											= Sub1

		373MatchAllTo1Detail


			if  (CurrentReceiptLineRel.ItemType.Special
			and  CurrentInvoiceDetailRel.PayablesInvoiceDetail.VendorPriceUOM != CurrentReceiptLineRel.VendorPriceUOM)
				MatchErrorTable.MatchErrorGroup[Sub1].MatchErrorMessage 		= MatchInvoiceErrorMessages.Msg223
				MatchErrorTable.MatchErrorGroup[Sub1].MatchError				= true 
				WithinTolerance													= false 

			if (!MatchErrorTable.MatchErrorGroup[Sub1].MatchError)
				DetailMatchAllToOneMatchAmount					= ReceiptInvoiceLinkMatchedAmount
				DetailMatchAllToOnePreviousMatchAmount			= DetailMatchAllToOneMatchAmount
				DetailMatchAllToOneMatchQuantity 				= ReceiptInvoiceLinkMatchedQuantity
	
				DetailMatchAllToOneMatchAmount 					+= CurrentInvoiceDetailRel.MatchAmount
				DetailMatchAllToOneMatchQuantity				+= CurrentInvoiceDetailRel.MatchedQuantity
	
				if  (LocalMatchRuleToleranceGroup.MatchToleranceOption.Extended
				or   LocalMatchRuleToleranceGroup.MatchToleranceOption.ExtendedAndQuantity)
	
					Difference1Amount							= DetailMatchAllToOneMatchAmount
					Difference1Amount							-= DetailMatchAllToOnePreviousMatchAmount
					Difference1Amount							-= CurrentReceiptLineRel.DerivedMatchAmount
	
					if  (MatchTable.ChargebackType.Overbill
					and  DetailMatchAllToOneMatchAmount  		> CurrentReceiptLineRel.DerivedMatchAmount)
						AccumulatedChargebackAmount				+= Difference1Amount
						DifferenceWorkAmount			 		= CurrentReceiptLineRel.DerivedMatchAmount
	
					if ((Difference1Amount			 			< 0
					and  DetailMatchAllToOneMatchQuantity		< CurrentReceiptLineRel.PurchaseOrderReceiptLine.VendorPriceUOMQuantity)
					or  (Difference1Amount			 			= 0
					and  DetailMatchAllToOneMatchQuantity		= CurrentReceiptLineRel.PurchaseOrderReceiptLine.VendorPriceUOMQuantity))
						WithinTolerance							= true
					else
					if  (Difference1Amount						< 0)
						include 303aCheckExtUnderTol
					else
						include 303bCheckExtOverTol
				else
					Difference2Amount							= CurrentInvoiceDetailRel.MatchUnitCost - CurrentReceiptLineRel.DerivedMatchUnitCost
					Difference2WorkAmount						= CurrentReceiptLineRel.DerivedMatchUnitCost
					
					if  (MatchTable.ChargebackType.Overbill
					and  Difference2Amount > 0)
						AccumulatedChargebackAmount				+= Difference2Amount * CurrentInvoiceDetailRel.MatchedQuantity
		
					if (Difference2Amount = 0)
						WithinTolerance							= true
					else
					if  (Difference2Amount						< 0)
						include 303cCheckUnitUnderTol
					else
						include 303dCheckUnitOverTol
											

			
			if (WithinTolerance
			and !MatchErrorTable.MatchErrorGroup[Sub1].MatchError)
      
				if  (LocalMatchRuleToleranceGroup.MatchToleranceOption.UnitCost
				and  CurrentInvoiceDetailRel.MatchedQuantity > CurrentReceiptLineRel.DerivedUnmatchedQuantity)
					Difference2Amount		= CurrentInvoiceDetailRel.MatchedQuantity - CurrentReceiptLineRel.DerivedUnmatchedQuantity
					Difference2WorkAmount	= CurrentReceiptLineRel.DerivedUnmatchedQuantity


					include 303fCheckQtyOverTol
      

			
			if (!WithinTolerance)
				if  (CurrentInvoiceDetailRel.EnteredQuantity > (CurrentPurchaseOrderLineRel.ReceivedQuantity - CurrentPurchaseOrderLineRel.MatchedQuantity))				
					MatchErrorTable.MatchErrorGroup[Sub1].MatchErrorMessage 	= MatchInvoiceErrorMessages.MissingReceiptDetailMsg + SingleSpace + CurrentInvoiceDetailRel.Item
					MatchErrorTable.MatchErrorGroup[Sub1].MatchError			= true
				else 
					MatchErrorTable.MatchErrorGroup[Sub1].MatchErrorMessage 	= MatchInvoiceErrorMessages.Msg211
					MatchErrorTable.MatchErrorGroup[Sub1].MatchError			= true 
					MatchErrorTable.MatchErrorGroup[Sub1].MatchErrorType		= 2


			
			if (!MatchErrorTable.MatchErrorGroup[Sub1].MatchError)

				TotalReceiptLineDetailAmount									+= CurrentReceiptLineRel.DerivedMatchAmount
				TotalReceiptLineDetailQuantity									+= CurrentReceiptLineRel.DerivedUnmatchedQuantity
	          
				if  (DetailMatchAllToOneMatchQuantity > CurrentReceiptLineRel.BuyUOMQuantity
				and  Difference1Amount											< 0)

					Difference1Amount											= 0
					
				DetailDifference1Amount											+= Difference1Amount
				DetailMatchAmount												+= CurrentInvoiceDetailRel.MatchAmount
				SelectedInvoiceDetailMatchAmount								+= CurrentInvoiceDetailRel.MatchAmount

				if  (LocalMatchRuleToleranceGroup.MatchToleranceOption.UnitCost
				and  Difference2Amount entered)
					Difference1Amount											= Difference2Amount * CurrentInvoiceDetailRel.MatchedQuantity
					Difference3Amount											+= Difference1Amount



			

				


				if (CurrentInvoiceDetailRel.MatchedQuantity > CurrentReceiptLineRel.DerivedUnmatchedQuantity)
					MatchedNotReceivedQuantity									=  CurrentInvoiceDetailRel.MatchedQuantity - CurrentReceiptLineRel.DerivedUnmatchedQuantity
			        invoke FastUpdate CurrentInvoiceDetailRel
						invoked.Selected										= true
						invoked.MatchedNotReceivedQuantity						= MatchedNotReceivedQuantity
						invoked.DifferenceAmount								= MatchedNotReceivedQuantity * CurrentInvoiceDetailRel.MatchUnitCost
						invoked.MatchSub										= Sub1
				else
				if (CurrentInvoiceDetailRel.MatchSub != Sub1)
			        invoke FastUpdate CurrentInvoiceDetailRel
						invoked.Selected										= true
						initialize invoked.MatchedNotReceivedQuantity
						initialize invoked.DifferenceAmount
						invoked.MatchSub										= Sub1
				else
			        invoke FastUpdate CurrentInvoiceDetailRel
						invoked.Selected										= true
						invoked.MatchSub										= Sub1
      
		        invoke FastUpdate CurrentReceiptLineRel
		        	invoked.Selected											= true
					invoked.MatchSub											= Sub1

		375Match1To1DetailGoods


			for each MatchWorkInvoiceDetailGoodsRel		
				CurrentPurchaseOrderLine										= each.PurchaseOrderLine
				CurrentContract													= each.Contract
				CurrentContractLine												= each.ContractLine
				CurrentInvoiceDetail											= each.PayablesInvoiceDetail
			

				if  (CurrentInvoiceDetailRel.PayablesInvoiceDetail.PurchaseOrderReceiptLine entered)

					CurrentReceipt												= CurrentInvoiceDetailRel.PayablesInvoiceDetail.PurchaseOrderReceipt
					CurrentReceiptLine											= CurrentInvoiceDetailRel.PayablesInvoiceDetail.PurchaseOrderReceiptLine
				else
				if  (Vendor.PoolOption.CompanyVendorPoShipTo)

					CurrentReceipt												= CurrentInvoiceDetailRel.first MatchWorkPOLineLocationRel.PurchaseOrderReceipt
					CurrentReceiptLine											= CurrentInvoiceDetailRel.first MatchWorkPOLineLocationRel.PurchaseOrderReceiptLine
				else

					CurrentReceipt												= CurrentInvoiceDetailRel.first MatchWorkPOLineRel.PurchaseOrderReceipt
					CurrentReceiptLine											= CurrentInvoiceDetailRel.first MatchWorkPOLineRel.PurchaseOrderReceiptLine
					
				if (CurrentReceiptLine not entered)

					MatchErrorTable.MatchErrorGroup[Sub1].MatchErrorMessage 	= MatchInvoiceErrorMessages.ReceiptLineNotFoundForItemMsg + SingleSpace + CurrentInvoiceDetailRel.Item + WorkInReconMsg
					MatchErrorTable.MatchErrorGroup[Sub1].MatchError			= true 

				if  (!MatchErrorTable.MatchErrorGroup[Sub1].MatchError
				and  CurrentReceiptLineRel.ItemType.Special
				and  CurrentReceiptLineRel.VendorPriceUOM != CurrentInvoiceDetailRel.PayablesInvoiceDetail.VendorPriceUOM)
					MatchErrorTable.MatchErrorGroup[Sub1].MatchErrorMessage 	= MatchInvoiceErrorMessages.Msg223
					MatchErrorTable.MatchErrorGroup[Sub1].MatchError			= true 
					MatchErrorTable.MatchErrorGroup[Sub1].MatchErrorType		= 2
					WithinTolerance												= false 
	
				if (!MatchErrorTable.MatchErrorGroup[Sub1].MatchError)
	
					if  (MatchTable.ChargebackType.Overbill
					and  CurrentInvoiceDetailRel.MatchAmount > CurrentReceiptLineRel.DerivedMatchAmount)
						AccumulatedChargebackAmount					+= CurrentInvoiceDetailRel.MatchAmount - CurrentReceiptLineRel.DerivedMatchAmount
		
					if  (LocalMatchRuleToleranceGroup.MatchToleranceOption.Extended
					or   LocalMatchRuleToleranceGroup.MatchToleranceOption.ExtendedAndQuantity)
		
						Difference1Amount							= CurrentInvoiceDetailRel.MatchAmount - CurrentReceiptLineRel.DerivedMatchAmount
						DifferenceWorkAmount			 			= CurrentReceiptLineRel.DerivedMatchAmount
		
						if (Difference1Amount			 			not entered)
							WithinTolerance							= true
						else
						if  (Difference1Amount						< 0)
							include 303aCheckExtUnderTol
						else
							include 303bCheckExtOverTol
					else
						Difference2Amount							= CurrentInvoiceDetailRel.MatchUnitCost - CurrentReceiptLineRel.DerivedMatchUnitCost
						Difference2WorkAmount						= CurrentReceiptLineRel.DerivedMatchUnitCost
						
						if (Difference2Amount = 0)
							WithinTolerance							= true
						else
						if  (Difference2Amount						< 0)
							include 303cCheckUnitUnderTol
						else
							include 303dCheckUnitOverTol
						
				if (WithinTolerance
				and !MatchErrorTable.MatchErrorGroup[Sub1].MatchError)
	      
					if  (LocalMatchRuleToleranceGroup.MatchToleranceOption.UnitCost)
						if (CurrentInvoiceDetailRel.IsCatchWeight)
							if (Difference2Amount entered)
								Difference1Amount		= Difference2Amount * CurrentInvoiceDetailRel.PayablesInvoiceDetail.BuyUOMMatchedQuantity
								Difference3Amount		+= Difference1Amount
						else
						if (Difference2Amount entered)
							Difference1Amount		= Difference2Amount * CurrentInvoiceDetailRel.MatchedQuantity
							Difference3Amount		+= Difference1Amount



	
						if (CurrentInvoiceDetailRel.IsCatchWeight)
							if (CurrentReceiptLineRel.PurchaseOrderReceiptLine.CalculateRemainingQuantity > 0)
								Difference2Amount		= CurrentInvoiceDetailRel.PayablesInvoiceDetail.BuyUOMMatchedQuantity - CurrentReceiptLineRel.PurchaseOrderReceiptLine.CalculateRemainingQuantity
								Difference2WorkAmount	= CurrentReceiptLineRel.PurchaseOrderReceiptLine.CalculateRemainingQuantity
							else
								Difference2Amount		= CurrentInvoiceDetailRel.BuyUOMMatchedQuantity - CurrentReceiptLineRel.PurchaseOrderReceiptLine.BuyUOMQuantity
								Difference2WorkAmount	= CurrentReceiptLineRel.PurchaseOrderReceiptLine.BuyUOMQuantity
						else
						if (CurrentReceiptLineRel.DerivedOpenToMatchQuantity > 0)
							Difference2Amount		= CurrentInvoiceDetailRel.MatchedQuantity - CurrentReceiptLineRel.DerivedOpenToMatchQuantity
							Difference2WorkAmount	= CurrentReceiptLineRel.DerivedOpenToMatchQuantity
						else
							Difference2Amount		= CurrentInvoiceDetailRel.MatchedQuantity - CurrentReceiptLineRel.PurchaseOrderReceiptLine.VendorPriceUOMQuantity
							Difference2WorkAmount	= CurrentReceiptLineRel.PurchaseOrderReceiptLine.VendorPriceUOMQuantity

						if  (Difference2Amount = 0
						or  (Difference2Amount < 0
			           	and  LocalMatchRuleToleranceGroup.MatchRuleType.AllToOne))
							WithinTolerance							= true
							initialize Difference2Amount
						else
						if  (Difference2Amount						< 0)
							include 303eCheckQtyUnderTol
						else
							include 303fCheckQtyOverTol

				if (!WithinTolerance)
					if  (CurrentInvoiceDetailRel.EnteredQuantity > (CurrentPurchaseOrderLineRel.ReceivedQuantity - CurrentPurchaseOrderLineRel.MatchedQuantity))				
						MatchErrorTable.MatchErrorGroup[Sub1].MatchErrorMessage 	= MatchInvoiceErrorMessages.MissingReceiptDetailMsg + SingleSpace + CurrentInvoiceDetailRel.Item
						MatchErrorTable.MatchErrorGroup[Sub1].MatchError			= true
					else 
						MatchErrorTable.MatchErrorGroup[Sub1].MatchErrorMessage 		= MatchInvoiceErrorMessages.Msg211
						MatchErrorTable.MatchErrorGroup[Sub1].MatchError				= true 
						MatchErrorTable.MatchErrorGroup[Sub1].MatchErrorType			= 2
	
				if (!MatchErrorTable.MatchErrorGroup[Sub1].MatchError) 
					TotalReceiptLineDetailAmount									+= CurrentReceiptLineRel.DerivedMatchAmount
					TotalReceiptLineDetailQuantity									+= CurrentReceiptLineRel.DerivedUnmatchedQuantity
					DetailDifference1Amount											+= Difference1Amount
					DetailMatchAmount												+= CurrentInvoiceDetailRel.MatchAmount
					SelectedInvoiceDetailMatchAmount								+= CurrentInvoiceDetailRel.MatchAmount
	
					if (CurrentInvoiceDetailRel.MatchedQuantity > CurrentReceiptLineRel.DerivedUnmatchedQuantity)
						MatchedNotReceivedQuantity = CurrentInvoiceDetailRel.MatchedQuantity - CurrentReceiptLineRel.DerivedUnmatchedQuantity
				        invoke FastUpdate CurrentInvoiceDetailRel
							invoked.Selected										= true
							invoked.MatchedNotReceivedQuantity						= MatchedNotReceivedQuantity
							invoked.DifferenceAmount								= MatchedNotReceivedQuantity * CurrentInvoiceDetailRel.MatchUnitCost
							invoked.MatchSub										= Sub1
					else
					if (CurrentInvoiceDetailRel.MatchSub != Sub1)
				        invoke FastUpdate CurrentInvoiceDetailRel
							invoked.Selected										= true
							initialize invoked.MatchedNotReceivedQuantity
							initialize invoked.DifferenceAmount
							invoked.MatchSub										= Sub1
					else
				        invoke FastUpdate CurrentInvoiceDetailRel
							invoked.Selected										= true
							invoked.MatchSub										= Sub1
	      
			        invoke FastUpdate CurrentReceiptLineRel
			        	invoked.Selected											= true
						invoked.MatchSub											= Sub1


		375Match1To1DetailAOC


			if (!MatchErrorTable.MatchErrorGroup[Sub1].MatchError)
			
				if (CurrentReceiptLineAOCRel.PurchaseOrderLine not entered)
					ReceivedAmountToMatch						= CurrentReceiptLineAOCRel.MiscellaneousAddOnChargeInvoicedAmount
				else 
					ReceivedAmountToMatch						= CurrentReceiptLineAOCRel.ReceivedAmountToMatch

				if  (MatchTable.ChargebackType.Overbill
				and  CurrentInvoiceAddOnChargeRel.MatchAmount > CurrentReceiptLineAOCRel.MatchAmount)
					AccumulatedChargebackAmount					+= CurrentInvoiceAddOnChargeRel.MatchAmount - ReceivedAmountToMatch
	
				if  (LocalMatchRuleToleranceGroup.MatchToleranceOption.Extended
				or   LocalMatchRuleToleranceGroup.MatchToleranceOption.ExtendedAndQuantity)
	
					Difference1Amount							= CurrentInvoiceAddOnChargeRel.MatchAmount - ReceivedAmountToMatch
					DifferenceWorkAmount			 			= ReceivedAmountToMatch
					if (DifferenceWorkAmount < 0)
						DifferenceWorkAmount 					= DifferenceWorkAmount * -1
	
					if (Difference1Amount			 			not entered)
						WithinTolerance							= true
					else
					if  (Difference1Amount						< 0)
						include 303aCheckExtUnderTol
					else
						include 303bCheckExtOverTol

					if (PayablesInvoice.CostComponentMatch)
						Difference3Amount						+= Difference1Amount

						if  (MatchTable.ChargebackType.Overbill)
							AccumulatedChargebackAmount			+= Difference1Amount
				else
					Difference2Amount							= CurrentInvoiceAddOnChargeRel.MatchUnitCost - CurrentReceiptLineAOCRel.OriginalUnitCost
					Difference2WorkAmount						= CurrentReceiptLineAOCRel.OriginalUnitCost
					
					if (Difference2Amount = 0)
						WithinTolerance							= true
					else
					if  (Difference2Amount						< 0)
						include 303cCheckUnitUnderTol
					else
						include 303dCheckUnitOverTol

					if (PayablesInvoice.CostComponentMatch)
						Difference3Amount						+= Difference2Amount

						if  (MatchTable.ChargebackType.Overbill)
							AccumulatedChargebackAmount			+= Difference2Amount

			if (WithinTolerance
			and !MatchErrorTable.MatchErrorGroup[Sub1].MatchError)
      
				if  (LocalMatchRuleToleranceGroup.MatchToleranceOption.UnitCost)
					Difference2Amount		= CurrentInvoiceAddOnChargeRel.MatchedQuantity - CurrentReceiptLineAOCRel.ReceivedQuantityToMatch
					Difference2WorkAmount	= CurrentReceiptLineAOCRel.ReceivedQuantityToMatch

					if (Difference2Amount = 0)
						WithinTolerance							= true
					else
					if  (Difference2Amount						< 0)
						include 303eCheckQtyUnderTol
					else
						include 303fCheckQtyOverTol

			if (!WithinTolerance)
				MatchErrorTable.MatchErrorGroup[Sub1].MatchErrorMessage 		= MatchInvoiceErrorMessages.Msg260
				MatchErrorTable.MatchErrorGroup[Sub1].MatchError				= true 
				MatchErrorTable.MatchErrorGroup[Sub1].MatchErrorType			= 6

			if (!MatchErrorTable.MatchErrorGroup[Sub1].MatchError)

				TotalReceiptDetailAddOnCharge									+= ReceivedAmountToMatch
				DetailDifference1Amount											+= Difference1Amount
				DetailMatchAddonCharge											+= CurrentInvoiceAddOnChargeRel.MatchAmount
				SelectedInvoiceAddOnChargeMatchAmount							+= CurrentInvoiceAddOnChargeRel.MatchAmount

				if (CurrentInvoiceAddOnChargeRel.MatchedQuantity > CurrentReceiptLineAOCRel.UnmatchedQuantity)
					MatchedNotReceivedQuantity = CurrentInvoiceAddOnChargeRel.MatchedQuantity - CurrentReceiptLineAOCRel.UnmatchedQuantity
			        invoke FastUpdate CurrentInvoiceAddOnChargeRel
						invoked.Selected										= true
						invoked.MatchedNotReceivedQuantity						= MatchedNotReceivedQuantity
						invoked.DifferenceAmount								= MatchedNotReceivedQuantity * CurrentInvoiceAddOnChargeRel.MatchUnitCost
						invoked.MatchSub										= Sub1
				else
				if (CurrentInvoiceAddOnChargeRel.MatchSub != Sub1)
			        invoke FastUpdate CurrentInvoiceAddOnChargeRel
						invoked.Selected										= true
						initialize invoked.MatchedNotReceivedQuantity
						initialize invoked.DifferenceAmount
						invoked.MatchSub										= Sub1
				else
			        invoke FastUpdate CurrentInvoiceAddOnChargeRel
						invoked.Selected										= true
						invoked.MatchSub										= Sub1
      
		        invoke FastUpdate CurrentReceiptLineAOCRel
		        	invoked.Selected											= true
					invoked.MatchSub											= Sub1

		376MatchAllTo1DetailAOC


			if (!MatchErrorTable.MatchErrorGroup[Sub1].MatchError)

				if (CurrentReceiptLineAOCRel.PurchaseOrderLine not entered)
					ReceivedAmountToMatch						= CurrentReceiptLineAOCRel.MiscellaneousAddOnChargeInvoicedAmount
				else 
					ReceivedAmountToMatch						= CurrentReceiptLineAOCRel.ReceivedAmountToMatch

				DetailMatchAllToOneAddOnChargeAmount			= CurrentInvoiceAddOnChargeRel.MatchAmount
				DetailMatchAllToOneAddOnChargeQuantity 			= CurrentInvoiceAddOnChargeRel.MatchedQuantity
	
				if  (MatchTable.ChargebackType.Overbill
				and  DetailMatchAllToOneAddOnChargeAmount  		> ReceivedAmountToMatch)
					AccumulatedChargebackAmount					+= DetailMatchAllToOneAddOnChargeAmount - ReceivedAmountToMatch

				if  (LocalMatchRuleToleranceGroup.MatchToleranceOption.Extended
				or   LocalMatchRuleToleranceGroup.MatchToleranceOption.ExtendedAndQuantity)
	
					Difference1Amount							= DetailMatchAllToOneAddOnChargeAmount - ReceivedAmountToMatch
					DifferenceWorkAmount			 			= ReceivedAmountToMatch
	
					if ((Difference1Amount			 			< 0
					and  DetailMatchAllToOneAddOnChargeQuantity	< CurrentReceiptLineAOCRel.ReceivedQuantityToMatch)
					or  (Difference1Amount			 			= 0
					and  DetailMatchAllToOneAddOnChargeQuantity	= CurrentReceiptLineAOCRel.ReceivedQuantityToMatch)
					or  (Difference1Amount not entered
					and  CurrentReceiptLineAOCRel.PurchaseOrderLine not entered))
						WithinTolerance							= true
					else
					if  (Difference1Amount						< 0)
						include 303aCheckExtUnderTol
					else
						include 303bCheckExtOverTol
					if (PayablesInvoice.CostComponentMatch)
						Difference3Amount						+= Difference1Amount

						if  (MatchTable.ChargebackType.Overbill)
							AccumulatedChargebackAmount			+= Difference1Amount
				else
					Difference2Amount							= CurrentInvoiceAddOnChargeRel.MatchUnitCost - CurrentReceiptLineAOCRel.OriginalUnitCost
					Difference2WorkAmount						= CurrentReceiptLineAOCRel.OriginalUnitCost
					
					if (Difference2WorkAmount < 0)
						Difference2WorkAmount					= Difference2WorkAmount * -1
		
					if (Difference2Amount = 0)
						WithinTolerance							= true
					else
					if  (Difference2Amount						< 0)
						include 303cCheckUnitUnderTol
					else
						include 303dCheckUnitOverTol
					if (PayablesInvoice.CostComponentMatch)
						Difference3Amount						+= Difference2Amount

						if  (MatchTable.ChargebackType.Overbill)
							AccumulatedChargebackAmount			+= Difference2Amount
											
			if (WithinTolerance
			and !MatchErrorTable.MatchErrorGroup[Sub1].MatchError)
      
				if  (LocalMatchRuleToleranceGroup.MatchToleranceOption.UnitCost
				and  DetailMatchAllToOneAddOnChargeQuantity > CurrentReceiptLineAOCRel.ReceivedQuantityToMatch)
					Difference2Amount						= DetailMatchAllToOneAddOnChargeQuantity - CurrentReceiptLineAOCRel.ReceivedQuantityToMatch
					Difference2WorkAmount					= DetailMatchAllToOneAddOnChargeQuantity
					include 303fCheckQtyOverTol
      
			if (!WithinTolerance)
				MatchErrorTable.MatchErrorGroup[Sub1].MatchErrorMessage 		= MatchInvoiceErrorMessages.Msg403
				MatchErrorTable.MatchErrorGroup[Sub1].MatchError				= true 
				MatchErrorTable.MatchErrorGroup[Sub1].MatchErrorType			= 6

			if (!MatchErrorTable.MatchErrorGroup[Sub1].MatchError)

				TotalReceiptDetailAddOnCharge										= CurrentInvoiceAddOnChargeRel.MatchAmount
				SelectedInvoiceAddOnChargeMatchAmount							+= CurrentInvoiceAddOnChargeRel.MatchAmount
				DetailDifference1Amount											+= Difference1Amount
				DetailMatchAddonCharge											+= CurrentInvoiceAddOnChargeRel.MatchAmount
				if (Difference2Amount < 0)
					initialize Difference2Amount

				if  (LocalMatchRuleToleranceGroup.MatchToleranceOption.UnitCost
				and  Difference2Amount entered)
					Difference1Amount											= Difference2Amount * CurrentInvoiceAddOnChargeRel.MatchedQuantity
					Difference3Amount											+= Difference1Amount


				if (DetailMatchAllToOneAddOnChargeQuantity > CurrentReceiptLineAOCRel.UnmatchedQuantity)
					MatchedNotReceivedQuantity									=  DetailMatchAllToOneAddOnChargeQuantity - CurrentReceiptLineAOCRel.UnmatchedQuantity
			        invoke FastUpdate CurrentInvoiceAddOnChargeRel
						invoked.Selected										= true
						invoked.MatchedNotReceivedQuantity						= MatchedNotReceivedQuantity
						invoked.DifferenceAmount								= MatchedNotReceivedQuantity * CurrentInvoiceAddOnChargeRel.MatchUnitCost
						invoked.MatchSub										= Sub1
				else
				if (CurrentInvoiceAddOnChargeRel.MatchSub != Sub1)
			        invoke FastUpdate CurrentInvoiceAddOnChargeRel
						invoked.Selected										= true
						initialize invoked.MatchedNotReceivedQuantity
						initialize invoked.DifferenceAmount
						invoked.MatchSub										= Sub1
				else
			        invoke FastUpdate CurrentInvoiceAddOnChargeRel
						invoked.Selected										= true
						invoked.MatchSub										= Sub1
      
		        invoke FastUpdate CurrentReceiptLineAOCRel
		        	invoked.Selected											= true
					invoked.MatchSub											= Sub1

		380Detail1ToAllMatching


			WithinTolerance = false
			
			initialize SelectedInvoiceDetailMatchAmount
			initialize SelectedInvoiceAddOnChargeMatchAmount
			initialize SelectedInvoiceDetailMatchService
			initialize SelectedInvoiceAddOnChargeMatchService

			include 304BuildWorkFiles
			
			if  (!first MatchWorkInvoiceDetailRel exists
			and  !first MatchWorkReceiptLineRel exists
			and  !first MatchWorkInvoiceAddOnChargeRel exists
			and  !first MatchWorkReceiptLineAOCRel exists
			and (PayablesInvoice.CostComponentMatch
			or   !PayablesInvoice.MatchProcessType.AOCOnly))
				if (ReceiptHasIncompleteInspection)  
					MatchErrorTable.MatchErrorGroup[Sub1].MatchErrorMessage 			= MatchInvoiceErrorMessages.Msg199
					MatchErrorTable.MatchErrorGroup[Sub1].MatchError					= true 
				else
					MatchErrorTable.MatchErrorGroup[Sub1].MatchErrorMessage 			= MatchInvoiceErrorMessages.Msg222
					MatchErrorTable.MatchErrorGroup[Sub1].MatchError					= true 
					MatchErrorTable.MatchErrorGroup[Sub1].MatchErrorType	 			= 3
			else      
				if (DocumentType.Invoice
				and UseReceiptNumber)
					
					include 375Match1To1DetailGoods
				else
					initialize TotalReceiptLineDetailAmount
					initialize TotalReceiptDetailAddOnCharge
					initialize TotalReceiptLineDetailQuantity
					initialize TotalInvoiceDetailAmount
					initialize DetailDifference1Amount
					initialize DetailMatchAmount
					initialize DetailMatchService
					initialize AccumulatedChargebackAmount
					initialize Difference3Amount



					WithinTolerance			= true
					include 382Match1ToAllDetail
					
					if  (!MatchErrorTable.MatchErrorGroup[Sub1].MatchError		
					and   PayablesInvoice.CostComponentMatch)					
						WithinTolerance			= true
						include 383Match1ToAllDetailAOC
			
						if (!WithinTolerance)
							MatchErrorTable.MatchErrorGroup[Sub1].MatchErrorMessage 	= MatchInvoiceErrorMessages.Msg267
							MatchErrorTable.MatchErrorGroup[Sub1].MatchError			= true

			if (!MatchErrorTable.MatchErrorGroup[Sub1].MatchError)

				if (!WithinTolerance)
					MatchErrorTable.MatchErrorGroup[Sub1].MatchError					= true
					if (PayablesInvoice.MatchProcessType.DropShip
					or  PayablesInvoice.MatchProcessType.Service)
						MatchErrorTable.MatchErrorGroup[Sub1].MatchErrorMessage 		= MatchInvoiceErrorMessages.Msg207
					else
					if  (CurrentInvoiceDetailRel.EnteredQuantity > (CurrentPurchaseOrderLineRel.ReceivedQuantity - CurrentPurchaseOrderLineRel.MatchedQuantity))				
						MatchErrorTable.MatchErrorGroup[Sub1].MatchErrorMessage 		= MatchInvoiceErrorMessages.MissingReceiptDetailMsg + SingleSpace + CurrentInvoiceDetailRel.Item
						MatchErrorTable.MatchErrorGroup[Sub1].MatchError				= true
					else 
						MatchErrorTable.MatchErrorGroup[Sub1].MatchErrorMessage 		= MatchInvoiceErrorMessages.Msg221
					
				if (!MatchErrorTable.MatchErrorGroup[Sub1].MatchError)
					invoke FastUpdate ThisMatchWorkInvoiceRel
						invoked.Selected													= true
	
					TotalInvoiceMatchAmount			= PayablesInvoice.MatchAmount + PayablesInvoice.ServiceAmount
					TotalDetailsMatchAmount			= SelectedInvoiceDetailMatchAmount + SelectedInvoiceDetailMatchService
					
					if  (PayablesInvoice.CostComponentMatch)
						TotalInvoiceMatchAmount 	+= PayablesInvoice.MatchedAddOnChargeAmount
						TotalDetailsMatchAmount		+= SelectedInvoiceAddOnChargeMatchAmount
					 
      
				if (PayablesInvoice.MatchAmount	!= SelectedInvoiceDetailMatchAmount)

					MatchErrorTable.MatchErrorGroup[Sub1].MatchError				= true
					if (ReceiptHasIncompleteInspection)  
						MatchErrorTable.MatchErrorGroup[Sub1].MatchErrorMessage 	= MatchInvoiceErrorMessages.Msg199
					else 
					if  (PayablesInvoice.CostComponentMatch)

						MatchErrorTable.MatchErrorGroup[Sub1].MatchErrorMessage 	= MatchInvoiceErrorMessages.Msg198
					else 
					if  (PayablesInvoice.MatchProcessType.DropShip
					or   PayablesInvoice.MatchProcessType.Service)
						MatchErrorTable.MatchErrorGroup[Sub1].MatchErrorMessage 	= MatchInvoiceErrorMessages.Msg122
					else 
						MatchErrorTable.MatchErrorGroup[Sub1].MatchErrorMessage 	= MatchInvoiceErrorMessages.Msg200b


			if (!MatchErrorTable.MatchErrorGroup[Sub1].MatchError)
	
				InvoiceMatchedAmount													= PayablesInvoice.MatchAmount
				InvoiceServiceAmount													= PayablesInvoice.ServiceAmount
				InvoiceMatchedAddOnCharge												= PayablesInvoice.MatchedAddOnChargeAmount
				InvoiceMatchedQuantity													= PayablesInvoice.HashQuantity

				initialize ServiceMatchedAmount
				initialize ReceiptMatchedAmount
				initialize ReceiptMatchedAddOnCharge
				initialize ReceiptMatchedQuantity					

				include 385UpdtMatporwrkRecs
				
				if  (LocalMatchRuleToleranceGroup.MatchRuleType.AllToOne
				and (PayablesInvoice.MatchProcessType.DropShip
				or   PayablesInvoice.MatchProcessType.Service))
					ServiceMatchedAmount												= PayablesInvoice.ServiceAmount
					ReceiptMatchedAmount												= PayablesInvoice.MatchAmount
					ReceiptMatchedQuantity												= PayablesInvoice.HashQuantity

				MatchTestOK 															= true
				MatchSub1 																= Sub1
				MatchedFromRoutine														= "380"

				if  (PayablesInvoice.MatchProcessType.DropShip
				or   PayablesInvoice.MatchProcessType.Service)
					MatchRuleResult														= "A-1"
				else
					MatchRuleResult														= LocalMatchRuleToleranceGroup.MatchRuleType
  


		382Match1ToAllDetail


			for each MatchWorkInvoiceDetailRel
				CurrentPurchaseOrder													= each.PurchaseOrder													
				CurrentPurchaseOrderLine												= each.PurchaseOrderLine
				CurrentContract															= each.Contract
				CurrentContractLine														= each.ContractLine
				CurrentInvoiceDetail													= each.PayablesInvoiceDetail
				if (CurrentInvoiceDetailRel.ItemType.Service)				
					initialize CurrentReceipt
					initialize CurrentReceiptLine				
					include 389ServiceDropshipEdits

					if (!WithinTolerance)

						MatchErrorTable.MatchErrorGroup[Sub1].MatchErrorMessage 		= MatchInvoiceErrorMessages.Msg208
						MatchErrorTable.MatchErrorGroup[Sub1].MatchError				= true 
						end for each
					else
						Difference3Amount += ServiceToleranceDifference

	


					if (!MatchErrorTable.MatchErrorGroup[Sub1].MatchError)
			        	if (LocalMatchRuleToleranceGroup.CreateChargeback)


							DetailDifference1Amount						+= Difference1Amount
				
						if (ReceiptLineCount not entered)
							DetailRecord							= true
							DetailMatchQuantity						+= CurrentInvoiceDetailRel.MatchedQuantity
							DetailMatchService						+= CurrentInvoiceDetailRel.MatchAmount
							SelectedInvoiceDetailMatchService		+= CurrentInvoiceDetailRel.MatchAmount

									
						invoke FastUpdate CurrentInvoiceDetailRel
							invoked.MatchSub						= Sub1
							invoked.Selected						= true
							invoked.DifferenceAmount				= Difference1Amount
		    	else

		    		DetailRecord	= false
		    		initialize ReceiptLineCount
		    		initialize TotalReceiptLineQuantity
		    		initialize TotalReceiptLineDetailAmount
		    		initialize TotalReceiptLineDetailQuantity
		    		initialize SpecificReceipt

					if  (CurrentInvoiceDetailRel.PayablesInvoiceDetail.PurchaseOrderReceiptLine entered
			    	and  CurrentInvoiceDetailRel.MatchWorkReceiptLineRel exists
					and  CurrentInvoiceDetailRel.MatchedQuantity = CurrentInvoiceDetailRel.MatchWorkReceiptLineRel.UnmatchedQuantity)
			    		SpecificReceipt = CurrentInvoiceDetailRel.PayablesInvoiceDetail.PurchaseOrderReceipt

					else
					if (!each.ItemType.Service)
						for each CurrentInvoiceDetailRel.MatchWorkPOLineRel
							if (each.UnmatchedQuantity = CurrentInvoiceDetailRel.MatchedQuantity)
					    		SpecificReceipt = each.PurchaseOrderReceipt

					    		end for each

			    	if (MultiplePurchaseOrders)
			    		if (!CurrentInvoiceDetailRel.MatchWorkPOLineRel exists)


							MatchErrorTable.MatchErrorGroup[Sub1].MatchErrorMessage 		= MatchInvoiceErrorMessages.ReceiptLineNotFoundForItemMsg + SingleSpace + CurrentInvoiceDetailRel.Item + WorkInReconMsg
							MatchErrorTable.MatchErrorGroup[Sub1].MatchError				= true
						else 

							for each CurrentInvoiceDetailRel.MatchWorkPOLineRel
								include 382aMatch1ToAllDetailLoop
			    	else
			    		if (!CurrentInvoiceDetailRel.MatchWorkPOLineRel exists)
							MatchErrorTable.MatchErrorGroup[Sub1].MatchErrorMessage 		= MatchInvoiceErrorMessages.ReceiptLineNotFoundForItemMsg + SingleSpace + CurrentInvoiceDetailRel.Item + WorkInReconMsg
							MatchErrorTable.MatchErrorGroup[Sub1].MatchError				= true
						else
							for each CurrentInvoiceDetailRel.MatchWorkPOLineRel
								include 382aMatch1ToAllDetailLoop
	      
					if (!MatchErrorTable.MatchErrorGroup[Sub1].MatchError)
						if  (LocalMatchRuleToleranceGroup.MatchToleranceOption.Extended
						or   LocalMatchRuleToleranceGroup.MatchToleranceOption.ExtendedAndQuantity)
			
							Difference1Amount							= CurrentInvoiceDetailRel.MatchAmount - TotalReceiptLineDetailAmount

							DifferenceWorkAmount			 			= TotalReceiptLineDetailAmount

			



							
							if (Difference1Amount			 			not entered)
								WithinTolerance							= true
							else
							if  (Difference1Amount						< 0)
								include 303aCheckExtUnderTol
							else
								include 303bCheckExtOverTol
						else
							Difference2Amount							= CurrentInvoiceDetailRel.MatchedQuantity - TotalReceiptLineDetailQuantity
							Difference2WorkAmount						= TotalReceiptLineDetailQuantity
							






							if  (Difference2Amount = 0
							or  (LocalMatchRuleToleranceGroup.MatchRuleType.AllToOne
							and (PayablesInvoice.MatchProcessType.DropShip
							or   PayablesInvoice.MatchProcessType.Service)
							and  Difference2Amount < 0))

								WithinTolerance							= true
							else
							if  (Difference2Amount						< 0)
								include 303eCheckQtyUnderTol
							else
								include 303fCheckQtyOverTol

						if (!WithinTolerance)
							if  (PayablesInvoice.MatchProcessType.DropShip
							or   PayablesInvoice.MatchProcessType.Service)
								MatchErrorTable.MatchErrorGroup[Sub1].MatchErrorMessage	= MatchInvoiceErrorMessages.Msg207
							else
							if  (CurrentInvoiceDetailRel.EnteredQuantity > (CurrentPurchaseOrderLineRel.ReceivedQuantity - CurrentPurchaseOrderLineRel.MatchedQuantity))				
								MatchErrorTable.MatchErrorGroup[Sub1].MatchErrorMessage 	= MatchInvoiceErrorMessages.MissingReceiptDetailMsg + SingleSpace + CurrentInvoiceDetailRel.Item
								MatchErrorTable.MatchErrorGroup[Sub1].MatchError			= true
							else 
								MatchErrorTable.MatchErrorGroup[Sub1].MatchErrorMessage	= MatchInvoiceErrorMessages.Msg221
							MatchErrorTable.MatchErrorGroup[Sub1].MatchError			= true 
							MatchErrorTable.MatchErrorGroup[Sub1].MatchErrorType		= 2
		      
						else
							if (CurrentInvoiceDetailRel.MatchedQuantity > TotalReceiptLineQuantity)
								invoke FastUpdate CurrentInvoiceDetailRel
									invoked.MatchedNotReceivedQuantity	= CurrentInvoiceDetailRel.MatchedQuantity - TotalReceiptLineQuantity
									invoked.DifferenceAmount			= Difference1Amount
							else
								invoke FastUpdate CurrentInvoiceDetailRel
									invoked.DifferenceAmount			= Difference1Amount
		      
							if  (MatchTable.ChargebackType.Overbill
							and  CurrentInvoiceDetailRel.MatchAmount > TotalReceiptLineDetailAmount)
								AccumulatedChargebackAmount				+= CurrentInvoiceDetailRel.MatchAmount - TotalReceiptLineDetailAmount

				if (MatchErrorTable.MatchErrorGroup[Sub1].MatchError)
					end for each

						
		382aMatch1ToAllDetailLoop



			if ((!Vendor.PoolOption.CompanyVendorPoShipTo
			or    PayablesInvoice.Location = each.PurchaseOrderReceiptLine.ShipToLocation)
			and (!each.Selected
			or    each.MatchSub  != Sub1)
			and (SpecificReceipt not entered
			or   SpecificReceipt = each.PurchaseOrderReceipt)
			and  (!CurrentInvoiceDetailRel.RecordSource.LineMatchMa43
			or     CurrentInvoiceDetailRel.PurchaseOrderLine = each.PurchaseOrderLine))

				DetailDifference1Amount						+= Difference1Amount
	
				if (ReceiptLineCount not entered)
					DetailRecord							= true
					DetailMatchQuantity						+= CurrentInvoiceDetailRel.MatchedQuantity
					if  (CurrentInvoiceDetailRel.ItemType.Service)
						DetailMatchService					+= CurrentInvoiceDetailRel.MatchAmount
						SelectedInvoiceDetailMatchService	+= CurrentInvoiceDetailRel.MatchAmount

					else
						DetailMatchAmount					+= CurrentInvoiceDetailRel.MatchAmount
						SelectedInvoiceDetailMatchAmount	+= CurrentInvoiceDetailRel.MatchAmount

						
				invoke FastUpdate CurrentInvoiceDetailRel
					invoked.MatchSub						= Sub1
					invoked.Selected						= true
					invoked.DifferenceAmount				= Difference1Amount

				if  (CurrentPayablesInvoiceDetailRel.PurchaseOrderReceipt entered
				and  CurrentPayablesInvoiceDetailRel.PurchaseOrderReceipt != each.PurchaseOrderReceipt)
					invoke FastUpdate CurrentPayablesInvoiceDetailRel
						invoked.PurchaseOrderReceipt			= each.PurchaseOrderReceipt
						invoked.PurchaseOrderReceiptLine		= each.PurchaseOrderReceiptLine
      
				if  (each.ItemType.Special
				and  CurrentInvoiceDetailRel.PayablesInvoiceDetail.VendorPriceUOM != each.VendorPriceUOM)      
					MatchErrorTable.MatchErrorGroup[Sub1].MatchErrorMessage	= MatchInvoiceErrorMessages.Msg223
					MatchErrorTable.MatchErrorGroup[Sub1].MatchError			= true 
					MatchErrorTable.MatchErrorGroup[Sub1].MatchErrorType		= 2
				else
					initialize MatchErrorTable.MatchErrorGroup[Sub1]

					if  (LocalMatchRuleToleranceGroup.MatchToleranceOption.UnitCost)
						Difference2Amount							= CurrentInvoiceDetailRel.MatchUnitCost - each.DerivedMatchUnitCost
						Difference2WorkAmount						= each.MatchUnitCost
						
						if (Difference2Amount = 0)
							WithinTolerance							= true
						else
						if  (Difference2Amount						< 0)
							include 303cCheckUnitUnderTol
						else
							include 303dCheckUnitOverTol

						if (!WithinTolerance)
							if  (PayablesInvoice.MatchProcessType.DropShip
							or   PayablesInvoice.MatchProcessType.Service)
								MatchErrorTable.MatchErrorGroup[Sub1].MatchErrorMessage	= MatchInvoiceErrorMessages.Msg207
							else
								MatchErrorTable.MatchErrorGroup[Sub1].MatchErrorMessage	= MatchInvoiceErrorMessages.Msg221
							MatchErrorTable.MatchErrorGroup[Sub1].MatchError			= true 
							MatchErrorTable.MatchErrorGroup[Sub1].MatchErrorType		= 2

					if (!MatchErrorTable.MatchErrorGroup[Sub1].MatchError)

						ReceiptLineCount += 1

						TotalReceiptLineDetailQuantity		+= each.UnmatchedQuantity
					
						if (each.ItemType.Service)

							TotalReceiptLineDetailService	+= each.MatchAmount

						else

							TotalReceiptLineDetailAmount	+= each.MatchAmount

			      
						TotalReceiptLineQuantity	+= each.OpenToMatchQuantity





							
						DetailRecord						= true   
			
						invoke FastUpdate each
							invoked.MatchSub				= Sub1
							invoked.Selected				= true


						if  (TotalReceiptLineDetailQuantity >= CurrentInvoiceDetailRel.MatchedQuantity)
							end for each
						else
						if  (LocalMatchRuleToleranceGroup.MatchToleranceOption.UnitCost)
							Difference2Amount							= CurrentInvoiceDetailRel.MatchedQuantity - TotalReceiptLineDetailQuantity
							Difference2WorkAmount						= TotalReceiptLineDetailQuantity
							
							if  (Difference2Amount						> 0)
								include 303fCheckQtyOverTol
								if (WithinTolerance)
									initialize ReceiptLineCount
									initialize Difference2Amount
									initialize Difference2WorkAmount
									end for each

		383Match1ToAllDetailAOC


			for each MatchWorkInvoiceAddOnChargeRel 
				CurrentPurchaseOrderLine										= each.PurchaseOrderLine
				CurrentContract													= each.Contract
				CurrentContractLine												= each.ContractLine
				CurrentAddOnCharge												= each.AddOnCharge
				LocalMatchWorkInvoiceAddOnCharge								= each.MatchWorkInvoiceAddOnCharge


				DetailRecord = false
				initialize ReceiptLineCount
				initialize TotalReceiptQuantity
				initialize TotalReceiptLineQuantity				
				initialize TotalReceiptDetailAddOnCharge
		    	if (MultiplePurchaseOrders
		    	and !PayablesInvoice.MatchProcessType.Service
		    	and !PayablesInvoice.MatchProcessType.DropShip) 
		    		if (!CurrentInvoiceAddOnChargeRel.MatchWorkReceiptLineItemRel exists)
						include 383aMatch1ToAllDetailLoopNoAocOnPO


					else 
						for each CurrentInvoiceAddOnChargeRel.MatchWorkReceiptLineItemRel
							include 383aMatch1ToAllDetailLoop
							if (MatchErrorTable.MatchErrorGroup[Sub1].MatchError)
								end for each
		    	else
		    		if (!CurrentInvoiceAddOnChargeRel.MatchWorkPOLineAOCRel exists)
						include 383aMatch1ToAllDetailLoopNoAocOnPO


					else
						for each CurrentInvoiceAddOnChargeRel.MatchWorkPOLineAOCRel
							include 383aMatch1ToAllDetailLoop

							if (MatchErrorTable.MatchErrorGroup[Sub1].MatchError)
								end for each
  
				if (MatchErrorTable.MatchErrorGroup[Sub1].MatchError)

					end for each
				else
					if (!WithinTolerance)
						MatchErrorTable.MatchErrorGroup[Sub1].MatchErrorMessage		= MatchInvoiceErrorMessages.Msg262 + each.AddOnCharge
						MatchErrorTable.MatchErrorGroup[Sub1].MatchError			= true 
						MatchErrorTable.MatchErrorGroup[Sub1].MatchErrorType		= 2
						end for each
					else
						invoke FastUpdate CurrentInvoiceAddOnChargeRel
							invoked.MatchedNotReceivedQuantity	= CurrentInvoiceAddOnChargeRel.MatchedQuantity - TotalReceiptLineQuantity
							invoked.DifferenceAmount			= Difference1Amount
	      
						if  (MatchTable.ChargebackType.Overbill
						and  CurrentInvoiceAddOnChargeRel.MatchAmount > TotalReceiptDetailAddOnCharge)
							AccumulatedChargebackAmount				+= CurrentInvoiceAddOnChargeRel.MatchAmount - TotalReceiptDetailAddOnCharge

		383aMatch1ToAllDetailLoop



			if ((!Vendor.PoolOption.CompanyVendorPoShipTo
			or    PayablesInvoice.Location = each.PurchaseOrderReceiptLine.ShipToLocation)
			and (!each.Selected
			or    each.MatchSub  != Sub1
			or    PayablesInvoice.CostComponentMatch))

				
				if (!CurrentInvoiceAddOnChargeRel.ItemType.Service)
					DetailDifference1Amount						+= Difference1Amount
	
				if (ReceiptLineCount not entered)
					DetailMatchAddOnCharge						+= CurrentInvoiceAddOnChargeRel.MatchAmount
					if  (CurrentInvoiceDetailRel.ItemType.Service)
						SelectedInvoiceAddOnChargeMatchService	+= CurrentInvoiceAddOnChargeRel.MatchAmount
					else
						SelectedInvoiceAddOnChargeMatchAmount 	+= CurrentInvoiceAddOnChargeRel.MatchAmount

				invoke FastUpdate CurrentInvoiceDetailRel
					invoked.MatchSub							= Sub1
					invoked.Selected							= true
					invoked.DifferenceAmount					= Difference1Amount

				if  (CurrentInvoiceAddOnChargeRel.PurchaseOrderLine not entered)
					Difference1Amount							= CurrentInvoiceAddOnChargeRel.PayablesInvoiceAddOnChargeRel.TotalAddOnChargeAmount - CurrentInvoiceAddOnChargeRel.PayablesInvoiceAddOnChargeRel.POAndLineAOCRel.TotalAddOnChargeAmount
					DifferenceWorkAmount						= CurrentInvoiceAddOnChargeRel.PayablesInvoiceAddOnChargeRel.POAndLineAOCRel.TotalAddOnChargeAmount 
					
					if (Difference1Amount = 0)
						WithinTolerance							= true
					else
					if  (Difference1Amount						< 0)
						include 303gCheckMiscAOCUnderTol
					else
						include 303hCheckMiscAOCOverTol

					if (PayablesInvoice.CostComponentMatch)
						Difference3Amount						+= Difference1Amount

						if  (MatchTable.ChargebackType.Overbill)
							AccumulatedChargebackAmount			+= Difference1Amount
				else
					Difference2Amount							= CurrentInvoiceAddOnChargeRel.MatchUnitCost - each.MatchUnitCost
					Difference2WorkAmount						= each.MatchUnitCost

					if (Difference2Amount = 0)
						WithinTolerance							= true
					else
					if  (Difference2Amount						< 0)
						include 303iCheckLineAOCUnderTol
					else
						include 303jCheckLineAOCOverTol

					if (PayablesInvoice.CostComponentMatch)
						Difference3Amount						+= Difference2Amount

						if  (MatchTable.ChargebackType.Overbill)
							AccumulatedChargebackAmount			+= Difference2Amount


				if (!WithinTolerance)
					MatchErrorTable.MatchErrorGroup[Sub1].MatchErrorMessage		= MatchInvoiceErrorMessages.Msg267 + each.AddOnCharge
					MatchErrorTable.MatchErrorGroup[Sub1].MatchError			= true 
					MatchErrorTable.MatchErrorGroup[Sub1].MatchErrorType		= 6
				else
					initialize MatchErrorTable.MatchErrorGroup[Sub1]
  
					ReceiptLineCount += 1


		
					if (each.ItemType.Service)
						TotalReceiptDetailAddOnCharge	+= each.ReceivedAmountToMatch

					else
					if (each.PurchaseOrderLine not entered)
						TotalReceiptDetailAddOnCharge	+= each.MiscellaneousAddOnChargeInvoicedAmount

					else
						TotalReceiptDetailAddOnCharge	+= each.ReceivedAmountToMatch

		      
					TotalReceiptQuantity				+= each.ReceivedQuantityToMatch
					TotalReceiptLineQuantity			+= each.OpenToMatchQuantity
					DetailRecord						= true   
		
					invoke FastUpdate each
						invoked.MatchSub				= Sub1
						invoked.Selected				= true

					invoke FastUpdate each.MatchWorkReceiptRel
						invoked.MatchSub				= Sub1
						invoked.Selected				= true

					if  (TotalReceiptQuantity >= CurrentInvoiceAddOnChargeRel.MatchedQuantity)
						end for each

		383aMatch1ToAllDetailLoopNoAocOnPO


			if (PayablesInvoice.CostComponentMatch)

				
				if (!CurrentInvoiceAddOnChargeRel.ItemType.Service)
					DetailDifference1Amount						+= Difference1Amount
	
				if (ReceiptLineCount not entered)
					DetailMatchAddOnCharge						+= CurrentInvoiceAddOnChargeRel.MatchAmount
					if  (CurrentInvoiceDetailRel.ItemType.Service)
						SelectedInvoiceAddOnChargeMatchService	+= CurrentInvoiceAddOnChargeRel.MatchAmount
					else
						SelectedInvoiceAddOnChargeMatchAmount 	+= CurrentInvoiceAddOnChargeRel.MatchAmount

				invoke FastUpdate CurrentInvoiceDetailRel
					invoked.MatchSub							= Sub1
					invoked.Selected							= true
					invoked.DifferenceAmount					= Difference1Amount

				if  (CurrentInvoiceAddOnChargeRel.PurchaseOrderLine not entered)
					Difference1Amount							= CurrentInvoiceAddOnChargeRel.PayablesInvoiceAddOnChargeRel.TotalAddOnChargeAmount
					initialize DifferenceWorkAmount
					
					if (Difference1Amount = 0)
						WithinTolerance							= true
					else
					if  (Difference1Amount						< 0)
						include 303gCheckMiscAOCUnderTol
					else
						include 303hCheckMiscAOCOverTol

					if (PayablesInvoice.CostComponentMatch)
						Difference3Amount						+= Difference1Amount

						if  (MatchTable.ChargebackType.Overbill)
							AccumulatedChargebackAmount			+= Difference1Amount
				else
					Difference2Amount							= CurrentInvoiceAddOnChargeRel.MatchUnitCost 
					initialize Difference2WorkAmount

					if (Difference2Amount = 0)
						WithinTolerance							= true
					else
					if  (Difference2Amount						< 0)
						include 303iCheckLineAOCUnderTol
					else
						include 303jCheckLineAOCOverTol

					if (PayablesInvoice.CostComponentMatch)
						Difference3Amount						+= Difference2Amount

						if  (MatchTable.ChargebackType.Overbill)
							AccumulatedChargebackAmount			+= Difference2Amount


				if (!WithinTolerance)
					MatchErrorTable.MatchErrorGroup[Sub1].MatchErrorMessage		= MatchInvoiceErrorMessages.Msg267 + CurrentInvoiceAddOnChargeRel.AddOnCharge
					MatchErrorTable.MatchErrorGroup[Sub1].MatchError			= true 
					MatchErrorTable.MatchErrorGroup[Sub1].MatchErrorType		= 6
				else
					initialize MatchErrorTable.MatchErrorGroup[Sub1]
  
					DetailRecord						= true   
		

		385UpdtMatporwrkRecs


			for each MatchWorkReceiptRel
				initialize DetailMatchAmount
				initialize DetailMatchService
				initialize DetailMatchAddOnCharge			

				if  (LocalMatchRuleToleranceGroup.MatchRuleType.AllToOne
				and (PayablesInvoice.MatchProcessType.DropShip
				or   PayablesInvoice.MatchProcessType.Service))
					invoke FastUpdate each
						invoked.MatchSub				= Sub1
						invoked.Selected				= true
				else
					if (each.PurchaseOrderReceipt not entered)
						for each each.MatchWorkPseudoReceiptLineRel
							if  (each.Selected
							and  each.MatchSub = Sub1)
								DetailMatchQuantity			+= each.UnmatchedQuantity
								if (each.ItemType.Service)
									DetailMatchService		+= each.MatchAmount
								else
									DetailMatchAmount		+= each.MatchAmount
					else 
						for each each.MatchWorkReceiptLineRel

							if  (each.Selected
							and  each.MatchSub = Sub1)
								DetailMatchQuantity			+= each.UnmatchedQuantity
								if (each.ItemType.Service)
									DetailMatchService		+= each.MatchAmount
								else
									DetailMatchAmount		+= each.MatchAmount
	  
					if (PayablesInvoice.CostComponentMatch)
						for each each.MatchWorkReceiptLineAOCRel


							if  (each.Selected
							and  each.MatchSub = Sub1)
								DetailMatchAddOnCharge	+= each.MatchAmount
	



					if (!PayablesInvoice.CostComponentMatch)
						if (DetailMatchAmount > 0
						or  DetailMatchService > 0)
							ReceiptMatchedAmount		+= DetailMatchAmount
							ReceiptMatchedQuantity		+= DetailMatchQuantity
							ReceiptMatchedService		+= DetailMatchService
							invoke FastUpdate each
								invoked.MatchSub		= Sub1
								invoked.Selected		= true
					else
						if (DetailMatchAmount entered
						or  DetailMatchService entered
						or  DetailMatchAddOnCharge entered)
							ReceiptMatchedAmount		+= DetailMatchAmount
							ReceiptMatchedQuantity		+= DetailMatchQuantity
							ReceiptMatchedService		+= DetailMatchService
							ReceiptMatchedAddOnCharge	+= DetailMatchAddOnCharge
							invoke FastUpdate each
								invoked.MatchSub		= Sub1
								invoked.Selected		= true
							      


		389ServiceDropshipEdits














			if  (LocalMatchRuleToleranceGroup.MatchToleranceOption.Extended)
				WithinTolerance	= true
				if (CurrentPurchaseOrderLineRel.MatchedAmount > 0)
					DifferenceWorkAmount		= CurrentPurchaseOrderLineRel.OpenPurchaseAmountPOCurrency
					if  (CurrentPurchaseOrderLineRel.ServiceCode.Amount)
						initialize Difference1Amount
						for each CurrentInvoiceServiceDetailsForPOLineRel
							Difference1Amount		+= each.PayablesInvoiceDetail.MatchedQuantity * each.PayablesInvoiceDetail.MatchUnitCost
						Difference1Amount			-= DifferenceWorkAmount
					else
						Difference1Amount			= ((CurrentInvoiceDetailRel.MatchedQuantity * CurrentInvoiceDetailRel.MatchUnitCost) - DifferenceWorkAmount)
				else
					DifferenceWorkAmount		= ((CurrentPurchaseOrderLineRel.Quantity - CurrentPurchaseOrderLineRel.CancelQuantity) * CurrentPurchaseOrderLineRel.EnteredUnitCost)
					if  (CurrentPurchaseOrderLineRel.ServiceCode.Amount)
						initialize Difference1Amount
						for each CurrentInvoiceServiceDetailsForPOLineRel
							Difference1Amount		+= each.PayablesInvoiceDetail.MatchedQuantity * each.PayablesInvoiceDetail.MatchUnitCost
						Difference1Amount			-= DifferenceWorkAmount
					else
						Difference1Amount			= ((CurrentInvoiceDetailRel.MatchedQuantity * CurrentInvoiceDetailRel.MatchUnitCost) - DifferenceWorkAmount)


				ServiceToleranceDifference		= Difference1Amount
				if (Difference1Amount > 0)
					include 303bCheckExtOverTol
				else
				if  (Difference1Amount < 0
				and  CurrentPurchaseOrderLineRel.ServiceCode.Quantity
				and  !LocalMatchRuleToleranceGroup.MatchRuleType.AllToOne)
					include 303aCheckExtUnderTol
					if (!WithinTolerance)
						MatchErrorTable.MatchErrorGroup[Sub1].MatchErrorType = 2




			else
			if  (LocalMatchRuleToleranceGroup.MatchToleranceOption.UnitCost)

				WithinTolerance = true
				if (CurrentPurchaseOrderLineRel.ServiceCode.Amount)
					Difference2WorkAmount		= CurrentPurchaseOrderLineRel.OpenPurchaseAmountPOCurrency
				else
				if (CurrentPurchaseOrderLineRel.ServiceCode.Quantity)

					Difference2WorkAmount		= CurrentReceiptLineRel.MatchUnitCost 

				if  (CurrentPurchaseOrderLineRel.ServiceCode.Amount)
					Difference2Amount			= (sum CurrentInvoiceServiceDetailsForPOLineRel.PayablesInvoiceDetail.EnteredUnitCost - Difference2WorkAmount)
				else
					Difference2Amount			= CurrentInvoiceDetailRel.PayablesInvoiceDetail.EnteredUnitCost - Difference2WorkAmount


				Difference3Amount	+= CurrentInvoiceDetailRel.PayablesInvoiceDetail.EnteredUnitCost - CurrentPurchaseOrderLineRel.EnteredUnitCost




				if  (Difference2Amount > 0)

					include 303dCheckUnitOverTol
					if (!WithinTolerance)
						MatchErrorTable.MatchErrorGroup[Sub1].MatchErrorType = 2
				else
				if  (Difference2Amount < 0
				and  CurrentPurchaseOrderLineRel.ServiceCode.Quantity)

					include 303cCheckUnitUnderTol
					if (!WithinTolerance)
						MatchErrorTable.MatchErrorGroup[Sub1].MatchErrorType = 2
				else

					if  (Difference2Amount entered)
						if  (CurrentPurchaseOrderLineRel.ServiceCode.Amount
						and  LocalMatchRuleToleranceGroup.MatchRuleType.AllToOne
						and (PayablesInvoice.MatchProcessType.DropShip
						or   PayablesInvoice.MatchProcessType.Service)
						and  Difference2Amount > 0)
							NextSentence = true
						else
							if  (CurrentPurchaseOrderLineRel.ServiceCode.Amount)
								Difference1Amount		= (Difference2Amount - sum CurrentInvoiceServiceDetailsForPOLineRel.MatchAmount)
							else
								Difference1Amount		= Difference2Amount - CurrentInvoiceDetailRel.MatchAmount
							Difference3Amount			+= Difference1Amount


												
				if  (CurrentPurchaseOrderLineRel.ServiceCode.Quantity
				and  WithinTolerance)
					Difference2WorkAmount		= CurrentPurchaseOrderLineRel.VendorPriceUOMQuantity - CurrentPurchaseOrderLineRel.CancelQuantity 
					Difference2Amount			= CurrentInvoiceDetailRel.MatchedQuantity + CurrentPurchaseOrderLineRel.MatchedQuantity - Difference2WorkAmount



					if  (Difference2Amount > 0)
						include 303fCheckQtyOverTol
						if (!WithinTolerance)
							MatchErrorTable.MatchErrorGroup[Sub1].MatchErrorType = 2
					else
					if  (Difference2Amount < 0
					and  !LocalMatchRuleToleranceGroup.MatchRuleType.AllToOne)
						include 303eCheckQtyUnderTol
						if (!WithinTolerance)
							MatchErrorTable.MatchErrorGroup[Sub1].MatchErrorType = 2
							
					if  (WithinTolerance)
						if  (LocalMatchRuleToleranceGroup.MatchRuleType.AllToOne
						and (!PayablesInvoice.MatchProcessType.DropShip
						or   !PayablesInvoice.MatchProcessType.Service)
						and   Difference2Amount < 0)
							NextSentence = true
						else
						if  (Difference2Amount entered)
							Difference1Amount		= Difference2Amount * CurrentPurchaseOrderLineRel.EnteredUnitCost
							Difference3Amount		+= Difference1Amount




		390MatchRefIM










			include 304BuildWorkFiles
			include InvoiceMatchEdits

            InvoiceMatchedAmount                     					= WorkTotalInvoiceMatchAmount
            InvoiceMatchedQuantity		                     			= WorkTotalInvoiceHashQuantity
            ReceiptMatchedAmount		                     			= MatporwrkAmount
            ReceiptMatchedQuantity		                     			= MatporwrkQuantity




			WithinTolerance = true

			if (ReceiptMatchedAmount = 0
			or  ReceiptMatchedQuantity = 0)
				WithinTolerance = false
			else
			if  (LocalMatchRuleToleranceGroup.MatchToleranceOption.ExtendedAndQuantity)
				Difference2Amount			= PayablesInvoice.HashQuantity - MatporwrkQuantity
				Difference2WorkAmount		= PayablesInvoice.HashQuantity



				if (Difference2Amount = 0)
					WithinTolerance							= true
				else
				if  (Difference2Amount < 0)
					include 303eCheckQtyUnderTol
				else
					include 303fCheckQtyOverTol

			if (WithinTolerance)
				Difference1Amount				= InvoiceMatchedAmount - ReceiptMatchedAmount
				DifferenceWorkAmount			= InvoiceMatchedAmount

	
				if (Difference1Amount = 0)
					WithinTolerance = true
				else
				if (Difference1Amount < 0)
					include 303aCheckExtUnderTol
				else
				if (Difference1Amount > 0)
					include 303bCheckExtOverTol


			if (!WithinTolerance)
				MatchErrorTable.MatchErrorGroup[Sub1].MatchErrorMessage = MatchInvoiceErrorMessages.MsgMatchRefOutOfTolerance
				MatchErrorTable.MatchErrorGroup[Sub1].MatchError		= true 
				MatchErrorTable.MatchErrorGroup[Sub1].MatchErrorType	= 2
				OutMatchStatus											= 3 
				initialize OutTotalTransactionAmount
				initialize OutTotalTransactionCount
		  

			if  (!MatchErrorTable.MatchErrorGroup[Sub1].MatchError)
				MatchTestOK										= true
				MatchSub1										= Sub1
				MatchRuleResult									= LocalMatchRuleToleranceGroup.MatchRuleType
				MatchedFromRoutine								= "390"







		
							
		303aCheckExtUnderTol
			WithinTolerance = false
			
			PercentToleranceAmount			= DifferenceWorkAmount * LocalMatchRuleToleranceGroup.MatchUnderAmountPercentage 
			


			if (Difference1Amount < 0)
				Difference1Absolute			= Difference1Amount * -1
			else
				Difference1Absolute			= Difference1Amount
		      
			if  (Difference1Absolute < .01)
			    WithinTolerance = true
			else
			if (LocalMatchRuleToleranceGroup.MatchUnderAmountCondition not entered)
            	if  (LocalMatchRuleToleranceGroup.MatchUnderAmountTolerance entered
		        and  Difference1Absolute <= LocalMatchRuleToleranceGroup.MatchUnderAmountTolerance)
		        	WithinTolerance = true
		        else
		        if  (LocalMatchRuleToleranceGroup.MatchUnderAmountPercentage entered
		        and  Difference1Absolute <= PercentToleranceAmount)
		            WithinTolerance = true
			else		      
		    if (LocalMatchRuleToleranceGroup.MatchUnderAmountCondition.And)
		        if  (Difference1Absolute > LocalMatchRuleToleranceGroup.MatchUnderAmountTolerance
		        and  Difference1Absolute > PercentToleranceAmount)
		        	WithinTolerance	= false
		        else
		            WithinTolerance = true
		    else  
		    if (LocalMatchRuleToleranceGroup.MatchUnderAmountCondition.Or)
		        if  (Difference1Absolute <= LocalMatchRuleToleranceGroup.MatchUnderAmountTolerance)
			        if  (Difference1Absolute <= PercentToleranceAmount)
			            WithinTolerance = true
			        else
			            WithinTolerance = false
		        else
		            WithinTolerance = false


		               
		303bCheckExtOverTol
			
			WithinTolerance = false
			
			PercentToleranceAmount = DifferenceWorkAmount * LocalMatchRuleToleranceGroup.MatchOverAmountPercentage
		      
		    if (Difference1Amount < 0)
		    	Difference1Absolute = Difference1Amount * -1
		    else
		    	Difference1Absolute = Difference1Amount



			if  (Difference1Absolute < .01)
			    WithinTolerance = true
			else
		    if (LocalMatchRuleToleranceGroup.MatchOverAmountCondition not entered)
		    	if  (LocalMatchRuleToleranceGroup.MatchOverAmountTolerance entered
		        and  Difference1Absolute <= LocalMatchRuleToleranceGroup.MatchOverAmountTolerance)
		        	WithinTolerance = true
		        else
		        if  (LocalMatchRuleToleranceGroup.MatchOverAmountPercentage entered
		        and  Difference1Absolute <= PercentToleranceAmount)
		        	WithinTolerance = true
			else		    
		    if (LocalMatchRuleToleranceGroup.MatchOverAmountCondition.And)

		    	if  (Difference1Absolute > LocalMatchRuleToleranceGroup.MatchOverAmountTolerance
		        and  Difference1Absolute > PercentToleranceAmount)
		        	WithinTolerance	= false
				else
		        	WithinTolerance = true
			else		      
		    if (LocalMatchRuleToleranceGroup.MatchOverAmountCondition.Or)

		    	if  (Difference1Absolute <= LocalMatchRuleToleranceGroup.MatchOverAmountTolerance)

					if  (Difference1Absolute <= PercentToleranceAmount)

		            	WithinTolerance = true
		            else

		                WithinTolerance = false
		        else

		            WithinTolerance = false
		               


		303cCheckUnitUnderTol
			WithinTolerance = false
		      
			PercentToleranceAmount2 = Difference2WorkAmount * LocalMatchRuleToleranceGroup.MatchUnderAmountPercentage
		      

		      
			if (Difference2Amount < 0)
		    	Difference2Absolute = Difference2Amount * -1
		    else
		    	Difference2Absolute = Difference2Amount
		      
			if (LocalMatchRuleToleranceGroup.MatchUnderAmountCondition not entered)

				if  (LocalMatchRuleToleranceGroup.MatchUnderAmountTolerance entered
				and  Difference2Absolute <= LocalMatchRuleToleranceGroup.MatchUnderAmountTolerance)
					WithinTolerance = true
				else
				if  (LocalMatchRuleToleranceGroup.MatchUnderAmountPercentage entered
				and  Difference2Absolute <= PercentToleranceAmount2)
					WithinTolerance = true
			else		      
			if (LocalMatchRuleToleranceGroup.MatchUnderAmountCondition.And)

				if  (Difference2Absolute > LocalMatchRuleToleranceGroup.MatchUnderAmountTolerance
				and  Difference2Absolute > PercentToleranceAmount2)
					WithinTolerance = false
				else
					WithinTolerance = true
			else
			if (LocalMatchRuleToleranceGroup.MatchUnderAmountCondition.Or)

				if  (Difference2Absolute <= LocalMatchRuleToleranceGroup.MatchUnderAmountTolerance)
					if  (Difference2Absolute <= PercentToleranceAmount2)
						WithinTolerance = true
					else
						WithinTolerance = false
				else
					WithinTolerance = false
		               


		303dCheckUnitOverTol
			WithinTolerance = false
		      
			PercentToleranceAmount2 = Difference2WorkAmount * LocalMatchRuleToleranceGroup.MatchOverAmountPercentage
		      

		      
			if (Difference2Amount < 0)
				Difference2Absolute = Difference2Amount * -1
			else
				Difference2Absolute = Difference2Amount
		      
			if (LocalMatchRuleToleranceGroup.MatchOverAmountCondition not entered)
				if  (LocalMatchRuleToleranceGroup.MatchOverAmountTolerance entered
				and  Difference2Absolute <= LocalMatchRuleToleranceGroup.MatchOverAmountTolerance)
					WithinTolerance = true
				else
				if  (LocalMatchRuleToleranceGroup.MatchOverAmountPercentage entered
				and  Difference2Absolute <= PercentToleranceAmount2)
					WithinTolerance = true
			else
			if (LocalMatchRuleToleranceGroup.MatchOverAmountCondition.And)
				if  (Difference2Absolute > LocalMatchRuleToleranceGroup.MatchOverAmountTolerance
				and  Difference2Absolute > PercentToleranceAmount2)
					WithinTolerance = false
				else
					WithinTolerance = true
			else  
			if (LocalMatchRuleToleranceGroup.MatchOverAmountCondition.Or)
				if  (Difference2Absolute <= LocalMatchRuleToleranceGroup.MatchOverAmountTolerance)
					if  (Difference2Absolute <= PercentToleranceAmount2)
						WithinTolerance = true
					else
						WithinTolerance = false
				else
					WithinTolerance = false



		303eCheckQtyUnderTol
			WithinTolerance = false
		      
			PercentToleranceAmount2 = Difference2WorkAmount * LocalMatchRuleToleranceGroup.MatchUnderQuantityPercentage
		      


			if (Difference2Amount < 0)
				Difference2Absolute = Difference2Amount * -1
			else
				Difference2Absolute = Difference2Amount






			
			if (LocalMatchRuleToleranceGroup.MatchUnderQuantityCondition not entered)
				if  (LocalMatchRuleToleranceGroup.MatchUnderQuantityTolerance entered
				and  Difference2Absolute <= LocalMatchRuleToleranceGroup.MatchUnderQuantityTolerance)
					WithinTolerance = true
				else
				if  (LocalMatchRuleToleranceGroup.MatchUnderQuantityPercentage entered
				and  Difference2Absolute <= PercentToleranceAmount2)
					WithinTolerance = true
			else		      
			if (LocalMatchRuleToleranceGroup.MatchUnderQuantityCondition.And)
				if  (Difference2Absolute > LocalMatchRuleToleranceGroup.MatchUnderQuantityTolerance
				and  Difference2Absolute > PercentToleranceAmount2)
					WithinTolerance = false
				else
					WithinTolerance = true
		    else  
			if (LocalMatchRuleToleranceGroup.MatchUnderQuantityCondition.Or)
				if  (Difference2Absolute <= LocalMatchRuleToleranceGroup.MatchUnderQuantityTolerance)
				    WithinTolerance = true
				else
				if  (Difference2Absolute <= PercentToleranceAmount2)
					WithinTolerance = true
				else
					WithinTolerance = false



		303fCheckQtyOverTol

			WithinTolerance = false
		      
			PercentToleranceAmount2 = Difference2WorkAmount * LocalMatchRuleToleranceGroup.MatchOverQuantityPercentage
		      

		      
			if (Difference2Amount < 0)
				Difference2Absolute = Difference2Amount * -1
			else
				Difference2Absolute = Difference2Amount

			if (FinanceResourceActorRel.RestrictMatchedNotReceived
			and Difference2Absolute entered)
				OverQuantityRestricted = true 
				WithinTolerance = false
			else 
			if (LocalMatchRuleToleranceGroup.MatchOverQuantityCondition not entered)


				if  (LocalMatchRuleToleranceGroup.MatchOverQuantityTolerance entered
				and  Difference2Absolute <= LocalMatchRuleToleranceGroup.MatchOverQuantityTolerance)
					WithinTolerance = true
				else
				if  (LocalMatchRuleToleranceGroup.MatchOverQuantityPercentage entered
				and  Difference2Absolute <= PercentToleranceAmount2)
		            WithinTolerance = true
			else		      
			if (LocalMatchRuleToleranceGroup.MatchOverQuantityCondition.And)
				if  (Difference2Absolute > LocalMatchRuleToleranceGroup.MatchOverQuantityTolerance
				and  Difference2Absolute > PercentToleranceAmount2)
					WithinTolerance = false
				else
					WithinTolerance = true
			else		      
			if (LocalMatchRuleToleranceGroup.MatchOverQuantityCondition.Or)
				if  (Difference2Absolute <= LocalMatchRuleToleranceGroup.MatchOverQuantityTolerance)
					if  (Difference2Absolute <= PercentToleranceAmount2)
						WithinTolerance = true
					else
						WithinTolerance = false
				else
					WithinTolerance = false



		303gCheckMiscAOCUnderTol
			WithinTolerance = false
			
			PercentToleranceAmount			= DifferenceWorkAmount * LocalMatchMessageToleranceGroup.MiscellaneousAOCUnderTolerancePercent 
			


			if (Difference1Amount < 0)
				Difference1Absolute			= Difference1Amount * -1
			else
				Difference1Absolute			= Difference1Amount
		      
			if (LocalMatchMessageToleranceGroup.MiscellaneousAOCUnderCondition not entered)
            	if  (LocalMatchMessageToleranceGroup.MiscellaneousAOCUnderToleranceAmount entered
		        and  Difference1Absolute <= LocalMatchMessageToleranceGroup.MiscellaneousAOCUnderToleranceAmount)
		        	WithinTolerance = true
		        else
		        if  (LocalMatchMessageToleranceGroup.MiscellaneousAOCUnderTolerancePercent entered
		        and  Difference1Absolute <= PercentToleranceAmount)
		            WithinTolerance = true
			else		      
		    if (LocalMatchMessageToleranceGroup.MiscellaneousAOCUnderCondition.And)
		        if  (Difference1Absolute > LocalMatchMessageToleranceGroup.MiscellaneousAOCUnderToleranceAmount
		        and  Difference1Absolute > PercentToleranceAmount)
		        	WithinTolerance	= false
		        else
		            WithinTolerance = true
		    else  
		    if (LocalMatchMessageToleranceGroup.MiscellaneousAOCUnderCondition.Or)
		        if  (Difference1Absolute <= LocalMatchMessageToleranceGroup.MiscellaneousAOCUnderToleranceAmount)
			        if  (Difference1Absolute <= PercentToleranceAmount)
			            WithinTolerance = true
			        else
			            WithinTolerance = false
		        else
		            WithinTolerance = false


		               
		303hCheckMiscAOCOverTol

			
			WithinTolerance = false
			
			PercentToleranceAmount = DifferenceWorkAmount * LocalMatchMessageToleranceGroup.MiscellaneousAOCOverTolerancePercent
		      
		    if (Difference1Amount < 0)
		    	Difference1Absolute = Difference1Amount * -1
		    else
		    	Difference1Absolute = Difference1Amount



		    if (LocalMatchMessageToleranceGroup.MiscellaneousAOCOverCondition not entered)

		    	if  (LocalMatchMessageToleranceGroup.MiscellaneousAOCOverToleranceAmount entered
		        and  Difference1Absolute <= LocalMatchMessageToleranceGroup.MiscellaneousAOCOverToleranceAmount)
		        	WithinTolerance = true
		        else
		        if  (LocalMatchMessageToleranceGroup.MiscellaneousAOCOverTolerancePercent entered
		        and  Difference1Absolute <= PercentToleranceAmount)
		        	WithinTolerance = true
			else		    
		    if (LocalMatchMessageToleranceGroup.MiscellaneousAOCOverCondition.And)

		    	if  (Difference1Absolute > LocalMatchMessageToleranceGroup.MiscellaneousAOCOverToleranceAmount
		        and  Difference1Absolute > PercentToleranceAmount)
		        	WithinTolerance	= false
				else
		        	WithinTolerance = true
			else		      
		    if (LocalMatchMessageToleranceGroup.MiscellaneousAOCOverCondition.Or)

		    	if  (Difference1Absolute <= LocalMatchMessageToleranceGroup.MiscellaneousAOCOverToleranceAmount)

					if  (Difference1Absolute <= PercentToleranceAmount)

		            	WithinTolerance = true
		            else

		                WithinTolerance = false
		        else

		            WithinTolerance = false
		               


		303iCheckLineAOCUnderTol
			WithinTolerance = false
		      
			PercentToleranceAmount2 = Difference2WorkAmount * LocalMatchMessageToleranceGroup.LineAddOnChargeUnderTolerancePercent
		      

		      
			if (Difference2Amount < 0)
		    	Difference2Absolute = Difference2Amount * -1
		    else
		    	Difference2Absolute = Difference2Amount
		      
			if (LocalMatchMessageToleranceGroup.LineAddOnChargeUnderCondition not entered)

				if  (LocalMatchMessageToleranceGroup.LineAddOnChargeUnderToleranceAmount entered
				and  Difference2Absolute <= LocalMatchMessageToleranceGroup.LineAddOnChargeUnderToleranceAmount)
					WithinTolerance = true
				else
				if  (LocalMatchMessageToleranceGroup.LineAddOnChargeUnderTolerancePercent entered
				and  Difference2Absolute <= PercentToleranceAmount2)
					WithinTolerance = true
			else		      
			if (LocalMatchMessageToleranceGroup.LineAddOnChargeUnderCondition.And)

				if  (Difference2Absolute > LocalMatchMessageToleranceGroup.LineAddOnChargeUnderToleranceAmount
				and  Difference2Absolute > PercentToleranceAmount2)
					WithinTolerance = false
				else
					WithinTolerance = true
			else
			if (LocalMatchMessageToleranceGroup.LineAddOnChargeUnderCondition.Or)

				if  (Difference2Absolute <= LocalMatchMessageToleranceGroup.LineAddOnChargeUnderToleranceAmount)
					if  (Difference2Absolute <= PercentToleranceAmount2)
						WithinTolerance = true
					else
						WithinTolerance = false
				else
					WithinTolerance = false
		               


		303jCheckLineAOCOverTol
			WithinTolerance = false
		      
			PercentToleranceAmount2 = Difference2WorkAmount * LocalMatchMessageToleranceGroup.LineAddOnChargeOverTolerancePercent
		      

		      
			if (Difference2Amount < 0)
				Difference2Absolute = Difference2Amount * -1
			else
				Difference2Absolute = Difference2Amount
		      
			if (LocalMatchMessageToleranceGroup.LineAddOnChargeOverCondition not entered)

				if  (LocalMatchMessageToleranceGroup.LineAddOnChargeOverToleranceAmount entered
				and  Difference2Absolute <= LocalMatchMessageToleranceGroup.LineAddOnChargeOverToleranceAmount)
					WithinTolerance = true
				else
				if  (LocalMatchMessageToleranceGroup.LineAddOnChargeOverTolerancePercent entered
				and  Difference2Absolute <= PercentToleranceAmount2)
					WithinTolerance = true
			else
			if (LocalMatchMessageToleranceGroup.LineAddOnChargeOverCondition.And)

				if  (Difference2Absolute > LocalMatchMessageToleranceGroup.LineAddOnChargeOverToleranceAmount
				and  Difference2Absolute > PercentToleranceAmount2)
					WithinTolerance = false
				else
					WithinTolerance = true
			else  
			if (LocalMatchMessageToleranceGroup.LineAddOnChargeOverCondition.Or)

				if  (Difference2Absolute <= LocalMatchMessageToleranceGroup.LineAddOnChargeOverToleranceAmount)
					if  (Difference2Absolute <= PercentToleranceAmount2)
						WithinTolerance = true
					else
						WithinTolerance = false
				else
					WithinTolerance = false




		304BuildWorkFiles


			if  (NumberOfInvoices not entered)
				include 910BuildInvoiceWorkFile
				CurrentPayablesInvoice = PayablesInvoice 

           	if  (!LocalMatchRuleToleranceGroup.InvoiceMatchLevel.DetailMatch
           	or   !LocalMatchRuleToleranceGroup.MatchRuleType.AllToOne)
           		if  (!ProcessMode.Reconciliation
            	and  (LocalMatchRuleToleranceGroup.MatchRuleType.AllToAll
   	        	or    LocalMatchRuleToleranceGroup.MatchRuleType.AllToOne))
					if  (LinkedAutoMatchResult entered)
	   	        		if  (NumberOfInvoices != NumberOfInvoicesWithDetails
   		        		and  NumberOfInvoicesWithDetails entered)
							BuildWorkFileError 			= true
							invoke UpdateFromMatch AutoMatchResultInvoiceRel
								invoked.ErrorMessage 				= MatchInvoiceErrorMessages.Msg160 
								invoked.SystemOwner					= 1
								invoked.UnmatchedAmount				= PayablesInvoice.InvoiceAmount.CurrencyAmount
							initialize LinkedAutoMatchResult
					else
					if  (!BypassBuildWorkFileConstraints)
   	        			constraint (NumberOfInvoices = NumberOfInvoicesWithDetails
   	        			or          NumberOfInvoicesWithDetails not entered)
   	        				"<MatchInvoiceErrorMessages.Msg160>"
		


			if  (NumberOfReceipts not entered
			and  MatprlwrkServiceCount not entered
			and  MatprlwrkDropshipCount not entered)



	
				initialize MatporwrkCount
	            initialize MatprlwrkCount
	            initialize MatrecwrkCount
	            initialize MatporwrkAmount
	            initialize MatporwrkAddOnCharge
	            initialize MatrecwrkAddOnCharge
	            initialize MatporwrkQuantity
	            initialize MatprlwrkServiceCount
	            initialize MatprlwrkServiceAmount
	            initialize MatprlwrkServiceAddOnCharge
	            initialize MatprlwrkServiceQuantity
	            initialize MatprlwrkDropshipCount
	            initialize MatprlwrkDropshipAmount
	            initialize MatprlwrkDropshipAddOnCharge
	            initialize MatprlwrkDropshipQuantity
	            initialize BestReceiptDate

				if  (ProcessByMatchReference)

					if  (PayablesInvoice.MatchReferenceNumber entered)
						for each PurchaseOrderReceiptMatchReferenceRel

							CurrentPurchaseOrder				= each.PurchaseOrder
							include 922FillMatporwrk
				else					
				if  (!PayablesInvoice.MatchProcessType.DropShip
				and  !PayablesInvoice.MatchProcessType.Service
				and  !PayablesInvoice.MatchProcessType.ServiceContract
	            and  !MemoInvoice)

		

					if  (PoolOption.CompanyVendor
					and  MatchLevel.InvoiceMatch)

						for each PurchaseOrderReceiptVendorRel
							CurrentPurchaseOrder				= each.PurchaseOrder
							include 922FillMatporwrk

						if  (PayablesInvoice.MatchPrepaymentMethod.PrepayFromInvoice)

							for each PayablesInvoice.MatchPurchaseOrderInvoicesRel
								for each each.PolineServiceRel
									include 952BuildMatprlwrk
								if (MatprlwrkServiceCount entered)
	            					include 969BuildPseudoMatporwrk
					else
						for each PayablesInvoice.MatchPurchaseOrderInvoicesRel

							CurrentPurchaseOrder				= each.PurchaseOrder
							for each PurchaseOrderReceiptVendorPORel

								if  (!PoolOption.CompanyVendorPoShipTo
								or    each.ShipToLocation		= PayablesInvoice.Location)
									include 922FillMatporwrk

							if  (PayablesInvoice.MatchPrepaymentMethod.PrepayFromInvoice)

								for each each.PolineServiceRel
									include 952BuildMatprlwrk
								if (MatprlwrkServiceCount entered)
		            				include 969BuildPseudoMatporwrk
								
				if (MemoInvoice)
					include 950BuildMatprlwrkFromPO
					include 960BuildMatrecwrkSvcDrps
				else
				if  (PayablesInvoice.MatchProcessType.DropShip
				or   PayablesInvoice.MatchProcessType.Service
				or ((PayablesInvoice.MatchProcessType.ReceiptMatch
				or   PayablesInvoice.MatchProcessType.AOCOnly)
				and (MultiplePurchaseOrders
				or   HasServiceLines)))
					include 950BuildMatprlwrkFromPO
					include 960BuildMatrecwrkSvcDrps
	
				if  (MatporwrkCount not entered
				and  PayablesInvoice.MatchProcessType.AOCOnly)

		
					if (ProcessByMatchReference)
						for each ReceiptLineAOCMatchReferenceRel
							include 971FillMatrecwrkLoop
					else				
					if (PurchaseOrder entered)
						for each PurchaseOrderReceiptLineAOCSet2PORel
							include 971FillMatrecwrkLoop
					else
						for each PurchaseOrderReceiptLineAOCSet2Rel
							include 971FillMatrecwrkLoop


	      
				if  (LinkedAutoMatchResult entered)
   	        		if  (MatporwrkCount not entered
	        		and  MatprlwrkServiceCount not entered
	        		and  MatprlwrkDropshipCount not entered
					and  !PayablesInvoice.MatchProcessType.AOCOnly)
						BuildWorkFileError 			= true
						invoke UpdateFromMatch AutoMatchResultInvoiceRel
							invoked.ErrorMessage 				= MatchInvoiceErrorMessages.Msg200
							invoked.SystemOwner					= 2
							invoked.UnmatchedAmount				= PayablesInvoice.InvoiceAmount.CurrencyAmount
							invoked.MatchErrorType 				= 3
						initialize LinkedAutoMatchResult
				else
				if  (!BypassBuildWorkFileConstraints)
					if (!PayablesInvoice.MatchProcessType.AOCOnly)
						constraint  (MatporwrkCount entered
						or           MatprlwrkServiceCount entered
						or           MatprlwrkDropshipCount entered)
							"<MatchInvoiceErrorMessages.Msg200>"

		910BuildInvoiceWorkFile

		
			if ((!ProcessMode.Reconciliation
			and  !PayablesInvoice.MatchPrepaymentMethod.PrepayFromInvoice
			and  !InvoiceMatchAllExists)
			or    PayablesInvoice.MatchProcessType.Service)
				CurrentPayablesInvoice = PayablesInvoice

				include 912FillMatapiwrk
			else
			if  (PoolOption.CompanyVendor
			and  ReconciliationMatchLevel.InvoiceMatch)

				for each PayablesInvoiceByVendorRel

					CurrentPayablesInvoice = each.PayablesInvoice
					include 912FillMatapiwrk
			else
			if  (!ProcessMode.Reconciliation
			and  !PayablesInvoice.InvoiceType.MatchPrepayment
			and  MultiplePurchaseOrders)
				CurrentPayablesInvoice = PayablesInvoice

				include 912FillMatapiwrk
			else
			if  (ProcessMode.Reconciliation
			and  ReconciliationMatchLevel.DetailMatch
			and  !ReconciliationUpdate)
				CurrentPayablesInvoice = PayablesInvoice

				include 912FillMatapiwrk
			else
			if  (ProcessByMatchReference)
				for each PayablesInvoiceByMatchReferenceRel

					CurrentPayablesInvoice = each.PayablesInvoice
					include 912FillMatapiwrk
			else
			if  (PoolOption.CompanyVendor)

				for each PayablesInvoiceByVendorRel

					CurrentPayablesInvoice = each.PayablesInvoice
					include 912FillMatapiwrk
			else
			if  (PoolOption.CompanyVendorPo)

				for each PayablesInvoiceByVendorPORel

					CurrentPayablesInvoice = each.PayablesInvoice
					include 912FillMatapiwrk
			else

				for each PayablesInvoiceByVendorPOLocationRel

					CurrentPayablesInvoice = each.PayablesInvoice
					include 912FillMatapiwrk
				
		912FillMatapiwrk
		



			
			if  ((MatchLevel.DetailMatch
			and   MatchRuleResult.AllToOne
			and   ProcessMode.Online
			and   CurrentPayablesInvoice != PayablesInvoice)

			or   (CurrentPayablesInvoice != PayablesInvoice
			and   CurrentPayablesInvoiceRel.MatchPrepaymentMethod not =  PayablesInvoice.MatchPrepaymentMethod)

			or   (CurrentPayablesInvoice != PayablesInvoice
			and   MatchLevel.DetailMatch
			and   !CurrentPayablesInvoiceRel.PayablesInvoiceDetailRel exists))

				NextSentence = true
			
			else
				include CreateWorkInvoiceRecord

		CreateWorkInvoiceRecord

		
			if  (ReconciliationMatchLevel.InvoiceMatch
			and  MatchReconQueueRel.View.InvoiceMatch)
				if (CurrentInvoiceMatchReconQueueRel exists
				and CurrentInvoiceMatchReconQueueRel.MatchWork entered
				and CurrentInvoiceMatchReconQueueRel.MatchWork != MatchWork)

					invoke PurgeDetail CurrentInvoiceMatchReconQueueRel.MatchWork
					invoke Purge CurrentInvoiceMatchReconQueueRel.MatchWork
					invoke FastUpdate CurrentInvoiceMatchReconQueueRel
						invoked.MatchWork = MatchWork

			invoke Create MatchWorkInvoice
				fill in fields from CurrentPayablesInvoiceRel.PayablesInvoice
				invoked.Company							= Company
				invoked.PayablesInvoice					= CurrentPayablesInvoice
				invoked.MatchWork 						= MatchWork
				if  (!MultiplePurchaseOrders)
					invoked.PurchaseOrder				= CurrentPayablesInvoiceRel.FirstPurchaseOrder

			if (PerformCreateDetailsInSetAction)
				NextSentence = true
			else
				for each CurrentPayablesInvoiceRel.PayablesInvoiceDetailRel  


					if (each.PurchaseOrderReceiptLine entered
					and each.EnteredQuantity > each.PurchaseOrderReceiptLine.OpenToMatchQuantity)
						invoke FastUpdate each
							initialize invoked.PurchaseOrderReceipt
							initialize invoked.PurchaseOrderReceiptLine

					invoke Create MatchWorkInvoiceDetail
						fill in fields from each
						invoked.MatchWork 						= MatchWork
						invoked.Company							= each.Company
						invoked.PayablesInvoice					= CurrentPayablesInvoiceRel.PayablesInvoice 
						invoked.PurchaseOrder					= each.PurchaseOrder
						invoked.PurchaseOrderLine				= each.PurchaseOrderLine
						invoked.PayablesInvoiceDetail			= each.PayablesInvoiceDetail



						if (each.ItemType.Service
						or  CurrentPayablesInvoiceRel.MatchProcessType.DropShip)
							invoked.MatchToReceipt				= false
						else
							invoked.MatchToReceipt				= true
						
						if (each.TotalDistributionAmount entered)
							invoked.MatchedQuantity				= each.MatchedQuantity
							invoked.MatchUnitCost				= each.MatchUnitCost
							invoked.MatchAmount					= each.TotalDistributionAmount
						else
							invoked.MatchedQuantity				= each.MatchedQuantity
							invoked.MatchUnitCost				= each.MatchUnitCost
							invoked.MatchAmount					= each.MatchedQuantity * each.MatchUnitCost
	
					MatmadwrkCount += 1
					TotalDetailRecords += 1

				
			if  (CurrentPayablesInvoiceRel.DueDate > LastDueDate)
				LastDueDate									= CurrentPayablesInvoiceRel.DueDate
				LastLocation								= CurrentPayablesInvoiceRel.Location


			for each CurrentPayablesInvoiceRel.PayablesInvoiceAddOnChargeRel   
				if (!each.RecordSource.CreatedByAocSpreadFromPo
				and !each.RecordSource.GeneratedByAocSpread)
					invoke Create MatchWorkInvoiceAddOnCharge
						fill in fields from each
						invoked.MatchWorkInvoiceAddOnCharge		= each.PayablesInvoiceAddOnCharge
						invoked.MatchWork 						= MatchWork
						invoked.Company							= each.Company
						invoked.MatchWorkInvoice				= each.PayablesInvoice
						invoked.PurchaseOrder					= each.PurchaseOrder
						invoked.PurchaseOrderLine				= each.PurchaseOrderLine
						invoked.MatchWorkInvoiceAddOnCharge		= each.PayablesInvoiceAddOnCharge
						invoked.Vendor							= each.Vendor
						invoked.AddOnCharge						= each.AddOnCharge
						invoked.Item							= each.Item
						invoked.ItemType						= each.ItemType
						invoked.MatchDetailKey					= each.PurchaseOrderLine.MatchDetailKey
						invoked.Vendor							= each.Vendor

					TotalDetailRecords += 1
					TotalAocRecords += 1 



			if  (CurrentPayablesInvoiceRel.ServiceDetailsRel exists
			and  !CurrentPayablesInvoiceRel.PayablesMatchInvoiceDetailGoodsRel exists)
				constraint (CurrentPayablesInvoiceRel.MatchProcessType.DropShip
				or  	    CurrentPayablesInvoiceRel.MatchProcessType.Service
				or          CurrentPayablesInvoiceRel.MatchProcessType.ServiceContract)
					"<MatchInvoiceErrorMessages.Msg180>"

			WorkTotalInvoiceMatchAmount						+= CurrentPayablesInvoiceRel.MatchAmount
			WorkTotalInvoiceMatchAddOnCharge				+= CurrentPayablesInvoiceRel.MatchedAddOnChargeAmount
			WorkTotalInvoiceHashQuantity					+= CurrentPayablesInvoiceRel.HashQuantity


		400InvoiceMatchValidation



			if  (!ProcessMode.Reconciliation
			and (!InPrepaids
			or    LinkedAutoMatchResult entered)
            and  MatchTestOK
            and (LocalMatchRuleToleranceGroup.InvoiceMatchLevel.InvoiceMatch
            or   ProcessByMatchReference))

				initialize SelectedInvoiceDetailMatchAmount
				initialize SelectedInvoiceDetailMatchCount
				initialize SelectedInvoiceAddOnChargeMatchAmount
				initialize SelectedInvoiceAddOnChargeMatchCount
				
				include 304BuildWorkFiles
	
				for each MatchWorkInvoiceRel
					include 412InvoiceMatchDetail      

				if  (LocalMatchRuleToleranceGroup.MatchRuleType.OneToOne
				or   LocalMatchRuleToleranceGroup.MatchRuleType.AllToOne)
	            	NextSentence = true
	            else
					if  (Vendor.PoolOption.CompanyVendor
		            and  LocalMatchRuleToleranceGroup.MatchRuleType.OneToAll
		            and !ProcessByMatchReference
		            and  MultiplePurchaseOrders)
		            	NextSentence = true
		            else

		            	for each MatchWorkReceiptRel
		            		if (!each.Selected
		            		or   each.MatchSub != MatchSub1)
		            			invoke FastUpdate each
									invoked.MatchSub					= MatchSub1	      
									invoked.Selected					= true


						if (PayablesInvoice.MatchProcessType.AOCOnly)
							NextSentence = true
						else

								
			            	for each MatchWorkReceiptLineRel
			            		if (!each.Selected
			            		or   each.MatchSub != MatchSub1)
			            			invoke FastUpdate each
										invoked.MatchSub					= MatchSub1	      
										invoked.Selected					= true
		
			            	for each MatchWorkReceiptLineAOCRel
			            		if (!each.Selected
			            		or   each.MatchSub != MatchSub1)
			            			invoke FastUpdate each
										invoked.MatchSub					= MatchSub1	      
										invoked.Selected					= true

				if  (LocalMatchRuleToleranceGroup.MatchRuleType.OneToOne
				or   LocalMatchRuleToleranceGroup.MatchRuleType.AllToOne
				or  (Vendor.PoolOption.CompanyVendor
	            and  LocalMatchRuleToleranceGroup.MatchRuleType.OneToAll
	            and  MultiplePurchaseOrders))


					for each MatchWorkReceiptRel

						if  ((each.Selected
						and   each.MatchSub		= MatchSub1)
						or    ProcessByMatchReference)

							for each each.MatchWorkReceiptLineAOCRel
		            			invoke FastUpdate each
									invoked.MatchSub					= MatchSub1	      
									invoked.Selected					= true
						
							if  (!PayablesInvoice.MatchProcessType.AOCOnly)
								for each each.MatchWorkReceiptLineRel
			            			invoke FastUpdate each
										invoked.MatchSub					= MatchSub1	      
										invoked.Selected					= true
      
            if  (!ReconciliationUpdate
            and  !ProcessByMatchReference)

	           	include 304BuildWorkFiles


				
			if  (ProcessMode.Reconciliation
            and  !ReconciliationUpdate)
            	NextSentence = true
            else

				if  (LocalMatchRuleToleranceGroup.InvoiceMatchLevel.InvoiceMatch)

					if  (OverrideDetail)
						for each MatchWorkInvoiceDetailRel

							if  (each.PayablesInvoiceDetail.PurchaseOrderReceipt not entered
							and  each.PurchaseOrder != PurchaseOrder
							and  !each.SelectedReceiptLineRel exists
							and  !each.ItemType.Service)

								invoke Delete each.InvoiceDistributionsForPurchaseOrderLineRel
								invoke Delete each.TaxDistributionsForPurchaseOrderLineRel
								invoke Delete each

					if  (OverrideAOCDetail)
						for each MatchWorkInvoiceAddOnChargeRel
							if  (each.PayablesInvoiceAddOnChargeRel.PurchaseOrderReceipt not entered
							and !each.MatchWorkPOLineAOCRel exists
							and !each.ItemType.Service)
								invoke Delete each.InvoiceDistributionsForPurchaseOrderLineRel
								invoke Delete each.TaxDistributionsForPurchaseOrderLineRel
								invoke Delete each 

				if  (ProcessMode.Reconciliation)
	                InvoiceMatchedAmount 				= ReconciliationInvoiceMatchedAmount
	                InvoiceMatchedAddOnCharge 			= ReconciliationInvoiceAddOnCharge
	                InvoiceMatchedQuantity 				= ReconciliationInvoiceQuantity
	                ReceiptMatchedAmount 				= ReconciliationReceiptMatchedAmount
	                ReceiptMatchedAddOnCharge 			= ReconciliationReceiptAddOnCharge
	                ReceiptMatchedAmount 				+= ReconciliationServiceTotal
	                ReceiptMatchedAddOnCharge 			+= ReconciliationServiceAddOnCharge
	                ReceiptMatchedQuantity 				= ReconciliationReceiptQuantity
	                ReceiptMatchedQuantity 				+= ReconciliationServiceQuantity
	                
					MatchTestOK							= true
					WithinTolerance						= true
					RulesOK								= true
	


				if  (MatchTestOK
	            and  MatchTable.ChargebackType.Overbill
	            and  LocalMatchRuleToleranceGroup.InvoiceMatchLevel.DetailMatch
	            and  !ProcessMode.Reconciliation
	            and  !PayablesInvoice.MatchProcessType.Service
	            and  !PayablesInvoice.MatchProcessType.DropShip)
	            	Difference3Amount 						= AccumulatedChargebackAmount

				else
				if  (MatchTestOK)


		            if  ((PayablesInvoice.MatchProcessType.Service
		            or   PayablesInvoice.MatchProcessType.DropShip)
		            and  InvoiceMatchedAmount < PurchaseOrder.OpenPurchaseAmount
					and  !NonServiceByAmountLineRel exists) // or "only Service By Amount exists"
		            	NextSentence = true
		            else
					if  (!ProcessMode.Reconciliation
					or  (ProcessMode.Reconciliation
					and  !LocalMatchRuleToleranceGroup.CreateChargeback)
		            or   LocalMatchRuleToleranceGroup.InvoiceMatchLevel.InvoiceMatch)
						if  (PayablesInvoice.CostComponentMatch 
						or   PayablesInvoice.MatchPrepaymentMethod.PrepayFromInvoice)
							if  (InvoiceMatchedAmount 			!= ReceiptMatchedAmount
							or   InvoiceMatchedAddOnCharge  	!= ReceiptMatchedAddOnCharge)
								Difference3Amount 				 = ((InvoiceMatchedAmount + InvoiceMatchedAddOnCharge) - (ReceiptMatchedAmount + ReceiptMatchedAddOnCharge))


						else
		            	if  (InvoiceMatchedAmount 				!= ReceiptMatchedAmount)
		                	Difference3Amount 				 	 = (InvoiceMatchedAmount - ReceiptMatchedAmount)





	       		constraint (NumberOfInvoices entered)
	       			"NoInvoicesFoundToMatch"
      
		412InvoiceMatchDetail

      
			if  ((LocalMatchRuleToleranceGroup.MatchRuleType.AllToOne
			or    LocalMatchRuleToleranceGroup.MatchRuleType.AllToAll)
			or   (each.Company					= Company
			and   each.Vendor					= Vendor
			and   each.PayablesInvoice			= PayablesInvoice))

				invoke FastUpdate each
					invoked.Selected								= true
      
			if  (InvoiceDetailKeyed)			
				for each each.MatchWorkInvoiceDetailRel
					include 413MatchInvoiceDetail      

				TotalSelectedInvoiceDetails							+= SelectedInvoiceDetailMatchCount      

				if  (!OverrideDetail
				and   SelectedInvoiceDetailMatchCount entered)
					constraint (each.MatchAmount = SelectedInvoiceDetailMatchAmount)
						"<MatchInvoiceErrorMessages.Msg198>"
      
			for each each.MatchWorkInvoiceAddOnCharge set
				include 415MatchAocDetail      

			if  (!OverrideDetail
			and   SelectedInvoiceAddOnChargeMatchCount entered)
				if  (PayablesInvoice.MatchProcessType.DropShip
				or   PayablesInvoice.MatchProcessType.Service)
					constraint (each.MatchedAddOnChargeAmount = SelectedInvoiceAddOnChargeMatchAmount)
						"<MatchInvoiceErrorMessages.Msg122>"
				else
					constraint (each.MatchedAddOnChargeAmount = SelectedInvoiceAddOnChargeMatchAmount)
						"<MatchInvoiceErrorMessages.Msg200>"


		413MatchInvoiceDetail

      
			if  (!each.ItemType.Service
			or   !PayablesInvoice.MatchProcessType.DropShip)
			
				initialize ReceiptLineCount
				DetailRecord												= false
				
				CurrentPurchaseOrder										= each.PurchaseOrder
				CurrentPurchaseOrderLine									= each.PurchaseOrderLine
				CurrentContract												= each.Contract
				CurrentContractLine											= each.ContractLine
				CurrentInvoiceDetail										= each.PayablesInvoiceDetail

				for each CurrentInvoiceDetailRel.MatchWorkReceiptItemRel
					if  (each.Selected
					and  each.MatchSub		= Sub1)
						DetailRecord					= true
					else
						include 414IMMatchDetail

					if  (DetailRecord)
						end for each
      
			if  (ReceiptLineCount entered)
				DetailRecord												= true      
			
			SelectedInvoiceDetailMatchAmount								+= each.MatchAmount
			SelectedInvoiceDetailMatchCount									+= 1

			if  (!DetailRecord
			and  !OverrideDetail)
				if  (!MatchErrorTable.MatchErrorGroup[Sub1].MatchError
				and  !ProcessByMatchReference)
                	MatchErrorTable.MatchErrorGroup[Sub1].MatchError		= MatchInvoiceErrorMessages.Msg241
                	MatchTestOK												= false

				if (ProcessByMatchReference)
					OutMatchStatus											= 3 
					initialize OutTotalTransactionAmount
					initialize OutTotalTransactionCount
					
		414IMMatchDetail


			Skip															= false

      		if  ((LocalMatchRuleToleranceGroup.MatchRuleType.OneToOne
      		or    LocalMatchRuleToleranceGroup.MatchRuleType.AllToOne)
      		and  (!each.MatchWorkReceiptRel.Selected
      		or     each.MatchSub != Sub1))
      			Skip														= true
      		else
			if  (Vendor.PoolOption.CompanyVendor
			and  !ProcessByMatchReference
	        and  MultiplePurchaseOrders
	        and  each.PurchaseOrder != CurrentInvoiceDetailRel.PurchaseOrder)
	      		Skip														= true
	      	else
	      	if  (Vendor.PoolOption.CompanyVendor
			and  !ProcessByMatchReference
	        and  !MultiplePurchaseOrders
	        and   PurchaseOrder entered
	        and   each.PurchaseOrder != PurchaseOrder)
	      		Skip														= true
			else
			if  (Vendor.PoolOption.CompanyVendorPo
			and  !ProcessByMatchReference
	        and  each.MatchWorkReceiptRel.PurchaseOrder != PurchaseOrder)
	      		Skip														= true
			else
			if  (Vendor.PoolOption.CompanyVendorPoShipTo
			and  !ProcessByMatchReference
	        and (each.MatchWorkReceiptRel.PurchaseOrder != PurchaseOrder
	        or   each.MatchWorkReceiptRel.PurchaseOrderReceipt.ShipToLocation != PayablesInvoice.Location))
	      		Skip														= true

			if  (!Skip
			and  !LocalMatchRuleToleranceGroup.CreateChargeback
			and  Difference3Amount > 0)
				if  ((each.BuyUOMQuantity entered
				and   CurrentInvoiceDetailRel.PayablesInvoiceDetail.BuyUOMMatchedQuantity > each.BuyUOMQuantity)
				or    CurrentInvoiceDetailRel.MatchedQuantity > each.UnmatchedQuantity)
		      		Skip														= true
					MatchErrorTable.MatchErrorGroup[Sub1].MatchErrorMessage 	= MatchInvoiceErrorMessages.Msg242
					MatchErrorTable.MatchErrorGroup[Sub1].MatchError			= true 


			if  (!Skip)
				
				invoke FastUpdate CurrentInvoiceDetailRel
					if  (invoked.MatchSub != MatchSub1)
						initialize invoked.DifferenceAmount
						initialize invoked.MatchedNotReceivedQuantity	      

					invoked.MatchSub					= MatchSub1	      
					invoked.Selected					= true	      

				invoke FastUpdate each
					invoked.MatchSub					= MatchSub1	      
					invoked.Selected					= true
					invoked.PayablesInvoice				= PayablesInvoice

				ReceiptLineCount						+= 1
				TotalReceiptLineQuantity				+= each.VendorPriceUOMQuantity
				
				if  (!LocalMatchRuleToleranceGroup.MatchRuleType.OneToAll
				or    TotalReceiptLineQuantity         >= CurrentInvoiceDetailRel.MatchedQuantity)
					DetailRecord						= true
      
		415MatchAocDetail

      
			CurrentPurchaseOrder											= each.PurchaseOrder
			CurrentPurchaseOrderLine										= each.PurchaseOrderLine
			CurrentContract													= each.Contract
			CurrentContractLine												= each.ContractLine
			CurrentAddOnCharge												= each.AddOnCharge
			LocalMatchWorkInvoiceAddOnCharge								= each.MatchWorkInvoiceAddOnCharge

			invoke FastUpdate CurrentInvoiceAddOnChargeRel
				invoked.MatchSub											= MatchSub1	      
				invoked.Selected											= true	      
			
			initialize ReceiptLineAOCCount
			DetailRecord													= false

			for each CurrentInvoiceAddOnChargeRel.MatchWorkReceiptLineItemRel
				if  (each.Selected
				and  each.MatchSub		= Sub1)
					DetailRecord											= true

					
				else

		      
					Skip															= false
		
					if   ((LocalMatchRuleToleranceGroup.MatchRuleType.OneToOne
					or     LocalMatchRuleToleranceGroup.MatchRuleType.AllToOne)
					and  (!each.MatchWorkReceiptRel.Selected
					or    each.MatchWorkReceiptRel.MatchSub != MatchSub1))
						Skip														= true

					else
		      		if  (Vendor.PoolOption.CompanyVendor
					and  !ProcessByMatchReference
		            and   MultiplePurchaseOrders
		           	and  !CurrentMatchPurchaseOrderInvoiceRel exists)
		            	Skip														= true

					else
					if  (Vendor.PoolOption.CompanyVendor
					and  !ProcessByMatchReference
		            and  !MultiplePurchaseOrders
		            and  PurchaseOrder != CurrentReceiptRel.PurchaseOrder)
		           		Skip														= true

		      		else
		      		if  (Vendor.PoolOption.CompanyVendorPo
					and  !ProcessByMatchReference
		            and  PurchaseOrder != CurrentReceiptRel.PurchaseOrder)
		           		Skip														= true

					if  (Vendor.PoolOption.CompanyVendorPoShipTo
					and  !ProcessByMatchReference
		            and  PurchaseOrder != CurrentReceiptRel.PurchaseOrder
		            and  PayablesInvoice.Location != CurrentReceiptRel.PurchaseOrderReceipt.ShipToLocation)
		           		Skip														= true

		      
					if  (!Skip
					and  !LocalMatchRuleToleranceGroup.CreateChargeback
					and  Difference3Amount > 0
					and   CurrentInvoiceAddOnChargeRel.MatchedQuantity > each.UnmatchedQuantity)
			      		Skip															= true
						MatchErrorTable.MatchErrorGroup[Sub1].MatchErrorMessage 		= MatchInvoiceErrorMessages.Msg242
						MatchErrorTable.MatchErrorGroup[Sub1].MatchError				= true 

		
					if  (!Skip)
						
						invoke FastUpdate CurrentInvoiceAddOnChargeRel
							invoked.MatchSub					= MatchSub1	      
							invoked.Selected					= true	      
							if  (CurrentInvoiceDetailRel.MatchSub != MatchSub1)
								initialize invoked.DifferenceAmount
								initialize invoked.MatchedNotReceivedQuantity	      
		
						invoke FastUpdate each
							invoked.MatchSub					= MatchSub1	      
							invoked.Selected					= true
							invoked.PayablesInvoice				= PayablesInvoice
		
						ReceiptLineAOCCount						+= 1
						TotalReceiptQuantity					+= each.ReceivedQuantityToMatch
						
						if  (!LocalMatchRuleToleranceGroup.MatchRuleType.OneToAll
						or    TotalReceiptLineQuantity         >= CurrentInvoiceDetailRel.MatchedQuantity)
							DetailRecord						= true

				if  (DetailRecord)
					end for each

			if  (ReceiptLineAOCCount entered)
				DetailRecord												= true     
      
			SelectedInvoiceAddOnChargeMatchAmount							+= each.MatchAmount

			if  (!DetailRecord
			and  OverrideAOCDetail)
				if  (!MatchErrorTable.MatchErrorGroup[Sub1].MatchError
				and  !ProcessByMatchReference)
                	MatchErrorTable.MatchErrorGroup[Sub1].MatchError		= MatchInvoiceErrorMessages.Msg241
                	MatchTestOK												= false

				if (ProcessByMatchReference)
					OutMatchStatus											= 3 
					initialize OutTotalTransactionAmount
					initialize OutTotalTransactionCount

		501ProcessMatapiwrk

		
			if  (LocalMatchRuleToleranceGroup.InvoiceMatchLevel.InvoiceMatch
			and  each.Selected)

	      
				if  ((MatchRuleResult.AllToOne
				or    MatchRuleResult.AllToAll)
				and   InvoiceMatchedAmount entered)
					LocalPercent					= each.MatchAmount / InvoiceMatchedAmount
					MatapiwrkPercentTotal			+= LocalPercent

					
					if  (each.Company				= LastCompany
					and  each.PayablesInvoice		= LastPayablesInvoice
					and  MatapiwrkPercentTotal 	   != 100%)

						LocalPercent				= 100% - MatapiwrkPercentTotal + LocalPercent
				else
				if  (MatchRuleResult.OneToOne
				or   MatchRuleResult.OneToAll)
					LocalPercent					= 100%
	


				invoke FastUpdate each
					invoked.InvoicePercent			= LocalPercent      



			if  (LocalMatchRuleToleranceGroup.InvoiceMatchLevel.InvoiceMatch
			and  each.Selected
			and  (!InvoiceDetailKeyed
			or    !InvoiceAddOnChargeKeyed))


				MatmadwrkCount 							= instance count of CurrentWorkInvoiceDetailRel
				TotalAocRecords 						= instance count of CurrentWorkInvoiceAddOnChargeRel
				
				initialize ApMatchAmt 		
				

				invoke FastUpdate last MatchWorkReceiptLineRel
					invoked.LastRecord			= true

	      
				invoke FastUpdate last MatchWorkReceiptLineAOCRel
					invoked.LastRecord			= true
	
				for each MatchWorkReceiptLineRel



					if  (each.Selected
					and  each.MatchWorkReceiptRel.Selected
					and  (ProcessMode.Reconciliation
					or   (each.MatchSub							= MatchSub1
					and   each.MatchWorkReceiptRel.MatchSub		= MatchSub1)
					or   (each.MatchSub							= MatchSub1
					and   each.MatchWorkReceiptRel.MatchSub		= MatchSub1)
					or   (ProcessByMatchReference
					and   PayablesInvoice.MatchReferenceNumber = each.MatchWorkReceiptRel.PurchaseOrderReceipt.MatchReferenceNumber
					and   LocalMatchRuleToleranceGroup.InvoiceMatchLevel.InvoiceMatch)))

						DetailFound = false
						CurrentReceipt = each.PurchaseOrderReceipt 
						CurrentReceiptLine = each.PurchaseOrderReceiptLine 

						for each each.WorkInvoiceDetailRel
							if (each.PayablesInvoice = CurrentPayablesInvoice
							and each.PayablesInvoiceDetail.PurchaseOrderReceipt = CurrentReceipt 
							and each.PayablesInvoiceDetail.PurchaseOrderReceiptLine = CurrentReceiptLine)
								DetailFound = true
							end for each
								
						if  ((!InvoiceDetailKeyed
						or    MatmadwrkCount not entered)
						and  !DetailFound)

							LocalRecordSource = "MA"

							include 590GenerateMainvdtl      

							CurrentPurchaseOrder						= each.PurchaseOrder
							CurrentPurchaseOrderLine					= each.PurchaseOrderLine
							CurrentContract								= each.PurchaseOrderLine.Contract
							CurrentContractLine							= each.PurchaseOrderLine.ContractLine
							CurrentInvoiceDetail						= NewInvoiceDetail.PayablesInvoiceDetail

							if  (LocalInvoiceDetailRel exists)


								invoke FastUpdate each.WorkInvoiceDetailRel
									if (MatchRuleResult.AllToOne					
									or  MatchRuleResult.AllToAll)
										invoked.MatchedQuantity						+= each.UnmatchedQuantity * CurrentWorkInvoiceRel.InvoicePercent
										invoked.MatchUnitCost						+= each.PurchaseOrderReceiptLine.MatchUnitCost
										invoked.MatchAmount							+= each.UnmatchedQuantity * CurrentWorkInvoiceRel.InvoicePercent * each.PurchaseOrderReceiptLine.MatchUnitCost	      
									else
										invoked.MatchedQuantity						+= each.UnmatchedQuantity
										invoked.MatchUnitCost						+= each.PurchaseOrderReceiptLine.MatchUnitCost
										invoked.MatchAmount							+= each.UnmatchedQuantity * each.PurchaseOrderReceiptLine.MatchUnitCost
							else

								invoke Create MatchWorkInvoiceDetail
									invoked.MatchWork 								= MatchWork
									invoked.Company									= Company
									invoked.Vendor									= Vendor
									invoked.PayablesInvoice							= CurrentPayablesInvoiceRel.PayablesInvoice
									invoked.PayablesInvoiceDetail					= NewInvoiceDetail.PayablesInvoiceDetail
									invoked.RecordSource							= "MA"
									fill in fields from each.PurchaseOrderReceiptLine
									fill in fields from each.PurchaseOrderLine



	
									if (MatchRuleResult.AllToOne					
									or  MatchRuleResult.AllToAll)
									    if (!PayablesInvoice.MatchProcessType.Service
										and !each.PurchaseOrderLine.ServiceCode.Amount)
											invoked.MatchedQuantity						= each.UnmatchedQuantity * CurrentWorkInvoiceRel.InvoicePercent
											invoked.MatchUnitCost						= WorkEnteredUnitCost
											invoked.EnteredQuantity						= each.UnmatchedQuantity * CurrentWorkInvoiceRel.InvoicePercent
											invoked.EnteredUnitCost						= WorkEnteredUnitCost
											invoked.MatchAmount							= each.UnmatchedQuantity * WorkEnteredUnitCost * CurrentWorkInvoiceRel.InvoicePercent	      
										else
											invoked.MatchedQuantity						= each.UnmatchedQuantity 
											invoked.MatchUnitCost						= WorkEnteredUnitCost * CurrentWorkInvoiceRel.InvoicePercent
											invoked.EnteredQuantity						= each.UnmatchedQuantity 
											invoked.EnteredUnitCost						= WorkEnteredUnitCost * CurrentWorkInvoiceRel.InvoicePercent
											invoked.MatchAmount							= each.UnmatchedQuantity * WorkEnteredUnitCost * CurrentWorkInvoiceRel.InvoicePercent	      
									else
										invoked.MatchedQuantity						= each.UnmatchedQuantity 
										invoked.MatchUnitCost						= WorkEnteredUnitCost
										invoked.MatchAmount							= each.UnmatchedQuantity * WorkEnteredUnitCost

				
								if  (MatchRuleResult.OneToOne
								or   MatchRuleResult.OneToAll)
									invoke FastUpdate each
										invoked.PayablesInvoice						= CurrentPayablesInvoice


				if  (!InvoiceAddOnChargeKeyed)
					if (PayablesInvoice.MatchPrepayment)
						for each MatchWorkReceiptRel 
							if  (each.Selected
							or   (ProcessByMatchReference
							and   PayablesInvoice.MatchReferenceNumber = each.PurchaseOrderReceipt.MatchReferenceNumber
							and   LocalMatchRuleToleranceGroup.InvoiceMatchLevel.InvoiceMatch))

								for each each.PurchaseOrderReceipt.PurchaseOrderReceiptLineAOCRel

									Skip = false
									
									CurrentPayablesInvoice					= CurrentWorkInvoiceRel.PayablesInvoice
									CurrentPurchaseOrder					= each.PurchaseOrder
									CurrentPurchaseOrderLine				= each.PurchaseOrderReceiptLine
									CurrentAddOnCharge						= each.AddOnCharge


									if  (TotalAocRecords entered)
										if  (CurrentPayablesInvoiceAddOnChargeRel exists
										and  !OverrideDetail)
											Skip = true


									if  (!Skip
									and  each.Vendor 							= CurrentWorkInvoiceRel.PayablesInvoice.Vendor
									and  ProcessMode.Reconciliation)



										initialize LocalTaxUsageCode
										initialize LocalProductTaxCategory

										LocalTaxCode									= each.PurchaseOrderAndLineAddOnChargeRel.TaxCode
										
										if  (PayablesInvoice.TaxAdjustment.OverrideProductOnly
										or   PayablesInvoice.TaxAdjustment not entered)
											LocalTaxCode								= PayablesInvoice.TaxCode
										
										if  (PayablesInvoice.TaxAdjustment.Calculate
										or   PayablesInvoice.TaxAdjustment.IgnoreProductAndAOC)
											initialize LocalTaxCode




										invoke CreateTemporary PayablesInvoiceAddOnCharge
											assign result to NewInvoiceAddOnCharge
											invoked.Company									= Company
											invoked.Vendor									= Vendor
											invoked.PayablesInvoice							= CurrentPayablesInvoiceRel.PayablesInvoice
											invoked.AddOnCharge								= each.AddOnCharge
											invoked.PurchaseOrder							= each.PurchaseOrder
											invoked.PurchaseOrderLine						= each.PurchaseOrderReceiptLine
											invoked.PurchaseOrderReceipt					= each.PurchaseOrderReceipt
											invoked.PurchaseOrderReceiptLine				= each.PurchaseOrderReceiptLine
								
											invoked.RecordSource							= "MA"

											invoked.InvoiceLineTaxable						= false
											invoked.DistributionDate						= PayablesInvoice.DistributionDate

											invoked.TaxCode									= LocalTaxCode
											invoked.TaxUsageCode							= LocalTaxUsageCode
											invoked.ProductTaxCategory						= LocalProductTaxCategory
											invoked.Item									= each.Item
											invoked.ItemType								= each.PurchaseOrderReceiptLine.ItemType
											invoked.MatchDetailKey							= each.PurchaseOrderReceiptLine.MatchDetailKey
											invoked.Vendor									= each.Vendor
											
											if  (each.PurchaseOrderReceiptLine entered)
												invoked.Item								= each.Item
												invoked.ItemType							= each.PurchaseOrderReceiptLine.ItemType
												if (MatchRuleResult.AllToOne					
												or  MatchRuleResult.AllToAll)
													invoked.EnteredQuantity					= each.ReceivedQuantityToMatch * CurrentWorkInvoiceRel.InvoicePercent
													invoked.MatchedQuantity					= each.ReceivedQuantityToMatch * CurrentWorkInvoiceRel.InvoicePercent
												else
													invoked.EnteredQuantity					= each.ReceivedQuantityToMatch 
													invoked.MatchedQuantity					= each.ReceivedQuantityToMatch 
												invoked.MatchUnitCost						= each.OriginalUnitCost  
												invoked.EnteredUnitCost						= each.OriginalUnitCost  
											else
												if (MatchRuleResult.AllToOne					
												or  MatchRuleResult.AllToAll)
													invoked.EnteredQuantity					= each.Quantity * CurrentWorkInvoiceRel.InvoicePercent
													invoked.MatchedQuantity					= each.Quantity * CurrentWorkInvoiceRel.InvoicePercent
												else
													invoked.EnteredQuantity					= each.Quantity
													invoked.MatchedQuantity					= each.Quantity
												invoked.MatchUnitCost						= each.OriginalUnitCost
												invoked.EnteredUnitCost						= each.OriginalUnitCost

											invoked.BypassInvoiceErrorChecking				= true
											invoked.BypassAllowUpdate						= true
											invoked.Invoice									= PayablesInvoice.Invoice






										invoke Create MatchWorkInvoiceAddOnCharge
											invoked.MatchWork 								= MatchWork
											invoked.MatchWorkInvoiceAddOnCharge				= NewInvoiceAddOnCharge.PayablesInvoiceAddOnCharge
											invoked.Company									= Company
											invoked.Vendor									= Vendor
											invoked.PayablesInvoice							= CurrentPayablesInvoiceRel.PayablesInvoice
											invoked.PurchaseOrder							= each.PurchaseOrder
											invoked.PurchaseOrderLine						= each.PurchaseOrderReceiptLine
											fill in fields from each
											if  (each.PurchaseOrderReceiptLine entered)
												invoked.MatchedQuantity						= each.ReceivedQuantityToMatch * CurrentWorkInvoiceRel.InvoicePercent
												invoked.MatchUnitCost						= each.OriginalUnitCost  
											else
												invoked.MatchedQuantity						= each.Quantity * CurrentWorkInvoiceRel.InvoicePercent
												invoked.MatchUnitCost						= each.MiscellaneousAddOnChargeInvoicedAmount
											invoked.Item							= each.Item
											invoked.ItemType						= each.PurchaseOrderReceiptLine.ItemType
											invoked.MatchDetailKey					= each.PurchaseOrderReceiptLine.MatchDetailKey
											invoked.Vendor							= each.Vendor
						
											if  (MatchRuleResult.OneToOne
											or   MatchRuleResult.OneToAll)
												invoked.PayablesInvoice				= CurrentPayablesInvoice

						for each PayablesInvoice.MatchPurchaseOrderInvoicesRel  
							for each each.PurchaseOrderServiceAocRel

								Skip = false
								
								CurrentPayablesInvoice					= CurrentWorkInvoiceRel.PayablesInvoice
								CurrentPurchaseOrder					= each.PurchaseOrder
								CurrentPurchaseOrderLine				= each.PurchaseOrderLine
								CurrentAddOnCharge						= each.AddOnCharge


								if  (TotalAocRecords entered)
									if  (CurrentPayablesInvoiceAddOnChargeRel exists
									and  !OverrideDetail)

										Skip = true


								if  (!Skip
								and  each.Vendor 							= CurrentWorkInvoiceRel.PayablesInvoice.Vendor
								and  ProcessMode.Reconciliation)



									initialize LocalTaxUsageCode
									initialize LocalProductTaxCategory

									LocalTaxCode									= each.TaxCode
									
									if  (PayablesInvoice.TaxAdjustment.OverrideProductOnly
									or   PayablesInvoice.TaxAdjustment not entered)
										LocalTaxCode								= PayablesInvoice.TaxCode
									
									if  (PayablesInvoice.TaxAdjustment.Calculate
									or   PayablesInvoice.TaxAdjustment.IgnoreProductAndAOC)
										initialize LocalTaxCode




									invoke CreateTemporary PayablesInvoiceAddOnCharge
										assign result to NewInvoiceAddOnCharge
										invoked.Company									= Company
										invoked.Vendor									= Vendor
										invoked.PayablesInvoice							= CurrentPayablesInvoiceRel.PayablesInvoice
										invoked.AddOnCharge								= each.AddOnCharge
										invoked.PurchaseOrder							= each.PurchaseOrder
										invoked.PurchaseOrderLine						= each.PurchaseOrderLine
							
										invoked.RecordSource							= "MA"

										invoked.InvoiceLineTaxable						= false
										invoked.DistributionDate						= PayablesInvoice.DistributionDate

										invoked.TaxCode									= LocalTaxCode
										invoked.TaxUsageCode							= LocalTaxUsageCode
										invoked.ProductTaxCategory						= LocalProductTaxCategory
										invoked.Item									= each.PurchaseOrderLine.Item
										invoked.ItemType								= each.PurchaseOrderLine.ItemType
										invoked.MatchDetailKey							= each.PurchaseOrderLine.MatchDetailKey
										invoked.Vendor									= each.Vendor
										
										if (MatchRuleResult.AllToOne					
										or  MatchRuleResult.AllToAll)
											invoked.EnteredQuantity						= each.Quantity * CurrentWorkInvoiceRel.InvoicePercent
											invoked.MatchedQuantity						= each.Quantity * CurrentWorkInvoiceRel.InvoicePercent
										else
											invoked.EnteredQuantity						= each.Quantity
											invoked.MatchedQuantity						= each.Quantity
										invoked.MatchUnitCost							= each.EnteredUnitCost
										invoked.EnteredUnitCost							= each.EnteredUnitCost

										invoked.BypassInvoiceErrorChecking				= true
										invoked.BypassAllowUpdate						= true
										invoked.Invoice									= PayablesInvoice.Invoice






									invoke Create MatchWorkInvoiceAddOnCharge
										invoked.MatchWork 								= MatchWork
										invoked.MatchWorkInvoiceAddOnCharge				= NewInvoiceAddOnCharge.PayablesInvoiceAddOnCharge
										invoked.Company									= Company
										invoked.Vendor									= Vendor
										invoked.PayablesInvoice							= CurrentPayablesInvoiceRel.PayablesInvoice
										invoked.PurchaseOrder							= each.PurchaseOrder
										invoked.PurchaseOrderLine						= each.PurchaseOrderLine
										fill in fields from each
										invoked.MatchedQuantity						= each.Quantity * CurrentWorkInvoiceRel.InvoicePercent
										invoked.MatchUnitCost						= each.EnteredUnitCost
										invoked.Item								= each.PurchaseOrderLine.Item
										invoked.ItemType							= each.PurchaseOrderLine.ItemType
										invoked.MatchDetailKey						= each.PurchaseOrderLine.MatchDetailKey
										invoked.Vendor								= each.Vendor
					
										if  (MatchRuleResult.OneToOne
										or   MatchRuleResult.OneToAll)
											invoked.PayablesInvoice				= CurrentPayablesInvoice 
					else 
						for each MatchWorkReceiptLineAOCRel

							Skip = false
							
							if  (TotalAocRecords not entered)

								if  (!CurrentWorkInvoiceRel.PayablesInvoice.MatchProcessType.AOCOnly
								or   TotalDetailRecords entered)
									Skip = true
				
							if  (TotalAocRecords entered)
								CurrentPayablesInvoice					= CurrentWorkInvoiceRel.PayablesInvoice
								CurrentPurchaseOrder					= each.PurchaseOrder
								CurrentPurchaseOrderLine				= each.PurchaseOrderLine
								CurrentAddOnCharge						= each.AddOnCharge
								if  (CurrentPayablesInvoiceAddOnChargeRel exists
								and  !OverrideDetail)
									Skip = true
								
							if  (!Skip
							and  each.Selected
							and  each.MatchWorkReceiptRel.Selected
							and  each.Vendor 							= CurrentWorkInvoiceRel.PayablesInvoice.Vendor
							and  (ProcessMode.Reconciliation
							or   (each.MatchSub							= Sub1
							and   each.MatchWorkReceiptRel.MatchSub		= Sub1)))
								include 590aGenerateMaaocdtl
								invoke Create MatchWorkInvoiceAddOnCharge
									invoked.MatchWork 								= MatchWork
									invoked.Company									= Company
									invoked.Vendor									= Vendor
									invoked.PayablesInvoice							= PayablesInvoice
									invoked.MatchWorkInvoiceAddOnCharge				= NewInvoiceAddOnCharge.PayablesInvoiceAddOnCharge
									fill in fields from each.PurchaseOrderReceiptLineAOCRel
									if  (each.PurchaseOrderLine entered)
										invoked.MatchedQuantity						= each.ReceivedQuantityToMatch 
										invoked.MatchUnitCost						= each.OriginalUnitCost  
									else
										invoked.MatchedQuantity						= each.PurchaseOrderReceiptLineAOCRel.Quantity
										invoked.MatchUnitCost						= each.MiscellaneousAddOnChargeInvoicedAmount
									invoked.Item							= each.Item
									invoked.ItemType						= each.ItemType
									invoked.MatchDetailKey					= each.PurchaseOrderLine.MatchDetailKey
									invoked.Vendor							= each.Vendor
				
						
								if  (MatchRuleResult.OneToOne
								or   MatchRuleResult.OneToAll)
									invoke FastUpdate each
										invoked.PayablesInvoice		= CurrentPayablesInvoice
																
	      




	
				if  (OverrideDetail)

					for each each.PayablesInvoice.PayablesInvoiceDetailRel
						if  (each.ItemType.Service
						or   each.PayablesInvoice.MatchProcessType.DropShip)
							CurrentPurchaseOrder						= each.PurchaseOrder
							CurrentPurchaseOrderLine					= each.PurchaseOrderLine
							CurrentContract								= each.Contract
							CurrentContractLine							= each.ContractLine
							CurrentInvoiceDetail						= each.PayablesInvoiceDetail
							if  (!CurrentInvoiceDetailThisInvoiceRel exists)
								invoke Create MatchWorkInvoiceDetail
									fill in fields from each
									invoked.MatchWork 						= MatchWork
									invoked.Company							= each.Company
									invoked.PayablesInvoice					= each.PayablesInvoice
									invoked.PurchaseOrder					= each.PurchaseOrder
									invoked.PurchaseOrderLine				= each.PurchaseOrderLine
									invoked.PayablesInvoiceDetail			= each.PayablesInvoiceDetail
									invoked.Vendor							= Vendor
									invoked.MatchToReceipt					= false
									if (each.TotalDistributionAmount entered)
										invoked.MatchedQuantity				= each.MatchedQuantity
										invoked.MatchUnitCost				= each.MatchUnitCost
										invoked.MatchAmount					= each.TotalDistributionAmount
									else
										invoked.MatchedQuantity				= each.MatchedQuantity
										invoked.MatchUnitCost				= each.MatchUnitCost
										invoked.MatchAmount					= each.MatchedQuantity * each.MatchUnitCost 
	      
				if  (OverrideAOCDetail)

					for each each.PayablesInvoice.PayablesInvoiceAddOnChargeRel
						if  (each.ItemType.Service
						or   each.PayablesInvoice.MatchProcessType.DropShip)
							CurrentPurchaseOrder						= each.PurchaseOrder
							CurrentPurchaseOrderLine					= each.PurchaseOrderLine
							CurrentContract								= each.Contract
							CurrentContractLine							= each.ContractLine
							CurrentAddOnCharge							= each.AddOnCharge
							LocalMatchWorkInvoiceAddOnCharge			= each.PayablesInvoiceAddOnCharge
							if  (!CurrentInvoiceAddOnChargeThisInvoiceRel exists)
								invoke Create MatchWorkInvoiceAddOnCharge
									fill in fields from each
									invoked.MatchWorkInvoiceAddOnCharge		= each.PayablesInvoiceAddOnCharge
									invoked.MatchWork 						= MatchWork
									invoked.Company							= each.Company
									invoked.MatchWorkInvoiceAddOnCharge		= each.PayablesInvoiceAddOnCharge
									invoked.Vendor							= Vendor
									invoked.Item							= each.Item
									invoked.ItemType						= each.ItemType
									invoked.MatchDetailKey					= each.PurchaseOrderLine.MatchDetailKey
									invoked.Vendor							= each.Vendor





















			if  (LocalMatchRuleToleranceGroup.InvoiceMatchLevel.InvoiceMatch
			and (MatchRuleResult.OneToOne
			or   MatchRuleResult.OneToAll)		
			and !OverrideDetail
			and InvoiceDetailKeyed)

				
				initialize ApMatchAmt
				
				for each MatchWorkReceiptLine set

						
					
					if  (each.Selected
					and  each.PayablesInvoice not entered
					and  !each.WorkInvoiceDetailRel exists)
						LocalPercent						= 100%
						LocalRecordSource 					= "MA"
						include 590GenerateMainvdtl
	

						invoke Create MatchWorkInvoiceDetail
							invoked.MatchWork 								= MatchWork
							invoked.Company									= Company
							invoked.Vendor									= Vendor
							invoked.PayablesInvoice							= NewInvoiceDetail.PayablesInvoice
							invoked.PayablesInvoiceDetail					= NewInvoiceDetail.PayablesInvoiceDetail
							fill in fields from each.PurchaseOrderReceiptLine
							fill in fields from each.PurchaseOrderLine
							invoked.MatchedQuantity							= NewInvoiceDetail.MatchedQuantity
							invoked.MatchUnitCost							= NewInvoiceDetail.MatchUnitCost
							invoked.MatchAmount								= NewInvoiceDetail.MatchedQuantity * NewInvoiceDetail.MatchUnitCost 	      
							invoked.RecordSource							= "IM" 
	




		


				if  (PayablesInvoice.CostComponentMatch
				or   PayablesInvoice.MatchPrepayment)
					for each MatchWorkReceiptLineAOC set

	
						if  (each.Selected
						and  each.PayablesInvoice not entered)
							include 590aGenerateMaaocdtl
		
							invoke Create MatchWorkInvoiceAddOnCharge
								invoked.MatchWork 								= MatchWork
								invoked.Company									= Company
								invoked.Vendor									= Vendor
								invoked.PayablesInvoice							= PayablesInvoice
								fill in fields from each.PurchaseOrderReceiptLineAOCRel
								invoked.MatchWorkInvoiceAddOnCharge				= NewInvoiceAddOnCharge.PayablesInvoiceAddOnCharge
								if  (each.PurchaseOrderLine entered)
									invoked.MatchedQuantity						= each.ReceivedQuantityToMatch 
									invoked.MatchUnitCost						= each.OriginalUnitCost  
								else
									invoked.MatchedQuantity						= each.PurchaseOrderReceiptLineAOCRel.Quantity
									invoked.MatchUnitCost						= each.MiscellaneousAddOnChargeInvoicedAmount
								invoked.Item							= each.Item
								invoked.ItemType						= each.ItemType
								invoked.MatchDetailKey					= each.PurchaseOrderLine.MatchDetailKey
								invoked.Vendor							= each.Vendor
			       







			if  (LocalMatchRuleToleranceGroup.InvoiceMatchLevel.InvoiceMatch
			and  each.Selected
			and  each.PayablesInvoice.TaxCode.TaxType.CalculatedRate)
        		initialize CalculateTaxAmount
        		CalculateTaxAmount.TransactionTaxAmount		= each.PayablesInvoice.TaxAmount
        		CalculateTaxAmount.TaxCode					= each.PayablesInvoice.TaxCode
        		CalculateTaxAmount.PayablesCompany			= each.PayablesInvoice.Company
				LocalCalculateTaxAmount = CalculateTaxAmount.PerformCalculateTaxAmount
				constraint (CalculateTaxAmount.OutputErrorNumber not entered)
					"<CalculateTaxAmount.OutputErrorMessage>"
				
			if  (MatchTestOK)

	
				if  (PayablesInvoice.MatchProcessType.ServiceContract)
					MatchLevel									= "DM"
					InPrepaids									= false
					PerformedFrom								= 5
				else
					PerformedFrom								= 1
	

				
				if  (TaxError)
					invoke Purge InvoiceDetailCreatedFromMatchRel
					TaxOutOfBalance = true
	
				constraint (!TaxError)
					"<TaxErrorMessage>"
      
			if  (!ProcessMode.Reconciliation
			and  !InPrepaids
			and  !MatchTestOK
			and   MatchErrorType entered)

				invoke FastUpdate each.PayablesInvoice
					invoked.MatchErrorType					= MatchErrorType


		590GenerateMainvdtl




			if  (each.ItemType.Service)
			    WorkEnteredUnitCost							= each.PurchaseOrderLine.EnteredUnitCost
			else
			if  (each.PurchaseOrderReceiptLine.ReceivedUOM != each.PurchaseOrderReceiptLine.VendorPriceUOM)
				initialize UOMCalculation

				UOMCalculation.InputUOM						= each.PurchaseOrderReceiptLine.ReceivedUOM
				UOMCalculation.InputToUOM					= each.PurchaseOrderReceiptLine.VendorPriceUOM
				UOMCalculation.InputUnitCost				= each.PurchaseOrderReceiptLine.MatchUnitCost
				UOMCalculation.Method						= UOMCalculation.Method.ConvertToAlternate

				WorkEnteredUnitCost							= UOMCalculation.OutputUnitCost
			else
				WorkEnteredUnitCost							= each.PurchaseOrderReceiptLine.MatchUnitCost


			LocalTaxCode									= each.PurchaseOrderLine.TaxCode
			LocalTaxUsageCode								= each.PurchaseOrderLine.TaxUsageCode
			LocalProductTaxCategory							= each.PurchaseOrderLine.ProductTaxCategory
			
			if  (PayablesInvoice.TaxAdjustment.OverrideProductOnly
			or   PayablesInvoice.TaxAdjustment.OverrideProductAndAOC)
				LocalTaxCode								= PayablesInvoice.TaxCode
			else 
			if  (PayablesInvoice.TaxAdjustment.Calculate

			or  (!each.PurchaseOrderReceiptLine.ItemType.Inventoried
			and (PayablesInvoice.TaxAdjustment.IgnoreProductOnly
			or   PayablesInvoice.TaxAdjustment.IgnoreProductAndAOC))

			or  (each.PurchaseOrderReceiptLine.ItemType.Inventoried
			and (PayablesInvoice.TaxAdjustment.IgnoreProductOnly
			or   PayablesInvoice.TaxAdjustment.IgnoreProductAndAOC)
			and  (!LocalEntityTaxCodeRel.LandedCost
			and   !TaxEntityRel.LandedCost)))	

				initialize LocalTaxCode
				initialize LocalTaxUsageCode
				initialize LocalProductTaxCategory

			if  (LocalTaxCode entered
			and  LocalTaxUsageCode not entered
			and  PayablesInvoice.TaxAdjustment.Calculate)	
				if  (each.PurchaseOrderReceiptLine.ShipToLocation entered)
					LocalLocation					= each.PurchaseOrderReceiptLine.ShipToLocation
					if  (VendorCompanyDefaultRel exists
					and  VendorCompanyDefaultRel.TaxUsageCode entered)
						LocalTaxUsageCode			= VendorCompanyDefaultRel.TaxUsageCode
					else
					if  (VendorLocationRel exists
					and  VendorLocationRel.TaxUsageCode entered)
						LocalTaxUsageCode			= VendorLocationRel.TaxUsageCode
				else
					initialize LocalLocation
					if  (VendorCompanyDefaultRel exists
					and  VendorCompanyDefaultRel.TaxUsageCode entered)
						LocalTaxUsageCode			= VendorCompanyDefaultRel.TaxUsageCode
					else
					if  (Vendor.TaxUsageCode entered)
						LocalTaxUsageCode			= Vendor.TaxUsageCode
					else
						LocalTaxUsageCode			= Vendor.VendorClass.TaxUsageCode




			LocalBuyUOMMatchedQuantity							= each.UnmatchedQuantity
			if  (each.PurchaseOrderReceiptLine.ItemType.Inventoried
			or   each.PurchaseOrderReceiptLine.ItemType.NonStock)
				initialize UOMCalculation

				UOMCalculation.InputQuantity					= each.UnmatchedQuantity
				UOMCalculation.InputUOMConversion				= 1
				UOMCalculation.InputToUOMConversion				= 1
				if  (each.PurchaseOrderLine entered
				and  each.PurchaseOrderLine.VendorPriceUOMMultiplier entered)
					UOMCalculation.InputUOMConversion			= each.PurchaseOrderLine.VendorPriceUOMMultiplier
					UOMCalculation.InputToUOMConversion			= each.PurchaseOrderLine.EnteredBuyUOMMultiplier
				else
				if  (each.PurchaseOrderReceiptLine entered
				and  each.PurchaseOrderReceiptLine.VendorPriceUOMMultiplier entered)
					UOMCalculation.InputUOMConversion			= each.PurchaseOrderReceiptLine.VendorPriceUOMMultiplier
					UOMCalculation.InputToUOMConversion			= each.PurchaseOrderReceiptLine.VendorBuyUOMMultiplier
				else
				if  (DefaultVendorItemRel exists)
					LocalItem									= each.Item
					LocalUnitOfMeasure							= DefaultVendorItemRel.VendorPriceUOM
					if  (LocalItemUOMRel exists)
						UOMCalculation.InputUOMConversion		= LocalItemUOMRel.UOMConversion

					LocalUnitOfMeasure							= DefaultVendorItemRel.VendorBuyUOM
					if  (LocalItemUOMRel exists)
						UOMCalculation.InputToUOMConversion		= LocalItemUOMRel.UOMConversion
						

				if  (UOMCalculation.InputUOMConversion   != 1
				or   UOMCalculation.InputToUOMConversion != 1)
					UOMCalculation.Method						    = UOMCalculation.Method.ConvertToAlternate

					LocalBuyUOMMatchedQuantity						= UOMCalculation.OutputQuantity


			if (LocalTaxCode entered
			and !LocalTaxCode.TaxType.CalculatedRate)
				LocalLocation								= each.PurchaseOrderReceiptLine.ShipToLocation
				initialize CalculateTax
				CalculateTax.Function			 			= CalculateTax.Function.CalculateTax
				CalculateTax.TaxEntity 						= Company.AccountingEntity
				CalculateTax.TaxCode 						= LocalTaxCode
				if  (each.PurchaseOrderLine.TaxableUnitCost entered
				and  each.PurchaseOrderLine.TaxableUnitCost != each.PurchaseOrderLine.EnteredUnitCost)
					CalculateTax.InvoiceAmount 				= each.UnmatchedQuantity * each.PurchaseOrderLine.TaxableUnitCost
					CalculateTax.TaxableAmount 				= each.UnmatchedQuantity * each.PurchaseOrderLine.TaxableUnitCost
				else
				if  (each.PurchaseOrderReceiptLine not entered)
					CalculateTax.InvoiceAmount 				= each.UnmatchedQuantity * each.PurchaseOrderLine.EnteredUnitCost 
					CalculateTax.TaxableAmount 				= each.UnmatchedQuantity * each.PurchaseOrderLine.EnteredUnitCost
				else
					CalculateTax.InvoiceAmount 				= each.UnmatchedQuantity * each.PurchaseOrderReceiptLine.MatchUnitCost
					CalculateTax.TaxableAmount 				= each.UnmatchedQuantity * each.PurchaseOrderReceiptLine.MatchUnitCost


				if (MatchRuleResult.AllToOne	
				or  MatchRuleResult.AllToAll)
					CalculateTax.InvoiceAmount 				*= CurrentWorkInvoiceRel.InvoicePercent
					CalculateTax.TaxableAmount 				*= CurrentWorkInvoiceRel.InvoicePercent


				CalculateTax.InvoiceDate					= PayablesInvoice.InvoiceDate
				CalculateTax.PaymentDate 					= PayablesInvoice.InvoiceDate
				CalculateTax.GeneralLedgerDate 				= PayablesInvoice.InvoiceDate
				CalculateTax.TaxDate						= PayablesInvoice.InvoiceDate
				CalculateTax.PostalAddress					= InventoryLocationRel.PostalAddress
				if  (PayablesInvoice.VendorLocationRel exists)
					CalculateTax.FromPostalAddress			= PayablesInvoice.VendorLocationRel.CurrentAddressRel.PostalAddress
				else
					CalculateTax.FromPostalAddress			= Vendor.first VendorLocationRel.CurrentAddressRel.PostalAddress
				CalculateTax.System							= "AP"
				CalculateTax.TransactionCurrency			= PayablesInvoice.InvoiceCurrency
				CalculateTax.BaseCurrency					= PayablesInvoice.PayGroup.BaseCurrency
				if  (PayablesInvoice.TaxEntityUsesThirdPartyTax)
					CalculateTax.InputReturnVertexTaxIn		= "D"	
				LocalCalculateTaxExecuted					= CalculateTax.ExecuteCalculateTax  
				LocalTaxAmount								= CalculateTax.OutputTotalTaxAmount










			if  (LocalRecordSource = "MA")



				invoke CreateTemporary PayablesInvoiceDetail
					assign result to NewInvoiceDetail
					invoked.Company									= Company
					invoked.Vendor									= CurrentPayablesInvoiceRel.Vendor
					invoked.PayablesInvoice							= CurrentPayablesInvoiceRel.PayablesInvoice
			    	invoked.Vendor									= CurrentPayablesInvoiceRel.Vendor
					invoked.Invoice									= CurrentPayablesInvoiceRel.Invoice
					invoked.Suffix									= CurrentPayablesInvoiceRel.Suffix

					fill in fields from each.PurchaseOrderReceiptLine
					fill in fields from each.PurchaseOrderLine
	      







						
					if  (each.ItemType.Service)
						invoked.EnteredUOM 							= each.PurchaseOrderLine.VendorPriceUOM
						invoked.EnteredUOMMultiplier				= each.PurchaseOrderLine.VendorPriceUOMMultiplier
					else
						invoked.EnteredUOM							= each.PurchaseOrderReceiptLine.ReceivedUOM
						invoked.EnteredUOMMultiplier				= each.PurchaseOrderReceiptLine.ReceivedUOMMultiplier
					
					invoked.RecordSource							= LocalRecordSource

					invoked.InvoiceLineTaxable						= false
	
					invoked.TaxCode									= LocalTaxCode
					invoked.TaxUsageCode							= LocalTaxUsageCode
					invoked.ProductTaxCategory						= LocalProductTaxCategory

					invoked.Location								= each.ShipToLocation
					invoked.EnteredQuantity							= each.OpenToMatchQuantity
					invoked.EnteredUnitCost							= each.MatchUnitCost

					if (MatchRuleResult.AllToOne					
					or  MatchRuleResult.AllToAll)
					    if (!PayablesInvoice.MatchProcessType.Service
						and !each.PurchaseOrderLine.ServiceCode.Amount)
							invoked.MatchedQuantity					= each.UnmatchedQuantity * CurrentWorkInvoiceRel.InvoicePercent
							invoked.EnteredQuantity					= each.UnmatchedQuantity * CurrentWorkInvoiceRel.InvoicePercent
							invoked.MatchUnitCost					= WorkEnteredUnitCost
							invoked.EnteredUnitCost					= WorkEnteredUnitCost
							invoked.BuyUOMMatchedQuantity			= each.UnmatchedQuantity * CurrentWorkInvoiceRel.InvoicePercent
							invoked.TaxableUnitCost					= WorkEnteredUnitCost
						else
							invoked.MatchedQuantity						= each.UnmatchedQuantity
							invoked.EnteredQuantity						= each.UnmatchedQuantity
							invoked.MatchUnitCost						= WorkEnteredUnitCost * CurrentWorkInvoiceRel.InvoicePercent
							invoked.EnteredUnitCost						= WorkEnteredUnitCost * CurrentWorkInvoiceRel.InvoicePercent
							invoked.BuyUOMMatchedQuantity				= LocalBuyUOMMatchedQuantity
							invoked.TaxableUnitCost						= WorkEnteredUnitCost * CurrentWorkInvoiceRel.InvoicePercent
					else
						invoked.MatchedQuantity						= each.UnmatchedQuantity
						invoked.EnteredQuantity						= each.UnmatchedQuantity
						invoked.MatchUnitCost						= WorkEnteredUnitCost
						invoked.EnteredUnitCost						= WorkEnteredUnitCost
						invoked.BuyUOMMatchedQuantity				= LocalBuyUOMMatchedQuantity
	
					invoked.DistributionDate						= CurrentPayablesInvoiceRel.DistributionDate
					invoked.TaxAmount								= LocalTaxAmount

					invoked.ItemDescription							= each.PurchaseOrderLine.Description

					if (CurrentPayablesInvoiceRel.PayablesInvoice 		= LastPayablesInvoice)
						invoked.TransientLastInvoice 				= true 

			ApMatchAmt											+= each.UnmatchedQuantity * each.PurchaseOrderReceiptLine.MatchUnitCost



		590aGenerateMaaocdtl



			initialize LocalTaxUsageCode
			initialize LocalProductTaxCategory

			LocalTaxCode									= each.PurchaseOrderAndLineAddOnChargeRel.TaxCode
			
			if  (PayablesInvoice.TaxAdjustment.OverrideProductOnly
			or   PayablesInvoice.TaxAdjustment not entered)
				LocalTaxCode								= PayablesInvoice.TaxCode
			else
			if  (each.TaxCode entered)
				LocalTaxCode								= each.TaxCode
			 
			if  (PayablesInvoice.TaxAdjustment.Calculate
			or   PayablesInvoice.TaxAdjustment.IgnoreProductAndAOC)
				initialize LocalTaxCode




			invoke CreateTemporary PayablesInvoiceAddOnCharge
				assign result to NewInvoiceAddOnCharge
				invoked.Company									= Company
				invoked.Vendor									= Vendor
				invoked.PayablesInvoice							= CurrentPayablesInvoiceRel.PayablesInvoice
				invoked.AddOnCharge								= CurrentPurchaseOrderAndLineAddOnChargeRel.AddOnCharge
				invoked.PurchaseOrder							= CurrentPurchaseOrderAndLineAddOnChargeRel.PurchaseOrder
				invoked.PurchaseOrderLine						= CurrentPurchaseOrderAndLineAddOnChargeRel.PurchaseOrderLine
				invoked.PurchaseOrderReceipt					= each.PurchaseOrderReceipt
				invoked.PurchaseOrderReceiptLine				= each.PurchaseOrderReceiptLine
      
				invoked.RecordSource							= "MA"

				invoked.InvoiceLineTaxable						= false
				invoked.DistributionDate						= PayablesInvoice.DistributionDate

				invoked.TaxCode									= LocalTaxCode
				invoked.TaxUsageCode							= LocalTaxUsageCode
				invoked.ProductTaxCategory						= LocalProductTaxCategory
				invoked.Item									= each.Item
				invoked.ItemType								= each.ItemType
				invoked.MatchDetailKey							= each.PurchaseOrderLine.MatchDetailKey
				invoked.Vendor									= each.Vendor
				
				if  (each.PurchaseOrderLine entered)
					invoked.Item								= each.Item
					invoked.ItemType							= each.ItemType
					if (MatchRuleResult.AllToOne					
					or  MatchRuleResult.AllToAll)
						invoked.EnteredQuantity					= each.ReceivedQuantityToMatch * CurrentWorkInvoiceRel.InvoicePercent
						invoked.MatchedQuantity					= each.ReceivedQuantityToMatch * CurrentWorkInvoiceRel.InvoicePercent
					else
						invoked.EnteredQuantity					= each.ReceivedQuantityToMatch 
						invoked.MatchedQuantity					= each.ReceivedQuantityToMatch 
					invoked.MatchUnitCost						= each.OriginalUnitCost  
					invoked.EnteredUnitCost						= each.OriginalUnitCost  
				else
					if (MatchRuleResult.AllToOne					
					or  MatchRuleResult.AllToAll)
						invoked.EnteredQuantity					= each.PurchaseOrderReceiptLineAOCRel.Quantity * CurrentWorkInvoiceRel.InvoicePercent
						invoked.MatchedQuantity					= each.PurchaseOrderReceiptLineAOCRel.Quantity * CurrentWorkInvoiceRel.InvoicePercent
					else
						invoked.EnteredQuantity					= each.PurchaseOrderReceiptLineAOCRel.Quantity
						invoked.MatchedQuantity					= each.PurchaseOrderReceiptLineAOCRel.Quantity
					invoked.MatchUnitCost						= each.OriginalUnitCost
					invoked.EnteredUnitCost						= each.OriginalUnitCost

				invoked.BypassInvoiceErrorChecking				= true
				invoked.BypassAllowUpdate						= true
				invoked.Invoice									= PayablesInvoice.Invoice


      
      
		600MatchUpdate















			for each MatchWorkInvoice set

			



				
				CurrentPayablesInvoice				= each.PayablesInvoice
				
				if (each.Selected)
		








					initialize PayablesChargebackIndicator
					initialize WorkAccrualCode
					initialize LineChargeback
					initialize TotalMatchDistributionAmount
					initialize TotalAddOnChargeDistributionAmount
					initialize Difference4Amount
					initialize TaxDifference
					initialize PurchaseOrderInvoiceTax
					initialize ChargebackTotalTaxDistribution
					initialize ChargebackTransactionTaxableAmount
		
					WorkReceiptConversionRate				= 1
					DistributionProcessLevel						= PayablesInvoice.ProcessLevel
		
					if  ((ReconciliationUpdate
					and   ReconciliationChargebackIndicator)
					or   (!InPrepaids
					and   !ProcessMode.Reconciliation
					and    MatchRule.MatchRuleToleranceArray.MatchRuleToleranceGroup[1].CreateChargeback
					and    Difference3Amount > 0))
						invoke FastUpdate each
							invoked.Chargeback						= true 



		
					if  (ProcessMode.Reconciliation
					and  Difference3Amount not entered
					and  !ReconciliationChargebackIndicator)
						Difference3Amount							= ReconciliationInvoiceMatchedAmount - (ReconciliationReceiptMatchedAmount + ReconciliationServiceTotal)

						if (PayablesInvoice.CostComponentMatch
						or  PayablesInvoice.MatchPrepaymentMethod.PrepayFromInvoice)
							Difference3Amount						+= (ReconciliationInvoiceAddOnCharge - ReconciliationReceiptAddOnCharge)





					if   (ReconciliationChargebackIndicator
					or   (!ProcessMode.Reconciliation
					and   MatchRule.MatchRuleToleranceArray.MatchRuleToleranceGroup[1].CreateChargeback))
						if   (OutMatchStatus != 1
						and  (Difference3Amount > 0
						or    (MatchLevel.DetailMatch
						and    MatchRuleResult.AllToOne
						and    DetailDifference1Amount > 0)))
							include 670CreateChargeback
						else
						if   (MatchLevel.DetailMatch
						and   ProcessMode.Reconciliation
						and   ReconciliationChargebackIndicator)
							include 670CreateChargeback


					if (!PayablesInvoice.TaxEntityUsesSabrix
					or   PayablesInvoice.CreditForRebill)
						initialize LocalAccruedTaxAmount
						for each CurrentInvoiceAccruedTaxDistributions
							if  (CurrentPayablesInvoiceRel.TaxAdjustment not entered
							or   CurrentPayablesInvoiceRel.TaxAdjustment.Calculate
							or   CurrentPayablesInvoiceRel.TaxAdjustment.OverrideProductOnly
							or   CurrentPayablesInvoiceRel.TaxAdjustment.OverrideProductAndAOC
							or   CurrentPayablesInvoiceRel.TaxAdjustment.OverrideTaxablePOLine
							or   CurrentPayablesInvoiceRel.TaxAdjustment.OverrideTaxablePOAndAOC)

								LocalAccruedTaxAmount += each.GLTransactionAmount






	        		if (!PayablesInvoice.BackgroundProcessing.MatchInvoice)


						initialize SumOpenPurchaseAmount
						initialize LastPurchaseOrder
						

						if  (PayablesInvoice.MatchInvoiceReferenceRel exists
						or   PayablesInvoice.InvoiceType.CreditMemo)
							if (PurchaseOrderReceiptInvoiceLinkLastSequenceRel exists)
								LocalMatchSequence								= last PurchaseOrderReceiptInvoiceLinkLastSequenceRel.PurchaseOrderReceiptInvoiceLink.MatchSequence


						for each each.MatchWorkInvoiceDetailRel

							LocalMatchSequence							+= 1
							
							if  (PurchaseOrder entered
							and  LastPurchaseOrder entered
							and  LastPurchaseOrder != each.PurchaseOrder)
					    		invoke UpdateHeaderAmountsFromPurchaseOrderLine PurchaseOrder
									invoked.PrmOpenPurchaseAmount		= SumOpenPurchaseAmount
									invoked.PrmFromBatch				= true
								initialize SumOpenPurchaseAmount								

							LastPurchaseOrder							= each.PurchaseOrder


							if (each.PurchaseOrderLine entered)
								SumOpenPurchaseAmount					-= each.PurchaseOrderLine.OpenPurchaseAmount


							invoke 702DoMainvdtl each
								invoked.Difference3Amount				= Difference3Amount
								invoked.InvoiceDetailKeyed				= InvoiceDetailKeyed
								invoked.WithPreviousDetailMatch			= WithPreviousDetailMatch				
								invoked.MatchSub1						= MatchSub1
								invoked.MatchSequence					= LocalMatchSequence
								invoked.PrmAutoMatchResult				= LinkedAutoMatchResult

							if (each.PurchaseOrderLine entered)
								SumOpenPurchaseAmount					+= each.PurchaseOrderLine.OpenPurchaseAmount

						if  (PurchaseOrder entered)
				    		invoke UpdateHeaderAmountsFromPurchaseOrderLine PurchaseOrder
								invoked.PrmOpenPurchaseAmount		= SumOpenPurchaseAmount
								invoked.PrmFromBatch				= true

							initialize SumOpenPurchaseAmount								
							
						initialize LineChargeback
						initialize AmMatchedQuantity

						for each each.MatchWorkInvoiceAddOnChargeRel
							LocalMatchSequence							+= 1

							invoke 704DoMaaocdtl each
								invoked.Difference3Amount				= Difference3Amount
								invoked.InvoiceDetailKeyed				= InvoiceDetailKeyed
								invoked.WithPreviousDetailMatch			= WithPreviousDetailMatch				
								invoked.MatchSub1						= MatchSub1
								invoked.MatchSequence					= LocalMatchSequence
								invoked.PrmAutoMatchResult				= LinkedAutoMatchResult

					else

	
						invoke MatchInvoiceDetailSet MatchWorkInvoiceDetail
							on error
								invoke CreateViaParameters PayablesInvoiceError
									invoked.PrmCompany			= each.Company
									invoked.PrmInvoice			= each.PayablesInvoice
									invoked.PrmErrorLevel		= 1		
									invoked.PrmErrorClass		= 2		
									invoked.PrmErrorType		= 58	

							invoked.PrmCompany					= each.Company
							invoked.PrmMatchWork 				= each.MatchWork
							invoked.PrmPayablesInvoice			= each.PayablesInvoice
							invoked.Difference3Amount			= Difference3Amount
							invoked.InvoiceDetailKeyed			= InvoiceDetailKeyed
							invoked.WithPreviousDetailMatch		= WithPreviousDetailMatch				
							invoked.MatchSub1					= MatchSub1
							invoked.MatchSequence				= LocalMatchSequence
							invoked.PrmAutoMatchResult			= LinkedAutoMatchResult

			if (!PayablesInvoice.BackgroundProcessing.MatchInvoice)
				include 600MatchUpdatePart2

		600MatchUpdatePart2
		


			for each MatchWorkInvoice set
				CurrentPayablesInvoice				= each.PayablesInvoice


				for each CurrentPayablesInvoiceRel.PayablesInvoiceDetailRel
				    if (each.TotalExemptAmountTaxCode entered
				    and each.TotalExemptAmount entered)
				        LocalTaxCode = each.TotalExemptAmountTaxCode
				        invoke CreateFromMatch PayablesInvoiceDistribution			
				            invoked.Company						= each.Company
				            invoked.PayablesInvoice				= each.PayablesInvoice
				            invoked.DistributionType			= "D"
				            invoked.PurchaseOrder				= each.PurchaseOrder
				            invoked.PurchaseOrderLine			= each.PurchaseOrderLine
				            invoked.PurchasingContract			= each.Contract
				            invoked.ContractLine				= each.ContractLine
				            invoked.PayablesInvoiceDetail		= each.PayablesInvoiceDetail
				            invoked.BypassBudgetEdit			= true
							if (LocalEntityTaxCodeRel exists)
					            if (LocalEntityTaxCodeRel.TaxPoint = "P")
					                invoked.GLFinanceCodeBlock		= LocalEntityTaxCodeRel.TaxInputDueAccount
					                invoked.DistributionAccount		= LocalEntityTaxCodeRel.TaxInputDueAccount
					            else
					                invoked.GLFinanceCodeBlock		= LocalEntityTaxCodeRel.TaxInputAccount
					                invoked.DistributionAccount		= LocalEntityTaxCodeRel.TaxInputAccount
							else
					            if (TaxEntityRel.TaxPoint = "P")
					                invoked.GLFinanceCodeBlock		= TaxEntityRel.TaxInputDueAccount
					                invoked.DistributionAccount		= TaxEntityRel.TaxInputDueAccount
					            else
					                invoked.GLFinanceCodeBlock		= TaxEntityRel.TaxInputAccount
					                invoked.DistributionAccount		= TaxEntityRel.TaxInputAccount
					                
				            invoked.TaxCode						= each.TotalExemptAmountTaxCode
				            invoked.TaxableAmount				= each.TotalExemptAmount
				            initialize invoked.GLTransactionAmount
				            initialize invoked.DistributionAmount.CurrencyAmount
				            invoked.BypassUpdatingInvoiceTotals	= true
				            invoked.TransientBypassErrorUpdate	= true
							invoked.BypassStructureRelationEdit	= true

				if (Company.SummarizeDistribution.Summarize
				and PayablesInvoice.RetainageAccrualCode not entered)
					include CreateSummarizedDistributions
					invoke Purge LocalMatchWorkInvoiceDistributionsRel  


				ToleranceDistributions = true
				
				if (each.Selected)

					include 733TolAccount
						

		
					initialize WorkDistributionGroup.AssetTemplate
		



					

						
					include 2000EditInvoiceTaxOB
					


					if  (CurrentPayablesInvoiceRel.IsChargeback
					and  CurrentPayablesInvoiceRel.PayablesInvoice.PayablesInvoiceTaxRel.TotalInvoicedTaxAmount entered)
						invoke FastUpdate CurrentPayablesInvoiceRel.PayablesInvoice
							invoked.TaxAmount	= CurrentPayablesInvoiceRel.PayablesInvoice.PayablesInvoiceTaxRel.TotalInvoicedTaxAmount



					if  (Company.InvoiceBalanceRoundingToleranceAmount entered
					and  !MatchLevel.InvoiceMatch
					and  !CurrentPayablesInvoiceRel.InvoiceType.CreditMemo)
			        	WorkDistributionGroup.Amount = CurrentPayablesInvoiceRel.InvoiceAmount.CurrencyAmount 

			        	WorkDistributionGroup.Amount -= CurrentPayablesInvoiceRel.POTaxAmount  

			        	WorkDistributionGroup.Amount -= (CurrentPayablesInvoiceRel.TaxAmount - CurrentPayablesInvoiceRel.POTaxAmount)  

			        	WorkDistributionGroup.Amount -= sum CurrentPayablesInvoiceRel.PayablesInvoiceDetailRel.TotalDistributionAmount

						WorkDistributionGroup.Amount -= sum CurrentPayablesInvoiceRel.PayablesInvoiceAddOnChargeRel.TotalDistributionAmount

						WorkDistributionGroup.Amount -= CurrentPayablesInvoiceRel.DerivedMatchAdditionalDistributionsAmount



	


						if (WorkDistributionGroup.Amount entered)
							LocalRoundingPercentAmount	= PayablesInvoice.InvoiceAmount.CurrencyAmount * Company.InvoiceBalanceRoundingTolerancePercent 
							RoundingDifferenceWithinTolerance = false
							if (Company.InvoiceBalanceRoundingToleranceCondition not entered)
				            	if  (Company.InvoiceBalanceRoundingToleranceAmount entered
						        and  WorkDistributionGroup.Amount <= Company.InvoiceBalanceRoundingToleranceAmount)
						        	RoundingDifferenceWithinTolerance = true
						        else
						        if  (Company.InvoiceBalanceRoundingTolerancePercent entered
						        and  WorkDistributionGroup.Amount <= LocalRoundingPercentAmount)
						            RoundingDifferenceWithinTolerance = true
							else		      
						    if (Company.InvoiceBalanceRoundingToleranceCondition.And)
						        if  (WorkDistributionGroup.Amount <= Company.InvoiceBalanceRoundingToleranceAmount
						        and  WorkDistributionGroup.Amount <= LocalRoundingPercentAmount)
						        	RoundingDifferenceWithinTolerance	= true
						    else  
						    if (Company.InvoiceBalanceRoundingToleranceCondition.Or)
						        if  (WorkDistributionGroup.Amount <= Company.InvoiceBalanceRoundingToleranceAmount
						        or   WorkDistributionGroup.Amount <= LocalRoundingPercentAmount)
						            RoundingDifferenceWithinTolerance = true

							if  (RoundingDifferenceWithinTolerance)
		

								WorkDistributionGroup.Account		= Company.InvoiceBalanceRoundingToleranceAccount
					
								initialize WorkDistributionGroup.AddOnCharge
								initialize WorkDistributionGroup.TaxCode
								initialize WorkAccrualCode
								initialize WorkDistributionGroup.TaxableAmount
				
								include 985InvoiceMatchTol
				
					if  (MatchLevel.InvoiceMatch)

			
						Difference4Amount 									= CurrentWorkInvoiceRel.MatchAmount + CurrentPayablesInvoiceRel.AddOnChargeAmount
						Difference4Amount									-= (CurrentWorkInvoiceRel.TotalMatchDistributionAmount + CurrentWorkInvoiceRel.TotalAddOnChargeDistributionAmount)


			      		
						if  (!CurrentPayablesInvoiceRel.TaxAdjustment.Calculate
						and  CurrentWorkInvoiceRel.MatchAmount != CurrentWorkInvoiceRel.TotalMatchDistributionAmount)
							Difference4Amount								+= CurrentPayablesInvoiceRel.PayablesInvoiceTaxRel.TotalInvoicedTaxAmount  
							Difference4Amount								+= CurrentPayablesInvoiceRel.PayablesInvoiceTaxRel.TotalAccruedTaxAmount  

							
						if  (Difference4Amount entered)

							
			
							ChargebackTransactionTotalDistribution               				= Difference4Amount 

		
							WorkDistributionGroup.Amount	= Difference4Amount
			
							initialize WorkDistributionGroup.AddOnCharge
							initialize WorkDistributionGroup.TaxCode
							initialize WorkAccrualCode
							initialize WorkDistributionGroup.TaxableAmount
			

							WorkDistributionGroup.Account							= WorkToleranceAccount
							include 985InvoiceMatchTol
			
							initialize Difference4Amount



		      
					if  (CurrentWorkInvoiceRel.PayablesInvoice.TaxAmount != CurrentWorkInvoiceRel.PayablesInvoice.PayablesInvoiceTaxRel.TotalInvoicedTaxAmount)   
						TaxDifference										= CurrentWorkInvoiceRel.PayablesInvoice.TaxAmount - CurrentWorkInvoiceRel.PayablesInvoice.PayablesInvoiceTaxRel.TotalInvoicedTaxAmount 
			      
						initialize CalculateTax.ProductTaxCategory
		
						initialize WorkDistributionGroup.AddOnCharge
						initialize WorkDistributionGroup.TaxableAmount
		
						WorkDistributionGroup.Amount						= TaxDifference
						WorkDistributionGroup.TaxableAmount					= TaxDifference
						WorkDistributionGroup.TaxCode						= PayablesCompanyRel.TaxCode
						
						if  (PayablesCompanyRel.TaxCode entered)
							CalculateTax.TaxEntity			 				= Company.AccountingEntity
							CalculateTax.TaxCode			 				= PayablesCompanyRel.TaxCode
							CalculateTax.Function			 				= CalculateTax.Function.Inquire
							LocalCalculateTaxExecuted		 				= CalculateTax.ExecuteCalculateTax

							if  (CalculateTax.DoTaxCalculation)
								if  (CalculateTax.TaxTable.TaxTableOutput[1].AccrualFlag = "A")

									WorkAccrualCode = CalculateTax.TaxTable.TaxTableOutput[1].AccrualCode 
		
						if  (WorkAccrualCode not entered)
							WorkAccrualCode									= CurrentPayablesInvoiceRel.RetainageAccrualCode
		

						
						if  (PayablesInvoice.InvoiceType.MatchPrepayment
						and (TaxDifference < CurrentPayablesInvoiceRel.DerivedTaxToleranceAmount * -1
						or   TaxDifference > CurrentPayablesInvoiceRel.DerivedTaxToleranceAmount))
							if  (PayablesInvoice.ProcessLevel.PrepayAccount entered)
								WorkDistributionGroup.Account					= PayablesInvoice.ProcessLevel.PrepayAccount
							else
								WorkDistributionGroup.Account 					= Company.PrepayAccount
						else
						if  (PayablesCompanyRel.TaxRoundingAccount entered)
							WorkDistributionGroup.Account 					= PayablesCompanyRel.TaxRoundingAccount
						else
							WorkDistributionGroup.Account 					= CalculateTax.TaxTable.TaxTableOutput[1].TaxInputAccount
			      
						if (WorkDistributionGroup.Account not entered)
							WorkDistributionGroup.Account 					= WorkToleranceAccount 

						if (PayablesInvoice.TaxConfigurationRel.OneSourceVersionType.Generic
						and TaxEntityRel.ThirdParty.Sabrix
						and CurrentInvoiceTaxDistributions exists)

					    	invoke RestrictedUpdate first CurrentInvoiceTaxDistributions
					        	invoked.DistributionAmount.CurrencyAmount  += TaxDifference
					        	invoked.GLTransactionAmount  += TaxDifference
						else
							include 985InvoiceMatchTol
			       
						initialize TaxDifference
			       





					initialize LocalTotalDistributionAmount
					initialize LocalAccruedTaxAmount
					
					for each CurrentPayablesInvoiceRel.PayablesInvoiceDistribution set

						if   (!each.DistributionType.Distribution)
							NextSentence = true
						else
						if   (each.IsAccruedTaxDistribution)			

							NextSentence = true 
							LocalAccruedTaxAmount 					+= each.DistributionAmount.CurrencyAmount
						else
							LocalTotalDistributionAmount 			+= each.DistributionAmount.CurrencyAmount
							


					for each LocalMatchWorkInvoiceDistributionsRel
						LocalTaxCode = each.TaxCode


						if (each.TaxCode not entered
						or  !LocalEntityTaxCodeRel.AccruedOrInvoiced.Accrued)
							LocalTotalDistributionAmount			+= each.DistributionAmount
						else
						if (each.TaxCode entered
						and LocalEntityTaxCodeRel.AccruedOrInvoiced.Accrued)
							LocalAccruedTaxAmount					+= each.DistributionAmount





					if  (CurrentPayablesInvoiceRel.IsChargeback)

						if  (CurrentPayablesInvoiceRel.TaxAmount entered
						and  CurrentPayablesInvoiceRel.InvoiceAmount.CurrencyAmount != LocalTotalDistributionAmount
						and (LocalTotalDistributionAmount = (CurrentPayablesInvoiceRel.InvoiceAmount.CurrencyAmount + CurrentPayablesInvoiceRel.TaxAmount - LocalAccruedTaxAmount)
						or   LocalTotalDistributionAmount = (CurrentPayablesInvoiceRel.InvoiceAmount.CurrencyAmount + CurrentPayablesInvoiceRel.TaxAmount)))
	
							invoke Update CurrentWorkInvoiceRel.PayablesInvoice
								invoked.InvoiceAmount.CurrencyAmount	= LocalTotalDistributionAmount
								if (invoked.DiscountPercent entered)
								    invoked.AllowableAmountForDiscount 		= LocalTotalDistributionAmount
	
							if  (CurrentPayablesInvoiceRel.DiscountPercent entered)
							    invoke Update CurrentWorkInvoiceRel
								    invoked.DiscountAmount = (LocalTotalDistributionAmount * CurrentWorkInvoiceRel.PayablesInvoice.DiscountPercent)
	



					if  (CurrentPayablesInvoiceRel.InvoiceAmount.CurrencyAmount entered
					and  CurrentPayablesInvoiceRel.InvoiceAmount.CurrencyAmount != LocalTotalDistributionAmount)
						WorkDistributionGroup.Amount = CurrentPayablesInvoiceRel.InvoiceAmount.CurrencyAmount - LocalTotalDistributionAmount
						initialize WorkDistributionGroup.TaxCode
						initialize WorkDistributionGroup.AddOnCharge
						initialize WorkDistributionGroup.TaxableAmount
						WorkDistributionGroup.Account = WorkToleranceAccount 
						include 985InvoiceMatchTol


					

		
					if  (PayablesCompanyRel.BestTerms)

						initialize LocalBestTermsCode
						LocalRevisedDueDate 							= CurrentWorkInvoiceRel.RevisedDueDate
						LocalDiscountDate								= CurrentWorkInvoiceRel.DiscountDate	 
						LocalDiscountPercent							= CurrentWorkInvoiceRel.DiscountPercent
						LocalDiscountAmount								= CurrentWorkInvoiceRel.DiscountAmount




			
						for each MatchWorkReceipt set

							if  (each.Selected
							and  !each.PurchaseOrder exists
							and  CurrentWorkInvoiceRel.TermsCode != each.PurchaseOrderReceipt.TermCode
							and  each.PurchaseOrderReceipt.TermCode entered)
								initialize CalculateBestTerms
								CalculateBestTerms.InvoiceDate 			= CurrentWorkInvoiceRel.PayablesInvoice.InvoiceDate
								CalculateBestTerms.PODate				= CurrentWorkInvoiceRel.PayablesInvoice.InvoiceDate
								CalculateBestTerms.InvoiceAmount		= CurrentWorkInvoiceRel.PayablesInvoice.InvoiceAmount.CurrencyAmount
								CalculateBestTerms.POAmount				= CurrentWorkInvoiceRel.PayablesInvoice.InvoiceAmount.CurrencyAmount
								CalculateBestTerms.InterestRate1		= CurrentWorkInvoiceRel.PayablesInvoice.CashCode.ReturnOnInvestmentRate
								CalculateBestTerms.InvoiceTermsCode		= CurrentWorkInvoiceRel.TermsCode
								CalculateBestTerms.POTermsCode			= each.PurchaseOrderReceipt.TermCode
			
								LocalBestTermsCode						= CalculateBestTerms.BestTermsCode
									
								end for each

						if  (CurrentWorkInvoiceRel.TermsCode entered
						and (TermsCalculation.UseLatestReceiptDate			      
						or   TermsCalculation.UseShipToArriveDate			      
						or   TermsCalculation.UseEarliestReceiptDate))


				
							initialize CalculateTerms
							TransientTermsCode							= CurrentWorkInvoiceRel.TermsCode
							if  (BestReceiptDate entered)
								CalculateTerms.TransactionDate 			= BestReceiptDate
							else
								CalculateTerms.TransactionDate 			= CurrentWorkInvoiceRel.PayablesInvoice.InvoiceDate
				
							if  (CurrentWorkInvoiceRel.PayablesInvoice.AllowableAmountForDiscount entered)				
								CalculateTerms.TransactionAmount 		= CurrentWorkInvoiceRel.PayablesInvoice.AllowableAmountForDiscount
							else
							if  (CurrentWorkInvoiceRel.PayablesInvoice.DiscountPoint.CostOfGoods)
								CalculateTerms.TransactionAmount 		= CurrentWorkInvoiceRel.MatchAmount
							else
								CalculateTerms.TransactionAmount 		= CurrentWorkInvoiceRel.PayablesInvoice.InvoiceAmount.CurrencyAmount
								
							CalculateTerms.AllowedAmount				= CurrentWorkInvoiceRel.PayablesInvoice.AllowableAmountForDiscount
								
							LocalTermsCalTrigger 						= CalculateTerms.TermsCalTrigger
							
							if  (CalculateTerms.OutputErrorNumber not entered)
								LocalRevisedDueDate 					= CalculateTerms.CalculateTermsTable.CalculateTermsOutput[1].DueDate
								LocalDiscountDate						= CalculateTerms.CalculateTermsTable.CalculateTermsOutput[1].DiscountDate
				
								if  (TermsCalculation entered)
									if  (Vendor.FloatDays entered)
										LocalRevisedDueDate 			+= Vendor.FloatDays
										if  (CalculateTerms.CalculateTermsTable.CalculateTermsOutput[1].DiscountDate entered)
											LocalDiscountDate 			+= Vendor.FloatDays
									else
									if  (PayablesCompanyRel.FloatDays entered)
										LocalRevisedDueDate 			+= PayablesCompanyRel.FloatDays
										if  (CalculateTerms.CalculateTermsTable.CalculateTermsOutput[1].DiscountDate entered)
											LocalDiscountDate 			+= PayablesCompanyRel.FloatDays

								LocalDiscountPercent					= CalculateTerms.CalculateTermsTable.CalculateTermsOutput[1].DiscountPercent
								LocalDiscountAmount						= CalculateTerms.CalculateTermsTable.CalculateTermsOutput[1].DiscountAmount
									

							LastDueDate								= CurrentWorkInvoiceRel.RevisedDueDate
							LastTermsCode							= LocalBestTermsCode		      

												
						if  (CurrentWorkInvoiceRel.TermsCode not entered
						and  CurrentWorkInvoiceRel.DiscountDate entered
						and  CurrentWorkInvoiceRel.PayablesInvoice.FlexTerms)

			      
							LocalDiscountDate						= CurrentWorkInvoiceRel.DiscountDate
							if  (Vendor.FloatDays entered)
								LocalDiscountDate 					+= Vendor.FloatDays
							else
							if  (PayablesCompanyRel.FloatDays entered)
								LocalDiscountDate 					+= PayablesCompanyRel.FloatDays

						if  ((LocalBestTermsCode entered
						and   LocalBestTermsCode					!= CurrentWorkInvoiceRel.TermsCode)
						or    LocalRevisedDueDate 					!= CurrentWorkInvoiceRel.RevisedDueDate
						or    LocalDiscountDate						!= CurrentWorkInvoiceRel.DiscountDate	 
						or    LocalDiscountPercent					!= CurrentWorkInvoiceRel.DiscountPercent
						or    LocalDiscountAmount					!= CurrentWorkInvoiceRel.DiscountAmount)
							invoke FastUpdate CurrentWorkInvoiceRel
								if  (LocalBestTermsCode entered)
									invoked.TermsCode				= LocalBestTermsCode
								invoked.RevisedDueDate				= LocalRevisedDueDate
								invoked.DiscountDate				= LocalDiscountDate
								invoked.DiscountPercent				= LocalDiscountPercent
								invoked.DiscountAmount				= LocalDiscountAmount


					invoke FastUpdate each
						invoked.MatchObjectID						= OutMatchObjectID

















			if  (LocalMatchRuleToleranceGroup.InvoiceMatchLevel.InvoiceMatch
			and (MatchRuleResult.AllToOne
			or   MatchRuleResult.AllToAll)
			and InvoiceDetailKeyed
			and !OverrideDetail)
				include 660GenTmpMainvdtls





			if  (Difference3Amount != 0
			and (CurrentPayablesInvoiceRel.IsChargeback
			or   CurrentPayablesInvoiceRel.PayablesInvoiceChargebackRel.MatchObjectID = OutMatchObjectID))
				ChargebackCreated = true
				
			if  (!OutMatchStatus.MatchedOutOfToleranceRecon)
				if  (ProcessMode.Reconciliation
				and  Difference3Amount != 0
				and  !ChargebackCreated)
		            if  ((PayablesInvoice.MatchProcessType.Service
		            or    PayablesInvoice.MatchProcessType.DropShip)
		            and   InvoiceMatchedAmount < PurchaseOrder.OpenPurchaseAmount
		            and   CurrentPayablesInvoiceRel.POCostMessageRel not exists)

						OutMatchStatus							= OutMatchStatus.MatchedInTolerance
		            else
					if  (PayablesInvoice.MatchPrepaymentMethod.EligibleForPrepay
					and !POCostMessageInvoiceOverReceiptRel exists
					and InvoiceMatchedQuantity <= ReceiptMatchedQuantity 
					and InvoiceMatchedAmount <= ReceiptMatchedAmount)
						OutMatchStatus							= OutMatchStatus.Matched
		            else
						OutMatchStatus							= OutMatchStatus.MatchedOutOfToleranceRecon
				else
				if  (ChargebackCreated)
					OutMatchStatus								= OutMatchStatus.MatchedWithChargeback
				else
				if  (Difference3Amount entered)
					OutMatchStatus								= OutMatchStatus.MatchedInTolerance
				else
					OutMatchStatus								= OutMatchStatus.Matched
      













			if  (OverrideDetail)
				for each MatchWorkInvoiceDetailRel
					if  (each.Selected)

						invoke FastUpdate each.PayablesInvoiceDetail
							invoked.Status								= 1
							invoked.MatchObjectID						= OutMatchObjectID
							invoked.DistributionDate					= PayablesInvoice.DistributionDate
							invoked.MatchSequence						= LocalMatchSequence
							invoked.MatchUpdateDate                     = current corporate date 			

			if  (OverrideAOCDetail)
				for each MatchWorkInvoiceAddOnChargeRel
					if  (each.Selected)
						invoke FastUpdate each.PayablesInvoiceAddOnChargeRel
							invoked.Status								= 1
							invoked.MatchObjectID						= OutMatchObjectID
							invoked.DistributionDate					= PayablesInvoice.DistributionDate
							invoked.MatchSequence						= LocalMatchSequence


			for each MatchWorkReceiptRel

				if  (each.Selected)
					include 811ProcessReceipt

			include 690UpdateInvoice      







		660GenTmpMainvdtls
			NextSentence = true


		661GenTmpMainvdtls
			NextSentence = true


		670CreateChargeback


			if  (ReconciliationChargebackIndicator
			or  (!ProcessMode.Reconciliation
			and   MatchRule.MatchRuleToleranceArray.MatchRuleToleranceGroup[1].CreateChargeback))
      

				if  (Difference3Amount < Vendor.ChargebackMinimumAmount)
      				invoke FastUpdate CurrentWorkInvoiceRel
      					invoked.Chargeback 			= false
						invoked.ChargebackReason 	= blank
				else
				if  ((LocalMatchRuleToleranceGroup.InvoiceMatchLevel.DetailMatch
				and   ProcessMode.Reconciliation
				and   ReconciliationChargebackIndicator
				and   MatchTable.ChargebackType.Overbill)
				or   (Difference3Amount >= Vendor.ChargebackMinimumAmount))

					initialize LocalChargebackReference
					initialize LocalReasonCode
					if  (Difference3Amount entered)

						if  (!ProcessMode.Reconciliation)
							LocalReasonCode									= CurrentWorkInvoiceRel.ChargebackReason

						else
							LocalReasonCode									= ReconciliationReasonCode


						if (LocalReasonCode not entered)
							LocalReasonCode = PayablesInvoice.MatchReconQueueRel.ChargebackReason

	
						LocalChargebackReference							= PayablesInvoice.MatchReconQueueRel.ChargebackReference


						if (LocalChargebackReference not entered 
						or  LocalReasonCode not entered)
							for each PayablesInvoice.MatchReconQueueRel.SelectedDetailWithChargebackRel
								if (LocalChargebackReference not entered)
									LocalChargebackReference				= each.PayablesInvoice.MatchReconQueueRel.SelectedDetailWithChargebackRel.ChargebackReference
								if (LocalReasonCode not entered)
									LocalReasonCode							= each.PayablesInvoice.MatchReconQueueRel.SelectedDetailWithChargebackRel.ChargebackReason
								if (LocalChargebackReference entered 
								and LocalReasonCode entered)
									end for each

						if (LocalReasonCode not entered)
							LocalReasonCode									= first POCostMessageWithReasonRel.ReasonCode


						invoke CreateChargeback PayablesInvoice
							assign result to ChargebackInvoiceView
							invoked.Company									= Company
							invoked.Vendor									= CurrentPayablesInvoiceRel.Vendor
							invoked.Invoice									= CurrentPayablesInvoiceRel.Invoice
							invoked.Status									= 0
					        invoked.ProcessLevel							= CurrentPayablesInvoiceRel.ProcessLevel
					        invoked.InvoiceDate								= CurrentPayablesInvoiceRel.InvoiceDate
					        invoked.PurchaseFromLocation					= CurrentPayablesInvoiceRel.PurchaseFromLocation
					        invoked.ExternalPurchaseOrder					= CurrentPayablesInvoiceRel.FirstPurchaseOrder
					        if (CurrentPayablesInvoiceRel.MatchProcessType.ServiceContract)
					            invoked.ServiceContract						= CurrentPayablesInvoiceRel.ServiceContract
							if (LocalChargebackReference entered)
								invoked.Description							= LocalChargebackReference
							else
					        	invoked.Description							= CurrentPayablesInvoiceRel.Description
					        invoked.CashCode								= CurrentPayablesInvoiceRel.CashCode
					        invoked.BankTransactionCode						= CurrentPayablesInvoiceRel.BankTransactionCode
					        invoked.AccrualCode								= CurrentPayablesInvoiceRel.AccrualCode
					        invoked.RetainageAccrualCode					= CurrentPayablesInvoiceRel.RetainageAccrualCode
							invoked.MatchObjectID							= CurrentPayablesInvoiceRel.MatchObjectID

							invoked.VendorGroup								= CurrentPayablesInvoiceRel.VendorGroup
							invoked.TermsCode								= CurrentPayablesInvoiceRel.TermsCode
							invoked.InvoiceCurrency							= CurrentPayablesInvoiceRel.InvoiceCurrency
							invoked.DistributionDate						= CurrentPayablesInvoiceRel.DistributionDate
							invoked.PayVendor								= CurrentPayablesInvoiceRel.PayVendor
							invoked.InvoiceGroup							= CurrentPayablesInvoiceRel.InvoiceGroup

							invoked.InvoiceType								= "C"							
							invoked.MatchProcessType						= "E"  
							invoked.Suffix									= 111
							invoked.ReasonCode								= LocalReasonCode
							invoked.Reference								= LocalChargebackReference

							invoked.Location								= LastLocation
							invoked.Operator								= "MATCH"
							if (CurrentPayablesInvoiceRel.first PayablesInvoicePaymentRel.PayImmediately)
								invoked.OverridePayImmediately				= "Y"
							else 
								invoked.OverridePayImmediately				= "N"
							invoked.TransientJobName						= "ONLINE"
	
							if  (CurrentWorkInvoiceRel.RevisedDueDate entered
							and  CurrentWorkInvoiceRel.RevisedDueDate >= CurrentPayablesInvoiceRel.DueDate)
								invoked.DueDate								= CurrentWorkInvoiceRel.RevisedDueDate
							else	
								invoked.DueDate								= CurrentPayablesInvoiceRel.DueDate				
	





							
							if  (InRemitToCode entered
							and  CurrentPayablesInvoiceRel.RemitToCode not entered)
								invoked.RemitToCode							= InRemitToCode
							else
								invoked.RemitToCode							= CurrentPayablesInvoiceRel.RemitToCode
								
							if  (InPurchaseFromLocation entered)
								invoked.PurchaseFromLocation				= InPurchaseFromLocation






      
							invoked.InvoiceAmount.CurrencyAmount			= Difference3Amount * -1
							invoked.InvoiceType								= "C"

							if  (CurrentPayablesInvoiceRel.DiscountPercent entered
							and  CurrentPayablesInvoiceRel.DiscountDate entered
							and  CurrentPayablesInvoiceRel.DiscountAmount.CurrencyAmount entered)
								invoked.DiscountAmount.ExchangeDate			= CurrentPayablesInvoiceRel.DiscountAmount.ExchangeDate
								invoked.DiscountAmount.CurrencyAmount		= CurrentPayablesInvoiceRel.DiscountAmount.CurrencyAmount * (Difference3Amount / CurrentPayablesInvoiceRel.InvoiceAmount.CurrencyAmount) * -1      
								invoked.DiscountPercent						= CurrentPayablesInvoiceRel.DiscountPercent
								invoked.DiscountDate						= CurrentPayablesInvoiceRel.DiscountDate
								invoked.DiscountCode						= CurrentPayablesInvoiceRel.DiscountCode
								invoked.AllowableAmountForDiscount			= Difference3Amount * -1

						ChargebackInvoice								= ChargebackInvoiceView.PayablesInvoice
						













						
						invoke Create MatchWorkInvoice
							invoked.MatchWork								= MatchWork
							fill in fields from ChargebackInvoiceView.PayablesInvoice
							invoked.Chargeback								= true
							invoked.Selected								= true
							invoked.HoldCode								= ReconciliationHoldCode
							invoked.MatchObjectID							= OutMatchObjectID
				
						ChargebackCreated									= true

		      
		690UpdateInvoice















			if  (LinkedAutoMatchResult entered
			and  MatchLevel.InvoiceMatch)
				for each MatchWorkInvoiceRel
					CurrentPayablesInvoice				= each.PayablesInvoice
					if  (!AutoMatchResultCurrInvRel exists)

						invoke Create AutoMatchResultInvoice 
							invoked.AutoMatchResult 	= LinkedAutoMatchResult 
							invoked.Company 			= Company
							invoked.PayablesInvoice 	= CurrentPayablesInvoice


			for each MatchWorkInvoiceRel



				CurrentPayablesInvoice							= each.PayablesInvoice


				if  (each.MatchObjectID	= OutMatchObjectID)

					if (each.PayablesInvoice.RetainageAccrualCode entered)

						invoke FastUpdate CurrentWorkInvoiceRel
							invoked.TotalRetainageTranAmount = sum CurrentInvoiceRetainageDistributions.DistributionAmount.CurrencyAmount

	




					invoke UpdateAfterMatch each.PayablesInvoice
						invoked.MatchStatus							= OutMatchStatus 
			        	invoked.MatchLevel							= MatchLevel
			        	invoked.MatchObjectID						= OutMatchObjectID
						invoked.MatchDate							= current corporate date
						invoked.TermsCode							= each.TermsCode
						invoked.DueDate								= each.RevisedDueDate
						invoked.DiscountDate						= each.DiscountDate
						invoked.DiscountPercent						= each.DiscountPercent
						invoked.DiscountAmount.CurrencyAmount		= each.DiscountAmount
						invoked.MatchRetainageAmount				= each.TotalRetainageTranAmount
						invoked.TransientAutoMatchResult			= LinkedAutoMatchResult
						if (invoked.RuleGroup not entered)
							invoked.RuleGroup						= MatchRule
						invoked.TransientAutoMatchResult			= LinkedAutoMatchResult

						if (LinkedAutoMatchResult entered)
							invoked.MatchedFrom						= 1 
						else
						if (ProcessMode.Reconciliation)
							invoked.MatchedFrom						= 2 
						else
							invoked.MatchedFrom						= 3 



					if  (LinkedAutoMatchResult entered)


						initialize LinkedAutoMatchResult

			if  (LinkedAutoMatchResult not entered
			and  !PayablesInvoice.MatchProcessType.ServiceContract)
				invoke PurgeSetsAndResourceRecords PayablesInvoice.MatchReconQueueRel
				invoke PurgeDetail 
				invoke Purge 





					
		811ProcessReceipt


			CurrentReceipt	= each.PurchaseOrderReceipt
			
			initialize PowsReceiptLineCountTotal
			initialize PowsReceiptLineCountStatus5 
			initialize PowsReceiptLineCountStatus9
		
			for each CurrentReceiptRel.PurchaseOrderReceipt.PurchaseOrderReceiptLine set
				if  (!each.PurchaseOrderLine.CostOption.NoCharge
				or    each.PurchaseOrderLine.AllowZeroCostInvoice)			
	
					PowsReceiptLineCountTotal						+= 1
	
					if  ((each.MatchedQuantity entered
					and   each.CatchWeightQuantity entered)
					or   (each.MatchedQuantity entered
					and   each.OpenToMatchQuantity not entered))
							PowsReceiptLineCountStatus5				+= 1
		      
					if  ((each.CatchWeightQuantity entered
					and   each.OpenToMatchQuantity not entered)
					or   each.MatchedQuantity = each.BuyUOMQuantity)	
						PowsReceiptLineCountStatus9					+= 1


			for each CurrentReceiptRel.PurchaseOrderReceipt.PurchaseOrderReceiptLineAOCRel
				PowsReceiptLineCountTotal							+= 1
				
				if  (each.PurchaseOrderReceiptLine not entered
				and  each.MiscellaneousAddOnChargeInvoicedAmount not entered)
					PowsReceiptLineCountStatus5						+= 1
					PowsReceiptLineCountStatus9						+= 1
					
				if  (each.PurchaseOrderReceiptLine entered
				and  each.MatchedQuantity entered
				and  each.OpenToMatchQuantity not entered)
					PowsReceiptLineCountStatus5						+= 1
	
				if  (each.PurchaseOrderReceiptLine entered
				and  each.ReceivedQuantityToMatch not entered)
					PowsReceiptLineCountStatus9						+= 1
		



			LocalStatus											= CurrentReceiptRel.Status  

			if  (LocalStatus = 1
			or   LocalStatus = 4)
				if  (PowsReceiptLineCountStatus9 = PowsReceiptLineCountTotal)
					LocalStatus								= 9     
				else
				if  (PowsReceiptLineCountStatus5 = PowsReceiptLineCountTotal)
					LocalStatus								= 5		
      		
			if  (MatchLevel.InvoiceMatch
			and  LocalStatus < 5
			and  CurrentReceiptRel.MatchedAmount entered)
				LocalStatus									= 5		

   			if  (MatchLevel.DetailMatch
			and  LocalStatus < 6
			and (MatchRuleResult.AllToOne
			or   ProcessMode.Reconciliation))
				LocalStatus									= 1


			if  (CurrentReceiptRel.Status != LocalStatus)

				invoke FastUpdate CurrentReceiptRel
					invoked.Status						= LocalStatus					
			

					


			if  (CurrentReceiptRel.PurchaseOrder exists)
				invoke UpdateFromMatch CurrentReceiptRel.PurchaseOrderReceipt
					invoked.Status				= CurrentReceiptRel.Status





		922FillMatporwrk

		
        	Process 						= true

            if  (!ProcessMode.Reconciliation
            and  LocalMatchRuleToleranceGroup.InvoiceMatchLevel.DetailMatch
            and  AllToOneRuleExists
            and !AllToAllRuleExists
            and !OneToAllRuleExists
            and  InReceiptNumber entered
            and  InReceiptNumber != each.PurchaseOrderReceipt)

	        	Process 						= false

 			if (Process)
 				initialize WorkLinesRead
 				
				CurrentReceipt										= each.PurchaseOrderReceipt

				initialize WriteoffAmount

				if (each.ReceivedDate > BestReceiptDate)
					BestReceiptDate									= each.ReceivedDate




					
				invoke Create MatchWorkReceipt		
					fill in fields from each
					invoked.Company									= each.Company
					invoked.MatchWork 								= MatchWork
					if (each.ReceiptAmount > each.MatchedAmount)
						invoked.UnmatchedAmount						= each.ReceiptAmount - each.MatchedAmount
					else
						initialize invoked.UnmatchedAmount

					if (each.HashQuantity > each.HashQuantityMatched)
						invoked.UnmatchedQuantity					= each.HashQuantity - each.HashQuantityMatched
					else
						initialize invoked.UnmatchedQuantity
						
					invoked.UnmatchedAddOnCharge					= each.PurchaseOrder.AddOnChargeTotal - each.PurchaseOrder.AddOnChargeTotal  

					if  (!ProcessMode.Reconciliation
					and   ProcessByMatchReference)
						invoked.Selected							= true
						
				MatporwrkAmount   									+= each.ReceiptAmount - each.MatchedAmount
				MatporwrkQuantity   								+= each.HashQuantity - each.HashQuantityMatched




				if (PerformCreateDetailsInSetAction)
					NextSentence = true
				else
					for each each.PurchaseOrderReceiptLine set			
					


						CurrentPurchaseOrder							= each.PurchaseOrder
						CurrentPurchaseOrderLine						= each.PurchaseOrderLine
						CurrentReceiptLine								= each.PurchaseOrderReceiptLine
	
						WorkLinesRead									+= 1
				
						if  (!each.Status.ReleasedInspected
						and (Vendor.HoldUntilInspected.Yes
						or   Company.HoldUntilInspected.Yes))
							ReceiptHasIncompleteInspection 				= true
						else						
						if  (each.OpenToMatchQuantity entered
						and (each.MatchObjectID not entered
						or   each.PurchaseOrderMatchInvoiceLinksRel exists))
						






				
							if  (each.EnteredReceivedQuantity entered
							and (each.MatchUnitCost entered
							or   each.PurchaseOrderLine.CostOption.NoCharge))

							



	
								WorkMatchUnitCost									= LastCostUpdate
						      	if  (LocalMatchRuleToleranceGroup.InvoiceMatchLevel.DetailMatch
						      	and  first POLineInvoiceMessageRel.AdjustedUnitCost entered)
									WorkMatchUnitCost								= first POLineInvoiceMessageRel.AdjustedUnitCost
								if (WorkMatchUnitCost not entered)
									if (each.IsCatchWeightItem)
										WorkMatchUnitCost							= each.PurchaseOrderLine.EnteredUnitCost
									else
										WorkMatchUnitCost							= each.MatchUnitCost
									

								

								if  ((each.ItemType.Inventoried
								or    each.ItemType.NonStock)
								and   each.VendorPriceUOM != each.VendorBuyUOM 
								and   each.VendorBuyUOM != each.PurchaseOrderLine.EnteredBuyUOM
								and   each.MatchedQuantity entered)
									initialize UOMCalculation

									UOMCalculation.InputUOM							= each.PurchaseOrderReceiptLine.ReceivedUOM
									UOMCalculation.InputToUOM						= each.PurchaseOrderReceiptLine.VendorPriceUOM
									UOMCalculation.InputQuantity					= each.MatchedQuantity
									UOMCalculation.InputUnitCost					= each.OriginalUnitCost
									UOMCalculation.Method						    = UOMCalculation.Method.ConvertToAlternate

				

						

								invoke Create MatchWorkReceiptLine
									fill in fields from each
										except invoked.PayablesInvoice
										except invoked.EnteredReceivedQuantity
										except invoked.BuyUOMQuantity
										except invoked.VendorPriceMatchedQuantity
									invoked.MatchWork 								= MatchWork
									invoked.Company									= each.Company
									invoked.PurchaseOrderReceipt					= each.PurchaseOrderReceipt
									invoked.PurchaseOrderReceiptLine				= each.PurchaseOrderReceiptLine
									invoked.LastAdjustedMatchUnitCost				= LastCostUpdate	
									invoked.MatchUnitCost							= WorkMatchUnitCost
									invoked.VendorPriceUOM							= each.VendorPriceUOM
									invoked.MatchedQuantity							= each.MatchedQuantity
									invoked.OpenToMatchQuantity						= each.OpenToMatchQuantity
	
									invoked.EnteredReceivedQuantity					= each.EnteredReceivedQuantity
									invoked.BuyUOMQuantity							= each.BuyUOMQuantity
	
									invoked.VendorPriceUOMQuantity					= each.VendorPriceUOMQuantity
									invoked.VendorPriceUOM							= each.VendorPriceUOM



									if  ((each.ItemType.Inventoried
									or    each.ItemType.NonStock)
									and   each.VendorPriceUOM != each.VendorBuyUOM
									and   each.VendorBuyUOM != each.PurchaseOrderLine.EnteredBuyUOM
									and   each.MatchedQuantity entered)
										invoked.VendorPriceMatchedQuantity			= UOMCalculation.OutputQuantity
									else
										invoked.VendorPriceMatchedQuantity			= each.MatchedQuantity
					
									if  (each.OpenToMatchQuantity not entered)
										if  (each.VendorPriceUOMQuantity > 0)
											invoked.UnmatchedQuantity				= each.VendorPriceUOMQuantity
											if  (!each.ItemType.Service)
												invoked.MatchAmount					= each.VendorPriceUOMQuantity * WorkMatchUnitCost
									else						
									if  (each.OpenToMatchQuantity > 0)
										invoked.UnmatchedQuantity					= each.OpenToMatchQuantity
										if  (!each.ItemType.Service)
											invoked.MatchAmount						= each.OpenToMatchQuantity * WorkMatchUnitCost
										if  (!MatchLevel.InvoiceMatch)
											initialize invoked.MatchObjectID

									if  (!ProcessMode.Reconciliation
									and   ProcessByMatchReference)
										invoked.Selected							= true
										

	
								if  (each.ArchivedWriteOffQuantity entered)
									WriteoffAmount									+= each.ArchivedQuantity * each.MatchUnitCost
				
								MatprlwrkCount										+= 1
	

 				
				for each each.PurchaseOrderReceiptLineAOCRel			




					WorkLinesRead									+= 1

					CurrentPurchaseOrder							= each.PurchaseOrder
					CurrentAddOnCharge 								= each.AddOnCharge 
					initialize CurrentPurchaseOrderLine 

			        if  ((each.PurchaseOrderReceiptLine not entered 
					and  CurrentPurchaseOrderAndLineAddOnChargeRel.MiscellaneousAddOnChargeInvoicedAmount != CurrentPurchaseOrderAndLineAddOnChargeRel.TotalAddOnChargeAmount)
			        or   each.ReceivedQuantityToMatch entered
			        or   each.ReceivedAmountToMatch entered)
			        	if (!each.Closed.Yes
			        	and !each.Status = 5
			        	and !each.Status.Paid)
			        		if  (each.PurchaseOrderReceiptLine entered
			        		and  each.OpenToMatchQuantity not entered)
			        			if (each.MatchObjectID not entered
			        			or  each.PurchaseOrderReceiptInvoiceLinkRel exists)
			        				include 994BuildMatrecwrk
			        				WorkMatchAddOnCharge		+= each.ReceivedAmountToMatch 
			        				WorkTotalAddOnCharge		+= each.ReceivedAmountToMatch 
			        		else
		        				include 994BuildMatrecwrk
		        				WorkMatchAddOnCharge			+= each.MiscellaneousAddOnChargeInvoicedAmount 
		        				WorkTotalAddOnCharge			+= each.MiscellaneousAddOnChargeInvoicedAmount 
				
				invoke FastUpdate CurrentReceiptRel
					invoked.UnmatchedAddOnCharge					= MatrecwrkAddOnCharge
					invoked.WorkLinesRead							= WorkLinesRead
					invoked.WriteoffAmount							= WriteoffAmount
					invoked.MatchAddOnCharge						= WorkMatchAddOnCharge
					invoked.TotalAddOnCharge						= WorkTotalAddOnCharge
					
				MatporwrkAddOnCharge								+= MatrecwrkAddOnCharge
				MatporwrkCount 										+= 1					


		950BuildMatprlwrkFromPO


			if  (PayablesInvoice.MatchProcessType.DropShip
			or   PayablesInvoice.MatchProcessType.Service
            or   MemoInvoice)
            	initialize MatporwrkAmount
                initialize MatporwrkQuantity
                initialize MatporwrkCount
                initialize MatporwrkAddOnCharge

			if  (MultiplePurchaseOrders
			and  !MemoInvoice)
				for each PayablesInvoice.MatchPurchaseOrderInvoicesRel
					if (!PerformCreateDetailsInSetAction)
						for each each.PurchaseOrder.PurchaseOrderLine set

						
							if  ((!PoolOption.CompanyVendorPoShipTo
							or     each.ShipToLocation = PayablesInvoice.Location)
							and  (!PayablesInvoice.MatchProcessType.DropShip
							or     each.PurchaseOrder.Dropship)
							and  (!PayablesInvoice.MatchProcessType.Service
							or     each.ItemType.Service)
							and  (!PayablesInvoice.MatchProcessType.ReceiptMatch
							or     each.ItemType.Service
							or     each.PurchaseOrder.Dropship 
							or     MemoInvoice)
							and  (!each.PurchaseOrderLine.Closed.Yes
							or     MemoInvoice)
							and  (!each.CostOption.NoCharge
							or     each.AllowZeroCostInvoice))		
								include 952BuildMatprlwrk

					if  (!PseudoMatchReceiptWorkRel exists)
						if  (PayablesInvoice.MatchProcessType.DropShip
						or   PayablesInvoice.MatchProcessType.Service
						or   PayablesInvoice.MatchPrepaymentMethod.PrepayFromInvoice
						or   MemoInvoice
						or  each.PurchaseOrder.IsDropship 
						or  each.PurchaseOrder.HasServiceLinesOnly)
							include 969BuildPseudoMatporwrk
			else
				for each PayablesInvoice.MatchPurchaseOrderInvoicesRel
					if (!PerformCreateDetailsInSetAction)
						for each each.PurchaseOrder.PurchaseOrderLine set

						
							if  ((!PoolOption.CompanyVendorPoShipTo
							or     each.ShipToLocation = PayablesInvoice.Location)
							and  (!PayablesInvoice.MatchProcessType.DropShip
							or     each.PurchaseOrder.Dropship)
							and  (!PayablesInvoice.MatchProcessType.Service
							or     each.ItemType.Service)
							and  (!PayablesInvoice.MatchProcessType.ReceiptMatch
							or     each.ItemType.Service
							or     MemoInvoice)
							and  (!each.PurchaseOrderLine.Closed.Yes
							or     MemoInvoice)
							and  (!each.CostOption.NoCharge
							or     each.AllowZeroCostInvoice))		
								include 952BuildMatprlwrk

					if  (PayablesInvoice.MatchProcessType.DropShip
					or   PayablesInvoice.MatchProcessType.Service
					or   PayablesInvoice.MatchPrepaymentMethod.PrepayFromInvoice
		            or   MemoInvoice)
		            	include 969BuildPseudoMatporwrk

		952BuildMatprlwrk	


			CurrentPurchaseOrder						= each.PurchaseOrder
			CurrentPurchaseOrderLine					= each.PurchaseOrderLine
			
			initialize WorkUnitCost
	      	if  (LocalMatchRuleToleranceGroup.InvoiceMatchLevel.DetailMatch)
				WorkUnitCost						= first POLineInvoiceMessageRel.AdjustedUnitCost


			if (WorkUnitCost not entered)
				WorkUnitCost						= each.EnteredUnitCost


			if (each.IsCatchWeightItem)
				WorkMatchUnitCost					= each.EnteredUnitCost
			
			if  (each.ItemType.Service)
				if  (each.ServiceCode.Quantity)
					WorkOpenToMatchQuantity			= each.QuantityToProcess - (each.MatchedQuantity - each.ChargebackQuantity)
					WorkUnmatchedQuantity			= each.QuantityToProcess - (each.MatchedQuantity - each.ChargebackQuantity)
					WorkMatchAmount					= ((each.QuantityToProcess - (each.MatchedQuantity - each.ChargebackQuantity)) * each.EnteredUnitCost)
				else
					WorkOpenToMatchQuantity			= 1
					WorkUnmatchedQuantity			= 1
					WorkMatchAmount					= (each.EnteredUnitCost - (each.MatchedAmount + each.ServiceCancelAmount))
					WorkUnitCost					= WorkMatchAmount
			else
				WorkOpenToMatchQuantity				= each.QuantityToProcess - each.MatchedQuantity
				WorkUnmatchedQuantity				= each.Quantity + each.WriteOffQuantity + each.ChargebackQuantity - each.MatchedQuantity - each.ArchivedQuantity
				WorkMatchAmount						= ((each.Quantity + each.WriteOffQuantity + each.ChargebackQuantity - each.MatchedQuantity - each.ArchivedQuantity) * each.EnteredUnitCost)




				

			initialize CurrentReceipt 
			initialize CurrentReceiptLine 

			if (CurrentReceiptLineRel exists)
				NextSentence = true 
			else 	 
				invoke Create MatchWorkReceiptLine
					invoked.MatchWork 					= MatchWork
					invoked.Company 					= each.Company
					invoked.Vendor 						= each.Vendor
					invoked.PurchaseOrder 				= each.PurchaseOrder
					invoked.PurchaseOrderLine 			= each.PurchaseOrderLine
					invoked.Item 						= each.Item
					invoked.ItemType 					= each.ItemType
					invoked.MatchDetailKey 				= each.MatchDetailKey
					invoked.ArchivedQuantity			= each.ArchivedQuantity
					invoked.ExtendedAmount				= each.ExtendedAmount
					invoked.Item						= each.Item
					invoked.MatchedQuantity				= each.MatchedQuantity
					invoked.ShipToLocation				= each.ShipToLocation
					invoked.VendorPriceUOMQuantity		= each.VendorPriceUOMQuantity
					invoked.VendorPriceUOM				= each.VendorPriceUOM








					initialize invoked.PurchaseOrderReceipt
					initialize invoked.PurchaseOrderReceiptLine
					invoked.MatchWork 					= MatchWork
					invoked.MatchUnitCost				= WorkUnitCost
					invoked.LastAdjustedMatchUnitCost	= LastCostUpdate
					invoked.EnteredReceivedQuantity		= each.Quantity
					invoked.BuyUOMQuantity				= each.Quantity
					invoked.VendorPriceMatchedQuantity	= each.MatchedQuantity - each.ChargebackQuantity
					invoked.OpenToMatchQuantity			= WorkOpenToMatchQuantity 
					invoked.UnmatchedQuantity			= WorkUnmatchedQuantity
					invoked.MatchAmount					= WorkMatchAmount
					
					if (each.PurchaseOrder.Closed.Yes)
						invoked.Status					= 9
					else
						invoked.Status					= 1
					


				if  (each.ItemType.Service)
					MatprlwrkServiceCount				+= 1
					
					MatprlwrkServiceAmount          	+= WorkMatchAmount 
					MatprlwrkServiceQuantity			+= WorkUnmatchedQuantity

				if  (each.PurchaseOrder.Dropship)	
					MatprlwrkDropshipCount				+= 1
					MatprlwrkDropshipAmount				+= WorkMatchAmount
					MatprlwrkDropshipQuantity			+= WorkUnmatchedQuantity


		960BuildMatrecwrkSvcDrps

			if  (MultiplePurchaseOrders
			and  !MemoInvoice)
				for each PayablesInvoice.MatchPurchaseOrderInvoicesRel
					if (!PerformCreateDetailsInSetAction)
						for each each.PurchaseOrder.PurchaseOrderAndLineAddOnChargeRel

				
							if (PerformCreateDetailsInSetAction)
								NextSentence = true
							else
							if  ((!PoolOption.CompanyVendorPoShipTo
							or     each.ShipToLocation = PayablesInvoice.Location)
							and  (each.PurchaseOrderLine.ItemType.Service
							or    PayablesInvoice.MatchProcessType.DropShip
							or    MemoInvoice)
							and  (!each.PurchaseOrder.Closed.Yes
							or     MemoInvoice))
								include 962BuildMatrecwrk

					if  (!PseudoMatchReceiptWorkRel exists)
						if  (PayablesInvoice.MatchProcessType.DropShip
						or   PayablesInvoice.MatchProcessType.Service
						or   PayablesInvoice.MatchPrepaymentMethod.PrepayFromInvoice
						or   MemoInvoice
						or  each.PurchaseOrder.IsDropship 
						or  each.PurchaseOrder.HasServiceLinesOnly)
							include 969BuildPseudoMatporwrk
			else
				for each PayablesInvoice.MatchPurchaseOrderInvoicesRel
					if (!PerformCreateDetailsInSetAction)
						for each each.PurchaseOrder.PurchaseOrderAndLineAddOnChargeRel

				
							if (PerformCreateDetailsInSetAction)
								NextSentence = true
							else
							if  ((!PoolOption.CompanyVendorPoShipTo
							or     each.ShipToLocation = PayablesInvoice.Location)
							and  (each.PurchaseOrderLine.ItemType.Service
							or    PayablesInvoice.MatchProcessType.DropShip
							or    PayablesInvoice.MatchProcessType.Service
							or    MemoInvoice)
							and  (!each.PurchaseOrder.Closed.Yes
							or     MemoInvoice))
								include 962BuildMatrecwrk

					if  (PayablesInvoice.MatchProcessType.DropShip
					or   PayablesInvoice.MatchProcessType.Service
		            or   MemoInvoice)
		            	include 969BuildPseudoMatporwrk




		962BuildMatrecwrk


			CurrentPurchaseOrder					= each.PurchaseOrder
			CurrentPurchaseOrderLine				= each.PurchaseOrderLine
			CurrentAddOnCharge						= each.PurchaseOrderAndLineAddOnCharge.AddOnCharge
			WorkAmount1								= ((each.Quantity - each.MatchedQuantity) * each.EnteredUnitCost)
			WorkAmount2								= WorkAmount1 + each.MiscellaneousAddOnChargeInvoicedAmount

			if (CurrentReceiptLineAOCWithReceiptRel exists)
				NextSentence = true 
			else 
				invoke Create MatchWorkReceiptLineAOC
					fill in fields from each
					invoked.MatchWork 				= MatchWork
					invoked.Company					= each.Company
					initialize invoked.PurchaseOrderReceipt
					initialize invoked.PurchaseOrderReceiptLine
					invoked.ReceivedQuantity			= each.Quantity
					invoked.ReceivedQuantityToMatch		= each.Quantity - each.MatchedQuantity
					invoked.UnmatchedQuantity			= each.Quantity - each.MatchedQuantity
					invoked.OriginalUnitCost			= each.EnteredUnitCost
					invoked.MatchUnitCost				= each.EnteredUnitCost
					invoked.ReceivedAmountToMatch		= WorkAmount1
					invoked.MatchAmount					= WorkAmount1
					invoked.UnmatchedAmount				= WorkAmount2
					invoked.ItemType					= each.PurchaseOrderLine.ItemType
					invoked.MatchDetailKey				= each.PurchaseOrderLine.MatchDetailKey

				MatrecwrkCount							+= 1
				MatrecwrkAddOnCharge					+= WorkAmount2
				
				if  (each.PurchaseOrderLine.ItemType.Service)
					MatprlwrkServiceAddOnCharge			+= WorkAmount2

				if  (each.PurchaseOrder.Dropship)
					MatprlwrkDropshipCount				+= 1
					MatprlwrkDropshipAddOnCharge		+= WorkAmount2	

		969BuildPseudoMatporwrk


			if (!PseudoMatchReceiptWorkRel exists)

				initialize WriteoffAmount
				
				invoke Create MatchWorkReceipt
					fill in fields from this instance
						except invoked.PurchaseOrderReceipt      
					invoked.MatchWork 			= MatchWork

					if (!PayablesInvoice.MatchProcessType.DropShip)
						invoked.MatchedAmount		= MatprlwrkServiceAmount
						invoked.UnmatchedAmount		= MatprlwrkServiceAmount
						invoked.HashQuantity		= MatprlwrkServiceQuantity
						invoked.UnmatchedQuantity	= MatprlwrkServiceQuantity
						invoked.MatchedAmount		= MatprlwrkServiceAddOnCharge
						invoked.UnmatchedAmount		= MatprlwrkServiceAddOnCharge
	      			else
					if (PayablesInvoice.MatchProcessType.DropShip)
						invoked.MatchedAmount		= MatprlwrkDropshipAmount
						invoked.UnmatchedAmount		= MatprlwrkDropshipAmount
						invoked.HashQuantity		= MatprlwrkDropshipQuantity
						invoked.UnmatchedQuantity	= MatprlwrkDropshipQuantity
						invoked.MatchedAmount		= MatprlwrkDropshipAddOnCharge
						invoked.UnmatchedAmount		= MatprlwrkDropshipAddOnCharge

				if (PayablesInvoice.MatchProcessType.Service)
					MatporwrkAmount					= MatprlwrkServiceAmount
					MatporwrkQuantity				= MatprlwrkServiceQuantity
					MatporwrkAddOnCharge			= MatprlwrkServiceAddOnCharge
	      		else
				if (PayablesInvoice.MatchProcessType.DropShip)
					MatporwrkAmount					= MatprlwrkDropshipAmount
					MatporwrkQuantity				= MatprlwrkDropshipQuantity
					MatporwrkAddOnCharge			= MatprlwrkDropshipAddOnCharge

	      
				MatporwrkCount						+= 1

		971FillMatrecwrkLoop


			Process							= true
			
			if  (PoolOption.CompanyVendorPoShipTo
			and  each.PurchaseOrder != PurchaseOrder)
	        	Process 						= false
	        else
            if  (!ProcessMode.Reconciliation
            and  LocalMatchRuleToleranceGroup.InvoiceMatchLevel.DetailMatch
            and  AllToOneRuleExists
            and !AllToAllRuleExists
            and !OneToAllRuleExists
            and  InReceiptNumber entered
            and  InReceiptNumber != each.PurchaseOrderReceipt)
	        	Process 						= false
			else
	        if  (each.MiscellaneousAddOnChargeInvoicedAmount not entered
	        and  each.ReceivedQuantityToMatch not entered
	        and  each.ReceivedAmountToMatch not entered)
	        	Process							= false
	        else
			if  (each.Closed.Yes
			or   each.Status = 5
			or   each.Status = 9)
	        	Process							= false
	        else
			if  (each.PurchaseOrderReceiptLine entered
			and	 each.OpenToMatchQuantity not entered)     
    			if  (each.MatchObjectID entered
    			and  !each.PurchaseOrderReceiptInvoiceLinkRel exists)
					Process						= false

			if (Process)
				LocalPurchaseOrderReceipt = each.PurchaseOrderReceipt
				include 994BuildMatrecwrk
				
				if  (!LocalMatchReceiptWorkRel exists)



					initialize WriteoffAmount
					
					invoke Create MatchWorkReceipt    
						fill in fields from each.PurchaseOrderReceipt
						invoked.MatchWork 								= MatchWork
						invoked.Company									= each.Company
						if (each.PurchaseOrderReceipt.ReceiptAmount > each.PurchaseOrderReceipt.MatchedAmount)
							invoked.UnmatchedAmount						= each.PurchaseOrderReceipt.ReceiptAmount - each.PurchaseOrderReceipt.MatchedAmount
						else
							initialize invoked.UnmatchedAmount
	
						if (each.PurchaseOrderReceipt.HashQuantity > each.PurchaseOrderReceipt.HashQuantityMatched)
							invoked.UnmatchedQuantity					= each.PurchaseOrderReceipt.HashQuantity - each.PurchaseOrderReceipt.HashQuantityMatched
						else
							initialize invoked.UnmatchedQuantity
							
						invoked.UnmatchedAddOnCharge					= MatrecwrkAddOnCharge 
							
	
					MatporwrkCount										+= 1
					MatporwrkAmount   									+= each.PurchaseOrderReceipt.ReceiptAmount - each.PurchaseOrderReceipt.MatchedAmount
					MatporwrkQuantity   								+= each.PurchaseOrderReceipt.HashQuantity - each.PurchaseOrderReceipt.HashQuantityMatched
					MatporwrkAddOnCharge								+= each.ReceivedAmountToMatch
		
		994BuildMatrecwrk
			display "994BuildMatrecwrk"

			if  ((each.PurchaseOrderReceiptLine.ItemType.Inventoried
			or    each.PurchaseOrderReceiptLine.ItemType.NonStock)
			and   each.PurchaseOrderReceiptLine.VendorPriceUOM != each.PurchaseOrderReceiptLine.ReceivedUOM
			and   each.ReceivedQuantityToMatch entered)
				initialize UOMCalculation

				UOMCalculation.InputUOM								= each.PurchaseOrderReceiptLine.ReceivedUOM
				UOMCalculation.InputToUOM							= each.PurchaseOrderReceiptLine.VendorPriceUOM
				UOMCalculation.InputQuantity						= each.ReceivedQuantityToMatch
				UOMCalculation.InputUnitCost						= each.OriginalUnitCost
				UOMCalculation.InputToUOMConversion					= each.PurchaseOrderReceiptLine.VendorBuyUOMMultiplier
				UOMCalculation.InputUOMConversion					= each.PurchaseOrderReceiptLine.ReceivedUOMMultiplier
				UOMCalculation.Method						        = UOMCalculation.Method.ConvertToAlternate





			invoke Create MatchWorkReceiptLineAOC
				fill in fields from each
				invoked.MatchWork 									= MatchWork
				invoked.Company										= each.Company
				invoked.Item										= each.PurchaseOrderReceiptLine.Item                  
				invoked.ItemType									= each.PurchaseOrderReceiptLine.ItemType
				invoked.MatchDetailKey								= each.PurchaseOrderReceiptLine.MatchDetailKey
				invoked.PurchaseOrderLine							= each.PurchaseOrderReceiptLine.PurchaseOrderLine
				if (each.PurchaseOrderReceiptLine not entered)
					invoked.MiscellaneousAddOnChargeInvoicedAmount  = CurrentPurchaseOrderAndLineAddOnChargeRel.MiscellaneousAddOnChargeInvoicedAmount


				if  ((each.PurchaseOrderReceiptLine.ItemType.Inventoried
				or    each.PurchaseOrderReceiptLine.ItemType.NonStock)
				and   each.PurchaseOrderReceiptLine.VendorPriceUOM != each.PurchaseOrderReceiptLine.ReceivedUOM
				and   each.ReceivedQuantityToMatch entered)
					invoked.ReceivedQuantityToMatch					= UOMCalculation.OutputQuantity
				else
					invoked.ReceivedQuantityToMatch					= each.ReceivedQuantityToMatch
					invoked.OriginalUnitCost						= each.OriginalUnitCost

				invoked.UnmatchedQuantity							= each.ReceivedQuantityToMatch
				invoked.MatchAmount									= each.ReceivedAmountToMatch
				invoked.MatchUnitCost								= each.OriginalUnitCost

				invoked.ReceivedDate								= each.PurchaseOrderReceipt.ReceivedDate

				if  (each.PurchaseOrderReceiptLine entered
				and  each.OpenToMatchQuantity not entered
				and  each.MatchObjectID not entered)
					invoked.OpenToMatchQuantity						= each.ReceivedQuantityToMatch

			MatrecwrkCount											+= 1
			MatrecwrkAddOnCharge									+= each.ReceivedAmountToMatch + each.MiscellaneousAddOnChargeInvoicedAmount


		4100EditInvoice
		
			EditMode = true
			WithinTolerance = true      

			initialize WorkDistributionGroup
			initialize LocalMatchMessageToleranceGroup
			initialize LocalMatchRuleToleranceGroup


			I1 = 1 
			if  (Company.ServiceMessageRuleOrder entered
			and  Company.ServiceMessageMatchRule = MatchRule
			and  MatchMessageToleranceRel exists)
				while (I1 <= 6)
					if  (MatchMessageToleranceRel.MatchRule.MatchRuleToleranceArray.MatchRuleToleranceGroup[I1].MatchRuleOrder = Company.ServiceMessageRuleOrder
					and  MatchMessageToleranceRel.MatchRule.MatchRuleToleranceArray.MatchRuleToleranceGroup.InvoiceMatchLevel.DetailMatch)
						LocalMatchMessageToleranceGroup = MatchMessageToleranceRel.MatchMessageToleranceArray.MatchMessageToleranceGroup[I1]
						LocalMatchRuleToleranceGroup 	= MatchMessageToleranceRel.MatchRule.MatchRuleToleranceArray.MatchRuleToleranceGroup[I1]
						end while
					else
						I1 += 1
			else
				while (I1 <= 6)
					if  (MatchRule.MatchRuleToleranceArray.MatchRuleToleranceGroup.InvoiceMatchLevel.DetailMatch)
						LocalMatchMessageToleranceGroup = MatchRule.MatchMessageToleranceRel.MatchMessageToleranceArray.MatchMessageToleranceGroup[I1]
						LocalMatchRuleToleranceGroup = MatchRule.MatchRuleToleranceArray.MatchRuleToleranceGroup[I1]
						end while
					else
						I1 += 1



			for each PayablesInvoiceDetailRel
				LocalMatchSequence							+= 1
				


				CurrentInvoiceDetail										= each.PayablesInvoiceDetail
				CurrentContract												= each.Contract
				CurrentContractLine											= each.ContractLine
				initialize CurrentAddOnCharge
				DetailsTotalDistributionAmount								= each.TotalDistributionAmount
				DistributionDetailMatchAmount								= each.TotalDistributionAmount
				DistributionUnitCost										= each.MatchUnitCost
				DetailsMatchedQuantity										= each.MatchedQuantity
				DetailsMatchUnitCost										= each.MatchUnitCost
				DetailsEnteredUnitCost										= each.EnteredUnitCost
				DetailsItem													= each.Item
				DetailsItemType												= each.ItemType
				DetailsMatchDetailKey										= each.MatchDetailKey
				if  (each.VendorBuyUOM = each.VendorPriceUOM)
					DetailsVBuyMatchedQuantity								= DetailsMatchedQuantity
				else
				if  (!each.ItemType.Inventoried
				and  !each.ItemType.NonStock)
					DetailsVBuyMatchedQuantity								= DetailsMatchedQuantity
				else
					initialize UOMCalculation

					UOMCalculation.InputUOM									= each.VendorPriceUOM
					UOMCalculation.InputToUOM								= each.VendorBuyUOM
					UOMCalculation.InputQuantity							= DetailsMatchedQuantity
					UOMCalculation.Method			        			    = UOMCalculation.Method.ConvertToAlternate
					DetailsVBuyMatchedQuantity								= UOMCalculation.OutputQuantity

				include 4130CheckSvcContractTolerances


			constraint (WithinTolerance)
			    "InvoiceNotInTolerance;PleaseMatchInRecon"
			    
		4100ProcessInvoice 


			initialize WorkDistributionGroup
			initialize LocalMatchMessageToleranceGroup
			initialize LocalMatchRuleToleranceGroup


			I1 = 1 
			if  (Company.ServiceMessageRuleOrder entered
			and  Company.ServiceMessageMatchRule = MatchRule
			and  MatchMessageToleranceRel exists)
				while (I1 <= 6)
					if  (MatchMessageToleranceRel.MatchRule.MatchRuleToleranceArray.MatchRuleToleranceGroup[I1].MatchRuleOrder = Company.ServiceMessageRuleOrder
					and  MatchMessageToleranceRel.MatchRule.MatchRuleToleranceArray.MatchRuleToleranceGroup.InvoiceMatchLevel.DetailMatch)
						LocalMatchMessageToleranceGroup = MatchMessageToleranceRel.MatchMessageToleranceArray.MatchMessageToleranceGroup[I1]
						LocalMatchRuleToleranceGroup 	= MatchMessageToleranceRel.MatchRule.MatchRuleToleranceArray.MatchRuleToleranceGroup[I1]
						end while
					else
						I1 += 1
			else
				while (I1 <= 6)
					if  (MatchRule.MatchRuleToleranceArray.MatchRuleToleranceGroup.InvoiceMatchLevel.DetailMatch)
						LocalMatchMessageToleranceGroup = MatchRule.MatchMessageToleranceRel.MatchMessageToleranceArray.MatchMessageToleranceGroup[I1]
						LocalMatchRuleToleranceGroup = MatchRule.MatchRuleToleranceArray.MatchRuleToleranceGroup[I1]
						end while
					else
						I1 += 1



			for each PayablesInvoiceDetailRel
				LocalMatchSequence							+= 1
				


				CurrentInvoiceDetail										= each.PayablesInvoiceDetail
				CurrentContract												= each.Contract
				CurrentContractLine											= each.ContractLine
				initialize CurrentAddOnCharge
				DetailsTotalDistributionAmount								= each.TotalDistributionAmount
				DistributionDetailMatchAmount								= each.TotalDistributionAmount
				DistributionUnitCost										= each.MatchUnitCost
				DetailsMatchedQuantity										= each.MatchedQuantity
				DetailsMatchUnitCost										= each.MatchUnitCost
				DetailsEnteredUnitCost										= each.EnteredUnitCost
				DetailsItem													= each.Item
				DetailsItemType												= each.ItemType
				DetailsMatchDetailKey										= each.MatchDetailKey
				if  (each.VendorBuyUOM = each.VendorPriceUOM)
					DetailsVBuyMatchedQuantity								= DetailsMatchedQuantity
				else
				if  (!each.ItemType.Inventoried
				and  !each.ItemType.NonStock)
					DetailsVBuyMatchedQuantity								= DetailsMatchedQuantity
				else
					initialize UOMCalculation

					UOMCalculation.InputUOM									= each.VendorPriceUOM
					UOMCalculation.InputToUOM								= each.VendorBuyUOM
					UOMCalculation.InputQuantity							= DetailsMatchedQuantity
					UOMCalculation.Method			        			    = UOMCalculation.Method.ConvertToAlternate
					DetailsVBuyMatchedQuantity								= UOMCalculation.OutputQuantity

				if  (ChargebackInvoice not entered)
				    include 4130CheckSvcContractTolerances
				include 4140UpdatePlnPvn

				initialize DistributionDetailMatchAmount

				include 4152CreateDistribs
				invoke FastUpdate each
					invoked.Status											= 1
					invoked.MatchObjectID									= OutMatchObjectID
					invoked.MatchUpdateDate                                 = current corporate date 					
					

				invoke Create PurchaseOrderReceiptInvoiceLink
					invoked.Company														= Company
					invoked.PurchaseOrderReceiptInvoiceLink.MatchObjectID				= OutMatchObjectID
					invoked.PurchaseOrderReceiptInvoiceLink.MatchSequence				= LocalMatchSequence
					invoked.PurchaseOrderReceiptInvoiceLink.AddOnCharge					= CurrentAddOnCharge
					invoked.Vendor														= CurrentPayablesInvoiceRel.Vendor
					invoked.PayablesInvoice												= CurrentPayablesInvoiceRel.PayablesInvoice


					invoked.Contract													= CurrentContract
					invoked.ContractLine												= CurrentContractLine
					invoked.Item														= each.Item
					invoked.MatchDetailKey												= each.MatchDetailKey
					invoked.MatchedQuantity												= each.MatchedQuantity
					invoked.MatchUnitCost												= each.MatchUnitCost
					invoked.Type														= "MA"
				
			for each PayablesInvoiceAddOnChargeRel
				LocalMatchSequence							+= 1
				if  (each.PurchaseOrderLine not entered)

					LocalTotalNewTaxAmount											+= each.TaxAmount
					LocalTotalAddOnChargeAmount										+= each.TotalBaseAmount
					
				CurrentAddOnCharge													= each.AddOnCharge


				CurrentInvoiceDetail												= each.PayablesInvoiceDetailRel.PayablesInvoiceDetail
				CurrentContract														= each.Contract
				CurrentContractLine													= each.ContractLine
				if  (each.PayablesInvoiceDetailRel exists)
					DetailsTotalDistributionAmount									= each.PayablesInvoiceDetailRel.TotalDistributionAmount
					DistributionDetailMatchAmount									= each.PayablesInvoiceDetailRel.TotalDistributionAmount
					DistributionUnitCost											= each.PayablesInvoiceDetailRel.MatchUnitCost
					DetailsMatchedQuantity											= each.PayablesInvoiceDetailRel.MatchedQuantity
					DetailsMatchUnitCost											= each.PayablesInvoiceDetailRel.MatchUnitCost
					DetailsEnteredUnitCost											= each.PayablesInvoiceDetailRel.EnteredUnitCost
					DetailsItem														= each.Item
					DetailsItemType													= each.ItemType
					DetailsMatchDetailKey											= each.MatchDetailKey
					if  (each.PayablesInvoiceDetailRel.VendorBuyUOM = each.PayablesInvoiceDetailRel.VendorPriceUOM)
						DetailsVBuyMatchedQuantity									= DetailsMatchedQuantity
					else
					if  (!each.ItemType.Inventoried
					and  !each.ItemType.NonStock)
						DetailsVBuyMatchedQuantity									= DetailsMatchedQuantity
					else
						initialize UOMCalculation

						UOMCalculation.InputUOM										= each.PayablesInvoiceDetailRel.VendorPriceUOM
						UOMCalculation.InputToUOM									= each.PayablesInvoiceDetailRel.VendorBuyUOM
						UOMCalculation.InputQuantity								= DetailsMatchedQuantity
						UOMCalculation.Method		     				            = UOMCalculation.Method.ConvertToAlternate


						DetailsVBuyMatchedQuantity									= UOMCalculation.OutputQuantity
	
					include 4152CreateDistribs

				invoke FastUpdate each
					invoked.Status													= 1
					invoked.MatchObjectID											= OutMatchObjectID

				if  (!MemoInvoice)

					invoke Create PurchaseOrderReceiptInvoiceLink
						invoked.Company												= Company
						invoked.PurchaseOrderReceiptInvoiceLink.MatchObjectID		= OutMatchObjectID
						invoked.PurchaseOrderReceiptInvoiceLink.MatchSequence		= LocalMatchSequence
						invoked.PurchaseOrderReceiptInvoiceLink.AddOnCharge			= CurrentAddOnCharge
						invoked.Vendor												= CurrentPayablesInvoiceRel.Vendor
						invoked.PayablesInvoice										= CurrentPayablesInvoiceRel.PayablesInvoice


						invoked.Contract											= CurrentContract
						invoked.ContractLine										= CurrentContractLine
						invoked.Item												= each.Item
						invoked.MatchDetailKey										= each.MatchDetailKey
						invoked.MatchedQuantity										= each.MatchedQuantity
						invoked.MatchUnitCost										= each.MatchUnitCost
						invoked.Type												= "MA"







			OutMatchStatus															= 2
			
			invoke FastUpdate ThisMatchWorkInvoiceRel
				invoked.MatchStatus													= OutMatchStatus
				invoked.MatchObjectID												= OutMatchObjectID      

			if (PayablesInvoice.HasMultipleServiceContracts)
				for each PayablesInvoice.MatchServiceContractInvoicesRel
					if (each.Contract.CreateCommitments.Line
					or  each.Contract.CreateCommitments.LineSpread)
						for each each.PayablesInvoiceDetailRel
							for each each.ContractLineDistributionsRel
								invoke FinishUpdateCommitments each
					else 
						invoke FinishUpdateContractAmounts each.Contract  
			else
				if (CurrentContractRel.CreateCommitments.Line
				or  CurrentContractRel.CreateCommitments.LineSpread)
					for each PayablesInvoice.PayablesInvoiceDetailRel
						for each each.ContractLineDistributionsRel
							invoke FinishUpdateCommitments each
				else 
					invoke FinishUpdateContractAmounts CurrentContractRel 

		4130CheckSvcContractTolerances










			initialize MessageQuantityDifference
			initialize MessageUnitCostDifference
			initialize MessageExtendedDifference
			initialize MessageOverQuantityPercentDifference
			initialize MessageUnderQuantityPercentDifference
			initialize MessageOverUnitPercentDifference
			initialize MessageUnderUnitPercentDifference
			initialize MessageOverTotalPercentDifference
			initialize MessageOverCtPercentDifference

			if  (Company.ServiceMessagingOption entered
			and  !Company.ServiceMessagingOption.NoMessage)
				if  (each.ContractLine entered
				and  LocalMatchRuleToleranceGroup entered)
					if  (each.ContractLine.ServiceCode.Amount)
						MessageExtendedDifference		= each.DerivedContractLineDiscrepancy * -1
						MessageOverCtPercentDifference	= MessageExtendedDifference / each.ContractLine.LifetimeMaximumAmount
						if  (MessageExtendedDifference > -.01
						and  MessageExtendedDifference < .01)
						    initialize MessageExtendedDifference
				    else
				    if (each.ContractLine.LifetimeMaximumQuantity not entered)
            			MessageExtendedDifference        = 0
          			   	MessageQuantityDifference        = 0
           		  		if (each.ContractLine.CurrentNetCost entered) 
              		   		MessageUnitCostDifference = each.EnteredUnitCost - each.ContractLine.CurrentNetCost 
             			else
                			MessageUnitCostDifference = each.EnteredUnitCost - each.ContractLine.BaseCost 
					else
						if (each.ContractLine.CurrentNetCost entered) 
							MessageExtendedDifference		= ((each.EnteredUnitCost * each.EnteredQuantity) + each.ContractLine.AmountOrdered)
							MessageExtendedDifference		-= (each.ContractLine.LifetimeMaximumQuantity * each.ContractLine.CurrentNetCost) 
							MessageUnitCostDifference		= each.EnteredUnitCost - each.ContractLine.CurrentNetCost 
							MessageQuantityDifference		= each.EnteredQuantity - (each.ContractLine.LifetimeMaximumQuantity - each.ContractLine.QuantityOrdered)
						else
							MessageExtendedDifference		= ((each.EnteredUnitCost * each.EnteredQuantity) + each.ContractLine.AmountOrdered)
							MessageExtendedDifference		-= (each.ContractLine.LifetimeMaximumQuantity * each.ContractLine.BaseCost) 
							MessageUnitCostDifference		= each.EnteredUnitCost - each.ContractLine.BaseCost 
							MessageQuantityDifference		= each.EnteredQuantity - (each.ContractLine.LifetimeMaximumQuantity - each.ContractLine.QuantityOrdered)





					initialize MessageType
					if  (!PayablesInvoice.InvoiceType.CreditMemo
					and   !PayablesInvoice.InvoiceType.DebitMemo)

						initialize MessageType
			       
						if  (CurrentContractLineRel.ServiceCode.Amount)
							include 4410CheckAmtTypeSrvcMsgTol
						else

							include 4420CheckQtyTypeSrvcMsgTol


















		4140UpdatePlnPvn
      
			initialize LocalTotalAddOnChargeAmount
			
			LocalTotalNewTaxAmount							= each.TaxAmount
			
			for each each.PayablesInvoiceAddOnChargeRel
				LocalTotalNewTaxAmount							+= each.TaxAmount 
				LocalTotalAddOnChargeAmount						+= each.TotalBaseAmount 


			invoke UpdateAmountsAndQuantities each.ContractLine  
				invoked.InTaxAmount							= LocalTotalNewTaxAmount
				invoked.InAddOnChargeAmount					= LocalTotalAddOnChargeAmount
				invoked.InDate								= PayablesInvoice.InvoiceDate
				invoked.InAmount							= each.TotalDistributionAmount
				if  (PayablesInvoice.CreditOrDebitMemo				
				and  each.ContractLine.ServiceCode.Quantity
				and  each.MemoAdjustType.CostAdjustment)
				    invoked.InQuantity						= 0
				else
				if (each.ContractLine.ServiceCode.Quantity
				or  each.ContractLine.QuantityOrdered = 0)
				    invoked.InQuantity						= each.MatchedQuantity
				invoked.InUOM.UnitOfMeasure					= each.EnteredUOM
				invoked.InCurrency                          = PayablesInvoice.InvoiceCurrency
				if (PayablesInvoice.ServiceContract.UseRetainage)
					invoked.InInvoiceAmount                 = each.TotalDistributionAmount
				invoked.FromMatch                           = true

		4152CreateDistribs

		
			initialize WorkDistributionGroup
			





			if  (DistributionUnitCost not entered
			or  (DetailsMatchUnitCost entered
			and  DetailsMatchUnitCost != DetailsEnteredUnitCost))
				DistributionUnitCost									= DetailsEnteredUnitCost

			else
				DistributionUnitCost									= DetailsMatchUnitCost


			if  (DetailsAddOnCharge not entered)
				DetailsBuyUOMMatchedQuantity							= DetailsMatchedQuantity

			if  (DetailsMatchedQuantity > DetailsVBuyMatchedQuantity)
				WorkDistributionGroup.Amount 							= DetailsVBuyMatchedQuantity * DistributionUnitCost
			else
				WorkDistributionGroup.Amount 							= DetailsMatchedQuantity * DistributionUnitCost
      
			if  (WorkDistributionGroup.Amount entered)
				WorkDistributionGroup.AddOnCharge						= CurrentAddOnCharge
				WorkDistributionGroup.ItemType							= DetailsItemType
				WorkDistributionGroup.MatchedQuantity					= DetailsMatchedQuantity
				WorkDistributionGroup.CurrencyRate						= InvoiceCurrencyExchangeRate
				WorkDistributionGroup.Contract							= CurrentContract
				WorkDistributionGroup.ContractLine						= CurrentContractLine
				WorkDistributionGroup.UnitAmount						= DetailsMatchedQuantity
				WorkDistributionGroup.LandedCost						= DetailsLandedAddOnCharge












				if  (InvoiceDistributionsForContractLineRel exists
				or  (CurrentContractLine entered
				and  CurrentContractLineRel.ContractLineDistribution set exists))

					if  (WorkDistributionGroup.MatchedQuantity entered)
						DetailDistAmount													= WorkDistributionGroup.MatchedQuantity * DistributionUnitCost
					else
						DetailDistAmount													= DistributionUnitCost
		
					if  (InvoiceDistributionsForContractLineRel exists)
						NextSentence = true
					else
					if  (CurrentContractLine entered
					and  CurrentContractLineRel.ContractLineDistribution set exists)

						invoke DoContractLineDistributions CurrentInvoiceDetailRel
							invoked.PrmDistributionAmount									= DetailDistAmount
							invoked.PrmDistributionUnitCost									= DistributionUnitCost
				else

					DistributionProcessLevel										= PayablesInvoice.ProcessLevel
					if  (DistributionProcessLevelRel.ToleranceOffsetAccount entered)
						WorkDistributionGroup.Account	= DistributionProcessLevelRel.ToleranceOffsetAccount
					else
						WorkDistributionGroup.Account	= Company.ToleranceOffsetAccount

					WorkDistributionGroup.FinanceEnterpriseGroup = Company.FinanceEnterpriseGroup
					WorkDistributionGroup.Company				 = Company
					WorkDistributionGroup.Invoice = PayablesInvoice
					invoke CreateDistribution
						invoked.PrmWorkDistributionGroup		= WorkDistributionGroup


		4410CheckAmtTypeSrvcMsgTol






			if  (MessageExtendedDifference < 0)
				NextSentence = true
			else
			if  (MessageExtendedDifference > 0
			and (Company.ServiceMessagingOption.OverOrUnderQuantityAndCost
			or   Company.ServiceMessagingOption.OverQuantityAndCost
			or   Company.ServiceMessagingOption.ExtendedAmountOnly))
				if  (LocalMatchMessageToleranceGroup.ServiceExtendedAmountCondition.And
				and  MessageExtendedDifference   > LocalMatchMessageToleranceGroup.ServiceExtendedAmountTolerance
				and  MessageOverCtPercentDifference  > LocalMatchMessageToleranceGroup.ServiceExtendedAmountPercent) 
					MessageType									= "C"
				else
				if  (LocalMatchMessageToleranceGroup.ServiceExtendedAmountCondition.Or
				and (MessageExtendedDifference   > LocalMatchMessageToleranceGroup.ServiceExtendedAmountTolerance
				or   MessageOverCtPercentDifference  > LocalMatchMessageToleranceGroup.ServiceExtendedAmountPercent))
					MessageType									= "C"
				else
				if  (LocalMatchMessageToleranceGroup.ServiceExtendedAmountCondition not entered
				and  LocalMatchMessageToleranceGroup.ServiceExtendedAmountTolerance not entered
				and  LocalMatchMessageToleranceGroup.ServiceExtendedAmountPercent not entered)
					MessageType									= "C"
				else
				if  (LocalMatchMessageToleranceGroup.ServiceExtendedAmountCondition not entered
				and  LocalMatchMessageToleranceGroup.ServiceExtendedAmountTolerance > 0
				and  MessageExtendedDifference > LocalMatchMessageToleranceGroup.ServiceExtendedAmountTolerance) 
					MessageType									= "C"
				else
				if  (LocalMatchMessageToleranceGroup.ServiceExtendedAmountCondition not entered
				and  LocalMatchMessageToleranceGroup.ServiceExtendedAmountPercent > 0
				and  MessageOverCtPercentDifference > LocalMatchMessageToleranceGroup.ServiceExtendedAmountPercent) 
					MessageType									= "C"

				if  (MessageType entered)
					MessageSubType									= "O"
					if  (EditMode)
					    WithinTolerance = false
					else
						include 4440CreateNewMainvmsg
			else
			if  (MessageExtendedDifference < 0
			and (Company.ServiceMessagingOption.OverOrUnderQuantityAndCost
			or   Company.ServiceMessagingOption.UnderQuantityAndCost))
				MessageExtendedDifference *= -1
				MessageOverCtPercentDifference *= -1

				if  (LocalMatchMessageToleranceGroup.ServiceExtendedAmountCondition.And
				and  MessageExtendedDifference   > LocalMatchMessageToleranceGroup.ServiceExtendedAmountTolerance
				and  MessageOverCtPercentDifference  > LocalMatchMessageToleranceGroup.ServiceExtendedAmountPercent) 
					MessageType									= "C"
				else
				if  (LocalMatchMessageToleranceGroup.ServiceExtendedAmountCondition.Or
				and (MessageExtendedDifference   > LocalMatchMessageToleranceGroup.ServiceExtendedAmountTolerance
				or   MessageOverCtPercentDifference  > LocalMatchMessageToleranceGroup.ServiceExtendedAmountPercent))
					MessageType									= "C"
				else
				if  (LocalMatchMessageToleranceGroup.ServiceExtendedAmountCondition not entered
				and  LocalMatchMessageToleranceGroup.ServiceExtendedAmountTolerance not entered
				and  LocalMatchMessageToleranceGroup.ServiceExtendedAmountPercent not entered)
					MessageType									= "C"
				else
				if  (LocalMatchMessageToleranceGroup.ServiceExtendedAmountCondition not entered
				and  LocalMatchMessageToleranceGroup.ServiceExtendedAmountTolerance > 0
				and  MessageExtendedDifference > LocalMatchMessageToleranceGroup.ServiceExtendedAmountTolerance) 
					MessageType									= "C"
				else
				if  (LocalMatchMessageToleranceGroup.ServiceExtendedAmountCondition not entered
				and  LocalMatchMessageToleranceGroup.ServiceExtendedAmountPercent > 0
				and  MessageOverCtPercentDifference > LocalMatchMessageToleranceGroup.ServiceExtendedAmountPercent) 
					MessageType									= "C"

				if  (MessageType entered)
					MessageSubType								= "U"
					if  (EditMode)
					    WithinTolerance = false
					else
						include 4440CreateNewMainvmsg

		4420CheckQtyTypeSrvcMsgTol


			if  ((Company.ServiceMessagingOption.OverQuantityAndCost
			or    Company.ServiceMessagingOption.OverOrUnderQuantityAndCost)
			and  (MessageUnitCostDifference > 0
			or    MessageQuantityDifference > 0))
				include 4420aCheckQtySrvcOvTol

			if  ((Company.ServiceMessagingOption.UnderQuantityAndCost
			or    Company.ServiceMessagingOption.OverOrUnderQuantityAndCost)
			and  (MessageUnitCostDifference < 0
			or    MessageQuantityDifference < 0))
				include 4420bCheckQtySrvcUnTol

		4420aCheckQtySrvcOvTol






			if  (MessageUnitCostDifference > 0)
			
				if  (CurrentContractLine entered
				and  CurrentContractLineRel exists
				and  MatchMessageToleranceRel exists)
					if  (CurrentContractLineRel.ServiceCode.Amount)     
						MessageExtendedDifference			= CurrentInvoiceDetailRel.EnteredUnitCost + CurrentContractLineRel.AmountOrdered - CurrentInvoiceDetailRel.MatchUnitCost   

				MessageOverUnitPercentDifference 			= CurrentInvoiceDetailRel.MatchUnitCost * LocalMatchMessageToleranceGroup.ServiceOverUnitCostTolerancePercent
	
				if  (LocalMatchMessageToleranceGroup.ServiceOverUnitCostCondition.And
				and  MessageUnitCostDifference     > LocalMatchMessageToleranceGroup.ServiceOverUnitCostToleranceAmount
				and  MessageUnitCostDifference     > MessageOverUnitPercentDifference) 
					MessageType									= "C"
				else
				if  (LocalMatchMessageToleranceGroup.ServiceOverUnitCostCondition.Or
				and (MessageUnitCostDifference    > LocalMatchMessageToleranceGroup.ServiceOverUnitCostToleranceAmount
				or   MessageUnitCostDifference    > MessageOverUnitPercentDifference)) 
					MessageType									= "C"
				else
				if  (LocalMatchMessageToleranceGroup.ServiceOverUnitCostCondition not entered
				and  LocalMatchMessageToleranceGroup.ServiceOverUnitCostToleranceAmount not entered
				and  LocalMatchMessageToleranceGroup.ServiceOverUnitCostTolerancePercent not entered)
					MessageType									= "C"
				else
				if  (LocalMatchMessageToleranceGroup.ServiceOverUnitCostCondition not entered
				and  LocalMatchMessageToleranceGroup.ServiceOverUnitCostToleranceAmount > 0
				and  MessageUnitCostDifference     > LocalMatchMessageToleranceGroup.ServiceOverUnitCostToleranceAmount)
					MessageType									= "C"
				else
				if  (LocalMatchMessageToleranceGroup.ServiceOverUnitCostCondition not entered
				and  LocalMatchMessageToleranceGroup.ServiceOverUnitCostTolerancePercent > 0
				and  MessageUnitCostDifference     > MessageOverUnitPercentDifference) 
					MessageType									= "C"

				if  (MessageType entered)
					MessageSubType									= "O"
					if  (EditMode)
					    WithinTolerance = false
					else
						include 4440CreateNewMainvmsg

			if  (MessageQuantityDifference > 0)

				if  (CurrentPayablesInvoiceRel.MatchProcessType.ServiceContract)
				    if  (CurrentContractLineRel.PerOrderMaximumQuantity entered
				    and  CurrentContractLineRel.PerOrderMaximumQuantity < (CurrentContractLineRel.LifetimeMaximumQuantity - CurrentContractLineRel.QuantityOrdered))
						MessageOverQuantityPercentDifference 			= ((CurrentContractLineRel.PerOrderMaximumQuantity - CurrentContractLineRel.QuantityOrdered) * LocalMatchMessageToleranceGroup.ServiceOverQuantityPercent)
					else
						MessageOverQuantityPercentDifference 			= ((CurrentContractLineRel.LifetimeMaximumQuantity - CurrentContractLineRel.QuantityOrdered) * LocalMatchMessageToleranceGroup.ServiceOverQuantityPercent)
		
				if  (LocalMatchMessageToleranceGroup.ServiceOverQuantityCondition.And
				and  MessageQuantityDifference    > LocalMatchMessageToleranceGroup.ServiceOverQuantityValue
				and  MessageQuantityDifference    > MessageOverQuantityPercentDifference) 
					MessageType									= "Q"
				else
				if  (LocalMatchMessageToleranceGroup.ServiceOverQuantityCondition.Or
				and (MessageQuantityDifference   > LocalMatchMessageToleranceGroup.ServiceOverQuantityValue
				or   MessageQuantityDifference   > MessageOverQuantityPercentDifference)) 
					MessageType									= "Q"
				else
				if  (LocalMatchMessageToleranceGroup.ServiceOverQuantityCondition not entered
				and  LocalMatchMessageToleranceGroup.ServiceOverQuantityValue not entered
				and  LocalMatchMessageToleranceGroup.ServiceOverQuantityPercent not entered)
					MessageType									= "Q"
				else
				if  (LocalMatchMessageToleranceGroup.ServiceOverQuantityCondition not entered
				and  LocalMatchMessageToleranceGroup.ServiceOverQuantityValue > 0
				and  MessageQuantityDifference    > LocalMatchMessageToleranceGroup.ServiceOverQuantityValue) 
					MessageType									= "Q"
				else
				if  (LocalMatchMessageToleranceGroup.ServiceOverQuantityCondition not entered
				and  LocalMatchMessageToleranceGroup.ServiceOverQuantityPercent > 0
				and  MessageQuantityDifference    > MessageOverQuantityPercentDifference) 
					MessageType									= "Q"

				if  (MessageType entered)
					MessageSubType									= "O"
					if  (EditMode)
					    WithinTolerance = false
					else
						include 4440CreateNewMainvmsg

		4420bCheckQtySrvcUnTol






			if  (MessageUnitCostDifference < 0)

				MessageUnitCostDifference 							*= -1
	
				if  (CurrentPayablesInvoiceRel.MatchProcessType.ServiceContract)
					MessageUnderUnitPercentDifference 				= (CurrentInvoiceDetailRel.MatchUnitCost * LocalMatchMessageToleranceGroup.ServiceUnderUnitCostTolerancePercent)
	

				if  (LocalMatchMessageToleranceGroup.ServiceUnderUnitCostCondition.And
				and  MessageUnitCostDifference     > LocalMatchMessageToleranceGroup.ServiceUnderUnitCostToleranceAmount
				and  MessageUnitCostDifference     > MessageUnderUnitPercentDifference)

					MessageType									= "C"
				else
				if  (LocalMatchMessageToleranceGroup.ServiceUnderUnitCostCondition.Or
				and (MessageUnitCostDifference    > LocalMatchMessageToleranceGroup.ServiceUnderUnitCostToleranceAmount
				or   MessageUnitCostDifference    > MessageUnderUnitPercentDifference)) 

					MessageType									= "C"
				else
				if  (LocalMatchMessageToleranceGroup.ServiceUnderUnitCostCondition not entered
				and  LocalMatchMessageToleranceGroup.ServiceUnderUnitCostToleranceAmount not entered
				and  LocalMatchMessageToleranceGroup.ServiceUnderUnitCostTolerancePercent not entered)

					MessageType									= "C"
				else
				if  (LocalMatchMessageToleranceGroup.ServiceUnderUnitCostCondition not entered
				and  LocalMatchMessageToleranceGroup.ServiceUnderUnitCostToleranceAmount > 0
				and  MessageUnitCostDifference     > LocalMatchMessageToleranceGroup.ServiceUnderUnitCostToleranceAmount) 

					MessageType									= "C"
				else
				if  (LocalMatchMessageToleranceGroup.ServiceUnderUnitCostCondition not entered
				and  LocalMatchMessageToleranceGroup.ServiceUnderUnitCostTolerancePercent > 0
				and  MessageUnitCostDifference     > MessageUnderUnitPercentDifference) 

					MessageType									= "C"
					
				if  (MessageType entered)
					MessageSubType									= "U"
					if  (EditMode)
					    WithinTolerance = false
					else
						include 4440CreateNewMainvmsg
					

			if  (MessageQuantityDifference < 0)

				MessageQuantityDifference 							*= -1


				if  (CurrentPayablesInvoiceRel.MatchProcessType.ServiceContract)
					MessageUnderQuantityPercentDifference 			= ((CurrentContractLineRel.LifetimeMaximumQuantity - CurrentContractLineRel.QuantityOrdered) * LocalMatchMessageToleranceGroup.ServiceUnderQuantityPercent)





				else
					MessageUnderQuantityPercentDifference			= MessageUnmatchedQuantity * LocalMatchMessageToleranceGroup.ServiceUnderQuantityPercent

	

	 			if  (LocalMatchMessageToleranceGroup.ServiceUnderQuantityCondition.And
	 			and  MessageQuantityDifference    > LocalMatchMessageToleranceGroup.ServiceUnderQuantityValue
	 			and  MessageQuantityDifference    > MessageUnderQuantityPercentDifference) 

					MessageType									= "Q"
				else
				if  (LocalMatchMessageToleranceGroup.ServiceUnderQuantityCondition.Or
				and (MessageQuantityDifference   > LocalMatchMessageToleranceGroup.ServiceUnderQuantityValue
				or   MessageQuantityDifference   > MessageUnderQuantityPercentDifference))


					MessageType									= "Q"
				else
				if  (LocalMatchMessageToleranceGroup.ServiceUnderQuantityCondition not entered
				and  LocalMatchMessageToleranceGroup.ServiceUnderQuantityValue not entered
				and  LocalMatchMessageToleranceGroup.ServiceUnderQuantityPercent not entered)

					MessageType									= "Q"
				else
				if  (LocalMatchMessageToleranceGroup.ServiceUnderQuantityCondition not entered
				and  LocalMatchMessageToleranceGroup.ServiceUnderQuantityValue > 0
				and  MessageQuantityDifference    > LocalMatchMessageToleranceGroup.ServiceUnderQuantityValue) 

					MessageType									= "Q"
				else
				if  (LocalMatchMessageToleranceGroup.ServiceUnderQuantityCondition not entered
				and  LocalMatchMessageToleranceGroup.ServiceUnderQuantityPercent > 0
				and  MessageQuantityDifference    > MessageUnderQuantityPercentDifference) 

					MessageType									= "Q"

				if  (MessageType entered)
					MessageSubType									= "U"
					if  (EditMode)
					    WithinTolerance = false
					else
						include 4440CreateNewMainvmsg

		4440CreateNewMainvmsg


			invoke Create MatchInvoiceMessage
				fill in fields from CurrentInvoiceDetailRel.PayablesInvoiceDetail
				      
				invoked.DueDate										= PayablesInvoice.DueDate
				invoked.MatchMessageOrigin							= 4
				invoked.Priority									= 2
				invoked.MatchObjectID								= OutMatchObjectID
				invoked.DiscountDate								= CurrentPayablesInvoiceRel.DiscountDate
				invoked.Location									= CurrentPayablesInvoiceDetailRel.Location
				invoked.ReasonCode									= MessageReasonCode
	   	        invoked.MessageType									= MessageType
		        invoked.MessageSubType								= MessageSubType
		        invoked.Status										= 1
				if  (PayablesInvoice.MatchProcessType.ServiceContract		
				and CreateMatchReconMessage)	
					if (CurrentInvoiceDetailRel.CreateChargeback)
						invoked.ApplicationAction					= 2 
						invoked.ReasonCode							= CurrentInvoiceDetailRel.ChargebackReason
						invoked.Status								= 9
					else
						invoked.Status								= 1
      
				if  (PayablesInvoice.MatchProcessType.ServiceContract)
					invoked.Buyer									= CurrentPayablesInvoiceDetailRel.Contract.Buyer
					invoked.AuthorityCodeEmailAddress				= CurrentPayablesInvoiceDetailRel.Contract.Buyer.EmailAddress
				else
				if  (CurrentPurchaseOrderRel.Buyer entered
				and  !PayablesInvoice.MatchProcessType.DropShip
				and  !PayablesInvoice.MatchProcessType.Service)
					invoked.Buyer									= CurrentPurchaseOrderRel.Buyer
					invoked.AuthorityCodeEmailAddress				= CurrentPurchaseOrderRel.Buyer.EmailAddress
				else
					invoked.Buyer									= CurrentPurchaseOrderLineRel.Buyer
					invoked.AuthorityCodeEmailAddress				= CurrentPurchaseOrderLineRel.Buyer.EmailAddress


			invoke FastUpdate CurrentWorkInvoiceRel
				invoked.Approved									= "M"
				
			initialize MessageType
      

		717BuildCbDetailsService 



			invoke MemoCreate PayablesInvoiceDetail
				assign result to NewInvoiceDetail
				fill in fields from each
					except invoked.PayablesInvoice
					except invoked.PayablesInvoiceDetail
					except invoked.TotalDistributionAmount
					except invoked.TotalBaseAmount
					except invoked.InvoicedTaxAmount
					except invoked.AccruedTaxAmount
					except invoked.MatchedQuantity
					except invoked.MatchUnitCost
					except invoked.EnteredUnitCost
					except invoked.TaxAmount
				invoked.PayablesInvoice			= ChargebackInvoice
				invoked.ReasonCode				= ChargebackInvoiceView.ReasonCode
				invoked.EnteredQuantity			= ServiceLineChargebackQuantity
				invoked.MatchedQuantity			= ServiceLineChargebackQuantity
				invoked.MatchUnitCost			= ServiceLineChargebackUnitCost
				invoked.EnteredUnitCost			= ServiceLineChargebackUnitCost
				invoked.TaxCode					= each.TaxCode
				invoked.Status 					= 1
				invoked.MatchObjectID			= MatchWork.OutMatchObjectID
				invoked.RecordSource			= "MA"
				invoked.MatchUpdateDate			= current corporate date
				invoked.TransientOriginalDetail = each.PayablesInvoiceDetail
				invoked.ChargebackFromRecon		= true
			
			if (POGeneralLedgerSystemCodeRel.EncumbranceOption.TrackAndEdit
			or  POGeneralLedgerSystemCodeRel.EncumbranceOption.Track)
				invoke CheckCommitmentChargeback each.PayablesInvoiceDetail
				



		718BuildCbTaxService 
			NextSentence = true

































































		717BuildCbDetailsServiceAoc 

			invoke MemoCreate PayablesInvoiceAddOnCharge
				fill in fields from each 
					except invoked.PayablesInvoice
					except invoked.PayablesInvoiceAddOnCharge
					except invoked.AddOnChargeAmount
					except invoked.TotalAddOnChargeAmount
				invoked.PayablesInvoice					= ChargebackInvoice
				invoked.ReasonCode						= ChargebackInvoiceView.ReasonCode
				invoked.MatchedQuantity					= each.MatchedQuantity * -1
				invoked.MatchUnitCost					= each.MatchUnitCost
				invoked.EnteredQuantity					= each.EnteredQuantity * -1
				invoked.EnteredUnitCost					= each.EnteredUnitCost
				invoked.TaxAmount						= each.TaxAmount * -1
				invoked.TaxCode							= each.TaxCode
				invoked.Status 							= 1
				invoked.MatchObjectID					= MatchWork.OutMatchObjectID
				invoked.RecordSource					= "MA"

		733TolAccount


			if  (MatchLevel.InvoiceMatch
			and  Difference3Amount < 0
			and !DetailsInvoiceType.CreditMemo
			and  DistributionProcessLevelRel.UnderbillAccount entered)

				WorkToleranceAccount				= DistributionProcessLevelRel.UnderbillAccount
			else
			if  (MatchLevel.InvoiceMatch
			and  Difference3Amount < 0
			and !DetailsInvoiceType.CreditMemo
			and  Company.UnderbillAccount entered)

				WorkToleranceAccount				= Company.UnderbillAccount
			else
			if  (PayablesInvoice.InvoiceType.MatchPrepayment)

				if  (PayablesInvoice.ProcessLevel.PrepayAccount entered)
					WorkToleranceAccount				= PayablesInvoice.ProcessLevel.PrepayAccount
				else
					WorkToleranceAccount				= Company.PrepayAccount
			else
			if  (DistributionProcessLevelRel.ToleranceOffsetAccount entered)
				WorkToleranceAccount				= DistributionProcessLevelRel.ToleranceOffsetAccount
			else
				WorkToleranceAccount				= Company.ToleranceOffsetAccount


		
		985InvoiceMatchTol


			if  (WorkDistributionGroup.Amount entered)





				if  (WorkDistributionGroup.Account not entered)
					WorkDistributionGroup.Account = WorkToleranceAccount 
					
				WorkDistributionGroup.FinanceEnterpriseGroup 		= Company.FinanceEnterpriseGroup
				WorkDistributionGroup.Company						= Company
				WorkDistributionGroup.Invoice 						= CurrentPayablesInvoice
				WorkDistributionGroup.PurchaseOrder					= CurrentPurchaseOrder
				
				initialize WorkDistributionGroup.PurchaseOrderLine
				initialize WorkDistributionGroup.AddOnCharge
				initialize WorkDistributionGroup.TaxType

				initialize WorkDistributionGroup.UnitAmount
				initialize WorkDistributionGroup.Asset
				initialize WorkDistributionGroup.AssetTemplate
				initialize WorkDistributionGroup.PayablesInvoiceDetail

				if  (CurrentPurchaseOrderRel.CurrencyExchangeSetPoint.Receiving)
					WorkDistributionGroup.CurrencyRate				= WorkReceiptConversionRate
				else
					WorkDistributionGroup.CurrencyRate				= InvoiceCurrencyExchangeRate
					 
				WorkDistributionGroup.ItemType						= DetailsItemType 
				initialize WorkDistributionGroup.MatchedQuantity
				
				invoke CreateDistribution
					invoked.PrmWorkDistributionGroup		= WorkDistributionGroup

				if  (Company.SummarizeDistribution.DoNotSummarize
				or   PayablesInvoice.RetainageAccrualCode entered)
       		        if (DetailsAddOnCharge entered)
						WorkDistributionGroup.Description			= CurrentAddOnChargeRel.Description
					else
						WorkDistributionGroup.Description			= DetailsItem
				else
					initialize WorkDistributionGroup.Description
	
				initialize WorkAccrualCode
				

				if  (DetailsAddOnCharge entered)
					increment CurrentWorkInvoiceRel.TotalAddOnChargeDistributionAmount	by WorkDistributionGroup.Amount
				else
					increment CurrentWorkInvoiceRel.TotalMatchDistributionAmount		by WorkDistributionGroup.Amount

				if  (TaxDifference entered)
					invoke FastUpdate CurrentWorkInvoiceRel 
						invoked.TotalTaxAmount						+= TaxDifference
					TaxOutOfBalance									= false


				if  (ThisMatchWorkInvoiceRel.Chargeback
				and  Difference4Amount entered)

					initialize WorkDistributionGroup.AddOnCharge
					initialize WorkDistributionGroup.TaxCode
					initialize WorkDistributionGroup.TaxableAmount
					if  (WorkDistributionGroup.Amount entered)

						
						if  (WorkDistributionGroup.Amount entered)
			
							WorkDistributionGroup.Amount						*= -1
				



			
							ChargebackDetailSequenceNumber										+= 1
							LocalMatchSequence													+= 1
			
							initialize DetailsTaxCode
							initialize DetailsProductTaxCategory
							DetailsInvoice														= ChargebackInvoice
							DetailsInvoiceType													= "C"
			
							if  (DetailsAddOnCharge entered)
								invoke MemoCreate PayablesInvoiceAddOnCharge
									invoked.Company												= Company
									invoked.PayablesInvoice										= ChargebackInvoice
									invoked.AddOnCharge											= DetailsAddOnCharge
									invoked.RecordSource										= "MA"
									invoked.Status												= 1
									invoked.MatchObjectID										= OutMatchObjectID
									invoked.MatchSequence										= LocalMatchSequence
									invoked.PurchaseOrder										= PurchaseOrder
									invoked.Location											= CurrentPayablesInvoiceRel.Location
									invoked.EnteredUnitCost										= Difference4Amount
									invoked.EnteredQuantity										= 1
									invoked.Taxable												= false
									invoked.DistributionDate									= CurrentPayablesInvoiceRel.DistributionDate
									invoked.MatchedQuantity										= 1
									invoked.MatchUnitCost										= Difference4Amount
									invoked.RecordSource										= "MA"
							else

								invoke MemoCreate PayablesInvoiceDetail
									invoked.Company												= Company
									invoked.PayablesInvoice										= ChargebackInvoice
									invoked.RecordSource										= "MA"
									invoked.Status												= 1
									invoked.MatchObjectID										= OutMatchObjectID
									invoked.MatchSequence										= LocalMatchSequence
									invoked.PurchaseOrder										= PurchaseOrder
									invoked.Location											= CurrentPayablesInvoiceRel.Location
									invoked.EnteredUnitCost										= Difference4Amount
									invoked.EnteredQuantity										= 1
									invoked.InvoiceLineTaxable									= false
									invoked.DistributionDate									= CurrentPayablesInvoiceRel.DistributionDate
									invoked.BuyUOMMatchedQuantity								= 1
									invoked.EnteredUOMMultiplier								= 1
									invoked.MatchedQuantity										= 1
									invoked.MatchUnitCost										= Difference4Amount
									invoked.BuyUOMMatchedQuantity								= 1
									invoked.RecordSource										= "MA"
			
							if  (WorkDistributionGroup.Account not entered)
								WorkDistributionGroup.Account = WorkToleranceAccount 
			
							PayablesChargebackIndicator											= true
							WorkDistributionGroup.PurchaseOrder					= CurrentPurchaseOrder
			
							if  (Company.SummarizeDistribution.DoNotSummarize
							or   PayablesInvoice.RetainageAccrualCode entered)
			       		        if (DetailsAddOnCharge entered)
									WorkDistributionGroup.Description			= CurrentAddOnChargeRel.Description
								else
									WorkDistributionGroup.Description			= DetailsItem
							else
								initialize WorkDistributionGroup.Description
			
							initialize WorkDistributionGroup.PurchaseOrderLine
							initialize WorkDistributionGroup.AddOnCharge
							initialize WorkDistributionGroup.TaxableAmount
							initialize WorkDistributionGroup.TaxCode
							initialize WorkDistributionGroup.TaxType
							initialize WorkDistributionGroup.Asset
							initialize WorkDistributionGroup.AssetTemplate
							initialize WorkDistributionGroup.UnitAmount
							initialize WorkDistributionGroup.MatchedQuantity
							WorkDistributionGroup.Invoice = ChargebackInvoice
							invoke CreateDistribution
								invoked.PrmWorkDistributionGroup		= WorkDistributionGroup
							
							initialize WorkAccrualCode
							
			
							if  (CurrentPayablesInvoiceRel.TaxCode entered)

								
								if  (CurrentPayablesInvoiceRel.TaxCode entered
								and  PurchaseOrderInvoiceTax entered)
									initialize CalculateTax
									CalculateTax.Function			 			= CalculateTax.Function.CalculateTax
									CalculateTax.InvoiceAmount					= PurchaseOrderInvoiceTax
									CalculateTax.TaxEntity 						= Company.AccountingEntity	
									CalculateTax.TaxCode 						= CurrentPayablesInvoiceRel.TaxCode
									CalculateTax.InvoiceDate					= CurrentPayablesInvoiceRel.InvoiceDate
									CalculateTax.PaymentDate 					= CurrentPayablesInvoiceRel.InvoiceDate
									CalculateTax.ShipmentDate 					= CurrentPayablesInvoiceRel.InvoiceDate
									CalculateTax.GeneralLedgerDate 				= CurrentPayablesInvoiceRel.InvoiceDate
									CalculateTax.TaxDate						= CurrentPayablesInvoiceRel.InvoiceDate
									CalculateTax.PostalAddress					= InventoryLocationRel.PostalAddress
									if  (PayablesInvoice.VendorLocationRel exists)
										CalculateTax.FromPostalAddress			= PayablesInvoice.VendorLocationRel.CurrentAddressRel.PostalAddress
									else
										CalculateTax.FromPostalAddress			= Vendor.first VendorLocationRel.CurrentAddressRel.PostalAddress
									CalculateTax.System							= "AP"
									CalculateTax.BaseCurrency					= Company.Currency
									CalculateTax.Location						= DetailsLocation
					      
									if  (DetailsItemType.Inventoried
									or   DetailsItemType.NonStock)
										CalculateTax.ProductTaxCategory 		= DetailsProductTaxCategory

									if  (PayablesInvoice.TaxEntityUsesThirdPartyTax)
										CalculateTax.InputReturnVertexTaxIn		= "D"	
					
									LocalCalculateTaxExecuted					= CalculateTax.ExecuteCalculateTax
									
									MtxMatchedQuantity							= DetailsMatchedQuantity
									MtxMatchUnitCost							= DetailsMatchUnitCost
									MtxTotalTaxAmt								= CalculateTax.TaxAmount
									MtxTaxableAmount							= CalculateTax.TaxableAmount

						 
								if  (Difference4Amount entered)
									TaxTolerance								= true
									WorkPostingSwitch							= 3
					
								include 991CreateTaxDistrib
								
								initialize WorkAccrualCode

		991CreateTaxDistrib  


			if  (DetailsItemType.Inventoried)
				if  (WorkPostingSwitch.MatchNotReceived)
					if  (DistributionProcessLevelRel.MatchedNotReceivedAccount entered)
						LocalDefaultAccount									= DistributionProcessLevelRel.MatchedNotReceivedAccount
					else
						LocalDefaultAccount									= Company.MatchedNotReceivedAccount
				else
				if  (WorkPostingSwitch.Writeoff)
					if  (DistributionProcessLevelRel.MatchWriteOffAccount entered)
						LocalDefaultAccount									= DistributionProcessLevelRel.MatchWriteOffAccount
					else
						LocalDefaultAccount									= Company.MatchWriteOffAccount
				else
				if  (WorkPostingSwitch.TaxVariance)
					if  (DistributionProcessLevelRel.CostVarianceAccount entered)
						LocalDefaultAccount									= DistributionProcessLevelRel.CostVarianceAccount
					else
						LocalDefaultAccount									= Company.CostVarianceAccount
				else
				if  (WorkPostingSwitch.TaxTolerance)
					if  (MatchLevel.InvoiceMatch
					and  Difference3Amount < 0
					and !DetailsInvoiceType.CreditMemo
					and  DistributionProcessLevelRel.UnderbillAccount entered)
						LocalDefaultAccount									= DistributionProcessLevelRel.UnderbillAccount
					else
					if  (MatchLevel.InvoiceMatch
					and  Difference3Amount < 0
					and !DetailsInvoiceType.CreditMemo
					and  Company.UnderbillAccount entered)
						LocalDefaultAccount									= Company.UnderbillAccount
					else
					if  (PayablesInvoice.ProcessLevel.PrepayAccount entered)
						LocalDefaultAccount									= PayablesInvoice.ProcessLevel.PrepayAccount
					else
					if  (PayablesInvoice.InvoiceType.MatchPrepayment)
						LocalDefaultAccount									= Company.PrepayAccount
					else
					if  (DistributionProcessLevelRel.ToleranceOffsetAccount entered)
						LocalDefaultAccount									= DistributionProcessLevelRel.ToleranceOffsetAccount
					else
						LocalDefaultAccount									= Company.ToleranceOffsetAccount
				else
				if  (WorkPostingSwitch.TaxWriteoff)
					if  (DistributionProcessLevelRel.UnderbillAccount entered)
						LocalDefaultAccount									= DistributionProcessLevelRel.UnderbillAccount
					else
					if  (Company.UnderbillAccount entered)
						LocalDefaultAccount									= Company.UnderbillAccount
					else
					if  (DistributionProcessLevelRel.InventoryReceiptArchivalAccount entered)
						LocalDefaultAccount									= DistributionProcessLevelRel.InventoryReceiptArchivalAccount
					else
						LocalDefaultAccount									= Company.InventoryReceiptArchivalAccount

				else
					if  (DistributionProcessLevelRel.ReceiptAccrualAccount entered)
						LocalDefaultAccount									= DistributionProcessLevelRel.ReceiptAccrualAccount
					else
						LocalDefaultAccount									= Company.ReceiptAccrualAccount


			if  (PayablesInvoice.RetainageAccrualCode entered)
				if  (CurrentAddOnCharge entered)
					if  (CurrentInvoiceAddOnChargeRel.LineDistributionHasAmount)
						LocalRetainagePercent								= CurrentInvoiceAddOnChargeRel.RetainagePercent
				else
				if  (CurrentAddOnCharge not entered
				or   DistributionByAmount)
					if  (CurrentInvoiceDetailRel.LineDistributionHasAmount)
						LocalRetainagePercent								= CurrentInvoiceDetailRel.RetainagePercent

						
						initialize DistributionDetailMatchAmount
						
						if  ((MatchLevel.DetailMatch
						or    ProcessMode.Reconciliation)
						and  (!DetailsItemType.Inventoried))
							if  (CurrentContractLine entered)
								if  (first InvoiceDistributionsForContractLineRel exists)
									DistributionDetailMatchAmount						= sum InvoiceDistributionsForContractLineRel.DistributionAmount
								else
									DistributionDetailMatchAmount						= sum CurrentContractLineDistributionRel.DistributionAmount
									SkipPostings										= true
							else	
								if  (first InvoiceDistributionsForPurchaseOrderLineRel exists)
									DistributionDetailMatchAmount						= sum InvoiceDistributionsForPurchaseOrderLineRel.DistributionAmount
								else
									DistributionDetailMatchAmount						= sum PurchaseOrderLineDistributionRel.DistributionAmount
									SkipPostings										= true












			I9 = 1
			while (I9 <= 8
			and    CalculateTax.TaxTable.TaxTableOutput[I9].TaxCode entered)
				include 5000MataxDistribs
				I9 += 1
                                      

		5000MataxDistribs  

			





			
			if  (CalculateTax.TaxTable.TaxTableOutput[I9].LandCostFlag)

	
				if  (MatchLevel.InvoiceMatch)
					if  (Difference4Amount entered
					or  TaxTolerance)
						if  (DistributionProcessLevelRel.ToleranceOffsetAccount entered)
							WorkDistributionGroup.Account				= DistributionProcessLevelRel.ToleranceOffsetAccount
						else
							WorkDistributionGroup.Account				= Company.ToleranceOffsetAccount
				else
				if  (CurrentAddOnCharge entered
				and  CurrentInvoiceDetail not entered)
					if  (!PurchaseOrderLineDistributionRel exists
					and  !CurrentContractLineDistributionRel exists)
						if  (CurrentPayablesInvoiceRel.BypassMatch)
							if  (CalculateTax.TaxTable.TaxTableOutput[I9].TaxPoint = "P")
								WorkDistributionGroup.Account				= CalculateTax.TaxTable.TaxTableOutput[I9].TaxInputDueAccount
							else
								WorkDistributionGroup.Account				= CalculateTax.TaxTable.TaxTableOutput[I9].TaxInputAccount
	                	else
							if  (CurrentAddOnChargeRel.SpreadMethod.NoSpread
							or   CurrentAddOnChargeRel.AddOnChargeDifferenceAccount not entered)
								WorkDistributionGroup.Account				= CurrentAddOnChargeRel.PostingAccount 
							else
								WorkDistributionGroup.Account				= CurrentAddOnChargeRel.AddOnChargeDifferenceAccount 
	
				else
				if  (!DetailsItemType.Inventoried
				and  CurrentAddOnCharge entered
				and  CurrentInvoiceDetail entered)
					if  (((DetailsRecordSource.LineMatchMa43 or DetailsRecordSource.CreatedWithinMatch or DetailsRecordSource.GeneratedByAocSpread)
					and  !PurchaseOrderLineDistributionLocationRel exists
					and  !CurrentContractLineDistributionRel exists)
					or  (!PurchaseOrderLineDistributionRel exists
					and  !CurrentContractLineDistributionRel exists))
						if  (DistributionProcessLevelRel.ToleranceOffsetAccount entered)
							WorkDistributionGroup.Account				= DistributionProcessLevelRel.ToleranceOffsetAccount
						else
							WorkDistributionGroup.Account				= Company.ToleranceOffsetAccount
				else
				if  (DetailsItemType.Inventoried)
					if  (LocalDefaultAccount entered)
						WorkDistributionGroup.Account 					= LocalDefaultAccount
					else
					if  (DistributionProcessLevelRel.ReceiptAccrualAccount entered)
						WorkDistributionGroup.Account					= DistributionProcessLevelRel.ReceiptAccrualAccount
					else
						WorkDistributionGroup.Account					= Company.ReceiptAccrualAccount
					
				else
					if  (!PurchaseOrderLineDistributionRel exists
					and  !CurrentContractLineDistributionRel exists)
						if  (PayablesInvoice.MatchProcessType.ServiceContract
						and  CurrentContractLineDistributionRel.DistributionAccount entered)
							WorkDistributionGroup.Account				= first CurrentContractLineDistributionRel.DistributionAccount 
						else
							if  (CalculateTax.TaxTable.TaxTableOutput[I9].TaxPoint = "P")
								WorkDistributionGroup.Account			= CalculateTax.TaxTable.TaxTableOutput[I9].TaxInputDueAccount
							else
								WorkDistributionGroup.Account			= CalculateTax.TaxTable.TaxTableOutput[I9].TaxInputAccount


				
			else

				if  (CalculateTax.TaxTable.TaxTableOutput[I9].TaxPoint = "P")
					WorkDistributionGroup.Account				= CalculateTax.TaxTable.TaxTableOutput[I9].TaxInputDueAccount
				else
					WorkDistributionGroup.Account				= CalculateTax.TaxTable.TaxTableOutput[I9].TaxInputAccount
		      


			


			WorkDistributionGroup.FinanceEnterpriseGroup 	= Company.FinanceEnterpriseGroup
			WorkDistributionGroup.Company					= Company
			WorkDistributionGroup.Invoice 					= CurrentPayablesInvoice
			WorkDistributionGroup.PurchaseOrder				= CurrentPurchaseOrder
			WorkDistributionGroup.PurchaseOrderLine			= CurrentPurchaseOrderLine
			WorkDistributionGroup.PayablesInvoiceDetail		= CurrentInvoiceDetail
			WorkDistributionGroup.AddOnCharge				= DetailsAddOnCharge

			initialize WorkDistributionGroup.Amount
			initialize WorkDistributionGroup.TaxableAmount
			initialize WorkDistributionGroup.UnitAmount
			initialize WorkDistributionGroup.ItemTaxTransaction
			
			WorkDistributionGroup.TaxCode					= CalculateTax.TaxTable.TaxTableOutput[I9].TaxCode
			WorkDistributionGroup.TaxType					= CalculateTax.TaxTable.TaxTableOutput[I9].AccrualFlag

			WorkDistributionGroup.TaxRate					= CalculateTax.TaxTable.TaxTableOutput[I9].TaxRate
			WorkDistributionGroup.ProductTaxCategory		= CalculateTax.ProductTaxCategory

			WorkDistributionGroup.UnitAmount				= WorkDistributionGroup.MatchedQuantity
			WorkDistributionGroup.ItemType					= DetailsItemType
			WorkDistributionGroup.MatchedQuantity			= WorkDistributionGroup.MatchedQuantity
			WorkDistributionGroup.UnitAmount				= WorkDistributionGroup.MatchedQuantity









      





       
			if  (CalculateTax.TaxTable.TaxTableOutput[I9].LandCostFlag)

				WorkDistributionGroup.RetainageLanded	= true
			else

				WorkDistributionGroup.RetainageLanded	= false


     		
     		if  (DetailsItemType.Service)
     			initialize WorkDistributionGroup.LandedCost

       




















			WorkDistributionGroup.MatchedQuantity						= MtxMatchedQuantity
      


			if  (CurrentPurchaseOrderLineRel exists)
				WorkDistributionGroup.Description						= CurrentPurchaseOrderLineRel.Description 

			if  (Company.SummarizeDistribution.DoNotSummarize
			and  WorkDistributionGroup.TaxCode entered)
				WorkDistributionGroup.Description						= LocalTaxCode.Description 

			if  ((CurrentPurchaseOrderLine entered
			and   InvoiceDistributionsForPurchaseOrderLineRel exists)
			or   (PayablesInvoice.MatchProcessType.ServiceContract
			and   CurrentContractLine entered
			and   InvoiceDistributionsForContractLineRel exists)
			or   (PurchaseOrderLineDistributionRel exists))

	
				initialize FirstDistQuantity
				SaveUnmatchedQuantity 										= MtxMatchedQuantity
				PreviousQuantity 											= MtxPrevMatchQty
				DetailDistAmount 											= CalculateTax.TaxTable.TaxTableOutput[I9].TaxAmount
				
				if (CurrentPurchaseOrderLine entered
				and InvoiceDistributionsForPurchaseOrderLineRel exists)
					for each InvoiceDistributionsForPurchaseOrderLineRel

						if  (each.AddOnCharge not entered
						or   each.AddOnCharge = PotxwsAddOnCharge)
							initialize WorkDistributionGroup.LandedCost

						RemainingDistAmount									= DetailDistAmount

						
						WorkPercent											= ((each.DistributionAmount.CurrencyAmount * 100) / DistributionDetailMatchAmount)
			
						WorkDistributionGroup.Amount						= DetailDistAmount * (WorkPercent)
						WorkDistributionGroup.TaxableAmount					= CalculateTax.TaxableAmount * (WorkPercent)


						
						if  (WorkDistributionGroup.Amount entered)
							if  (!DetailsItemType.Inventoried
							and  WorkVarianceQuantity > 0)
								initialize WorkDistributionGroup.UnitAmount
							else
							if  (MNRDistrib)
								WorkDistributionGroup.UnitAmount			= DetailsMatchedQuantity
							else
								WorkDistributionGroup.UnitAmount			= WorkDistributionGroup.MatchedQuantity * (WorkPercent) 
			
							if  (WorkPercent = 100%)
								WorkDistributionGroup.ItemQuantity			= CurrentPurchaseOrderLineRel.Quantity
							else
								WorkDistributionGroup.ItemQuantity			= WorkDistributionGroup.MatchedQuantity * (WorkPercent)
								
							RemainingDistAmount  							-= WorkDistributionGroup.Amount
			
							if  (each.AddOnCharge not entered
							or   each.AddOnCharge = PotxwsAddOnCharge)
								WorkDistributionGroup.AddOnCharge			= each.AddOnCharge
								WorkDistributionGroup.Account				= each.DistributionAccount
								WorkDistributionGroup.Asset					= each.AssetDetailRel.Asset
								WorkDistributionGroup.AssetTemplate			= each.AssetDetailRel.AssetTemplate
			
							invoke CreateDistribution
								invoked.PrmWorkDistributionGroup			= WorkDistributionGroup
						


						if  (RemainingDistAmount <= 0)
							end for each

					if  (RemainingDistAmount entered)

						initialize WorkDistributionGroup.TaxableAmount
						initialize WorkDistributionGroup.UnitAmount
						initialize WorkDistributionGroup.ItemQuantity
						WorkDistributionGroup.Amount						= RemainingDistAmount
						invoke CreateDistribution
							invoked.PrmWorkDistributionGroup				= WorkDistributionGroup
				else
				if  (PayablesInvoice.MatchProcessType.ServiceContract
				and  CurrentContractLine entered
				and  InvoiceDistributionsForContractLineRel exists)
					for each InvoiceDistributionsForContractLineRel

						if  (each.AddOnCharge not entered
						or   each.AddOnCharge = PotxwsAddOnCharge)
							initialize WorkDistributionGroup.LandedCost

						RemainingDistAmount									= DetailDistAmount

						
						WorkPercent											= ((each.DistributionAmount.CurrencyAmount * 100) / DistributionDetailMatchAmount)
			
						WorkDistributionGroup.Amount						= DetailDistAmount * (WorkPercent)
						WorkDistributionGroup.TaxableAmount					= CalculateTax.TaxableAmount * (WorkPercent)


						
						if  (WorkDistributionGroup.Amount entered)
							if  (!DetailsItemType.Inventoried
							and  WorkVarianceQuantity > 0)
								initialize WorkDistributionGroup.UnitAmount
							else
							if  (MNRDistrib)
								WorkDistributionGroup.UnitAmount			= DetailsMatchedQuantity
							else
								WorkDistributionGroup.UnitAmount			= WorkDistributionGroup.MatchedQuantity * (WorkPercent) 
			
							if  (WorkPercent = 100%)
								WorkDistributionGroup.ItemQuantity			= CurrentPurchaseOrderLineRel.Quantity
							else
								WorkDistributionGroup.ItemQuantity			= WorkDistributionGroup.MatchedQuantity * (WorkPercent)
								
							RemainingDistAmount  							-= WorkDistributionGroup.Amount
			
							if  (each.AddOnCharge not entered
							or   each.AddOnCharge = PotxwsAddOnCharge)
								WorkDistributionGroup.AddOnCharge			= each.AddOnCharge
								WorkDistributionGroup.Account				= each.DistributionAccount
								WorkDistributionGroup.Asset					= each.AssetDetailRel.Asset
								WorkDistributionGroup.AssetTemplate			= each.AssetDetailRel.AssetTemplate
			
							invoke CreateDistribution
								invoked.PrmWorkDistributionGroup			= WorkDistributionGroup
						


						if  (RemainingDistAmount <= 0)
							end for each

					if  (RemainingDistAmount entered)

						initialize WorkDistributionGroup.TaxableAmount
						initialize WorkDistributionGroup.UnitAmount
						initialize WorkDistributionGroup.ItemQuantity
						WorkDistributionGroup.Amount						= RemainingDistAmount
						invoke CreateDistribution
							invoked.PrmWorkDistributionGroup				= WorkDistributionGroup
				else
				if  (PurchaseOrderLineDistributionRel exists)
					if  (first PurchaseOrderLineDistributionRel.DistributionPercent entered
					or  first PurchaseOrderLineDistributionRel.DistributionQuantity entered)
						for each PurchaseOrderLineDistributionRel

				
							if  (each.AddOnCharge not entered
							or   each.AddOnCharge = PotxwsAddOnCharge)      
				
								WorkDistributionGroup.AddOnCharge			= each.AddOnCharge
								WorkDistributionGroup.Account				= each.DistributionAccount
								WorkDistributionGroup.Asset					= each.AssetInformation.Asset
								WorkDistributionGroup.AssetTemplate			= each.AssetInformation.AssetTemplate
								WorkDistributionGroup.OriginalDistribution	= each.PurchaseOrderLineDistribution
				
								initialize WorkDistributionGroup.ItemQuantity
				
								if  (each.DistributionPercent entered)
									WorkDistributionGroup.Amount			= (CalculateTax.TaxTable.TaxTableOutput[I9].TaxAmount * each.DistributionPercent)
									WorkDistributionGroup.TaxableAmount		= (CalculateTax.TaxableAmount *  each.DistributionPercent)
									WorkDistributionGroup.ItemQuantity		= SaveUnmatchedQuantity * (each.DistributionPercent)
								else
									WorkDistQuantity						= each.DistributionQuantity
									if  (FirstDistQuantity entered)
										WorkDistQuantity					= FirstDistQuantity
										initialize FirstDistQuantity
										
									if  (WorkDistQuantity > SaveUnmatchedQuantity)
										WorkDistQuantity					= SaveUnmatchedQuantity
					
									SaveUnmatchedQuantity					-= WorkDistQuantity
					
									if  (WorkDistributionGroup.LandedCost
									and  WorkDistributionGroup.AssetTemplate entered)
										WorkDistributionGroup.ItemQuantity	= each.DistributionQuantity
					
									WorkDistributionGroup.Amount			= ((WorkDistQuantity / DetailsMatchedQuantity) * CalculateTax.TaxTable.TaxTableOutput[I9].TaxAmount)
									WorkDistributionGroup.TaxableAmount		= ((WorkDistQuantity / DetailsMatchedQuantity) * CalculateTax.TaxableAmount)
									
								invoke CreateDistribution
									invoked.PrmWorkDistributionGroup		= WorkDistributionGroup

					else

						for each PurchaseOrderLineDistributionRel
	
							if  (each.AddOnCharge not entered
							or   each.AddOnCharge = PotxwsAddOnCharge)
								initialize WorkDistributionGroup.LandedCost
	
							RemainingDistAmount								= DetailDistAmount
	
							
							WorkPercent										= (each.DistributionAmount/each.PurchaseOrderLine.ExtendedAmount)
				
							WorkDistributionGroup.Amount					= DetailDistAmount * (WorkPercent)
							WorkDistributionGroup.TaxableAmount				= CalculateTax.TaxableAmount * (WorkPercent)
							WorkDistributionGroup.OriginalDistribution		= each.PurchaseOrderLineDistribution

							
							if  (WorkDistributionGroup.Amount entered)
								if  (!DetailsItemType.Inventoried
								and  WorkVarianceQuantity > 0)
									initialize WorkDistributionGroup.UnitAmount
								else
								if  (MNRDistrib)
									WorkDistributionGroup.UnitAmount		= DetailsMatchedQuantity
								else
									WorkDistributionGroup.UnitAmount		= WorkDistributionGroup.MatchedQuantity * (WorkPercent) 
				
								if  (WorkPercent = 100%)
									WorkDistributionGroup.ItemQuantity		= CurrentPurchaseOrderLineRel.Quantity
								else
									WorkDistributionGroup.ItemQuantity		= WorkDistributionGroup.MatchedQuantity * (WorkPercent)
									
								RemainingDistAmount  						-= WorkDistributionGroup.Amount
				
								if  (each.AddOnCharge not entered
								or   each.AddOnCharge = PotxwsAddOnCharge)
									WorkDistributionGroup.AddOnCharge		= each.AddOnCharge
									WorkDistributionGroup.Account			= each.DistributionAccount
									WorkDistributionGroup.Asset				= each.AssetInformation.Asset
									WorkDistributionGroup.AssetTemplate		= each.AssetInformation.AssetTemplate
				
								invoke CreateDistribution
									invoked.PrmWorkDistributionGroup		= WorkDistributionGroup
							



								
							if  (RemainingDistAmount <= 0)
								end for each
	
						if  (RemainingDistAmount entered)

							initialize WorkDistributionGroup.TaxableAmount
							initialize WorkDistributionGroup.UnitAmount
							initialize WorkDistributionGroup.ItemQuantity
							WorkDistributionGroup.Amount	= RemainingDistAmount
							invoke CreateDistribution
								invoked.PrmWorkDistributionGroup		= WorkDistributionGroup
			else

				WorkDistributionGroup.FinanceEnterpriseGroup 			= Company.FinanceEnterpriseGroup
				WorkDistributionGroup.Company							= Company
				WorkDistributionGroup.PurchaseOrder						= CurrentPurchaseOrder
				WorkDistributionGroup.PurchaseOrderLine					= CurrentPurchaseOrderLine
				WorkDistributionGroup.PayablesInvoiceDetail				= CurrentInvoiceDetail
				WorkDistributionGroup.Contract							= CurrentContract
				WorkDistributionGroup.ContractLine						= CurrentContractLine
				WorkDistributionGroup.TaxableAmount						= CalculateTax.TaxTable.TaxTableOutput[I9].TaxableAmount
				WorkDistributionGroup.Amount							= CalculateTax.TaxTable.TaxTableOutput[I9].TaxAmount
				invoke CreateDistribution
					invoked.PrmWorkDistributionGroup					= WorkDistributionGroup


		

			

		2000EditInvoiceTaxOB


			initialize TotalTax3dp
			initialize DetailsTax3dp
			initialize TotalGoods
			initialize CalcTaxRate
			initialize CalcAccrual
			initialize SavePurchaseOrder
			initialize UsePODate

			TaxError	= false



      		
			if (PayablesInvoice.TaxCode entered
			and PayablesInvoice.TaxCode != "00")
				CalculateTax.TaxEntity			 							= Company.AccountingEntity
				CalculateTax.TaxCode			 							= PayablesInvoice.TaxCode
				CalculateTax.Function			 							= CalculateTax.Function.Inquire
				LocalCalculateTaxExecuted		 							= CalculateTax.ExecuteCalculateTax

			if  (PayablesInvoice.TaxCode.TaxType.CalculatedRate)

				TemporaryTaxType										= PayablesInvoice.TaxCode.TaxType	
				if  (CalculateTax.TaxTable.TaxTableOutput[1].AccrualFlag = "A"
				and  PayablesInvoice.TaxAdjustment.Calculate)
					invoke FastUpdate ThisMatchWorkInvoiceRel
						initialize invoked.TaxableAmount		


      
			if  (!TaxError)

				for each PayablesInvoice.PayablesInvoiceDistribution set
					if  (each.TaxCode entered
					and  each.TaxIndicator.None
					and  each.TaxType.Invoiced    
					and  !each.VATReverse)

						TotalTax3dp									+= each.DistributionAmount.CurrencyAmount



			if  (!TaxError
			and (PayablesInvoice.TaxAdjustment.OverrideProductOnly
			or   PayablesInvoice.TaxAdjustment.OverrideProductAndAOC)
			and  PerformedFrom.Match
			and  MatchLevel.InvoiceMatch)


				
				if  (CurrentPayablesInvoiceRel.MatchAmount 		!= CurrentPayablesInvoiceRel.AddOnChargeAmount)
					initialize CalculateTax
					CalculateTax.TaxCode						= CurrentPayablesInvoiceRel.TaxCode
					CalculateTax.TaxableAmount					= CurrentPayablesInvoiceRel.MatchAmount - CurrentPayablesInvoiceRel.AddOnChargeAmount
					CalculateTax.InvoiceAmount					= CurrentPayablesInvoiceRel.MatchAmount - CurrentPayablesInvoiceRel.AddOnChargeAmount
					
					TaxTolerance								= true
					WorkPostingSwitch							= 3


					
					if  (CalculateTax.TaxCode not entered
					or   CalculateTax.InvoiceAmount not entered)
						initialize CalculateTax
					else
						CalculateTax.TaxEntity 						= Company.AccountingEntity
						CalculateTax.InvoiceDate					= CurrentPayablesInvoiceRel.InvoiceDate
						CalculateTax.PaymentDate 					= CurrentPayablesInvoiceRel.InvoiceDate
						CalculateTax.GeneralLedgerDate 				= CurrentPayablesInvoiceRel.InvoiceDate
						CalculateTax.TaxDate						= CurrentPayablesInvoiceRel.InvoiceDate
							
						CalculateTax.PostalAddress					= InventoryLocationRel.PostalAddress
						if  (CurrentPayablesInvoiceRel.VendorLocationRel exists)
							CalculateTax.FromPostalAddress			= PayablesInvoice.VendorLocationRel.CurrentAddressRel.PostalAddress
						else
							CalculateTax.FromPostalAddress			= Vendor.first VendorLocationRel.CurrentAddressRel.PostalAddress
						CalculateTax.System							= "AP"
						CalculateTax.TaxableAmount					= CalculateTax.InvoiceAmount
						CalculateTax.TransactionCurrency			= PayablesInvoice.InvoiceCurrency
						CalculateTax.BaseCurrency					= PayablesInvoice.PayGroup.BaseCurrency
						LocalCalculateTaxExecuted					= CalculateTax.ExecuteCalculateTax  
						LocalTaxAmount								= CalculateTax.OutputTotalTaxAmount
					if  (!TaxError)



						if  (!PerformedFrom.Contract)
							include 991CreateTaxDistrib
			
						I9 = 1
						while (I9 <= 8
						and    CalculateTax.TaxTable.TaxTableOutput[I9].TaxCode entered)
							include 5000MataxDistribs
							I9 += 1
				
			if  (!TaxError)


				if  (PayablesInvoice.TaxAmount != TotalTax3dp
				and  PayablesInvoice.TaxAmount entered
				and !PayablesInvoice.TaxCode.TaxType.CalculatedRate
				and !PayablesInvoice.InvoiceType.MatchPrepayment)
					TaxDifference 							= PayablesInvoice.TaxAmount - TotalTax3dp

					if  (TaxDifference < CurrentPayablesInvoiceRel.DerivedTaxToleranceAmount * -1
					or   TaxDifference > CurrentPayablesInvoiceRel.DerivedTaxToleranceAmount)
						
						if  (PerformedFrom.Match
						or   PerformedFrom.Contract)
							TaxError						= true
							TaxErrorMessage					= MatchInvoiceErrorMessages.MsgTax101 + TaxDifference
						else
						if  (PerformedFrom.MA61)
							TaxError						= true
							TaxErrorMessage					= MatchInvoiceErrorMessages.MsgTax103 + TaxDifference

						if  (CurrentPayablesInvoiceRel.DerivedTaxToleranceAmount not entered
						and  PayablesCompanyRel.TaxRoundingAccount not entered)					
							TaxError						= true
							TaxErrorMessage					= MatchInvoiceErrorMessages.MsgTax108 + TaxDifference
							
				constraint (!TaxError)
					"<TaxErrorMessage>"							

		CreateSummarizedDistributions

			initialize LocalSumDistributionAmount
			initialize LocalSumTaxableAmount
			initialize LocalSumUnitAmount
			initialize LocalSumMatchedQuantity
			initialize LocalSummaryCount

			initialize WorkDistributionGroup.Invoice
			initialize WorkDistributionGroup.Account 
			initialize WorkDistributionGroup.TaxCode
			initialize WorkDistributionGroup.AddOnCharge
			initialize WorkDistributionGroup.Contract
			initialize WorkDistributionGroup.ContractLine
			initialize WorkDistributionGroup.AccrualCode
			initialize WorkDistributionGroup.PurchaseOrder
			initialize WorkDistributionGroup.PurchaseOrderLine
			initialize WorkDistributionGroup.Asset
			initialize WorkDistributionGroup.AssetTemplate
			initialize WorkDistributionGroup.Date

			for each LocalMatchWorkInvoiceDistributionsRel
			

			
				if  (WorkDistributionGroup.Invoice					!= each.PayablesInvoice
				or   WorkDistributionGroup.Account 					!= each.DistributionAccount
				or   WorkDistributionGroup.TaxCode					!= each.TaxCode
				or   WorkDistributionGroup.AccrualCode				!= each.AccrualCode
				or   WorkDistributionGroup.Date						!= each.DistributionDate
				or   WorkDistributionGroup.Retainage				!= each.Retainage
				and (WorkDistributionGroup.Asset					!= each.Asset
				or   WorkDistributionGroup.AssetTemplate			!= each.AssetTemplate))

					if  (LocalSumDistributionAmount entered
					or   LocalSumTaxableAmount entered)
						include CreateASummarizedDistribution
						initialize LocalSummaryCount

					WorkDistributionGroup.FinanceEnterpriseGroup 	= each.Company.FinanceEnterpriseGroup
					WorkDistributionGroup.Company					= each.Company
					WorkDistributionGroup.Invoice					= each.PayablesInvoice
					WorkDistributionGroup.Account 					= each.DistributionAccount
					WorkDistributionGroup.TaxCode					= each.TaxCode
					WorkDistributionGroup.TaxType					= each.TaxType
					WorkDistributionGroup.TaxRate					= each.TaxRate
					WorkDistributionGroup.ProductTaxCategory		= each.PayablesInvoiceDetail.ProductTaxCategory
					WorkDistributionGroup.AccrualCode				= each.AccrualCode
					WorkDistributionGroup.Date						= each.DistributionDate
					WorkDistributionGroup.Asset						= each.Asset
					WorkDistributionGroup.AssetTemplate				= each.AssetTemplate
					WorkDistributionGroup.Retainage					= each.Retainage

				LocalSumDistributionAmount 						+= each.DistributionAmount
				LocalSumTaxableAmount							+= each.TaxableAmount
				LocalSumUnitAmount								+= each.UnitAmount
				LocalSumMatchedQuantity							+= each.MatchedQuantity
				LocalSummaryCount								+= 1

			if (LocalSumDistributionAmount entered
			or  LocalSumTaxableAmount entered)
				include CreateASummarizedDistribution
				
		CreateASummarizedDistribution


			LocalPayablesInvoice								= WorkDistributionGroup.Invoice


			
			invoke CreateFromMatch PayablesInvoiceDistribution
				assign result to NewDistribution
				invoked.Company									= Company
				invoked.PayablesInvoice							= WorkDistributionGroup.Invoice
				invoked.DistributionType						= "D"
				invoked.BypassUpdatingInvoiceTotals				= true
				invoked.Status									= 1
				invoked.GLFinanceCodeBlock						= WorkDistributionGroup.Account	
				invoked.DistributionAccount						= WorkDistributionGroup.Account
				invoked.TaxCode									= WorkDistributionGroup.TaxCode
				if  (TaxEntityRel.ThirdParty.Sabrix
				and  WorkDistributionGroup.TaxCode entered)
					invoked.TaxType								= PayablesInvoice.PayablesInvoiceTaxRel.TaxMethod
				else
					invoked.TaxType								= WorkDistributionGroup.TaxType
				invoked.TaxRate									= WorkDistributionGroup.TaxRate
				invoked.ProductTaxCategory						= WorkDistributionGroup.ProductTaxCategory
				if (WorkDistributionGroup.Retainage)
					invoked.AccrualCode							= PayablesInvoice.RetainageAccrualCode
				else
					invoked.AccrualCode							= WorkDistributionGroup.AccrualCode

				if (WorkDistributionGroup.Asset entered
				or (!WorkDistributionGroup.LandedCost
				and WorkDistributionGroup.AssetTemplate entered))
					invoked.AssetFlag							= "A"


				invoked.GLTransactionAmount						= LocalSumDistributionAmount
				invoked.TaxableAmount							= LocalSumTaxableAmount
				if (PayablesInvoice.InvoiceType.CreditMemo)
					invoked.UnitAmount							= LocalSumUnitAmount * -1
				else	
					invoked.UnitAmount							= LocalSumUnitAmount

				invoked.MatchCreated							= "S"

				invoked.TransientOriginalPayablesInvoiceTaxableAmount 	= LocalWorkInvoiceRel.TaxableAmount
				invoked.TransientOriginalPayablesInvoiceTaxAmount		= LocalWorkInvoiceRel.TaxAmount
				invoked.Retainage								= WorkDistributionGroup.Retainage
				invoked.TransientBypassErrorUpdate				= true
				invoked.BypassStructureRelationEdit				= true



			initialize LocalSumDistributionAmount
			initialize LocalSumTaxableAmount
			initialize LocalSumUnitAmount
			initialize LocalSumMatchedQuantity
			initialize LocalSummaryCount

	Actions
	
		BatchMatch is a Set Action
			restricted
			Parameters
				PrmCompany				is a PayablesCompany
				PrmInvoice				is a PayablesInvoice
				PrmMatchWork 			is a MatchWork
				PrmAutoMatchResult		is an AutoMatchResult

			Parameter Rules
				PrmCompany
					required
				PrmInvoice
					required
				PrmMatchWork 
					required

			Instance Selection
				where (Company				= PrmCompany
				and    PayablesInvoice		= PrmInvoice
				and    MatchWork			= PrmMatchWork)


			Local Fields
				AutoMatchError							is Boolean
				AutoMatchErrorMessage					is Alpha 200
			Action Rules
				Instance Rules

					
					initialize AutoMatchError
					initialize AutoMatchErrorMessage
					initialize VerifyMatchMessage
					ProcessMode	= "B"
					
				
					LinkedAutoMatchResult = PrmAutoMatchResult

					initialize LocalPurchaseOrderReceipt

					if  (ProcessByMatchReference)
            			for each PurchaseOrderReceiptMatchReferenceRel
							if (each.IsOpen)
								LocalPurchaseOrderReceipt		= each.PurchaseOrderReceipt
								end for each
					else
						for each PayablesInvoice.MatchPurchaseOrderInvoicesRel
							for each each.PurchaseOrderReceiptRel
								if (each.IsOpen)
									LocalPurchaseOrderReceipt		= each.PurchaseOrderReceipt
									end for each


					if  (!PayablesInvoice.MatchProcessType.DropShip
					and  !PayablesInvoice.MatchProcessType.Service
					and  !PayablesInvoice.MatchProcessType.AOCOnly
		            and  !MemoInvoice
    				and  !MatchLevel.InvoiceMatch
		            and   LocalPurchaseOrderReceipt entered
					and  PayablesInvoice.BackgroundProcessing.MatchInvoice)

						PerformCreateDetailsInSetAction = true
						include 304BuildWorkFiles


						if  (PrmAutoMatchResult entered)

							if (!BuildWorkFileError)
								if (PayablesInvoice.ServiceDetailsRel exists
								or  DropshipPurchaseOrdersRel exists)
									invoke CreateMatchWorkDetailsForServiceItems PurchaseOrderLine
										resume on error
											AutoMatchError 			= true
											AutoMatchErrorMessage	= error message
										invoked.PrmCompany 		= Company
										invoked.PrmPurchaseOrder = PurchaseOrder
										if  (MultiplePurchaseOrders
										or   ProcessByMatchReference)
											invoked.PrmMultiplePOs = true 
										invoked.PrmVendor		= Vendor
										invoked.PrmInvoice 		= PayablesInvoice
										invoked.PrmMatchWork 	= MatchWork
										invoked.PrmAutoMatchResult = PrmAutoMatchResult
										invoked.PoolOption		= PoolOption
										invoked.PrmInvoiceMatchLevel = LocalMatchRuleToleranceGroup.InvoiceMatchLevel
								else
									invoke CreateMatchWorkReceiptDetails PurchaseOrderReceiptLine
										resume on error
											AutoMatchError 			= true
											AutoMatchErrorMessage	= error message
										invoked.PrmCompany 		= Company
										invoked.PrmPurchaseOrder = PurchaseOrder
										if  (MultiplePurchaseOrders
	    								or   ProcessByMatchReference)
											invoked.PrmMultiplePOs = true 
										invoked.PrmVendor		= Vendor
										invoked.PrmInvoice 		= PayablesInvoice
										invoked.PrmMatchWork 	= MatchWork
										invoked.PrmAutoMatchResult = PrmAutoMatchResult
										invoked.PoolOption		= PoolOption
	
								display "ZZZE(1)Back:Error<AutoMatchError>Msg<AutoMatchErrorMessage>"
								if (AutoMatchError)
									invoke UpdateFromMatch AutoMatchResultInvoiceRel
										invoked.ErrorMessage 				= AutoMatchErrorMessage
										invoked.UnmatchedAmount				= PayablesInvoice.InvoiceAmount.CurrencyAmount
									initialize LinkedAutoMatchResult
	
						else

							if (PayablesInvoice.ServiceDetailsRel exists
							or  DropshipPurchaseOrdersRel exists)
								invoke CreateMatchWorkDetailsForServiceItems PurchaseOrderLine
									invoked.PrmCompany 		= Company
									invoked.PrmPurchaseOrder = PurchaseOrder
									if  (MultiplePurchaseOrders
									or   ProcessByMatchReference)
										invoked.PrmMultiplePOs = true 
									invoked.PrmVendor		= Vendor
									invoked.PrmInvoice 		= PayablesInvoice
									invoked.PrmMatchWork 	= MatchWork
									invoked.PrmAutoMatchResult = PrmAutoMatchResult
									invoked.PoolOption		= PoolOption
									invoked.PrmInvoiceMatchLevel = LocalMatchRuleToleranceGroup.InvoiceMatchLevel
							else
								invoke CreateMatchWorkReceiptDetails PurchaseOrderReceiptLine
									invoked.PrmCompany 		= Company
									invoked.PrmPurchaseOrder = PurchaseOrder
									if  (MultiplePurchaseOrders
									or   ProcessByMatchReference)
										invoked.PrmMultiplePOs = true 
									invoked.PrmVendor		= Vendor
									invoked.PrmInvoice 		= PayablesInvoice
									invoked.PrmMatchWork 	= MatchWork
									invoked.PrmAutoMatchResult = PrmAutoMatchResult
									invoked.PoolOption		= PoolOption

					else
						if  (PrmAutoMatchResult entered)
							display "ZZZE(2a)CallMatch-Invoice<PayablesInvoice.Invoice>"

							if (LocalPurchaseOrderReceipt not entered
							and PayablesInvoice.MatchProcessType.ReceiptMatch
							and !PayablesInvoice.MatchProcessType.ServiceContract
							and !PayablesInvoice.MatchProcessType.DropShip
							and !PayablesInvoice.MatchProcessType.AOCOnly
							and !PayablesInvoice.InvoiceType.DebitMemo
							and !PayablesInvoice.InvoiceType.CreditMemo)
							
								invoke UpdateFromMatch AutoMatchResultInvoiceRel

									if  (Vendor.RequireMatchReference)
										invoked.ErrorMessage 			= MatchInvoiceErrorMessages.EdMsg114Ref 
									else
										invoked.ErrorMessage 			= MatchInvoiceErrorMessages.EdMsg114 
									invoked.SystemOwner					= 2  
									invoked.UnmatchedAmount				= PayablesInvoice.InvoiceAmount.CurrencyAmount
									invoked.MatchErrorType 				= 3
								initialize LinkedAutoMatchResult



							else								
								invoke Match
									resume on error
										AutoMatchError 			= true
										AutoMatchErrorMessage	= error message
									invoked.TransientSumDetails = true
									invoked.LinkedAutoMatchResult = LinkedAutoMatchResult

								if (AutoMatchError)
									VerifyMatchMessage				= AutoMatchErrorMessage
									display "ZZZ:UFMR(7):<PayablesInvoice.Invoice>Msg<AutoMatchErrorMessage>"
									invoke UpdateFromMatch AutoMatchResultInvoiceRel
										invoked.ErrorMessage 				= AutoMatchErrorMessage
										invoked.UnmatchedAmount				= PayablesInvoice.InvoiceAmount.CurrencyAmount

										if  (AutoMatchErrorMessage = MatchInvoiceErrorMessages.Msg198  
										or   AutoMatchErrorMessage = MatchInvoiceErrorMessages.Msg199   
										or   AutoMatchErrorMessage = MatchInvoiceErrorMessages.Msg200  
										or   AutoMatchErrorMessage = MatchInvoiceErrorMessages.Msg214  
										or   AutoMatchErrorMessage[1:30] = MatchInvoiceErrorMessages.MissingReceiptDetailMsg[1:30]  
										or   AutoMatchErrorMessage = MatchInvoiceErrorMessages.Msg256  
										or   AutoMatchErrorMessage = MatchInvoiceErrorMessages.Msg257  
										or   AutoMatchErrorMessage = MatchInvoiceErrorMessages.EdMsg120  
										or   AutoMatchErrorMessage = MatchInvoiceErrorMessages.CannotMatchDueToUnreleasedAdjMsg
										or   AutoMatchErrorMessage = MatchInvoiceErrorMessages.CannotMatchDueToUnreleasedInspMsg
										or   AutoMatchErrorMessage = MatchInvoiceErrorMessages.CannotMatchDueToPendingTwoStepReceivingMsg
										or   AutoMatchErrorMessage[1:60] = MatchInvoiceErrorMessages.VendorItemOnInvoiceDoesNotMatchVendorItemOnPurchaseOrderMsg[1:60]
										or   AutoMatchErrorMessage[1:30] = MatchInvoiceErrorMessages.InventoriedNotInventoriedTrackedMsg[1:30]
										or   AutoMatchErrorMessage[1:26] = MatchInvoiceErrorMessages.ReceiptLineNotFoundForItemMsg[1:26]
										or   AutoMatchErrorMessage[1:26] = MatchInvoiceErrorMessages.ReceiptLineNotFoundForAddOnChargeMsg[1:26])
											invoked.SystemOwner 	= 2  
									initialize LinkedAutoMatchResult
						else
						if  (PayablesInvoice.BackgroundProcessing.MatchInvoice)

							invoke Match
								resume on error
									AutoMatchError 				= true
									AutoMatchErrorMessage		= error message
	
								invoked.TransientSumDetails 	= true
	
							if (AutoMatchError)
								VerifyMatchMessage				= AutoMatchErrorMessage
								if (PayablesInvoice.TaxEntityUsesSabrix
								and TaxConfigurationRel.OneSourceVersionType.Original
								and  !PayablesInvoice.CreditForRebill)
									if (!LinkedAutoMatchResult entered)

										invoke OneSourceResetDistributions PayablesInvoiceDistribution
											invoked.PrmCompany 			= Company
											invoked.PrmPayablesInvoice 	= PayablesInvoice
								else
									invoke FastUpdate PayablesInvoice
										initialize invoked.BackgroundProcessing
										if (TaxConfigurationRel.OneSourceVersionType.Generic
										and TaxEntityRel.ThirdParty.Sabrix)
									   		initialize invoked.POTaxAmount

								if (PayablesInvoice.OriginatingInterfaceRun entered)
									invoke AddToResults PayablesInvoice.OriginatingInterfaceRun
										invoked.Company = Company
										invoked.PayablesInvoice = PayablesInvoice

						else

							invoke Match
								invoked.TransientSumDetails = true

		BatchMatch2 is a Set Action
			restricted
			Parameters
				PrmCompany	is a PayablesCompany
				PrmInvoice	is a PayablesInvoice
				PrmMatchWork is a MatchWork
				PrmAutoMatchResult is an AutoMatchResult

			Parameter Rules
				PrmCompany
					required
				PrmInvoice
					required
				PrmMatchWork 
					required

			Local Fields
				AutoMatchError							is Boolean
				AutoMatchErrorMessage					is Alpha 200
				OnlineMatchError						is Boolean
				OnlineMatchErrorMessage					is Alpha 200

				
			Instance Selection
				where (Company				= PrmCompany
				and    PayablesInvoice		= PrmInvoice
				and    MatchWork			= PrmMatchWork)

			Action Rules
				Instance Rules

					LinkedAutoMatchResult = PrmAutoMatchResult

					initialize AutoMatchError
					initialize AutoMatchErrorMessage
				
					if  (PrmAutoMatchResult entered)

						invoke Match
							resume on error
								AutoMatchError 			= true
								AutoMatchErrorMessage	= error message
							invoked.TransientSumDetails = true
							invoked.LinkedAutoMatchResult = LinkedAutoMatchResult


						if (AutoMatchError)
							display "ZZZ:UFMR(8):<PayablesInvoice.Invoice>Msg<AutoMatchErrorMessage>"
							VerifyMatchMessage		= AutoMatchErrorMessage
							invoke UpdateFromMatch AutoMatchResultInvoiceRel
								invoked.ErrorMessage 				= AutoMatchErrorMessage
								invoked.UnmatchedAmount				= PayablesInvoice.InvoiceAmount.CurrencyAmount

								if  (AutoMatchErrorMessage = MatchInvoiceErrorMessages.Msg198  
								or   AutoMatchErrorMessage = MatchInvoiceErrorMessages.Msg199   
								or   AutoMatchErrorMessage = MatchInvoiceErrorMessages.Msg200  
								or   AutoMatchErrorMessage = MatchInvoiceErrorMessages.Msg214  
								or   AutoMatchErrorMessage[1:30] = MatchInvoiceErrorMessages.MissingReceiptDetailMsg[1:30]  
								or   AutoMatchErrorMessage = MatchInvoiceErrorMessages.Msg256  
								or   AutoMatchErrorMessage = MatchInvoiceErrorMessages.Msg257  
								or   AutoMatchErrorMessage = MatchInvoiceErrorMessages.EdMsg120  
								or   AutoMatchErrorMessage = MatchInvoiceErrorMessages.CannotMatchDueToUnreleasedAdjMsg
								or   AutoMatchErrorMessage = MatchInvoiceErrorMessages.CannotMatchDueToUnreleasedInspMsg
								or   AutoMatchErrorMessage = MatchInvoiceErrorMessages.CannotMatchDueToPendingTwoStepReceivingMsg
								or   AutoMatchErrorMessage[1:60] = MatchInvoiceErrorMessages.VendorItemOnInvoiceDoesNotMatchVendorItemOnPurchaseOrderMsg[1:60]
								or   AutoMatchErrorMessage[1:30] = MatchInvoiceErrorMessages.InventoriedNotInventoriedTrackedMsg[1:30]
								or   AutoMatchErrorMessage[1:26] = MatchInvoiceErrorMessages.ReceiptLineNotFoundForItemMsg[1:26]
								or   AutoMatchErrorMessage[1:26] = MatchInvoiceErrorMessages.ReceiptLineNotFoundForAddOnChargeMsg[1:26])
									invoked.SystemOwner 	= 2  
							initialize LinkedAutoMatchResult

					else
					if  (PayablesInvoice.BackgroundProcessing.MatchInvoice)

						invoke Match
							resume on error
								OnlineMatchError 			= true
								OnlineMatchErrorMessage	= error message

							invoked.TransientSumDetails = true
							invoked.LinkedAutoMatchResult = LinkedAutoMatchResult



						if (OnlineMatchError)

							VerifyMatchMessage		= OnlineMatchErrorMessage
							if (PayablesInvoice.TaxEntityUsesSabrix
							and TaxConfigurationRel.OneSourceVersionType.Original
							and !PayablesInvoice.CreditForRebill)

								invoke OneSourceResetDistributions PayablesInvoiceDistribution
									invoked.PrmCompany 			= Company
									invoked.PrmPayablesInvoice 	= PayablesInvoice
							else
								invoke FastUpdate PayablesInvoice
									initialize invoked.BackgroundProcessing
									if (TaxConfigurationRel.OneSourceVersionType.Generic
									and TaxEntityRel.ThirdParty.Sabrix)
									    initialize invoked.POTaxAmount
								
							if (PayablesInvoice.MatchReconQueueRel exists)
								if (!PayablesInvoice.MatchProcessType.AOCOnly)
									invoke FastUpdate PayablesInvoice.MatchReconQueueRel
										initialize invoked.BuildStamp

							if (PayablesInvoice.OriginatingInterfaceRun entered)
								invoke AddToResults PayablesInvoice.OriginatingInterfaceRun
									invoked.Company = Company
									invoked.PayablesInvoice = PayablesInvoice

					else

						invoke Match
							invoked.TransientSumDetails = true
							invoked.LinkedAutoMatchResult = LinkedAutoMatchResult


		
		Match is an Update Action
			completion message is "<CompletionMessage>"
			restricted
			Exit Rules

				if (!PayablesInvoice.TaxEntityUsesSabrix)
					invoke Update PayablesInvoice.PayablesInvoiceTaxRel
						invoked.TaxCode					= PayablesInvoice.TaxCode
						invoked.EnteredInvoiceAmount	= PayablesInvoice.InvoiceAmount.CurrencyAmount
						invoked.EnteredTaxAmount		= PayablesInvoice.TaxAmount	
						invoked.EnteredTaxableAmount	= PayablesInvoice.TaxableAmount

				initialize VerifyMatchMessage
				if  (TransientSumDetails)

					if  (PayablesInvoice.DueDate > LastDueDate)
						LastDueDate							= PayablesInvoice.DueDate
						LastLocation						= PayablesInvoice.Location
						
					initialize MatporwrkCount
	

					for each MatchWorkInvoice set
						WorkTotalInvoiceMatchAmount				+= each.PayablesInvoice.MatchAmount
						WorkTotalInvoiceMatchAddOnCharge		+= each.PayablesInvoice.MatchedAddOnChargeAmount
						WorkTotalInvoiceHashQuantity			+= each.PayablesInvoice.HashQuantity

	
					MatmadwrkCount 							= instance count of MatchWorkInvoiceDetailRel
					TotalAocRecords 						= instance count of MatchWorkInvoiceAddOnChargeRel
	
					TotalDetailRecords 						= MatmadwrkCount + TotalAocRecords

	
	
	 				initialize WorkLinesRead
					initialize WriteoffAmount
					initialize MatporwrkCount
					initialize MatporwrkAmount
					initialize MatporwrkQuantity
					initialize MatprlwrkCount
					initialize WorkMatchAddOnCharge
					initialize WorkTotalAddOnCharge 
					initialize MatrecwrkCount
					initialize MatrecwrkAddOnCharge
					initialize MatporwrkAddOnCharge
					
					for each MatchWorkReceiptRel
	
						MatporwrkCount 						+= 1					
						if (each.PurchaseOrderReceipt.ReceivedDate > BestReceiptDate)
							BestReceiptDate						= each.PurchaseOrderReceipt.ReceivedDate
	
						MatporwrkAmount   						+= each.PurchaseOrderReceipt.ReceiptAmount - each.PurchaseOrderReceipt.MatchedAmount
						MatporwrkQuantity   					+= each.PurchaseOrderReceipt.HashQuantity - each.PurchaseOrderReceipt.HashQuantityMatched
	
	
						for each each.MatchWorkReceiptLineRel
							WorkLinesRead						+= 1
							WriteoffAmount						+= each.ArchivedQuantity * each.MatchUnitCost
							MatprlwrkCount						+= 1
		
						for each each.MatchWorkReceiptLineAOCRel			
							WorkLinesRead						+= 1
			        		if  (each.PurchaseOrderReceiptLine entered
			        		and  each.PurchaseOrderReceiptLine.OpenToMatchQuantity not entered)
			        			if (each.PurchaseOrderReceiptLine.MatchObjectID not entered
			        			or  each.PurchaseOrderReceiptLineAOCRel.PurchaseOrderReceiptInvoiceLinkRel exists)
			        				WorkMatchAddOnCharge		+= each.ReceivedAmountToMatch 
			        				WorkTotalAddOnCharge		+= each.ReceivedAmountToMatch 
			        		else
		        				WorkMatchAddOnCharge			+= each.MiscellaneousAddOnChargeInvoicedAmount 
		        				WorkTotalAddOnCharge			+= each.MiscellaneousAddOnChargeInvoicedAmount 

							MatrecwrkCount						+= 1
							MatrecwrkAddOnCharge				+= each.ReceivedAmountToMatch + each.MiscellaneousAddOnChargeInvoicedAmount	
						
						MatporwrkAddOnCharge					+= MatrecwrkAddOnCharge

			

				if  (DocumentType.Invoice
				and  PayablesInvoice.DerivedNumberOfPurchaseOrders > 1)
					initialize PurchaseOrder
	

				include EditMatch



				CompletionMessage = "MatchCompleted"
				include 100EditTran

	











				if (PayablesInvoice.MatchProcessType.ServiceContract)
					if (!ProcessMode.Reconciliation)

			







							
						CurrentPayablesInvoice = PayablesInvoice
			      		include 912FillMatapiwrk
			
						MatmadwrkCount	= instance count of MatchWorkInvoiceDetail set
						
						constraint (MatmadwrkCount entered)
							"<MatchInvoiceErrorMessages.Msg249>"
			
						TaxOutOfBalance = false
	

			
						if  (PayablesInvoice.MatchProcessType.ServiceContract)
							MatchLevel												= "DM"
							InPrepaids												= false
							PerformedFrom											= 5
						else
							PerformedFrom											= 1
			

						
						if  (TaxError)
							invoke Purge InvoiceDetailCreatedFromMatchRel
							TaxOutOfBalance 										= true
			
						constraint (!TaxError)
							"<TaxErrorMessage>"
							

	
						if (!ProcessMode.Reconciliation
						and Company.EnableServiceCostMessaging)
						    include 4100EditInvoice
						









						if  (!TaxOutOfBalance)

				
							MatchTestOK = true

				        	if  (GeneralLedgerSystemCodeRel.EncumbranceOption.TrackAndEdit
				        	or   GeneralLedgerSystemCodeRel.EncumbranceOption.Track)
								NoBudgetChanges = true 
								for each BudgetTemplateGroupTotalRel
									if (each.Amount entered)
										NoBudgetChanges = false 
										end for each 

				        	if  (BypassBudgetEditIfNoDifferences   
				        	and (GeneralLedgerSystemCodeRel.EncumbranceOption.TrackAndEdit
				        	or   GeneralLedgerSystemCodeRel.EncumbranceOption.Track)
							and (POGeneralLedgerSystemCodeRel.EncumbranceOption.TrackAndEdit
							or   POGeneralLedgerSystemCodeRel.EncumbranceOption.Track)
							and  NoBudgetChanges)

								for each BudgetTemplateGroupTotalRel
									if (each.Scenario 		not = LocalScenario 
									or  each.BudgetTemplate not = LocalBudgetTemplate 
									or  each.BudgetTemplateGroupTotal.BudgetGroup 	not = LocalBudgetGroup)
										LocalFEG								= each.FinanceEnterpriseGroup
										LocalScenario							= each.Scenario
										LocalBudgetTemplate						= each.BudgetTemplate
										LocalBudgetGroup 						= each.BudgetTemplateGroupTotal.BudgetGroup
										LocalGeneralLedgerCalendarPeriod 		= each.BudgetTemplateGroupTotal.GeneralLedgerCalendarPeriod
										LocalGeneralLedgerCalendarYear 			= each.BudgetTemplateGroupTotal.GeneralLedgerCalendarYear 

										invoke Update LocalBudgetGroupTotalRel 
											invoked.BusinessClassName	= "PayablesInvoice"
											invoked.EditContext			= "Match"							
											invoked.PreviousAmount		= LocalBudgetGroupTotalRel.Amount 

								invoke Purge BudgetTemplateGroupTotalRel
								invoke FinishMatch 
							else 
							if  (PayablesInvoice.InvoiceType.MatchPrepayment)
								if (PayablesInvoice.GLCommitRelExists)
									invoke Delete PayablesInvoice.HeaderBudgetEditErrorRel 
									invoke Delete PayablesInvoice.DistributionBudgetEditErrorRel
									invoke EditTotalsRoute BudgetTemplateGroupTotal 	
										invoked.PrmFinanceEnterpriseGroup    		= Company.FinanceEnterpriseGroup
										invoked.PrmBudgetEditGroup           		= PayablesInvoice.UniqueID
										invoked.PrmMode								= BudgetEditMode.UpdateOnly
										invoked.PrmBusinessClassName				= "PayablesInvoice"
										invoked.PrmEditContext              		= "Match"
								
								invoke FinishMatch
							else
				        	if  (GeneralLedgerSystemCodeRel.EncumbranceOption.TrackAndEdit
					        and  PayablesInvoice.GLCommitRelExists)
					        
								invoke FastUpdate PayablesInvoice					
				 					invoked.BudgetEditProcessing = PayablesInvoice.BudgetEditProcessing.InProcess                   
								invoke Delete PayablesInvoice.HeaderBudgetEditErrorRel 
								invoke Delete PayablesInvoice.DistributionBudgetEditErrorRel

								invoke EditTotalsRoute BudgetTemplateGroupTotal 	
									invoked.PrmFinanceEnterpriseGroup    										= Company.FinanceEnterpriseGroup
									invoked.PrmBudgetEditGroup           										= PayablesInvoice.UniqueID
									invoked.PrmBudgetEditCallBack.BudgetEditCallBackPayables.PayablesCompany 	= Company
									invoked.PrmBudgetEditCallBack.BudgetEditCallBackPayables.PayablesInvoice	= PayablesInvoice
									invoked.PrmMode								= BudgetEditMode.Hard
									invoked.PrmBusinessClassName				= "PayablesInvoice"
									invoked.PrmEditContext              		= "Match"						
							
							else
								if (GeneralLedgerSystemCodeRel.EncumbranceOption.Track
								and PayablesInvoice.GLCommitRelExists)

									invoke EditTotalsRoute BudgetTemplateGroupTotal 	
										invoked.PrmFinanceEnterpriseGroup    		= Company.FinanceEnterpriseGroup
										invoked.PrmBudgetEditGroup           		= PayablesInvoice.UniqueID
										invoked.PrmMode								= BudgetEditMode.UpdateOnly
										invoked.PrmBusinessClassName				= "PayablesInvoice"
										invoked.PrmEditContext              		= "Match"						
										
								invoke FinishMatch
		
				else


					if  (!ProcessMode.Reconciliation

					and  !MemoInvoice)
						include 300MatchProcessing
					else
					if  (LinkedAutoMatchResult entered
					and  !MemoInvoice)

						include 300MatchProcessing
					else
						MatchTestOK = true


	
					if  (!MemoInvoice)
						include 400InvoiceMatchValidation

					if  (!ProcessMode.Reconciliation
					and   MemoInvoice)

			
						WithPreviousDetailMatch = false
			
						include 304BuildWorkFiles
			
						constraint (first MatchWorkInvoiceDetail set exists
						or          first MatchWorkInvoiceAddOnCharge set exists)
							"<MatchInvoiceErrorMessages.NoDetailsEnteredOnMemoDetailsTabForCreditMemoMsg>"
			
						MatchTestOK 						= true
			
						MatchSub1 							= Sub1
						MatchedFromRoutine					= "470"

						invoke FastUpdate ThisMatchWorkInvoiceRel			
							invoked.Selected				= true
							

						if  (PayablesInvoice.MatchInvoiceReferenceRel exists)
							OutMatchObjectID									= PayablesInvoice.MatchInvoiceReferenceRel.OriginalInvoice.MatchObjectID
							MatchLevel											= PayablesInvoice.MatchInvoiceReferenceRel.OriginalInvoice.MatchLevel

							LocalMatchRuleToleranceGroup.InvoiceMatchLevel		= PayablesInvoice.MatchInvoiceReferenceRel.OriginalInvoice.MatchLevel
							if (PurchaseOrderReceiptInvoiceLinkLastSequenceRel exists)
								LocalMatchSequence								= last PurchaseOrderReceiptInvoiceLinkLastSequenceRel.PurchaseOrderReceiptInvoiceLink.MatchSequence

						else
						if (PayablesInvoice.InvoiceType.CreditMemo)
							MatchLevel											= "DM"
							LocalMatchRuleToleranceGroup.InvoiceMatchLevel		= "DM"
							if (PurchaseOrderReceiptInvoiceLinkLastSequenceRel exists)
								LocalMatchSequence								= last PurchaseOrderReceiptInvoiceLinkLastSequenceRel.PurchaseOrderReceiptInvoiceLink.MatchSequence

						

					if  (MatchSub1 not entered)
						MatchSub1 = 1

		
					if  (!MatchTestOK)
						OutMatchStatus							= 0
						OutTotalTransactionAmount				= PayablesInvoice.InvoiceAmount.CurrencyAmount
						OutTotalTransactionCount				= 1
						if  (MatchErrorTable.MatchErrorGroup[MatchSub1].MatchErrorMessage not entered) 
							MatchErrorTable.MatchErrorGroup[MatchSub1].MatchErrorMessage 	= MatchInvoiceErrorMessages.Msg250 
							MatchErrorTable.MatchErrorGroup[MatchSub1].MatchError			= true 
			
					constraint (!MatchErrorTable.MatchErrorGroup[MatchSub1].MatchError)
						"<MatchErrorTable.MatchErrorGroup[MatchSub1].MatchErrorMessage>"

					if ((!ProcessMode.Reconciliation
		            or    ReconciliationUpdate)
		           	and   MatchTestOK)
		
						if  (MatchWorkInvoiceDetailRel exists)
							InvoiceDetailKeyed												= true
						else
							InvoiceDetailKeyed												= false
							
						if  (MatchWorkInvoiceAddOnChargeRel exists)
							InvoiceAddOnChargeKeyed											= true
						else
							InvoiceAddOnChargeKeyed											= false

						if  (MatchRuleResult.AllToOne
						or   MatchRuleResult.AllToAll)
							for each MatchWorkInvoice set
								if  (each.Selected
								and  each.PayablesInvoice > LastPayablesInvoice)
									LastCompany						= each.Company
									LastPayablesInvoice				= each.PayablesInvoice


						for each MatchWorkInvoice set
							CurrentPayablesInvoice				= each.PayablesInvoice
							include 501ProcessMatapiwrk
							CurrentPayablesInvoice				= PayablesInvoice 

					if (GeneralLedgerCompanyRel.FinanceEnterpriseGroup.FrontEndSplits
					and PayablesInvoice.InvoiceType.Invoice)
						invoke SplitFESDistributions PayablesInvoiceDistribution in foreground
							invoked.PrmCompany			= Company
							invoked.PrmInvoice			= PayablesInvoice
							invoked.PrmInvokedFromMatch = true
						if (GeneralLedgerCompanyRel.FinanceEnterpriseGroup.UseFundedAmounts)
							include FESReleaseEdit

					if  (MatchTestOK)

						if  (GeneralLedgerSystemCodeRel.EncumbranceOption.TrackAndEdit
						or   GeneralLedgerSystemCodeRel.EncumbranceOption.Track)
							NoBudgetChanges = true 
							for each BudgetTemplateGroupTotalRel
								if (each.Amount entered)
									NoBudgetChanges = false
									end for each  

						if  (BypassBudgetEditIfNoDifferences   
						and (GeneralLedgerSystemCodeRel.EncumbranceOption.TrackAndEdit
						or   GeneralLedgerSystemCodeRel.EncumbranceOption.Track)
						and (POGeneralLedgerSystemCodeRel.EncumbranceOption.TrackAndEdit
						or   POGeneralLedgerSystemCodeRel.EncumbranceOption.Track)
						and  NoBudgetChanges)
							for each BudgetTemplateGroupTotalRel
								if (each.Scenario 		not = LocalScenario 
								or  each.BudgetTemplate not = LocalBudgetTemplate 
								or  each.BudgetTemplateGroupTotal.BudgetGroup 	not = LocalBudgetGroup)
									LocalFEG								= each.FinanceEnterpriseGroup
									LocalScenario							= each.Scenario
									LocalBudgetTemplate						= each.BudgetTemplate
									LocalBudgetGroup 						= each.BudgetTemplateGroupTotal.BudgetGroup
									LocalGeneralLedgerCalendarPeriod 		= each.BudgetTemplateGroupTotal.GeneralLedgerCalendarPeriod
									LocalGeneralLedgerCalendarYear 			= each.BudgetTemplateGroupTotal.GeneralLedgerCalendarYear 

									invoke Update LocalBudgetGroupTotalRel 
										invoked.BusinessClassName	= "PayablesInvoice"
										invoked.EditContext			= "Match"							
										invoked.PreviousAmount		= LocalBudgetGroupTotalRel.Amount 

							invoke Purge BudgetTemplateGroupTotalRel
							invoke FinishMatch 
						else 
						if  (PayablesInvoice.InvoiceType.MatchPrepayment)
							if (PayablesInvoice.GLCommitRelExists)
								invoke Delete PayablesInvoice.HeaderBudgetEditErrorRel 
								invoke Delete PayablesInvoice.DistributionBudgetEditErrorRel
								invoke EditTotalsRoute BudgetTemplateGroupTotal 	
									invoked.PrmFinanceEnterpriseGroup    		= Company.FinanceEnterpriseGroup
									invoked.PrmBudgetEditGroup           		= PayablesInvoice.UniqueID
									invoked.PrmMode								= BudgetEditMode.UpdateOnly
									invoked.PrmBusinessClassName				= "PayablesInvoice"
									invoked.PrmEditContext              		= "Match"
									
							invoke FinishMatch
						else
			        	if  (GeneralLedgerSystemCodeRel.EncumbranceOption.TrackAndEdit
				        and  PayablesInvoice.GLCommitRelExists)
			
							invoke FastUpdate PayablesInvoice					
			 					invoked.BudgetEditProcessing = PayablesInvoice.BudgetEditProcessing.InProcess                   
							if (!FromInterface)
								invoke Delete PayablesInvoice.HeaderBudgetEditErrorRel 
								invoke Delete PayablesInvoice.DistributionBudgetEditErrorRel

							invoke EditTotalsRoute BudgetTemplateGroupTotal 	
								invoked.PrmFinanceEnterpriseGroup    										= Company.FinanceEnterpriseGroup
								invoked.PrmBudgetEditGroup           										= PayablesInvoice.UniqueID
								invoked.PrmBudgetEditCallBack.BudgetEditCallBackPayables.PayablesCompany 	= Company
								invoked.PrmBudgetEditCallBack.BudgetEditCallBackPayables.PayablesInvoice	= PayablesInvoice
								invoked.PrmMode								= BudgetEditMode.Hard
								invoked.PrmBusinessClassName				= "PayablesInvoice"
								invoked.PrmEditContext              		= "Match"						
						
						else
							if (GeneralLedgerSystemCodeRel.EncumbranceOption.Track
							and PayablesInvoice.GLCommitRelExists)
								invoke EditTotalsRoute BudgetTemplateGroupTotal 	
									invoked.PrmFinanceEnterpriseGroup    		= Company.FinanceEnterpriseGroup
									invoked.PrmBudgetEditGroup           		= PayablesInvoice.UniqueID
									invoked.PrmMode								= BudgetEditMode.UpdateOnly
									invoked.PrmBusinessClassName				= "PayablesInvoice"
									invoked.PrmEditContext              		= "Match"						

							invoke FinishMatch				
											

		FinishMatch is an Instance Action
			Exit Rules



				invoke GetNextMatchObjectID Company
				OutMatchObjectID = Company.LastMatchObjectID


				
				if  (PayablesInvoice.MatchProcessType.ServiceContract)

					invoke FastUpdate ThisMatchWorkInvoiceRel
						invoked.Selected							= true	      

					initialize TaxDifference
					initialize MessageType
					initialize OutMatchStatus



					if   (ReconciliationChargebackIndicator
					or   (!ProcessMode.Reconciliation
					and   MatchRule.MatchRuleToleranceArray.MatchRuleToleranceGroup[1].CreateChargeback))

						CurrentPayablesInvoice				= PayablesInvoice
						
						if   (OutMatchStatus != 1
						and  (Difference3Amount > 0
						or    (MatchLevel.DetailMatch
						and    MatchRuleResult.AllToOne
						and    DetailDifference1Amount > 0)))
							include 670CreateChargeback
						else
						if   (MatchLevel.DetailMatch
						and   ProcessMode.Reconciliation
						and   ReconciliationChargebackIndicator)
							include 670CreateChargeback
							

						if  (ChargebackInvoice entered)
							invoke FastUpdate ThisMatchWorkInvoiceRel
								invoked.Chargeback						= true 
		
					CurrentPayablesInvoice					= PayablesInvoice
					include 4100ProcessInvoice




					

					initialize LocalAccruedTaxAmount
					if (!PayablesInvoice.TaxEntityUsesSabrix
					or   PayablesInvoice.CreditForRebill)
						for each CurrentInvoiceAccruedTaxDistributions
							if  (CurrentPayablesInvoiceRel.TaxAdjustment not entered
							or   CurrentPayablesInvoiceRel.TaxAdjustment.OverrideProductOnly
							or   CurrentPayablesInvoiceRel.TaxAdjustment.OverrideProductAndAOC
							or   CurrentPayablesInvoiceRel.TaxAdjustment.OverrideTaxablePOLine
							or   CurrentPayablesInvoiceRel.TaxAdjustment.OverrideTaxablePOAndAOC)
							    LocalAccruedTaxAmount += each.GLTransactionAmount







					if (Company.SummarizeDistribution.Summarize
					and PayablesInvoice.RetainageAccrualCode not entered)
						include CreateSummarizedDistributions
						invoke Purge LocalMatchWorkInvoiceDistributionsRel  

					ToleranceDistributions = true

					include 2000EditInvoiceTaxOB	


					if  (ChargebackInvoice entered)
	
						for each PayablesInvoiceDetailRel



			                if  (MatchReconQueue.LineChargebackSelected
			                and  !each.ReconDetailRel.CreateChargeback)
			                    NextSentence                            = true
			                else							
				                if  (each.ContractLine.ServiceCode.Amount

				                and  each.ContractLine.MaximumLineAmountInUse > each.ContractLine.LifetimeMaximumAmount) 

									ServiceLineChargebackUnitCost 		= each.ContractLine.LifetimeMaximumAmount - each.ContractLine.MaximumLineAmountInUse
									ServiceLineChargebackQuantity		= 1
									include 717BuildCbDetailsService
					
									invoke UpdateAmountsAndQuantities each.ContractLine
										invoked.InAmount				= ServiceLineChargebackUnitCost
										invoked.InQuantity				= 0
										invoked.InUOM					= each.EnteredUOM
										invoked.InDate					= PayablesInvoice.InvoiceDate
										invoked.InCurrency          	= PayablesInvoice.InvoiceCurrency
										invoked.FromMatch               = true
										if (each.TaxCode entered)
											invoked.InTaxAmount		= NewInvoiceDetail.TaxAmount
	
								if  (each.ContractLine.ServiceCode.Quantity)
									if  (each.EnteredUnitCost > each.ContractLine.DerivedMatchBaseCost)
										ServiceLineChargebackUnitCost 	= each.ContractLine.DerivedMatchBaseCost - each.EnteredUnitCost
										ServiceLineChargebackQuantity 	= each.EnteredQuantity
										include 717BuildCbDetailsService
					
										invoke UpdateAmountsAndQuantities each.ContractLine
											invoked.InAmount			= ServiceLineChargebackQuantity * ServiceLineChargebackUnitCost
											invoked.InQuantity			= 0
											invoked.InUOM				= each.EnteredUOM
											invoked.InDate				= PayablesInvoice.InvoiceDate
											invoked.InCurrency          = PayablesInvoice.InvoiceCurrency
											invoked.FromMatch           = true
											if (each.TaxCode entered)
												invoked.InTaxAmount		= NewInvoiceDetail.TaxAmount
	
									if  (each.ContractLine.QuantityOrdered > each.ContractLine.LifetimeMaximumQuantity)
										ServiceLineChargebackUnitCost	= each.ContractLine.DerivedMatchBaseCost
										ServiceLineChargebackQuantity 	= (each.ContractLine.LifetimeMaximumQuantity - each.ContractLine.QuantityOrdered)
										include 717BuildCbDetailsService
	
										invoke UpdateAmountsAndQuantities each.ContractLine
											invoked.InAmount			= ServiceLineChargebackQuantity * ServiceLineChargebackUnitCost
											invoked.InQuantity			= ServiceLineChargebackQuantity
											invoked.InUOM				= each.EnteredUOM
											invoked.InDate				= PayablesInvoice.InvoiceDate
											invoked.InCurrency          = PayablesInvoice.InvoiceCurrency
											invoked.FromMatch           = true
											if (each.TaxCode entered)
												invoked.InTaxAmount		= NewInvoiceDetail.TaxAmount

						if (MatchReconQueue.ChargebackIncludeAOC)
							for each PayablesInvoiceAddOnChargeRel

								if  (MatchReconQueue.LineChargebackSelected
								and  !each.ReconDetailRel.CreateChargeback)
									NextSentence                            = true
								else
									include 717BuildCbDetailsServiceAoc
	

						if (PayablesInvoice.MatchProcessType.ServiceContract)
							if (PayablesInvoice.HasMultipleServiceContracts)
								for each PayablesInvoice.MatchServiceContractInvoicesRel
									if (each.Contract.CreateCommitments.Line
									or  each.Contract.CreateCommitments.LineSpread)
										for each each.PayablesInvoiceDetailRel
											for each each.ContractLineDistributionsRel
												invoke FinishUpdateCommitments each
									else 
										invoke FinishUpdateContractAmounts each.Contract  
							else
								if (CurrentContractRel.CreateCommitments.Line
								or  CurrentContractRel.CreateCommitments.LineSpread)
									for each PayablesInvoice.PayablesInvoiceDetailRel
										for each each.ContractLineDistributionsRel
											invoke FinishUpdateCommitments each
								else 
									invoke FinishUpdateContractAmounts CurrentContractRel 

					ToleranceDistributions = true

					if  (CurrentPayablesInvoiceRel.IsChargeback
					and  CurrentPayablesInvoiceRel.PayablesInvoice.PayablesInvoiceTaxRel.TotalInvoicedTaxAmount entered)
						invoke FastUpdate CurrentPayablesInvoiceRel.PayablesInvoice
							invoked.TaxAmount	= CurrentPayablesInvoiceRel.PayablesInvoice.PayablesInvoiceTaxRel.TotalInvoicedTaxAmount



					if  (Company.InvoiceBalanceRoundingToleranceAmount entered
					and  !CurrentPayablesInvoiceRel.InvoiceType.CreditMemo)
			        	WorkDistributionGroup.Amount = CurrentPayablesInvoiceRel.InvoiceAmount.CurrencyAmount 

			        	WorkDistributionGroup.Amount -= CurrentPayablesInvoiceRel.POTaxAmount  

			        	WorkDistributionGroup.Amount -= (CurrentPayablesInvoiceRel.TaxAmount - CurrentPayablesInvoiceRel.POTaxAmount)  

			        	WorkDistributionGroup.Amount -= sum CurrentPayablesInvoiceRel.PayablesInvoiceDetailRel.TotalDistributionAmount

						WorkDistributionGroup.Amount -= sum CurrentPayablesInvoiceRel.PayablesInvoiceAddOnChargeRel.TotalDistributionAmount

						WorkDistributionGroup.Amount -= CurrentPayablesInvoiceRel.DerivedMatchAdditionalDistributionsAmount



	


						if (WorkDistributionGroup.Amount entered)
							LocalRoundingPercentAmount	= PayablesInvoice.InvoiceAmount.CurrencyAmount * Company.InvoiceBalanceRoundingTolerancePercent 
							RoundingDifferenceWithinTolerance = false
							if (Company.InvoiceBalanceRoundingToleranceCondition not entered)
				            	if  (Company.InvoiceBalanceRoundingToleranceAmount entered
						        and  WorkDistributionGroup.Amount <= Company.InvoiceBalanceRoundingToleranceAmount)
						        	RoundingDifferenceWithinTolerance = true
						        else
						        if  (Company.InvoiceBalanceRoundingTolerancePercent entered
						        and  WorkDistributionGroup.Amount <= LocalRoundingPercentAmount)
						            RoundingDifferenceWithinTolerance = true
							else		      
						    if (Company.InvoiceBalanceRoundingToleranceCondition.And)
						        if  (WorkDistributionGroup.Amount <= Company.InvoiceBalanceRoundingToleranceAmount
						        and  WorkDistributionGroup.Amount <= LocalRoundingPercentAmount)
						        	RoundingDifferenceWithinTolerance	= true
						    else  
						    if (Company.InvoiceBalanceRoundingToleranceCondition.Or)
						        if  (WorkDistributionGroup.Amount <= Company.InvoiceBalanceRoundingToleranceAmount
						        or   WorkDistributionGroup.Amount <= LocalRoundingPercentAmount)
						            RoundingDifferenceWithinTolerance = true

							if  (RoundingDifferenceWithinTolerance)
		

								WorkDistributionGroup.Account		= Company.InvoiceBalanceRoundingToleranceAccount
					
								initialize WorkDistributionGroup.AddOnCharge
								initialize WorkDistributionGroup.TaxCode
								initialize WorkAccrualCode
								initialize WorkDistributionGroup.TaxableAmount
				
								include 985InvoiceMatchTol
				
					if  (CurrentWorkInvoiceRel.PayablesInvoice.TaxAmount != CurrentWorkInvoiceRel.PayablesInvoice.PayablesInvoiceTaxRel.TotalInvoicedTaxAmount)  
						TaxDifference													= CurrentWorkInvoiceRel.PayablesInvoice.TaxAmount - CurrentWorkInvoiceRel.PayablesInvoice.PayablesInvoiceTaxRel.TotalInvoicedTaxAmount 
			      
						initialize WorkDistributionGroup.AddOnCharge
						initialize WorkDistributionGroup.TaxableAmount
		
						WorkDistributionGroup.Amount						= TaxDifference
						WorkDistributionGroup.TaxableAmount					= TaxDifference
						WorkDistributionGroup.TaxCode						= PayablesCompanyRel.TaxCode
						
						if  (PayablesCompanyRel.TaxRoundingAccount entered)
							WorkDistributionGroup.Account 					= PayablesCompanyRel.TaxRoundingAccount
						else
							WorkDistributionGroup.Account 					= CalculateTax.TaxTable.TaxTableOutput[1].TaxInputAccount
			      
						include 985InvoiceMatchTol
			       
						initialize TaxDifference

					include 690UpdateInvoice

				else
					include 600MatchUpdate


		AfterDetailSetAction is an Instance Action
			restricted
			Parameters
				PrmAutoMatchResult is an AutoMatchResult
			run in background
			Exit Rules

				LinkedAutoMatchResult = PrmAutoMatchResult
				include 600MatchUpdatePart2



				if  (MatchLevel.InvoiceMatch
				and (MatchRuleResult.AllToOne
				or   MatchRuleResult.AllToAll))
					NextSentence = true

		CreateFromRecon is a Create Action  
			restricted
			Exit Rules
				invoke RecreateWorkFiles
					invoked.BypassPurge = true

		CreateOnly is a Create Action  
			restricted

		RecreateWorkFiles is an Update Action  
			restricted
			bypass field rules
			Action Rules

				initialize LinkedAutoMatchResult
				BypassBuildWorkFileConstraints = true
				
				if (!BypassPurge)
					invoke PurgeDetail

				include UpdateDefaults 

				MatchLevel												= ReconciliationMatchLevel
				LocalMatchRuleToleranceGroup.InvoiceMatchLevel			= ReconciliationMatchLevel

				initialize LocalCounter
				for each PayablesInvoice.PayablesInvoiceDetailRel
					LocalCounter += 1
					if (LocalCounter > NumberOfLinesForSetAction)
						end for each

        		if (LocalCounter < NumberOfLinesForSetAction)
					for each PayablesInvoice.PayablesInvoiceAddOnChargeRel
		        		LocalCounter += 1
		        		if (LocalCounter > NumberOfLinesForSetAction)
		        			end for each

				initialize LocalPurchaseOrderReceipt
				if  (ProcessByMatchReference)
        			for each PurchaseOrderReceiptMatchReferenceRel
						if (each.IsOpen)
							LocalPurchaseOrderReceipt		= each.PurchaseOrderReceipt
							end for each
				else
					for each PayablesInvoice.MatchPurchaseOrderInvoicesRel
						for each each.PurchaseOrderReceiptRel
							if (each.IsOpen)
								LocalPurchaseOrderReceipt		= each.PurchaseOrderReceipt
								end for each


				if  (LocalCounter > NumberOfLinesForSetAction
				and  !PayablesInvoice.MatchProcessType.DropShip
				and  !PayablesInvoice.MatchProcessType.Service
				and  !PayablesInvoice.MatchProcessType.ServiceContract
				and  !PayablesInvoice.MatchProcessType.AOCOnly
	            and  !MemoInvoice
				and  !MatchLevel.InvoiceMatch
	            and   LocalPurchaseOrderReceipt entered)

					invoke FastUpdate PayablesInvoice
						invoked.BackgroundProcessing = 2 

					PerformCreateDetailsInSetAction = true

					include 304BuildWorkFiles


					if (PayablesInvoice.ServiceDetailsRel exists
					or  DropshipPurchaseOrdersRel exists)
						invoke CreateMatchWorkDetailsForServiceItems PurchaseOrderLine
							invoked.PrmCompany 		= Company
							invoked.PrmPurchaseOrder = PurchaseOrder
							if  (MultiplePurchaseOrders
							or   ProcessByMatchReference)
								invoked.PrmMultiplePOs = true 
							invoked.PrmVendor		= Vendor
							invoked.PrmInvoice 		= PayablesInvoice
							invoked.PrmMatchWork 	= MatchWork
							invoked.FromRecon		= true
							invoked.PoolOption		= PoolOption
							invoked.PrmInvoiceMatchLevel = LocalMatchRuleToleranceGroup.InvoiceMatchLevel
					else
						invoke CreateMatchWorkReceiptDetails PurchaseOrderReceiptLine
							invoked.PrmCompany 		= Company
							invoked.PrmPurchaseOrder = PurchaseOrder
							if  (MultiplePurchaseOrders
							or   ProcessByMatchReference)
								invoked.PrmMultiplePOs = true 
							invoked.PrmVendor		= Vendor
							invoked.PrmInvoice 		= PayablesInvoice
							invoked.PrmMatchWork 	= MatchWork
							invoked.FromRecon		= true
							invoked.PoolOption		= PoolOption
				else
	            	include 304BuildWorkFiles
					invoke FastUpdate PayablesInvoice
						initialize invoked.BackgroundProcessing

		ReconMatch is an Update Action
			bypass field rules
			completion message is "<CompletionMessage>"
			Entrance Rules











				if (PayablesInvoice.MatchPrepaymentMethod.PrepayFromInvoice)
					for each MatchWorkInvoiceRel
						CurrentPayablesInvoice              = each.PayablesInvoice

						ApMatchAmt = CurrentPayablesInvoiceRel.InvoiceAmount.CurrencyAmount - CurrentPayablesInvoiceRel.TaxAmount
						initialize WorkTotalAddOnCharge 

						for each CurrentPayablesInvoiceRel.PayablesInvoiceAddOnChargeRel
							ApMatchAmt -= each.TotalDistributionAmount 
							WorkTotalAddOnCharge += each.TotalDistributionAmount 
							ReconciliationOverrideDetail = false

						invoke FastUpdate CurrentWorkInvoiceRel 
							invoked.TotalAddOnChargeDistributionAmount  = WorkTotalAddOnCharge
							invoked.MatchAmount                         = ApMatchAmt
						invoke FastUpdate CurrentPayablesInvoiceRel 
							invoked.AddOnChargeAmount                   = WorkTotalAddOnCharge
							invoked.MatchAmount                         = ApMatchAmt


			Action Rules
				initialize VerifyMatchMessage
				include UpdateDefaults 
			
			Exit Rules






				if (!PayablesInvoice.TaxEntityUsesSabrix)
					invoke Update PayablesInvoice.PayablesInvoiceTaxRel
						invoked.TaxCode					= PayablesInvoice.TaxCode
						invoked.EnteredInvoiceAmount	= PayablesInvoice.InvoiceAmount.CurrencyAmount
						invoked.EnteredTaxAmount		= PayablesInvoice.TaxAmount	
						invoked.EnteredTaxableAmount	= PayablesInvoice.TaxableAmount

				initialize LocalCounter
				for each PayablesInvoice.PayablesInvoiceDetailRel
					LocalCounter += 1
					if (LocalCounter > NumberOfLinesForSetAction)
						end for each

        		if (LocalCounter < NumberOfLinesForSetAction)
					for each PayablesInvoice.PayablesInvoiceAddOnChargeRel
		        		LocalCounter += 1
		        		if (LocalCounter > NumberOfLinesForSetAction)
		        			end for each

				if  (LocalCounter > NumberOfLinesForSetAction)
					invoke FastUpdate PayablesInvoice
						invoked.BackgroundProcessing = 3 
				else
				if  (PayablesInvoice.TaxEntityUsesSabrix
				or   PayablesInvoice.CallVertexByDocument)
					invoke FastUpdate PayablesInvoice
						invoked.BackgroundProcessing = 3 

				if  (DocumentType.Invoice
				and  PayablesInvoice.DerivedNumberOfPurchaseOrders > 1)
					initialize PurchaseOrder

				Start = current timestamp	

				include EditMatch





				CompletionMessage = "MatchCompleted"
			
				include 100EditTran
	

				EditSystemCode.FinanceCodeBlock.ToAccountingEntity	= Company
				EditSystemCode.System								= "AP"
				EditSystemCode.PostingDate							= PayablesInvoice.DistributionDate
				EditSystemCode.SkipDateEdit							= true	
				LocalEditSystemCode									= EditSystemCode.PerformEditSystemCode
	

					






	
				if  (!MemoInvoice)
					include 400InvoiceMatchValidation

				if  (MatchSub1 not entered)
					MatchSub1 = 1
	
				if  (!MatchTestOK)
					OutMatchStatus							= 0
					OutTotalTransactionAmount				= PayablesInvoice.InvoiceAmount.CurrencyAmount
					OutTotalTransactionCount				= 1
					if  (MatchErrorTable.MatchErrorGroup[MatchSub1].MatchErrorMessage not entered) 
						MatchErrorTable.MatchErrorGroup[MatchSub1].MatchErrorMessage 	= MatchInvoiceErrorMessages.Msg250 
						MatchErrorTable.MatchErrorGroup[MatchSub1].MatchError			= true 
		
				constraint (!MatchErrorTable.MatchErrorGroup[MatchSub1].MatchError)
					"<MatchErrorTable.MatchErrorGroup[MatchSub1].MatchErrorMessage>"



		
				if ((!ProcessMode.Reconciliation
		        or    ReconciliationUpdate)
		        and   MatchTestOK
		        and  !MemoInvoice)

					invoke GetNextMatchObjectID Company
					OutMatchObjectID = Company.LastMatchObjectID


	
					if  (MatchWorkInvoiceDetailRel exists)
						InvoiceDetailKeyed												= true
					else
						InvoiceDetailKeyed												= false
						
					if  (MatchWorkInvoiceAddOnChargeRel exists)
						InvoiceAddOnChargeKeyed											= true
					else
						InvoiceAddOnChargeKeyed											= false

					if  (MatchRuleResult.AllToOne
					or   MatchRuleResult.AllToAll)
							for each MatchWorkInvoice set
								if  (each.Selected
								and  each.PayablesInvoice > LastPayablesInvoice)
									LastCompany						= each.Company
									LastPayablesInvoice				= each.PayablesInvoice

					for each MatchWorkInvoice set
						CurrentPayablesInvoice				= each.PayablesInvoice
						include 501ProcessMatapiwrk
						CurrentPayablesInvoice				= PayablesInvoice 

					if  (GeneralLedgerSystemCodeRel.EncumbranceOption.TrackAndEdit
					or   GeneralLedgerSystemCodeRel.EncumbranceOption.Track)
						NoBudgetChanges = true 
						for each BudgetTemplateGroupTotalRel
							if (each.Amount entered)
								NoBudgetChanges = false 
								end for each 
								
					if (GeneralLedgerCompanyRel.FinanceEnterpriseGroup.FrontEndSplits
					and PayablesInvoice.InvoiceType.Invoice)
						invoke SplitFESDistributions PayablesInvoiceDistribution in foreground
							invoked.PrmCompany			= Company
							invoked.PrmInvoice			= PayablesInvoice
							invoked.PrmInvokedFromMatch = true
						if (GeneralLedgerCompanyRel.FinanceEnterpriseGroup.UseFundedAmounts)
							include FESReleaseEdit
							
					if  (PayablesInvoice.TaxEntityUsesSabrix)

						if  (PayablesInvoice.OneSourceMatchOneCallPerInvoice)
							initialize DistribCount
						    for each PayablesInvoice.PayablesInvoiceDistributionDistributionTypeDistributionsRel
								DistribCount += 1
								if (DistribCount > PayablesInvoice.NumberOfLinesForOneSourceMatchProcessByInvoice)
								    end for each
								else
								if (each.DistributionAccount.ToAccountingEntity != PayablesInvoice.Company.AccountingEntity)
								    DistribCount = PayablesInvoice.NumberOfLinesForOneSourceMatchProcessByInvoice + 1
								    end for each



						if (PayablesInvoice.CreditForRebill)
							invoke OneSourceCreditRebillMatch PayablesInvoiceDistribution
							    invoked.PrmCompany = Company
							    invoked.PrmPayablesInvoice = PayablesInvoice
							    invoked.PrmFromRecon = true
							    invoked.PrmReconMatchWork = MatchWork
						else
						if  (PayablesInvoice.OneSourceMatchOneCallPerInvoice
						and  (DistribCount < PayablesInvoice.NumberOfLinesForOneSourceMatchProcessByInvoice))
							invoke LoadOneSourceForMatch PayablesInvoiceDistribution
							    invoked.PrmCompany = Company
							    invoked.PrmPayablesInvoice = PayablesInvoice
							    invoked.PrmFromRecon = true
							    invoked.PrmReconMatchWork = MatchWork
						else
						if (TaxConfigurationRel.OneSourceVersionType.Generic)
							invoke ProcessOneSourceForMatch PayablesInvoiceDetail
							    invoked.PrmCompany = Company
							    invoked.PrmPayablesInvoice = PayablesInvoice
							    invoked.PrmFromRecon = true
							    invoked.PrmReconMatchWork = MatchWork
						else
							invoke ProcessOneSourceForMatch PayablesInvoiceDistribution
							    invoked.PrmCompany = Company
							    invoked.PrmPayablesInvoice = PayablesInvoice
							    invoked.PrmFromRecon = true
							    invoked.PrmReconMatchWork = MatchWork

					else
					if  (PayablesInvoice.CallVertexByDocument
					and !PayablesInvoice.CreditForRebill
					and  PayablesInvoice.LastDistribution < PayablesInvoice.NumberOfLinesForVertexMatchProcessByInvoice)

						if  (PayablesInvoice.DetailCountExceedsVertexOneCallSetting
						and  !PayablesInvoice.HasUnprocessedThirdPartyTaxDetails)
							invoke ProcessVertexSet PayablesInvoiceDetail
								invoked.PrmCompany = Company
								invoked.PrmPayablesInvoice = PayablesInvoice
								invoked.PrmMatchFrom = 2 
								invoked.PrmReconMatchWork = MatchWork
						else 
							invoke ProcessVertexForMatch PayablesInvoiceDetail
								invoked.PrmCompany = Company
								invoked.PrmPayablesInvoice = PayablesInvoice
								invoked.PrmFromRecon = true
								invoked.PrmReconMatchWork = MatchWork
					else 
					if  (BypassBudgetEditIfNoDifferences   
					and (GeneralLedgerSystemCodeRel.EncumbranceOption.TrackAndEdit
					or   GeneralLedgerSystemCodeRel.EncumbranceOption.Track)
					and (POGeneralLedgerSystemCodeRel.EncumbranceOption.TrackAndEdit
					or   POGeneralLedgerSystemCodeRel.EncumbranceOption.Track)
					and  NoBudgetChanges)
						for each BudgetTemplateGroupTotalRel
							if (each.Scenario 		not = LocalScenario 
							or  each.BudgetTemplate not = LocalBudgetTemplate 
							or  each.BudgetTemplateGroupTotal.BudgetGroup 	not = LocalBudgetGroup)
								LocalFEG								= each.FinanceEnterpriseGroup
								LocalScenario							= each.Scenario
								LocalBudgetTemplate						= each.BudgetTemplate
								LocalBudgetGroup 						= each.BudgetTemplateGroupTotal.BudgetGroup
								LocalGeneralLedgerCalendarPeriod 		= each.BudgetTemplateGroupTotal.GeneralLedgerCalendarPeriod
								LocalGeneralLedgerCalendarYear 			= each.BudgetTemplateGroupTotal.GeneralLedgerCalendarYear 

								invoke Update LocalBudgetGroupTotalRel 
									invoked.BusinessClassName	= "PayablesInvoice"
									invoked.EditContext			= "Match"							
									invoked.PreviousAmount		= LocalBudgetGroupTotalRel.Amount 

						invoke Purge BudgetTemplateGroupTotalRel
						invoke FinishMatch 
					else 
					if  (PayablesInvoice.InvoiceType.MatchPrepayment)
						if (PayablesInvoice.GLCommitRelExists)
							invoke Delete PayablesInvoice.HeaderBudgetEditErrorRel 
							invoke Delete PayablesInvoice.DistributionBudgetEditErrorRel
							invoke EditTotalsRoute BudgetTemplateGroupTotal 	
								invoked.PrmFinanceEnterpriseGroup    		= Company.FinanceEnterpriseGroup
								invoked.PrmBudgetEditGroup           		= PayablesInvoice.UniqueID
								invoked.PrmMode								= BudgetEditMode.UpdateOnly
								invoked.PrmBusinessClassName				= "PayablesInvoice"
								invoked.PrmEditContext              		= "Match"
								
						invoke FinishMatch
					else
		        	if  (GeneralLedgerSystemCodeRel.EncumbranceOption.TrackAndEdit
			        and  PayablesInvoice.GLCommitRelExists)
		
						invoke FastUpdate PayablesInvoice					
		 					invoked.BudgetEditProcessing = PayablesInvoice.BudgetEditProcessing.InProcess                   
						invoke Delete PayablesInvoice.HeaderBudgetEditErrorRel 
						invoke Delete PayablesInvoice.DistributionBudgetEditErrorRel 
											
						invoke EditTotalsRoute BudgetTemplateGroupTotal 	
							invoked.PrmFinanceEnterpriseGroup    										= Company.FinanceEnterpriseGroup
							invoked.PrmBudgetEditGroup           										= PayablesInvoice.UniqueID
							invoked.PrmBudgetEditCallBack.BudgetEditCallBackPayables.PayablesCompany 	= Company
							invoked.PrmBudgetEditCallBack.BudgetEditCallBackPayables.PayablesInvoice	= PayablesInvoice
							invoked.PrmMode								= BudgetEditMode.Hard
							invoked.PrmBusinessClassName				= "PayablesInvoice"
							invoked.PrmEditContext              		= "Match"						

					else
						if (GeneralLedgerSystemCodeRel.EncumbranceOption.Track
						and PayablesInvoice.GLCommitRelExists)
							invoke EditTotalsRoute BudgetTemplateGroupTotal 	
								invoked.PrmFinanceEnterpriseGroup    		= Company.FinanceEnterpriseGroup
								invoked.PrmBudgetEditGroup           		= PayablesInvoice.UniqueID
								invoked.PrmMode								= BudgetEditMode.UpdateOnly
								invoked.PrmBusinessClassName				= "PayablesInvoice"
								invoked.PrmEditContext              		= "Match"						

						invoke FinishMatch				
										
									
		PurgeDetail is an Instance Action
			restricted
			Exit Rules
				invoke Purge MatchWorkInvoiceDetail set
				invoke Purge MatchWorkInvoiceAddOnCharge set
				for each MatchWorkInvoice set
					invoke PurgeDetail each
					invoke Purge each

				invoke Purge MatchWorkReceiptLineAOC set
				invoke Purge MatchWorkReceiptLine set
				for each MatchWorkReceipt set
					invoke PurgeDetail each
					invoke Purge each

				invoke Purge MatchWorkInvoiceDistribution set



						
		Update is an Update Action
			restricted
			bypass field rules

		CreateDistribution is an Instance Action
			restricted
			Parameters
				PrmWorkDistributionGroup is a MatchWorkDistributionGroup
				PrmHSNSACCode			 is a HSNSACCode
				
			Entrance Rules

				if  (WorkDistributionGroup.FinanceEnterpriseGroup not entered)
					WorkDistributionGroup.FinanceEnterpriseGroup = actor.context.FinanceEnterpriseGroup
			Action Rules
				BypassActiveCodeBlockEdit = true

				WorkDistributionGroup 	= PrmWorkDistributionGroup
				LocalPayablesInvoice	= WorkDistributionGroup.Invoice



				if (WorkDistributionGroup.FinanceEnterpriseGroup not entered)
					WorkDistributionGroup.FinanceEnterpriseGroup = Company.FinanceEnterpriseGroup				
			









				if  (PayablesInvoice.RetainageAccrualCode not entered
				or  (WorkDistributionGroup.AddOnCharge entered
				and !WorkDistributionGroup.RetainageLanded)
				or  (WorkDistributionGroup.TaxCode entered
				and  WorkDistributionGroup.AccrualFlag.Accrued)
				or  (WorkDistributionGroup.TaxCode entered
				and !WorkDistributionGroup.RetainageLanded))
					LocalDoRetainageDistribution						= false			
				else
					LocalDoRetainageDistribution 						= true	
	
					initialize GetRetainage
					GetRetainage.PurchaseOrder				= WorkDistributionGroup.PurchaseOrder
					GetRetainage.PurchaseOrderLine			= WorkDistributionGroup.PurchaseOrderLine
					GetRetainage.Contract					= WorkDistributionGroup.Contract
					GetRetainage.ContractLine				= WorkDistributionGroup.ContractLine
					LocalGetRetainage 						= GetRetainage.PerformGet

		
					if  (GetRetainage.RetainagePercent not entered
					and  LocalRetainagePercent entered)


						GetRetainage.RetainagePercent			= LocalRetainagePercent
		





				if  (!Company.SummarizeDistribution.Summarize
				or    PayablesInvoice.RetainageAccrualCode entered
				or    ToleranceDistributions
				or    WorkDistributionGroup.Asset entered
				or    WorkDistributionGroup.AssetTemplate entered)



					invoke CreateFromMatch PayablesInvoiceDistribution
						assign result to NewDistribution
						invoked.Company									= Company
						invoked.PayablesInvoice							= WorkDistributionGroup.Invoice
						invoked.DistributionType						= "D"
						invoked.BypassUpdatingInvoiceTotals				= true
						invoked.Status									= 1
						invoked.GLFinanceCodeBlock						= WorkDistributionGroup.Account	
						invoked.DistributionAccount						= WorkDistributionGroup.Account

						invoked.TaxCode									= WorkDistributionGroup.TaxCode
						if  (TaxEntityRel.ThirdParty.Sabrix
						and  WorkDistributionGroup.TaxCode entered)
							invoked.TaxType								= PayablesInvoice.PayablesInvoiceTaxRel.TaxMethod
						else
							invoked.TaxType								= WorkDistributionGroup.TaxType
						invoked.TaxRate									= WorkDistributionGroup.TaxRate
						invoked.ProductTaxCategory						= WorkDistributionGroup.ProductTaxCategory
						invoked.Imposition								= WorkDistributionGroup.Imposition

						invoked.PurchaseOrder							= WorkDistributionGroup.PurchaseOrder
						invoked.PurchaseOrderLine						= WorkDistributionGroup.PurchaseOrderLine
						invoked.PayablesInvoiceDetail					= WorkDistributionGroup.PayablesInvoiceDetail
						invoked.OriginalDistribution					= WorkDistributionGroup.OriginalDistribution


						invoked.AddOnCharge								= WorkDistributionGroup.AddOnCharge
						invoked.AccrualCode								= WorkDistributionGroup.AccrualCode
						invoked.MatchCreated							= "D"
						invoked.TransientAsset							= WorkDistributionGroup.Asset 
						invoked.TransientAssetTemplate					= WorkDistributionGroup.AssetTemplate
						if (WorkDistributionGroup.AssetTemplate entered)
							invoked.TransientItemQuantity 				= WorkDistributionGroup.ItemQuantity

						invoked.Description								= WorkDistributionGroup.Description
						invoked.TransientBypassErrorUpdate				= true
						invoked.BypassStructureRelationEdit				= true
	
						invoked.DistributionAmount.FunctionalAmount.EnteredCurrencyRate	= WorkDistributionGroup.CurrencyRate

						invoked.TransientOriginalPayablesInvoiceTaxableAmount 	= LocalWorkInvoiceRel.TaxableAmount
		   				invoked.TransientOriginalPayablesInvoiceTaxAmount		= LocalWorkInvoiceRel.TaxAmount
						invoked.HSNSACCode	                        	= PrmHSNSACCode
						if (WorkDistributionGroup.Asset entered
						or (!WorkDistributionGroup.LandedCost
						and WorkDistributionGroup.AssetTemplate entered))
							invoked.AssetFlag							= "A"
		
						if (!LocalDoRetainageDistribution)

							invoked.GLTransactionAmount					= WorkDistributionGroup.Amount

							invoked.TaxableAmount						= WorkDistributionGroup.TaxableAmount
							if (PayablesInvoice.InvoiceType.CreditMemo)
								invoked.UnitAmount						= WorkDistributionGroup.UnitAmount * -1
							else	
								invoked.UnitAmount						= WorkDistributionGroup.UnitAmount
						else
							LocalRetainageTranAmount					= WorkDistributionGroup.Amount * GetRetainage.RetainagePercent
							LocalRetainageTaxableAmount					= WorkDistributionGroup.TaxableAmount * GetRetainage.RetainagePercent
							LocalRetainageUnitAmount					= WorkDistributionGroup.UnitAmount * GetRetainage.RetainagePercent
		

							invoked.GLTransactionAmount					= WorkDistributionGroup.Amount - LocalRetainageTranAmount

							invoked.TaxableAmount						= WorkDistributionGroup.TaxableAmount - LocalRetainageTaxableAmount
							if (PayablesInvoice.InvoiceType.CreditMemo)
								invoked.UnitAmount						= ((WorkDistributionGroup.UnitAmount - LocalRetainageUnitAmount) * -1)
							else
								invoked.UnitAmount						= WorkDistributionGroup.UnitAmount - LocalRetainageUnitAmount



						

	
					if (LocalDoRetainageDistribution)

						invoke FastUpdate LocalWorkInvoiceRel
							invoked.TotalRetainageTranAmount				+= LocalRetainageTranAmount
						
						invoke CreateFromMatch PayablesInvoiceDistribution
							assign result to NewDistribution
							invoked.Company									= Company
							invoked.PayablesInvoice							= WorkDistributionGroup.Invoice
							invoked.DistributionType						= "D"
							invoked.BypassUpdatingInvoiceTotals				= true
							invoked.Status									= 1
							invoked.GLFinanceCodeBlock						= WorkDistributionGroup.Account	
							invoked.DistributionAccount						= WorkDistributionGroup.Account

							invoked.TaxCode									= WorkDistributionGroup.TaxCode
							if  (TaxEntityRel.ThirdParty.Sabrix
							and  WorkDistributionGroup.TaxCode entered)
								invoked.TaxType								= PayablesInvoice.PayablesInvoiceTaxRel.TaxMethod
							else
								invoked.TaxType								= WorkDistributionGroup.TaxType
							invoked.TaxRate									= WorkDistributionGroup.TaxRate
							invoked.ProductTaxCategory						= WorkDistributionGroup.ProductTaxCategory
							invoked.Imposition								= WorkDistributionGroup.Imposition

							invoked.PurchaseOrder							= WorkDistributionGroup.PurchaseOrder
							invoked.PurchaseOrderLine						= WorkDistributionGroup.PurchaseOrderLine
							invoked.PayablesInvoiceDetail					= WorkDistributionGroup.PayablesInvoiceDetail
							invoked.OriginalDistribution					= WorkDistributionGroup.OriginalDistribution


							invoked.AddOnCharge								= WorkDistributionGroup.AddOnCharge
							invoked.AccrualCode								= PayablesInvoice.RetainageAccrualCode
							invoked.MatchCreated							= "D"
							invoked.TransientBypassErrorUpdate				= true
							invoked.BypassStructureRelationEdit				= true
		
							invoked.DistributionAmount.FunctionalAmount.EnteredCurrencyRate	= WorkDistributionGroup.CurrencyRate
		
							if (WorkDistributionGroup.Asset entered
							or (!WorkDistributionGroup.LandedCost
							and WorkDistributionGroup.AssetTemplate entered))
								invoked.AssetFlag							= "A"
	

							invoked.GLTransactionAmount						= LocalRetainageTranAmount

							invoked.TaxableAmount							= LocalRetainageTaxableAmount
							if (PayablesInvoice.InvoiceType.CreditMemo)
								invoked.UnitAmount							= LocalRetainageUnitAmount * -1
							else
								invoked.UnitAmount							= LocalRetainageUnitAmount

							invoked.TransientOriginalPayablesInvoiceTaxableAmount 	= LocalWorkInvoiceRel.TaxableAmount
							invoked.TransientOriginalPayablesInvoiceTaxAmount		= LocalWorkInvoiceRel.TaxAmount
							invoked.Retainage								= true


















































				else

					invoke Create MatchWorkInvoiceDistribution
						invoked.MatchWork								= MatchWork
						invoked.Company									= Company
						invoked.PayablesInvoice							= WorkDistributionGroup.Invoice







						invoked.CurrencyRate							= WorkDistributionGroup.CurrencyRate
						invoked.DistributionAccount						= WorkDistributionGroup.Account
						invoked.TaxCode									= WorkDistributionGroup.TaxCode
						invoked.TaxType									= WorkDistributionGroup.TaxType
						invoked.TaxRate									= WorkDistributionGroup.TaxRate
						invoked.AccrualCode								= WorkDistributionGroup.AccrualCode
						invoked.Imposition								= WorkDistributionGroup.Imposition
	
						if (!LocalDoRetainageDistribution)
							invoked.DistributionAmount					= WorkDistributionGroup.Amount
							invoked.TaxableAmount						= WorkDistributionGroup.TaxableAmount
							if (PayablesInvoice.InvoiceType.CreditMemo)
								invoked.UnitAmount						= WorkDistributionGroup.UnitAmount * -1
							else	
								invoked.UnitAmount						= WorkDistributionGroup.UnitAmount
						else
							LocalRetainageTranAmount					= WorkDistributionGroup.Amount 		* GetRetainage.RetainagePercent
							LocalRetainageTaxableAmount					= WorkDistributionGroup.TaxableAmount * GetRetainage.RetainagePercent
							LocalRetainageUnitAmount					= WorkDistributionGroup.UnitAmount 	* GetRetainage.RetainagePercent
		
							invoked.DistributionAmount					= WorkDistributionGroup.Amount - LocalRetainageTranAmount
							invoked.TaxableAmount						= WorkDistributionGroup.TaxableAmount - LocalRetainageTaxableAmount
							if (PayablesInvoice.InvoiceType.CreditMemo)
								invoked.UnitAmount						= ((WorkDistributionGroup.UnitAmount - LocalRetainageUnitAmount) * -1)
							else
								invoked.UnitAmount						= WorkDistributionGroup.UnitAmount - LocalRetainageUnitAmount
	

					if (LocalDoRetainageDistribution)
						invoke Create MatchWorkInvoiceDistribution
							invoked.MatchWork								= MatchWork
							invoked.Company									= Company
							invoked.PayablesInvoice							= WorkDistributionGroup.Invoice







							invoked.CurrencyRate							= WorkDistributionGroup.CurrencyRate
							invoked.DistributionAccount						= WorkDistributionGroup.Account
							invoked.TaxCode									= WorkDistributionGroup.TaxCode
							invoked.TaxType									= WorkDistributionGroup.TaxType
							invoked.TaxRate									= WorkDistributionGroup.TaxRate
							invoked.AccrualCode								= PayablesInvoice.RetainageAccrualCode
							invoked.Imposition								= WorkDistributionGroup.Imposition
	
							invoked.DistributionAmount					= LocalRetainageTranAmount
							invoked.TaxableAmount						= LocalRetainageTaxableAmount
							if (PayablesInvoice.InvoiceType.CreditMemo)
								invoked.UnitAmount						= LocalRetainageUnitAmount * -1
							else	
								invoked.UnitAmount						= LocalRetainageUnitAmount
							invoked.Retainage							= true
		

		Delete is a Delete Action
			restricted
		Purge is a Purge Action
			restricted

		CleanupMatchedInvoiceWorkFiles is a Set Action
			completion message is "<CleanupCount>InvoicesCleanedUp"
			Parameters
				PrmCompany is like PayablesCompany
			Local Fields
				CleanupCount is Numeric 9
				Skip is Boolean
			Instance Selection
				where (Company = PrmCompany
				and   (PayablesInvoice.HasBeenMatched
				or     PayablesInvoice.Status.Cancelled)
				and   !PayablesInvoice.BackgroundProcessing entered)

			Action Rules
				Instance Rules

					if (!PayablesInvoice.UnreleasedDistributionsRel exists
					and !PayablesInvoice.first PayablesInvoicePaymentRel.Status.Unreleased)
						Skip = false
	
						if  (MatchLevel.InvoiceMatch
						and (MatchRuleResult.AllToOne
						or   MatchRuleResult.AllToAll))
							for each MatchWorkInvoiceRel
								if  (!each.PayablesInvoice.HasBeenMatched
								and  !each.PayablesInvoice.Status.Cancelled)
									Skip = true
	
						if (!Skip)

							CleanupCount += 1
							invoke PurgeDetail 
							invoke PurgeSetsAndResourceRecords PayablesInvoice.MatchReconQueueRel
							invoke Purge 
 
				       
				
				     
