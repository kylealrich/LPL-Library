ContractRebateLoyaltyQualifier is a BusinessClass
    owned by po
    prefix is CRLQ

    Ontology
    	symbolic key is ContractRebateLoyaltyQualifier
    		    	
    Persistent Fields
    	LoyaltyPercentToReach				is a Percent
    	LoyaltyAmountToReach				is an InternationalAmount
     	LoyaltyUnitsToReach					is an InternationalAmount
   		RebatePercentToBePaid				is a Percent
    	RebateAmountToBePaid				is an InternationalAmount
    	RebateAmountPerUnitToBePaid			is an InternationalAmount
    	
    Transient Fields
    	LoyaltyQualifierArray
    	ArrayCount 							is Numeric size 3
    	QualifierFound						is Boolean
    	
    Derived Fields
    	ConvertedLoyaltyPercent 	is a ComputeField
    		type is Decimal size 5.2
    		restricted
   			(LoyaltyPercentToReach * 100)
   			
		DerivedLoyaltyPercent is a StringField
			type is Alpha 8
			restricted			
			ConvertedLoyaltyPercent
			"%"
   			
		DerivedLoyaltyAmount is a StringField
			type is Alpha 19
			restricted			
			LoyaltyAmountToReach

		NumberOfAllLoyaltyQualifiers is a ComputeField
			type is Numeric 3
			restricted
			(instance count of ContractRebateLoyaltyQualifierRel)
				
    	NextQualifier is a ComputeField
    		type is Numeric size 3
    		restricted
   			(ArrayCount + 1)
				
    	PreviousQualifier is a ComputeField
    		type is Numeric size 3
    		restricted
   			(ArrayCount - 1)
			
	Sets
		ByRebatePercentToBePaid
			duplicates
			Sort Order
				ContractGroup
				Contract
				ContractRebate
				RebatePercentToBePaid
				ContractRebateLoyaltyQualifier
				
		ByRebateAmountToBePaid
			duplicates
			Sort Order
				ContractGroup
				Contract
				ContractRebate
				RebateAmountToBePaid
				ContractRebateLoyaltyQualifier
			
		ByLoyaltyPercentToReachDescending
			duplicates
			Sort Order
				ContractGroup
				Contract
				ContractRebateType
				ContractRebate
				LoyaltyPercentToReach descending
				ContractRebateLoyaltyQualifier
				
		ByLoyaltyAmountToReachDescending
			duplicates
			Sort Order
				ContractGroup
				Contract
				ContractRebateType
				ContractRebate
				LoyaltyAmountToReach descending
				ContractRebateLoyaltyQualifier
			
		ByLoyaltyUnitsToReachDescending
			duplicates
			Sort Order
				ContractGroup
				Contract
				ContractRebateType
				ContractRebate
				LoyaltyUnitsToReach descending
				ContractRebateLoyaltyQualifier
			
    Relations
		LoyaltyByPercentToReachRel
			one-to-many relation to ContractRebateLoyaltyQualifier
			Field Mapping uses symbolic key
				related.ContractGroup					= ContractGroup
				related.Contract						= Contract
				related.ContractRebateType		    	= ContractRebateType
				related.ContractRebate					= blank
            Instance Selection
				where ((related.LoyaltyPercentToReach > 0)
				and    (related.ContractRebateLoyaltyQualifier != ContractRebateLoyaltyQualifier))

		LoyaltyByAmountToReachRel
			one-to-many relation to ContractRebateLoyaltyQualifier
			Field Mapping uses symbolic key
				related.ContractGroup					= ContractGroup
				related.Contract						= Contract
				related.ContractRebateType		    	= ContractRebateType
				related.ContractRebate					= blank
            Instance Selection
				where ((related.LoyaltyAmountToReach > 0)
				and    (related.ContractRebateLoyaltyQualifier != ContractRebateLoyaltyQualifier))

		LoyaltyByUnitsToReachRel
			one-to-many relation to ContractRebateLoyaltyQualifier
			Field Mapping uses symbolic key
				related.ContractGroup					= ContractGroup
				related.Contract						= Contract
				related.ContractRebateType		    	= ContractRebateType
				related.ContractRebate					= blank
            Instance Selection
				where ((related.LoyaltyUnitsToReach > 0)
				and    (related.ContractRebateLoyaltyQualifier != ContractRebateLoyaltyQualifier))

		RebateAmountToBePaidRel
			one-to-many relation to ContractRebateLoyaltyQualifier
			Field Mapping uses symbolic key
				related.ContractGroup					= ContractGroup
				related.Contract						= Contract
				related.ContractRebateType		    	= ContractRebateType
				related.ContractRebate					= blank
            Instance Selection
				where (related.RebateAmountToBePaid > 0
				and    related.ContractRebateLoyaltyQualifier != ContractRebateLoyaltyQualifier)

		RebatePercentToBePaidRel
			one-to-many relation to ContractRebateLoyaltyQualifier
			Field Mapping uses symbolic key
				related.ContractGroup					= ContractGroup
				related.Contract						= Contract
				related.ContractRebateType		    	= ContractRebateType
				related.ContractRebate					= blank
            Instance Selection
				where (related.RebatePercentToBePaid > 0
				and    related.ContractRebateLoyaltyQualifier != ContractRebateLoyaltyQualifier)

		ContractRebateLoyaltyQualifierRel
			one-to-many relation to ContractRebateLoyaltyQualifier
			Field Mapping uses symbolic key
				related.ContractGroup					= ContractGroup
				related.Contract						= Contract
				related.ContractRebateType		    	= ContractRebateType
				related.ContractRebate					= blank
    
    Conditions
    	LoyaltyPercentToReachEntered
			restricted
    		when (ContractRebate.ContractRebateLoyaltyQualifiersByPercentDescendingRel exists)
    	LoyaltyAmountToReachEntered
			restricted
    		when (ContractRebate.ContractRebateLoyaltyQualifiersByAmountDescendingRel exists)
    	LoyaltyUnitsToReachEntered
			restricted
    		when (ContractRebate.ContractRebateLoyaltyQualifiersByUnitsDescendingRel exists)
    	LoyaltyAmountToReachNotEntered
    		restricted
    		when (!LoyaltyByAmountToReachRel exists)
    	RebateAmountToBePaidEntered
			restricted
    		when (ContractRebate.ContractRebateLoyaltyQualifiersRebateAmountToBePaidRel exists)
    	RebateAmountToBePaidNotEntered
    		restricted
    		when (!RebateAmountToBePaidRel exists)
    	EitherPercentOrAmountOrUnitsRequired
			restricted
    		when (LoyaltyPercentToReach > 0
    		or    LoyaltyAmountToReach > 0
    		or    LoyaltyUnitsToReach > 0)
    	RebatePercentToBePaidEntered
			restricted
    		when (ContractRebate.ContractRebateLoyaltyQualifiersRebatePercentToBePaidRel exists)
    	RebatePercentToBePaidNotEntered
    		restricted
    		when (!RebatePercentToBePaidRel exists)
    	RebateAmountPerUnitToBePaidEntered
			restricted
    		when (ContractRebate.ContractRebateLoyaltyQualifiersRebateAmountPerUnitToBePaidRel exists)
    	AmountType
			restricted
    		when (ContractRebate.first ContractRebateQualifierRel.SpendType.Amount)
    	UnitsType
    		restricted
    		when (ContractRebate.first ContractRebateQualifierRel.SpendType.Units)

	Field Rules
		LoyaltyPercentToReach
			if (LoyaltyPercentToReach entered)
				constraint (LoyaltyAmountToReach = 0)
					"CannotEnterBothPercentAndAmountToReach"
				constraint (LoyaltyUnitsToReach = 0)
					"CannotEnterBothPercentAndUnitsToReach"
				constraint (!LoyaltyAmountToReachEntered)
					"LoyaltyQualifiersByAmountToReachAlreadyExist;CannotMixBothPercentsAndAmountsToReach"
				constraint (!LoyaltyUnitsToReachEntered)
					"LoyaltyQualifiersByUnitsToReachAlreadyExist;CannotMixBothPercentsAndUnitsToReach"

		LoyaltyAmountToReach
			if (LoyaltyAmountToReach entered)
				constraint (LoyaltyPercentToReach = 0)
					"CannotEnterBothAmountAndPercentToReach"
				constraint (LoyaltyUnitsToReach = 0)
					"CannotEnterBothAmountAndUnitsToReach"
				constraint (!LoyaltyPercentToReachEntered)
					"LoyaltyQualifiersByPercentAlreadyExist;CannotMixBothAmountsAndPercents"
				constraint (!LoyaltyUnitsToReachEntered)
					"LoyaltyQualifiersByUnitsToReachAlreadyExist;CannotMixBothAmountsAndUnitsToReach"

		LoyaltyUnitsToReach
			if (LoyaltyUnitsToReach entered)
				constraint (LoyaltyPercentToReach = 0)
					"CannotEnterBothUnitsAndPercentToReach"
				constraint (LoyaltyAmountToReach = 0)
					"CannotEnterBothUnitsAndAmountToReach"
				constraint (!LoyaltyPercentToReachEntered)
					"LoyaltyQualifiersByPercentAlreadyExist;CannotMixBothUnitsAndPercents"
				constraint (!LoyaltyAmountToReachEntered)
					"LoyaltyQualifiersByAmountToReachAlreadyExist;CannotMixBothUnitsAndAmountsToReach"

		RebatePercentToBePaid
			if (RebatePercentToBePaid > 0)
				constraint (RebateAmountToBePaid = 0)
					"CannotEnterBothRebatePercentToBePaidAndRebateAmountToBePaidForLoyaltyQualifier"
				constraint (RebateAmountPerUnitToBePaid = 0)
					"CannotEnterBothRebatePercentToBePaidAndRebateAmountPerUnitToBePaidForLoyaltyQualifier"
			constraint (!RebateAmountToBePaidEntered)
				"LoyaltyQualifiersForRebateAmountToBePaidAlreadyExist;CannotMixBothRebatePercentsAndRebateAmountsToBePaid"
			constraint (!RebateAmountPerUnitToBePaidEntered)
				"LoyaltyQualifiersForRebateAmountPerUnitToBePaidAlreadyExist;CannotMixBothRebatePercentsAndRebateAmountsPerUnitToBePaid"

		RebateAmountToBePaid
			if (RebateAmountToBePaid > 0)
				constraint (RebatePercentToBePaid = 0)
					"CannotEnterBothRebatePercentToBePaidAndRebateAmountToBePaidForLoyaltyQualifier"
				constraint (RebateAmountPerUnitToBePaid = 0)
					"CannotEnterBothRebateAmountPerUnitToBePaidAndRebateAmountToBePaidForLoyaltyQualifier"
			constraint (!RebatePercentToBePaidEntered)
				"LoyaltyQualifiersForRebatePercentToBePaidAlreadyExist;CannotMixBothRebateAmountsAndRebatePercentsToBePaid"
			constraint (!RebateAmountPerUnitToBePaidEntered)
				"LoyaltyQualifiersForRebateAmountPerUnitToBePaidAlreadyExist;CannotMixBothRebateAmountsAndRebateAmountsPerUnitToBePaid"
			               
		RebateAmountPerUnitToBePaid
			if (RebateAmountPerUnitToBePaid > 0)
				constraint (RebatePercentToBePaid = 0)
					"CannotEnterBothRebatePercentToBePaidAndRebateAmountPerUnitToBePaidForLoyaltyQualifier"
				constraint (RebateAmountToBePaid = 0)
					"CannotEnterBothRebateAmountToBePaidAndRebateAmountPerUnitToBePaidForLoyaltyQualifier"
			constraint (!RebatePercentToBePaidEntered)
				"LoyaltyQualifiersForRebatePercentToBePaidAlreadyExist;CannotMixBothRebateAmountsPerUnitAndRebatePercentsToBePaid"
			constraint (!RebateAmountToBePaidEntered)
				"LoyaltyQualifiersForRebateAmountToBePaidAlreadyExist;CannotMixBothRebateAmountsPerUnitAndRebateAmountsToBePaid"
			               
	Actions
		Create is a Create Action
    		valid when (Contract.CanAmend)
			Action Rules
    			constraint (Contract.CanAmend)
    				"ContractMustBeInDraftOrAddendumOrAmendmentStatusToAddLoyaltyRebateQualifier"   	
    			constraint (ContractRebate.Active)
    				"ContractRebateMustBeActiveToAddRebateLoyaltyQualifiers"
				constraint (EitherPercentOrAmountOrUnitsRequired)
					"_Rebate_PercentToReach,_Rebate_AmountToReachOr_Rebate_UnitsToReachIsRequired"
				if (RebatePercentToBePaid > 0)
					constraint (RebatePercentToBePaid > last ContractRebateLoyaltyQualifierRel.RebatePercentToBePaid)
						"RebatePercentToBePaidMustGrowFromOneLoyaltyQualifierToTheNext"
				else
				if (RebateAmountToBePaid > 0)
					constraint (RebateAmountToBePaid > last ContractRebateLoyaltyQualifierRel.RebateAmountToBePaid)
						"RebateAmountToBePaidMustGrowFromOneLoyaltyQualifierToTheNext"
				else
				if (RebateAmountPerUnitToBePaid > 0)
					constraint (RebateAmountPerUnitToBePaid > last ContractRebateLoyaltyQualifierRel.RebateAmountPerUnitToBePaid)
						"RebateAmountPerUnitToBePaidMustGrowFromOneLoyaltyQualifierToTheNext"
						
    		Exit Rules
    			invoke SetQualifierChangedFlagToYes ContractRebate

		Update is an Update Action
    		valid when (Contract.CanAmend)
			Action Rules
    			constraint (Contract.CanAmend)
    				"ContractMustBeInDraftOrAddendumOrAmendmentStatusToModifyLoyaltyRebateQualifier"
    			constraint (ContractRebate.Active)
    				"ContractRebateMustBeActiveToModifyRebateLoyaltyQualifiers"
				constraint (EitherPercentOrAmountOrUnitsRequired)
					"_Rebate_PercentToReach,_Rebate_AmountToReachOr_Rebate_UnitsToReachIsRequired"
				invoke BuildLoyaltyArray
				invoke PositionWithinLoyaltyArray
				invoke EditLoyaltyArray
		
    		Exit Rules
    			invoke SetQualifierChangedFlagToYes ContractRebate
		
		Delete is a Delete Action
    		valid when (Contract.CanAmend)
			Action Rules
    			constraint (Contract.CanAmend)
    				"ContractMustBeInDraftOrAddendumOrAmendmentStatusToDeleteLoyaltyRebateQualifier"
    			constraint (ContractRebate.Active)
    				"ContractRebateMustBeActiveToDeleteRebateLoyaltyQualifiers"
    				
    		Exit Rules
    			invoke SetQualifierChangedFlagToYes ContractRebate

    	BuildLoyaltyArray is an Instance Action
    		restricted
    		Action Rules
    			initialize LoyaltyQualifierArray
    			initialize ArrayCount
    			for each ContractRebateLoyaltyQualifierRel
    				ArrayCount += 1
    				LoyaltyQualifierArray.LoyaltyQualifier[ArrayCount].QualifierSeq 		 	= each.ContractRebateLoyaltyQualifier
    				LoyaltyQualifierArray.LoyaltyQualifier[ArrayCount].LoyaltyPercentToReach  	= each.LoyaltyPercentToReach
    				LoyaltyQualifierArray.LoyaltyQualifier[ArrayCount].LoyaltyAmountToReach		= each.LoyaltyAmountToReach
					LoyaltyQualifierArray.LoyaltyQualifier[ArrayCount].RebatePercentToBePaid 	= each.RebatePercentToBePaid
    				LoyaltyQualifierArray.LoyaltyQualifier[ArrayCount].RebateAmountToBePaid 	= each.RebateAmountToBePaid

    	PositionWithinLoyaltyArray is an Instance Action
    		restricted
    		Action Rules
				initialize ArrayCount
				QualifierFound = false
     			while (!QualifierFound and ArrayCount < NumberOfAllLoyaltyQualifiers)
     				for each LoyaltyQualifierArray.LoyaltyQualifier
    					ArrayCount += 1
     					if (each.QualifierSeq = ContractRebateLoyaltyQualifier)
							QualifierFound = true
							end for each

    	EditLoyaltyArray is an Instance Action
    		restricted
    		Action Rules
				if (QualifierFound)
					if (ArrayCount > 1)	
						if (RebatePercentToBePaid > 0)
							constraint (RebatePercentToBePaid > LoyaltyQualifierArray.LoyaltyQualifier[PreviousQualifier].RebatePercentToBePaid)
								"RebatePercentToBePaidMustGrowFromOneLoyaltyQualifierToTheNext"
						else
						if (RebateAmountToBePaid > 0)
							constraint (RebateAmountToBePaid > LoyaltyQualifierArray.LoyaltyQualifier[PreviousQualifier].RebateAmountToBePaid)
								"RebateAmountToBePaidMustGrowFromOneLoyaltyQualifierToTheNext"
						else
						if (RebateAmountPerUnitToBePaid > 0)
							constraint (RebateAmountPerUnitToBePaid > LoyaltyQualifierArray.LoyaltyQualifier[PreviousQualifier].RebateAmountPerUnitToBePaid)
								"RebateAmountPerUnitToBePaidMustGrowFromOneLoyaltyQualifierToTheNext"

					if (ArrayCount < NumberOfAllLoyaltyQualifiers)
						if (RebatePercentToBePaid > 0)
							constraint (RebatePercentToBePaid < LoyaltyQualifierArray.LoyaltyQualifier[NextQualifier].RebatePercentToBePaid)
								"RebatePercentToBePaidMustGrowFromOneLoyaltyQualifierToTheNext"
						else
						if (RebateAmountToBePaid > 0)
							constraint (RebateAmountToBePaid < LoyaltyQualifierArray.LoyaltyQualifier[NextQualifier].RebateAmountToBePaid)
								"RebateAmountMustGrowFromOneLoyaltyQualifierToTheNext"
						else
						if (RebateAmountPerUnitToBePaid > 0)
							constraint (RebateAmountPerUnitToBePaid < LoyaltyQualifierArray.LoyaltyQualifier[PreviousQualifier].RebateAmountPerUnitToBePaid)
								"RebateAmountPerUnitToBePaidMustGrowFromOneLoyaltyQualifierToTheNext"
								
