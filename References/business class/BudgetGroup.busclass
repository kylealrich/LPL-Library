BudgetGroup is a BusinessClass
	owned by GeneralLedger
	prefix is BUDGG   
   
    Ontology
    	symbolic key is BudgetGroup

    Patterns
 		disable Auditing 
 		disable EffectiveDated

    Persistent Fields

        AccountingEntity

        AccountingUnit

        GeneralLedgerChartAccount
        	default label is "GlobalLedgerChartAccount" 

        Project

        FinanceDimension1

        FinanceDimension2

        FinanceDimension3

        FinanceDimension4

        FinanceDimension5

        FinanceDimension6

        FinanceDimension7

        FinanceDimension8

        FinanceDimension9

        FinanceDimension10 

        	
        RecalculateTotals				is Boolean
        Cluster							is Numeric 3
        
        ErrorFlag						is Boolean
        CheckPeriod						is like GeneralLedgerCalendarPeriod
        CheckPercent					is Percent 8.4
        
        LazyInitialized					is Boolean
        	default label is "SelectiveInitialized"
        LazyInitializing				is Boolean
		LazyStage						is Numeric size 8
        InitializedFromReleasedTransactions	is Boolean
		HasUnreleasedGLTransaction		is Boolean
		HasUnreleasedCommit				is Boolean
		HasReleasedCommit				is Boolean
		HasUnreleasedChange				is Boolean	
		
		CreateCounter					is Numeric 12

    Transient Fields
		
	Local Fields
		LocalCount 						is Numeric 9
		ExpectedCurrency				is a Currency
		LocalCalendar					is a GeneralLedgerCalendar
		GeneralLedgerCalendarPeriod
		BudgetGroupAmount
		BudgetGroupTotal
		PreviousAmount					is like InternationalAmount
		BudgetCodeBlock
		LocalCubeCommitmentData			is Text
		LocalCommitmentData				is Text
		LocalData						is like TotalAmount 
		LocalCheckPercent				is Percent 8.4
		LocalTimestamp					is TimeStamp
		LocalQuote						is Alpha 1
		RelationName					is Alpha 50
		FullRelationName				is Alpha 100
		LedgerCount						is Numeric 4
		LocalLastTimeStamp				is TimeStamp 
		LocalCurrentTimeStamp			is TimeStamp
		LocalElapsedTime				is Numeric size 12
		LocalReverseCommitmentAmount	is Boolean
		LocalUseGeneralLedgerPeriod		is Boolean		
		LocalUREOnChartAccount			is a GeneralLedgerChartAccount

	Derived Fields
        DimensionCode        is a StringField
            type is Alpha 105
            restricted
            AccountingEntity.DerivedSequenceNumber
            AccountingUnit.DerivedSequenceNumber
            GeneralLedgerChartAccount.DerivedSequenceNumber
            Project.DerivedSequenceNumber
			FinanceDimension1.DerivedSequenceNumber
			FinanceDimension2.DerivedSequenceNumber
			FinanceDimension3.DerivedSequenceNumber
			FinanceDimension4.DerivedSequenceNumber
			FinanceDimension5.DerivedSequenceNumber
			FinanceDimension6.DerivedSequenceNumber
			FinanceDimension7.DerivedSequenceNumber
			FinanceDimension8.DerivedSequenceNumber
			FinanceDimension9.DerivedSequenceNumber
			FinanceDimension10.DerivedSequenceNumber

		TemplateNeedsRecalculation			is a DerivedField
			type is Boolean
			if (!BudgetTemplate.HasRecalculate)
				return false
			if (AccountingUnit entered
			and RecalculateContainingAccountingUnitRel exists)
				return true
			if (Project entered
			and RecalculateContainingProjectRel exists)
				return true
			if (GeneralLedgerChartAccount entered
			and RecalculateContainingAccountRel exists)
				return true
			if (FinanceDimension1 entered
			and RecalculateContainingDimension1Rel exists)
				return true
			if (FinanceDimension2 entered
			and RecalculateContainingDimension2Rel exists)
				return true
			if (FinanceDimension3 entered
			and RecalculateContainingDimension3Rel exists)
				return true
			if (FinanceDimension4 entered
			and RecalculateContainingDimension4Rel exists)
				return true
			if (FinanceDimension5 entered
			and RecalculateContainingDimension5Rel exists)
				return true
			if (FinanceDimension6 entered
			and RecalculateContainingDimension6Rel exists)
				return true
			if (FinanceDimension7 entered
			and RecalculateContainingDimension7Rel exists)
				return true
			if (FinanceDimension8 entered
			and RecalculateContainingDimension8Rel exists)
				return true
			if (FinanceDimension9 entered
			and RecalculateContainingDimension9Rel exists)
				return true
			if (FinanceDimension10 entered
			and RecalculateContainingDimension10Rel exists)
				return true
			return false
		NeedsRecalculation		is a DerivedField
			type is Boolean
			if (RecalculateTotals)
				return true
			if (TemplateNeedsRecalculation)
				return true
			return false
		DerivedCurrency		is a DerivedField
			type is AlphaUpper size 5
			if (BudgetTemplate.UseCurrency.EntityFunctional)
				return AccountingEntity.FunctionalCurrency


















			else
			if (BudgetTemplate.UseCurrency.Project)
				return Project.Currency
			else
			if (BudgetTemplate.UseCurrency.Report1)
				return FinanceEnterpriseGroup.ReportCurrencyOne
			else
			if (BudgetTemplate.UseCurrency.Report2)
				return FinanceEnterpriseGroup.ReportCurrencyTwo
			else
			if (BudgetTemplate.UseCurrency.Report3)
				return FinanceEnterpriseGroup.ReportCurrencyThree
			else
			if (BudgetTemplate.UseCurrency.Report4)
				return FinanceEnterpriseGroup.ReportCurrencyFour
			else
			if (BudgetTemplate.UseCurrency.Report5)
				return FinanceEnterpriseGroup.ReportCurrencyFive
				
		CurrencyDecimals is a DerivedField
			type is Numeric 1
			ExpectedCurrency = DerivedCurrency
			return ExpectedCurrency.NumberOfDecimals
			
		BudgetCubeMap is a DerivedField
			type is LPLText
			restricted
			if (AccountingEntity entered)
				BudgetCubeMap += "related.AccountingEntity = AccountingEntity\n"
			else
				if (Scenario.HasAccountingEntity)
					BudgetCubeMap += "related.AccountingEntity = Scenario.Basis.AccountingEntityTopNode\n"
			if (AccountingUnit entered)
				BudgetCubeMap += "related.GeneralLedgerTotal.AccountingUnit = AccountingUnit\n"
			else
				if (Scenario.HasPostingAccountingUnit and !BudgetTemplate.AllowBlankAccountingUnit)
					BudgetCubeMap += "related.GeneralLedgerTotal.AccountingUnit = Scenario.Basis.AccountingUnitStructure.AccountingUnitTopNodeGroup.DimensionNode\n"
			if (GeneralLedgerChartAccount entered)
				BudgetCubeMap += "related.GeneralLedgerTotal.GeneralLedgerChartAccount = GeneralLedgerChartAccount\n"
			else
				if (Scenario.HasPostingAccount)
					BudgetCubeMap += "related.GeneralLedgerTotal.GeneralLedgerChartAccount = Scenario.Basis.ReportingChart.ChartAccountNode\n"
			if (Project entered)
				BudgetCubeMap += "related.GeneralLedgerTotal.Project = Project\n"
			else
				if (Scenario.HasPostingProject and !BudgetTemplate.AllowBlankProject)
					BudgetCubeMap += "related.GeneralLedgerTotal.Project = Scenario.Basis.ProjectStructure.ProjectNode\n"
			if (FinanceDimension1 entered)
				BudgetCubeMap += "related.FinanceDimension1 = FinanceDimension1\n"
			else
				if (Scenario.HasPostingDimension1 and !BudgetTemplate.AllowBlankDimension1)
					BudgetCubeMap += "related.FinanceDimension1 = Scenario.Basis.FinanceDimension1Structure.DimensionNode\n"
			if (FinanceDimension2 entered)
				BudgetCubeMap += "related.FinanceDimension2 = FinanceDimension2\n"
			else
				if (Scenario.HasPostingDimension2 and !BudgetTemplate.AllowBlankDimension2)
					BudgetCubeMap += "related.FinanceDimension2 = Scenario.Basis.FinanceDimension2Structure.DimensionNode\n"
			if (FinanceDimension3 entered)
				BudgetCubeMap += "related.FinanceDimension3 = FinanceDimension3\n"
			else
				if (Scenario.HasPostingDimension3 and !BudgetTemplate.AllowBlankDimension3)
					BudgetCubeMap += "related.FinanceDimension3 = Scenario.Basis.FinanceDimension3Structure.DimensionNode\n"
			if (FinanceDimension4 entered)
				BudgetCubeMap += "related.FinanceDimension4 = FinanceDimension4\n"
			else
				if (Scenario.HasPostingDimension4 and !BudgetTemplate.AllowBlankDimension4)
					BudgetCubeMap += "related.FinanceDimension4 = Scenario.Basis.FinanceDimension4Structure.DimensionNode\n"
			if (FinanceDimension5 entered)
				BudgetCubeMap += "related.FinanceDimension5 = FinanceDimension5\n"
			else
				if (Scenario.HasPostingDimension5 and !BudgetTemplate.AllowBlankDimension5)
					BudgetCubeMap += "related.FinanceDimension5 = Scenario.Basis.FinanceDimension5Structure.DimensionNode\n"
			if (FinanceDimension6 entered)
				BudgetCubeMap += "related.FinanceDimension6 = FinanceDimension6\n"
			else
				if (Scenario.HasPostingDimension6 and !BudgetTemplate.AllowBlankDimension6)
					BudgetCubeMap += "related.FinanceDimension6 = Scenario.Basis.FinanceDimension6Structure.DimensionNode\n"
			if (FinanceDimension7 entered)
				BudgetCubeMap += "related.FinanceDimension7 = FinanceDimension7\n"
			else
				if (Scenario.HasPostingDimension7 and !BudgetTemplate.AllowBlankDimension7)
					BudgetCubeMap += "related.FinanceDimension7 = Scenario.Basis.FinanceDimension7Structure.DimensionNode\n"
			if (FinanceDimension8 entered)
				BudgetCubeMap += "related.FinanceDimension8 = FinanceDimension8\n"
			else
				if (Scenario.HasPostingDimension8 and !BudgetTemplate.AllowBlankDimension8)
					BudgetCubeMap += "related.FinanceDimension8 = Scenario.Basis.FinanceDimension8Structure.DimensionNode\n"
			if (FinanceDimension9 entered)
				BudgetCubeMap += "related.FinanceDimension9 = FinanceDimension9\n"
			else
				if (Scenario.HasPostingDimension9 and !BudgetTemplate.AllowBlankDimension9)
					BudgetCubeMap += "related.FinanceDimension9 = Scenario.Basis.FinanceDimension9Structure.DimensionNode\n"
			if (FinanceDimension10 entered)
				BudgetCubeMap += "related.FinanceDimension10 = FinanceDimension10\n"
			else
				if (Scenario.HasPostingDimension10 and !BudgetTemplate.AllowBlankDimension10)
					BudgetCubeMap += "related.FinanceDimension10 = Scenario.Basis.FinanceDimension10Structure.DimensionNode\n"
			BudgetCubeMap += "related.GeneralLedgerTotal.EntityYearPeriod = BudgetCalendarPeriodsRel.GeneralLedgerCalendarPeriod\n"
		MatrixMap is a DerivedField
			type is LPLText
			restricted
			if (AccountingEntity entered)
				MatrixMap += "related.AccountingEntity = AccountingEntity\n"
			else 
				MatrixMap += "related.AccountingEntity = Scenario.Basis.AccountingEntityTopNode\n"
			if (AccountingUnit entered)
				MatrixMap += "related.GeneralLedgerTotal.AccountingUnit = AccountingUnit\n"
			else
				if (FinanceEnterpriseGroup.AccountingUnitSelected and !BudgetTemplate.AllowBlankAccountingUnit)
					MatrixMap += "related.GeneralLedgerTotal.AccountingUnit = Scenario.Basis.AccountingUnitStructure.AccountingUnitTopNodeGroup.DimensionNode\n"
			if (GeneralLedgerChartAccount entered)
					MatrixMap += "related.GeneralLedgerTotal.GeneralLedgerChartAccount = GeneralLedgerChartAccount\n"
			else


			if (LocalReverseCommitmentAmount)
				MatrixMap += "related.GeneralLedgerTotal.GeneralLedgerChartAccount = LocalUREOnChartAccount\n"
			else
				MatrixMap += "related.GeneralLedgerTotal.GeneralLedgerChartAccount = Scenario.Basis.ReportingChart.ChartAccountNode\n"
			if (Project entered)
				MatrixMap += "related.GeneralLedgerTotal.Project = Project\n"
			else
				if (FinanceEnterpriseGroup.ProjectEntry and !BudgetTemplate.AllowBlankProject)
					MatrixMap += "related.GeneralLedgerTotal.Project = Scenario.Basis.ProjectStructure.ProjectNode\n"
			if (FinanceDimension1 entered)
				MatrixMap += "related.FinanceDimension1 = FinanceDimension1\n"
			else
				if (FinanceEnterpriseGroup.FinanceDimension1Entry and !BudgetTemplate.AllowBlankDimension1)
					MatrixMap += "related.FinanceDimension1 = Scenario.Basis.FinanceDimension1Structure.DimensionNode\n"
			if (FinanceDimension2 entered)
				MatrixMap += "related.FinanceDimension2 = FinanceDimension2\n"
			else
				if (FinanceEnterpriseGroup.FinanceDimension2Entry and !BudgetTemplate.AllowBlankDimension2)
					MatrixMap += "related.FinanceDimension2 = Scenario.Basis.FinanceDimension2Structure.DimensionNode\n"
			if (FinanceDimension3 entered)
				MatrixMap += "related.FinanceDimension3 = FinanceDimension3\n"
			else
				if (FinanceEnterpriseGroup.FinanceDimension3Entry and !BudgetTemplate.AllowBlankDimension3)
					MatrixMap += "related.FinanceDimension3 = Scenario.Basis.FinanceDimension3Structure.DimensionNode\n"
			if (FinanceDimension4 entered)
				MatrixMap += "related.FinanceDimension4 = FinanceDimension4\n"
			else
				if (FinanceEnterpriseGroup.FinanceDimension4Entry and !BudgetTemplate.AllowBlankDimension4)
					MatrixMap += "related.FinanceDimension4 = Scenario.Basis.FinanceDimension4Structure.DimensionNode\n"
			if (FinanceDimension5 entered)
				MatrixMap += "related.FinanceDimension5 = FinanceDimension5\n"
			else
				if (FinanceEnterpriseGroup.FinanceDimension5Entry and !BudgetTemplate.AllowBlankDimension5)
					MatrixMap += "related.FinanceDimension5 = Scenario.Basis.FinanceDimension5Structure.DimensionNode\n"
			if (FinanceDimension6 entered)
				MatrixMap += "related.FinanceDimension6 = FinanceDimension6\n"
			else
				if (FinanceEnterpriseGroup.FinanceDimension6Entry and !BudgetTemplate.AllowBlankDimension6)
					MatrixMap += "related.FinanceDimension6 = Scenario.Basis.FinanceDimension6Structure.DimensionNode\n"
			if (FinanceDimension7 entered)
				MatrixMap += "related.FinanceDimension7 = FinanceDimension7\n"
			else
				if (FinanceEnterpriseGroup.FinanceDimension7Entry and !BudgetTemplate.AllowBlankDimension7)
					MatrixMap += "related.FinanceDimension7 = Scenario.Basis.FinanceDimension7Structure.DimensionNode\n"
			if (FinanceDimension8 entered)
				MatrixMap += "related.FinanceDimension8 = FinanceDimension8\n"
			else
				if (FinanceEnterpriseGroup.FinanceDimension8Entry and !BudgetTemplate.AllowBlankDimension8)
					MatrixMap += "related.FinanceDimension8 = Scenario.Basis.FinanceDimension8Structure.DimensionNode\n"
			if (FinanceDimension9 entered)
				MatrixMap += "related.FinanceDimension9 = FinanceDimension9\n"
			else
				if (FinanceEnterpriseGroup.FinanceDimension9Entry and !BudgetTemplate.AllowBlankDimension9)
					MatrixMap += "related.FinanceDimension9 = Scenario.Basis.FinanceDimension9Structure.DimensionNode\n"
			if (FinanceDimension10 entered)
				MatrixMap += "related.FinanceDimension10 = FinanceDimension10\n"
			else
				if (FinanceEnterpriseGroup.FinanceDimension10Entry and !BudgetTemplate.AllowBlankDimension10)
					MatrixMap += "related.FinanceDimension10 = Scenario.Basis.FinanceDimension10Structure.DimensionNode\n"

			if (LocalUseGeneralLedgerPeriod)
				MatrixMap += "related.GeneralLedgerTotal.EntityYearPeriod = GeneralLedgerCalendarPeriod\n"
			else
				MatrixMap += "related.GeneralLedgerTotal.EntityYearPeriod = BudgetCalendarPeriodsRel.GeneralLedgerCalendarPeriod\n"
		DisplayMessage is a DerivedField
			type is Text
			BudgetCodeBlock.AccountingEntity					= AccountingEntity
			BudgetCodeBlock.AccountingUnit						= AccountingUnit
			BudgetCodeBlock.GeneralLedgerChartAccount			= GeneralLedgerChartAccount
			BudgetCodeBlock.Project								= Project
			BudgetCodeBlock.FinanceDimension1					= FinanceDimension1
			BudgetCodeBlock.FinanceDimension2					= FinanceDimension2
			BudgetCodeBlock.FinanceDimension3					= FinanceDimension3
			BudgetCodeBlock.FinanceDimension4					= FinanceDimension4
			BudgetCodeBlock.FinanceDimension5					= FinanceDimension5
			BudgetCodeBlock.FinanceDimension6					= FinanceDimension6
			BudgetCodeBlock.FinanceDimension7					= FinanceDimension7
			BudgetCodeBlock.FinanceDimension8					= FinanceDimension8
			BudgetCodeBlock.FinanceDimension9					= FinanceDimension9
			BudgetCodeBlock.FinanceDimension10					= FinanceDimension10
			return BudgetCodeBlock
		DisplayPeriods is a DerivedField
			type is Text
			DisplayPeriods = "!"
			for each BudgetCalendarPeriodsRel
				DisplayPeriods +=  each.GeneralLedgerCalendarPeriod  + ", "
			DisplayPeriods += "!"
		DisplayCommitmentData is a DerivedField
			type is Text
			DisplayCommitmentData = "!"
			for each BudgetCalendarPeriodsRel
				GeneralLedgerCalendarPeriod = each.GeneralLedgerCalendarPeriod
				DisplayCommitmentData += BudgetGroupTotal.Amount
				DisplayCommitmentData += ", "
			DisplayCommitmentData += "!"
		DisplayLocalBudgetData is a DerivedField
			type is Text
			DisplayLocalBudgetData = "!"
			for each BudgetGroupAmountsRel
				GeneralLedgerCalendarPeriod = each.GeneralLedgerCalendarPeriod
				DisplayLocalBudgetData += BudgetGroupAmount.Amount
				DisplayLocalBudgetData += ", "
			DisplayLocalBudgetData += "!"
		DisplayCubeCommitmentData is a DerivedField
			type is Text

			DisplayCubeCommitmentData = "!"
			if (BudgetTemplate.UREInBudgetCharAccount)






				for each BudgetCalendarPeriodsRel				
					GeneralLedgerCalendarPeriod	= each.GeneralLedgerCalendarPeriod
					LocalUseGeneralLedgerPeriod	= true

					initialize LocalReverseCommitmentAmount
					if (BudgetTemplate.UseCurrency.EntityFunctional)
						LocalData = TemplateRel.NetFunctionalAmount
					else
					if (BudgetTemplate.UseCurrency.Project)
						LocalData = TemplateRel.NetProjectAmount
					else
					if (BudgetTemplate.UseCurrency.Report1)
						LocalData = TemplateRel.NetReportAmount1
					else
					if (BudgetTemplate.UseCurrency.Report2)
						LocalData = TemplateRel.NetReportAmount2
					else
					if (BudgetTemplate.UseCurrency.Report3)
						LocalData = TemplateRel.NetReportAmount3
					else
					if (BudgetTemplate.UseCurrency.Report4)
						LocalData = TemplateRel.NetReportAmount4
					else
					if (BudgetTemplate.UseCurrency.Report5)
						LocalData = TemplateRel.NetReportAmount5	

					LocalReverseCommitmentAmount = true	
					LocalUREOnChartAccount		 = BudgetTemplate.DerivedUREOnChartAccount
					if (BudgetTemplate.UseCurrency.EntityFunctional)
						LocalData -= TemplateRel.NetFunctionalAmount
					else
					if (BudgetTemplate.UseCurrency.Project)
						LocalData -= TemplateRel.NetProjectAmount
					else
					if (BudgetTemplate.UseCurrency.Report1)
						LocalData -= TemplateRel.NetReportAmount1
					else
					if (BudgetTemplate.UseCurrency.Report2)
						LocalData -= TemplateRel.NetReportAmount2
					else
					if (BudgetTemplate.UseCurrency.Report3)
						LocalData -= TemplateRel.NetReportAmount3
					if (BudgetTemplate.UseCurrency.Report4)
						LocalData -= TemplateRel.NetReportAmount4
					else
					if (BudgetTemplate.UseCurrency.Report5)
						LocalData -= TemplateRel.NetReportAmount5		
					DisplayCubeCommitmentData  += LocalData
					DisplayCubeCommitmentData  += ", "
				DisplayCubeCommitmentData  += "!"
				initialize LocalReverseCommitmentAmount
				initialize LocalUREOnChartAccount
				initialize LocalUseGeneralLedgerPeriod
			else

				for each TemplateRel
					if (BudgetTemplate.UseCurrency.EntityFunctional)
						LocalData = each.NetFunctionalAmount
					else
					if (BudgetTemplate.UseCurrency.Project)
						LocalData = each.NetProjectAmount
					else
					if (BudgetTemplate.UseCurrency.Report1)
						LocalData = each.NetReportAmount1
					else
					if (BudgetTemplate.UseCurrency.Report2)
						LocalData = each.NetReportAmount2
					else
					if (BudgetTemplate.UseCurrency.Report3)
						LocalData = each.NetReportAmount3
					if (BudgetTemplate.UseCurrency.Report4)
						LocalData = each.NetReportAmount4
					else
					if (BudgetTemplate.UseCurrency.Report5)
						LocalData = each.NetReportAmount5









					DisplayCubeCommitmentData  += LocalData
					DisplayCubeCommitmentData  += ", "
				DisplayCubeCommitmentData  += "!"
		DisplayCubeBudgetData is a DerivedField
			type is Text

			DisplayCubeBudgetData = "!"
			for each BudgetGroupTemplateRel

				if (BudgetTemplate.UseCurrency.EntityFunctional)
					LocalData = each.NetFunctionalAmount
				else
				if (BudgetTemplate.UseCurrency.Project)
					LocalData = each.NetProjectAmount
				else
				if (BudgetTemplate.UseCurrency.Report1)
					LocalData = each.NetReportAmount1
				else
				if (BudgetTemplate.UseCurrency.Report2)
					LocalData = each.NetReportAmount2
				else
				if (BudgetTemplate.UseCurrency.Report3)
					LocalData = each.NetReportAmount3
				if (BudgetTemplate.UseCurrency.Report4)
					LocalData = each.NetReportAmount4
				else
				if (BudgetTemplate.UseCurrency.Report5)
					LocalData = each.NetReportAmount5









				DisplayCubeBudgetData  += LocalData
				DisplayCubeBudgetData  += ", "
			DisplayCubeBudgetData  += "!"
			
		
		DynamicSelection is a DerivedField
			type is LPLText
			restricted
			is condition for "GeneralLedgerTotal"
			LocalQuote				= "\""
			RelationName			= "MatchingGeneralLedgerTotalRel"
			FullRelationName		= "MatchingGeneralLedgerTotalRel" + ".GeneralLedgerTotal"
			DynamicSelection		= "(("
			for each BudgetedSystemCodesRel
				if (DynamicSelection = "((")
					DynamicSelection += "(" + FullRelationName + ".System="
					DynamicSelection += LocalQuote
					DynamicSelection += each.GeneralLedgerSystemCode
					DynamicSelection += LocalQuote
					DynamicSelection += ")"
				else

					DynamicSelection += " or (" + FullRelationName + ".System="
					DynamicSelection += LocalQuote
					DynamicSelection += each.GeneralLedgerSystemCode
					DynamicSelection += LocalQuote
					DynamicSelection += ")"
			DynamicSelection += ")"
			
			LedgerCount				 = 0
			DynamicSelection		 += "and ("
			for each LedgersRel
				if (!each.SubordinateLedger.CloseLedger)
					LedgerCount			 += 1
					if (LedgerCount = 1)
						DynamicSelection += "(" + FullRelationName + ".Ledger="
						DynamicSelection += LocalQuote
						DynamicSelection += each.SubordinateLedger
						DynamicSelection += LocalQuote
						DynamicSelection += ")"	
					else		
						DynamicSelection += " or (" + FullRelationName + ".Ledger="
						DynamicSelection += LocalQuote
						DynamicSelection += each.SubordinateLedger
						DynamicSelection += LocalQuote
						DynamicSelection += ")"	
			DynamicSelection += ")"
			
			DynamicSelection += "and ("
			DynamicSelection += "(" + RelationName + ".Scenario" + " = "
			DynamicSelection += LocalQuote + FinanceEnterpriseGroup.ActualsScenario + LocalQuote + ")"
			DynamicSelection += " or (" + RelationName + ".Scenario" + " = "
			DynamicSelection += LocalQuote + FinanceEnterpriseGroup.CommitmentsScenario + LocalQuote + ")"
			DynamicSelection += " or (" + RelationName + ".Scenario" + " = "
			DynamicSelection += LocalQuote + FinanceEnterpriseGroup.EncumbrancesScenario + LocalQuote + ")"			
			DynamicSelection += ")"
										
			if (BudgetTemplate.HasAccountingEntity)
				DynamicSelection += " and (" + RelationName + ".AccountingEntity = " + LocalQuote
				DynamicSelection += AccountingEntity + LocalQuote + " )"

			if (!BudgetTemplate.SummaryAccount and BudgetTemplate.HasAccount)
				DynamicSelection += " and (" + FullRelationName + ".GeneralLedgerChartAccount = "
				DynamicSelection += LocalQuote + GeneralLedgerChartAccount + LocalQuote + " )"



			if (not BudgetTemplate.HasAccount and LocalReverseCommitmentAmount)
				DynamicSelection += " and (" + FullRelationName + ".GeneralLedgerChartAccount = "
				DynamicSelection += LocalQuote + BudgetTemplate.DerivedUREOnChartAccount + LocalQuote + " )"

			if (!BudgetTemplate.SummaryAccountingUnit and BudgetTemplate.HasAccountingUnit)
				DynamicSelection += " and (" + FullRelationName + ".AccountingUnit = "
				DynamicSelection +=  LocalQuote + AccountingUnit + LocalQuote + " )"
				DynamicSelection += " and (" + RelationName + ".AccountingEntity = "
				DynamicSelection += LocalQuote + AccountingEntity + LocalQuote + " )" 
			if (!BudgetTemplate.SummaryProject and BudgetTemplate.HasProject)
				if (BudgetTemplate.EditBlanks and Project not entered)
					DynamicSelection += " and (" + FullRelationName + ".Project not entered)"
				else
				if (Project entered)
					DynamicSelection += " and (" + FullRelationName + ".Project = "
					DynamicSelection +=  LocalQuote + Project + LocalQuote + " )"
			if (!BudgetTemplate.SummaryDimension1 and BudgetTemplate.HasDimension1)
				if (BudgetTemplate.EditBlanks and FinanceDimension1 not entered)
					DynamicSelection += " and (" + RelationName + ".FinanceDimension1 not entered)"
				else
				if (FinanceDimension1 entered)
					DynamicSelection += " and (" + RelationName + ".FinanceDimension1 = "
					DynamicSelection +=  LocalQuote + FinanceDimension1 + LocalQuote + " )"
			if (!BudgetTemplate.SummaryDimension2 and BudgetTemplate.HasDimension2)
				if (BudgetTemplate.EditBlanks and FinanceDimension2 not entered)
					DynamicSelection += " and (" + RelationName + ".FinanceDimension2 not entered)"
				else
				if (FinanceDimension2 entered)
					DynamicSelection += " and (" + RelationName + ".FinanceDimension2 = "
					DynamicSelection +=  LocalQuote + FinanceDimension2 + LocalQuote + " )"
			if (!BudgetTemplate.SummaryDimension3 and BudgetTemplate.HasDimension3)
				if (BudgetTemplate.EditBlanks and FinanceDimension3 not entered)
					DynamicSelection += " and (" + RelationName + ".FinanceDimension3 not entered)"
				else
				if (FinanceDimension3 entered)
					DynamicSelection += " and (" + RelationName + ".FinanceDimension3 = "
					DynamicSelection +=  LocalQuote + FinanceDimension3 + LocalQuote + " )"
			if (!BudgetTemplate.SummaryDimension4 and BudgetTemplate.HasDimension4)
				if (BudgetTemplate.EditBlanks and FinanceDimension4 not entered)
					DynamicSelection += " and (" + RelationName + ".FinanceDimension4 not entered)"
				else
				if (FinanceDimension4 entered)
					DynamicSelection += " and (" + RelationName + ".FinanceDimension4 = "
					DynamicSelection +=  LocalQuote + FinanceDimension4 + LocalQuote + " )"
			if (!BudgetTemplate.SummaryDimension5 and BudgetTemplate.HasDimension5)
				if (BudgetTemplate.EditBlanks and FinanceDimension5 not entered)
					DynamicSelection += " and (" + RelationName + ".FinanceDimension5 not entered)"
				else
				if (FinanceDimension5 entered)
					DynamicSelection += " and (" + RelationName + ".FinanceDimension5 = "
					DynamicSelection +=  LocalQuote + FinanceDimension5 + LocalQuote + " )"
			if (!BudgetTemplate.SummaryDimension6 and BudgetTemplate.HasDimension6)
				if (BudgetTemplate.EditBlanks and FinanceDimension6 not entered)
					DynamicSelection += " and (" + RelationName + ".FinanceDimension6 not entered)"
				else
				if (FinanceDimension6 entered)
					DynamicSelection += " and (" + RelationName + ".FinanceDimension6 = "
					DynamicSelection +=  LocalQuote + FinanceDimension6 + LocalQuote + " )"
			if (!BudgetTemplate.SummaryDimension7 and BudgetTemplate.HasDimension7)
				if (BudgetTemplate.EditBlanks and FinanceDimension7 not entered)
					DynamicSelection += " and (" + RelationName + ".FinanceDimension7 not entered)"
				else
				if (FinanceDimension7 entered)
					DynamicSelection += " and (" + RelationName + ".FinanceDimension7 = "
					DynamicSelection +=  LocalQuote + FinanceDimension7 + LocalQuote + " )"
			if (!BudgetTemplate.SummaryDimension8 and BudgetTemplate.HasDimension8)
				if (BudgetTemplate.EditBlanks and FinanceDimension8 not entered)
					DynamicSelection += " and (" + RelationName + ".FinanceDimension8 not entered)"
				else
				if (FinanceDimension8 entered)
					DynamicSelection += " and (" + RelationName + ".FinanceDimension8 = "
					DynamicSelection +=  LocalQuote + FinanceDimension8 + LocalQuote + " )"
			if (!BudgetTemplate.SummaryDimension9 and BudgetTemplate.HasDimension9)
				if (BudgetTemplate.EditBlanks and FinanceDimension9 not entered)
					DynamicSelection += " and (" + RelationName + ".FinanceDimension9 not entered)"
				else
				if (FinanceDimension9 entered)
					DynamicSelection += " and (" + RelationName + ".FinanceDimension9 = "
					DynamicSelection +=  LocalQuote + FinanceDimension9 + LocalQuote + " )"
			if (!BudgetTemplate.SummaryDimension10 and BudgetTemplate.HasDimension10)
				if (BudgetTemplate.EditBlanks and FinanceDimension10 not entered)
					DynamicSelection += " and (" + RelationName + ".FinanceDimension10 not entered)"
				else
				if (FinanceDimension10 entered)
					DynamicSelection += " and (" + RelationName + ".FinanceDimension10 = "
					DynamicSelection +=  LocalQuote + FinanceDimension10 + LocalQuote + " )"
			DynamicSelection += ")"


	Conditions
		DisplayCheckPercent
			when (CheckPercent entered
			and CheckPercent >= BudgetTemplate.CheckThreshold)
		HasLogs
			when (LogsForGroupRel exists)
		HasLocalBudget
			when (BudgetGroupAmountsRel exists)
		SecurityGroupAllowsAccess
            when (AccountingEntity not entered
            or   (AccountingEntity entered 
            and   AccountingEntity.AccountingEntitySecurityGroupAllowsAccess))

	Relations
		BudgetGroupAmountsRel is a BudgetGroupAmount set
		BudgetGroupTotalsRel is a BudgetGroupTotal set
		BudgetGroupTotalLogsRel is a BudgetGroupTotalLog set
        BudgetTemplateGroupTotalsRel is a BudgetTemplateGroupTotal set
		BudgetGroupTotalsForPeriodRel
			one-to-many relation to BudgetGroupTotal
			Field Mapping uses symbolic key
				related.FinanceEnterpriseGroup 					= FinanceEnterpriseGroup
				related.Scenario	 							= Scenario
				related.BudgetTemplate 							= BudgetTemplate
				related.BudgetGroup 							= BudgetGroup
				related.GeneralLedgerCalendarPeriod				= GeneralLedgerCalendarPeriod
		CoreLedgerRel
			one-to-one relation to Ledger
			Field Mapping uses symbolic key
				related.FinanceEnterpriseGroup					= FinanceEnterpriseGroup
				related.Ledger									= FinanceEnterpriseGroup.CoreLedger
				 
		RecalculateContainingAccountingUnitRel
			one-to-one relation to BudgetTemplateRecalculate
			Field Mapping uses ByAccountingUnit
				related.FinanceEnterpriseGroup		= FinanceEnterpriseGroup
				related.Scenario	 				= Scenario
				related.BudgetTemplate				= BudgetTemplate
				related.AccountingEntity			= AccountingEntity
				related.AccountingUnit				= AccountingUnit
		RecalculateContainingProjectRel
			one-to-one relation to BudgetTemplateRecalculate
			Field Mapping uses ByProject
				related.FinanceEnterpriseGroup		= FinanceEnterpriseGroup
				related.Scenario	 				= Scenario
				related.BudgetTemplate				= BudgetTemplate
				related.Project						= Project
		RecalculateContainingAccountRel
			one-to-one relation to BudgetTemplateRecalculate
			Field Mapping uses ByAccount
				related.FinanceEnterpriseGroup		= FinanceEnterpriseGroup
				related.Scenario	 				= Scenario
				related.BudgetTemplate				= BudgetTemplate
				related.GeneralLedgerChartAccount	= GeneralLedgerChartAccount
		RecalculateContainingDimension1Rel
			one-to-one relation to BudgetTemplateRecalculate
			Field Mapping uses ByFinanceDimension1
				related.FinanceEnterpriseGroup		= FinanceEnterpriseGroup
				related.Scenario	 				= Scenario
				related.BudgetTemplate				= BudgetTemplate
				related.FinanceDimension1			= FinanceDimension1
		RecalculateContainingDimension2Rel
			one-to-one relation to BudgetTemplateRecalculate
			Field Mapping uses ByFinanceDimension2
				related.FinanceEnterpriseGroup		= FinanceEnterpriseGroup
				related.Scenario	 				= Scenario
				related.BudgetTemplate				= BudgetTemplate
				related.FinanceDimension2			= FinanceDimension2
		RecalculateContainingDimension3Rel
			one-to-one relation to BudgetTemplateRecalculate
			Field Mapping uses ByFinanceDimension3
				related.FinanceEnterpriseGroup		= FinanceEnterpriseGroup
				related.Scenario	 				= Scenario
				related.BudgetTemplate				= BudgetTemplate
				related.FinanceDimension3			= FinanceDimension3
		RecalculateContainingDimension4Rel
			one-to-one relation to BudgetTemplateRecalculate
			Field Mapping uses ByFinanceDimension4
				related.FinanceEnterpriseGroup		= FinanceEnterpriseGroup
				related.Scenario	 				= Scenario
				related.BudgetTemplate				= BudgetTemplate
				related.FinanceDimension4			= FinanceDimension4
		RecalculateContainingDimension5Rel
			one-to-one relation to BudgetTemplateRecalculate
			Field Mapping uses ByFinanceDimension5
				related.FinanceEnterpriseGroup		= FinanceEnterpriseGroup
				related.Scenario	 				= Scenario
				related.BudgetTemplate				= BudgetTemplate
				related.FinanceDimension5			= FinanceDimension5
		RecalculateContainingDimension6Rel
			one-to-one relation to BudgetTemplateRecalculate
			Field Mapping uses ByFinanceDimension6
				related.FinanceEnterpriseGroup		= FinanceEnterpriseGroup
				related.Scenario	 				= Scenario
				related.BudgetTemplate				= BudgetTemplate
				related.FinanceDimension6			= FinanceDimension6
		RecalculateContainingDimension7Rel
			one-to-one relation to BudgetTemplateRecalculate
			Field Mapping uses ByFinanceDimension7
				related.FinanceEnterpriseGroup		= FinanceEnterpriseGroup
				related.Scenario	 				= Scenario
				related.BudgetTemplate				= BudgetTemplate
				related.FinanceDimension7			= FinanceDimension7
		RecalculateContainingDimension8Rel
			one-to-one relation to BudgetTemplateRecalculate
			Field Mapping uses ByFinanceDimension8
				related.FinanceEnterpriseGroup		= FinanceEnterpriseGroup
				related.Scenario	 				= Scenario
				related.BudgetTemplate				= BudgetTemplate
				related.FinanceDimension8			= FinanceDimension8
		RecalculateContainingDimension9Rel
			one-to-one relation to BudgetTemplateRecalculate
			Field Mapping uses ByFinanceDimension9
				related.FinanceEnterpriseGroup		= FinanceEnterpriseGroup
				related.Scenario	 				= Scenario
				related.BudgetTemplate				= BudgetTemplate
				related.FinanceDimension9			= FinanceDimension9
		RecalculateContainingDimension10Rel
			one-to-one relation to BudgetTemplateRecalculate
			Field Mapping uses ByFinanceDimension10
				related.FinanceEnterpriseGroup		= FinanceEnterpriseGroup
				related.Scenario	 				= Scenario
				related.BudgetTemplate				= BudgetTemplate
				related.FinanceDimension10			= FinanceDimension10
				
		BudgetCalendarPeriodsRel
			one-to-many relation to GeneralLedgerCalendarPeriod
			Field Mapping uses ByTopNode
				related.FinanceEnterpriseGroup		= FinanceEnterpriseGroup
				related.TopNode						= Scenario.Basis.GeneralLedgerCalendar.TopNode
				related.Year						>= BudgetTemplate.DerivedStartYear
			Instance Selection
				where (related.Year					<= BudgetTemplate.DerivedEndYear
				and related.PeriodType = BudgetTemplate.BudgetPeriodType)
			
		MatchingGeneralLedgerTotalRel
			one-to-many relation to GeneralLedgerTotal
			Field Mapping uses symbolic key
				related.FinanceEnterpriseGroup							= FinanceEnterpriseGroup
			Instance Selection
				where (related.GeneralLedgerTotal.EntityYearPeriod		<= GeneralLedgerCalendarPeriod.EndDateJulian
				and related.GeneralLedgerTotal.EntityYearPeriod			>= GeneralLedgerCalendarPeriod.StartDateJulian
				and DynamicSelection)

		BudgetedSystemCodesRel
			one-to-many relation to GeneralLedgerSystemCode
			Field Mapping uses symbolic key
				related.FinanceEnterpriseGroup		= FinanceEnterpriseGroup
			Instance Selection
				where (related.EncumbranceOption.Track
				or related.EncumbranceOption.TrackAndEdit)			

		LedgersRel
			one-to-many relation to LedgerHierarchy
			Field Mapping uses SubordinateInTopNode
				related.FinanceEnterpriseGroup       = FinanceEnterpriseGroup
				related.TopNode           			 = Scenario.Basis.LedgerTopNode

		LogsForGroupRel	
			one-to-many relation to BudgetGroupTotalLog
			Field Mapping uses ByTimeDescending
				related.FinanceEnterpriseGroup		= FinanceEnterpriseGroup
				related.Scenario	 				= Scenario
				related.BudgetTemplate				= BudgetTemplate
				related.BudgetGroup 				= BudgetGroup
				
		PreviousLogsRel	
			one-to-many relation to BudgetGroupTotalLog
			Field Mapping uses ByTimeDescendingForGroup
				related.FinanceEnterpriseGroup		= FinanceEnterpriseGroup
				related.Scenario	 				= Scenario
				related.BudgetTemplate				= BudgetTemplate
				related.BudgetGroup 				= BudgetGroup
				related.LogTimeStamp				<= LocalTimestamp
				
		BudgetGroupLazyInitNotifyRel
			one-to-many relation to BudgetGroupLazyInit
			Field Mapping uses symbolic key
				related.FinanceEnterpriseGroup		= FinanceEnterpriseGroup
				related.Scenario	 				= Scenario
				related.BudgetTemplate				= BudgetTemplate
				related.BudgetGroup 				= BudgetGroup

		PostInProcessRel
			one-to-many relation to AccountingEntity
			Field Mapping uses symbolic key
				related.FinanceEnterpriseGroup		= FinanceEnterpriseGroup
			Instance Selection
				where (related.ProcessStatus.PostInProcess) 

		GLSystemCodeRel
			one-to-one relation to GeneralLedgerSystemCode
			Field Mapping uses symbolic key
				related.FinanceEnterpriseGroup		= FinanceEnterpriseGroup
				related.GeneralLedgerSystemCode		= "GL"


	Sets

		ByAccountingUnit
			duplicates
			Sort Order
				FinanceEnterpriseGroup
				AccountingEntity
				AccountingUnit
				Scenario
				BudgetTemplate
		ByGeneralLedgerChartAccount
			duplicates
			Sort Order
				FinanceEnterpriseGroup
				GeneralLedgerChartAccount
				Scenario
				BudgetTemplate
		ByProject
			duplicates
			Sort Order
				FinanceEnterpriseGroup
				Project
				Scenario
				BudgetTemplate
		ByFinanceDimension1
			duplicates
			Sort Order
				FinanceEnterpriseGroup
				FinanceDimension1
				Scenario
				BudgetTemplate
		ByFinanceDimension2
			duplicates
			Sort Order
				FinanceEnterpriseGroup
				FinanceDimension2
				Scenario
				BudgetTemplate
		ByFinanceDimension3
			duplicates
			Sort Order
				FinanceEnterpriseGroup
				FinanceDimension3
				Scenario
				BudgetTemplate
		ByFinanceDimension4
			duplicates
			Sort Order
				FinanceEnterpriseGroup
				FinanceDimension4
				Scenario
				BudgetTemplate
		ByFinanceDimension5
			duplicates
			Sort Order
				FinanceEnterpriseGroup
				FinanceDimension5
				Scenario
				BudgetTemplate
		ByFinanceDimension6
			duplicates
			Sort Order
				FinanceEnterpriseGroup
				FinanceDimension6
				Scenario
				BudgetTemplate
		ByFinanceDimension7
			duplicates
			Sort Order
				FinanceEnterpriseGroup
				FinanceDimension7
				Scenario
				BudgetTemplate
		ByFinanceDimension8
			duplicates
			Sort Order
				FinanceEnterpriseGroup
				FinanceDimension8
				Scenario
				BudgetTemplate
		ByFinanceDimension9
			duplicates
			Sort Order
				FinanceEnterpriseGroup
				FinanceDimension9
				Scenario
				BudgetTemplate
		ByFinanceDimension10
			duplicates
			Sort Order
				FinanceEnterpriseGroup
				FinanceDimension10
				Scenario
				BudgetTemplate				

		ByCheckPercent
			duplicates
			Sort Order
				FinanceEnterpriseGroup
				Scenario
				BudgetTemplate
				CheckPercent descending


		ByRequiresRecalculation
			duplicates
			Sort Order
				FinanceEnterpriseGroup
				Scenario
				BudgetTemplate
				RecalculateTotals
				
		ByStageAndCreateCounter
			duplicates
			Sort Order
				FinanceEnterpriseGroup
				Scenario
				BudgetTemplate
				LazyStage
				CreateCounter

	Rule Blocks
		VerifyNoPostingProcesses
			constraint (PostInProcessRel not exists)
				"CannotActivateWhilePostingProcessesAreRunning"

		ClearGroup
			for each BudgetCalendarPeriodsRel
				GeneralLedgerCalendarPeriod		= each.GeneralLedgerCalendarPeriod
				if (BudgetGroupTotal.Amount entered)
					invoke Update BudgetGroupTotal
				        invoked.BusinessClassName		= "BudgetGroup"
				        invoked.EditContext				= "ClearLazyInitialize"
				        invoked.NoLog					= true
					invoke Update BudgetGroupTotal
						invoked.IsSetAmounts			= true
						invoked.Amount					= 0
				        invoked.NoLog					= false
				
		CheckCommitWithTimer
			LocalCurrentTimeStamp		= current timestamp
			if (LocalLastTimeStamp not entered)
				LocalLastTimeStamp		= LocalCurrentTimeStamp

			LocalElapsedTime = LocalCurrentTimeStamp - LocalLastTimeStamp

			if (LocalCount >= 12
			or  LocalElapsedTime > 30)
				commit transaction
				initialize LocalCount
				LocalLastTimeStamp = LocalCurrentTimeStamp

		GetObligationsFromTotal
			for each BudgetCalendarPeriodsRel	
				GeneralLedgerCalendarPeriod	= each.GeneralLedgerCalendarPeriod
				
				if (BudgetTemplate.UseCurrency.EntityFunctional)
					Amount		= sum MatchingGeneralLedgerTotalRel.NetFunctionalAmount
				else
				if (BudgetTemplate.UseCurrency.Project)
					Amount		= sum MatchingGeneralLedgerTotalRel.NetProjectAmount
				else
				if (BudgetTemplate.UseCurrency.Report1)
					Amount		= sum MatchingGeneralLedgerTotalRel.NetReportAmount1
				else
				if (BudgetTemplate.UseCurrency.Report2)
					Amount		= sum MatchingGeneralLedgerTotalRel.NetReportAmount2
				else
				if (BudgetTemplate.UseCurrency.Report3)
					Amount		= sum MatchingGeneralLedgerTotalRel.NetReportAmount3
				if (BudgetTemplate.UseCurrency.Report4)
					Amount		= sum MatchingGeneralLedgerTotalRel.NetReportAmount4
				else
				if (BudgetTemplate.UseCurrency.Report5)
					Amount		= sum MatchingGeneralLedgerTotalRel.NetReportAmount5
				
				if (LocalReverseCommitmentAmount)
					Amount = Amount * -1

				if (Amount != 0)
					invoke Update BudgetGroupTotal
						invoked.BusinessClassName		= "BudgetGroup"
						if (LocalReverseCommitmentAmount)
							invoked.EditContext				= "LazyPrepareGroupExcludeUndistributedRetainedEarnings"
						else
							invoked.EditContext				= "LazyPrepareGroup"
						invoked.NoLog					= true
					PreviousAmount						= BudgetGroupTotal.Amount
					
					invoke Update BudgetGroupTotal
						invoked.IsSetAmounts			= true
						if (Augment)
							invoked.Amount				+= Amount
							invoked.IncrementAmount		= Amount
						else
							invoked.Amount				= Amount
						invoked.PreviousAmount			= PreviousAmount
						invoked.NoLog					= false
				LocalCount								+= 1
				include CheckCommitWithTimer 


		RecalculateObligation
			GeneralLedgerCalendarPeriod	= each.GeneralLedgerTotal.EntityYearPeriod
			if (BudgetTemplate.UseCurrency.EntityFunctional)
				Amount		= each.NetFunctionalAmount
			else
			if (BudgetTemplate.UseCurrency.Project)
				Amount		= each.NetProjectAmount
			else
			if (BudgetTemplate.UseCurrency.Report1)
				Amount		= each.NetReportAmount1
			else
			if (BudgetTemplate.UseCurrency.Report2)
				Amount		= each.NetReportAmount2
			else
			if (BudgetTemplate.UseCurrency.Report3)
				Amount		= each.NetReportAmount3
			if (BudgetTemplate.UseCurrency.Report4)
				Amount		= each.NetReportAmount4
			else
			if (BudgetTemplate.UseCurrency.Report5)
				Amount		= each.NetReportAmount5

			if (LocalReverseCommitmentAmount)
				Amount = Amount * -1

			if (PrmRecalculateUsingSparse)
				PreviousAmount						= BudgetGroupTotal.Amount
				if (Amount entered)	
					invoke Update BudgetGroupTotal
						invoked.BusinessClassName		= "BudgetGroup"
						if (LocalReverseCommitmentAmount)
							invoked.EditContext				= "ProcessPending/ProcessPendingRecalculateExcludeUndistributedRetainedEarnings"
						else
							invoked.EditContext				= "ProcessPending/ProcessPendingRecalculate"
						invoked.IncrementAmount			= 0
						invoked.Amount					= Amount
						invoked.PreviousAmount			= PreviousAmount
				else
				if (PreviousAmount entered)
					invoke Update BudgetGroupTotal
						invoked.BusinessClassName	= "BudgetGroup"
						if (LocalReverseCommitmentAmount)
							invoked.EditContext			= "ProcessPendingRecalculateExcludeUndistributedRetainedEarnings"
						else
							invoked.EditContext			= "ProcessPendingRecalculate"
						invoked.IncrementAmount		= 0
						invoked.Amount				= 0
						invoked.PreviousAmount		= PreviousAmount
			else
			if (Amount != 0)
				invoke Update BudgetGroupTotal
					invoked.BusinessClassName		= "BudgetGroup"
					if (LocalReverseCommitmentAmount)
						invoked.EditContext				= "Recalculate/LazyInitializeExcludeUndistributedRetainedEarnings"
					else
						invoked.EditContext				= "Recalculate/LazyInitialize"
					invoked.NoLog					= true
				PreviousAmount						= BudgetGroupTotal.Amount
				invoke Update BudgetGroupTotal
					invoked.IsSetAmounts			= true
					if (Augment)
						invoked.Amount				+= Amount
						invoked.IncrementAmount		= Amount
					else
						invoked.Amount				= Amount
					invoked.PreviousAmount			= PreviousAmount
					invoked.NoLog					= false
	Field Rules
			
	Attach Rules
		
    Actions
	
    	Create is a Create Action
    		restricted
    		bypass field rules
            Entrance Rules
                BudgetGroup  		= DimensionCode

                if (!BudgetTemplate.LazyActivation)
                	LazyInitialized	= true
                else

	                CreateCounter		= BudgetTemplate.NextGroup
	                increment BudgetTemplate.NextGroup

		Update is an Update Action
			restricted

		Delete is a Delete Action
			restricted
			Exit Rules
				invoke NotifyGroupIsDeleting BudgetGroupLazyInitNotifyRel

		MarkRecalculateTotals is an Instance Action
			restricted
			Entrance Rules
				RecalculateTotals = true
				initialize CheckPeriod
				initialize CheckPercent

		ClearRecalculateTotals is an Instance Action
			restricted
			Entrance Rules
				RecalculateTotals = false
								
		CopyBudgetAmounts is an Instance Action
			restricted
			Action Rules
				for each BudgetGroupTemplateRel
					GeneralLedgerCalendarPeriod	= each.GeneralLedgerTotal.EntityYearPeriod
					invoke Update BudgetGroupAmount
						if (BudgetTemplate.UseCurrency.EntityFunctional)
							invoked.Amount = each.NetFunctionalAmount
						else
						if (BudgetTemplate.UseCurrency.Project)
							invoked.Amount = each.NetProjectAmount
						else
						if (BudgetTemplate.UseCurrency.Report1)
							invoked.Amount = each.NetReportAmount1
						else
						if (BudgetTemplate.UseCurrency.Report2)
							invoked.Amount = each.NetReportAmount2
						else
						if (BudgetTemplate.UseCurrency.Report3)
							invoked.Amount = each.NetReportAmount3
						else
						if (BudgetTemplate.UseCurrency.Report4)
							invoked.Amount = each.NetReportAmount4
						else
						if (BudgetTemplate.UseCurrency.Report5)
							invoked.Amount = each.NetReportAmount5










		InitializeGroupBTGT is an Instance Action 		
			restricted
			Parameters
				BypassBudgetEditGroup	is UniqueID
			Action Rules
				if (GLSystemCodeRel.EncumbranceOption.Track
				or GLSystemCodeRel.EncumbranceOption.TrackAndEdit)
					invoke BuildTemplateGroupTotalsFromUnreleasedGLGeneralLedgerTransactionForGroup BudgetTemplate
						invoked.Group						= BudgetGroup
						invoked.BypassBudgetEditGroup		= BypassBudgetEditGroup
				invoke BuildTemplateGroupTotalsFromUnreleasedGLCommit BudgetTemplate
					invoked.Group							= BudgetGroup
					invoked.BypassBudgetEditGroup			= BypassBudgetEditGroup
				invoke BuildTemplateGroupTotalsFromReleasedGLCommitWithDifferenceAmount BudgetTemplate
					invoked.Group							= BudgetGroup
					invoked.BypassBudgetEditGroup			= BypassBudgetEditGroup
				invoke BuildTemplateGroupTotalsFromUnreleasedChangeOrders BudgetTemplate
					invoked.Group							= BudgetGroup
					invoked.BypassBudgetEditGroup			= BypassBudgetEditGroup
				commit transaction
				
		InitializeObligations is an Instance Action		
			restricted
			Parameters
				BypassBudgetEditGroup	is UniqueID
			Action Rules

				if (!BudgetTemplate.HasSummary)
					invoke GetObligationsFromTotals 
						invoked.Augment						= true
				else
					invoke Recalculate
						invoked.Augment						= true
				commit transaction
 				invoke AugmentTemplateTotalsFromReleasedGLTransactionsForGroup BudgetTemplate
					invoked.Group					= BudgetGroup
					invoked.BypassBudgetEditGroup	= BypassBudgetEditGroup
 				invoke AugmentTemplateTotalsFromPendingGLTransactionsForGroup BudgetTemplate
					invoked.Group					= BudgetGroup
					invoked.BypassBudgetEditGroup	= BypassBudgetEditGroup
				
		SetLazyInitializing is an Instance Action 
			restricted
			Action Rules
				LazyInitializing	= true
				
		LazyInitialize is an Instance Action 		
			default label is "SelectiveInitialized"		

			valid when(BudgetTemplate.LazyActivation)
			confirmation required
				"ThisActionShouldOnlyBeInvokedIfThereWasAnErrorInitializingThisGroup._Proceed?"
			Action Rules
				LazyInitialized		= false
				LazyInitializing	= false
				include ClearGroup
				invoke LazyPrepareGroup
					invoked.RecoverAfterFailure	= true
		
		LazyPrepareGroup is an Instance Action 		
			restricted
			Parameters
				RecoverAfterFailure		is Boolean
			Action Rules
				invoke LazyPrepareGroupInner in background
					invoked.RecoverAfterFailure		= RecoverAfterFailure
				
		LazyPrepareGroupInner is an Instance Action
			restricted
			run in background
			Parameters
				RecoverAfterFailure					is Boolean
				BypassBudgetEditGroup				is UniqueID

			Action Rules
				if (!LazyInitialized)
					constraint (!LazyInitializing)
						"ActionLazyPrepareGroupIsNotRestartable._PleaseReactivateBudgetTemplate<BudgetTemplate>InScenario<Scenario>"
					if (!LazyInitializing)
						commit transaction
						include VerifyNoPostingProcesses
						commit transaction
						invoke InitializeObligations
							invoked.BypassBudgetEditGroup	= BypassBudgetEditGroup
						if (RecoverAfterFailure)
							for each BudgetTemplateGroupTotalsRel
								invoke Delete each.BudgetTemplateGroupTotal
								LocalCount		+= 1
								if (LocalCount >= 100)
									commit transaction
									LocalCount	= 0
						invoke InitializeGroupBTGT
							invoked.BypassBudgetEditGroup	= BypassBudgetEditGroup
		
						include VerifyNoPostingProcesses

						for each BudgetGroupLazyInitNotifyRel

							invoke NotifyGroupIsReady each.BudgetGroupLazyInit
							LocalCount		+= 1 
							if (LocalCount >= 100)
								commit transaction
								LocalCount	= 0
						
						LazyInitialized				= true
						LazyInitializing			= false

		Recalculate is an Instance Action
			restricted
			Parameters
				Augment	is Boolean
				PrmRecalculateUsingSparse	is Boolean
			Local Fields
				Amount	is a TotalAmount
			Action Rules
				for each TemplateRel
					include RecalculateObligation

				if (BudgetTemplate.UREInBudgetCharAccount)
					LocalReverseCommitmentAmount = true	
					LocalUREOnChartAccount		 = BudgetTemplate.DerivedUREOnChartAccount
					for each TemplateRel
						include RecalculateObligation

					initialize LocalReverseCommitmentAmount 	
					initialize LocalUREOnChartAccount


				RecalculateTotals = false
				Cluster = 0	

		GetObligationsFromTotals is an Instance Action
			restricted
			Parameters
				Augment	is Boolean
			Local Fields
				Amount	is a TotalAmount
			Action Rules
				include GetObligationsFromTotal
				if (BudgetTemplate.UREInBudgetCharAccount)
					LocalReverseCommitmentAmount	 = true
					include GetObligationsFromTotal
					
					initialize LocalReverseCommitmentAmount





		InitializeLazyGroupsByStageAndCluster is a Set Action
			restricted
			Parameters
				PrmFinanceEnterpriseGroup		is a FinanceEnterpriseGroup
					default label is "FinanceEnterpriseGroup"
				PrmScenario						is a Scenario
					default label is "Scenario"
				PrmTemplate						is a BudgetTemplate
					default label is "Template"
				PrmCluster						is Numeric 3
					default label is "Cluster"
				PrmNumberOfClusters				is Numeric 3
					default label is "NumberOfClusters"
				PrmStage						is Numeric 8
					default label is "Stage"
			Instance Selection
				where (FinanceEnterpriseGroup	= PrmFinanceEnterpriseGroup
				and Scenario					= PrmScenario
				and BudgetTemplate				= PrmTemplate
				and LazyStage					= PrmStage
				and PrmCluster 					= CreateCounter % PrmNumberOfClusters) 
			Sort Order
				FinanceEnterpriseGroup
				Scenario
				BudgetTemplate
				LazyStage
				CreateCounter
			Action Rules
				Instance Rules
					invoke InitializeALazyGroup BudgetTemplate
						invoked.PrmBudgetGroup	= BudgetGroup

		CalculateGroupsByCluster is a Set Action
			restricted
			Parameters
				PrmFinanceEnterpriseGroup		is a FinanceEnterpriseGroup
					default label is "FinanceEnterpriseGroup"
				PrmScenario						is a Scenario
					default label is "Scenario"
				PrmTemplate						is a BudgetTemplate
					default label is "Template"
				PrmCluster						is Numeric 3
					default label is "Cluster"
				PrmNumberOfClusters				is Numeric 3
					default label is "NumberOfClusters"
			Instance Selection
				where (FinanceEnterpriseGroup	= PrmFinanceEnterpriseGroup
				and Scenario					= PrmScenario
				and BudgetTemplate				= PrmTemplate
				and Cluster						= PrmCluster)
			Action Rules
				Instance Rules
					if (Cluster entered)

						invoke Recalculate

		RecalculateGroups is a Set Action
			restricted
			Parameters
				PrmFinanceEnterpriseGroup		is a FinanceEnterpriseGroup
					default label is "FinanceEnterpriseGroup"
				PrmScenario						is a Scenario
					default label is "Scenario"
				PrmTemplate						is a BudgetTemplate
					default label is "Template"
				PrmRecalculateUsingSparse		    is Boolean
			Instance Selection
				where (FinanceEnterpriseGroup	= PrmFinanceEnterpriseGroup
				and Scenario					= PrmScenario
				and BudgetTemplate				= PrmTemplate
				and RecalculateTotals)
			Sort Order
				FinanceEnterpriseGroup
				Scenario
				BudgetTemplate
				RecalculateTotals
			Action Rules
				Instance Rules
					invoke Recalculate
						invoked.PrmRecalculateUsingSparse	= PrmRecalculateUsingSparse

		UpdateCheckStatus is an Instance Action
			restricted
			Parameters
				PrmPeriod						is a GeneralLedgerCalendarPeriod
				CommitmentAmount				is a TotalAmount
				BudgetAmount					is a TotalAmount
			Action Rules
				if (!NeedsRecalculation)
					if (CommitmentAmount <= 0.0)
						if (CheckPeriod = PrmPeriod)
							initialize CheckPeriod
							initialize CheckPercent
					else
					if (BudgetAmount <= 0.0)
						CheckPercent = 9999.9999
						CheckPeriod = PrmPeriod
					else
						LocalCheckPercent	= CommitmentAmount/BudgetAmount
						if (LocalCheckPercent > CheckPercent
						or CheckPeriod = PrmPeriod)
							CheckPercent = LocalCheckPercent
							CheckPeriod = PrmPeriod


		CheckForErrors is a Set Action
			restricted
			Parameters
				PrmFinanceEnterpriseGroup		is a FinanceEnterpriseGroup
					default label is "FinanceEnterpriseGroup"
				PrmScenario						is a Scenario
					default label is "Scenario"
				PrmTemplate						is a BudgetTemplate
					default label is "Template"
			Instance Selection
				where (FinanceEnterpriseGroup	= PrmFinanceEnterpriseGroup
				and Scenario					= PrmScenario
				and BudgetTemplate				= PrmTemplate)
			Action Rules
				Instance Rules
					LocalCubeCommitmentData	= DisplayCubeCommitmentData
					LocalCommitmentData		= DisplayCommitmentData



					if (LocalCubeCommitmentData != LocalCommitmentData)
						ErrorFlag = true
						
		ClearErrorFlag is an Instance Action
			restricted
			Action Rules
				ErrorFlag = false

		PurgeLogEntries is an Instance Action
			valid when(BudgetTemplate.Status.Ready)
			run in background
			Parameters
				UpTo	is TimeStamp
			Parameter Rules
				UpTo
					required
			Action Rules
				LocalTimestamp	= UpTo
				for each PreviousLogsRel
					invoke Purge each.BudgetGroupTotalLog
					LocalCount		+= 1
					if (LocalCount >= 200)
						commit transaction
						LocalCount	= 0

		DeleteGroups is a Set Action
			restricted
			Parameters
				PrmFinanceEnterpriseGroup		is a FinanceEnterpriseGroup
					default label is "FinanceEnterpriseGroup"
				PrmScenario						is a Scenario
					default label is "Scenario"
				PrmTemplate						is a BudgetTemplate
					default label is "Template"
			Instance Selection
				where (FinanceEnterpriseGroup	= PrmFinanceEnterpriseGroup
				and Scenario					= PrmScenario
				and BudgetTemplate				= PrmTemplate)
			Action Rules
				Instance Rules
					invoke Delete BudgetGroup

		PurgeGroupsForTemplate is a Set Action
			restricted
			default label is untranslatable
			disable checkpoint
			Parameters
				PrmFinanceEnterpriseGroup		is a FinanceEnterpriseGroup
					default label is "FinanceEnterpriseGroup"
				PrmScenario						is a Scenario
					default label is "Scenario"
				PrmTemplate						is a BudgetTemplate
					default label is "Template"
			Instance Selection
				where (FinanceEnterpriseGroup	= PrmFinanceEnterpriseGroup
				and    Scenario					= PrmScenario
				and    BudgetTemplate			= PrmTemplate)
			Action Rules
				Instance Rules
					invoke Purge BudgetGroup

		PurgeGroupsForTemplateByEntity is a Set Action
			restricted
			default label is untranslatable
			disable checkpoint
			Parameters
				PrmFinanceEnterpriseGroup		is a FinanceEnterpriseGroup
					default label is "FinanceEnterpriseGroup"
				PrmScenario						is a Scenario
					default label is "Scenario"
				PrmTemplate						is a BudgetTemplate
					default label is "Template"
				PrmAccountingEntity				is an AccountingEntity
					default label is "AccountingEntity"
			Instance Selection
				where (FinanceEnterpriseGroup	= PrmFinanceEnterpriseGroup
				and    Scenario					= PrmScenario
				and    BudgetTemplate			= PrmTemplate
				and    AccountingEntity			= PrmAccountingEntity)
			Action Rules
				Instance Rules
					invoke Purge BudgetGroup					
		
		Purge is a Purge Action
			restricted
			bypass relational integrity rules
			Exit Rules
				if (BudgetTemplate.LazyActivation)
					invoke NotifyGroupIsDeleting BudgetGroupLazyInitNotifyRel
					

		InitializeGroupTotals is an Instance Action		
			restricted
			Action Rules


	Cube Relations
		TemplateRel
			matrix relation to GeneralLedgerTotal
			dynamic mapping is MatrixMap
			Dimension Mapping
				related.Scenario										= FinanceEnterpriseGroup.ActualsScenario.Parent
				related.GeneralLedgerTotal.Ledger						= Scenario.Basis.LedgerTopNode
			dynamic preload measures are BudgetTemplate.DynamicMeasure
		BudgetGroupTemplateRel
			matrix relation to GeneralLedgerTotal
			dynamic mapping is BudgetCubeMap
			Dimension Mapping
				related.Scenario										= Scenario
				related.GeneralLedgerTotal.Ledger						= CoreLedgerRel.Ledger

			dynamic preload measures are BudgetTemplate.DynamicMeasure
