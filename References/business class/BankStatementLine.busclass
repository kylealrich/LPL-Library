BankStatementLine is a BusinessClass
	owned by cashmgmt
	prefix is CBSL

	Ontology
		symbolic key is BankStatementLine

	Patterns
		implements ContextualParent

	Persistent Fields
		TransactionNumber				  	is Alpha 16
		RelatedReference				  	is a BankStatementLineReference 
		BankReference					  	is a BankStatementLineReference
		TextReference					  	is a BankStatementLineReference	
		DebitCreditIndicator
		StatementDate					  	is a snapshot of BankStatement.StatementDate
		StatementIntraday				  	is Boolean
			default label is "Intraday"
		TransactionDate					  	is Date
		ValueDate						  	is Date
		FundsCode						  	is AlphaUpper 1
		TransactionType					  	is a BankTransactionTypeCode
		ISO20022DomainCode
		ISO20022FamilyCode
		ISO20022SubFamilyCode
		CashTransactionCategory
		Description						  	is a BankStatementLineDescription
		BankTransactionCode

		LineAmount						  	is an InternationalAmount
		CorporateBaseAmount				  	is an InternationalAmount
		LocationCurrencyAmount			  	is an InternationalAmount
		CompanyCurrencyAmount			  	is an InternationalAmount
		OriginalLineAmount				  	is an InternationalAmount
		ZeroDayFloat					  	is an InternationalAmount
		OneDayFloat						  	is an InternationalAmount
		TwoOrMoreDaysFloat				  	is an InternationalAmount
		LineCurrency					  	is a FromCurrency
			default label is "Currency"
		LineStatus						  	is Numeric 1
			default label is "Status"
			States
				Unreconciled	value is 0
				Reconciled		value is 1
				Pending			value is 2
		Comment							  	is Text


		CategorizationGroup
		LastSequenceNumber				  	is a SequenceNumber
			disable Auditing
		BankStatementInterfaceHeader
			delete ignored
		BankStatementInterface
			delete ignored
		ReconciliationIdentifier
 		CashTransactionProcessingRuleGroup
 			delete ignored
 		CashTransactionProcessingRule
 			delete ignored
 		CashTransactionIdentifierType
 			delete ignored
 		CashTransactionIdentifier
 			context of CashTransactionIdentifierType
 			delete ignored
 		ReconSummaryRecord

		StatementLinePostingOption
		HasLineException				  	is Boolean
		PendingReconcileDate			  	is Date
		ReclassificationChangedCategory   	is a CashTransactionCategory
		RevalueAmount					  	is an InternationalAmount
		RevalueDate						  	is Date
		CurrencyGainLossLine			 	is Boolean
		LineDistributionAmount			  	is an InternationalAmount
		BaseTotalDistributionAmount		  	is a DocumentCurrencyTotals
		OffsetDistributionCreated		  	is Boolean
		FinancialInstitution			  	is a snapshot of CashManagementAccount.FinancialInstitution 
		CreatedCashLedgerSourceRecord		is a CashLedgerSourceRecord
		CreatedCashLedgerTransaction	  	is a CashLedgerTransaction
		BudgetEditProcessing				is Numeric size 1
			States
				NotInProcessing	value is 0
				InProcess		value is 1
				Failure			value is 2
				Success			value is 3
		ManuallyCreatedForImportedStatement	is Boolean		





		ParsedData1		is a ParsedDataField
			default label is "<CashManagementAccount.ParsingRuleGroupArray.ParsingMapping[1].Label>_(ParsedData1)"
		ParsedData2 	is a ParsedDataField
			default label is "<CashManagementAccount.ParsingRuleGroupArray.ParsingMapping[2].Label>_(ParsedData2)"
		ParsedData3		is a ParsedDataField
			default label is "<CashManagementAccount.ParsingRuleGroupArray.ParsingMapping[3].Label>_(ParsedData3)"
		ParsedData4		is a ParsedDataField
			default label is "<CashManagementAccount.ParsingRuleGroupArray.ParsingMapping[4].Label>_(ParsedData4)"
		ParsedData5		is a ParsedDataField
			default label is "<CashManagementAccount.ParsingRuleGroupArray.ParsingMapping[5].Label>_(ParsedData5)"
		ParsedData6		is a ParsedDataField
			default label is "<CashManagementAccount.ParsingRuleGroupArray.ParsingMapping[6].Label>_(ParsedData6)"
		ParsedData7		is a ParsedDataField
			default label is "<CashManagementAccount.ParsingRuleGroupArray.ParsingMapping[7].Label>_(ParsedData7)"
		ParsedData8		is a ParsedDataField
			default label is "<CashManagementAccount.ParsingRuleGroupArray.ParsingMapping[8].Label>_(ParsedData8)"
		ParsedData9		is a ParsedDataField
			default label is "<CashManagementAccount.ParsingRuleGroupArray.ParsingMapping[9].Label>_(ParsedData9)"
		ParsedData10	is a ParsedDataField
			default label is "<CashManagementAccount.ParsingRuleGroupArray.ParsingMapping[10].Label>_(ParsedData10)"


	Context Fields
		StatementDateRange		  		  	is a DateRange
		ValueDateRange
		SearchAmountRange
		BankReconciliationTemplate

	Transient Fields
		DoNotIncrementLine				  	is Boolean
		SkipCashAccountAttachRule
		TransientLongDescription 			is Text
		TemplateLiteralValue				is Alpha 50
			Text Variables
				RelatedReference	value is RelatedReference
				BankReference		value is BankReference
				TextReference		value is TextReference

	Local Fields
		LocalIdentifierType 			  	is a CashTransactionIdentifierType
		LocalProcessingRule				  	is a CashTransactionProcessingRule
		LocalCashForecast				  	is a CashForecast
		LocalSystemCalendar				  	is AlphaUpper size 20
		LocalActualDateRange			  	is a DateRange
		LocalStatementDate				  	is Date
		LocalActualCalendarDate			  	is Date
		LocalActualBankDayNumber		  	is Numeric 8
		LocalCashForecastAccount		  	is a CashForecastAccount
		LocalAccountInformation			  	is a FinanceCodeBlockFull
		LocalCashAllocationCode			  	is an CashAllocationCode
		DistributionRunningTotal		  	is an InternationalAmount
		LastBankStatementLineDistribution 	is a BankStatementLineDistribution view
		LocalBankStatement 				  	is a BankStatement
		LocalCashManagementGroup		  	is AlphaUpper 4
		LocalTransactionType			  	is Numeric 2
		LocalPeriodDateRange			  	is a DateRange
		LocalFinancialPeriodDate		  	is Date
		LocalGeneralLedgerCompany		  	is like GeneralLedgerCompany
		LocalCashManagementLocation		  	is a CashManagementLocation
		LocalFinancialInstitution		  	is a FinancialInstitution
		LocalCashManagementAccount		 	is AlphaUpper 35
		LocalCashTransactionCategory	  	is a CashTransactionCategory
		LocalCounter					  	is Numeric 3
		LocalReferenceField				  	is Alpha up to 35
		LocalTransactionNumber			  	is Alpha up to 35
		LocalCashLedgerTransaction		  	is a CashLedgerTransaction view
		LastCashLedgerGLDistribution	  	is a CashLedgerGLDistribution view
		LocalActionSubmitForApproval	  	is Boolean
		LocalActionUnreleaseToRelease	  	is Boolean
		LocalCashCode						is like CashCode
		LocalBankTransactionCode			is like BankTransactionCode
		AutoNumberingAction			 		is Numeric 1
			States
				OverrideNumberWithAnAutoGeneratedNumber	value is 1
				BypassAutoTransactionNumbering			value is 2
		BankStatementReleaseAllAction		is Boolean
		LocalRoundedLineAmount				is an InternalAmount
		LocalTransactionCount           		is Numeric size 6
		LocalParsedDescription				is AlphaUpper 1000
		LocalParsingRuleGroup				is a StatementParsingRuleGroup
		LocalRemoveString					is AlphaUpper up to 20
		LocalRemoveBefore					is AlphaUpper up to 20
		LocalRemoveAfter					is AlphaUpper up to 20
		LocalCharacterFromValue				is Numeric 4
		LocalCharacterToValue				is Numeric 4
		LocalRollingDateRange				is a DateRange
		LocalDateRange						is a DateRange
		LocalWeek							is Numeric 4
		LocalMonth							is Numeric 4
		LocalRollingDays					is Numeric 4
		LocalRollingWeeks					is Numeric 4
		LocalRollingMonths					is Numeric 4
		LocalEnterpriseGroup				is a EnterpriseGroup

	Derived Fields
		OutOfBalanceAmount is a DerivedField
			type is like InternationalAmount
			if (DistributionsRequired)
				return (LineAmount + LineDistributionAmount)
			else
			if (StatementLineDetailPostToGeneralLedgerRel exists) 
				return (sum StatementLineDetailPostToGeneralLedgerRel.LineAmount + LineDistributionAmount)	
			if (!StatementLinePostingOption.PostToGeneralLedger
			and BankStatementLineDistribution set exists)
				return LineDistributionAmount
			return "0"

		NumLinesByReconciledStatus	is a DerivedField
			type is Numeric size 5
			if (!LineStatus.Unreconciled)
				return BankStatement.NumberOfLinesReconciled
			else
				return BankStatement.NumberOfLinesUnreconciled

		IsFirstLineByReconciledStatus is a ConditionalField
			type is Boolean
			if (first LinesByReconciledStatusRel.BankStatementLine	= BankStatementLine)
				true
			else
				false

		ReconciledStatusField is a DerivedField
			type is Alpha 30
			if (LineStatus.Reconciled)
				return ReconciledLineMessage
			else
				return UnreconciledLineMessage

		ReconciledLineMessage is a MessageField
			restricted
			"ReconciledLines"
		
		UnreconciledLineMessage is a MessageField
			restricted
			"UnreconciledLines"
		




							




		




		




		




						
		ClearedDeposit is a DerivedField
			type is like InternationalAmount
			if (DebitCreditIndicator.Credit)
				return LineAmount

		ClearedPayment is a DerivedField
			type is like InternationalAmount
			restricted
			if (DebitCreditIndicator.Debit)
				return LineAmount
		
		SignedClearedPayment is a DerivedField
			type is like InternationalAmount
			return (ClearedPayment * -1)
			
		NetActivity is a DerivedField
			type is like InternationalAmount
			restricted
			return (ClearedDeposit + ClearedPayment)
		
		CorporateBaseClearedDeposit is a DerivedField
			type is like InternationalAmount
			restricted
			if (DebitCreditIndicator.Credit)
				return CorporateBaseAmount

		CorporateBaseClearedPayment is a DerivedField
			type is like InternationalAmount
			restricted
			if (DebitCreditIndicator.Debit)
				return CorporateBaseAmount
		
		CorporateBaseSignedClearedPayment is a DerivedField
			type is like InternationalAmount
			restricted
			return (CorporateBaseClearedPayment * -1)
			
		CorporateBaseNetActivity is a DerivedField
			type is like InternationalAmount
			restricted
			default label is "NetActivity"
			return (CorporateBaseClearedDeposit + CorporateBaseClearedPayment)






		CompanyCurrencyClearedDeposit is a DerivedField
			type is like InternationalAmount
			restricted
			if (DebitCreditIndicator.Credit)
				return CompanyCurrencyAmount

		CompanyCurrencyClearedPayment is a DerivedField
			type is like InternationalAmount
			restricted
			if (DebitCreditIndicator.Debit)
				return CompanyCurrencyAmount
		
		CompanyCurrencySignedClearedPayment is a DerivedField
			type is like InternationalAmount
			restricted
			return (CompanyCurrencyClearedPayment * -1)
			
		CompanyCurrencyNetActivity is a DerivedField
			type is like InternationalAmount
			restricted
			return (CompanyCurrencyClearedDeposit + CompanyCurrencyClearedPayment)
				
		LocationCurrencyClearedDeposit is a DerivedField
			type is like InternationalAmount
			restricted
			if (DebitCreditIndicator.Credit)
				return LocationCurrencyAmount

		LocationCurrencyClearedPayment is a DerivedField
			type is like InternationalAmount
			restricted
			if (DebitCreditIndicator.Debit)
				return LocationCurrencyAmount
		
		LocationCurrencySignedClearedPayment is a DerivedField
			type is like InternationalAmount
			restricted
			return (LocationCurrencyClearedPayment * -1)
			
		LocationCurrencyNetActivity is a DerivedField
			type is like InternationalAmount
			restricted
			return (LocationCurrencyClearedDeposit + LocationCurrencyClearedPayment)
				
		CashPositionTarget is a DerivedField
			type is like InternationalAmount
			restricted
			return CashManagementAccount.CashPositionTarget
		
		ActualBankDayNumber is a DerivedField
			type is Numeric 8
			restricted
			if (ActualBankDayNumberRel exists)
				LocalActualBankDayNumber = 1
				for each ActualBankDayNumberRel
					if (LocalStatementDate = each.SystemCalendarDate)
						return LocalActualBankDayNumber 
						end for each
					else
						LocalActualBankDayNumber += 1
			else
				initialize LocalActualBankDayNumber
				return LocalActualBankDayNumber
					
		DerivedCommentLinkName is a DerivedField
			type is Alpha 12
			restricted
			if (Comment entered)
				return ViewCommentMessage
			else
				return AddCommentMessage

		TotalOfSplitLines is a DerivedField
			type is like InternationalAmount
			restricted
			if (IsOriginalLine)
				return (sum AllBankStatementLineSequenceRel.LineAmount)
		
		AlphaLineNumber is a DerivedField
			type is Alpha 10
			restricted
			return BankStatementLine.LineNumber
				
		DerivedLineNumber is a DerivedField
			type is Alpha 15
			default label is "Line"
			if (!BankStatementLine.SequenceNumber entered)
				return AlphaLineNumber
			else
				return AlphaLineNumber + "-" + BankStatementLine.SequenceNumber
		
		LineAmountDifference is a DerivedField
			type is like InternationalAmount
			restricted
			return (LineAmount - old LineAmount)
		
		OldLineAmount is a DerivedField
			type is like InternationalAmount
			restricted
			return (old LineAmount)
					
		CreatedCashLedgerTransactionLineMatchField is a DerivedField
			type is AlphaUpper 20
			restricted
			return (BankTransactionCode + CreatedCashLedgerTransaction.TransactionNumber)

		DefaultTransactionCode is a DerivedField
			type is like BankTransactionCode
			restricted
			if (LineAmount >= 0)
				return CashManagementAccount.CreditTransactionCode
			else
				return CashManagementAccount.DebitTransactionCode					

		CashLedgerPostingDate is a DerivedField
			type is Date
			if (CompanySystemClosingControlRel.Control)	
				if (TransactionDate within CompanySystemClosingControlRel.ValidEntryDate)	
					return TransactionDate	
				else
					return CompanySystemClosingControlRel.ValidEntryDate.Begin
			return TransactionDate	

		AddCommentMessage is a MessageField
			restricted
			"AddComment"		

		ViewCommentMessage is a MessageField
			restricted
			"ViewComment"		

		SummarizedTransactionMessage is a MessageField
			restricted
			"SummarizedTransaction"
		
		AutoCashTransactionCreateDescription is a MessageField
			restricted
			"StatementLineCategory;<CashTransactionCategory>"

		DerivedHeaderBudgetErrorCount is a DerivedField
			type is Alpha size up to 20
			restricted
			if (HeaderBudgetEditErrorExists)
				return "(" + instance count of HeaderBudgetEditErrorRel + ")"
			else
				return ""

		DerivedUnReleasedTransactionErrorMessage is a DerivedField
			type is Alpha size up to 200
			if(CreatedCashLedgerTransaction entered)
				return LineCashLedgerTransactionUnreleasedErrorMessage	
			else
				return LineDetailCashLedgerTransactionUnreleasedErrorMessage	
				
			
		LineCashLedgerTransactionUnreleasedErrorMessage is a MessageField
			restricted
			"RelatedLineCashLedgerTransactionIsNotReleased"

		LineDetailCashLedgerTransactionUnreleasedErrorMessage is a MessageField
			restricted
			"RelatedLineDetailCashLedgerTransactionIsNotReleased"

		DerivedWarningBudgetErrorCount is a DerivedField
			type is Alpha size up to 20
			restricted
			if (DistributionBudgetEditErrorExists)
				return "(" + instance count of DistributionBudgetEditErrorRel + ")"
			else
				return ""
				
		DerivedFirstErrorMessage is a DerivedField
			type is Alpha size up to 200
			restricted
			if (HeaderBudgetEditErrorRel exists)
				return MouseOverBudgetErrorMessage
			if (DistributionBudgetEditErrorRel exists)
				return MouseOverBudgetErrorMessage
			if (RestoreOriginalLineAfterSplit)
				return MouseOverModifiedStatementErrorMessage

		MouseOverBudgetErrorMessage is a MessageField
			restricted
			"BudgetErrorsExist;SeeBudgetErrorTabForDetails"

		MouseOverModifiedStatementErrorMessage is a MessageField
			restricted
			"BankStatementLineHasBeenModified;RestoreOriginalStatementLineActionShouldBeExecuted"












		TotalOfBankStatementLineDetails is a DerivedField
			type is like InternationalAmount
			restricted
			return (sum BankStatementLineDetailRel.LineAmount)
		
		MobileCurrency is a DerivedField
			type is AlphaUpper 5
			restricted
			return BankStatement.StatementCurrency
			
		MobileLineAmount is a DerivedField
			type is Alpha size 30
			return LineAmount + "  " + MobileCurrency
		
		DerivedLocalRoundTo is a DerivedField
			type is Decimal 5.4
			restricted
			if (LineCurrency.NumberOfDecimals = 2)
				return .01
			else
			if (LineCurrency.NumberOfDecimals = 0)
				return 1
			else
			if (LineCurrency.NumberOfDecimals = 3)
				return .001
			else
			if (LineCurrency.NumberOfDecimals = 4)
				return .0001
				
		ContextMessageEntityType is a StringField
			type is Alpha 30
			restricted
			"InforBankStatementLine"

		ContextMessageText is a MessageField
			restricted
			"BankStatementLine<BankStatementLine>"

		LikeRemoveString is a StringField
			type is AlphaUpper up to 25
			restricted
			"*" + LocalRemoveString + "*"

		LikeRemoveBefore is a StringField
			type is AlphaUpper up to 25
			restricted
			"*" + LocalRemoveBefore + "*"

		LikeRemoveAfter is a StringField
			type is AlphaUpper up to 25
			restricted
			"*" + LocalRemoveAfter + "*"

	Field Rules
		RelatedReference
			RelatedReference -= "\\\\"
			RelatedReference -= " "
		
		BankReference
			BankReference -= "\\\\"
			BankReference -= " "
				
		Description
			Description -= "\\\\"
			Description -= " "
			



		CashTransactionCategory
			if (CashManagementAccount.StatementLineClassification.DefaultFromAccount)
				default to CashManagementAccount.DefaultCategory
			else
				default to first UncategorizedCategoryRel.CashTransactionCategory	
			
			if (CashTransactionCategory changed
			and !StatementIntraday)
				if (HasReleasedOrPostedDistributions)
					confirmation required
						"ReleasedOrPostedDistributionsExistForLine;UpdatingCategoryWillNotUpdateDistributions;AdditionalDistributionsCanBeManuallyEnteredIfNeeded"
				else				
				if  (CreatedCashLedgerTransaction entered)
					confirmation required
						"CashledgerTransactionsExistForLine;UpdatingCategoryWillNotUpdateCashLedgerTransaction;AdditionalDistributionsCanBeManuallyEnteredIfNeeded"
					constraint (!CashTransactionCategory.StatementLinePostingOption.PostToGeneralLedger)
						"CannotAssignGlobalLedgerPostingCategoryToLineWithCashLedgerTransaction"	
				else
					if (UnreleasedLineDistributionRel exists)
						confirmation required
							"DistributionInformationWillBeUpdated;WouldYouLikeToContinue?"
							
						invoke Delete BankStatementLineDistribution set
					StatementLinePostingOption	= CashTransactionCategory.StatementLinePostingOption
					LocalAccountInformation		= CashTransactionCategory.CategoryAccount 
					LocalCashAllocationCode		= CashTransactionCategory.CashAllocationCode
					invoke DistributionCreation
			
			if (CreateCashForecastObjectsForTransaction)
				for each CashForecastByDateRangeRel
					LocalCashForecast = each.CashForecast
					if (!ActualCashForecastCategoryRel exists)
						invoke Update ActualCashForecastCategoryRel
							invoked.ForecastCreationParameter.ForecastCalculation = 1 
							invoked.CreatedFromStatementLine = true
					
					if (!ActualCashForecastPeriodRel exists)
						invoke Create ActualCashForecastPeriodRel
							invoked.CreatedByStatement = BankStatement	

					if (!CashForecastPeriodAmountRel exists)
						invoke CreateOnly CashForecastPeriodAmountRel
							invoked.CreatedByStatement = BankStatement
							
					if (CashTransactionCategory changed)
						if (CashForecastPeriodAmountRel exists)
							increment CashForecastPeriodAmountRel.ActualAmount by LineAmount
				
				invoke ScheduledRefresh CashForecastPeriodAmountCubeRel in background
								
		LineCurrency
			default to BankStatement.StatementCurrency

		CorporateBaseAmount
			if (!CurrencyGainLossLine)
				CorporateBaseAmount	= (LineAmount * BankStatement.CorporateBaseEndingBalance.EnteredCurrencyRate)
		
		CompanyCurrencyAmount
			if (!CurrencyGainLossLine)
				CompanyCurrencyAmount	= (LineAmount * BankStatement.CompanyCurrencyEndingBalance.EnteredCurrencyRate)

		LocationCurrencyAmount
			if (!CurrencyGainLossLine)
				LocationCurrencyAmount	= (LineAmount * BankStatement.LocationCurrencyEndingBalance.EnteredCurrencyRate)

		CategorizationGroup
			default to 1

		DebitCreditIndicator
			if (DebitCreditIndicator !entered)	
				if (LineAmount >= 0)
					DebitCreditIndicator = "C"
				else
					DebitCreditIndicator = "D"

		StatementLinePostingOption
			default to CashTransactionCategory.StatementLinePostingOption
			if (CreatedCashLedgerTransaction entered)
				StatementLinePostingOption	= StatementLinePostingOption.PostToCashLedger
				
		TransactionDate
			if (CashManagementAccount.DefaultTransactionDate.StatementDate)
				default to StatementDate
			else
				default to ValueDate
				default to StatementDate

		ValueDate
			default to StatementDate
			
		StatementIntraday
			if (BankStatement.StatementType.Intraday)
				StatementIntraday	= true

	Relations
		CbTransRel is a CashLedgerTransaction set
			Instance Selection
				where (related.Status = 1)

		UnreleasedCashLedgerTransactionRel is a CashLedgerTransaction set
			Instance Selection
				where (related.Status.Unreleased
				or	   related.Status.PendingApproval)
		
		LinesByReconciledStatusRel
			one-to-many relation to BankStatementLine
			Field Mapping uses ByReconciledStatus
				related.CashManagementGroup		= CashManagementGroup
				related.CashManagementAccount	= CashManagementAccount
				related.BankStatement			= BankStatement
				related.LineStatus				= LineStatus

		CashTransactionProcessingRuleGroupDetailRel
			one-to-many relation to CashTransactionProcessingRuleGroupDetail
			Field Mapping uses ByPriority
				related.CashManagementGroup 			   = CashManagementGroup
				related.CashTransactionProcessingRuleGroup = CashManagementAccount.CashTransactionProcessingRuleGroup
		
		CashTransactionIdentifierByAccountRel
			one-to-many relation to CashTransactionIdentifier
			disable link cache
			Field Mapping uses ByActiveIdentifierType
				related.CashManagementGroup 		  = CashManagementGroup
				related.CashTransactionIdentifierType = LocalIdentifierType
				related.Active						  = true
			Instance Selection
				where (CashManagementAccount like related.LikeCashTransactionIdentifier)
				
		CashTransactionIdentifierByDescriptionRel
			one-to-many relation to CashTransactionIdentifier
			disable link cache
			Field Mapping uses ByActiveIdentifierType
				related.CashManagementGroup 		  = CashManagementGroup
				related.CashTransactionIdentifierType = LocalIdentifierType
				related.Active						  = true
			Instance Selection
				where (Description like related.LikeCashTransactionIdentifier)

		CashTransactionIdentifierByRelatedReferenceRel
			one-to-many relation to CashTransactionIdentifier
			disable link cache
			Field Mapping uses ByActiveIdentifierType
				related.CashManagementGroup 		  = CashManagementGroup
				related.CashTransactionIdentifierType = LocalIdentifierType
				related.Active						  = true
			Instance Selection
				where (RelatedReference like related.LikeCashTransactionIdentifier)

		CashTransactionIdentifierByBankReferenceRel
			one-to-many relation to CashTransactionIdentifier
			disable link cache
			Field Mapping uses ByActiveIdentifierType
				related.CashManagementGroup 		  = CashManagementGroup
				related.CashTransactionIdentifierType = LocalIdentifierType
				related.Active						  = true
			Instance Selection
				where (BankReference like related.LikeCashTransactionIdentifier)
		
		CashTransactionIdentifierByTextReferenceRel
			one-to-many relation to CashTransactionIdentifier
			disable link cache
			Field Mapping uses ByActiveIdentifierType
				related.CashManagementGroup 		  = CashManagementGroup
				related.CashTransactionIdentifierType = LocalIdentifierType
				related.Active						  = true
			Instance Selection
				where (TextReference like related.LikeCashTransactionIdentifier)
				
		CashForecastPeriodBankDayRel
			one-to-many relation to CashForecastPeriod
			Field Mapping uses ByBankDayNumber
				related.CashManagementGroup		  				  = CashManagementGroup
				related.CashForecast		  					  = LocalCashForecast
				related.CashForecastAccount.CashManagementAccount = CashManagementAccount
				related.BankDayNumber		  					  = LocalActualBankDayNumber

		CashForecastPeriodRollingBankDayRel
			one-to-many relation to CashForecastPeriod
			Field Mapping uses ByBankDayNumber
				related.CashManagementGroup		  				  = CashManagementGroup
				related.CashForecast		  					  = LocalCashForecast
				related.CashForecastAccount.CashManagementAccount = CashManagementAccount
				related.BankDayNumber		  					  = LocalActualBankDayNumber
			Instance Selection
				where (related.CashForecastPeriod within LocalRollingDateRange)
			
		RollingForecastCalendarBankDayRel
			one-to-many relation to SystemCalendarDate
			Field Mapping uses symbolic key
				related.EnterpriseGroup	= LocalEnterpriseGroup
				related.SystemCalendar 	= LocalSystemCalendar
			Instance Selection
				where (related.IsBankDay
				and	   related.SystemCalendarDate within LocalActualDateRange)

		ActualBankDayNumberRel
			one-to-many relation to SystemCalendarDate
			Field Mapping uses symbolic key
				related.EnterpriseGroup	= CashManagementGroup.FinanceEnterpriseGroup.EnterpriseGroup
				related.SystemCalendar 	= LocalSystemCalendar
			Instance Selection
				where (related.IsBankDay
				and	   related.SystemCalendarDate within LocalActualDateRange)
		
		UncategorizedCategoryRel
			one-to-many relation to CashTransactionCategory
			Field Mapping uses ByUncategorizedCategory
				related.CashManagementGroup	  = CashManagementGroup
				related.UncategorizedCategory = true

		CashForecastAccountRel
			one-to-one relation to CashForecastAccount
			Field Mapping uses symbolic key
				related.CashManagementGroup						  = CashManagementGroup
				related.CashForecast							  = LocalCashForecast
				related.CashForecastAccount.CashManagementAccount = CashManagementAccount
		
		LocalCashForecastByDateRangeRel
			one-to-many relation to CashForecastAccount
			Field Mapping uses ByCashManagementAccount
				related.CashManagementGroup		  				  = LocalCashManagementGroup
				related.CashForecastAccount.CashManagementAccount = LocalCashManagementAccount
			Instance Selection
				where (LocalStatementDate within related.CashForecast.ForecastDateRange)
				
		CashForecastByDateRangeRel
			one-to-many relation to CashForecastAccount
			Field Mapping uses ByCashManagementAccount
				related.CashManagementGroup		  				  = CashManagementGroup
				related.CashForecastAccount.CashManagementAccount = CashManagementAccount
			Instance Selection
				where (StatementDate within related.CashForecast.ForecastDateRange)
				
		ActualCashForecastAccountRel
			one-to-one relation to CashForecastAccount
			Field Mapping uses symbolic key
				related.CashManagementGroup						  = CashManagementGroup
				related.CashForecast							  = first CashForecastByDateRangeRel.CashForecast
				related.CashForecastAccount.CashManagementAccount = CashManagementAccount

		ActualCashForecastCategoryRel
			one-to-one relation to CashForecastCategory
			Field Mapping uses symbolic key
				related.CashManagementGroup							 = CashManagementGroup
				related.CashForecast								 = LocalCashForecast
				related.CashForecastCategory.CashTransactionCategory = CashTransactionCategory

		ActualCashForecastPeriodRel
			one-to-one relation to CashForecastPeriod
			Field Mapping uses symbolic key
				related.CashManagementGroup						  = CashManagementGroup
				related.CashForecast							  = LocalCashForecast
				related.CashForecastAccount.CashManagementAccount = CashManagementAccount
				related.CashForecastPeriod						  = StatementDate
			
		ActualCashForecastPeriodAmountRel
			one-to-one relation to CashForecastPeriodAmount
			Field Mapping uses symbolic key
				related.CashManagementGroup								= CashManagementGroup
				related.CashForecast									= first CashForecastByDateRangeRel.CashForecast
				related.CashForecastAccount.CashManagementAccount		= CashManagementAccount
				related.CashForecastPeriod								= StatementDate
				related.CashForecastCategory.CashTransactionCategory	= CashTransactionCategory
			
		CashForecastPeriodAmountRel
			one-to-one relation to CashForecastPeriodAmount
			Field Mapping uses symbolic key
				related.CashManagementGroup								= CashManagementGroup
				related.CashForecast									= LocalCashForecast
				related.CashForecastAccount.CashManagementAccount		= CashManagementAccount
				related.CashForecastPeriod								= StatementDate
				related.CashForecastCategory.CashTransactionCategory	= CashTransactionCategory

		RestoreCashForecastPeriodAmountRel
			one-to-one relation to CashForecastPeriodAmount
			Field Mapping uses symbolic key
				related.CashManagementGroup								= CashManagementGroup
				related.CashForecast									= LocalCashForecast
				related.CashForecastAccount.CashManagementAccount		= CashManagementAccount
				related.CashForecastPeriod								= StatementDate
				related.CashForecastCategory.CashTransactionCategory	= LocalCashTransactionCategory

		OldActualCashForecastPeriodAmountRel
			one-to-one relation to CashForecastPeriodAmount
			Field Mapping uses symbolic key
				related.CashManagementGroup								= CashManagementGroup
				related.CashForecast									= first CashForecastByDateRangeRel.CashForecast
				related.CashForecastAccount.CashManagementAccount		= CashManagementAccount
				related.CashForecastPeriod								= StatementDate
				related.CashForecastCategory.CashTransactionCategory	= old CashTransactionCategory

		OldCashForecastPeriodAmountRel
			one-to-one relation to CashForecastPeriodAmount
			Field Mapping uses symbolic key
				related.CashManagementGroup								= CashManagementGroup
				related.CashForecast									= LocalCashForecast
				related.CashForecastAccount.CashManagementAccount		= CashManagementAccount
				related.CashForecastPeriod								= StatementDate
				related.CashForecastCategory.CashTransactionCategory	= old CashTransactionCategory
		
		ChangedActualCashForecastPeriodAmountRel
			one-to-one relation to CashForecastPeriodAmount
			Field Mapping uses symbolic key
				related.CashManagementGroup							 = CashManagementGroup
				related.CashForecast								 = first CashForecastByDateRangeRel.CashForecast
				related.CashForecastAccount.CashManagementAccount	 = CashManagementAccount
				related.CashForecastPeriod							 = StatementDate
				related.CashForecastCategory.CashTransactionCategory = ReclassificationChangedCategory
						
		UnreleasedLineDistributionRel is a BankStatementLineDistribution set
			Instance Selection
				where (related.Status.Entered)

		ReleasedLineDistributionRel is a BankStatementLineDistribution set
			Instance Selection
				where (related.Status.Released)

		PostedLineDistributionRel is a BankStatementLineDistribution set
			Instance Selection
				where (related.Status.Posted)

		ReleasedOrPostedLineDistributionRel is a BankStatementLineDistribution set
			Instance Selection
				where (related.Status > 0
				and    related.Status < 3)

		PendingApprovalLineDistributionRel is a BankStatementLineDistribution set
			Instance Selection
				where (related.Status.PendingApproval)

		BankStatementLineCubeRel
			one-to-one relation to AnalyticCube
			Field Mapping uses AnalyticCubeSet
				related.BusinessClass = "BankStatementLine"

		AllBankStatementLineSequenceRel
			one-to-many relation to BankStatementLine
			Field Mapping uses ByBankStatementLine
				related.CashManagementGroup			 = CashManagementGroup
				related.CashManagementAccount		 = CashManagementAccount
				related.BankStatement				 = BankStatement
				related.BankStatementLine.LineNumber = BankStatementLine.LineNumber

		SplitBankStatementLineSequenceRel
			one-to-many relation using AllBankStatementLineSequenceRel
			Instance Selection
				where (related.IsSplitLine)
				
		OriginalBankStatementLineSequenceRel
			one-to-many relation using AllBankStatementLineSequenceRel
			Instance Selection
				where (related.IsOriginalLine)
				
		OpenTransactionsAvailableToMatchRel
			one-to-many relation to BankStatementReconciliation
			Field Mapping uses symbolic key
				related.CashManagementGroup		= CashManagementGroup
				related.CashManagementAccount	= CashManagementAccount
			Instance Selection
				where  (related.BankStatementReconciliation	!= ReconciliationIdentifier.BankStatementReconciliation
				and     related.ReconMatchNumber	!entered
				and    !related.SummaryRecord)

		RelatedMatchedTransactionsRel
			one-to-many relation to BankStatementReconciliation
			Field Mapping uses symbolic key
				related.CashManagementGroup			= CashManagementGroup
				related.CashManagementAccount		= CashManagementAccount
			Instance Selection
				where (related.ReconMatchNumber				entered
				and    related.ReconMatchNumber				= ReconSummaryRecord.BankStatementReconciliation
				and    related.BankStatementReconciliation	!= ReconciliationIdentifier.BankStatementReconciliation)

		ImportedBankStatementByDateRel 
			one-to-many relation to BankStatement
			Field Mapping uses ByStatementDate
				related.CashManagementGroup = CashManagementGroup
		
		CashAllocationCodeRel 
			one-to-many relation to CashAllocationCode
			Field Mapping uses symbolic key
				related.CashManagementGroup = CashManagementGroup
				
		HideForAuditorRel
			one-to-one relation to ActorRole
			Field Mapping uses symbolic key
				related.Actor					= actor
 				related.ActorRole.Role			= "RECONExternalAuditor_ST"		

		BankStatementTotalRel
			one-to-one relation to BankStatementTotal
			Field Mapping uses symbolic key
				related.CashManagementGroup							= LocalCashManagementGroup
				related.BankStatementTotal.FinancialPeriodDate		= LocalFinancialPeriodDate	
				related.BankStatementTotal.LegalEntity				= LocalGeneralLedgerCompany
				related.BankStatementTotal.CashManagementAccount	= LocalCashManagementAccount
				related.BankStatementTotal.CashTransactionCategory	= LocalCashTransactionCategory

		BankStatementTotalBalanceRel
			one-to-one relation to BankStatementTotal
			Field Mapping uses ByTransactionType
				related.CashManagementGroup							= LocalCashManagementGroup
				related.TransactionType								= LocalTransactionType
				related.BankStatementTotal.FinancialPeriodDate		= LocalFinancialPeriodDate	
				related.BankStatementTotal.LegalEntity				= LocalGeneralLedgerCompany
				related.BankStatementTotal.CashManagementAccount	= LocalCashManagementAccount
				related.BankStatementTotal.CashTransactionCategory	= LocalCashTransactionCategory
				
		BankStatementTotalByAccountPeriodDateRel
			one-to-many relation to BankStatementTotal
			Field Mapping uses ByDescendingDate
				related.CashManagementGroup							= LocalCashManagementGroup
				related.BankStatementTotal.LegalEntity				= LocalGeneralLedgerCompany
				related.BankStatementTotal.CashManagementAccount	= LocalCashManagementAccount
			Instance Selection
				where (related.BankStatementTotal.FinancialPeriodDate within LocalPeriodDateRange)
		
		BankStatementTotalByPeriodDateRel
			one-to-many relation to BankStatementTotal
			Field Mapping uses symbolic key
				related.CashManagementGroup							= LocalCashManagementGroup
			Instance Selection
				where (related.BankStatementTotal.FinancialPeriodDate within LocalPeriodDateRange)
			






		DefaultPostingCompanyRel
			one-to-one relation to CompanyCashCode
			Field Mapping uses symbolic key
				related.Company		= CashManagementAccount.LegalEntity
		   		related.CashCode	= CashManagementAccount.CashCode

		BankStatementLineDistributionsRel
			one-to-many relation to BankStatementLineDistribution
			Field Mapping uses ByDefaultSearchOrder
				related.CashManagementGroup			= CashManagementGroup
				related.CashManagementAccount		= CashManagementAccount
			Instance Selection
				where (related.BankStatement		= BankStatement
				and    related.BankStatementLine	= BankStatementLine.LineNumber)

		CompanySystemClosingControlRel
			one-to-one relation to CompanySystemClosingControl
			Field Mapping uses BySystemCode
				related.GeneralLedgerSystemCode		= "CB"
				related.Company						= CashManagementAccount.LegalEntity

		HeaderBudgetEditErrorRel
			one-to-many relation to BudgetEditError
			Field Mapping uses ByBudgetGroup
				related.FinanceEnterpriseGroup			= CashManagementGroup
				related.BudgetEditError.BudgetEditGroup	= UniqueID

		DistributionBudgetEditErrorRel
			one-to-many relation to BudgetEditError
			Field Mapping uses ByHeaderUniqueID
				related.FinanceEnterpriseGroup			= CashManagementGroup
				related.HeaderUniqueID					= UniqueID

		GeneralLedgerSystemCodeRel		
			one-to-one relation to GeneralLedgerSystemCode
			Field Mapping uses symbolic key
				related.FinanceEnterpriseGroup	= CashManagementGroup
				related.GeneralLedgerSystemCode	= "CB"	

		GLCommitRel		
			one-to-many relation to GLCommit
			Field Mapping uses BySystemAndHeaderUniqueID	
				related.FinanceEnterpriseGroup	= CashManagementGroup
				related.HeaderUniqueID	= UniqueID



		OpenGLCommitDrillRel	
			one-to-many relation to GLCommit
			Field Mapping uses BySystemAndHeaderUniqueID
				related.FinanceEnterpriseGroup	= CashManagementGroup
				related.HeaderUniqueID			= UniqueID
			Instance Selection
				where (related.Status = 0
				or     related.Status = 2
				or     related.Status = 3)
			












		GLCommitDocumentsRel	
			one-to-one relation to GLCommitDocument
			Field Mapping uses ByHeaderObjectReference
				related.HeaderObjectReference = reference to this instance

		BudgetTemplateGroupTotalRel
			one-to-many relation to BudgetTemplateGroupTotal
			Field Mapping uses ByBudgetGroup
				related.FinanceEnterpriseGroup						= CashManagementGroup
				related.BudgetTemplateGroupTotal.BudgetEditGroup	= UniqueID

		CashCodeRel
			one-to-one relation to CashCode
			Field Mapping uses symbolic key
				related.CashManagementGroup 			= CashManagementGroup	
				related.CashCode						= LocalCashCode	

		BankTransactionCodeRel
			one-to-one relation to BankTransactionCode
			Field Mapping uses symbolic key
				related.CashManagementGroup 			= CashManagementGroup	
				related.BankTransactionCode				= LocalBankTransactionCode										

		BankStatementLineDetailRel
			one-to-many relation to BankStatementLineDetail
			Field Mapping uses ByBankStatementLine
				related.CashManagementGroup 			= CashManagementGroup	
				related.CashManagementAccount			= CashManagementAccount
				related.BankStatement					= BankStatement
				related.BankStatementLine				= BankStatementLine		
		
		AnyBankStatementLineDetailRel
			one-to-many relation to BankStatementLineDetail
			Field Mapping uses ByBankStatementLine
				related.CashManagementGroup 			= CashManagementGroup	
				related.CashManagementAccount			= CashManagementAccount
				related.BankStatement					= BankStatement
			Instance Selection
				where (related.BankStatementLine.LineNumber = BankStatementLine.LineNumber) 
						
		NotReconciledBankStatementLineDetailRel
			one-to-many relation to BankStatementLineDetail
			Field Mapping uses ByBankStatementLine
				related.CashManagementGroup 			= CashManagementGroup	
				related.CashManagementAccount			= CashManagementAccount
				related.BankStatement					= BankStatement
				related.BankStatementLine				= BankStatementLine	
			Instance Selection
				where (!related.LineDetailStatus.Reconciled)
		
		StatementLineDetailPostToGeneralLedgerRel
			one-to-many relation to BankStatementLineDetail
			Field Mapping uses ByBankStatementLine
				related.CashManagementGroup 			= CashManagementGroup	
				related.CashManagementAccount			= CashManagementAccount
				related.BankStatement					= BankStatement
				related.BankStatementLine				= BankStatementLine	
			Instance Selection 
				where (related.StatementLinePostingOption.PostToGeneralLedger)
		
		StatementLineDetailPostToCashLedgerNoTransactionRel
			one-to-many relation to BankStatementLineDetail
			Field Mapping uses ByBankStatementLine
				related.CashManagementGroup				= CashManagementGroup                
				related.CashManagementAccount           = CashManagementAccount
				related.BankStatement                   = BankStatement
				related.BankStatementLine               = BankStatementLine          
			Instance Selection 
				where (related.StatementLinePostingOption.PostToCashLedger
				and    related.CreatedCashLedgerTransaction !entered)

		StatementParsingRuleGroupDetailRel
			one-to-many relation to StatementParsingRuleGroupDetail
			Field Mapping uses ByPriority
				related.CashManagementGroup					=	CashManagementGroup
				related.StatementParsingRuleGroup			=	LocalParsingRuleGroup

		CashForecastPeriodAmountCubeRel
			one-to-one relation to AnalyticCube
	        Field Mapping uses AnalyticCubeSet
	        	related.BusinessClass = "CashForecastPeriodAmount"
				
	Sets
		ByCategory
			Sort Order
				CashManagementGroup
				CashManagementAccount
				BankStatement
				CashTransactionCategory
				BankStatementLine
	
		ByCategoryDate
			Sort Order
				CashManagementGroup
				CashManagementAccount
				CashTransactionCategory
				StatementDate
				BankStatement
				BankStatementLine
				
		ByReconciledStatus
			Sort Order
				CashManagementGroup
				CashManagementAccount
				BankStatement
				LineStatus
				PendingReconcileDate
				BankStatementLine
	
		ByReconciledStatusByAccount
			Sort Order
				CashManagementGroup
				CashManagementAccount
				LineStatus
				StatementDate
				BankStatement
				BankStatementLine
	
		ByCategorizationGroup
			Sort Order
				CashManagementGroup
				CashManagementAccount
				BankStatement
				CategorizationGroup
				BankStatementLine
				
		ByBankStatementLine
			Sort Order
				CashManagementGroup
				CashManagementAccount
				BankStatement
				BankStatementLine.LineNumber
				BankStatementLine.SequenceNumber

		ByStatementDate
			Sort Order
				CashManagementGroup
				StatementDate
				CashManagementAccount
				BankStatement
				BankStatementLine
		
		ByStatementDateCategory
			Sort Order
				CashManagementGroup
				StatementDate
				CashManagementAccount
				CashTransactionCategory
				BankStatement
				BankStatementLine
						
		ByHasLineException
			Sort Order
				CashManagementGroup
				CashManagementAccount
				BankStatement
				HasLineException
				BankStatementLine
				FinancialInstitution
				ValueDate

		ByTransactionType
			Sort Order
				CashManagementGroup
				CashManagementAccount
				BankStatement
				TransactionType
				BankStatementLine
	
		ByDefaultSearchOrder
			Sort Order
				CashManagementGroup
				CashManagementAccount
				BankStatement
				BankStatementLine.LineNumber
				BankStatementLine.SequenceNumber
				StatementDate

				CashTransactionCategory
				TransactionType
				RelatedReference
				DebitCreditIndicator
				LineStatus

				LineAmount
				HasLineException
				StatementIntraday
								
	Conditions
		Uncategorized
			restricted
			when (CashTransactionCategory.UncategorizedCategory)
		
		Uncoded
			restricted
			when (DistributionsRequired
			and   !BankStatementLineDistribution set exists)

		DistributionsOutOfBalance
			restricted
			when (OutOfBalanceAmount != 0)

		DistributionsCanBeReleased
			restricted
			when (!CashManagementGroup.BankStatementDistribApprovalRequired
			and   !BankStatement.StatementStatus.Unreconciled
			and   !BudgetEditInProgress			
			and   UnreleasedLineDistributionRel exists
			and   !DistributionsOutOfBalance)

		HasReleasedOrPostedDistributions
			restricted
			when (ReleasedOrPostedLineDistributionRel exists)
		
		NoReleasedOrPostedDistributions
			restricted
			when (!ReleasedOrPostedLineDistributionRel exists)

		ProcessingRuleUsesAccount
			restricted
			when (LocalProcessingRule.AssignmentRule.Condition like "*AccountMatchesIdentifier*")
			
		ProcessingRuleUsesDescription
			restricted
			when (LocalProcessingRule.AssignmentRule.Condition like "*DescriptionMatchesIdentifier*")
	
		ProcessingRuleUsesRelatedReference
			restricted
			when (LocalProcessingRule.AssignmentRule.Condition like "*RelatedReferenceMatchesIdentifier*")
		
		ProcessingRuleUsesBankReference
			restricted
			when (LocalProcessingRule.AssignmentRule.Condition like "*BankReferenceMatchesIdentifier*")
		
		ProcessingRuleUsesTextReference
			restricted
			when (LocalProcessingRule.AssignmentRule.Condition like "*TextReferenceMatchesIdentifier*")
				
		LineCanBeSplit
			restricted
			when (LineStatus.Unreconciled
			and   !BankStatementLine.SequenceNumber entered
			and   !CreatedCashLedgerTransaction entered)
			
		LineCanBeManuallyCreated
			restricted
			when (BankStatement.ManuallyCreatedStatement
			and   !BankStatement.StatementStatus.Closed)

		LineCanBeManuallyCreatedForImportedStatement
			restricted
			when (CashManagementAccount.AllowLineCreationOnImportedStatements
			and	  !BankStatement.ManuallyCreatedStatement
			and   !BankStatement.StatementStatus.Closed)
			
		LineCanBeDeleted
			restricted
			when (!BankStatement.StatementStatus.Closed
			and	  LineStatus.Unreconciled
			and  (IsSplitLine
			or    ManuallyCreatedForImportedStatement
			or    BankStatement.BankStatementInterfaceHeader !entered))
		
		SplitLineCanBeRestored
			restricted
			when (!BankStatement.StatementStatus.Closed
			and   IsOriginalLine)
		
		IsOriginalLine
			restricted
			when (BankStatementLine.SequenceNumber = 1)
			
		IsSplitLine
			restricted
			when (BankStatementLine.SequenceNumber entered
			and   BankStatementLine.SequenceNumber != 1)
		
		SplitLineDoesNotBalance
			restricted
			when (IsOriginalLine
			and	  OriginalLineAmount != TotalOfSplitLines)
		
		OriginalLineDoesNotBalance
			restricted
			when (IsSplitLine
			and	  OriginalBankStatementLineSequenceRel.SplitLineDoesNotBalance)
		
		SplitLineHasNoAmount
			restricted
			when (BankStatementLine.SequenceNumber entered
			and   !LineAmount entered)
			
		RestoreOriginalLineAfterSplit
			restricted
			when (IsOriginalLine
			and	  !SplitBankStatementLineSequenceRel exist)
		
		LineCurrencyNotCorporateBaseCurrency
			restricted
			when (LineCurrency != CashManagementGroup.Currency)
			
		LineCurrencyNotCompanyCurrency
			restricted
			when (LineCurrency != CashManagementAccount.LegalEntity.Currency)
		
		LineCurrencyNotLocationCurrency
			restricted
			when (LineCurrency != CashManagementAccount.CashManagementLocation.Currency)
		
		DisplayClassificationRulesLink
			restricted
			when (CashManagementAccount.StatementLineClassification.UseProcessingRules
			and	  CashTransactionProcessingRule entered)

		TransactionSearchCondition
			restricted
			when (((!StatementDateRange entered
			and		!ValueDateRange entered)
			or	   (!ValueDateRange entered
			and		StatementDateRange entered
			and		StatementDate within StatementDateRange)
			or	   (!StatementDateRange entered
			and		ValueDateRange entered
			and	 	ValueDate within ValueDateRange)
			or	   (StatementDateRange entered
			and	 	StatementDate within StatementDateRange
			and		ValueDateRange entered
			and		ValueDate within ValueDateRange))
			and	   (!SearchAmountRange entered
			or		SearchAmountRange entered
			and		LineAmount within SearchAmountRange))

		DistributionsRequired
			restricted
			when (StatementLinePostingOption.PostToGeneralLedger
			and   !StatementIntraday)
		
		CanViewDistributions
			restricted
			when (DistributionsRequired
			or    BankStatementLineDistribution set exists)

		CanReclassifyStatementLine
			restricted
			when (LineStatus.Unreconciled
			and   CashManagementAccount.StatementLineClassification.UseProcessingRules
			and   !CurrencyGainLossLine)
		
		CreateCashForecastObjectsForTransaction
			restricted
			when (!StatementIntraday
			and   ActualCashForecastAccountRel exists
			and   !ActualCashForecastPeriodAmountRel exists)					
							
		StatementLinesLoadedIntoReconciliation
			restricted
			when (BankStatementReconciliation set exists
			and !HideForAuditorRel exists)

		RevalueAmountEntered
			restricted
			when (RevalueAmount entered)

		CanCreateCashledgerTransaction
			restricted
			when (!StatementLinePostingOption.PostToGeneralLedger
			and   LineStatus.Unreconciled
			and   !StatementIntraday		
			and   CreatedCashLedgerTransaction !entered)

		HasCashLedgerTransactionCreatedFromLine
			restricted
			when (CashLedgerTransaction set exists)

		HasUnreleasedCashLedgerTransactions
			restricted
			when ((StatementLinePostingOption.PostToCashLedger
			and    !HasCashLedgerTransactionCreatedFromLine)
			or    UnreleasedCashLedgerTransactionRel exists
			or    StatementLineDetailPostToCashLedgerNoTransactionRel exists)

		
		DisplayGainLossLine
			restricted
			when (!CurrencyGainLossLine
			or   (CurrencyGainLossLine
			and	  CashManagementGroup.DisplayStatementCurrencyGainLossLine))			

		BudgetEditingInformationExists
			restricted
			when (BudgetTemplateGroupTotalRel exists)

		MultiRedAlertErrorsExist
			when (HeaderBudgetEditErrorRel exists
			or    DistributionBudgetEditErrorRel exists
			or    RestoreOriginalLineAfterSplit)
							
		BudgetEditErrorExists
			when (HeaderBudgetEditErrorRel exists
			or    DistributionBudgetEditErrorRel exists)
			
		HeaderBudgetEditErrorExists
			restricted
			when (HeaderBudgetEditErrorRel exists)
			
		DistributionBudgetEditErrorExists
			restricted
			when (DistributionBudgetEditErrorRel exists)
		
		BudgetEditInProgress
			restricted
			when (BudgetEditProcessing.InProcess)

        BudgetEditFailure
        	restricted
    		when (BudgetEditProcessing.Failure)

		GLCommitRelExists
			restricted
			when (GLCommitRel exists)

		OpenGLCommitRelExists
			restricted
			when (OpenGLCommitDrillRel exists)
			
		IsValidForActorContext
			restricted
			when ((actor.context.FinanceEnterpriseGroup != ""
			and   CashManagementGroup = actor.context.FinanceEnterpriseGroup)
			or   (actor.context.FinanceEnterpriseGroup = ""))

		AutoNumberingAllowed
			restricted
			when ((CashManagementGroup.AutoTranNumberForTransactionForm
			and    CashManagementAccount.CreditTransactionCode.BankTransactionType.BankService)
			and   (CashManagementGroup.AutoTranNumberByCompany
			and    CashManagementAccount.LegalEntity.AutoTransactionNumbering)
			or    (CashManagementGroup.AutoTranNumberByCashCode
			and    CashCodeRel.AutoTransactionNumbering)
			or    (CashManagementGroup.AutoTranNumberByBankTransactionCode
			and    BankTransactionCodeRel.AutoTransactionNumbering)
			or    (CashManagementGroup.AutoTranNumberByCashCodeBankTranCode
			and    BankTransactionCodeRel.AutoTransactionNumbering
			and    CashCodeRel.AutoTransactionNumbering))
		
		HasStatementLineDetails
			restricted
			when (BankStatementLineDetailRel exists)
		
		ShowLineDetails
			restricted
			when (HasStatementLineDetails
			or    CashTransactionCategory.RequireBankStatementLineDetail)
			
		LineMissingDetails
			restricted
			when (CashTransactionCategory.RequireBankStatementLineDetail
			and  !HasStatementLineDetails)
		
		LineAmountDoesNotEqualLineDetails
			restricted
			when (HasStatementLineDetails
			and   LineAmount != TotalOfBankStatementLineDetails)

		AccountMatchesIdentifier 
			when (CashTransactionIdentifierByAccountRel exists)
							
		DescriptionMatchesIdentifier 
			when (CashTransactionIdentifierByDescriptionRel exists)
		
		RelatedReferenceMatchesIdentifier 
			when (CashTransactionIdentifierByRelatedReferenceRel exists)
		
		BankReferenceMatchesIdentifier 
			when (CashTransactionIdentifierByBankReferenceRel exists)
		
		TextReferenceMatchesIdentifier 
			when (CashTransactionIdentifierByTextReferenceRel exists)


		ParsedDataUsed
			restricted
			when (CashManagementAccount.ParsingRuleGroupArray entered)	
		ParsedData1Used
			restricted
			when (CashManagementAccount.ParsingRuleGroupArray.ParsingMapping[1].ParsingRuleGroup entered)
		ParsedData2Used
			restricted
			when (CashManagementAccount.ParsingRuleGroupArray.ParsingMapping[2].ParsingRuleGroup entered)
		ParsedData3Used
			restricted
			when (CashManagementAccount.ParsingRuleGroupArray.ParsingMapping[3].ParsingRuleGroup entered)
		ParsedData4Used
			restricted
			when (CashManagementAccount.ParsingRuleGroupArray.ParsingMapping[4].ParsingRuleGroup entered)
		ParsedData5Used
			restricted
			when (CashManagementAccount.ParsingRuleGroupArray.ParsingMapping[5].ParsingRuleGroup entered)
		ParsedData6Used
			restricted
			when (CashManagementAccount.ParsingRuleGroupArray.ParsingMapping[6].ParsingRuleGroup entered)
		ParsedData7Used
			restricted
			when (CashManagementAccount.ParsingRuleGroupArray.ParsingMapping[7].ParsingRuleGroup entered)
		ParsedData8Used
			restricted
			when (CashManagementAccount.ParsingRuleGroupArray.ParsingMapping[8].ParsingRuleGroup entered)
		ParsedData9Used
			restricted
			when (CashManagementAccount.ParsingRuleGroupArray.ParsingMapping[9].ParsingRuleGroup entered)
		ParsedData10Used
			restricted
			when (CashManagementAccount.ParsingRuleGroupArray.ParsingMapping[10].ParsingRuleGroup entered)
		
		HasReconciliationDetails
			restricted
			when (first BankStatementReconciliation set.ReconMatchNumber entered)
			
	Rule Blocks
		CalculateCalendarBankDays
			LocalRollingWeeks = 1
			LocalRollingMonths = 1

			LocalWeek = first RollingForecastCalendarBankDayRel.SystemCalendarDate week
			LocalMonth = first RollingForecastCalendarBankDayRel.SystemCalendarDate month

			for each RollingForecastCalendarBankDayRel
				LocalRollingDays +=1

				if (LocalWeek != each.SystemCalendarDate week)
					LocalRollingWeeks +=1
					LocalWeek = each.SystemCalendarDate week
				
				if (LocalMonth != each.SystemCalendarDate month)
					LocalRollingMonths +=1
					LocalMonth = each.SystemCalendarDate month

		UpdateAmountsForAllForecasts
			for each CashForecastByDateRangeRel
				LocalCashForecast = each.CashForecast
				if (!ActualCashForecastCategoryRel exists)
					invoke Update ActualCashForecastCategoryRel
						invoked.ForecastCreationParameter.ForecastCalculation = 1 
						invoked.CreatedFromStatementLine = true

				if (!ActualCashForecastPeriodRel exists)
					invoke Create ActualCashForecastPeriodRel
						invoked.CreatedByStatement = BankStatement

				if (!CashForecastPeriodAmountRel exists)
					invoke CreateOnly CashForecastPeriodAmountRel
						invoked.CreatedByStatement = BankStatement

			invoke ScheduledRefresh CashForecastPeriodAmountCubeRel in background


		ParsingRuleProcessing	
			for each StatementParsingRuleGroupDetailRel
				if (BankStatementLine within each.StatementParsingRule.ParsingRule)
					if (each.StatementParsingRule.LiteralValue entered)
						TemplateLiteralValue    = each.StatementParsingRule.LiteralValue
						LocalParsedDescription 	= TemplateLiteralValue text	
					else
					if (each.StatementParsingRule.RemoveCharacterString)
						LocalRemoveString = each.StatementParsingRule.RemoveString
						if (Description like LikeRemoveString)
							LocalParsedDescription = Description
							LocalParsedDescription -= each.StatementParsingRule.DerivedRemoveString
					else
						if (each.StatementParsingRule.RemoveCharactersBefore)
							LocalRemoveBefore = each.StatementParsingRule.RemoveBefore
							if (Description like LikeRemoveBefore)
	     						if (!LocalParsedDescription entered)
									LocalParsedDescription = Description
								LocalParsedDescription -= each.StatementParsingRule.DerivedRemoveBefore
						if (each.StatementParsingRule.RemoveCharactersAfter)
							LocalRemoveAfter = each.StatementParsingRule.RemoveAfter
							if (Description like LikeRemoveAfter)
								if (!LocalParsedDescription entered)
									LocalParsedDescription = Description
								LocalParsedDescription -= each.StatementParsingRule.DerivedRemoveAfter
						if (each.StatementParsingRule.CharacterStringRange.CharacterFromValue entered)
							if (!LocalParsedDescription entered)
								LocalParsedDescription = Description
							LocalCharacterFromValue	= each.StatementParsingRule.CharacterStringRange.CharacterFromValue 
							LocalCharacterToValue	= each.StatementParsingRule.CharacterStringRange.CharacterToValue
							LocalParsedDescription	= LocalParsedDescription[LocalCharacterFromValue:LocalCharacterToValue]
					end for each
					

		SetParsedDataFields 
			if (CashManagementAccount.ParsingRuleGroupArray.ParsingMapping[1].ParsingRuleGroup entered)
				initialize LocalParsedDescription
				LocalParsingRuleGroup = CashManagementAccount.ParsingRuleGroupArray.ParsingMapping[1].ParsingRuleGroup	
				include ParsingRuleProcessing
				ParsedData1 = LocalParsedDescription
			if (CashManagementAccount.ParsingRuleGroupArray.ParsingMapping[2].ParsingRuleGroup entered)
				initialize LocalParsedDescription
				LocalParsingRuleGroup = CashManagementAccount.ParsingRuleGroupArray.ParsingMapping[2].ParsingRuleGroup	
				include ParsingRuleProcessing
				ParsedData2 = LocalParsedDescription
			if (CashManagementAccount.ParsingRuleGroupArray.ParsingMapping[3].ParsingRuleGroup entered)
				initialize LocalParsedDescription
				LocalParsingRuleGroup = CashManagementAccount.ParsingRuleGroupArray.ParsingMapping[3].ParsingRuleGroup	
				include ParsingRuleProcessing
				ParsedData3 = LocalParsedDescription
			if (CashManagementAccount.ParsingRuleGroupArray.ParsingMapping[4].ParsingRuleGroup entered)
				initialize LocalParsedDescription
				LocalParsingRuleGroup = CashManagementAccount.ParsingRuleGroupArray.ParsingMapping[4].ParsingRuleGroup	
				include ParsingRuleProcessing
				ParsedData4 = LocalParsedDescription
			if (CashManagementAccount.ParsingRuleGroupArray.ParsingMapping[5].ParsingRuleGroup entered)
				initialize LocalParsedDescription
				LocalParsingRuleGroup = CashManagementAccount.ParsingRuleGroupArray.ParsingMapping[5].ParsingRuleGroup	
				include ParsingRuleProcessing
				ParsedData5 = LocalParsedDescription
			if (CashManagementAccount.ParsingRuleGroupArray.ParsingMapping[6].ParsingRuleGroup entered)
				initialize LocalParsedDescription
				LocalParsingRuleGroup = CashManagementAccount.ParsingRuleGroupArray.ParsingMapping[6].ParsingRuleGroup	
				include ParsingRuleProcessing
				ParsedData6 = LocalParsedDescription
			if (CashManagementAccount.ParsingRuleGroupArray.ParsingMapping[7].ParsingRuleGroup entered)
				initialize LocalParsedDescription
				LocalParsingRuleGroup = CashManagementAccount.ParsingRuleGroupArray.ParsingMapping[7].ParsingRuleGroup	
				include ParsingRuleProcessing
				ParsedData7 = LocalParsedDescription
			if (CashManagementAccount.ParsingRuleGroupArray.ParsingMapping[8].ParsingRuleGroup entered)
				initialize LocalParsedDescription
				LocalParsingRuleGroup = CashManagementAccount.ParsingRuleGroupArray.ParsingMapping[8].ParsingRuleGroup	
				include ParsingRuleProcessing
				ParsedData8 = LocalParsedDescription
			if (CashManagementAccount.ParsingRuleGroupArray.ParsingMapping[9].ParsingRuleGroup entered)
				initialize LocalParsedDescription
				LocalParsingRuleGroup = CashManagementAccount.ParsingRuleGroupArray.ParsingMapping[9].ParsingRuleGroup	
				include ParsingRuleProcessing
				ParsedData9 = LocalParsedDescription
			if (CashManagementAccount.ParsingRuleGroupArray.ParsingMapping[10].ParsingRuleGroup entered)
				initialize LocalParsedDescription
				LocalParsingRuleGroup = CashManagementAccount.ParsingRuleGroupArray.ParsingMapping[10].ParsingRuleGroup	
				include ParsingRuleProcessing
				ParsedData10 = LocalParsedDescription

		TransactionProcessingRules
			if (CashManagementAccount.StatementLineClassification.DefaultFromAccount)
				CashTransactionCategory	= CashManagementAccount.DefaultCategory
				LocalAccountInformation = CashManagementAccount.DefaultCategory.CategoryAccount
				LocalCashAllocationCode = CashManagementAccount.DefaultCategory.CashAllocationCode
				
				if (LocalAccountInformation entered
				or	LocalCashAllocationCode entered)

					invoke DistributionCreation
			else
				initialize CashTransactionCategory
				
				if 	(NoReleasedOrPostedDistributions)			
					invoke Delete BankStatementLineDistribution set

				if (CreatedCashLedgerTransaction entered
				and CreatedCashLedgerTransaction.Status.Unreleased)
					invoke Delete CreatedCashLedgerTransaction			

				for each CashTransactionProcessingRuleGroupDetailRel
					LocalIdentifierType = each.CashTransactionProcessingRule.CashTransactionIdentifierType
					
					if (BankStatementLine within each.CashTransactionProcessingRule.AssignmentRule)
						CashTransactionProcessingRuleGroup = each.CashTransactionProcessingRuleGroup
						CashTransactionProcessingRule = each.CashTransactionProcessingRule
						
						if (each.CashTransactionProcessingRule.CodingOption.None)
							CashTransactionCategory = each.CashTransactionProcessingRule.CashTransactionCategory
							StatementLinePostingOption = each.CashTransactionProcessingRule.CashTransactionCategory.StatementLinePostingOption
							initialize LocalAccountInformation
						else	
						if (each.CashTransactionProcessingRule.CodingOption.Category)
							CashTransactionCategory = each.CashTransactionProcessingRule.CashTransactionCategory
							StatementLinePostingOption = each.CashTransactionProcessingRule.CashTransactionCategory.StatementLinePostingOption
							LocalAccountInformation = each.CashTransactionProcessingRule.CashTransactionCategory.CategoryAccount
							LocalCashAllocationCode = each.CashTransactionProcessingRule.CashTransactionCategory.CashAllocationCode
						else
						if (each.CashTransactionProcessingRule.CodingOption.ProcessingRule)
							CashTransactionCategory = each.CashTransactionProcessingRule.CashTransactionCategory
							StatementLinePostingOption = each.CashTransactionProcessingRule.CashTransactionCategory.StatementLinePostingOption
							LocalAccountInformation = each.CashTransactionProcessingRule.ProcessingRuleAccount
							LocalCashAllocationCode = each.CashTransactionProcessingRule.CashAllocationCode
						else		
						if (each.CashTransactionProcessingRule.CodingOption.Identifier)
							LocalProcessingRule = each.CashTransactionProcessingRule
							
							if (ProcessingRuleUsesAccount)
								if (first CashTransactionIdentifierByAccountRel.CashTransactionCategory entered)
									CashTransactionCategory = first CashTransactionIdentifierByAccountRel.CashTransactionCategory
									StatementLinePostingOption = first CashTransactionIdentifierByAccountRel.CashTransactionCategory.StatementLinePostingOption
								else
									CashTransactionCategory = each.CashTransactionProcessingRule.CashTransactionCategory
									StatementLinePostingOption = each.CashTransactionProcessingRule.CashTransactionCategory.StatementLinePostingOption
									
								LocalAccountInformation = first CashTransactionIdentifierByAccountRel.IdentifierAccount	
								LocalCashAllocationCode = first CashTransactionIdentifierByAccountRel.CashAllocationCode
								CashTransactionIdentifierType = first CashTransactionIdentifierByAccountRel.CashTransactionIdentifierType
								CashTransactionIdentifier = first CashTransactionIdentifierByAccountRel.CashTransactionIdentifier
									
							if (ProcessingRuleUsesDescription)
								if (first CashTransactionIdentifierByDescriptionRel.CashTransactionCategory entered)
									CashTransactionCategory = first CashTransactionIdentifierByDescriptionRel.CashTransactionCategory
									StatementLinePostingOption = first CashTransactionIdentifierByDescriptionRel.CashTransactionCategory.StatementLinePostingOption
								else
									CashTransactionCategory = each.CashTransactionProcessingRule.CashTransactionCategory
									StatementLinePostingOption = each.CashTransactionProcessingRule.CashTransactionCategory.StatementLinePostingOption
									
								LocalAccountInformation = first CashTransactionIdentifierByDescriptionRel.IdentifierAccount	
								LocalCashAllocationCode = first CashTransactionIdentifierByDescriptionRel.CashAllocationCode
								CashTransactionIdentifierType = first CashTransactionIdentifierByDescriptionRel.CashTransactionIdentifierType
								CashTransactionIdentifier = first CashTransactionIdentifierByDescriptionRel.CashTransactionIdentifier
								
							if (ProcessingRuleUsesRelatedReference)
								if (first CashTransactionIdentifierByRelatedReferenceRel.CashTransactionCategory entered)
									CashTransactionCategory = first CashTransactionIdentifierByRelatedReferenceRel.CashTransactionCategory
									StatementLinePostingOption = first CashTransactionIdentifierByRelatedReferenceRel.CashTransactionCategory.StatementLinePostingOption
								else
									CashTransactionCategory = each.CashTransactionProcessingRule.CashTransactionCategory
									StatementLinePostingOption = each.CashTransactionProcessingRule.CashTransactionCategory.StatementLinePostingOption
									
								LocalAccountInformation = first CashTransactionIdentifierByRelatedReferenceRel.IdentifierAccount
								LocalCashAllocationCode = first CashTransactionIdentifierByRelatedReferenceRel.CashAllocationCode
								CashTransactionIdentifierType = first CashTransactionIdentifierByRelatedReferenceRel.CashTransactionIdentifierType
								CashTransactionIdentifier = first CashTransactionIdentifierByRelatedReferenceRel.CashTransactionIdentifier
							
							if (ProcessingRuleUsesBankReference)
								if (first CashTransactionIdentifierByBankReferenceRel.CashTransactionCategory entered)
									CashTransactionCategory = first CashTransactionIdentifierByBankReferenceRel.CashTransactionCategory
									StatementLinePostingOption = first CashTransactionIdentifierByBankReferenceRel.CashTransactionCategory.StatementLinePostingOption
								else
									CashTransactionCategory = each.CashTransactionProcessingRule.CashTransactionCategory
									StatementLinePostingOption = each.CashTransactionProcessingRule.CashTransactionCategory.StatementLinePostingOption
								
								LocalAccountInformation = first CashTransactionIdentifierByBankReferenceRel.IdentifierAccount
								LocalCashAllocationCode = first CashTransactionIdentifierByBankReferenceRel.CashAllocationCode
								CashTransactionIdentifierType = first CashTransactionIdentifierByBankReferenceRel.CashTransactionIdentifierType
								CashTransactionIdentifier = first CashTransactionIdentifierByBankReferenceRel.CashTransactionIdentifier
						
							if (ProcessingRuleUsesTextReference)
								if (first CashTransactionIdentifierByTextReferenceRel.CashTransactionCategory entered)
									CashTransactionCategory = first CashTransactionIdentifierByTextReferenceRel.CashTransactionCategory
									StatementLinePostingOption = first CashTransactionIdentifierByTextReferenceRel.CashTransactionCategory.StatementLinePostingOption
								else
									CashTransactionCategory = each.CashTransactionProcessingRule.CashTransactionCategory
									StatementLinePostingOption = each.CashTransactionProcessingRule.CashTransactionCategory.StatementLinePostingOption
								
								LocalAccountInformation = first CashTransactionIdentifierByTextReferenceRel.IdentifierAccount
								LocalCashAllocationCode = first CashTransactionIdentifierByTextReferenceRel.CashAllocationCode
								CashTransactionIdentifierType = first CashTransactionIdentifierByTextReferenceRel.CashTransactionIdentifierType
								CashTransactionIdentifier = first CashTransactionIdentifierByTextReferenceRel.CashTransactionIdentifier
								
						if 	(NoReleasedOrPostedDistributions
						and  CreatedCashLedgerTransaction !entered)			

							invoke DistributionCreation				
							
						end for each
						
					else
					if (!CashTransactionCategory entered)
						CashTransactionCategory = first UncategorizedCategoryRel.CashTransactionCategory





			StatementLinePostingOption	= CashTransactionCategory.StatementLinePostingOption 
	
			if (CashManagementAccount.NoReconciliationOptionDefined
			and CashTransactionCategory.AlwaysReconcile)
				LineStatus = 1 
				if (HasStatementLineDetails)
					invoke UpdateLineDetailStatus BankStatementLineDetailRel
						invoked.PrmLineStatus = 1 
				
			if (ReconciliationIdentifier entered)
				invoke UpdateCashTransactionCategory ReconciliationIdentifier.BankStatementReconciliation
					invoked.CashTransactionCategory		= CashTransactionCategory

			invoke UpdateLineExceptionStatus
			

		DistributionCreation
			if (!StatementIntraday)
				if (StatementLinePostingOption.PostToCashLedger)
					if (CashTransactionCategory.PostingCashCode entered
					and CashTransactionCategory.PostingCashCode.BankAccountNumber != CashManagementAccount)
						confirmation required
							"OverrideBankAccountCashCode<CashTransactionCategory.PostingCashCode>OnCategory<CashTransactionCategory>IsAssociatedWithAccount<CashTransactionCategory.PostingCashCode.BankAccountNumber>;CashLedgerTransactionWillBeCreatedWithCashCode<CashManagementAccount.CashCode>FromAccount<CashManagementAccount>"
					if (CashTransactionCategory.PostingCashCode entered
					and CashTransactionCategory.PostingCashCode.BankAccountNumber = CashManagementAccount)
						LocalCashCode							= CashTransactionCategory.PostingCashCode
					else
						LocalCashCode							= CashManagementAccount.CashCode
					if (LineAmount >= 0)
						LocalBankTransactionCode				= CashManagementAccount.CreditTransactionCode
					else
						LocalBankTransactionCode				= CashManagementAccount.DebitTransactionCode	
					if (!AutoNumberingAllowed)
						invoke UpdateCashLedgerTransactionNumbering CashManagementAccount	

						
					invoke Create CashLedgerTransaction
						assign result to LocalCashLedgerTransaction
						fill in user fields from CashTransactionCategory	
						fill in user fields from BankStatement				
						fill in user fields from this instance				
						invoked.CashManagementGroup				= CashManagementGroup
						if (LineAmount >= 0)
							invoked.IssuedBankAmountUnsigned	= LineAmount						
						else
							invoked.IssuedBankAmountUnsigned	= (LineAmount * -1)
						invoked.BankTransactionCode				= LocalBankTransactionCode
						invoked.CashCode						= LocalCashCode	
						invoked.CashLedgerSourceRecord			= "CBT"
						if (AutoNumberingAllowed)
							invoked.TransactionNumber			= blank
							invoked.AutoNumberingAction			= AutoNumberingAction.OverrideNumberWithAnAutoGeneratedNumber
						else
							invoked.TransactionNumber			= CashManagementAccount.CashLedgerTransactionNumbering
						if (CashTransactionCategory.PostingCompany entered)
							invoked.Company						= CashTransactionCategory.PostingCompany
						else
							invoked.Company						= CashManagementAccount.LegalEntity
						invoked.IssueDate						= TransactionDate	
						invoked.GeneralLedgerPostDate			= CashLedgerPostingDate
						invoked.Description						= AutoCashTransactionCreateDescription
						invoked.CreatedFromBankStatement		= BankStatement
						invoked.CreatedFromBankStatementLine	= BankStatementLine	
						if (CashTransactionCategory.OverrideEventCode entered)	
            				invoked.GeneralLedgerEvent 			= CashTransactionCategory.OverrideEventCode

					BankTransactionCode				= LocalCashLedgerTransaction.BankTransactionCode
					CreatedCashLedgerSourceRecord	= "CBT"
					CreatedCashLedgerTransaction	= LocalCashLedgerTransaction.CashLedgerTransaction
					
					if (LocalAccountInformation entered)
						increment LocalCashLedgerTransaction.CashLedgerTransaction.LastDistributionSequence
						invoke Create CashLedgerGLDistribution
							fill in user fields from CashTransactionCategory	
							fill in user fields from BankStatement				
							fill in user fields from this instance				
							fill in fields from LocalCashLedgerTransaction.CashLedgerTransaction
							invoked.CashLedgerSourceRecord							= "CBT"
							invoked.CashLedgerGLDistribution.BankTransactionCode	= LocalCashLedgerTransaction.BankTransactionCode
							invoked.CashLedgerGLDistribution.TransactionIDNumber	= LocalCashLedgerTransaction.CashLedgerTransaction
							invoked.CashLedgerGLDistribution.SequenceNumber			= LocalCashLedgerTransaction.CashLedgerTransaction.LastDistributionSequence
							invoked.CompanyAccountingEntity							= CashManagementAccount.LegalEntity.AccountingEntity
							invoked.LocalControlDocumentNumber						= LocalCashLedgerTransaction.CashLedgerTransaction.TransactionNumber	
							invoked.LocalDocumentNumber								= LocalCashLedgerTransaction.CashLedgerTransaction.TransactionNumber	
							invoked.LocalExchangeDate								= TransactionDate	
							invoked.LocalPostingDate								= CashLedgerPostingDate
							invoked.LocalGeneralLedgerEvent							= "CL"
							invoked.LocalDescription								= AutoCashTransactionCreateDescription
							invoked.LocalKeepRateOnly								= false
							invoked.GLFinanceCodeBlock								= LocalAccountInformation
							invoked.GLTransactionAmount								= (LineAmount *-1)
						

					else
					if (LocalCashAllocationCode entered)
						for each LocalCashAllocationCode.CashAllocationCodeDetail set
							increment LocalCashLedgerTransaction.CashLedgerTransaction.LastDistributionSequence
							invoke Create CashLedgerGLDistribution
								assign result to LastCashLedgerGLDistribution
								fill in user fields from CashTransactionCategory	
								fill in user fields from BankStatement				
								fill in user fields from this instance				
								fill in fields from LocalCashLedgerTransaction.CashLedgerTransaction
								invoked.CashLedgerSourceRecord							= "CBT"
								invoked.CashLedgerGLDistribution.BankTransactionCode	= LocalCashLedgerTransaction.BankTransactionCode
								invoked.CashLedgerGLDistribution.TransactionIDNumber	= LocalCashLedgerTransaction.CashLedgerTransaction
								invoked.CashLedgerGLDistribution.SequenceNumber			= LocalCashLedgerTransaction.CashLedgerTransaction.LastDistributionSequence
								invoked.CompanyAccountingEntity		= CashManagementAccount.LegalEntity.AccountingEntity
								invoked.LocalControlDocumentNumber	= LocalCashLedgerTransaction.CashLedgerTransaction.TransactionNumber	
								invoked.LocalDocumentNumber			= LocalCashLedgerTransaction.CashLedgerTransaction.TransactionNumber	
								invoked.LocalExchangeDate			= TransactionDate	
								invoked.LocalPostingDate			= CashLedgerPostingDate
								invoked.LocalGeneralLedgerEvent		= "CL"		
								invoked.LocalDescription			= AutoCashTransactionCreateDescription
								invoked.LocalKeepRateOnly			= false
								invoked.GLFinanceCodeBlock			= each.AllocationAccount
								if (LocalCashAllocationCode.AllocationType.AccountOnly)
									invoked.BypassUnitAndAmountEdit = true
								if (LocalCashAllocationCode.AllocationType.Amount)
									invoked.GLTransactionAmount		= each.AllocationAmount
								if (LocalCashAllocationCode.AllocationType.Percent)
									LocalRoundedLineAmount = ((LineAmount *-1) * each.AllocationPercent)
									round LocalRoundedLineAmount to nearest DerivedLocalRoundTo
									invoked.GLTransactionAmount 	= LocalRoundedLineAmount		
				
							if (LocalCashAllocationCode.AllocationType.Percent)
								DistributionRunningTotal += LocalRoundedLineAmount

						if  (LocalCashAllocationCode.AllocationType.Percent
						and (LineAmount - DistributionRunningTotal) != 0)
							invoke Update LastCashLedgerGLDistribution.CashLedgerGLDistribution
								fill in user fields from CashTransactionCategory	
								fill in user fields from BankStatement				
								fill in user fields from this instance				
								invoked.GLTransactionAmount -= (LineAmount + DistributionRunningTotal)

				else
				if (StatementLinePostingOption.PostToGeneralLedger) 
					if (LocalAccountInformation entered)
						invoke CreateFromReclassification BankStatementLineDistribution
							assign result to LastBankStatementLineDistribution
							fill in user fields from CashTransactionCategory	
							fill in user fields from BankStatement				
							fill in user fields from this instance				
							invoked.CashManagementGroup	 	= CashManagementGroup
							invoked.CashManagementAccount	= CashManagementAccount
							invoked.BankStatement			= BankStatement
							invoked.BankStatementLine		= BankStatementLine
							invoked.PostingDate				= CashLedgerPostingDate
							invoked.GLFinanceCodeBlock		= LocalAccountInformation
							invoked.GLTransactionAmount		= (LineAmount *-1)
					else
					if (LocalCashAllocationCode entered)
						for each LocalCashAllocationCode.CashAllocationCodeDetail set
							invoke CreateFromReclassification BankStatementLineDistribution
								assign result to LastBankStatementLineDistribution
								fill in user fields from CashTransactionCategory	
								fill in user fields from BankStatement				
								fill in user fields from this instance				
								invoked.CashManagementGroup	 	= CashManagementGroup
								invoked.CashManagementAccount	= CashManagementAccount
								invoked.BankStatement			= BankStatement
								invoked.BankStatementLine		= BankStatementLine
								invoked.PostingDate				= CashLedgerPostingDate
								invoked.GLFinanceCodeBlock		= each.AllocationAccount
								if (LocalCashAllocationCode.AllocationType.Amount)
									invoked.GLTransactionAmount		= each.AllocationAmount
								if (LocalCashAllocationCode.AllocationType.Percent)
									LocalRoundedLineAmount = ((LineAmount *-1) * each.AllocationPercent)
									round LocalRoundedLineAmount to nearest DerivedLocalRoundTo
									invoked.GLTransactionAmount		= LocalRoundedLineAmount
								if (LocalCashAllocationCode.AllocationType.AccountOnly)
									invoked.BypassUnitAndAmountEdit = true
								invoked.Comment					= each.Comment
							
							if (LocalCashAllocationCode.AllocationType.Percent)
								DistributionRunningTotal += LocalRoundedLineAmount
								
						if  (LocalCashAllocationCode.AllocationType.Percent
						and (LineAmount - DistributionRunningTotal) != 0)
							invoke Update LastBankStatementLineDistribution.BankStatementLineDistribution
								fill in user fields from CashTransactionCategory	
								fill in user fields from BankStatement				
								fill in user fields from this instance				
								invoked.GLTransactionAmount += ((LineAmount *-1) - DistributionRunningTotal)

		DistributionBalancingAndOffset
			if (CompanyCurrencyAmount	!= BaseTotalDistributionAmount.FunctionalTotal)
				invoke ApplyRoundingAdjustment first UnreleasedLineDistributionRel
					invoked.FunctionalAmountAdjustment	= (CompanyCurrencyAmount - BaseTotalDistributionAmount.FunctionalTotal)
			if (!OffsetDistributionCreated)
				invoke Create BankStatementLineDistribution
					fill in fields from this instance
					invoked.PostingDate							= CashLedgerPostingDate
					invoked.GLFinanceCodeBlock					= CashManagementAccount.GLAccount
					invoked.GLTransactionAmount					= LineAmount 
					invoked.GLBaseAmount						= BaseTotalDistributionAmount 
					invoked.CashAccountDistribution				= true
					invoked.BypassBudgetAndCommitmentProcessing = true
					invoked.BypassUnpostBankStatement			= true		
				OffsetDistributionCreated	= true


		ReleaseExitRules

			if (GeneralLedgerSystemCodeRel.EncumbranceOption.TrackAndEdit
			or 	GeneralLedgerSystemCodeRel.EncumbranceOption.Track)
				invoke UpdateToReleased GLCommit
					invoked.PrmFinanceEnterpriseGroup	= CashManagementGroup  
					invoked.PrmUniqueID					= UniqueID
					invoked.PrmAccountingEntity			= CashManagementAccount.LegalEntity.AccountingEntity


		PerformBudgetEditsForApprovalOrRelease






			if ((GeneralLedgerSystemCodeRel.EncumbranceOption.TrackAndEdit
			or   GeneralLedgerSystemCodeRel.EncumbranceOption.Track)
        	and  GLCommitRelExists)
 				BudgetEditProcessing = BudgetEditProcessing.InProcess                   
				invoke Delete HeaderBudgetEditErrorRel
				invoke Delete DistributionBudgetEditErrorRel 
				invoke EditTotalsRoute BudgetTemplateGroupTotal 	
					invoked.PrmFinanceEnterpriseGroup    																 = CashManagementGroup
					invoked.PrmBudgetEditGroup           																 = UniqueID
					invoked.PrmBudgetEditCallBack.BudgetEditCallBackCBBankStatementLine.CashManagementAccount    		 = CashManagementAccount
					invoked.PrmBudgetEditCallBack.BudgetEditCallBackCBBankStatementLine.BankStatement					 = BankStatement
					invoked.PrmBudgetEditCallBack.BudgetEditCallBackCBBankStatementLine.BankStatementLine.LineNumber	 = BankStatementLine.LineNumber
					invoked.PrmBudgetEditCallBack.BudgetEditCallBackCBBankStatementLine.BankStatementLine.SequenceNumber = BankStatementLine.SequenceNumber
					invoked.PrmBusinessClassName  					              										= "BankStatementLine"	
					if (LocalActionUnreleaseToRelease)
						invoked.PrmActionCode											= "R"  
						invoked.PrmEditContext                      					= "Release"	
						if  (GeneralLedgerSystemCodeRel.EncumbranceOption.TrackAndEdit)
							invoked.PrmMode												= BudgetEditMode.Hard
						else	
							invoked.PrmMode												= BudgetEditMode.UpdateOnly
					else	 
					if (LocalActionSubmitForApproval)
						invoked.PrmActionCode											= "A" 	
						invoked.PrmEditContext                      					= "ReleaseFromApproval"	
						if (GeneralLedgerSystemCodeRel.EncumbranceOption.TrackAndEdit)   
							invoked.PrmMode												= BudgetEditMode.Hard
						else	
							invoked.PrmMode												= BudgetEditMode.UpdateOnly
			else
				BudgetEditProcessing = BudgetEditProcessing.NotInProcessing			
				if (LocalActionUnreleaseToRelease)
					invoke FinalRelease
				else	
				if (LocalActionSubmitForApproval)
					invoke FinalApproval










																		
  	Actions
  		Create is a Create Action
			restricted
			Exit Rules
		    	if (!DoNotIncrementLine)
		    		increment BankStatement.LastBankStatementLine
	    		increment BankStatement.LineAmountTotal by LineAmount	
		    		
        SplitCreate is a Create Action
			default label is untranslatable
			restricted
			Exit Rules


				increment BankStatement.LineAmountTotal by LineAmount	
		    		
				if (CashForecastByDateRangeRel exists)
					for each CashForecastByDateRangeRel
						LocalCashForecast = each.CashForecast
						if (CashForecastPeriodAmountRel exists)
							increment CashForecastPeriodAmountRel.ActualAmount by LineAmount
					
					invoke ScheduledRefresh CashForecastPeriodAmountCubeRel in background

		ManuallyCreateLineForImportedStatement is a Create Action
			default label is "ManuallyCreateLine"
			valid when (LineCanBeManuallyCreatedForImportedStatement)
			Exit Rules
		    	ManuallyCreatedForImportedStatement = true
		    	
		    	if (!DoNotIncrementLine)
		    		increment BankStatement.LastBankStatementLine
		    		increment BankStatement.LineAmountTotal by LineAmount	
		
				if (CashTransactionCategory.UncategorizedCategory)
		    		include TransactionProcessingRules
		    		
		    		if (CreateCashForecastObjectsForTransaction)
						include UpdateAmountsForAllForecasts
		    	else
		    		LocalAccountInformation = CashTransactionCategory.CategoryAccount
		    		LocalCashAllocationCode = CashTransactionCategory.CashAllocationCode

		    		invoke DistributionCreation
		    	include SetParsedDataFields
				if (CashForecastByDateRangeRel exists)
					for each CashForecastByDateRangeRel
						LocalCashForecast = each.CashForecast
						if (CashForecastPeriodAmountRel exists)
							increment CashForecastPeriodAmountRel.ActualAmount by LineAmount
						
					invoke ScheduledRefresh CashForecastPeriodAmountCubeRel in background
		    	
		    	invoke UpdateLineExceptionStatus
		    	
		    	if (BankStatement.StatementStatus.Reconciled)
		    		invoke UnreconcileStatement Reconciled BankStatement
		    		
		    	increment BankStatement.AccumulatedLineAmount by LineAmount
		    	
				if (BankStatement.ManualStatementInBalance
				and BankStatement.HasDifferentBaseOrCompanyOrLocationCurrency)
					invoke UpdateCurrencyBalances BankStatement
		    		    			
  		ManuallyCreateLine is a Create Action
			valid when (LineCanBeManuallyCreated)
									
			Exit Rules
		    	if (!DoNotIncrementLine)
		    		increment BankStatement.LastBankStatementLine
		    		increment BankStatement.LineAmountTotal by LineAmount	
		
				if (CashTransactionCategory.UncategorizedCategory)
		    		include TransactionProcessingRules
		    		
		    		if (CreateCashForecastObjectsForTransaction)
						include UpdateAmountsForAllForecasts
		    	else
		    		LocalAccountInformation = CashTransactionCategory.CategoryAccount
		    		LocalCashAllocationCode = CashTransactionCategory.CashAllocationCode

		    		invoke DistributionCreation
		    	include SetParsedDataFields
				if (CashForecastByDateRangeRel exists)
					for each CashForecastByDateRangeRel
						LocalCashForecast = each.CashForecast
						if (CashForecastPeriodAmountRel exists)
							increment CashForecastPeriodAmountRel.ActualAmount by LineAmount
					
					invoke ScheduledRefresh CashForecastPeriodAmountCubeRel in background
		    	
		    	invoke UpdateLineExceptionStatus
		    	
		    	if (BankStatement.StatementStatus.Reconciled)
		    		invoke UnreconcileStatement Reconciled BankStatement
		    		
		    	increment BankStatement.AccumulatedLineAmount by LineAmount
		    	
				if (BankStatement.ManualStatementInBalance
				and BankStatement.HasDifferentBaseOrCompanyOrLocationCurrency)
					invoke UpdateCurrencyBalances BankStatement
		    		
		DistributionCreation is an Instance Action
			default label is untranslatable
			restricted
			Action Rules
				include DistributionCreation
			Exit Rules
				if (StatementLinePostingOption.PostToCashLedger
				and CashManagementAccount.AutoReleaseCashLedgerTransactions)
					invoke Unreleased.Release LocalCashLedgerTransaction.CashLedgerTransaction
						resume on error						

				    	
		CreateCashLedgerTransaction  is an Instance Action
			valid when (CanCreateCashledgerTransaction)
			Parameters
				PrmCashCode				is a CashCode
				PrmBankTransactionCode	is a BankTransactionCode
				PrmTransactionNumber	is a TransactionNumber		
				PrmDescription			is a Description

			Parameter Rules
				PrmCashCode
					initial value is CashTransactionCategory.PostingCashCode
					initial value is CashManagementAccount.CashCode
					default to CashTransactionCategory.PostingCashCode
					default to CashManagementAccount.CashCode
					constraint (PrmCashCode.BankAccountNumber	= CashManagementAccount)
						"CashCodeMustBeForCashManagementAccount<CashManagementAccount>"

				PrmBankTransactionCode
					initial value is DefaultTransactionCode
					default to DefaultTransactionCode
					if (LineAmount >= 0)
						constraint (PrmBankTransactionCode.TransactionType.CreditTransaction)
							"TransactionCodeMustBeCreditType"
					else
						constraint (PrmBankTransactionCode.TransactionType.DebitTransaction)
							"TransactionCodeMustBeDebitType"
							




								
				PrmDescription
					initial value is AutoCashTransactionCreateDescription
					default to AutoCashTransactionCreateDescription
					
			Action Rules
				invoke Create CashLedgerTransaction
					assign result to LocalCashLedgerTransaction
					fill in user fields from CashTransactionCategory	
					fill in user fields from BankStatement				
					fill in user fields from this instance				
					invoked.CashManagementGroup				= CashManagementGroup
					invoked.BankTransactionCode				= PrmBankTransactionCode
					invoked.CashLedgerSourceRecord			= "CBT"
					if (LineAmount >= 0)
						invoked.IssuedBankAmountUnsigned	= LineAmount						
					else
						invoked.IssuedBankAmountUnsigned	= (LineAmount * -1)
					invoked.CashCode						= PrmCashCode
					invoked.TransactionNumber				= PrmTransactionNumber
					invoked.Company							= CashManagementAccount.LegalEntity
					invoked.IssueDate						= TransactionDate	
					invoked.GeneralLedgerPostDate			= CashLedgerPostingDate
					invoked.Description						= AutoCashTransactionCreateDescription
					invoked.CreatedFromBankStatement		= BankStatement
					invoked.CreatedFromBankStatementLine	= BankStatementLine						
					if (CashTransactionCategory.OverrideEventCode entered)	
	            		invoked.GeneralLedgerEvent 			= CashTransactionCategory.OverrideEventCode

				StatementLinePostingOption		= StatementLinePostingOption.PostToCashLedger
				BankTransactionCode				= PrmBankTransactionCode
				CreatedCashLedgerSourceRecord	= "CBT"
				CreatedCashLedgerTransaction	= LocalCashLedgerTransaction.CashLedgerTransaction
						
		ClearCreatedCashLedgerTransaction is an Instance Action
			default label is untranslatable
			restricted
			Action Rules
				initialize BankTransactionCode
				initialize CreatedCashLedgerSourceRecord
				initialize CreatedCashLedgerTransaction
				initialize StatementLinePostingOption				
				if (ReconciliationIdentifier entered)
					invoke Update ReconciliationIdentifier.BankStatementReconciliation
						initialize invoked.LineMatchField
				invoke UpdateLineExceptionStatus

  		Update is an Update Action
  			Field Rules
  				TransactionDate		
					if (LineStatus.Reconciled)
						cannot be changed
 							"UpdateNotAllowedOnReconciledStatementLines"
				RelatedReference
					if (LineStatus.Reconciled)
						cannot be changed
 							"UpdateNotAllowedOnReconciledStatementLines"
				BankReference
					if (LineStatus.Reconciled)
						cannot be changed
 							"UpdateNotAllowedOnReconciledStatementLines"
				TextReference
					if (LineStatus.Reconciled)
						cannot be changed
 							"UpdateNotAllowedOnReconciledStatementLines"
				StatementDate
					if (LineStatus.Reconciled)
						cannot be changed
 							"UpdateNotAllowedOnReconciledStatementLines"
				FundsCode
					if (LineStatus.Reconciled)
						cannot be changed
 							"UpdateNotAllowedOnReconciledStatementLines"
				TransactionType
					if (LineStatus.Reconciled)
						cannot be changed
 							"UpdateNotAllowedOnReconciledStatementLines"
				ISO20022DomainCode
					if (LineStatus.Reconciled)
						cannot be changed
 							"UpdateNotAllowedOnReconciledStatementLines"
				ISO20022FamilyCode
					if (LineStatus.Reconciled)
						cannot be changed
 							"UpdateNotAllowedOnReconciledStatementLines"
				ISO20022SubFamilyCode
					if (LineStatus.Reconciled)
						cannot be changed
 							"UpdateNotAllowedOnReconciledStatementLines"
				Description
					if (LineStatus.Reconciled)
						cannot be changed
 							"UpdateNotAllowedOnReconciledStatementLines"
				BankTransactionCode
					if (LineStatus.Reconciled
					and old BankTransactionCode entered)		
						cannot be changed
 							"UpdateNotAllowedOnReconciledStatementLines"
				ZeroDayFloat
					if (LineStatus.Reconciled)
						cannot be changed
 							"UpdateNotAllowedOnReconciledStatementLines"
				OneDayFloat
					if (LineStatus.Reconciled)
						cannot be changed
 							"UpdateNotAllowedOnReconciledStatementLines"
				TwoOrMoreDaysFloat
					if (LineStatus.Reconciled)
						cannot be changed
 							"UpdateNotAllowedOnReconciledStatementLines"
				LineCurrency
					if (LineStatus.Reconciled)
						cannot be changed
 							"UpdateNotAllowedOnReconciledStatementLines"

  				LineAmount
 					if (LineStatus.Reconciled)
						cannot be changed
 							"UpdateNotAllowedOnReconciledStatementLines"
  					if (BankStatement.BankStatementInterfaceHeader entered
  					and !BankStatementLine.SequenceNumber entered
  					and !ManuallyCreatedForImportedStatement)
  						cannot be changed
  							"CanOnlyChangeLineAmountIfItHasBeenSplit"
  							
  					if (ReconSummaryRecord entered)
  						cannot be changed
  							"CannotChangeAmountOnLinesAlreadyMatched"

					if  (CreatedCashLedgerTransaction entered)
  						cannot be changed
							"CashLedgerTransactionsCreatedFromLine;MustDeleteCashLedgerTransactionBeforeChangingLineAmount"
	 				if (LineAmount changed)
						if (LineAmount >= 0)
							DebitCreditIndicator = "C"
						else
							DebitCreditIndicator = "D"
						invoke UpdateTransactionAmount ReconciliationIdentifier.BankStatementReconciliation
							if (LineAmount < 0)
								invoked.TransactionAmount		= (LineAmount * -1)
								invoked.ReconciledAmount		= (LineAmount * -1)
								invoked.DebitCreditIndicator	= "D"
							else
								invoked.TransactionAmount		= LineAmount
								invoked.ReconciledAmount		= LineAmount
								invoked.DebitCreditIndicator	= "C"
								
						if (BankStatementLine.SequenceNumber entered)				
							invoke UpdateLineExceptionStatus 
							if (IsSplitLine)
								invoke UpdateOriginalSplitLineBalanceStatus OriginalBankStatementLineSequenceRel
						
						if (!CashTransactionCategory changed) 
							if (CashForecastByDateRangeRel exists)
								for each CashForecastByDateRangeRel
									LocalCashForecast = each.CashForecast
									if (CashForecastPeriodAmountRel exists)
										increment CashForecastPeriodAmountRel.ActualAmount by LineAmountDifference
								
								invoke ScheduledRefresh CashForecastPeriodAmountCubeRel in background
						
						increment BankStatement.LineAmountTotal by LineAmountDifference	
	
 				CashTransactionCategory
					if (LineStatus.Reconciled)
						cannot be changed
 							"UpdateNotAllowedOnReconciledStatementLines"

	 				if (CashTransactionCategory changed)
						invoke UpdateCashTransactionCategory ReconciliationIdentifier.BankStatementReconciliation
							invoked.CashTransactionCategory		= CashTransactionCategory
					
						if (CashForecastByDateRangeRel exists)
							for each CashForecastByDateRangeRel
								LocalCashForecast = each.CashForecast
								if (OldCashForecastPeriodAmountRel exists)
									decrement OldCashForecastPeriodAmountRel.ActualAmount by OldLineAmount
									
								if (CashForecastPeriodAmountRel exists)
									increment CashForecastPeriodAmountRel.ActualAmount by LineAmount
							
							invoke ScheduledRefresh CashForecastPeriodAmountCubeRel in background
				
			Exit Rules
	 			invoke UpdateLineExceptionStatus
	 			if (LineAmount changed)
					if (BankStatement.ManuallyCreatedStatement
					and !BankStatementLine.SequenceNumber entered)
						increment BankStatement.AccumulatedLineAmount by (LineAmount - old LineAmount)
					if  (BankStatement.HasDifferentBaseOrCompanyOrLocationCurrency
					and (BankStatement.ManualStatementInBalance
					or   BankStatementLine.SequenceNumber entered))
						invoke UpdateCurrencyBalances BankStatement
				if (StatementDate changed
				and TransactionDate	= old StatementDate)
					TransactionDate	= StatementDate
				if (RelatedReference	changed			
				or  BankReference		changed
				or  TextReference		changed
				or  Description			changed
				or  TransactionDate 	changed) 		
					invoke UpdateReferenceOrDescription ReconciliationIdentifier.BankStatementReconciliation
						invoked.RelatedReference	= RelatedReference
						invoked.BankReference		= BankReference
						invoked.TextReference		= TextReference
						invoked.Description			= Description
						invoked.TransactionDate 	= TransactionDate	

  		UpdateLineStatus is an Instance Action
  			default label is untranslatable
  			restricted
  			Parameters
  				PrmLineStatus is Numeric 1
					default label is "Status"
					States
						Unreconciled	value is 0
						Reconciled		value is 1
						Pending			value is 2
				PrmReconSummaryRecord			is a BankStatementReconciliation
				PrmPendingReconcileDate			is Date
				PrmInitializeReconSummaryRecord	is Boolean
				PrmInitializeReconIdentifier	is Boolean
				
  			Action Rules
  				if (PrmLineStatus.Reconciled)
  					if (!BankStatementLineDetailRel exists
  					or	!NotReconciledBankStatementLineDetailRel exists)
						LineStatus = PrmLineStatus
				else	
					LineStatus = PrmLineStatus
				if (PrmReconSummaryRecord entered)
					ReconSummaryRecord	= PrmReconSummaryRecord
				if (PrmPendingReconcileDate entered)
					PendingReconcileDate	= PrmPendingReconcileDate
				if (PrmInitializeReconSummaryRecord)
					initialize ReconSummaryRecord
				if (PrmInitializeReconIdentifier)
					initialize ReconciliationIdentifier
				if (!PrmLineStatus.Reconciled)
					initialize PendingReconcileDate	

				if (PrmLineStatus.Pending						
				or  old LineStatus.Pending)
					invoke UpdateLineExceptionStatus

				if (PrmLineStatus.Pending
				and BankStatement.StatementStatus.Unreconciled)
					invoke UpdateReconciliationStatus Unreconciled BankStatement
				
				if (PrmLineStatus.Reconciled
				and old LineStatus.Pending
				and BankStatement.StatementStatus.Unreconciled)
					invoke UpdateReconciliationStatus Unreconciled BankStatement
  		
  		UpdateDescription is an Instance Action
  			default label is untranslatable
  			restricted
  			Parameters
  				PrmTextReference	is a BankStatementLineReference	
  				PrmDescription 		is Alpha up to 1000
				PrmLongDescription  is Text
  				
  			Action Rules
  				if (PrmTextReference entered)
  					TextReference += PrmTextReference
  				if (PrmDescription entered)
  					Description	+= PrmDescription
					TransientLongDescription += PrmLongDescription
  		
  		UpdateCategory is an Instance Action
  			valid when (LineStatus.Unreconciled)
  			Parameters
  				PrmCategory is a CashTransactionCategory
  				PrmComment	is Text
  			
  			Parameter Rules
  				PrmCategory
  					required
  						"CategoryIsRequired"	
  					
  			Action Rules
  				invoke Update 
  					invoked.CashTransactionCategory = PrmCategory
  					invoked.Comment = PrmComment

		UpdateOriginalSplitLineBalanceStatus is an Instance Action
			default label is untranslatable
			restricted
			Action Rules
				if (SplitLineDoesNotBalance)
					HasLineException	= true
				else
					HasLineException	= false

		UpdateLineExceptionStatus is an Instance Action
			default label is untranslatable
			restricted
			Action Rules
				if (LineStatus.Pending
				or  Uncategorized
				or	DistributionsOutOfBalance
				or  HasUnreleasedCashLedgerTransactions
				or  SplitLineHasNoAmount
				or 	SplitLineDoesNotBalance)

					HasLineException	= true
				else
					HasLineException	= false




		UpdateLineExceptionStatusFromTransactionRelease is an Instance Action
			default label is untranslatable
			restricted
			Action Rules
				HasLineException	= false
				
		UpdateExceptionStatusForAllLines is a Set Action
			restricted
			Parameters
				PrmCashManagementGroup		is a CashManagementGroup
				PrmCashManagementAccount	is a CashManagementAccount
				PrmBankStatement			is a BankStatement
					
			Parameter Rules
				PrmCashManagementGroup		required

			Instance Selection
				where (CashManagementGroup		= PrmCashManagementGroup
				and  ((PrmCashManagementAccount	entered	
				and    CashManagementAccount	= PrmCashManagementAccount)
				or     PrmCashManagementAccount	!entered)
				and  ((PrmBankStatement			entered
				and    BankStatement			= PrmBankStatement)
				or     PrmBankStatement			!entered))

			Action Rules
				Instance Rules
					if (StatementIntraday
					and BankStatementLineDistribution set exists)
						invoke Purge BankStatementLineDistribution set
						
					invoke UpdateLineExceptionStatus

  		Delete is a Delete Action
  			valid when (LineCanBeDeleted)
  			Entrance Rules
				if (CreatedCashLedgerTransaction entered)
					constraint (CreatedCashLedgerTransaction.Status.Unreleased)
						"BankStatementLineHasReleasedCashLedgerTransaction;CannotDelete"
					invoke Delete CreatedCashLedgerTransaction			
						
  				invoke Purge ReconciliationIdentifier.BankStatementReconciliation
				
				if (CashForecastByDateRangeRel exists)
					for each CashForecastByDateRangeRel
						LocalCashForecast = each.CashForecast
						if (CashForecastPeriodAmountRel exists)
							decrement CashForecastPeriodAmountRel.ActualAmount by LineAmount				
					
					invoke ScheduledRefresh CashForecastPeriodAmountCubeRel in background
					
				if (BankStatement.ManuallyCreatedStatement
				and !OriginalLineAmount entered
				and !BankStatementLine.SequenceNumber entered)
					decrement BankStatement.AccumulatedLineAmount by LineAmount
					if (!CurrencyGainLossLine
					and BankStatement.HasDifferentBaseOrCompanyOrLocationCurrency
					and BankStatement.ManualStatementInBalance)
						invoke UpdateCurrencyBalances BankStatement

				if (GeneralLedgerSystemCodeRel.EncumbranceOption.TrackAndEdit
				or 	GeneralLedgerSystemCodeRel.EncumbranceOption.Track)
					invoke Delete HeaderBudgetEditErrorRel
					invoke Delete DistributionBudgetEditErrorRel
					
				decrement BankStatement.LineAmountTotal by LineAmount	
			Exit Rules
				if (BankStatement.StatementStatus.Unreconciled)
					invoke UpdateReconciliationStatus Unreconciled BankStatement
		
  		Purge is a Purge Action
  			restricted
  			Entrance Rules
  				invoke Purge BankStatementLineDetailRel
  				if(BankStatementLineDistribution set exists)
  					invoke Purge BankStatementLineDistribution set
  			
  		SplitStatementLine is an Instance Action
  			valid when (LineCanBeSplit)
  			Parameters
  				TotalNumberOfLines	 is Numeric 4
  			
  			Parameter Rules
  				TotalNumberOfLines
  					required
  			
  			Local Fields
  				LocalNumberOfLines				is Numeric 4
  				LocalSequenceNumber				is a SequenceNumber
  				NewBankStatementLine			is a BankStatementLine view
 				LocalReconciliationIdentifier 	is a BankStatementReconciliation view
  				
  			Action Rules
  				constraint (LineCanBeSplit)
  					"CannotSplitALineThatHasAlreadyBeenModified"
  					
  				constraint (ReconSummaryRecord !entered)
  					"CannotSplitLineAlreadyMatchedTo:<ReconSummaryRecord.BankStatementReconciliation.LineMatchField>"
  					
  				constraint (NoReleasedOrPostedDistributions)
  					"CannotSplitLineWithReleasedOrPostedDistributions"

  				LocalNumberOfLines = 1

  				if (!LastSequenceNumber entered)
  					LocalSequenceNumber = LastSequenceNumber + 1
  				else
  					LocalSequenceNumber = LastSequenceNumber

  				if (!OriginalLineAmount entered)
  					OriginalLineAmount = LineAmount
  					
  				while (LocalNumberOfLines <= TotalNumberOfLines)
  					invoke SplitCreate
  						assign result to NewBankStatementLine
  						fill in fields from BankStatementLine
  						invoked.CashManagementGroup				 = CashManagementGroup
  						invoked.CashManagementAccount			 = CashManagementAccount
  						invoked.BankStatement					 = BankStatement
  						invoked.BankStatementLine.LineNumber	 = BankStatementLine.LineNumber
  						invoked.BankStatementLine.SequenceNumber = LocalSequenceNumber

  						invoked.LineStatus						 = 0
	  					invoked.HasLineException			 	 = true
						initialize invoked.LineDistributionAmount
						initialize invoked.ReconciliationIdentifier
				 		initialize invoked.ReconSummaryRecord
  						if (LocalSequenceNumber != 1)
	  						initialize invoked.LineAmount
	  						initialize invoked.OriginalLineAmount
	  						initialize invoked.LastSequenceNumber 
  						if (!BankStatementInterfaceHeader exists)
  							initialize invoked.BankStatementInterfaceHeader
  							initialize invoked.BankStatementInterface

					if (ReconciliationIdentifier entered)
						invoke Create BankStatementReconciliation
							assign result to LocalReconciliationIdentifier
							fill in fields from NewBankStatementLine.BankStatementLine
							invoked.LineType				  = 1 
							if (LocalSequenceNumber	= 1)
								if (LineAmount < 0)
									invoked.TransactionAmount = (LineAmount * -1)
								else
									invoked.TransactionAmount = LineAmount
							else
								invoked.TransactionAmount	  = 0
							invoked.TransactionDate			  = TransactionDate
							invoked.BankTransactionCode		  = BankTransactionCode
							invoked.RelatedReference		  = RelatedReference
							invoked.BankReference			  = BankReference
							invoked.TextReference			  = TextReference
	
						invoke Update NewBankStatementLine.BankStatementLine
							invoked.ReconciliationIdentifier	= LocalReconciliationIdentifier.BankStatementReconciliation
 
  					for each BankStatementLineDistribution set
  						invoke CreateFromReclassification NewBankStatementLine.BankStatementLine.BankStatementLineDistribution set
  							fill in fields from each
  							invoked.CashManagementGroup				 = CashManagementGroup
	  						invoked.CashManagementAccount			 = CashManagementAccount
	  						invoked.BankStatement					 = BankStatement
	  						invoked.BankStatementLine.LineNumber	 = BankStatementLine.LineNumber
	  						invoked.BankStatementLine.SequenceNumber = LocalSequenceNumber
  							initialize invoked.GLTransactionAmount
  							
  					LocalNumberOfLines += 1
  					LocalSequenceNumber += 1
  					
  				LastSequenceNumber = LocalSequenceNumber
  		
  			Exit Rules
  				invoke Delete
 
  		RestoreOriginalStatementLine is an Instance Action
			valid when (SplitLineCanBeRestored)
			confirmation required
				"TheOriginalBankStatementLineWillBeRestored;WouldYouLikeToContinue?"
			
			Local Fields
  				NewBankStatementLine			is a BankStatementLine view
 				LocalReconciliationIdentifier 	is a BankStatementReconciliation view
			
			Action Rules
  				constraint (ReconSummaryRecord !entered)
  					"CannotRestore:OneOrMoreSplitLinesAreMatched"

				constraint (NoReleasedOrPostedDistributions)
					"CannotRestore:ReleasedOrPostedDistributionsExist"
				
				constraint (!AnyBankStatementLineDetailRel exists)
  					"CannotRestore:OneOrMoreSplitLinesHasLineDetailsDefined"
  						
  				if (SplitBankStatementLineSequenceRel exists)
	  				constraint (any SplitBankStatementLineSequenceRel.ReconSummaryRecord !entered)
	  					"CannotRestore:OneOrMoreSplitLinesAreMatched"

	  				constraint (any SplitBankStatementLineSequenceRel.NoReleasedOrPostedDistributions)
	  					"CannotRestore:ReleasedOrPostedDistributionsExist"

				invoke Create
					assign result to NewBankStatementLine
					fill in fields from BankStatementLine
					invoked.CashManagementGroup				 = CashManagementGroup
					invoked.CashManagementAccount			 = CashManagementAccount
					invoked.BankStatement					 = BankStatement
					invoked.BankStatementLine.LineNumber	 = BankStatementLine.LineNumber
					invoked.BankStatementLine.SequenceNumber = blank
					invoked.LineAmount						 = OriginalLineAmount
					invoked.DoNotIncrementLine				 = true	
					invoked.LineStatus						 = 0
  					initialize invoked.LineDistributionAmount
  					initialize invoked.OriginalLineAmount
					initialize invoked.LastSequenceNumber
					initialize invoked.ReconciliationIdentifier
			 		initialize invoked.ReconSummaryRecord
					if (!BankStatementInterfaceHeader exists)
						initialize invoked.BankStatementInterfaceHeader
						initialize invoked.BankStatementInterface

				invoke RestoreReclassifyStatementLine NewBankStatementLine.BankStatementLine

				invoke UpdateLineExceptionStatus NewBankStatementLine.BankStatementLine

				LocalCashTransactionCategory = NewBankStatementLine.BankStatementLine.CashTransactionCategory

				if (CashForecastByDateRangeRel exists)
					for each CashForecastByDateRangeRel
						LocalCashForecast = each.CashForecast
						if (RestoreCashForecastPeriodAmountRel exists)
							increment RestoreCashForecastPeriodAmountRel.ActualAmount by OriginalLineAmount
					
					invoke ScheduledRefresh CashForecastPeriodAmountCubeRel in background

				if (ReconciliationIdentifier entered)
					invoke Create BankStatementReconciliation
						assign result to LocalReconciliationIdentifier
						fill in fields from NewBankStatementLine.BankStatementLine
						invoked.LineType				= 1 
						if (OriginalLineAmount < 0)
							invoked.TransactionAmount 	= (OriginalLineAmount * -1)
						else
							invoked.TransactionAmount 	= OriginalLineAmount
						invoked.TransactionDate			= TransactionDate
						invoked.BankTransactionCode		= BankTransactionCode
						invoked.RelatedReference		= RelatedReference
						invoked.BankReference			= BankReference
						invoked.TextReference			= TextReference

					invoke Update NewBankStatementLine.BankStatementLine
						invoked.ReconciliationIdentifier	= LocalReconciliationIdentifier.BankStatementReconciliation

			Exit Rules
				invoke Delete SplitBankStatementLineSequenceRel 

				invoke Delete

				if (BankStatement.HasDifferentBaseOrCompanyOrLocationCurrency)
					invoke UpdateCurrencyBalances BankStatement

		ReclassifyUncategorizedLines is a Set Action
			default label is untranslatable
			restricted
			Parameters
				PrmCashManagementGroup		is a CashManagementGroup
				PrmCashManagementAccount	is a CashManagementAccount
				PrmBankStatement			is a BankStatement
				PrmUncategorizedCategory	is a CashTransactionCategory
				PrmReclassifiedCategory		is a CashTransactionCategory
					
			Parameter Rules
				PrmCashManagementGroup		required
				PrmCashManagementAccount	required
				PrmBankStatement			required
				PrmUncategorizedCategory	required
				PrmReclassifiedCategory		required
				
			Sort Order
				CashManagementGroup
				CashManagementAccount
				BankStatement
				CashTransactionCategory
				BankStatementLine

			Instance Selection
				where (CashManagementGroup			= PrmCashManagementGroup
				and    CashManagementAccount		= PrmCashManagementAccount
				and    BankStatement				= PrmBankStatement
				and    CashTransactionCategory		= PrmUncategorizedCategory
				and    !CurrencyGainLossLine)

			Action Rules
				Instance Rules
					invoke Update
						invoked.CashTransactionCategory	= PrmReclassifiedCategory
 
 		ReclassifyStatementLine is an Instance Action
 			valid when (CanReclassifyStatementLine)
 			Action Rules
 				include TransactionProcessingRules
 				
 				if (CreateCashForecastObjectsForTransaction)
					include UpdateAmountsForAllForecasts
					
				if (CashTransactionCategory changed)
					if (CashForecastByDateRangeRel exists)
						for each CashForecastByDateRangeRel
							LocalCashForecast = each.CashForecast
							if (OldCashForecastPeriodAmountRel exists)
								decrement OldCashForecastPeriodAmountRel.ActualAmount by OldLineAmount
							if (CashForecastPeriodAmountRel exists)
								increment CashForecastPeriodAmountRel.ActualAmount by LineAmount
							
						invoke ScheduledRefresh CashForecastPeriodAmountCubeRel in background
		
		ReparseDescriptionField is an Instance Action
			Action Rules
				include SetParsedDataFields

		RestoreReclassifyStatementLine is an Instance Action
 			default label is untranslatable
 			restricted
 			Action Rules
 				include TransactionProcessingRules
 				
 				if (CreateCashForecastObjectsForTransaction)
					include UpdateAmountsForAllForecasts
					
		ExecuteTransactionProcessingRules is a Set Action
			default label is untranslatable
			restricted
			run in background
			Parameters
				PrmCashManagementGroup		 	is a CashManagementGroup
				PrmAccount					 	is a CashManagementAccount
				PrmBankStatement			 	is a BankStatement
				PrmCategorizationGroup		 	is a CategorizationGroup 
				PrmInitialImport			 	is Boolean
				PrmBankStatementInterfaceHeader	is a BankStatementInterfaceHeader
				
			Parameter Rules
				PrmCashManagementGroup			required
				PrmAccount						required
				PrmBankStatement				required
				PrmCategorizationGroup			required
					
			Sort Order
				CashManagementGroup
				CashManagementAccount
				BankStatement
				CategorizationGroup
				BankStatementLine
				
			Instance Selection
				where (CashManagementGroup	 = PrmCashManagementGroup
				and	   CashManagementAccount = PrmAccount
				and    BankStatement		 = PrmBankStatement
				and	   CategorizationGroup	 = PrmCategorizationGroup
				and    !CurrencyGainLossLine)
				
			Action Rules
				Set Rules
					Exit Rules
						invoke UpdateCategorizationGroupsProcessed PrmBankStatement
						
						if (PrmBankStatement.CategorizationGroupsProcessed = PrmBankStatement.CategorizationGroupsSubmitted)
							LocalCashManagementGroup = PrmCashManagementGroup
							LocalCashManagementAccount = PrmAccount
							LocalStatementDate = PrmBankStatement.StatementDate
							if (LocalCashForecastByDateRangeRel exists)
								invoke CreateForecastActuals
									invoked.PrmCashManagementGroup			= PrmCashManagementGroup
									invoked.PrmCashManagementAccount 		= PrmAccount
									invoked.PrmBankStatement		 		= PrmBankStatement
									invoked.PrmInitialImport		 		= PrmInitialImport
									invoked.PrmBankStatementInterfaceHeader = PrmBankStatementInterfaceHeader
							else
								LocalBankStatement = PrmBankStatement
								if (PrmInitialImport)
									if (PrmBankStatement.HasDifferentBaseOrCompanyOrLocationCurrency)
										invoke UpdateCurrencyBalances PrmBankStatement
									
									if (!PrmBankStatementInterfaceHeader.FileContainsMultipleStatementsWithSameAccount)
										invoke AutoReconcileStatementLines Unreconciled PrmBankStatement
									
									if (PrmAccount.ImportNotification entered)
										invoke SendBankStatementNotifications PrmBankStatement
											invoked.PrmCashManagementGroup		= PrmCashManagementGroup		
											invoked.PrmCashManagementAccount	= PrmAccount
							
				Instance Rules
					include TransactionProcessingRules
					include SetParsedDataFields
					
					if (!PrmInitialImport
					and CashTransactionCategory changed)
						ReclassificationChangedCategory = old CashTransactionCategory
						
		UpdateCategorizationGroup is a Set Action
			default label is untranslatable
			completion message is "UpdateCategorizationGroupHasBeenSubmittedToTheQueueForProcessing"
			restricted
			Parameters
				PrmCashManagementGroup		is a CashManagementGroup
				PrmCashManagementAccount	is a CashManagementAccount
				PrmBankStatement			is a BankStatement
			
			Parameter Rules
				PrmCashManagementGroup		
					required
					constraint (PrmCashManagementGroup.NumberOfCategorizationGroups entered)
						"MustEnterNumberOfCategorizationGroupsOnCashManagementGroup"
				PrmCashManagementAccount			
					required
				PrmBankStatement	
					required
			
			Local Fields
				LocalCategorizationGroup 		  is a CategorizationGroup
				LocalNumberOfCategorizationGroups is a CategorizationGroup
				
			Instance Selection
				where (CashManagementGroup	 = PrmCashManagementGroup
				and	   CashManagementAccount = PrmCashManagementAccount
				and    BankStatement		 = PrmBankStatement)
				
			Action Rules
				Set Rules
					Entrance Rules
						LocalCategorizationGroup = 1
						LocalNumberOfCategorizationGroups = PrmCashManagementGroup.NumberOfCategorizationGroups
							
				Instance Rules
					if (LocalCategorizationGroup < LocalNumberOfCategorizationGroups)
						CategorizationGroup = LocalCategorizationGroup
						LocalCategorizationGroup += 1
					else
						CategorizationGroup = LocalCategorizationGroup
						LocalCategorizationGroup = 1
		
		CreateForecastActuals is a Set Action
			default label is untranslatable
			restricted
			Parameters
				PrmCashManagementGroup	 		is a CashManagementGroup
				PrmCashManagementAccount 		is a CashManagementAccount
				PrmBankStatement		 		is a BankStatement
				PrmInitialImport		 		is Boolean
				PrmBankStatementInterfaceHeader is a BankStatementInterfaceHeader
				
			Parameter Rules
				PrmCashManagementGroup			required
				PrmCashManagementAccount 		required
				PrmBankStatement		 		required
				
			Sort Order
				CashManagementGroup
				CashManagementAccount
				BankStatement
				BankStatementLine.LineNumber
				BankStatementLine.SequenceNumber
				
			Instance Selection
				where (CashManagementGroup	 = PrmCashManagementGroup
				and	   CashManagementAccount = PrmCashManagementAccount
				and	   BankStatement = PrmBankStatement
				and	   !StatementIntraday)

				
			Action Rules
				Empty Set Rules
					LocalBankStatement = PrmBankStatement
					
					if (PrmInitialImport)
						if (PrmBankStatement.HasDifferentBaseOrCompanyOrLocationCurrency)
							invoke UpdateCurrencyBalances PrmBankStatement
						
						if (!PrmBankStatementInterfaceHeader.FileContainsMultipleStatementsWithSameAccount)
							invoke AutoReconcileStatementLines Unreconciled PrmBankStatement
						


					
						if (PrmCashManagementAccount.ImportNotification entered)
							invoke SendBankStatementNotifications PrmBankStatement
								invoked.PrmCashManagementGroup		= PrmCashManagementGroup		
								invoked.PrmCashManagementAccount	= PrmCashManagementAccount
											

					
				Set Rules
					Exit Rules
						LocalBankStatement = PrmBankStatement
						
						if (PrmInitialImport)
							if (PrmBankStatement.HasDifferentBaseOrCompanyOrLocationCurrency)
								invoke UpdateCurrencyBalances PrmBankStatement
	
							if (!PrmBankStatementInterfaceHeader.FileContainsMultipleStatementsWithSameAccount)
								invoke AutoReconcileStatementLines Unreconciled PrmBankStatement
							


							
							if (PrmCashManagementAccount.ImportNotification entered)
								invoke SendBankStatementNotifications PrmBankStatement
									invoked.PrmCashManagementGroup		= PrmCashManagementGroup		
									invoked.PrmCashManagementAccount	= PrmCashManagementAccount	
												


				Instance Rules
					include UpdateAmountsForAllForecasts
		
					if (!PrmInitialImport)
						if (ReclassificationChangedCategory entered)
							if (ChangedActualCashForecastPeriodAmountRel exists)
								decrement ChangedActualCashForecastPeriodAmountRel.ActualAmount by LineAmount

								if (CashForecastByDateRangeRel exists)
									for each CashForecastByDateRangeRel
										LocalCashForecast = each.CashForecast
										if (CashForecastPeriodAmountRel exists)
											increment CashForecastPeriodAmountRel.ActualAmount by LineAmount
									
									invoke ScheduledRefresh CashForecastPeriodAmountCubeRel in background
								
							initialize ReclassificationChangedCategory
					else
						if (CashForecastByDateRangeRel exists)
							for each CashForecastByDateRangeRel
								LocalCashForecast = each.CashForecast
								if (CashForecastPeriodAmountRel exists)
									increment CashForecastPeriodAmountRel.ActualAmount by LineAmount
							
							invoke ScheduledRefresh CashForecastPeriodAmountCubeRel in background
					
		UpdateForecastsForActualBankTransactions is a Set Action 
			restricted
			Parameters
				CashManagementGroup
				
			Parameter Rules
				CashManagementGroup	required
				
			Sort Order
				CashManagementGroup
				CashManagementAccount
				BankStatement
				BankStatementLine.LineNumber
				BankStatementLine.SequenceNumber
				
			Instance Selection
				where (CashManagementGroup	= CashManagementGroup
				and	   !StatementIntraday
				and    ActualCashForecastAccountRel exists)
				
			Action Rules
				Instance Rules
					include UpdateAmountsForAllForecasts

		LoadBankStatementPosition is a Set Action
			default label is untranslatable
			restricted
			Parameters
				PrmCashManagementGroup		is a CashManagementGroup
  				PrmCashManagementAccount	is a CashManagementAccount
  				PrmBankStatement			is a BankStatement
  				PrmStatementDate			is Date
  				PrmCashForecast				is a CashForecast
  				
  			Parameter Rules
  				PrmCashManagementGroup		required
  				PrmCashManagementAccount	required
  				PrmBankStatement			required
  				PrmStatementDate			required
  				PrmCashForecast				
  				
  			Sort Order
				CashManagementGroup
				CashManagementAccount
				BankStatement
				CashTransactionCategory
				BankStatementLine
			
			Instance Selection
  				where (CashManagementGroup		= PrmCashManagementGroup
  				and    CashManagementAccount	= PrmCashManagementAccount
  				and	   BankStatement			= PrmBankStatement
  				and	   CashTransactionCategory != CashManagementGroup.StatementCurrencyGainLossCategory)	
  			
  			Accumulators
				TotalCategoryAmount
				
			Action Rules
				Empty Set Rules
  					if (PrmCashForecast entered)
	  					invoke LoadForecastPositionTransactions CashForecastPeriodAmount
	  						invoked.PrmCashManagementGroup		= PrmCashManagementGroup
	  						invoked.PrmCashForecast				= PrmCashForecast 
	  						invoked.PrmCashManagementAccount	= PrmCashManagementAccount
	  						invoked.PrmBankStatement			= PrmBankStatement
	  						invoked.PrmStatementDate			= PrmStatementDate
					else
						invoke Create BankStatementPosition
	  						invoked.CashManagementGroup 	= PrmCashManagementGroup
	  						invoked.CashManagementAccount	= PrmCashManagementAccount
	  						invoked.BankStatement			= PrmBankStatement
						  						
	  			CashTransactionCategory Set Rules
	  				Exit Rules
	  					invoke Create BankStatementPosition
	  						invoked.CashManagementGroup 	= PrmCashManagementGroup
	  						invoked.CashManagementAccount	= PrmCashManagementAccount
	  						invoked.BankStatement			= PrmBankStatement
	  						invoked.CashTransactionCategory = CashTransactionCategory
	  						invoked.TransactionAmount		= TotalCategoryAmount
	  					
	  			Set Rules
	  				Exit Rules
	  					if (PrmCashForecast entered)
		  					invoke LoadForecastPositionTransactions CashForecastPeriodAmount
		  						invoked.PrmCashManagementGroup  	= PrmCashManagementGroup
		  						invoked.PrmCashForecast				= PrmCashForecast 
		  						invoked.PrmCashManagementAccount	= PrmCashManagementAccount
		  						invoked.PrmBankStatement			= PrmBankStatement
		  						invoked.PrmStatementDate			= PrmStatementDate
	  					
  				Instance Rules
  					TotalCategoryAmount	+= LineAmount	
							
		LoadLinesIntoReconciliation is a Set Action
			default label is untranslatable
			restricted
			Parameters
  				PrmCashManagementGroup		is a CashManagementGroup
  				PrmCashManagementAccount	is a CashManagementAccount
  				PrmBankStatement			is a BankStatement

  				PrmMassStatementLoad		is Boolean
  				PrmMassAccountLoad			is Boolean
  				
  			Parameter Rules
  				PrmCashManagementGroup		required
  				PrmCashManagementAccount	required

  			
			Local Fields
				LocalReconciliationIdentifier is a BankStatementReconciliation view
				BackgroundGroup				  is AlphaUpper up to 50
				
  			Sort Order
				CashManagementGroup
				CashManagementAccount
				BankStatement
				BankStatementLine
				
			Instance Selection
  				where (CashManagementGroup				= PrmCashManagementGroup
  				and    CashManagementAccount			= PrmCashManagementAccount
  				and	 ((PrmBankStatement					entered
  				and    BankStatement					= PrmBankStatement)
  				or     PrmBankStatement					!entered)
  				and    !StatementIntraday
  				and    ReconciliationIdentifier			!entered
  				and    !HasStatementLineDetails
  				and    !CurrencyGainLossLine)

			Action Rules
				Empty Set Rules
					if (PrmBankStatement entered)
						increment PrmBankStatement.CompletedReconLoadProcesses
						if (PrmBankStatement.CompletedReconLoadProcesses = PrmBankStatement.TotalReconciliationProcesses)
							if (PrmMassStatementLoad)
								BackgroundGroup = PrmCashManagementGroup + current corporate date
							else
								BackgroundGroup = PrmCashManagementGroup + PrmCashManagementAccount + PrmBankStatement
							invoke ReconcileStatementLines BankStatementReconciliation in background group(BackgroundGroup)
								invoked.PrmCashManagementGroup		= PrmCashManagementGroup
								invoked.PrmCashManagementAccount	= PrmCashManagementAccount
								invoked.PrmBankStatement			= PrmBankStatement
					else
						increment PrmCashManagementAccount.CompletedReconLoadProcesses
						if (PrmCashManagementAccount.CompletedReconLoadProcesses = PrmCashManagementAccount.TotalReconciliationProcesses)
							if (PrmMassAccountLoad)
								BackgroundGroup = PrmCashManagementGroup + current corporate date
							else
								BackgroundGroup = PrmCashManagementGroup + PrmCashManagementAccount + current corporate date
							invoke ReconcileStatementLines PrmCashManagementAccount in background group(BackgroundGroup)
								invoked.PrmMassAccountLoad	= PrmMassAccountLoad
				Set Rules
					Exit Rules
						if (PrmBankStatement entered)
							increment PrmBankStatement.CompletedReconLoadProcesses
							if (PrmBankStatement.CompletedReconLoadProcesses = PrmBankStatement.TotalReconciliationProcesses)
								if (PrmMassStatementLoad)
									BackgroundGroup = PrmCashManagementGroup + current corporate date
								else
									BackgroundGroup = PrmCashManagementGroup + PrmCashManagementAccount + PrmBankStatement
								invoke ReconcileStatementLines BankStatementReconciliation in background group(BackgroundGroup)
									invoked.PrmCashManagementGroup		= PrmCashManagementGroup
									invoked.PrmCashManagementAccount	= PrmCashManagementAccount
									invoked.PrmBankStatement			= PrmBankStatement
						else
							increment PrmCashManagementAccount.CompletedReconLoadProcesses
							if (PrmCashManagementAccount.CompletedReconLoadProcesses = PrmCashManagementAccount.TotalReconciliationProcesses)
								if (PrmMassAccountLoad)
									BackgroundGroup = PrmCashManagementGroup + current corporate date
								else
									BackgroundGroup = PrmCashManagementGroup + PrmCashManagementAccount + current corporate date
								invoke ReconcileStatementLines PrmCashManagementAccount in background group(BackgroundGroup)
									invoked.PrmMassAccountLoad	= PrmMassAccountLoad
									
				Instance Rules
					invoke Create BankStatementReconciliation
						assign result to LocalReconciliationIdentifier
						fill in fields from this instance
						invoked.LineType					= 1 
						if (StatementLinePostingOption.PostToGeneralLedger)
							invoked.PostStatementLine		= true
						if (LineAmount < 0)
							invoked.TransactionAmount		= (LineAmount * -1)
						else
							invoked.TransactionAmount 		= LineAmount
						invoked.TransactionDate				= TransactionDate
						invoked.BankTransactionCode		  	= BankTransactionCode
						invoked.RelatedReference			= RelatedReference
						invoked.BankReference				= BankReference
						invoked.TextReference				= TextReference
						if (!BankStatementInterfaceHeader exists)
							initialize invoked.BankStatementInterfaceHeader


						
					ReconciliationIdentifier	= LocalReconciliationIdentifier.BankStatementReconciliation
		
					if (LineStatus.Reconciled)
						invoke MarkAsReconciled LocalReconciliationIdentifier.BankStatementReconciliation

		UpdateDocumentTotals is an Instance Action
			default label is untranslatable
			restricted
			Parameters
				PrmDocumentCurrencyTotals		is a DocumentCurrencyTotals
			Action Rules
				BaseTotalDistributionAmount = PrmDocumentCurrencyTotals			

		ReleaseAllStatementDistributions is a Set Action
			default label is untranslatable
			restricted
			Parameters
				PrmCashManagementGroup		is a CashManagementGroup
				PrmCashManagementAccount	is a CashManagementAccount
				PrmBankStatement			is a BankStatement
				PrmRequiresApproval			is Boolean
					
			Parameter Rules
				PrmCashManagementAccount	required
				PrmBankStatement			required
				
			Instance Selection
				where (CashManagementGroup			= PrmCashManagementGroup
				and    CashManagementAccount		= PrmCashManagementAccount
				and    BankStatement				= PrmBankStatement
				and    StatementLinePostingOption.PostToGeneralLedger
				and    !DistributionsOutOfBalance
				and    !BudgetEditInProgress						
				and    UnreleasedLineDistributionRel exists)		
									
			Action Rules



						
				Instance Rules

					BankStatementReleaseAllAction = true	

					if (PrmRequiresApproval)
						include DistributionBalancingAndOffset 
						invoke SetToPendingApproval Entered UnreleasedLineDistributionRel
					else
						invoke ReleaseDistributions 

		ReleaseDistributions is an Instance Action
			valid when (DistributionsCanBeReleased)
			Action Rules
				constraint (all UnreleasedLineDistributionRel.GLTransactionAmount != 0) 
					"BankStatementLineHasDistributionsWithZeroAmount:CannotRelease"
				LocalActionUnreleaseToRelease = true
				include PerformBudgetEditsForApprovalOrRelease



		FinalRelease is an Instance Action		//	"Unreleased" State
			default label is untranslatable
			restricted	
			Entrance Rules
			Action Rules
				BudgetEditProcessing = BudgetEditProcessing.NotInProcessing
				include DistributionBalancingAndOffset












				invoke ReleaseDistribution Entered UnreleasedLineDistributionRel
				if (!BankStatementReleaseAllAction)	
					invoke UpdatePostedStatus BankStatement
			Exit Rules
				include ReleaseExitRules


		ApproveAllStatementDistributionsByLine is a Set Action
			default label is untranslatable
			restricted
			Parameters
				PrmCashManagementGroup		is a CashManagementGroup
				PrmCashManagementAccount	is a CashManagementAccount
				PrmBankStatement			is a BankStatement
					
			Parameter Rules
				PrmCashManagementAccount	required
				PrmBankStatement			required
				
			Instance Selection
				where (CashManagementGroup			= PrmCashManagementGroup
				and    CashManagementAccount		= PrmCashManagementAccount
				and    BankStatement				= PrmBankStatement
				and    !BudgetEditInProgress)							
			
			Action Rules
				Instance Rules
					invoke ReleaseApprovedDistributions
				
		ReleaseApprovedDistributions is an Instance Action
			default label is untranslatable
			restricted
			Action Rules
				LocalActionSubmitForApproval = true
				include PerformBudgetEditsForApprovalOrRelease


		FinalApproval is an Instance Action
			default label is untranslatable
			restricted	
			Action Rules
				BudgetEditProcessing = BudgetEditProcessing.NotInProcessing
				invoke ReleaseDistribution PendingApproval PendingApprovalLineDistributionRel
			Exit Rules
				include ReleaseExitRules
				
		UpdateBudgetResults is an Instance Action	
			default label is untranslatable
			restricted
			Parameters
				ParmSuccess    	is Boolean
				ParmActionCode	is an ActionCode
			Action Rules
				if (ParmSuccess)
					BudgetEditProcessing = BudgetEditProcessing.Success
					if (ParmActionCode.Release)  
						invoke FinalRelease
					else
					if (ParmActionCode.Approve) 
						invoke FinalApproval
				else
					BudgetEditProcessing = BudgetEditProcessing.Failure	

		RebuildCommitmentTotals is an Instance Action		
			default label is untranslatable
			restricted
			Parameters
				IsBatch        is Boolean
				BudgetEditMode
				BudgetEditTotalsProcessing
				ActionCode
			Action Rules
				invoke Delete HeaderBudgetEditErrorRel
				invoke Delete DistributionBudgetEditErrorRel
				invoke Delete BudgetTemplateGroupTotalRel
				for each UnreleasedLineDistributionRel
					invoke RecalculateCommitmentAmounts each
					increment LocalTransactionCount
					if (LocalTransactionCount > 50)
						commit transaction
						initialize LocalTransactionCount
				invoke EditTotalsRoute BudgetTemplateGroupTotal 	
					invoked.PrmFinanceEnterpriseGroup    																 = CashManagementGroup
					invoked.PrmBudgetEditGroup           																 = UniqueID
					invoked.PrmBudgetEditCallBack.BudgetEditCallBackCBBankStatementLine.CashManagementAccount    		 = CashManagementAccount
					invoked.PrmBudgetEditCallBack.BudgetEditCallBackCBBankStatementLine.BankStatement					 = BankStatement
					invoked.PrmBudgetEditCallBack.BudgetEditCallBackCBBankStatementLine.BankStatementLine.LineNumber	 = BankStatementLine.LineNumber
					invoked.PrmBudgetEditCallBack.BudgetEditCallBackCBBankStatementLine.BankStatementLine.SequenceNumber = BankStatementLine.SequenceNumber
					invoked.PrmBusinessClassName  					              										= "BankStatementLine"
					if (ActionCode.Release)
						invoked.PrmActionCode					= "R"  
						invoked.PrmEditContext                  = "Release"	
						invoked.PrmMode							= BudgetEditMode.Hard
					else	 
					if (ActionCode.Approve)
						invoked.PrmActionCode					= "A" 	
						invoked.PrmEditContext                  = "ReleaseFromApproval"
						invoked.PrmMode							= BudgetEditMode.Hard






		GetForecastTransactions is a Set Action
  			default label is untranslatable
  			restricted
			Parameters
				PrmCashManagementGroup 			is a CashManagementGroup
				PrmCashForecast					is a CashForecast
				PrmCashAccount					is a CashManagementAccount
				PrmForecastCalendar				is a SystemCalendar 
				PrmActualDateRange				is a DateRange
				PrmCategory						is a CashTransactionCategory
				PrmForecastCreationParameter	is a ForecastCreationParameter
				PrmRollingDateRange				is a DateRange
				
			Sort Order
				CashManagementGroup
				CashManagementAccount
				CashTransactionCategory
				StatementDate
				
			Accumulators
				TotalCategoryDateAmount
				TotalCategoryAmount
				
			Instance Selection
				where (CashManagementGroup = PrmCashManagementGroup
				and	   CashManagementAccount = PrmCashAccount
				and	   CashTransactionCategory = PrmCategory
				and	   StatementDate entered
				and	   StatementDate within PrmActualDateRange
				and	   !StatementIntraday)
				
			Action Rules
				StatementDate Set Rules
					Exit Rules
						if (PrmForecastCreationParameter.HistoricalCalculationOption.Actual)
							LocalCashForecast = PrmCashForecast
							LocalSystemCalendar = PrmForecastCalendar
							LocalActualDateRange = PrmActualDateRange
							LocalStatementDate = StatementDate
							LocalActualBankDayNumber = ActualBankDayNumber
							LocalRollingDateRange = PrmRollingDateRange							
							if (CashForecastPeriodBankDayRel exists
							and TotalCategoryDateAmount != 0)
								invoke Create CashForecastDetail
									invoked.CashManagementGroup						  	 = PrmCashManagementGroup
									invoked.CashForecast							  	 = PrmCashForecast
									invoked.CashForecastAccount.CashManagementAccount 	 = PrmCashAccount
									if (!PrmRollingDateRange entered)
										invoked.CashForecastPeriod						  	 = first CashForecastPeriodBankDayRel.CashForecastPeriod
									else
										invoked.CashForecastPeriod						  	 = first CashForecastPeriodRollingBankDayRel.CashForecastPeriod
									invoked.CashForecastCategory.CashTransactionCategory = PrmCategory
									invoked.Description								  	 = SummarizedTransactionMessage
									if (PrmForecastCreationParameter.CalculationAdjustment entered)
										invoked.ForecastAmount = TotalCategoryDateAmount * (1 + PrmForecastCreationParameter.CalculationAdjustment)
									else
										invoked.ForecastAmount = TotalCategoryDateAmount
									invoked.IsSystemCalculated						  	 = true

							initialize LocalActualBankDayNumber
							
				Set Rules
					Exit Rules
						if ((PrmForecastCreationParameter.HistoricalCalculationOption.DailyAverage
						or   PrmForecastCreationParameter.HistoricalCalculationOption.WeeklyAverage
						or   PrmForecastCreationParameter.HistoricalCalculationOption.MonthlyAverage)
						and  TotalCategoryAmount != 0)
							if (!PrmRollingDateRange entered)
								LocalDateRange			= PrmCashForecast.ForecastDateRange
							else
								LocalEnterpriseGroup	= PrmCashManagementGroup.EnterpriseGroup
								LocalDateRange			= PrmRollingDateRange
								LocalSystemCalendar		= PrmForecastCalendar
								LocalActualDateRange 	= PrmRollingDateRange

								include CalculateCalendarBankDays

							invoke CalculateForecastAverages CashForecastPeriod
								invoked.PrmCashManagementGroup	   = PrmCashManagementGroup
								invoked.PrmCashForecast			   = PrmCashForecast
								invoked.PrmCashManagementAccount   = PrmCashAccount
								invoked.PrmCashTransactionCategory = PrmCategory
								invoked.PrmCategoryAmount		   = TotalCategoryAmount
								invoked.PrmRollingDateRange		   = PrmRollingDateRange
								invoked.PrmDateRange		 	   = LocalDateRange
								invoked.PrmRollingDays			   = LocalRollingDays
								invoked.PrmRollingWeeks			   = LocalRollingWeeks
								invoked.PrmRollingMonths		   = LocalRollingMonths
										
				Instance Rules
					TotalCategoryDateAmount += LineAmount
					TotalCategoryAmount	+= LineAmount

		UpdateCurrencyGainLossLine is an Instance Action
			default label is untranslatable
			restricted
			Parameters
				PrmBaseCurrencyGainLossAmount		is an InternationalAmount
				PrmCompanyCurrencyGainLossAmount	is an InternationalAmount
				PrmLocationCurrencyGainLossAmount	is an InternationalAmount
			
			Action Rules
				CorporateBaseAmount		= PrmBaseCurrencyGainLossAmount
				CompanyCurrencyAmount	= PrmCompanyCurrencyGainLossAmount
				LocationCurrencyAmount  = PrmLocationCurrencyGainLossAmount
				
  		UpdateBankStatementTotal is a Set Action
			restricted
			run in background
			Parameters
				PrmCashManagementGroup		is a CashManagementGroup
				PrmDateRange				is a DateRange
				PrmIncludeUnreconciled		is Boolean
				PrmCashManagementAccount	is a CashManagementAccount

			Parameter Rules
				PrmDateRange
					required
					
				PrmIncludeUnreconciled
					initial value is true
					
			Sort Order
				CashManagementGroup
				StatementDate
				CashManagementAccount
				CashTransactionCategory
				BankStatement
				BankStatementLine
				
			Instance Selection 
				where (CashManagementGroup = PrmCashManagementGroup
				and    StatementDate within PrmDateRange
				and   ((PrmCashManagementAccount	entered
				and     CashManagementAccount = PrmCashManagementAccount)
				or      !PrmCashManagementAccount entered)
				and   ((!PrmIncludeUnreconciled
				and     !BankStatement.StatementStatus.Unreconciled)
				or      PrmIncludeUnreconciled)
				and	   !StatementIntraday)
				
  			Accumulators
				TotalAccountTransactionAmount		
				TotalBaseTransactionAmount
				TotalCompanyTransactionAmount		
				TotalLocationTransactionAmount
				TotalAccountActivityAmount	
				TotalBaseActivityAmount		
				TotalCompanyActivityAmount	
				TotalLocationActivityAmount	
  					
			Action Rules
				Set Rules
					Entrance Rules
						LocalCashManagementGroup = PrmCashManagementGroup
						LocalPeriodDateRange = PrmDateRange
						LocalGeneralLedgerCompany = CashManagementAccount.LegalEntity
						LocalCashManagementAccount = CashManagementAccount
						
						if (PrmCashManagementAccount entered)
							invoke Purge BankStatementTotalByAccountPeriodDateRel
						else
							invoke Purge BankStatementTotalByPeriodDateRel
						
					Exit Rules
						invoke UpdateBankStatementTotalBalanceOnly BankStatement
							invoked.PrmCashManagementGroup		= PrmCashManagementGroup
							invoked.PrmDateRange				= PrmDateRange
							invoked.PrmIncludeUnreconciled		= PrmIncludeUnreconciled
							invoked.PrmCashManagementAccount	= PrmCashManagementAccount
				
				CashManagementAccount Set Rules
					Exit Rules
						LocalCashManagementGroup = PrmCashManagementGroup
						LocalFinancialPeriodDate = StatementDate
						LocalGeneralLedgerCompany = CashManagementAccount.LegalEntity
						LocalCashManagementAccount = CashManagementAccount
						LocalCashTransactionCategory = blank
						
						invoke Update BankStatementTotalRel
							invoked.TransactionType						= 1 
							invoked.CashManagementLocation				= CashManagementAccount.CashManagementLocation
							invoked.FinancialInstitution				= CashManagementAccount.FinancialInstitution
							invoked.AccountEndingBalance				= BankStatement.EndingBalance 
							invoked.AccountAvailableBalance				= BankStatement.ClosingAvailable
							invoked.AccountCurrency						= CashManagementAccount.Currency
							invoked.BaseCurrency						= CashManagementGroup.Currency
							invoked.BaseExchangeRate					= BankStatement.CorporateBaseEndingBalance.EnteredCurrencyRate
							invoked.MultiplyBaseCurrencyRate			= BankStatement.MultiplyBaseCurrencyRate
							invoked.CompanyCurrency						= CashManagementAccount.LegalEntity.Currency
							invoked.CompanyExchangeRate					= BankStatement.CompanyCurrencyEndingBalance.EnteredCurrencyRate
							invoked.MultiplyCompanyCurrencyRate			= BankStatement.MultiplyCompanyCurrencyRate
							invoked.LocationCurrency					= CashManagementAccount.CashManagementLocation.Currency
							invoked.LocationExchangeRate				= BankStatement.LocationCurrencyEndingBalance.EnteredCurrencyRate
							invoked.MultiplyLocationCurrencyRate		= BankStatement.MultiplyLocationCurrencyRate
							invoked.AccountDailyActivityTotal 			= TotalAccountActivityAmount
							invoked.BaseDailyActivityTotal 				= TotalBaseActivityAmount
							invoked.CompanyDailyActivityTotal 			= TotalCompanyActivityAmount
							invoked.LocationDailyActivityTotal 			= TotalLocationActivityAmount
							initialize invoked.AccountTransactionAmount
							initialize invoked.BaseTransactionAmount
							initialize invoked.CompanyTransactionAmount
							initialize invoked.LocationTransactionAmount
							
				CashTransactionCategory Set Rules
					Exit Rules
						LocalCashManagementGroup = PrmCashManagementGroup
						LocalFinancialPeriodDate = StatementDate
						LocalGeneralLedgerCompany = CashManagementAccount.LegalEntity
						LocalCashManagementAccount = CashManagementAccount
						LocalCashTransactionCategory = CashTransactionCategory
						
						invoke Update BankStatementTotalRel
							invoked.TransactionType						= 2 
							invoked.CashManagementLocation				= CashManagementAccount.CashManagementLocation
							invoked.FinancialInstitution				= CashManagementAccount.FinancialInstitution
							invoked.AccountTransactionAmount			= TotalAccountTransactionAmount
							invoked.AccountCurrency						= CashManagementAccount.Currency
							invoked.BaseTransactionAmount				= TotalBaseTransactionAmount
							invoked.BaseCurrency						= CashManagementGroup.Currency
							invoked.BaseExchangeRate					= BankStatement.CorporateBaseEndingBalance.EnteredCurrencyRate
							invoked.MultiplyBaseCurrencyRate			= BankStatement.MultiplyBaseCurrencyRate
							invoked.CompanyTransactionAmount			= TotalCompanyTransactionAmount
							invoked.CompanyCurrency						= CashManagementAccount.LegalEntity.Currency
							invoked.CompanyExchangeRate					= BankStatement.CompanyCurrencyEndingBalance.EnteredCurrencyRate
							invoked.MultiplyCompanyCurrencyRate			= BankStatement.MultiplyCompanyCurrencyRate
							invoked.LocationTransactionAmount			= TotalLocationTransactionAmount
							invoked.LocationCurrency					= CashManagementAccount.CashManagementLocation.Currency
							invoked.LocationExchangeRate				= BankStatement.LocationCurrencyEndingBalance.EnteredCurrencyRate
							invoked.MultiplyLocationCurrencyRate		= BankStatement.MultiplyLocationCurrencyRate
							initialize invoked.AccountEndingBalance
							initialize invoked.BaseEndingBalance
							initialize invoked.CompanyEndingBalance
							initialize invoked.LocationEndingBalance
							
				Instance Rules
  					TotalAccountTransactionAmount	+= LineAmount	
  					TotalBaseTransactionAmount		+= CorporateBaseAmount	
  					TotalCompanyTransactionAmount	+= CompanyCurrencyAmount	
  					TotalLocationTransactionAmount	+= LocationCurrencyAmount
  					TotalAccountActivityAmount		+= LineAmount	
  					TotalBaseActivityAmount			+= CorporateBaseAmount	
  					TotalCompanyActivityAmount		+= CompanyCurrencyAmount	
  					TotalLocationActivityAmount		+= LocationCurrencyAmount
  		
  		UpdateProcessingRuleGroup is a Set Action
			restricted
			Parameters
				CashManagementGroup
  				
  			Parameter Rules
  				CashManagementGroup	required
  			
  			Sort Order
  				CashManagementGroup
				CashManagementAccount
				BankStatement
				BankStatementLine
  			
			Instance Selection
  				where (CashManagementGroup = CashManagementGroup
  				and	   !CashTransactionProcessingRuleGroup entered
				and    CashTransactionProcessingRule entered)	
  			
  			Action Rules
  				Instance Rules
  					CashTransactionProcessingRuleGroup = "DEFAULT"

		UpdateBankStatementLineAmountTotal is a Set Action	
			restricted
			Parameters
				PrmCashManagementGroup		is a CashManagementGroup
				PrmCashManagementAccount	is a CashManagementAccount
				PrmDateRange				is a DateRange

			Parameter Rules
				PrmCashManagementGroup	required
																		
			Local Fields
								 
			Instance Selection
				where (CashManagementGroup			= PrmCashManagementGroup
				and   ((PrmCashManagementAccount	entered
				and     CashManagementAccount 		= PrmCashManagementAccount)
				or      PrmCashManagementAccount   !entered)
				and   ((PrmDateRange				entered
				and	    StatementDate 				within PrmDateRange)
				or	    PrmDateRange			   !entered))
				
			Sort Order
				CashManagementGroup
				CashManagementAccount
				StatementDate
				BankStatement
				BankStatementLine.LineNumber
				BankStatementLine.SequenceNumber
				
  			Accumulators
				LocalLineAmountTotal
				
			Action Rules
	  			BankStatement Set Rules
	  				Exit Rules
	  					invoke UpdateLineAmountTotal BankStatement
	  						invoked.PrmLineAmountTotal = LocalLineAmountTotal 		
	  					
	  			Instance Rules
	  				LocalLineAmountTotal += LineAmount
	  									
		DeleteLineForBankStatement is a Set Action
			default label is untranslatable
			restricted
			Parameters
				PrmCashManagementGroup		is a CashManagementGroup
				PrmCashManagementAccount	is a CashManagementAccount
				PrmBankStatement			is like BankStatement
					
			Parameter Rules
				PrmCashManagementGroup		required
				PrmCashManagementAccount	required
				PrmBankStatement			required

			Instance Selection
				where (CashManagementGroup			= PrmCashManagementGroup
				and    CashManagementAccount		= PrmCashManagementAccount
				and    BankStatement				= PrmBankStatement)

			Action Rules
				Instance Rules
					invoke Delete
