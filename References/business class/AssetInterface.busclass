AssetInterface is a BusinessClass
    owned by am
    prefix is AMI
    classic name is AMINTER

    Ontology
        symbolic key is AssetInterface
            classic set name is AMISET1
            classic name is SEQ-NUMBER

    Patterns
        implements StaticJava
        disable AuditIndex

    Persistent Fields
        InterfaceSystem                   			is a GeneralLedgerSystemCode
            classic name is SYSTEM
        AssetTemplate
        ItemQuantity
        TagNumber
            classic name is TAG-NBR
        AssetGroup
        AssetDescription                   			is a Description
            classic name is ASSET-DESC
        PurchaseDate                       			is an ExchangeDate
        InServiceDate                      			is Date
            classic name is INSRV-DATE
        PostingDate
        AssetType
            classic name for AssetType.Type 		is ASSET-TYPE
            classic name for AssetType.SubType		is SUB-TYPE
        AssetAccountingUnitGroup
        	default label is "AssetDimensionGroup"
            classic name is AU-GROUP
        AssetAccountingUnit						 	is a FinanceCodeBlockNoAccountFull
        	default label is "DefaultTransactionDimensions"
            classic name for AssetAccountingUnit.AccountingUnit is ACCT-UNIT
      	AssetProject	 							is a FinanceCodeBlockProjectOnly
      		default label is "AssetProject"
        	classic name for AssetProject.Project is ACTIVITY
        DepreciationExpenseProject					is a FinanceCodeBlockProjectOnly
      		default label is "DepreciationExpenseProject"
            classic name for DepreciationExpenseProject.Project is DEP-EXP-ACTVTY
        Combine
        ItemNumber                         			is an AssetItemNumber
            classic name is ITEM-NBR
        BaseItemCost                       			is a FinanceCurrencyAmount
            classic name is ITEM-COST-BASE
        BaseItemTax                        			is a FinanceCurrencyAmount
            classic name is ITEM-TAX-BASE
        TransactionItemCost                			is a CurrencyAmount
        	precision is Currency.NumberOfDecimals
        OriginalCost                				is a CurrencyAmount
        	precision is Currency.NumberOfDecimals
        TransactionItemTax                 			is a CurrencyAmount
        	precision is Currency.NumberOfDecimals
        BaseNumberOfDecimals
            classic name is BASE-ND
        TransactionNumberOfDecimals        			is a CurrencyNumberOfDecimals
            classic name is TRAN-ND
        Currency									is a FromCurrency
            classic name is CURRENCY-CODE
        ModelNumber
        SerialNumber
        HoldAsset                          			is Boolean
            classic name is HOLD-AM
        CreationDate                       			is TimeStamp
        CreatedBy                          			is an Operator 
        	holds pii
            classic name is CREATOR-ID
        AssetCategory
        AssetLocation
            classic name is LOCATION-NAME
        AssetDivision
            classic name is DIVISION
        AssetAccountGroup
            classic name is ACCT-GRP
        WorkInProcess                      			is Boolean
            classic name is WORK-IN-PROC
        Simulated                          			is Boolean
        TaxExempt                          			is Boolean
        Used                               			is Boolean
        BarCode                            			is an AssetBarCode
        AssetItemType                      			is AlphaUpper size 1
            classic name is ITEM-TYPE
            States
                Parent value is "P"
                Child  value is "C"
        ProductCategoryCode                			is AlphaUpper size 30
            classic name is PROD-CAT-CODE
        ParentAssetBarCode                 			is a BarCode
            classic name is ASSET-BAR-CODE
        LocationDetail                     			is an AssetLocationDetail
            classic name is ITEM-LOC-DTL
        InvoiceAndPurchaseOrderInformation
            classic name for InvoiceAndPurchaseOrderInformation.InvoiceCompany is INV-COMPANY
            classic name for InvoiceAndPurchaseOrderInformation.DistributionSequence is DIST-SEQ-NBR
            classic name for InvoiceAndPurchaseOrderInformation.PurchaseOrder is PO-NBR

        POAssetObjectID                    			is an ObjId
            classic name is PO-AST-OBJ-ID
		OriginatingAssetInterfaceOptions			is an AssetInterfaceOptions
		OriginatingGLTransactionDetail				is a GLTransactionDetail
			delete ignored
		DistributionCodeBlock						is a FinanceCodeBlock
        Description
        OriginatingAssetInterface					is an AssetInterface
        	delete ignored
		AssetGuidelineClass
		OriginatingAssetCapitalTransaction			is a AssetCapitalTransaction
			delete ignored
		InterfaceSequenceNumber  					is Numeric size 8
		PostWIPToProject 							is Boolean

	Transient Fields
		TransientSystemCode							is like GeneralLedgerSystemCode
			derive value from ThisInstanceRel.EditSystem
            States
                Payables value is "AP"
                Project  value is "PS"
		OpenPeriodAdjust 							is Boolean
		InterfaceOptionsAppendToAsset				is an Asset
			derive value from OriginatingAssetInterfaceOptions.AppendToAsset
        SplitFromAssetInterface						is like AssetInterface
        BypassNegativeRateEdit
   		TransientAssetInterfaceReference			is BusinessObjectReference
		TransientProjectInterfaceControl			is like AssetInterfaceOptions
		TransNoCombineEntered							is Boolean
		TransientSplitQuantity						is like ItemQuantity
		TransientAsset                              is like Asset
			derive value from LocalAppendToAsset
		TransientItemParameter                      is like AssetItem
			derive value from LocalAssetItem
		TransientBypassProjectEdits                 is a BypassProjectEdits
		TransientBypassStructureRelationEdit		is a BypassStructureRelationEdit

    Derived Fields

		TransactionItemCostCurrency is a MessageField
			"<Currency>__<TransactionItemCost>"

        AssetTemplateDescription 	is a StringField
            type is Alpha size 30
            classic name is TEMPLATE-DESC
            AssetTemplate.Description

       	EditSystem					is a DerivedField
       		type is like GeneralLedgerSystemCode
       		if (InterfaceSystem = "AP"
       		or (InterfaceSystem = "AM"
       		and InvoiceAndPurchaseOrderInformation entered))
       			return "AP"
       		else
       		if (InterfaceSystem = "PS"
       		or (InterfaceSystem = "AM"
       		and AssetProject entered))
       			return "PS"

		DerivedRoundTo is a DerivedField
    		type is Decimal 5.4
    		restricted
    		if (Currency.NumberOfDecimals = 2)
    			return .01
    		else
    		if (Currency.NumberOfDecimals = 0)
    			return 1
    		else
    		if (Currency.NumberOfDecimals = 3)
    			return .001
    		else
    		if (Currency.NumberOfDecimals = 4)
    			return .0001

		RoundedCurrencyAmount is a DerivedField
			type is like InternationalAmount
    		restricted
    		if (LocalTransactionItemCost entered)
	    		RoundedCurrencyAmount	      = LocalTransactionItemCost
	    		round RoundedCurrencyAmount to nearest DerivedRoundTo
	    		return RoundedCurrencyAmount

	    HoldDisplay is a DerivedField
	    	type is Alpha 10
	    	if (HoldAsset)
	    		return "Yes"
	    	else
	    		return "No"

       	TransactionItemCostSum is a DerivedField
       		type is like CurrencyAmount
       		return sum InterfaceSplitRecordsRel.TransactionItemCost

		DerivedTransactionAmount	is a DerivedField
			type is like InternationalAmount
			restricted
			if (LocalProjectCurrency2 = LocalProjectCurrency)
				return LocalTransactionAmount2
			else
				CurrencyWork.FromCurrency           			= LocalProjectCurrency2
				CurrencyWork.BaseAmount.ToCurrency 				= LocalProjectCurrency
				CurrencyWork.TransactionAmount  	 			= LocalTransactionAmount2
				return CurrencyWork.BaseAmount.OutputCurrencyAmount

		DerivedConvertedAmount	is a DerivedField
			type is like InternationalAmount
			restricted
			if ((OriginatingAssetInterfaceOptions.SummaryType
			and OriginatingAssetInterfaceOptions.AssetCurrency = LocalProjectCurrency2)
			or (OriginatingAssetInterfaceOptions.PostingType
			and ((LocalOvrdCurrency entered
			and LocalProjectCurrency2 = LocalOvrdCurrency)
			or LocalOvrdCurrency not entered)))
				return LocalFromAmount
			else
				CurrencyWork.FromCurrency					= LocalProjectCurrency2
				if (LocalOvrdCurrency entered)
					CurrencyWork.BaseAmount.ToCurrency		= LocalOvrdCurrency
				else
					if (OriginatingAssetInterfaceOptions.SummaryType)
						CurrencyWork.BaseAmount.ToCurrency		= OriginatingAssetInterfaceOptions.AssetCurrency
					else
						return LocalFromAmount
				CurrencyWork.TransactionAmount  			= LocalFromAmount
				return CurrencyWork.BaseAmount.OutputCurrencyAmount

		DerivedAssetProject is a DerivedField
       		type is like Project
			if (OriginatingAssetInterfaceOptions entered
			and OriginatingAssetInterfaceOptions.SummaryType)
				return OriginatingAssetInterfaceOptions.Project
			else
				return AssetProject

	Local Fields
		LocalAccountingEntity			is like AccountingEntity
		LocalAccountingUnit				is like AccountingUnit
  		LocalProject						is like Project
  		LocalFinanceDimension1				is like FinanceDimension1
  		LocalFinanceDimension2				is like FinanceDimension2
  		LocalFinanceDimension3				is like FinanceDimension3
  		LocalFinanceDimension4				is like FinanceDimension4
   		LocalFinanceDimension5				is like FinanceDimension5
  		LocalFinanceDimension6				is like FinanceDimension6
  		LocalFinanceDimension7				is like FinanceDimension7
  		LocalFinanceDimension8				is like FinanceDimension8
  		LocalFinanceDimension9				is like FinanceDimension9
  		LocalFinanceDimension10				is like FinanceDimension10
		LocalFund 							is an AssetFundField
		SavedFund 							is an AssetFundField

		LocalWIPAccount					is a FinanceCodeBlockFull
		LocalClearingAccount			is a FinanceCodeBlockFull
		LocalAmount						is an InternationalAmount
		LocalAssetTemplate				is an AssetTemplate
		CompletionMessage				is Alpha 150
		LocalBook						is a Book
		I1								is like ItemQuantity
		I2								is Numeric 4
		LocalCombineSize				is Numeric 2
		LocalCombine					is like Combine
		LocalCompany					is like Company
		LocalSplitAndDerive				is Boolean
		LocalTransactionItemCost		is an InternationalAmount
		SplitRecordOriginalCost			is an InternationalAmount
		LocalTransactionItemTax			is an InternationalAmount
		LocalBaseItemCost				is an InternationalAmount
		LocalBaseItemTax				is an InternationalAmount
		LocalTotalTransactionItemCost	is an InternationalAmount
		LocalTotalTransactionItemTax	is an InternationalAmount
		LocalTotalBaseItemCost			is an InternationalAmount
		LocalTotalBaseItemTax			is an InternationalAmount
		LocalTransactionAmount			is an InternationalAmount
		BypassCompanyCheck				is Boolean
		LocalComputeOption				is AlphaUpper 1
	        States
    	        Yes         value is "Y"
        	    No          value is "N"
		NewAsset						is an Asset view
		NewAssetItem					is an AssetItem view
		LocalAssetItem					is like AssetItem
		SavedAsset						is an Asset
		LocalAsset						is an Asset
	 	LocalBarCode					is a BarCode

		LocalLife						is like Life
		LocalMethod 					is like Method
        LocalAssetCategory				is like AssetCategory
        LocalAssetInterfaceOptions		is an AssetInterfaceOptions
        LocalAssetLocation				is like AssetLocation
        LocalAssetDivision				is like AssetDivision
        LocalAssetAccountingUnitGroup	is an AssetAccountingUnitGroup
        LocalAssetAccountingUnit	  	is a FinanceCodeBlockNoAccountFull
        LocalDepreciationExpenseProject is a FinanceCodeBlockProjectOnly
        LocalAssetAccountGroup			is like AssetAccountGroup
        LocalWorkInProcess              is Boolean
        LocalSimulated                  is Boolean
        LocalTaxExempt                  is Boolean
        LocalUsed                       is Boolean
	    LocalAssetDescription			is like Description
	    LocalAssetGroup					is like AssetGroup
	    LocalCurrency					is like Currency
	    LocalTagNumber					is like TagNumber
	    LocalPostingDate				is like PostingDate
	    LocalAssetType					is like AssetType
      	LocalAssetProject	 			is a FinanceCodeBlockProjectOnly
		LocalConvention					is like Convention
		LocalActive         			is a Active
		LocalLifeInYears			 	is like LifeInYears
		LocalBusinessPercent			is like BusinessPercent
		LocalReplacementMethod			is like Method
		LocalInsuranceMethod			is like Method
		LocalPersonalUseCode			is like PersonalUseCode
		LocalAssetTaxCreditTable		is like AssetTaxCreditTable
		LocalInServiceDate				is Date
		LocalJournalizeGroup			is like JournalizeGroup
		LocalProjectCurrency			is like Currency
		Counter							is Numeric 3

		NumberOfFunds 					is Numeric 3
		FundCount						is Numeric 3
		CheckFundCurrency				is Boolean
		SplitQuantity					is Numeric 3
		TotalAllocated					is an InternationalAmount
		LocalFundAmount					is an InternationalAmount
		LocalPercentContribution		is Percent size 9.6
		LocalAssetInterfaceFund			is like AssetInterfaceFund
		LocalOriginatingAssetInterface	is an AssetInterface
		LocalAssetInterface				is an AssetInterface
		AssetInterfaceView				is an AssetInterface view
		LocalInterfaceRecord			is BusinessObjectReference
		ActionCode						is Numeric 1
	        States
    	        ProjectInterfaceDelete	value is 1
		FromRebalanceRelease			is Boolean
		LocalTransactionAmount2			is a CurrencyAmount
		LocalProjectCurrency2			is like Currency
		LocalFromAmount					is like InternationalAmount
		LocalOvrdCurrency				is like Currency
		CurrencyWork					is a FromCurrencyExchangeGroup
		LocalTransactionItemCost2		is a CurrencyAmount
		LocalAssetGuidelineClass		is an AssetGuidelineClass
		LocalBookRegulation				is like BookRegulation
		LocalAppendToAsset              is an Asset
		LocalCompanyGroup				is a GeneralLedgerCompanyGroup
		LocalProgram                    is Alpha size 20
		LocalQuantity                   is Numeric size 8
		ComputeDepreciation             is Boolean
		LocalAction                     is Alpha size 20





	Context Fields
		FinanceEnterpriseGroup
		PurchaseDateRange				is a DateRange
		InServiceDateRange				is a DateRange
		PostingDateRange				is a DateRange



	Relations
		ProjectAssetInterfaceRel
			one-to-many relation to ProjectAssetInterface
			Field Mapping uses ByInterfaceRecord
				related.FinanceEnterpriseGroup 	= FinanceEnterpriseGroup
				related.InterfaceRecord			= reference to this instance

		AssetTemplateBooksRel is a AssetTemplateBook set

		LocalProjectAssetInterfacesRel
			one-to-many relation to ProjectAssetInterface
			Field Mapping uses ByInterfaceRecord
				related.FinanceEnterpriseGroup 	= FinanceEnterpriseGroup
				related.InterfaceRecord			= LocalInterfaceRecord

		LocalAssetTemplateBooksRel
			one-to-many relation to AssetTemplateBook
			Field Mapping uses symbolic key
				related.FinanceEnterpriseGroup	= Company.AccountingEntity.FinanceEnterpriseGroup
				related.AssetTemplate			= LocalAssetTemplate

		LocalAssetBookRel
			one-to-one relation to AssetBook
			Field Mapping uses symbolic key
				related.FinanceEnterpriseGroup	= Company.AccountingEntity.FinanceEnterpriseGroup
				related.Asset					= LocalAsset
				related.Book					= LocalBook

		BookCalendarRel
			one-to-one relation to BookCalendar
			Field Mapping uses Set5
				related.Book					= LocalBook
				related.Company					= Company

		ThisInstanceRel
			one-to-many relation to AssetInterface
			Field Mapping uses symbolic key
				related.Company					= Company
			Instance Selection
				where (related.AssetInterface  	= AssetInterface)

		InterfaceSplitRecordsRel
			one-to-many relation to AssetInterface
			Field Mapping uses symbolic key
				related.Company								= Company
			Instance Selection
				where (related.AssetInterface				= AssetInterface
				or (related.OriginatingAssetInterface	   != blank
				and related.OriginatingAssetInterface		= OriginatingAssetInterface))

		RelatedSplitRecordsRel
			one-to-many relation to AssetInterface
			Field Mapping uses ByTemplateCombine
				related.Company								= Company
				related.AssetTemplate						= AssetTemplate
			Instance Selection
				where (related.AssetInterface				!= AssetInterface
				and   (related.OriginatingAssetInterface	entered
				and    related.OriginatingAssetInterface	= OriginatingAssetInterface))

		AssetInterfaceRecordsRel
			one-to-many relation to AssetInterface
			Field Mapping uses symbolic key

		DuplicateBarCodeRel
			one-to-many relation to AssetInterface
			Field Mapping uses symbolic key
				related.Company					= Company
			Instance Selection
				where (related.BarCode entered
				and    related.BarCode			= BarCode
				and    related.AssetInterface  != AssetInterface)

		POAssetItemsRel
			one-to-many relation to AssetItem
			Field Mapping uses Set2
            	related.FinanceEnterpriseGroup	= Company.AccountingEntity.FinanceEnterpriseGroup
				related.Asset					= SavedAsset
			Instance Selection
				where (related.InvoiceAndPurchaseOrderInformation.InvoiceCompany = InvoiceAndPurchaseOrderInformation.InvoiceCompany
				and related.InvoiceAndPurchaseOrderInformation.PurchaseOrder = InvoiceAndPurchaseOrderInformation.PurchaseOrder)

		POLineAssetItemsRel
			one-to-many relation to AssetItem
			Field Mapping uses Set2
            	related.FinanceEnterpriseGroup	= Company.AccountingEntity.FinanceEnterpriseGroup
				related.Asset					= SavedAsset
			Instance Selection
				where (related.InvoiceAndPurchaseOrderInformation.InvoiceCompany = InvoiceAndPurchaseOrderInformation.InvoiceCompany
				and related.InvoiceAndPurchaseOrderInformation.PurchaseOrder = InvoiceAndPurchaseOrderInformation.PurchaseOrder
				and related.InvoiceAndPurchaseOrderInformation.PurchaseOrderLine = InvoiceAndPurchaseOrderInformation.PurchaseOrderLine)

		DuplicateAssetItemBarCodeRel
			one-to-many relation to AssetItem
			Field Mapping uses Set4
            	related.FinanceEnterpriseGroup	= Company.AccountingEntity.FinanceEnterpriseGroup
				related.BarCode	= BarCode
			Instance Selection
				where (related.BarCode entered)

		OldAssetBarCodeRel
			one-to-one relation to AssetBarCode
			Field Mapping uses symbolic key
				related.FinanceEnterpriseGroup	= Company.AccountingEntity.FinanceEnterpriseGroup
				related.AssetBarCode 			= LocalBarCode

		RecordsForCompanyAndTemplateRel
			one-to-many relation to AssetInterface
			Field Mapping uses symbolic key
				related.Company					= Company
			Instance Selection
				where (related.AssetTemplate 	= AssetTemplate)

		CompanyVendorsRel is a Vendor set

		PayablesInvoicesRel
        	one-to-many relation to PayablesInvoice
            Field Mapping uses Set6
            	related.Company               	= Company
                related.Vendor			      	= InvoiceAndPurchaseOrderInformation.Vendor

		PurchaseOrderCommentsRel
			one-to-many relation to PurchaseOrderComment
			Field Mapping uses 		ByCommentType
				related.Company			= InvoiceAndPurchaseOrderInformation.InvoiceCompany
				related.PurchaseOrder	= InvoiceAndPurchaseOrderInformation.PurchaseOrder
				related.CommentType		= "4"

		PurchaseOrderLineCommentsRel
			one-to-many relation to PurchaseOrderLineComment
			Field Mapping uses 		ByCommentType
				related.Company			= InvoiceAndPurchaseOrderInformation.InvoiceCompany
				related.PurchaseOrder	= InvoiceAndPurchaseOrderInformation.PurchaseOrder
				related.PurchaseOrderLine = InvoiceAndPurchaseOrderInformation.PurchaseOrderLine
				related.CommentType		= "4"

       	AssetRepairImportsRel
       		one-to-many relation to AssetRepairImport
       		Field Mapping uses Set2
            	related.Company               	= Company

		AssetTypeRel
			one-to-one relation to AssetType
			Field Mapping uses symbolic key
				related.Company					= Company
				related.AssetType.Type			= AssetType.Type
				related.AssetType.SubType		= AssetType.SubType

		SavedAssetBookRel
			one-to-one relation to AssetBook
			Field Mapping uses symbolic key
				related.FinanceEnterpriseGroup	= Company.AccountingEntity.FinanceEnterpriseGroup
				related.Asset					= SavedAsset
				related.Book					= LocalBook

		ValidTemplatesRel
			one-to-many relation to AssetTemplate
			Field Mapping uses symbolic key


		GeneralLedgerSystemCodeRel
			one-to-one relation to GeneralLedgerSystemCode
			Field Mapping uses symbolic key
				related.FinanceEnterpriseGroup      = FinanceEnterpriseGroup
				related.GeneralLedgerSystemCode     = "AM"

		CombinedAssetInterfaceRel
			one-to-many relation to AssetInterface
			Field Mapping uses ByTemplateCombine
				related.Company			= LocalCompany
				related.AssetTemplate	= LocalAssetTemplate
				related.Combine 		= LocalCombine

        PayablesInvoices2Rel
            classic name is APINVOICE2
            one-to-one relation to PayablesInvoice
            required
            Field Mapping uses ByCompanyVendorInvoice
                related.Company         		= InvoiceAndPurchaseOrderInformation.InvoiceCompany
                related.Vendor          		= InvoiceAndPurchaseOrderInformation.Vendor
                related.Invoice        			= InvoiceAndPurchaseOrderInformation.PayablesInvoice.Invoice
                related.Suffix        			= InvoiceAndPurchaseOrderInformation.PayablesInvoice.Suffix
                related.CancelSequence 			= blank
				related.InvoiceDate				= InvoiceAndPurchaseOrderInformation.PayablesInvoice.InvoiceDate	

		NewTemplateRel
			one-to-many relation to AssetTemplate
			Field Mapping uses Set2
				related.FinanceEnterpriseGroup  = FinanceEnterpriseGroup
				related.Company					= LocalCompany
				related.AssetTemplate			= LocalAssetTemplate

		NewProjectInterfaceControlRel
			one-to-many relation to AssetInterfaceOptions
			Field Mapping uses ByCompany
				related.FinanceEnterpriseGroup  = FinanceEnterpriseGroup
				related.AssetCompany			= LocalCompany
				related.AssetInterfaceOptions	= LocalAssetInterfaceOptions

		NewAssetTypeRel
			one-to-many relation to AssetType
			Field Mapping uses symbolic key
				related.Company					= LocalCompany
				related.AssetType				= LocalAssetType

		NewAssetAccountGroupRel
			one-to-many relation to AssetAccountGroup
			Field Mapping uses symbolic key
				related.Company					= LocalCompany
				related.AssetAccountGroup		= LocalAssetAccountGroup

		NewAssetDimensionGroupRel
			one-to-one relation to AssetAccountingUnitGroup
			Field Mapping uses symbolic key
				related.Company					 	= LocalCompany
				related.AssetAccountingUnitGroup 	= LocalAssetAccountingUnitGroup

		NewAssetLocationRel
			one-to-many relation to AssetLocation
			Field Mapping uses symbolic key
				related.FinanceEnterpriseGroup  = FinanceEnterpriseGroup
				related.AssetLocation			= LocalAssetLocation

		NewAssetDivisionRel
			one-to-many relation to AssetDivision
			Field Mapping uses symbolic key
				related.FinanceEnterpriseGroup  = FinanceEnterpriseGroup
				related.AssetDivision			= LocalAssetDivision

		AssetInterfaceFundsRel
			one-to-many relation to AssetInterfaceFund
			Field Mapping uses symbolic key
				related.Company					= Company
				related.AssetInterface			= AssetInterface

		AssetInterfaceFundRel
			one-to-one relation to AssetInterfaceFund
			Field Mapping uses ByInterfaceFund
				related.AssetInterface			= AssetInterface
				related.AccountingEntity		= LocalAccountingEntity
				related.AccountingUnit			= LocalAccountingUnit
				related.Project					= LocalProject
				related.FinanceDimension1		= LocalFinanceDimension1
				related.FinanceDimension2		= LocalFinanceDimension2
				related.FinanceDimension3		= LocalFinanceDimension3
				related.FinanceDimension4		= LocalFinanceDimension4
				related.FinanceDimension5		= LocalFinanceDimension5
				related.FinanceDimension6		= LocalFinanceDimension6
				related.FinanceDimension7		= LocalFinanceDimension7
				related.FinanceDimension8		= LocalFinanceDimension8
				related.FinanceDimension9		= LocalFinanceDimension9
				related.FinanceDimension10		= LocalFinanceDimension10



		FromInterfaceFundsRel
			one-to-many relation to AssetInterfaceFund
			Field Mapping uses symbolic key
				related.Company					= Company
				related.AssetInterface			= SplitFromAssetInterface

		AssetFundControlRel
			one-to-one relation to AssetFundControl
			Field Mapping uses symbolic key
				related.AssetFundControl		= FinanceEnterpriseGroup

		PayablesInvoiceDistributionRel
			one-to-one relation to PayablesInvoiceDistribution
			Field Mapping uses symbolic key
				related.Company       				= InvoiceAndPurchaseOrderInformation.InvoiceCompany
				related.PayablesInvoice				= InvoiceAndPurchaseOrderInformation.PayablesInvoice
				related.PayablesInvoiceDistribution	= InvoiceAndPurchaseOrderInformation.DistributionSequence

		PayablesInvoiceDetailRel
            one-to-many relation to PayablesInvoiceDetail
            Field Mapping uses symbolic key
                related.Company 					= InvoiceAndPurchaseOrderInformation.InvoiceCompany
                related.PayablesInvoice				= InvoiceAndPurchaseOrderInformation.PayablesInvoice
				related.PurchaseOrder 				= InvoiceAndPurchaseOrderInformation.PurchaseOrder
				related.PurchaseOrderLine			= InvoiceAndPurchaseOrderInformation.PurchaseOrderLine

		AssetTemplatesRel
			one-to-many relation to AssetTemplate
			Field Mapping uses symbolic key
				related.FinanceEnterpriseGroup 		= FinanceEnterpriseGroup

		GeneralLedgerCompanyRel
			one-to-one relation to GeneralLedgerCompany
			Field Mapping uses symbolic key
				related.Company		= Company

		GuidelineClassRegulationsRel
			one-to-many relation to AssetGuidelineClassRegulation
			Field Mapping uses ByEffectiveDate
				related.FinanceEnterpriseGroup	= FinanceEnterpriseGroup
				related.AssetGuidelineClass		= LocalAssetGuidelineClass
                related.BookRegulation          = LocalBookRegulation
			Instance Selection
				where (related.EffectiveDate 	<= LocalInServiceDate
				and related.Active = true)

		AssetGuidelineClassRel
			one-to-many relation to AssetGuidelineClass
			Field Mapping uses symbolic key
				related.FinanceEnterpriseGroup		= FinanceEnterpriseGroup

		GuidelineClassRel
			one-to-many relation to AssetGuidelineClass
			Field Mapping uses symbolic key
				related.FinanceEnterpriseGroup		= actor.context.FinanceEnterpriseGroup

		AssetItemRel
            classic name is AMASTITEM
            one-to-one relation to AssetItem
            Field Mapping uses symbolic key
            	related.FinanceEnterpriseGroup	= FinanceEnterpriseGroup
				related.Asset					= TransientAsset
				related.AssetItem               = TransientItemParameter


		AssetItemsRel
            classic name is AMASTITEM
            one-to-many relation to AssetItem
            Field Mapping uses symbolic key
            	related.FinanceEnterpriseGroup	= FinanceEnterpriseGroup
				related.Asset					= OriginatingAssetInterfaceOptions.AppendToAsset

		GLTransactionDetailRel
			one-to-one relation to GLTransactionDetail
			Field Mapping uses symbolic key
				related.GLTransactionDetail 		= OriginatingGLTransactionDetail


	Conditions
		AllowSplitAction
			restricted
			when (!RebalanceError
			and AllowSplitNoCombine
			and AllowSplitAndRebalance
			and ItemQuantity > 1
			and !CapitalizationUpgradeInProgress)

		HasRelatedSplitRecords
			restricted
			when (RelatedSplitRecordsRel exists)

		AllowSplitAndRebalance
			restricted
			when (Company.AllowDistributionSplitting
			and ItemQuantity > 1
			and (!HasRelatedSplitRecords)
			and !CapitalizationUpgradeInProgress)

		IsLastRecord
			restricted
			when (SplitRecordsCreatedDisplay
			and	instance count of InterfaceSplitRecordsRel = 1)

		AllowOnlineDelete
			restricted
			when (!IsLastRecord
			and !HasWIPAndClearingTransactions
			and !CapitalizationUpgradeInProgress)

		AllowUpdateCompany
			restricted
			when (!RebalanceError
			and !HasAssetInterfaceOptions
			and !SplitRecordsCreatedDisplay
			and !CapitalizationUpgradeInProgress)

		AllowReleaseCompute
			restricted
			when (!RebalanceError
			and !HasCombine
			and !AppendsExistingAsset
			and !CapitalizationUpgradeInProgress)

		AllowCombineRelease
			restricted
			when (!RebalanceError
			and HasCombine)

		AllowReleaseRebalance
			when (RebalanceError
			and OriginatingAssetInterface entered
			and HasWIPAndClearingTransactions
			and !CapitalizationUpgradeInProgress)

		AllowReleaseRebalanceNoWIP
			when (RebalanceError
			and OriginatingAssetInterface entered
			and !HasWIPAndClearingTransactions
			and !CapitalizationUpgradeInProgress)

		AllowTransferAction
			restricted
			when (!RebalanceError
			and HasAssetInterfaceOptions
			and !CapitalizationUpgradeInProgress)

		AllowSplitNoCombine
			restricted
			when (Company.AllowDistributionSplitting
			and   Combine not entered
			and  (AllowSplitAndRebalance))


		AllowSplitWithCombine
			restricted
			when (Company.AllowDistributionSplitting
			and   Combine entered
			and ItemQuantity > 1
			and (AllowSplitAndRebalance)
			and !CapitalizationUpgradeInProgress)

		AllowProjectInterfaceDelete
			restricted
			when (InterfaceSystem = "PS"
			and HasWIPAndClearingTransactions
			and !RebalanceError
			and !CapitalizationUpgradeInProgress)

		WithinPurchaseDateRange
			restricted
			when (PurchaseDateRange not entered
			or   (PurchaseDateRange entered
			and   PurchaseDate within PurchaseDateRange))

		WithinInServiceDateRange
			restricted
			when (InServiceDateRange not entered
			or   (InServiceDateRange entered
			and   InServiceDate within InServiceDateRange))

		WithinPostingDateRange
			restricted
			when (PostingDateRange not entered
			or   (PostingDateRange entered
			and   PostingDate within PostingDateRange))

		WithinDateRange
			restricted
			when (WithinPurchaseDateRange
			and   WithinInServiceDateRange
			and   WithinPostingDateRange)

        FromProjects
        	restricted
            classic name is AC-RECORD
            when (InterfaceSystem = "PS")

		AppendToAssetIsReleased
			restricted
			when (SavedAsset.Status.Released)

        FromProjectCapitalization
            when (InterfaceSystem = "PS")

        HasAssetInterfaceOptions
        	restricted
        	when (OriginatingAssetInterfaceOptions entered)

        HasProject
        	restricted
            classic name is ACTIVITY
            when (AssetProject.Project entered)

        HasInvoice
        	restricted
        	when (PayablesInvoices2Rel exists)

        ProjectAppendsToAsset
        	restricted
        	when (FromProjects
        	and OriginatingAssetInterfaceOptions.AppendToAsset entered)

        AppendsToReleasedAsset
        	restricted
        	when (FromProjects
        	and OriginatingAssetInterfaceOptions.AppendToAsset entered
			and OriginatingAssetInterfaceOptions.AppendToAsset.Status.Released)

    	AppendsToReleasedOrAdjustedAsset
        	restricted
        	when (FromProjects
        	and OriginatingAssetInterfaceOptions.AppendToAsset entered
			and ((OriginatingAssetInterfaceOptions.AppendToAsset.Status.Released)
			or 	(OriginatingAssetInterfaceOptions.AppendToAsset.Status.PostRelease
			and OriginatingAssetInterfaceOptions.AppendToAsset.AssetProcess.Adjustment
			and OriginatingAssetInterfaceOptions.AppendToAsset.AssetAppend))
			and !CapitalizationUpgradeInProgress)

        ProjectAppendsToUnreleasedAsset
        	restricted
        	when (FromProjects
        	and OriginatingAssetInterfaceOptions.AppendToAsset entered
			and OriginatingAssetInterfaceOptions.AppendToAsset.Status.Unreleased
			and !CapitalizationUpgradeInProgress)

		AddsToBasis
			restricted
			when (FromProjects
			and OriginatingAssetInterfaceOptions.AddToBasis)

		HasWIPAndClearingTransactions
			restricted
			when (OriginatingAssetInterfaceOptions.AssetTemplate entered
			and OriginatingAssetInterfaceOptions.AssetClearingAccount entered)

        FromAssets
        	restricted
            classic name is AM-RECORD
            when (EditSystem = "AM")

        FromPayables
        	restricted
            classic name is AP-RECORD
            when (EditSystem = "AP")

        CombineFromProjects
        	restricted
            classic name is COMBACT
            when (AssetProject.Project entered
            and   Combine entered)

        HasCombine
        	restricted
            classic name is COMBINE-EXIST
            when (Combine entered)

        CombineFromPayables
        	restricted
            classic name is COMBINV
            when (InvoiceAndPurchaseOrderInformation.Vendor entered
            and   Combine entered)

        HasCompany
        	restricted
            classic name is COMPANY-EXIST
            when (Company entered)

        HasVendor
        	restricted
            classic name is INVOICES
            when (InvoiceAndPurchaseOrderInformation.Vendor entered)

		DefaultAccountingUnitAvailable
			restricted
			when (AssetAccountingUnit entered)

        HasAssetAU
        	restricted
        	when (AssetAccountingUnitGroup.AssetAccountingUnit entered)

        HasAccumulatedDepreciationAU
        	restricted
        	when (AssetAccountingUnitGroup.AccumulatedDepreciationAccountingUnit entered)

        HasDepreciationExpenseAU
        	restricted
        	when (AssetAccountingUnitGroup.DepreciationExpenseAccountingUnit entered)

        HasClearingAU
        	restricted
        	when (AssetAccountingUnitGroup.ClearingAccountingUnit entered)

        HasProceedsAU
        	restricted
        	when (AssetAccountingUnitGroup.ProceedsAccountingUnit entered)

       	HasDisposalExpenseAU
       		restricted
       	   	when (AssetAccountingUnitGroup.DisposalExpenseAccountingUnit entered)

        HasGainAU
        	restricted
          	when (AssetAccountingUnitGroup.GainAccountingUnit entered)

        HasLossAU
        	restricted
        	when (AssetAccountingUnitGroup.LossAccountingUnit entered)

        HasDeferredGainAU
        	restricted
        	when (AssetAccountingUnitGroup.DeferredGainAccountingUnit entered)

        HasDeferredLossAU
        	restricted
        	when (AssetAccountingUnitGroup.DeferredLossAccountingUnit entered)

        HasRevalueSurplusAU
        	restricted
			when ((Company.Revalue
			and    AssetAccountingUnitGroup.RevalueSurplusAccountingUnit entered)
			or    !Company.Revalue)

        HasRevalueLossAU
        	restricted
			when ((Company.Revalue
			and    AssetAccountingUnitGroup.RevalueLossAccountingUnit entered)
			or    !Company.Revalue)

		HasAllRequiredAccountingUnits
			restricted
			when (DefaultAccountingUnitAvailable
			or 	 (HasAccumulatedDepreciationAU
        	and   HasDepreciationExpenseAU
        	and   HasClearingAU
        	and   HasProceedsAU
        	and	  HasDisposalExpenseAU
       	   	and   HasGainAU
          	and   HasLossAU
        	and   HasDeferredGainAU
            and   HasDeferredLossAU
            and   HasRevalueSurplusAU
        	and   HasRevalueLossAU))

		AppendsExistingAsset
			when (OriginatingAssetInterfaceOptions.AppendToAsset entered)

		FundAccounting
			when (Company.FinanceEnterpriseGroup.FundAccounting
			and not AssetType.AllocateDepreciationExpense)

		FundAllocationExists
			when (AssetInterfaceFundsRel exists)

		RebalanceError
			when (SplitRecordsCreatedDisplay
			and (OriginalCost entered
			and TransactionItemCostSum != OriginalCost))

		SplitRecordsCreated
			restricted
			when (instance count of InterfaceSplitRecordsRel > 1)

		SplitRecordsNotInterfaced
			restricted
			when(InterfaceSystem = "PS"
			and	((UseOldCapitalization
			and OriginalCost=OriginatingGLTransactionDetail.TransactionAmount)
			or (UseUpgradedCapitalization
			and OriginalCost=OriginatingAssetCapitalTransaction.TransactionAmount)))

		SplitRecordsCreatedDisplay
			when (OriginatingAssetInterface != blank)

		HasProjectAssetInterfaceRecord
			when (reference to this instance.ProjectAssetInterfaceRel exists)

		IsValidForActorContext
			restricted
			when (GeneralLedgerCompanyRel.FinanceEnterpriseGroup = actor.context.FinanceEnterpriseGroup)

		OverrideAssetGuidelineClass
			restricted
			when (LocalBookRegulation entered
			and	LocalAssetGuidelineClass entered)

		AssetGuidelineClassesExists
			restricted
			when (AssetGuidelineClassRel exists)

		GuidelineClassesExists
			restricted
			when (GuidelineClassRel exists)



		CapitalizationUpgradeInProgress
			restricted
			when (FinanceEnterpriseGroup.CapitalizationUpgradeProgess.InProgress)

		UseOldCapitalization
			restricted
			when (FinanceEnterpriseGroup.CapitalizationUpgradeProgess.NotEnabled)

		UseUpgradedCapitalization
			restricted
			when (FinanceEnterpriseGroup.CapitalizationUpgradeProgess.Completed)

    Sets
        Set2

            Instance Selection
                where (HasVendor)
            Sort Order
                Company
                AssetTemplate
                InvoiceAndPurchaseOrderInformation.Vendor
                InvoiceAndPurchaseOrderInformation.PayablesInvoice
                InvoiceAndPurchaseOrderInformation.DistributionSequence
                AssetInterface

        Set3
            indexed
            Instance Selection
                where (HasProject)
            Sort Order
                Company
                AssetTemplate
                AssetProject.Project
                AssetInterface

        Set4

            Instance Selection
                where (CombineFromPayables)
            Sort Order
                Company
                AssetTemplate
                Combine
                InvoiceAndPurchaseOrderInformation.Vendor
                InvoiceAndPurchaseOrderInformation.PayablesInvoice
                InvoiceAndPurchaseOrderInformation.DistributionSequence
                AssetInterface

        Set5
            indexed
            Instance Selection
                where (CombineFromProjects)
            Sort Order
                Company
                AssetTemplate
                Combine
                AssetProject.Project
                AssetInterface

      	ByTemplateCombine
			Sort Order
				Company
				AssetTemplate
				Combine
				InterfaceSystem
				AssetProject
      			AssetInterface


		ByInterfaceOptions
			Sort Order
				Company
				OriginatingAssetInterfaceOptions
				AssetTemplate
				Combine
				AssetInterface

		ByOriginatingAssetInterface
			Sort Order
				Company
				OriginatingAssetInterfaceOptions
				OriginatingAssetInterface
				AssetTemplate
				Combine
				AssetInterface

		ByDistributionCodeBlock
			Sort Order
				Company
				OriginatingAssetInterfaceOptions
				InterfaceSequenceNumber
				DistributionCodeBlock
				AssetInterface
				
    Field Rules
    	Company
    		required

		AssetTemplate
			required
			if (AssetTemplate.Company.AccountingEntity not = Company.AccountingEntity)
				confirmation required
					"AssetTemplateAccountingEntityNotEqualToCompanyAccountingEntity-OKToContinue?"
			if (!AssetAccountingUnit entered
			and !AssetAccountingUnitGroup entered)
				if (!AssetTemplate.HasAllRequiredAccountingUnits)
					confirmation required
						"AssetTemplateSetupIncomplete;DefaultDimensionsMustBeProvidedBeforeRelease"
			else
				if (!HasAllRequiredAccountingUnits)
					confirmation required
						"AssetDimensionGroupSetupIncomplete;DefaultDimensionsMustBeProvidedBeforeRelease"
			for each AssetTemplateBooksRel
				if (AssetCategory.NonDepreciable)
					constraint (each.Method not entered)
						"MethodCannotBeEnteredForNonDepreciableAsset"
					constraint (each.Life not entered)
						"LifeCannotBeEnteredForNonDepreciableAsset"

				LocalBook = each.Book
				constraint (BookCalendarRel exists)
					"Book<LocalBook>OnAssetTemplate<AssetTemplate>DoesNotHaveACalendarForCompany"

		InterfaceSystem
			initial value is "AM"
			default to "AM"
			required
			if (InterfaceSystem = "AP" and Company.DefaultDepreciationExpenseProject = false)
				DepreciationExpenseProject = ""

			if (InterfaceSystem = "PS")
				constraint (AssetProject entered)
					"ProjectIsRequiredWhenInterfaceSystemIsProjects"

		Description
			default to PayablesInvoiceDistributionRel.GLTransactionDetailRel.DerivedAPItemDesc
			if (UseUpgradedCapitalization)
				default to OriginatingGLTransactionDetail.DerivedAPItemDesc
			else
				default to OriginatingAssetCapitalTransaction.DerivedAPItemDesc


		AssetProject
			if (InterfaceSystem = "PS")
				cannot be changed

        PurchaseDate
            required

		ItemQuantity
			required


		BarCode
			constraint (DuplicateBarCodeRel not exists)
				"BarCodeHasAlreadyBeenAssignedInTheAssetInterfaceFile"
			constraint (DuplicateAssetItemBarCodeRel not exists)
				"BarCodeHasAlreadyBeenAssignedToAnAssetItem"

		HoldAsset
			if (Company.HoldAssetInterface)
				if (action type.Create)
					HoldAsset = true

		InServiceDate
			default to PurchaseDate
			required

		BaseNumberOfDecimals
			default to Company.CurrencyNumberOfDecimals
			if (HasWIPAndClearingTransactions)
				cannot be changed
					"CannotChangeAmountOfCapitalizationEntry"

		TransactionNumberOfDecimals
			default to Currency.NumberOfDecimals
			if (Currency changed)
				TransactionNumberOfDecimals = Currency.NumberOfDecimals
			if (HasWIPAndClearingTransactions)
				cannot be changed
					"CannotChangeAmountOfCapitalizationEntry"

		Currency
			default to Company.Currency
			if(!InterfaceSystem = "AM")
				cannot be changed
					"CannotChangeCurrency"
			if (HasWIPAndClearingTransactions)
				cannot be changed
					"CannotChangeAmountOfCapitalizationEntry"

        BaseItemCost
			if (HasWIPAndClearingTransactions)
				cannot be changed
					"CannotChangeAmountOfCapitalizationEntry"

        BaseItemTax
			if (HasWIPAndClearingTransactions)
				cannot be changed
					"CannotChangeAmountOfCapitalizationEntry"

        TransactionItemCost
			if (HasWIPAndClearingTransactions)
				if (!SplitRecordsCreated)
					cannot be changed
						"CannotChangeAmountOfCapitalizationEntry"

        TransactionItemTax
			if (HasWIPAndClearingTransactions)
				cannot be changed
					"CannotChangeAmountOfCapitalizationEntry"

		AssetGuidelineClass
			constraint (AssetGuidelineClass.Active)
				"GuidelineClass<AssetGuidelineClass>IsInactive"


	Rule Blocks
		SplitDistributions
			constraint (ItemQuantity > 1)
				"QuantityMustBeGreaterThan1ToSplit"

			constraint (TransactionItemCost entered)
				"CostMustBeGreaterThanZeroToSplit"
			if (Combine entered)
				if (LocalSplitAndDerive)
					LocalCombineSize = Combine size
					constraint (LocalCombineSize <= 6)
						"CannotSplitDistribution;CombineCodeLargerThan6Characters"
			LocalTransactionItemCost	= TransactionItemCost / ItemQuantity
			LocalTransactionItemTax		= TransactionItemTax / ItemQuantity
			LocalBaseItemCost			= BaseItemCost / ItemQuantity
			LocalBaseItemTax			= BaseItemTax / ItemQuantity
			LocalTransactionItemCost 	= RoundedCurrencyAmount
			TransientSplitQuantity		= ItemQuantity
			if (AssetDescription not entered)
				AssetDescription 		= AssetTemplate.Description
			if (OriginatingAssetInterface = blank)
				OriginatingAssetInterface	= AssetInterface
			else
				OriginatingAssetInterface	= OriginatingAssetInterface

			if (!SplitRecordsCreated)
				SplitRecordOriginalCost				= TransactionItemCost
			else
				SplitRecordOriginalCost				= OriginalCost
			OriginalCost				= SplitRecordOriginalCost
			I1 = 1
			while (I1 < ItemQuantity)
				LocalTotalTransactionItemCost	+= LocalTransactionItemCost
				LocalTotalTransactionItemTax	+= LocalTransactionItemTax
				LocalTotalBaseItemCost			+= LocalBaseItemCost
				LocalTotalBaseItemTax			+= LocalBaseItemTax
				if (Combine entered)
					LocalCombine = Combine
					if (LocalSplitAndDerive)
						I2 				= I1
						LocalCombine	= Combine + " " + I2

				invoke Create AssetInterface
					fill in fields from this instance
						except invoked.OriginatingGLTransactionDetail
					invoked.SplitFromAssetInterface		= AssetInterface
					invoked.TransactionItemCost			= LocalTransactionItemCost
					invoked.TransactionItemTax			= LocalTransactionItemTax
					invoked.BaseItemCost				= LocalBaseItemCost
					invoked.BaseItemTax					= LocalBaseItemTax
					invoked.Combine						= LocalCombine
					invoked.ItemQuantity				= 1
					invoked.OriginatingAssetInterface 	= OriginatingAssetInterface
					invoked.OriginalCost				= SplitRecordOriginalCost
					if (GLTransactionDetailRel exists)
						invoked.OriginatingGLTransactionDetail	= OriginatingGLTransactionDetail
					initialize invoked.BarCode
					initialize invoked.TagNumber
				I1 += 1
				initialize LocalCombine


			if (Combine entered)
				LocalCombine = Combine
				if (LocalSplitAndDerive)
					I2 				= I1
					LocalCombine	= Combine + " " + I2
			LocalTotalTransactionItemCost	+= LocalTransactionItemCost
			LocalTotalTransactionItemTax	+= LocalTransactionItemTax
			LocalTotalBaseItemCost			+= LocalBaseItemCost
			LocalTotalBaseItemTax			+= LocalBaseItemTax
			if (TransactionItemCost != LocalTotalTransactionItemCost)

				LocalTransactionItemCost = LocalTransactionItemCost + (TransactionItemCost - LocalTotalTransactionItemCost)

			if (TransactionItemTax != LocalTotalTransactionItemTax)
				LocalTransactionItemTax	= LocalTransactionItemTax + (TransactionItemTax - LocalTotalTransactionItemTax)
			if (BaseItemCost != LocalTotalBaseItemCost)
				LocalBaseItemCost = LocalBaseItemCost + (BaseItemCost - LocalTotalBaseItemCost)
			if (BaseItemTax != LocalTotalBaseItemTax)
				LocalBaseItemTax = LocalBaseItemTax + (BaseItemTax - LocalTotalBaseItemTax)
			Combine				= LocalCombine
			ItemQuantity		= 1
			TransactionItemCost	= LocalTransactionItemCost
			TransactionItemTax	= LocalTransactionItemTax
			BaseItemCost		= LocalBaseItemCost
			BaseItemTax			= LocalBaseItemTax
			include	UpdateInterfaceFundsFromSplit


		UpdateInterfaceFundsFromSplit
			if (AssetInterfaceFundsRel exists)
				initialize FundCount
				NumberOfFunds = instance count of AssetInterfaceFundsRel
				for each AssetInterfaceFundsRel
					FundCount += 1
					LocalTransactionItemCost = each.TransactionAmount
					if (TransientSplitQuantity entered)
						invoke Update each
							fill in fields from each
								except invoked.OriginatingGLTransactionDetail
							if (GLTransactionDetailRel exists)
								invoked.OriginatingGLTransactionDetail	= OriginatingGLTransactionDetail
							if (FundCount < NumberOfFunds
							and NumberOfFunds > 1)
								LocalFundAmount				= (LocalTransactionItemCost / TransientSplitQuantity)
								invoked.TransactionAmount	= LocalFundAmount
								TotalAllocated				+= LocalFundAmount
							else
								invoked.TransactionAmount	= (TransactionItemCost - TotalAllocated)
								initialize TotalAllocated
								initialize FundCount
								initialize NumberOfFunds
								end for each
					else
						invoke Update each
							fill in fields from each
								except invoked.OriginatingGLTransactionDetail
							if (GLTransactionDetailRel exists)
								invoked.OriginatingGLTransactionDetail	= OriginatingGLTransactionDetail
							if (FundCount < NumberOfFunds
							and NumberOfFunds > 1)
								LocalFundAmount				= (each.PercentContribution * TransactionItemCost)
								invoked.TransactionAmount	= LocalFundAmount
								TotalAllocated				+= LocalFundAmount
							else
								invoked.TransactionAmount	= (TransactionItemCost - TotalAllocated)
								initialize TotalAllocated
								initialize FundCount
								initialize NumberOfFunds
								end for each

		UpdateInterfaceFunds
			if (AssetInterfaceFundsRel exists)
				initialize FundCount
				NumberOfFunds = instance count of AssetInterfaceFundsRel
					for each AssetInterfaceFundsRel
						FundCount += 1
						invoke Update each
							fill in fields from this instance
								except invoked.OriginatingGLTransactionDetail
							if (GLTransactionDetailRel exists)
								invoked.OriginatingGLTransactionDetail	= OriginatingGLTransactionDetail
							if (FundCount < NumberOfFunds
							and NumberOfFunds > 1)
								LocalFundAmount				= (each.PercentContribution * TransactionItemCost)
								invoked.TransactionAmount	= LocalFundAmount
								TotalAllocated				+= LocalFundAmount
							else
								invoked.TransactionAmount	= (TransactionItemCost - TotalAllocated)
								initialize TotalAllocated
								initialize FundCount
								initialize NumberOfFunds
								end for each




		IncorporateTemplateValues
			if (AssetDescription entered)
				LocalAssetDescription			= AssetDescription
			else
				LocalAssetDescription			= AssetTemplate.Description
			if (AssetCategory entered)
				LocalAssetCategory 				= AssetCategory
			else
				LocalAssetCategory 				= AssetTemplate.AssetCategory
			if (AssetLocation entered)
		        LocalAssetLocation				= AssetLocation
			else
		        LocalAssetLocation				= AssetTemplate.AssetLocation
		    if (AssetDivision entered)
		        LocalAssetDivision				= AssetDivision
		    else
		        LocalAssetDivision				= AssetTemplate.AssetDivision
		   	if (AssetAccountingUnitGroup entered)
		   		LocalAssetAccountingUnitGroup	= AssetAccountingUnitGroup
		   	else
		        LocalAssetAccountingUnitGroup	= AssetTemplate.AssetAccountingUnitGroup
			if (AssetAccountingUnit entered)
				LocalAssetAccountingUnit	  	= AssetAccountingUnit
			else
		        LocalAssetAccountingUnit	  	= AssetTemplate.AccountingUnit
			if (DepreciationExpenseProject entered)
				LocalDepreciationExpenseProject = DepreciationExpenseProject
		    else
		        LocalDepreciationExpenseProject = AssetTemplate.DepreciationExpenseProject
			if (AssetAccountGroup entered)
				LocalAssetAccountGroup			= AssetAccountGroup
			else
		        LocalAssetAccountGroup			= AssetTemplate.AssetAccountGroup
		    if (AssetProject entered)
		        LocalAssetProject 				= AssetProject
		    else
		    	LocalAssetProject				= AssetTemplate.Project
			if (AssetType entered)
				LocalAssetType = AssetType
			else
				LocalAssetType = AssetTemplate.AssetType

			if (WorkInProcess)
				LocalWorkInProcess          = WorkInProcess
			else
	       		LocalWorkInProcess          = AssetTemplate.WorkInProcess
			if (Simulated)
				LocalSimulated              = Simulated
			else
			   	LocalSimulated              = AssetTemplate.Simulated
			if (TaxExempt)
				LocalTaxExempt              = TaxExempt
			else
	        	LocalTaxExempt              = AssetTemplate.TaxExempt
			if (Used)
				LocalUsed                   = Used
			else
				LocalUsed                   = AssetTemplate.Used
			if (TagNumber entered)
				LocalTagNumber				= TagNumber
			if (AssetGroup entered)
				LocalAssetGroup				= AssetGroup


		ReleaseEdits
			if (!BypassCompanyCheck)
				constraint (Company.PendingYearEndCount = 0)
					"YearEndPending,CannotUpdate"
				constraint (!Company.PeriodCloseRelease.InProcess)
					"CannotRelease;PeriodOrYearEndCloseIsInProcess"

			constraint (!HoldAsset)
				"CannotRelease;AssetInterfaceIsOnHold"
			constraint (TransactionItemCost entered)
				"TransactionCostIsRequired"
			if (LocalAssetCategory.Depreciable)
				for each LocalAssetTemplateBooksRel
					if (each.Method = "100%BONUS"
					and LocalComputeOption.No)
						LocalBook = each.Book
						constraint (InServiceDate >= BookCalendarRel.YearBeginDate)
							"100%BonusComputeNoIsValidOnlyForCurrentYear"
			if (LocalAssetGuidelineClass entered)
				constraint (LocalAssetGuidelineClass.Active)
					"GuidelineClass<LocalAssetGuidelineClass>IsInactive"

				for each LocalAssetTemplateBooksRel
					if (each.BookRegulation entered)
						LocalBookRegulation			= each.BookRegulation
					else
						if (each.Book.BookRegulation entered)
							LocalBookRegulation			= each.Book.BookRegulation
					if (LocalBookRegulation entered)
						constraint (first GuidelineClassRegulationsRel exists)
							"ActiveGuidelineClassRegulationDoesn'tExistFor:_Book<each.Book>_Book_Regulation<LocalBookRegulation>_InServiceDate<InServiceDate>"

		CombineCreateAsset
			invoke Unreleased.PortableCreateFromTemplate Asset
				assign result to NewAsset
				invoked.FinanceEnterpriseGroup				= Company.FinanceEnterpriseGroup
				invoked.Company								= Company
				invoked.AssetTemplate						= AssetTemplate
				invoked.Description							= LocalAssetDescription
				invoked.TagNumber							= LocalTagNumber
				invoked.AssetType							= LocalAssetType
				invoked.AssetCategory						= LocalAssetCategory
				invoked.AssetGroup							= LocalAssetGroup
				invoked.AssetAccountGroup					= LocalAssetAccountGroup
				invoked.AssetAccountingUnitGroup			= LocalAssetAccountingUnitGroup
				invoked.AssetAccountingUnit					= LocalAssetAccountingUnit
				invoked.DepreciationExpenseProject			= LocalDepreciationExpenseProject
				invoked.AssetLocation						= LocalAssetLocation
				invoked.AssetDivision						= LocalAssetDivision
				invoked.Currency							= LocalCurrency
				invoked.Simulated							= LocalSimulated
				invoked.WorkInProcess						= LocalWorkInProcess
				invoked.TaxExempt							= LocalTaxExempt
				invoked.Used								= LocalUsed
				invoked.BypassAssetItem						= true
				invoked.IncludeInPhysicalInventory			= AssetTemplate.AssetType.IncludeInPhysicalInventory
				invoked.ComputeOption						= LocalComputeOption
				if (OriginatingAssetInterfaceOptions.SummaryType)
					invoked.AssetProject					= OriginatingAssetInterfaceOptions.Project
				else
					invoked.AssetProject					= AssetProject
				invoked.AssetGuidelineClass					= LocalAssetGuidelineClass

		CreateAsset
			if (AssetTemplate entered)
				invoke Unreleased.PortableCreateFromTemplate Asset
					assign result to NewAsset
					invoked.FinanceEnterpriseGroup				= Company.FinanceEnterpriseGroup
					invoked.Company								= Company
					invoked.AssetTemplate						= AssetTemplate
					invoked.Description							= LocalAssetDescription
					invoked.TagNumber							= LocalTagNumber
					invoked.AssetType							= LocalAssetType
					invoked.AssetCategory						= LocalAssetCategory
					invoked.AssetGroup							= LocalAssetGroup
					invoked.AssetAccountGroup					= LocalAssetAccountGroup
					invoked.AssetAccountingUnitGroup			= LocalAssetAccountingUnitGroup
					invoked.AssetAccountingUnit					= LocalAssetAccountingUnit
					invoked.DepreciationExpenseProject			= LocalDepreciationExpenseProject
					invoked.AssetLocation						= LocalAssetLocation
					invoked.AssetDivision						= LocalAssetDivision
					invoked.Currency							= Currency
					invoked.Simulated							= LocalSimulated
					invoked.WorkInProcess						= LocalWorkInProcess
					invoked.TaxExempt							= LocalTaxExempt
					invoked.Used								= LocalUsed
					invoked.BypassAssetItem						= true
					invoked.IncludeInPhysicalInventory			= AssetTemplate.AssetType.IncludeInPhysicalInventory
					invoked.ComputeOption						= LocalComputeOption
					if (OriginatingAssetInterfaceOptions.SummaryType)
						invoked.AssetProject					= OriginatingAssetInterfaceOptions.Project
					else
						invoked.AssetProject					= LocalAssetProject
					invoked.AssetGuidelineClass					= AssetGuidelineClass


			else
				invoke Unreleased.Create Asset
					assign result to NewAsset
					fill in fields from this instance
					invoked.FinanceEnterpriseGroup		= Company.FinanceEnterpriseGroup
					invoked.Company						= Company
					invoked.Description					= AssetDescription
					invoked.TagNumber					= TagNumber
					invoked.AssetType					= AssetType
					invoked.AssetCategory				= AssetCategory
					invoked.AssetGroup					= AssetGroup
					invoked.AssetAccountGroup			= AssetAccountGroup
					invoked.AssetAccountingUnitGroup	= AssetAccountingUnitGroup
					invoked.DepreciationExpenseProject	= DepreciationExpenseProject
					invoked.AssetLocation				= AssetLocation
					invoked.AssetDivision				= AssetDivision
					invoked.Currency					= Currency
					invoked.Simulated					= Simulated
					invoked.WorkInProcess				= WorkInProcess
					invoked.TaxExempt					= TaxExempt
					invoked.Used						= Used
					invoked.IncludeInPhysicalInventory	= AssetTemplate.AssetType.IncludeInPhysicalInventory
					if (OriginatingAssetInterfaceOptions.SummaryType)
						invoked.AssetProject			= OriginatingAssetInterfaceOptions.Project
					else
						invoked.AssetProject			= AssetProject
					invoked.AssetGuidelineClass			= AssetGuidelineClass

			LocalAssetAccountingUnit = AssetAccountingUnit
			SavedAsset 		= NewAsset.Asset
			invoke UpdateFromAssetCreate OriginatingAssetInterfaceOptions
				invoked.AppendToAssetParameter	= SavedAsset

		CheckAssetCurrency
			LocalTransactionAmount2		= TransactionItemCost
			LocalProjectCurrency2		= Currency
			LocalProjectCurrency		= SavedAsset.Currency
			LocalTransactionItemCost2 	= DerivedTransactionAmount
			if (FundAccounting)
				CheckFundCurrency = true

		CreateAssetItem
			if (PurchaseOrderCommentsRel exists)
				if (!POAssetItemsRel exists)
					include CreatePOSourceComments
			if (PurchaseOrderLineCommentsRel exists)
				if (!POLineAssetItemsRel exists)
					include CreatePOLineSourceComments
			LocalFromAmount				= TransactionItemCost
			LocalTransactionItemCost2	= DerivedConvertedAmount
			invoke Create AssetItem
				assign result to NewAssetItem
				invoked.UpdateFromInterface		= 1
				invoked.FinanceEnterpriseGroup	= Company.FinanceEnterpriseGroup
				invoked.Asset					= SavedAsset
				invoked.ItemNumber				= ItemNumber
				invoked.Description				= Description
				invoked.PurchaseDate			= PurchaseDate
				if (LocalQuantity != 0)
					invoked.ItemQuantity		= LocalQuantity
				else
					invoked.ItemQuantity        = ItemQuantity
				invoked.BaseItemCost			= BaseItemCost
				invoked.BaseItemTax				= BaseItemTax
				invoked.TransactionItemCost		= LocalTransactionItemCost2
				invoked.TransactionItemTax		= TransactionItemTax
				invoked.ModelNumber				= ModelNumber
				invoked.SerialNumber			= SerialNumber
				invoked.AssetProject			= AssetProject
				invoked.BarCode					= BarCode
				invoked.LocationDetail			= LocationDetail
				invoked.InvoiceAndPurchaseOrderInformation	= InvoiceAndPurchaseOrderInformation
				invoked.POAssetObjectID			= POAssetObjectID
				invoked.CreatedBy				= actor
				invoked.CreationDate			= current timestamp
				invoked.VendorName				= InvoiceAndPurchaseOrderInformation.Vendor.VendorName
				invoked.LocalProgram        	= LocalProgram
				invoked.BaseNumberOfDecimals	= BaseNumberOfDecimals
				invoked.TransactionNumberOfDecimals	= TransactionNumberOfDecimals
				if (ComputeDepreciation)
					invoked.LocalComputeOption      = "Y"
				if(LocalAction = "AssetAppend")
					invoked.LocalInvokingAction     = "AssetAppend"
				if(Company.CopyUserFields)
					fill in user fields from this instance
			LocalAssetItem	= NewAssetItem.AssetItem


		CreateAssetBook
			if (AssetTemplate entered)
				for each AssetTemplate.AssetTemplateBook set
					LocalBook 				= each.Book
					LocalLife				= each.Life
					LocalMethod				= each.Method
					LocalBusinessPercent		= each.BusinessPercent
					LocalReplacementMethod		= each.ReplacementCalculationMethod
					LocalInsuranceMethod		= each.InsuranceCalculationMethod
					LocalPersonalUseCode		= each.PersonalUseCode
					LocalAssetTaxCreditTable	= each.AssetTaxCreditTable
					if (SavedAssetBookRel not exists)
						invoke Create AssetBook
							fill in fields from each
							invoked.Book				= LocalBook
							invoked.Life				= LocalLife
							invoked.Method				= LocalMethod
							invoked.Asset 				= SavedAsset
							invoked.LocalSalvagePercentage	= each.SalvagePercentage


							invoked.ComputeOption		= LocalComputeOption
							invoked.BusinessPercent 				= LocalBusinessPercent
							invoked.ReplacementCalculationMethod 	= LocalReplacementMethod
							invoked.InsuranceCalculationMethod		= LocalInsuranceMethod
							invoked.PersonalUseCode					= LocalPersonalUseCode
							invoked.AssetTaxCreditTable				= LocalAssetTaxCreditTable


		CreatePOSourceComments
			for each PurchaseOrderCommentsRel
				invoke Create AssetComment
        			invoked.FinanceEnterpriseGroup 	= Company.FinanceEnterpriseGroup
        			invoked.Asset					= NewAsset.Asset
        			invoked.Name					= each.CommentTitle
        			invoked.Type					= "S"
    				invoked.Comment 				= each.CommentText
    				invoked.Attachment 				= each.Attachment
		CreatePOLineSourceComments
			for each PurchaseOrderLineCommentsRel
				invoke Create AssetComment
        			invoked.FinanceEnterpriseGroup 	= Company.FinanceEnterpriseGroup
        			invoked.Asset					= NewAsset.Asset
        			invoked.Name					= each.CommentTitle
        			invoked.Type					= "S"
    				invoked.Comment 				= each.CommentText
    				invoked.Attachment 				= each.Attachment

		CombineValidation
			initialize LocalInServiceDate
			for each CombinedAssetInterfaceRel
				constraint (!RebalanceError)
					"RebalanceErrorExistsForCombineCode<each.Combine>"
				constraint (InServiceDate entered)
					"InServiceDateIsNotDefinedforCombineRecord,AssignACommonInServiceDateToAllCombinedRecordsOrAssignAnOverrideInServiceDateOnTheCombineAction"
				if (!SkipInServiceDateEdit)
					if (LocalInServiceDate not entered)
						LocalInServiceDate	= each.InServiceDate
					else
						constraint (LocalInServiceDate = each.InServiceDate)
							"CombinedRecordsMustHaveTheSameInServiceDateOrTheInServiceDateOverrideProvided"

				if (!SkipAssetDescriptionEdit)
					if (each.AssetDescription entered)
						constraint (LocalAssetDescription = each.AssetDescription)
							"CannotCombine;AssetDescription<LocalAssetDescription>DoesNotMatchTheAssetDescription<each.AssetDescription>OnTheRecordsBeingCombined"
				if (!SkipAssetGroupEdit)
					if (each.AssetGroup entered)
						constraint (LocalAssetGroup = each.AssetGroup)
							"CannotCombine;AssetGroup<LocalAssetGroup>DoesNotMatchAssetGroup<each.AssetGroup>OnTheRecordsBeingCombined"
				if (!SkipCurrencyEdit)
					if (each.Currency entered)
						constraint (LocalCurrency = each.Currency)
							"CannotCombine;Currency<LocalCurrency>DoesNotMatchCurrency<each.Currency>OnTheRecordsBeingCombined"
				if (!SkipTagNumberEdit)
					if (each.TagNumber entered)
						constraint (LocalTagNumber = each.TagNumber)
							"CannotCombine;TagNumber<LocalTagNumber>DoesNotMatchTagNumber<each.TagNumber>OnTheRecordsBeingCombined"

				if (!SkipAssetTypeEdit)
					if (each.AssetType entered)
						constraint (LocalAssetType = each.AssetType)
							"CannotCombine;AssetType<LocalAssetType>DoesNotMatchAssetType<each.AssetType>OnTheRecordsBeingCombined"
				if (!SkipAssetCategoryEdit)
					if (each.AssetCategory entered)
						constraint (LocalAssetCategory = each.AssetCategory)
							"CannotCombine;AssetCategory<LocalAssetCategory>DoesNotMatchAssetCategory<each.AssetCategory>OnTheRecordsBeingCombined"
				if (!SkipAssetAccountGroupEdit)
					if (each.AssetAccountGroup entered)
						constraint (LocalAssetAccountGroup = each.AssetAccountGroup)
							"CannotCombine;AssetAccountGroup<LocalAssetAccountGroup>DoesNotMatchAssetAccountGroup<each.AssetAccountGroup>OnTheRecordsBeingCombined"
				if (!SkipAssetLocationEdit)
					if (each.AssetLocation entered)
						constraint (LocalAssetLocation = each.AssetLocation)
							"CannotCombine;AssetLocation<LocalAssetLocation>DoesNotMatchAssetLocation<each.AssetLocation>OnTheRecordsBeingCombined"
				if (!SkipAssetDivisionEdit)
					if (each.AssetDivision entered)
						constraint (LocalAssetDivision = each.AssetDivision)
							"CannotCombine;AssetDivision<LocalAssetDivision>DoesNotMatchAssetDivision<each.AssetDivision>OnTheRecordsBeingCombined"
				if (!SkipAssetAccountingUnitGroupEdit)
					if (each.AssetAccountingUnitGroup entered)
						constraint (LocalAssetAccountingUnitGroup = each.AssetAccountingUnitGroup)
							"CannotCombine;AssetDimensionGroup<LocalAssetAccountingUnitGroup>DoesNotMatchAssetDimensionGroup<each.AssetAccountingUnitGroup>OnTheRecordsBeingCombined"
				if (!SkipAssetAccountingUnitEdit)
					if (each.AssetAccountingUnit entered)
						constraint (LocalAssetAccountingUnit = each.AssetAccountingUnit)
							"CannotCombine;DefaultTransactionDimensions<LocalAssetAccountingUnit>DoesNotMatchDefaultTransactionDimensions<each.AssetAccountingUnit>OnTheRecordsBeingCombined"
				if (!SkipDepreciationExpenseProjectEdit)
					if (each.DepreciationExpenseProject entered)
						constraint (LocalDepreciationExpenseProject = each.DepreciationExpenseProject)
							"CannotCombine;DepreciationExpenseProject<LocalDepreciationExpenseProject>DoesNotMatchDepreciationExpenseProject<each.DepreciationExpenseProject>OnTheRecordsBeingCombined"
				if (!SkipWorkInProcessEdit)
					constraint (LocalWorkInProcess = each.WorkInProcess)
						"CannotCombine;WorkInProcessValueOf<LocalWorkInProcess>DoesNotMatchWorkInProcessValueOf<each.WorkInProcess>OnTheRecordsBeingCombined"
				if (!SkipTaxExemptEdit)
					constraint (LocalTaxExempt = each.TaxExempt)
						"CannotCombine;TaxExemptValueOf<LocalTaxExempt>DoesNotMatchTaxExemptValueOf<each.TaxExempt>OnTheRecordsBeingCombined"
				if (!SkipSimulatedEdit)
					constraint (LocalSimulated = each.Simulated)
						"CannotCombine;SimulatedValueOf<LocalSimulated>DoesNotMatchSimulatedValueOf<each.Simulated>OnTheRecordsBeingCombined"
				if (!SkipUsedEdit)
					constraint (LocalUsed = each.Used)
						"CannotCombine;UsedValueOf<LocalUsed>DoesNotMatchUsedValueOf<each.Used>OnTheRecordsBeingCombined"
				if (!SkipAssetGuidelineClassEdit)
					constraint (LocalAssetGuidelineClass = each.AssetGuidelineClass)
						"CannotCombine;GuidelineClassValueOf<LocalAssetGuidelineClass>DoesNotMatchGuidelineClassValueOf<each.AssetGuidelineClass>OnTheRecordsBeingCombined"

		CombineUpdateValidation
			for each CombinedAssetInterfaceRel
				if (each.Currency entered)
					constraint (Currency = each.Currency)
						"CannotCombine;Currency<Currency>DoesNotMatchCurrency<each.Currency>OnTheRecordsBeingCombined"
				if (!((OriginatingAssetInterfaceOptions.PostingType
				and (each.OriginatingAssetInterfaceOptions not entered))
				or ((OriginatingAssetInterfaceOptions not entered)
				and each.OriginatingAssetInterfaceOptions.PostingType)))
					constraint (OriginatingAssetInterfaceOptions.Project.Project.ProjectType = each.OriginatingAssetInterfaceOptions.Project.Project.ProjectType)
						"CannotCombine;ProjectType<OriginatingAssetInterfaceOptions.Project.Project.ProjectType>DoesNotMatchProjectType<each.OriginatingAssetInterfaceOptions.Project.Project.ProjectType>OnTheRecordsBeingCombined"

		CreateWIPClearingTransactions
			constraint (LocalPostingDate entered)
				"WIPAndClearingTransactionsRequireThePostingDateToBeProvided"
			if(OriginatingAssetInterfaceOptions.WorkInProcessAccount entered)
				LocalWIPAccount								= OriginatingAssetInterfaceOptions.WorkInProcessAccount
			else
				LocalWIPAccount								= DistributionCodeBlock
				TransientBypassStructureRelationEdit   		= true
			LocalWIPAccount.ToAccountingEntity			= each.AccountingEntity
			if (FinanceEnterpriseGroup.FundDimension.AccountingUnit)
				LocalWIPAccount.AccountingUnit			= each.AccountingUnit
			else
				LocalWIPAccount.FinanceDimension1		= each.Fund
			LocalClearingAccount						= OriginatingAssetInterfaceOptions.AssetClearingAccount
			LocalClearingAccount.ToAccountingEntity		= each.AccountingEntity
			if (FinanceEnterpriseGroup.FundDimension.AccountingUnit)
				LocalClearingAccount.AccountingUnit		= each.AccountingUnit
			else
				LocalClearingAccount.FinanceDimension1	= each.Fund

			invoke Released.Create GLTransactionDetail
				invoked.FinanceEnterpriseGroup	= Company.AccountingEntity.FinanceEnterpriseGroup
				invoked.AccountingEntity		= LocalAccountingEntity
				invoked.System					= "AM"
				invoked.GeneralLedgerEvent		= "CP"
				invoked.Reference				= "ProjectAssetWorkInProcess"
				invoked.Capitalize				= 1
				invoked.Billed					= blank
				invoked.RevenueRecognized		= blank
				invoked.JournalizeGroup			= LocalJournalizeGroup
				invoked.PostingDate				= LocalPostingDate
				invoked.FinanceCodeBlock		= LocalWIPAccount
				if(!PrmPostWIPToProject)
					initialize invoked.FinanceCodeBlock.Project
					TransientBypassProjectEdits  = true
		        invoked.TransactionDate			= PurchaseDate
				invoked.TransactionAmount		= (each.TransactionAmount * -1)
				invoked.CurrencyCode			= LocalProjectCurrency
			
			if(OriginatingAssetInterfaceOptions.WorkInProcessAccount not entered)
				TransientBypassStructureRelationEdit   = false
				if(!PrmPostWIPToProject)
					TransientBypassProjectEdits  = false
			invoke Released.Create GLTransactionDetail
				invoked.FinanceEnterpriseGroup	= Company.AccountingEntity.FinanceEnterpriseGroup
				invoked.AccountingEntity		= LocalAccountingEntity
				invoked.System					= "AM"
				invoked.GeneralLedgerEvent		= "CP"
				invoked.Reference				= "ProjectAssetClearing"
				invoked.Capitalize				= 1
				invoked.Billed					= blank
				invoked.RevenueRecognized		= blank
				invoked.JournalizeGroup			= LocalJournalizeGroup
				invoked.PostingDate				= LocalPostingDate
				invoked.FinanceCodeBlock		= LocalClearingAccount
		        invoked.TransactionDate			= PurchaseDate
				invoked.TransactionAmount		= (each.TransactionAmount)
				invoked.CurrencyCode			= LocalProjectCurrency

		ReverseWipAndClearing
			invoke Released.Create GLTransactionDetail
				invoked.FinanceEnterpriseGroup	= Company.AccountingEntity.FinanceEnterpriseGroup
				invoked.AccountingEntity		= Company.AccountingEntity
				invoked.System					= "AM"
				invoked.GeneralLedgerEvent		= "CP"
				invoked.Reference				= "ReverseProjectWorkInProcess"
				invoked.Capitalize				= 1
				invoked.Billed					= blank
				invoked.RevenueRecognized		= blank
				invoked.PostingDate				= PrmPostingDate
				invoked.TransactionDate			= PurchaseDate
				invoked.JournalizeGroup			= LocalJournalizeGroup
				if(OriginatingAssetInterfaceOptions.WorkInProcessAccount entered)
					invoked.FinanceCodeBlock		= OriginatingAssetInterfaceOptions.WorkInProcessAccount
				else
					invoked.FinanceCodeBlock		= DistributionCodeBlock
					TransientBypassStructureRelationEdit   = true
					if(!PostWIPToProject)
						initialize invoked.FinanceCodeBlock.Project
						TransientBypassProjectEdits  = true
				invoked.TransactionAmount		= LocalTransactionAmount
				invoked.CurrencyCode			= Currency

			if(OriginatingAssetInterfaceOptions.WorkInProcessAccount not entered)
				TransientBypassStructureRelationEdit   = false
				if(!PostWIPToProject)
					TransientBypassProjectEdits  = false
			invoke Released.Create GLTransactionDetail
				invoked.FinanceEnterpriseGroup	= Company.AccountingEntity.FinanceEnterpriseGroup
				invoked.AccountingEntity		= Company.AccountingEntity
				invoked.System					= "AM"
				invoked.GeneralLedgerEvent		= "CP"
				invoked.Reference				= "ReverseProjectAssetClearing"
				invoked.Capitalize				= 1
				invoked.Billed					= blank
				invoked.RevenueRecognized		= blank
				invoked.PostingDate				= PrmPostingDate
				invoked.TransactionDate			= PurchaseDate
				invoked.JournalizeGroup			= LocalJournalizeGroup
				invoked.FinanceCodeBlock		= OriginatingAssetInterfaceOptions.AssetClearingAccount
				invoked.TransactionAmount		= LocalTransactionAmount * -1
				invoked.CurrencyCode			= Currency



		ReverseFundWIPAndClearing
			initialize FundCount
			initialize TotalAllocated
			NumberOfFunds 			= instance count of AssetInterfaceFundsRel
			for each AssetInterfaceFundsRel
				FundCount					+= 1
				LocalAccountingEntity		= each.AccountingEntity
				LocalAccountingUnit			= each.AccountingUnit
				LocalFund					= each.Fund
				LocalFinanceDimension1		= each.FinanceDimension1

				if (FromRebalanceRelease)
					LocalTransactionItemCost 	= sum InterfaceSplitRecordsRel.TransactionItemCost
					SplitRecordOriginalCost		= first InterfaceSplitRecordsRel.OriginalCost
					LocalAmount					= SplitRecordOriginalCost - LocalTransactionItemCost
				else
					if (NumberOfFunds > 1)
						LocalAmount	= each.TransactionAmount
					else
						LocalAmount					= TransactionItemCost

				invoke Released.Create GLTransactionDetail
					invoked.FinanceEnterpriseGroup	= Company.AccountingEntity.FinanceEnterpriseGroup
					invoked.AccountingEntity		= Company.AccountingEntity
					invoked.System					= "AM"
					invoked.GeneralLedgerEvent		= "CP"
					invoked.Reference				= "ReverseProjectWorkInProcess"
					invoked.Capitalize				= 1
					invoked.Billed					= blank
					invoked.RevenueRecognized		= blank
					invoked.PostingDate				= PrmPostingDate
					invoked.TransactionDate			= PurchaseDate
					invoked.JournalizeGroup			= LocalJournalizeGroup
					if(OriginatingAssetInterfaceOptions.WorkInProcessAccount entered)
						invoked.FinanceCodeBlock		= OriginatingAssetInterfaceOptions.WorkInProcessAccount
					else
						invoked.FinanceCodeBlock		= DistributionCodeBlock
						TransientBypassStructureRelationEdit   = true
						if(!PostWIPToProject)
							initialize invoked.FinanceCodeBlock.Project
							TransientBypassProjectEdits  = true
					if (FinanceEnterpriseGroup.FundAccounting)
						invoked.FinanceCodeBlock.ToAccountingEntity 	= LocalAccountingEntity
						if (FinanceEnterpriseGroup.FundDimension.AccountingUnit)
							invoked.FinanceCodeBlock.AccountingUnit		= LocalAccountingUnit
						else
							invoked.FinanceCodeBlock.FinanceDimension1 	= LocalFinanceDimension1

					invoked.CurrencyCode			= Currency
					invoked.TransactionAmount 		= LocalAmount

				if(OriginatingAssetInterfaceOptions.WorkInProcessAccount not entered)
					TransientBypassStructureRelationEdit   = false
					if(!PostWIPToProject)
						TransientBypassProjectEdits  = false
				invoke Released.Create GLTransactionDetail
					invoked.FinanceEnterpriseGroup	= Company.AccountingEntity.FinanceEnterpriseGroup
					invoked.AccountingEntity		= Company.AccountingEntity
					invoked.System					= "AM"
					invoked.GeneralLedgerEvent		= "CP"
					invoked.Reference				= "ReverseProjectAssetClearing"
					invoked.Capitalize				= 1
					invoked.Billed					= blank
					invoked.RevenueRecognized		= blank
					invoked.PostingDate				= PrmPostingDate
					invoked.TransactionDate			= PurchaseDate
					invoked.JournalizeGroup			= LocalJournalizeGroup
					invoked.FinanceCodeBlock		= OriginatingAssetInterfaceOptions.AssetClearingAccount
					if (FinanceEnterpriseGroup.FundAccounting)
						invoked.FinanceCodeBlock.ToAccountingEntity 	= LocalAccountingEntity
						if (FinanceEnterpriseGroup.FundDimension.AccountingUnit)
							invoked.FinanceCodeBlock.AccountingUnit		= LocalAccountingUnit
						else
							invoked.FinanceCodeBlock.FinanceDimension1 	= LocalFinanceDimension1
					invoked.TransactionAmount		= LocalAmount * -1
					invoked.CurrencyCode			= Currency
				if (FundCount = NumberOfFunds
				or  NumberOfFunds = blank)
					initialize TotalAllocated
					initialize FundCount
					initialize NumberOfFunds
					end for each
				if (ActionCode = 1)
					invoke Delete each


		CreateInterfaceFundRecord
			invoke Create AssetInterfaceFund
				fill in fields from this instance
					except invoked.OriginatingGLTransactionDetail
				if (GLTransactionDetailRel exists)
					invoked.OriginatingGLTransactionDetail	= OriginatingGLTransactionDetail
				invoked.AccountingEntity	 	= DistributionCodeBlock.ToAccountingEntity
	        	if (AssetFundControlRel.AccountingUnit)
					invoked.AccountingUnit		= DistributionCodeBlock.AccountingUnit
	        	if (AssetFundControlRel.Project)
					invoked.Project				= DistributionCodeBlock.Project
	        	if (AssetFundControlRel.FinanceDimension1)
					invoked.FinanceDimension1	= DistributionCodeBlock.FinanceDimension1
	        	if (AssetFundControlRel.FinanceDimension2)
					invoked.FinanceDimension2	= DistributionCodeBlock.FinanceDimension2
	        	if (AssetFundControlRel.FinanceDimension3)
					invoked.FinanceDimension3	= DistributionCodeBlock.FinanceDimension3
	        	if (AssetFundControlRel.FinanceDimension4)
	        		invoked.FinanceDimension4	= DistributionCodeBlock.FinanceDimension4
	        	if (AssetFundControlRel.FinanceDimension5)
					invoked.FinanceDimension5	= DistributionCodeBlock.FinanceDimension5
	        	if (AssetFundControlRel.FinanceDimension6)
					invoked.FinanceDimension6	= DistributionCodeBlock.FinanceDimension6
	        	if (AssetFundControlRel.FinanceDimension7)
					invoked.FinanceDimension7	= DistributionCodeBlock.FinanceDimension7
	        	if (AssetFundControlRel.FinanceDimension8)
					invoked.FinanceDimension8	= DistributionCodeBlock.FinanceDimension8
	        	if (AssetFundControlRel.FinanceDimension9)
					invoked.FinanceDimension9	= DistributionCodeBlock.FinanceDimension9
	        	if (AssetFundControlRel.FinanceDimension10)
					invoked.FinanceDimension10	= DistributionCodeBlock.FinanceDimension10

				invoked.PercentContribution		= 1
				invoked.TransactionAmount		= TransactionItemCost

		CreateAssetItemFundRecords
			if (CheckFundCurrency)
				NumberOfFunds 	= instance count of AssetInterfaceFundsRel
				for each AssetInterfaceFundsRel
					if (NumberOfFunds > 1)
						FundCount 		   += 1
						if (FundCount = NumberOfFunds)
							LocalFundAmount = LocalTransactionItemCost2 - TotalAllocated
						else
							LocalTransactionAmount2		= each.TransactionAmount
							LocalProjectCurrency2		= Currency
							LocalProjectCurrency		= SavedAsset.Currency
							TotalAllocated 	   		   += DerivedTransactionAmount
							LocalFundAmount 			= DerivedTransactionAmount
			else
				for each AssetInterfaceFundsRel
					LocalFundAmount 		= each.TransactionAmount
					include CreateAssetItemFunds

		CreateAssetItemFunds
			invoke Create AssetItemFund
				invoked.FinanceEnterpriseGroup 	= Company.FinanceEnterpriseGroup
				invoked.Asset					= SavedAsset
				invoked.AssetItem				= LocalAssetItem
				invoked.AccountingEntity		= each.AccountingEntity
				invoked.AccountingUnit			= each.AccountingUnit
				invoked.Project					= each.Project
				invoked.Fund					= each.Fund
				invoked.FinanceDimension1		= each.FinanceDimension1
				invoked.FinanceDimension2		= each.FinanceDimension2
				invoked.FinanceDimension3		= each.FinanceDimension3
				invoked.FinanceDimension4		= each.FinanceDimension4
				invoked.FinanceDimension5		= each.FinanceDimension5
				invoked.FinanceDimension6		= each.FinanceDimension6
				invoked.FinanceDimension7		= each.FinanceDimension7
				invoked.FinanceDimension8		= each.FinanceDimension8
				invoked.FinanceDimension9		= each.FinanceDimension9
				invoked.FinanceDimension10		= each.FinanceDimension10

				invoked.TransactionAmount		= LocalFundAmount
			invoke Delete each

	Actions
		CreateFromBatch is a Create Action
			restricted
			Exit Rules
				if (FundAccounting)
					if (SplitFromAssetInterface entered)
						LocalOriginatingAssetInterface = SplitFromAssetInterface
						initialize FundCount
						initialize TotalAllocated
						NumberOfFunds = instance count of FromInterfaceFundsRel
						for each FromInterfaceFundsRel
							FundCount += 1
							invoke Create AssetInterfaceFund
								if (InterfaceSystem = "AM")
									fill in fields from this instance
										except invoked.OriginatingGLTransactionDetail
									if (GLTransactionDetailRel exists)
										invoked.OriginatingGLTransactionDetail	= OriginatingGLTransactionDetail
									invoked.AccountingEntity	 	= each.AccountingEntity
									if (FinanceEnterpriseGroup.FundDimension.AccountingUnit)
										invoked.Fund				= each.AccountingUnit
									else
										invoked.Fund				= each.FinanceDimension1
									if (AssetFundControlRel.AccountingUnit)
										invoked.AccountingUnit		= each.AccountingUnit
									if (AssetFundControlRel.Project)
										invoked.Project				= each.Project
									if (AssetFundControlRel.FinanceDimension1)
										invoked.FinanceDimension1	= each.FinanceDimension1
									if (AssetFundControlRel.FinanceDimension2)
										invoked.FinanceDimension2	= each.FinanceDimension2
									if (AssetFundControlRel.FinanceDimension3)
										invoked.FinanceDimension3	= each.FinanceDimension3
									if (AssetFundControlRel.FinanceDimension4)
										invoked.FinanceDimension4	= each.FinanceDimension4
									if (AssetFundControlRel.FinanceDimension5)
										invoked.FinanceDimension5	= each.FinanceDimension5
									if (AssetFundControlRel.FinanceDimension6)
										invoked.FinanceDimension6	= each.FinanceDimension6
									if (AssetFundControlRel.FinanceDimension7)
										invoked.FinanceDimension7	= each.FinanceDimension7
									if (AssetFundControlRel.FinanceDimension8)
										invoked.FinanceDimension8	= each.FinanceDimension8
									if (AssetFundControlRel.FinanceDimension9)
										invoked.FinanceDimension9	= each.FinanceDimension9
									if (AssetFundControlRel.FinanceDimension10)
										invoked.FinanceDimension10	= each.FinanceDimension10
								else
									fill in fields from this instance
										except invoked.OriginatingGLTransactionDetail
									if (GLTransactionDetailRel exists)
										invoked.OriginatingGLTransactionDetail	= OriginatingGLTransactionDetail
									invoked.AccountingEntity	 	= each.AccountingEntity
									if (FinanceEnterpriseGroup.FundDimension.AccountingUnit)
										invoked.AccountingUnit		= each.AccountingUnit
									else
										invoked.Fund				= each.Fund
										invoked.FinanceDimension1	= LocalOriginatingAssetInterface.DistributionCodeBlock.FinanceDimension1
							        	if (AssetFundControlRel.AccountingUnit)
											invoked.AccountingUnit		= LocalOriginatingAssetInterface.DistributionCodeBlock.AccountingUnit
							        	if (AssetFundControlRel.Project)
											invoked.Project				= LocalOriginatingAssetInterface.DistributionCodeBlock.Project
							        	if (AssetFundControlRel.FinanceDimension1)
											invoked.FinanceDimension1	= LocalOriginatingAssetInterface.DistributionCodeBlock.FinanceDimension1
							        	if (AssetFundControlRel.FinanceDimension2)
											invoked.FinanceDimension2	= LocalOriginatingAssetInterface.DistributionCodeBlock.FinanceDimension2
							        	if (AssetFundControlRel.FinanceDimension3)
											invoked.FinanceDimension3	= LocalOriginatingAssetInterface.DistributionCodeBlock.FinanceDimension3
							        	if (AssetFundControlRel.FinanceDimension4)
							        		invoked.FinanceDimension4	= LocalOriginatingAssetInterface.DistributionCodeBlock.FinanceDimension4
							        	if (AssetFundControlRel.FinanceDimension5)
											invoked.FinanceDimension5	= LocalOriginatingAssetInterface.DistributionCodeBlock.FinanceDimension5
							        	if (AssetFundControlRel.FinanceDimension6)
											invoked.FinanceDimension6	= LocalOriginatingAssetInterface.DistributionCodeBlock.FinanceDimension6
							        	if (AssetFundControlRel.FinanceDimension7)
											invoked.FinanceDimension7	= LocalOriginatingAssetInterface.DistributionCodeBlock.FinanceDimension7
							        	if (AssetFundControlRel.FinanceDimension8)
											invoked.FinanceDimension8	= LocalOriginatingAssetInterface.DistributionCodeBlock.FinanceDimension8
							        	if (AssetFundControlRel.FinanceDimension9)
											invoked.FinanceDimension9	= LocalOriginatingAssetInterface.DistributionCodeBlock.FinanceDimension9
							        	if (AssetFundControlRel.FinanceDimension10)
											invoked.FinanceDimension10	= LocalOriginatingAssetInterface.DistributionCodeBlock.FinanceDimension10

								if (FundCount < NumberOfFunds
								and NumberOfFunds > 1)
									LocalFundAmount				= (each.PercentContribution * TransactionItemCost)
									invoked.TransactionAmount	= LocalFundAmount
									TotalAllocated				+= LocalFundAmount
								else
									invoked.TransactionAmount	= (TransactionItemCost - TotalAllocated)
									initialize TotalAllocated
									initialize FundCount
									initialize NumberOfFunds
									end for each

		Create is a Create Action
			restricted


			Exit Rules
				if (FundAccounting)
					if (InterfaceSystem = "AP"
					and DistributionCodeBlock entered
					and SplitFromAssetInterface not entered)
						include CreateInterfaceFundRecord

					if (SplitFromAssetInterface entered)
						initialize FundCount
						initialize TotalAllocated
						SplitQuantity 				= TransientSplitQuantity
						NumberOfFunds				= instance count of FromInterfaceFundsRel
						if (NumberOfFunds > 1)
							for each FromInterfaceFundsRel
								FundCount += 1
								LocalAssetInterface 		= each.AssetInterface
								LocalTransactionItemCost 	= each.TransactionAmount
								LocalPercentContribution	= 1 / SplitQuantity
								invoke Create AssetInterfaceFund
									fill in fields from each
										except invoked.OriginatingGLTransactionDetail
									if (GLTransactionDetailRel exists)
										invoked.OriginatingGLTransactionDetail	= OriginatingGLTransactionDetail
									invoked.AssetInterface		= AssetInterface
									invoked.AccountingEntity	= each.AccountingEntity
									invoked.Fund				= each.Fund
									invoked.AccountingUnit		= each.AccountingUnit
									invoked.Project				= each.Project
									invoked.FinanceDimension1	= each.FinanceDimension1
									invoked.FinanceDimension2	= each.FinanceDimension2
									invoked.FinanceDimension3	= each.FinanceDimension3
									invoked.FinanceDimension4	= each.FinanceDimension4
									invoked.FinanceDimension5	= each.FinanceDimension5
									invoked.FinanceDimension6	= each.FinanceDimension6
									invoked.FinanceDimension7	= each.FinanceDimension7
									invoked.FinanceDimension8	= each.FinanceDimension8
									invoked.FinanceDimension9	= each.FinanceDimension9
									invoked.FinanceDimension10	= each.FinanceDimension10
									LocalTransactionItemCost 	= LocalTransactionItemCost * LocalPercentContribution
									if (FundCount < SplitQuantity
									and NumberOfFunds > 1)
										invoked.TransactionAmount	= LocalTransactionItemCost
										TotalAllocated				+= LocalTransactionItemCost
									else
										invoked.TransactionAmount	= (each.TransactionAmount	 - TotalAllocated)
										initialize TotalAllocated
										initialize NumberOfFunds
										initialize SplitQuantity
										initialize FundCount
										end for each
						else
							for each FromInterfaceFundsRel
								FundCount += 1
								invoke Create AssetInterfaceFund
									fill in fields from each
										except invoked.OriginatingGLTransactionDetail
									if (GLTransactionDetailRel exists)
										invoked.OriginatingGLTransactionDetail	= OriginatingGLTransactionDetail
									invoked.AssetInterface			= AssetInterface
									invoked.AccountingEntity	 	= each.AccountingEntity
									if (AssetFundControlRel.AccountingUnit)
										invoked.AccountingUnit		= each.AccountingUnit
									if (AssetFundControlRel.Project)
										invoked.Project				= each.Project
									if (AssetFundControlRel.FinanceDimension1)
										invoked.FinanceDimension1	= each.FinanceDimension1
									if (AssetFundControlRel.FinanceDimension2)
										invoked.FinanceDimension2	= each.FinanceDimension2
									if (AssetFundControlRel.FinanceDimension3)
										invoked.FinanceDimension3	= each.FinanceDimension3
									if (AssetFundControlRel.FinanceDimension4)
										invoked.FinanceDimension4	= each.FinanceDimension4
									if (AssetFundControlRel.FinanceDimension5)
										invoked.FinanceDimension5	= each.FinanceDimension5
									if (AssetFundControlRel.FinanceDimension6)
										invoked.FinanceDimension6	= each.FinanceDimension6
									if (AssetFundControlRel.FinanceDimension7)
										invoked.FinanceDimension7	= each.FinanceDimension7
									if (AssetFundControlRel.FinanceDimension8)
										invoked.FinanceDimension8	= each.FinanceDimension8
									if (AssetFundControlRel.FinanceDimension9)
										invoked.FinanceDimension9	= each.FinanceDimension9
									if (AssetFundControlRel.FinanceDimension10)
										invoked.FinanceDimension10	= each.FinanceDimension10
									if (FundCount < NumberOfFunds
									and FundCount > 1)
										LocalFundAmount				= (each.PercentContribution * TransactionItemCost)
										invoked.TransactionAmount	= LocalFundAmount
										TotalAllocated				+= LocalFundAmount
									else
										invoked.TransactionAmount	= (TransactionItemCost - TotalAllocated)
										initialize TotalAllocated
										initialize FundCount
										initialize NumberOfFunds
										end for each

		TransferCreate is a Create Action  
			restricted					   
			Action Rules
				LocalInterfaceRecord						= TransientAssetInterfaceReference
				invoke Transfer LocalProjectAssetInterfacesRel
					invoked.NewProjectInterfaceControl		= TransientProjectInterfaceControl
					invoked.NewInterfaceRecord				= reference to this instance


		CopyCreate is a Create Action
			restricted

		CreateProjectInterface is a Create Action
			valid when (!CapitalizationUpgradeInProgress)
			Entrance Rules
				constraint (AssetProject entered)
					"ProjectTypeRecordRequiresAssetProject"


			Field Rules
				InterfaceSystem
					default to "AM"

		CreatePayablesInterface is a Create Action
			valid when (!CapitalizationUpgradeInProgress)
			Entrance Rules
				constraint (InvoiceAndPurchaseOrderInformation.PayablesInvoice entered)
					"InvoiceIsRequiredOnAPayablesTypeInterfaceRecord"
				constraint (InvoiceAndPurchaseOrderInformation.Vendor entered)
					"VendorIsRequiredOnAPayablesTypeInterfaceRecord"


			Field Rules
				InterfaceSystem
					default to "AM"

		Update is an Update Action
			valid when (!CapitalizationUpgradeInProgress)
			Field Rules
				InterfaceSystem
					cannot be changed
						"InterfaceSystemCannotBeChanged"
					if (InterfaceSystem = "AP")
						constraint (old InvoiceAndPurchaseOrderInformation = InvoiceAndPurchaseOrderInformation)
							"InvoiceDetailCannotBeChangedOnPayablesGeneratedRecord;UseTransferActionToUpdate"

				Company
					if (InterfaceSystem = "PS")
						cannot be changed
					if Company changed
						constraint (Company.AccountingEntity.FinanceEnterpriseGroup = actor.context.FinanceEnterpriseGroup)
							"CompanyDoesNotExist"
					required
					LocalAccountingEntity 	= Company.AccountingEntity
					LocalCompany 			= Company

				AssetTemplate
					if (InterfaceSystem = "PS")
						cannot be changed
					required
					LocalAssetTemplate 		= AssetTemplate
					constraint (NewTemplateRel exists)
						"NewTemplateIsNotValidForToCompany"

				AssetType
					if (AssetType entered)
						LocalAssetType 			= AssetType
						constraint (NewAssetTypeRel exists)
							"NewAssetTypeIsNotValidForToCompany"

				AssetAccountingUnitGroup
					if (AssetAccountingUnitGroup entered)
						LocalAssetAccountingUnitGroup = AssetAccountingUnitGroup
						constraint (NewAssetDimensionGroupRel exists)
							"NewAssetDimensionGroupIsNotValidForToCompany"

				AssetAccountGroup
					if (AssetAccountGroup entered)
						LocalAssetAccountGroup = AssetAccountGroup
						constraint (NewAssetAccountGroupRel exists)
							"NewAssetAccountGroupIsNotValidForToCompany"

				AssetAccountingUnit
					if (AssetAccountingUnit entered)
						if (AssetAccountingUnit.ToAccountingEntity not = Company.AccountingEntity)
							confirmation required
								"Warning;NewDefaultTransactionDimensionsAccoutingEntityIsNotEqualToCompanyAccountingEntity;OKToContinue?"

				Combine
					if (Combine entered)
						LocalCompany			= Company
						LocalAssetTemplate		= AssetTemplate
						LocalCombine			= Combine
						include CombineUpdateValidation

    	   	Action Rules
				if (BaseItemCost.FunctionalAmount.EnteredCurrencyRate < 0)
					BypassNegativeRateEdit = true

				if (TransactionItemCost changed
				and AssetInterfaceFundsRel exists)
					include UpdateInterfaceFunds
					invoke RecalculatePercents AssetInterfaceFund
						invoked.PrmAssetInterface	= AssetInterface
						invoked.NewAmount			= TransactionItemCost

		Split is an Instance Action
			valid when (AllowSplitAction)
			Action Rules
				if (TransactionItemCost >= 0)
					constraint (TransactionItemCost / ItemQuantity >= .01)
						"CannotSplit;TransactionAmountIsTooLowForSplitQuantity"
				else
					constraint (TransactionItemCost / ItemQuantity <= -.01)
						"CannotSplit;TransactionAmountIsTooLowForSplitQuantity"


				initialize LocalSplitAndDerive
				initialize OriginalCost
				initialize OriginatingAssetInterface
				include SplitDistributions

		SplitAndCopy is an Instance Action
			valid when (AllowSplitWithCombine)
			Action Rules
				if (TransactionItemCost >= 0)
					constraint (TransactionItemCost / ItemQuantity >= .01)
						"CannotSplit;TransactionAmountIsTooLowForSplitQuantity"
				else
					constraint (TransactionItemCost / ItemQuantity <= -.01)
						"CannotSplit;TransactionAmountIsTooLowForSplitQuantity"


				initialize LocalSplitAndDerive
				include SplitDistributions

		SplitAndDerive is an Instance Action
			valid when (AllowSplitWithCombine)
			Action Rules
				if (TransactionItemCost >= 0)
					constraint (TransactionItemCost / ItemQuantity >= .01)
						"CannotSplit;TransactionAmountIsTooLowForSplitQuantity"
				else
					constraint (TransactionItemCost / ItemQuantity <= -.01)
						"CannotSplit;TransactionAmountIsTooLowForSplitQuantity"


				LocalSplitAndDerive	= true
				include SplitDistributions

		SplitAndRebalance is an Update Action
			default label is "SplitAndRebalance"
			valid when (AllowSplitAndRebalance)
			Action Rules
				if (TransactionItemCost >= 0)
					constraint (TransactionItemCost / ItemQuantity >= .01)
						"CannotSplit;TransactionAmountIsTooLowForSplitQuantity"
				else
					constraint (TransactionItemCost / ItemQuantity <= -.01)
						"CannotSplit;TransactionAmountIsTooLowForSplitQuantity"

		TemplateSplitAndRebalance is an Update Action
			default label is "SplitAndRebalance"
			valid when (AllowSplitAndRebalance)
			Action Rules
				if (TransactionItemCost >= 0)
					constraint (TransactionItemCost / ItemQuantity >= .01)
						"CannotSplit;TransactionAmountIsTooLowForSplitQuantity"
				else
					constraint (TransactionItemCost / ItemQuantity <= -.01)
						"CannotSplit;TransactionAmountIsTooLowForSplitQuantity"

		AssetInterfaceSplitAndRebalance is an Update Action
			default label is "SplitAndRebalance"
			valid when (AllowSplitAndRebalance)
			Action Rules
				if (TransactionItemCost >= 0)
					constraint (TransactionItemCost / ItemQuantity >= .01)
						"CannotSplit;TransactionAmountIsTooLowForSplitQuantity"
				else
					constraint (TransactionItemCost / ItemQuantity <= -.01)
						"CannotSplit;TransactionAmountIsTooLowForSplitQuantity"
		BuildInterfaceFundRecords is an Instance Action
			restricted
			Parameters
				PrmAccountingEntity 	is like AccountingEntity
				PrmProjectCurrency		is like Currency
				PrmJournalizeGroup		is a JournalizeGroup
				PrmPostingDate			is Date
				PrmPostWIPToProject     is Boolean
			Action Rules
				LocalAccountingEntity 	= PrmAccountingEntity
				LocalProjectCurrency	= PrmProjectCurrency
				LocalJournalizeGroup	= PrmJournalizeGroup
				LocalPostingDate		= PrmPostingDate
				initialize LocalFund
				initialize LocalTransactionAmount
				initialize LocalFundAmount
				for each ProjectAssetInterfaceRel
					if (UseOldCapitalization)
						if (FinanceEnterpriseGroup.FundDimension.AccountingUnit)
							LocalFund					= each.GLTransactionDetail.FinanceCodeBlock.AccountingUnit
						else
							LocalFund					= each.GLTransactionDetail.FinanceCodeBlock.FinanceDimension1
						LocalAccountingEntity			= each.GLTransactionDetail.FinanceCodeBlock.ToAccountingEntity
						if (AssetFundControlRel.AccountingUnit)
							LocalAccountingUnit			= each.GLTransactionDetail.FinanceCodeBlock.AccountingUnit
						if (AssetFundControlRel.Project)
							LocalProject				= each.GLTransactionDetail.FinanceCodeBlock.Project
						if (AssetFundControlRel.FinanceDimension1)
							LocalFinanceDimension1		= each.GLTransactionDetail.FinanceCodeBlock.FinanceDimension1
						if (AssetFundControlRel.FinanceDimension2)
							LocalFinanceDimension2		= each.GLTransactionDetail.FinanceCodeBlock.FinanceDimension2
						if (AssetFundControlRel.FinanceDimension3)
							LocalFinanceDimension3		= each.GLTransactionDetail.FinanceCodeBlock.FinanceDimension3
						if (AssetFundControlRel.FinanceDimension4)
							LocalFinanceDimension4		= each.GLTransactionDetail.FinanceCodeBlock.FinanceDimension4
						if (AssetFundControlRel.FinanceDimension5)
							LocalFinanceDimension5		= each.GLTransactionDetail.FinanceCodeBlock.FinanceDimension5
						if (AssetFundControlRel.FinanceDimension6)
							LocalFinanceDimension6		= each.GLTransactionDetail.FinanceCodeBlock.FinanceDimension6
						if (AssetFundControlRel.FinanceDimension7)
							LocalFinanceDimension7		= each.GLTransactionDetail.FinanceCodeBlock.FinanceDimension7
						if (AssetFundControlRel.FinanceDimension8)
							LocalFinanceDimension8		= each.GLTransactionDetail.FinanceCodeBlock.FinanceDimension8
						if (AssetFundControlRel.FinanceDimension9)
							LocalFinanceDimension9		= each.GLTransactionDetail.FinanceCodeBlock.FinanceDimension9
						if (AssetFundControlRel.FinanceDimension10)
							LocalFinanceDimension10		= each.GLTransactionDetail.FinanceCodeBlock.FinanceDimension10

						LocalTransactionAmount			= each.GLTransactionDetail.ReportCurrencyAmount.ProjectAmount.EnteredCurrencyAmount
						LocalProjectCurrency2			= each.GLTransactionDetail.FinanceCodeBlock.Project.Currency
					else
						if (FinanceEnterpriseGroup.FundDimension.AccountingUnit)
							LocalFund					= each.AssetCapitalTransaction.FinanceCodeBlock.AccountingUnit
						else
							LocalFund					= each.AssetCapitalTransaction.FinanceCodeBlock.FinanceDimension1
						LocalAccountingEntity			= each.AssetCapitalTransaction.FinanceCodeBlock.ToAccountingEntity
						if (AssetFundControlRel.AccountingUnit)
							LocalAccountingUnit			= each.AssetCapitalTransaction.FinanceCodeBlock.AccountingUnit
						if (AssetFundControlRel.Project)
							LocalProject				= each.AssetCapitalTransaction.FinanceCodeBlock.Project
						if (AssetFundControlRel.FinanceDimension1)
							LocalFinanceDimension1		= each.AssetCapitalTransaction.FinanceCodeBlock.FinanceDimension1
						if (AssetFundControlRel.FinanceDimension2)
							LocalFinanceDimension2		= each.AssetCapitalTransaction.FinanceCodeBlock.FinanceDimension2
						if (AssetFundControlRel.FinanceDimension3)
							LocalFinanceDimension3		= each.AssetCapitalTransaction.FinanceCodeBlock.FinanceDimension3
						if (AssetFundControlRel.FinanceDimension4)
							LocalFinanceDimension4		= each.AssetCapitalTransaction.FinanceCodeBlock.FinanceDimension4
						if (AssetFundControlRel.FinanceDimension5)
							LocalFinanceDimension5		= each.AssetCapitalTransaction.FinanceCodeBlock.FinanceDimension5
						if (AssetFundControlRel.FinanceDimension6)
							LocalFinanceDimension6		= each.AssetCapitalTransaction.FinanceCodeBlock.FinanceDimension6
						if (AssetFundControlRel.FinanceDimension7)
							LocalFinanceDimension7		= each.AssetCapitalTransaction.FinanceCodeBlock.FinanceDimension7
						if (AssetFundControlRel.FinanceDimension8)
							LocalFinanceDimension8		= each.AssetCapitalTransaction.FinanceCodeBlock.FinanceDimension8
						if (AssetFundControlRel.FinanceDimension9)
							LocalFinanceDimension9		= each.AssetCapitalTransaction.FinanceCodeBlock.FinanceDimension9
						if (AssetFundControlRel.FinanceDimension10)
							LocalFinanceDimension10		= each.AssetCapitalTransaction.FinanceCodeBlock.FinanceDimension10

						LocalTransactionAmount			= each.AssetCapitalTransaction.ReportCurrencyAmount.ProjectAmount.EnteredCurrencyAmount
						LocalProjectCurrency2			= each.AssetCapitalTransaction.FinanceCodeBlock.Project.Currency
					LocalFromAmount					= LocalTransactionAmount
					LocalTransactionAmount			= DerivedConvertedAmount
					if (AssetInterfaceFundRel exists)
						LocalFundAmount					+= LocalTransactionAmount
						invoke UpdateFund AssetInterfaceFundRel
							invoked.PrmTransactionAmount	= LocalTransactionAmount
							invoked.PrmPercentContribution	= (LocalFundAmount / TransactionItemCost)
					else
						LocalFundAmount 				= LocalTransactionAmount
						invoke Create AssetInterfaceFundRel
							fill in fields from this instance
								except invoked.OriginatingGLTransactionDetail
							if (GLTransactionDetailRel exists)
								invoked.OriginatingGLTransactionDetail	= OriginatingGLTransactionDetail
							invoked.AccountingEntity	= LocalAccountingEntity
				        	if (AssetFundControlRel.AccountingUnit)
								invoked.AccountingUnit		= LocalAccountingUnit
				        	if (AssetFundControlRel.Project)
								invoked.Project				= LocalProject
							invoked.Fund 				  	= LocalFund
				        	if (AssetFundControlRel.FinanceDimension1)
								invoked.FinanceDimension1	= LocalFinanceDimension1
				        	if (AssetFundControlRel.FinanceDimension2)
								invoked.FinanceDimension2	= LocalFinanceDimension2
				        	if (AssetFundControlRel.FinanceDimension3)
								invoked.FinanceDimension3	= LocalFinanceDimension3
				        	if (AssetFundControlRel.FinanceDimension4)
				        		invoked.FinanceDimension4	= LocalFinanceDimension4
				        	if (AssetFundControlRel.FinanceDimension5)
								invoked.FinanceDimension5	= LocalFinanceDimension5
				        	if (AssetFundControlRel.FinanceDimension6)
								invoked.FinanceDimension6	= LocalFinanceDimension6
				        	if (AssetFundControlRel.FinanceDimension7)
								invoked.FinanceDimension7	= LocalFinanceDimension7
				        	if (AssetFundControlRel.FinanceDimension8)
								invoked.FinanceDimension8	= LocalFinanceDimension8
				        	if (AssetFundControlRel.FinanceDimension9)
								invoked.FinanceDimension9	= LocalFinanceDimension9
				        	if (AssetFundControlRel.FinanceDimension10)
								invoked.FinanceDimension10	= LocalFinanceDimension10

							invoked.TransactionAmount	= LocalFundAmount
							invoked.PercentContribution	= (LocalFundAmount / TransactionItemCost)

			Exit Rules
				if (OriginatingAssetInterfaceOptions.AssetClearingAccount entered)
					for each AssetInterfaceFundsRel
						include CreateWIPClearingTransactions


		ApplyOverrideDetail is a Set Action
			completion message is "UpdateCompletePleaseRefreshListToDisplayUpdatedrecords"
			Parameters
				FinanceEnterpriseGroup
				PrmAssetCompany						is an AssetCompany
				PrmAssetTemplate					is an AssetTemplate
					context of FinanceEnterpriseGroup
				PrmCombine							is a Combine
				PrmTemplateCompute					is Boolean
				XOverrideAssetTemplate 				is Boolean
				XOverrideAssetCategory 				is Boolean
				XOverrideAssetLocation 				is Boolean
				XOverrideAssetDivision 				is Boolean
				XOverrideAssetType 					is Boolean
				XOverrideAssetGroup					is Boolean
				XOverrideAssetAccountGroup 			is Boolean
				XOverrideAssetAccountingUnitGroup 	is Boolean
				XOverrideDepreciationExpenseProject is Boolean
				XOverrideWorkInProcess 				is Boolean
				XOverrideSimulated 					is Boolean
				XOverrideTaxExempt 					is Boolean
				XOverrideUsed 						is Boolean
				XOverrideHoldAsset 					is Boolean
				XOverrideAssetDescription 			is Boolean
				XOverrideTagNumber 					is Boolean
				XOverrideAssetAccountingUnit 		is Boolean
				XOverrideCurrency 					is Boolean
				XOverridePurchaseDate 				is Boolean
				XOverrideInServiceDate 				is Boolean
				XOverridePostingDate 				is Boolean
				XOverrideAssetGuidelineClass		is Boolean
				OverrideAssetTemplate				is an AssetTemplate
					context of PrmAssetCompany
				OverrideAssetCategory				is an AssetCategory
				OverrideAssetLocation				is an AssetLocation
					context of FinanceEnterpriseGroup
				OverrideAssetDivision				is an AssetDivision
					context of FinanceEnterpriseGroup
				OverrideAssetType					is an AssetType
				OverrideAssetAccountGroup			is an AssetAccountGroup
				OverrideAssetAccountingUnitGroup	is an AssetAccountingUnitGroup
				OverrideDepreciationExpenseProject	is a FinanceCodeBlockProjectOnly
				OverrideWorkInProcess				is Boolean
				OverrideSimulated					is Boolean
				OverrideTaxExempt					is Boolean
				OverrideUsed						is Boolean
				OverrideHoldAsset					is Boolean
				OverrideAssetDescription			is a Description
				OverrideTagNumber					is a TagNumber
				OverrideAssetGroup					is an AssetGroup
					context of FinanceEnterpriseGroup
				OverrideAssetAccountingUnit			is a FinanceCodeBlockNoAccountFull
				OverrideCurrency					is a FromCurrency
				OverridePurchaseDate				is Date
				OverrideInServiceDate				is Date
				OverridePostingDate					is Date
				OverrideAssetGuidelineClass			is a AssetGuidelineClass
					context of FinanceEnterpriseGroup

			Parameter Rules
				FinanceEnterpriseGroup
					initial value is actor.context.FinanceEnterpriseGroup
					constraint (!FinanceEnterpriseGroup.CapitalizationUpgradeProgess.InProgress)
						"CapitalizationUpgradeInProgress,PleaseWaitUntilUpgradeComplete"
				PrmAssetCompany
					LocalCompany = PrmAssetCompany
					required

				PrmAssetTemplate
					required

				XOverrideAssetTemplate
					if (XOverrideAssetTemplate)
						constraint (OverrideAssetTemplate entered)
							"TemplateIsSelectedForUpdate;NewValueIsRequired"

				OverrideAssetTemplate
					if (OverrideAssetTemplate entered)
						LocalAssetTemplate = OverrideAssetTemplate
						constraint (NewTemplateRel exists)
							"NewAssetTemplateDoesNotExistForCompany<PrmAssetCompany>"

				OverrideAssetType
					if (OverrideAssetType entered)
						LocalAssetType = OverrideAssetType
						constraint (NewAssetTypeRel exists)
							"NewAssetTypeIsNotValidForToCompany<PrmAssetCompany>"

				OverrideAssetAccountingUnitGroup
					if (OverrideAssetAccountingUnitGroup entered)
						LocalAssetAccountingUnitGroup = OverrideAssetAccountingUnitGroup
						constraint (NewAssetDimensionGroupRel exists)
							"NewAssetDimensionGroupIsNotValidForToCompany<PrmAssetCompany>"

				OverrideAssetAccountGroup
					if (OverrideAssetAccountGroup entered)
						LocalAssetAccountGroup = OverrideAssetAccountGroup
						constraint (NewAssetAccountGroupRel exists)
							"NewAssetAccountGroupIsNotValidForToCompany<PrmAssetCompany>"

				OverrideAssetAccountingUnit
					if (OverrideAssetAccountingUnit entered)
						if (OverrideAssetAccountingUnit.ToAccountingEntity not = PrmAssetCompany.AccountingEntity)
							confirmation required
								"Warning;NewDefaultTransactionDimensionsAccoutingEntityIsNotEqualToCompanyAccountingEntity;OKToContinue?"

				OverrideAssetGuidelineClass
					constraint (OverrideAssetGuidelineClass.Active)
						"OverrideGuidelineClass<OverrideAssetGuidelineClass>IsInactive"

			Instance Selection
        		where  (FinanceEnterpriseGroup  = FinanceEnterpriseGroup
        		and 	Company 				= PrmAssetCompany
        		and 	AssetTemplate			= PrmAssetTemplate
        		and    (PrmCombine not entered
        		or		Combine					= PrmCombine))

			Action Rules
				Instance Rules
					if (XOverrideAssetTemplate)
						AssetTemplate 				= OverrideAssetTemplate
					if (XOverrideHoldAsset)
						HoldAsset 					= OverrideHoldAsset
					if (XOverrideAssetDescription)
						AssetDescription 			= OverrideAssetDescription
					if (XOverrideTagNumber)
						TagNumber 					= OverrideTagNumber
					if (XOverrideAssetGroup)
						AssetGroup					= OverrideAssetGroup
					if (XOverrideAssetAccountingUnit)
						AssetAccountingUnit			= OverrideAssetAccountingUnit
					if (XOverrideCurrency)
						Currency					= OverrideCurrency
					if (XOverridePurchaseDate)
						PurchaseDate				= OverridePurchaseDate
					if (XOverrideInServiceDate)
						InServiceDate				= OverrideInServiceDate
					if (XOverridePostingDate)
						PostingDate					= OverridePostingDate
					if (XOverrideAssetCategory)
						AssetCategory				= OverrideAssetCategory
					if (XOverrideAssetLocation)
						AssetLocation				= OverrideAssetLocation
					if (XOverrideAssetDivision)
						AssetDivision				= OverrideAssetDivision
					if (XOverrideAssetType)
						AssetType					= OverrideAssetType
					if (XOverrideAssetAccountGroup)
						AssetAccountGroup			= OverrideAssetAccountGroup
					if (XOverrideAssetAccountingUnitGroup)
						AssetAccountingUnitGroup	= OverrideAssetAccountingUnitGroup
					if (XOverrideDepreciationExpenseProject)
						DepreciationExpenseProject 	= OverrideDepreciationExpenseProject
					if (XOverrideWorkInProcess)
						WorkInProcess				= OverrideWorkInProcess
					if (XOverrideSimulated)
						Simulated					= OverrideSimulated
					if (XOverrideTaxExempt)
						TaxExempt					= OverrideTaxExempt
					if (XOverrideUsed)
						Used						= OverrideUsed
					if (XOverrideAssetGuidelineClass)
						AssetGuidelineClass			= OverrideAssetGuidelineClass

		UpdateAssetCompany is an Instance Action
			default label is "Transfer"
			valid when (AllowUpdateCompany)
			Parameters
				ToCompany 						is an AssetCompany
				ToTemplate 						is an AssetTemplate
				ToAssetType 					is an AssetType
				ToAssetDimensionGroup 			is an AssetAccountingUnitGroup
				ToAssetAccountGroup 			is an AssetAccountGroup
				ToDefaultTransactionDimensions 	is a FinanceCodeBlockNoAccountFull
				ToAssetInterface				is an AssetInterface
				ToLocation						is an AssetLocation
				ToDivision						is an AssetDivision

			Parameter Rules
				ToCompany
					initial value is Company
					constraint (ToCompany.AccountingEntity.FinanceEnterpriseGroup = actor.context.FinanceEnterpriseGroup)
						"ToCompanyDoesNotExist"
					required
					LocalAccountingEntity 	= ToCompany.AccountingEntity
					LocalCompany 			= ToCompany

				ToTemplate
					initial value is AssetTemplate
					required
					LocalAssetTemplate 		= ToTemplate
					constraint (NewTemplateRel exists)
						"ToTemplateIsNotValidForToCompany"

				ToAssetType
					initial value is AssetType
					if (ToAssetType entered)
						LocalAssetType 			= ToAssetType
						constraint (NewAssetTypeRel exists)
							"ToAssetTypeIsNotValidForToCompany"

				ToAssetDimensionGroup
					initial value is AssetAccountingUnitGroup
					if (ToAssetDimensionGroup entered)
						LocalAssetAccountingUnitGroup = ToAssetDimensionGroup
						constraint (NewAssetDimensionGroupRel exists)
							"ToAssetDimensionGroupIsNotValidForToCompany"

				ToAssetAccountGroup
					initial value is AssetAccountGroup
					if (ToAssetAccountGroup entered)
						LocalAssetAccountGroup = ToAssetAccountGroup
						constraint (NewAssetAccountGroupRel exists)
							"ToAssetAccountGroupIsNotValidForToCompany"

				ToDefaultTransactionDimensions
					initial value is AssetAccountingUnit
					if (ToDefaultTransactionDimensions.ToAccountingEntity not = ToCompany.AccountingEntity)
						confirmation required
							"Warning;ToDefaultTransactionDimensionsAccoutingEntityIsNotEqualToCompanyAccountingEntity"

				ToLocation
					initial value is AssetLocation
					if (ToLocation entered)
						LocalAssetLocation = ToLocation
							constraint (NewAssetLocationRel exists)
								"NewLocation<LocalAssetLocation>DoesNotExist"

				ToDivision
					initial value is AssetDivision
					if (ToDivision entered)
						LocalAssetDivision = ToDivision
							constraint (NewAssetDivisionRel exists)
								"NewDivision<LocalAssetDivision>DoesNotExist"

			Action Rules
				invoke CopyCreate AssetInterface
					assign result to AssetInterfaceView
					invoked.Company			= LocalCompany
					invoked.AssetTemplate	= LocalAssetTemplate
					invoked.AssetType		= LocalAssetType
					invoked.AssetAccountingUnitGroup 	= LocalAssetAccountingUnitGroup
					invoked.AssetAccountGroup			= LocalAssetAccountGroup
					invoked.AssetAccountingUnit			= ToDefaultTransactionDimensions
					invoked.AssetLocation				= ToLocation
					invoked.AssetDivision				= ToDivision
					fill in fields from this instance
						except invoked.AssetInterface
						except invoked.OriginatingGLTransactionDetail
					if (GLTransactionDetailRel exists)
						invoked.OriginatingGLTransactionDetail	= OriginatingGLTransactionDetail
				LocalAssetInterface		= AssetInterfaceView.AssetInterface
				for each AssetInterfaceFundsRel
					invoke Create AssetInterfaceFund
						invoked.Company							= LocalCompany
						invoked.AssetInterface 					= LocalAssetInterface
						fill in fields from each
							except invoked.OriginatingGLTransactionDetail
						if (GLTransactionDetailRel exists)
							invoked.OriginatingGLTransactionDetail	= OriginatingGLTransactionDetail
				invoke Delete

		AppendToReleasedAsset is an Instance Action
			completion message is "ItemAssignedToAsset<SavedAsset>"
			valid when (AppendsToReleasedOrAdjustedAsset)
			Parameters
				PrmFromAppendSetAction	is Boolean
				PrmCombine				is like Combine
				PrmAppendToAsset 		is an Asset
				PrmAssetItem            is an AssetItem
				PrmAdjustmentDate		is Date
					default label is "AdjustmentDate"
				PrmItemQuantity         is a ItemQuantity
				PrmAddToItemQuantity    is Boolean
				PrmCompute              is Boolean
				PrmLocalProgram			is Boolean
			Parameter Rules
				PrmAdjustmentDate
					initial value is current date
					required
				PrmAppendToAsset
					initial value is OriginatingAssetInterfaceOptions.AppendToAsset
				PrmItemQuantity
					
				PrmAssetItem
					initial value is OriginatingAssetInterfaceOptions.AppendToAssetItem
				PrmAddToItemQuantity
					initial value is OriginatingAssetInterfaceOptions.AddToItemQuantity
				PrmLocalProgram
					initial value is OriginatingAssetInterfaceOptions.AddToBasis



			Action Rules
				LocalAction = "AssetAppend"
				if (PrmFromAppendSetAction)
					if (Combine = PrmCombine)
						if (PrmAppendToAsset entered)
							SavedAsset = PrmAppendToAsset
							LocalAppendToAsset = PrmAppendToAsset
							LocalAssetItem = PrmAssetItem
						else
							if (OriginatingAssetInterfaceOptions.AppendToAsset entered)
								SavedAsset = OriginatingAssetInterfaceOptions.AppendToAsset
					if (PrmCompute)
						ComputeDepreciation = true
					else
						ComputeDepreciation = false
				else
					SavedAsset = PrmAppendToAsset
					LocalAppendToAsset = SavedAsset
					ComputeDepreciation = OriginatingAssetInterfaceOptions.ComputeDepreciation
				if (SavedAsset entered)
					if (SavedAsset.Status.Released)
						invoke Released.Adjust SavedAsset
							invoked.AdjustmentDate 			= PrmAdjustmentDate
					if (SavedAsset.Currency = Currency)
						LocalTransactionItemCost2 = TransactionItemCost
					else
						include CheckAssetCurrency

					if (PrmAssetItem entered)
						LocalAssetItem   = PrmAssetItem
						invoke Update AssetItemRel
							if(Company.CopyUserFields)
								fill in user fields from this instance
							if (PrmAddToItemQuantity)
								if (PrmItemQuantity not entered)
									invoked.ItemQuantity           	+= ItemQuantity
								else
									invoked.ItemQuantity            += PrmItemQuantity


							invoked.LocalInvokingAction              = "AssetAppend"
							invoked.TransactionItemCost		+= TransactionItemCost
							invoked.TransactionItemTax		+= TransactionItemTax
							invoked.BaseItemCost  			+= BaseItemCost
							invoked.BaseItemTax				+= BaseItemTax
							if(!PrmLocalProgram)
								invoked.LocalProgram             = "AddToBasis"

							if (ComputeDepreciation)
								invoked.LocalComputeOption      = "Y"

					else
						if(!PrmLocalProgram)
							LocalProgram = "AddToBasis"
						LocalQuantity = PrmItemQuantity
						include CreateAssetItem
					if (FundAccounting)
						include CreateAssetItemFundRecords
					invoke UpdateAsset SavedAsset
						invoked.AssetAppend             = true
					invoke Delete

		AppendToUnreleasedAsset is an Instance Action
			completion message is "ItemAssignedToAsset<SavedAsset>"
			valid when (ProjectAppendsToUnreleasedAsset)
			Parameters
				PrmFromAppendSetAction	is Boolean
				PrmCombine			is like Combine
				PrmAppendToAsset 		is an Asset
				PrmAssetItem            is an AssetItem
				PrmItemQuantity         is a ItemQuantity
				PrmAddToItemQuantity    is Boolean
				PrmCompute              is Boolean
				PrmLocalProgram			is Boolean

			Parameter Rules
				PrmAppendToAsset
					initial value is OriginatingAssetInterfaceOptions.AppendToAsset

				PrmItemQuantity

				PrmAssetItem
					initial value is OriginatingAssetInterfaceOptions.AppendToAssetItem

				PrmAddToItemQuantity
					initial value is OriginatingAssetInterfaceOptions.AddToItemQuantity

				PrmLocalProgram
					initial value is OriginatingAssetInterfaceOptions.AddToBasis

			Action Rules
				LocalAction = "AssetAppend"
				if (PrmFromAppendSetAction)
					if (Combine = PrmCombine)
						if (PrmAppendToAsset entered)
							SavedAsset = PrmAppendToAsset
							LocalAppendToAsset = PrmAppendToAsset
							LocalAssetItem = PrmAssetItem
						else
							if (OriginatingAssetInterfaceOptions.AppendToAsset entered)
								SavedAsset = OriginatingAssetInterfaceOptions.AppendToAsset
					if (PrmCompute)
						ComputeDepreciation = true
					else
						ComputeDepreciation = false
				else
					SavedAsset = PrmAppendToAsset
					LocalAppendToAsset = SavedAsset
					ComputeDepreciation = OriginatingAssetInterfaceOptions.ComputeDepreciation
				if (SavedAsset entered)
					if (SavedAsset.Currency = Currency)
						LocalTransactionItemCost2 = TransactionItemCost
					else
						include CheckAssetCurrency
					if (PrmAssetItem entered)
						LocalAssetItem   = PrmAssetItem
						invoke Update AssetItemRel
							if(Company.CopyUserFields)
								fill in user fields from this instance
							if (PrmAddToItemQuantity)
								if (PrmItemQuantity not entered)
									invoked.ItemQuantity           	+= ItemQuantity
								else	
									invoked.ItemQuantity           	+= PrmItemQuantity

							invoked.LocalInvokingAction      = "AssetAppend"
							invoked.TransactionItemCost		+= TransactionItemCost
							invoked.TransactionItemTax		+= TransactionItemTax
							invoked.BaseItemCost  			+= BaseItemCost
							invoked.BaseItemTax				+= BaseItemTax
							if(!PrmLocalProgram)
								invoked.LocalProgram             = "AddToBasis"

							if (ComputeDepreciation)
								invoked.LocalComputeOption      = "Y"
					else
						if(!PrmLocalProgram)
							LocalProgram             = "AddToBasis"
						LocalQuantity = PrmItemQuantity
						include CreateAssetItem
					if (FundAccounting)
						include CreateAssetItemFundRecords
					invoke Delete

		ReleaseWithCompute is an Instance Action
			valid when (AllowReleaseCompute)
			completion message is "ReleaseComplete;Asset<SavedAsset>Created"

			Entrance Rules
				if (!AssetAccountingUnit entered
				and	!AssetAccountingUnitGroup entered)
					constraint (AssetTemplate.HasAllRequiredAccountingUnits)
						"AssetTemplate<AssetTemplate>SetupIncomplete;EitherEnterDefaultDimensionsOnAssetTemplateOrAllRequiredDimensionsOnAssetDimensionGroup"
				else
					constraint (HasAllRequiredAccountingUnits)
						"AssetDimensionGroupSetupIncomplete;EitherEnterDefaultDimensionsOnAssetTemplateOrAllRequiredDimensionsOnAssetDimensionGroup"

				constraint (!ProjectAppendsToAsset)
					"CannotRelease;Asset<OriginatingAssetInterfaceOptions.AppendToAsset>HasBeenCreated"
				LocalAssetAccountingUnit	= AssetAccountingUnit

			Action Rules
				LocalComputeOption 			= "Y"
				LocalAssetTemplate			= AssetTemplate
				LocalInServiceDate			= InServiceDate
				LocalAssetGuidelineClass	= AssetGuidelineClass
				include IncorporateTemplateValues
				include ReleaseEdits
				include CreateAsset
				SavedAsset					= NewAsset.Asset
				LocalAsset 					= SavedAsset
				include CreateAssetItem

			Exit Rules
				if (FundAccounting)
					for each AssetInterfaceFundsRel
						invoke Create AssetItemFund
							invoked.FinanceEnterpriseGroup 	= Company.FinanceEnterpriseGroup
							invoked.Asset					= SavedAsset
							invoked.AssetItem				= LocalAssetItem
							invoked.AccountingEntity		= each.AccountingEntity
							invoked.AccountingUnit			= each.AccountingUnit
							invoked.Project					= each.Project
							invoked.Fund					= each.Fund
							invoked.FinanceDimension1		= each.FinanceDimension1
							invoked.FinanceDimension2		= each.FinanceDimension2
							invoked.FinanceDimension3		= each.FinanceDimension3
							invoked.FinanceDimension4		= each.FinanceDimension4
							invoked.FinanceDimension5		= each.FinanceDimension5
							invoked.FinanceDimension6		= each.FinanceDimension6
							invoked.FinanceDimension7		= each.FinanceDimension7
							invoked.FinanceDimension8		= each.FinanceDimension8
							invoked.FinanceDimension9		= each.FinanceDimension9
							invoked.FinanceDimension10		= each.FinanceDimension10

							invoked.TransactionAmount		= each.TransactionAmount
						invoke Delete each


				for each LocalAssetTemplateBooksRel
					LocalBook 					= each.Book
					LocalLife					= each.Life
					LocalMethod					= each.Method
					LocalConvention				= each.Convention
					LocalBusinessPercent		= each.BusinessPercent
					LocalReplacementMethod		= each.ReplacementCalculationMethod
					LocalInsuranceMethod		= each.InsuranceCalculationMethod
					LocalPersonalUseCode		= each.PersonalUseCode
					LocalAssetTaxCreditTable	= each.AssetTaxCreditTable
					LocalProjectCurrency2		= Currency
					if (each.Book.PostCurrency.Book)
						LocalProjectCurrency	= each.Book.Currency
					else
						LocalProjectCurrency	= Currency
					LocalTransactionAmount2		= TransactionItemCost
					if (each.BookRegulation entered)
						LocalBookRegulation			= each.BookRegulation
					else
						if (each.Book.BookRegulation entered)
							LocalBookRegulation			= each.Book.BookRegulation

					if (LocalAssetBookRel not exists)
						invoke Create AssetBook
							fill in fields from each
							invoked.FinanceEnterpriseGroup	= Company.FinanceEnterpriseGroup
							invoked.Asset					= LocalAsset
							invoked.Book					= LocalBook
							invoked.CreatingFromTemplate 	= true
							if (OverrideAssetGuidelineClass)
								fill in fields from first GuidelineClassRegulationsRel
									except invoked.Book
									except invoked.Active
								invoked.FirstYearExpenseAmount			= DerivedTransactionAmount * (first GuidelineClassRegulationsRel.FirstYearExpensePercent/100)
								invoked.LocalSalvagePercentage 			= first GuidelineClassRegulationsRel.SalvagePercent
							else
								invoked.Method							= LocalMethod
								invoked.Convention						= LocalConvention
								invoked.Life							= LocalLife
								invoked.LocalSalvagePercentage 			= each.SalvagePercentage
								invoked.BusinessPercent					= LocalBusinessPercent
								invoked.PersonalUseCode					= LocalPersonalUseCode
								invoked.AssetTaxCreditTable				= LocalAssetTaxCreditTable
								invoked.ClassificationOfProperty 		= each.ClassificationOfProperty
								invoked.FirstYearExpenseAmount			= DerivedTransactionAmount * (each.FirstYearExpensePercent/100)
								invoked.Used 							= each.Used
								invoked.IndianReservation 				= each.IndianReservation
								invoked.PropertyType 					= each.PropertyType
								invoked.QualifiedImprovement 			= each.QualifiedImprovement
								invoked.ForeignProperty 				= each.ForeignProperty
								invoked.CostRecoverySystem 				= each.CostRecoverySystem
								invoked.NonConforming 					= each.NonConforming
								invoked.Farming 						= each.Farming
								invoked.MineralReserves 				= each.MineralReserves
								invoked.LowIncomeHousing 				= each.LowIncomeHousing
								invoked.Section179 						= each.Section179
								invoked.Listed							= each.Listed
								invoked.DepreciableIntangible 			= each.DepreciableIntangible
								invoked.TransitionalRuleFlag 			= each.TransitionalRuleFlag

							invoked.InServiceDate			= InServiceDate

							invoked.ComputeOption			= "Y"
							invoked.ReplacementCalculationMethod 	= LocalReplacementMethod
							invoked.InsuranceCalculationMethod		= LocalInsuranceMethod
							invoked.BookRegulation					= LocalBookRegulation
							invoked.TransientOtherPrograms			= true
							invoked.BonusAmount						= each.BonusAmount
							invoked.Section179Expense				= each.Section179Expense
					else
						invoke Update LocalAssetBookRel
							if (OverrideAssetGuidelineClass)
								fill in fields from first GuidelineClassRegulationsRel
									except invoked.Book
									except invoked.Active
								invoked.FirstYearExpenseAmount			= DerivedTransactionAmount * (first GuidelineClassRegulationsRel.FirstYearExpensePercent/100)
								invoked.LocalSalvagePercentage 			= first GuidelineClassRegulationsRel.SalvagePercent
								if (first GuidelineClassRegulationsRel.AssetTaxCreditTable not entered)
									invoked.TaxCredit					= 0
							else
								invoked.Method							= LocalMethod
								invoked.Life							= LocalLife
								invoked.Convention						= LocalConvention
								invoked.LocalSalvagePercentage 			= each.SalvagePercentage
								invoked.BusinessPercent					= LocalBusinessPercent
								invoked.PersonalUseCode					= LocalPersonalUseCode
								invoked.AssetTaxCreditTable				= LocalAssetTaxCreditTable
								if (LocalAssetTaxCreditTable not entered)
									invoked.TaxCredit					= 0
								invoked.ClassificationOfProperty 		= each.ClassificationOfProperty
								invoked.FirstYearExpenseAmount			= DerivedTransactionAmount * (each.FirstYearExpensePercent/100)
								invoked.Used 							= each.Used
								invoked.IndianReservation 				= each.IndianReservation
								invoked.PropertyType 					= each.PropertyType
								invoked.QualifiedImprovement 			= each.QualifiedImprovement
								invoked.ForeignProperty 				= each.ForeignProperty
								invoked.CostRecoverySystem 				= each.CostRecoverySystem
								invoked.NonConforming 					= each.NonConforming
								invoked.Farming							= each.Farming
								invoked.MineralReserves 				= each.MineralReserves
								invoked.LowIncomeHousing 				= each.LowIncomeHousing
								invoked.Section179 						= each.Section179
								invoked.Listed 							= each.Listed
								invoked.DepreciableIntangible 			= each.DepreciableIntangible
								invoked.TransitionalRuleFlag 			= each.TransitionalRuleFlag

							invoked.InServiceDate						= InServiceDate

							invoked.ComputeOption						= "Y"
							invoked.ReplacementCalculationMethod 		= LocalReplacementMethod
							invoked.InsuranceCalculationMethod			= LocalInsuranceMethod
							invoked.BookRegulation						= LocalBookRegulation
							invoked.TransientOtherPrograms				= true
							invoked.BonusAmount							= each.BonusAmount
							invoked.Section179Expense					= each.Section179Expense
				invoke Delete

		ReleaseWithoutCompute is an Instance Action
			valid when (AllowReleaseCompute)
			completion message is "ReleaseComplete;Asset<SavedAsset>Created"

			Local Fields
		        LocalAssetAccountingUnit		is a FinanceCodeBlockNoAccountFull
				NewAsset						is an Asset view
				SavedAsset						is an Asset


			Entrance Rules
				if (!AssetAccountingUnit entered
				and	!AssetAccountingUnitGroup entered)
					constraint (AssetTemplate.HasAllRequiredAccountingUnits)
						"AssetTemplate<AssetTemplate>SetupIncomplete;EitherEnterDefaultDimensionsOnAssetTemplateOrAllRequiredDimensionsOnAssetDimensionGroup"
				else
					constraint (HasAllRequiredAccountingUnits)
						"AssetDimensionGroupSetupIncomplete;EitherEnterDefaultDimensionsOnAssetTemplateOrAllRequiredDimensionsOnAssetDimensionGroup"

				constraint (!ProjectAppendsToAsset)
					"CannotRelease;Asset<OriginatingAssetInterfaceOptions.AppendToAsset>HasBeenCreated"
				LocalAssetAccountingUnit	= AssetAccountingUnit
				LocalComputeOption			= "N"
				LocalInServiceDate			= InServiceDate
				LocalAssetGuidelineClass	= AssetGuidelineClass
				LocalAssetTemplate			= AssetTemplate
				include IncorporateTemplateValues
				include ReleaseEdits
				include CreateAsset
				SavedAsset 					= NewAsset.Asset
				LocalAsset					= SavedAsset


			Action Rules
				include CreateAssetItem
				if (FundAccounting)
					include CreateAssetItemFundRecords



				LocalAssetTemplate				= AssetTemplate
				for each LocalAssetTemplateBooksRel
					LocalBook 					= each.Book
					LocalLife					= each.Life
					LocalMethod					= each.Method
					LocalConvention				= each.Convention
					LocalBusinessPercent		= each.BusinessPercent
					LocalReplacementMethod		= each.ReplacementCalculationMethod
					LocalInsuranceMethod		= each.InsuranceCalculationMethod
					LocalPersonalUseCode		= each.PersonalUseCode
					LocalAssetTaxCreditTable	= each.AssetTaxCreditTable
					LocalProjectCurrency2		= Currency
					if (each.Book.PostCurrency.Book)
						LocalProjectCurrency	= each.Book.Currency
					else
						LocalProjectCurrency	= Currency
					LocalTransactionAmount2		= TransactionItemCost
					if (each.BookRegulation entered)
						LocalBookRegulation			= each.BookRegulation
					else
						if (each.Book.BookRegulation entered)
							LocalBookRegulation			= each.Book.BookRegulation
					if (LocalAssetBookRel not exists)
						invoke Create AssetBook

							fill in fields from each
							invoked.FinanceEnterpriseGroup	= Company.FinanceEnterpriseGroup
							invoked.Asset					= LocalAsset
							invoked.Book					= LocalBook
							invoked.CreatingFromTemplate 	= true

							invoked.InServiceDate			= InServiceDate

							invoked.ComputeOption			= "N"
							invoked.ReplacementCalculationMethod 	= LocalReplacementMethod
							invoked.InsuranceCalculationMethod		= LocalInsuranceMethod
							invoked.BookRegulation					= LocalBookRegulation
							invoked.TransientOtherPrograms			= true
							invoked.BonusAmount						= each.BonusAmount
							invoked.Section179Expense				= each.Section179Expense
							if (OverrideAssetGuidelineClass)
								fill in fields from first GuidelineClassRegulationsRel
									except invoked.Active
									except invoked.Book
								invoked.FirstYearExpenseAmount			= DerivedTransactionAmount * (first GuidelineClassRegulationsRel.FirstYearExpensePercent/100)
								invoked.LocalSalvagePercentage 			= first GuidelineClassRegulationsRel.SalvagePercent
							else
								invoked.Method							= LocalMethod
								invoked.Convention						= LocalConvention
								invoked.Life							= LocalLife
								invoked.LocalSalvagePercentage 			= each.SalvagePercentage
								invoked.BusinessPercent					= LocalBusinessPercent
								invoked.PersonalUseCode					= LocalPersonalUseCode
								invoked.AssetTaxCreditTable				= LocalAssetTaxCreditTable
								invoked.ClassificationOfProperty 		= each.ClassificationOfProperty
								invoked.FirstYearExpenseAmount			= DerivedTransactionAmount * (each.FirstYearExpensePercent/100)
								invoked.Used 							= each.Used
								invoked.IndianReservation 				= each.IndianReservation
								invoked.PropertyType 					= each.PropertyType
								invoked.QualifiedImprovement 			= each.QualifiedImprovement
								invoked.ForeignProperty 				= each.ForeignProperty
								invoked.CostRecoverySystem 				= each.CostRecoverySystem
								invoked.NonConforming 					= each.NonConforming
								invoked.Farming 						= each.Farming
								invoked.MineralReserves 				= each.MineralReserves
								invoked.LowIncomeHousing 				= each.LowIncomeHousing
								invoked.Section179 						= each.Section179
								invoked.Listed 							= each.Listed
								invoked.DepreciableIntangible 			= each.DepreciableIntangible
								invoked.TransitionalRuleFlag			= each.TransitionalRuleFlag

					else
						invoke Update LocalAssetBookRel
							if (OverrideAssetGuidelineClass)
								fill in fields from first GuidelineClassRegulationsRel
									except invoked.Active
									except invoked.Book
								invoked.FirstYearExpenseAmount			= DerivedTransactionAmount * (first GuidelineClassRegulationsRel.FirstYearExpensePercent/100)
								invoked.LocalSalvagePercentage 			= first GuidelineClassRegulationsRel.SalvagePercent
								if (first GuidelineClassRegulationsRel.AssetTaxCreditTable not entered)
									invoked.TaxCredit					= 0
							else
								invoked.Method							= LocalMethod
								invoked.Life							= LocalLife
								invoked.Convention						= LocalConvention
								invoked.LocalSalvagePercentage 			= each.SalvagePercentage
								invoked.BusinessPercent					= LocalBusinessPercent
								invoked.PersonalUseCode					= LocalPersonalUseCode
								invoked.AssetTaxCreditTable				= LocalAssetTaxCreditTable
								if (LocalAssetTaxCreditTable not entered)
									invoked.TaxCredit					= 0
								invoked.ClassificationOfProperty 		= each.ClassificationOfProperty
								invoked.FirstYearExpenseAmount			= DerivedTransactionAmount * (each.FirstYearExpensePercent/100)
								invoked.Used 							= each.Used
								invoked.IndianReservation 				= each.IndianReservation
								invoked.PropertyType 					= each.PropertyType
								invoked.QualifiedImprovement 			= each.QualifiedImprovement
								invoked.ForeignProperty 				= each.ForeignProperty
								invoked.CostRecoverySystem 				= each.CostRecoverySystem
								invoked.NonConforming 					= each.NonConforming
								invoked.Farming 						= each.Farming
								invoked.MineralReserves 				= each.MineralReserves
								invoked.LowIncomeHousing 				= each.LowIncomeHousing
								invoked.Section179 						= each.Section179
								invoked.Listed							= each.Listed
								invoked.DepreciableIntangible 			= each.DepreciableIntangible
								invoked.TransitionalRuleFlag 			= each.TransitionalRuleFlag

							invoked.InServiceDate			= InServiceDate

							invoked.ComputeOption			= "N"
							invoked.ReplacementCalculationMethod 	= LocalReplacementMethod
							invoked.InsuranceCalculationMethod		= LocalInsuranceMethod
							invoked.BookRegulation					= LocalBookRegulation
							invoked.TransientOtherPrograms			= true
							invoked.TransientOtherPrograms			= true
							invoked.BonusAmount						= each.BonusAmount
							invoked.Section179Expense				= each.Section179Expense
				invoke Delete


		CombineRelease is a Set Action
			completion message is "CombineReleaseComplete;Asset<SavedAsset>Created"

			Parameters
				FinanceEnterpriseGroup
				PrmCompany						is an AssetCompany
					default label is "Company"
				PrmAssetTemplate				is an AssetTemplate
					default label is "Template"
					context of FinanceEnterpriseGroup
				PrmCombine						is a Combine
					default label is "CombineCode"
				ComputeOption					is AlphaUpper 1
			        States
			            Yes         value is "Y"
			            No          value is "N"
				OvrdAssetDescription			is a Description
				OvrdAssetGroup					is an AssetGroup
					context of FinanceEnterpriseGroup
				OvrdCurrency					is a Currency
				OvrdTagNumber					is a TagNumber
				OvrdAssetType					is an AssetType
				OvrdAssetCategory				is an AssetCategory
				OvrdAssetAccountGroup			is an AssetAccountGroup
				OvrdAssetLocation				is an AssetLocation
					context of FinanceEnterpriseGroup
				OvrdAssetDivision				is an AssetDivision
					context of FinanceEnterpriseGroup
				OvrdAssetAccountingUnitGroup	is an AssetAccountingUnitGroup
				OvrdAssetAccountingUnit			is a FinanceCodeBlockNoAccountFull
				OvrdDepreciationExpenseProject	is a FinanceCodeBlockProjectOnly
				OvrdInServiceDate				is Date
				OvrdWorkInProcess				is Numeric 1
                    States
                        ChangeToTrue      value is 1
                        ChangeToFalse     value is 2
				OvrdTaxExempt					is Numeric 1
                    States
                        ChangeToTrue      value is 1
                        ChangeToFalse     value is 2
				OvrdSimulated					is Numeric 1
                    States
                        ChangeToTrue      value is 1
                        ChangeToFalse     value is 2
				OvrdUsed						is Numeric 1
                    States
                        ChangeToTrue      value is 1
                        ChangeToFalse     value is 2
				OvrdAssetGuidelineClass			is an AssetGuidelineClass
					context of FinanceEnterpriseGroup

			Parameter Rules
				FinanceEnterpriseGroup
					initial value is actor.context.FinanceEnterpriseGroup
					constraint (!FinanceEnterpriseGroup.CapitalizationUpgradeProgess.InProgress)
						"CapitalizationUpgradeInProgress,PleaseWaitUntilUpgradeComplete"
				PrmCompany
					initial value is Company
					LocalCompany = PrmCompany
					required
				PrmAssetTemplate
					initial value is AssetTemplate
					LocalAssetTemplate = PrmAssetTemplate
					required
				PrmCombine
					initial value is Combine
					LocalCombine = PrmCombine
					required
				ComputeOption
					initial value is "N"
					default to "N"
					required
				OvrdCurrency
					if (OvrdCurrency entered)
						constraint (not CombinedAssetInterfaceRel.OriginatingAssetInterfaceOptions.SummaryType)
							"CannotEnterOverrideCurrencyForSummaryProject"
				OvrdAssetGuidelineClass
					constraint (OvrdAssetGuidelineClass.Active)
						"OverrideGuidelineClass<OvrdAssetGuidelineClass>IsInactive"

			Instance Selection
        		where (FinanceEnterpriseGroup  = FinanceEnterpriseGroup
				and    Company			       = PrmCompany
				and    AssetTemplate	       = PrmAssetTemplate
				and    Combine			       = PrmCombine)

			Sort Order
				Company
				AssetTemplate
				Combine

			Local Fields
		        LocalAssetAccountingUnit			is a FinanceCodeBlockNoAccountFull
				NewAsset							is an Asset view
				SavedAsset							is an Asset
					context of FinanceEnterpriseGroup
				SkipAssetDescriptionEdit			is Boolean
				SkipAssetGroupEdit					is Boolean
				SkipCurrencyEdit					is Boolean
				SkipTagNumberEdit					is Boolean
				SkipAssetTypeEdit					is Boolean
				SkipAssetCategoryEdit				is Boolean
				SkipAssetAccountGroupEdit			is Boolean
				SkipAssetLocationEdit				is Boolean
				SkipAssetDivisionEdit				is Boolean
				SkipAssetAccountingUnitGroupEdit	is Boolean
				SkipAssetAccountingUnitEdit			is Boolean
				SkipDepreciationExpenseProjectEdit	is Boolean
				SkipWorkInProcessEdit				is Boolean
				SkipTaxExemptEdit					is Boolean
				SkipSimulatedEdit					is Boolean
				SkipUsedEdit						is Boolean
				SkipInServiceDateEdit				is Boolean
				HasLocalDimensions					is Boolean
				CombineTransactionItemCost			is a CurrencyAmount
				SkipAssetGuidelineClassEdit			is Boolean
			Action Rules
				Empty Set Rules
					CompletionMessage = "NoRecordsFoundToProcess"

				Set Rules
				Combine Set Rules
					Entrance Rules
						constraint (!RebalanceError)
							"RebalanceErrorExistsForCombineCode<Combine>"
						initialize SkipAssetDescriptionEdit
						initialize SkipAssetGroupEdit
						initialize SkipCurrencyEdit
						initialize SkipTagNumberEdit

						initialize SkipAssetTypeEdit
						initialize SkipAssetCategoryEdit
						initialize SkipAssetAccountGroupEdit
						initialize SkipAssetLocationEdit
						initialize SkipAssetDivisionEdit
						initialize SkipAssetAccountingUnitGroupEdit
						initialize SkipAssetAccountingUnitEdit
						initialize SkipDepreciationExpenseProjectEdit
						initialize SkipWorkInProcessEdit
						initialize SkipTaxExemptEdit
						initialize SkipSimulatedEdit
						initialize SkipUsedEdit
						initialize SkipInServiceDateEdit
						initialize CombineTransactionItemCost
						initialize SkipAssetGuidelineClassEdit


						if (OvrdAssetDescription entered)
							LocalAssetDescription = OvrdAssetDescription
							SkipAssetDescriptionEdit = true
						else
							if (AssetDescription entered)
								LocalAssetDescription = AssetDescription
							else
								LocalAssetDescription = AssetTemplate.Description
						if (OvrdAssetGroup entered)
							LocalAssetGroup = OvrdAssetGroup
							SkipAssetGroupEdit = true
						else
							LocalAssetGroup = AssetGroup
						if (OvrdCurrency entered)
							LocalCurrency = OvrdCurrency
							SkipCurrencyEdit = true
						else
							LocalCurrency = Currency
						if (OvrdTagNumber entered)
							LocalTagNumber = OvrdTagNumber
							SkipTagNumberEdit = true
						else
							LocalTagNumber = TagNumber


						if (OvrdAssetType entered)
							LocalAssetType = OvrdAssetType
							SkipAssetTypeEdit = true
						else
						if (AssetType entered)
							LocalAssetType = AssetType
						else
							LocalAssetType = PrmAssetTemplate.AssetType
						if (OvrdAssetCategory entered)
							LocalAssetCategory = OvrdAssetCategory
							SkipAssetCategoryEdit = true
						else
						if (AssetCategory entered)
							LocalAssetCategory = AssetCategory
						else
							LocalAssetCategory = PrmAssetTemplate.AssetCategory
						if (OvrdAssetAccountGroup entered)
							LocalAssetAccountGroup = OvrdAssetAccountGroup
							SkipAssetAccountGroupEdit = true
						else
						if (AssetAccountGroup entered)
							LocalAssetAccountGroup = AssetAccountGroup
						else
							LocalAssetAccountGroup = PrmAssetTemplate.AssetAccountGroup
						if (OvrdAssetLocation entered)
							LocalAssetLocation = OvrdAssetLocation
							SkipAssetLocationEdit = true
						else
						if (AssetLocation entered)
							LocalAssetLocation = AssetLocation
						else
							LocalAssetLocation = PrmAssetTemplate.AssetLocation
						if (OvrdAssetDivision entered)
							LocalAssetDivision = OvrdAssetDivision
							SkipAssetDivisionEdit = true
						else
						if (AssetDivision entered)
							LocalAssetDivision = AssetDivision
						else
							LocalAssetDivision = PrmAssetTemplate.AssetDivision
						if (OvrdAssetAccountingUnitGroup entered)
							LocalAssetAccountingUnitGroup = OvrdAssetAccountingUnitGroup
							SkipAssetAccountingUnitGroupEdit = true
						else
						if (AssetAccountingUnitGroup entered)
							LocalAssetAccountingUnitGroup = AssetAccountingUnitGroup
						else
							LocalAssetAccountingUnitGroup = PrmAssetTemplate.AssetAccountingUnitGroup
						if (OvrdAssetAccountingUnit entered)
							LocalAssetAccountingUnit = OvrdAssetAccountingUnit
							SkipAssetAccountingUnitEdit = true
						else
						if (AssetAccountingUnit entered)
							LocalAssetAccountingUnit = AssetAccountingUnit
						else
							LocalAssetAccountingUnit = PrmAssetTemplate.AccountingUnit
						if (OvrdDepreciationExpenseProject entered)
							LocalDepreciationExpenseProject = OvrdDepreciationExpenseProject
							SkipDepreciationExpenseProjectEdit = true
						else
						if (DepreciationExpenseProject entered)
							LocalDepreciationExpenseProject = DepreciationExpenseProject
						else
							LocalDepreciationExpenseProject = PrmAssetTemplate.DepreciationExpenseProject
						if (OvrdInServiceDate entered)
							LocalInServiceDate	= OvrdInServiceDate
							SkipInServiceDateEdit = true
						else
							LocalInServiceDate	= InServiceDate
						if (OvrdWorkInProcess entered)
							if (OvrdWorkInProcess.ChangeToTrue)
								LocalWorkInProcess = true
							else
								LocalWorkInProcess = false
							SkipWorkInProcessEdit = true
						else
						if (WorkInProcess)
							LocalWorkInProcess = WorkInProcess
						else
							LocalWorkInProcess = PrmAssetTemplate.WorkInProcess
						if (OvrdTaxExempt entered)
							if (OvrdTaxExempt.ChangeToTrue)
								LocalTaxExempt = true
							else
								LocalTaxExempt = false
							SkipTaxExemptEdit = true
						else
						if (TaxExempt)
							LocalTaxExempt = TaxExempt
						else
							LocalTaxExempt = PrmAssetTemplate.TaxExempt
						if (OvrdSimulated entered)
							if (OvrdSimulated.ChangeToTrue)
								LocalSimulated = true
							else
								LocalSimulated = false
							SkipSimulatedEdit = true
						else
						if (Simulated)
							LocalSimulated = Simulated
						else
							LocalSimulated = PrmAssetTemplate.Simulated
						if (OvrdUsed entered)
							if (OvrdUsed.ChangeToTrue)
								LocalUsed = true
							else
								LocalUsed = false
							SkipUsedEdit = true
						else
						if (Used)
							LocalUsed = Used
						else
							LocalUsed = PrmAssetTemplate.Used
						if (OvrdAssetGuidelineClass entered)
							LocalAssetGuidelineClass = OvrdAssetGuidelineClass
							SkipAssetGuidelineClassEdit = true
						else
						if (AssetGuidelineClass entered)
							LocalAssetGuidelineClass = AssetGuidelineClass
						LocalComputeOption 	= ComputeOption
						LocalCompany 		= PrmCompany
						LocalAssetTemplate 	= PrmAssetTemplate
						LocalCombine 		= PrmCombine

						include CombineValidation

						if (LocalAssetAccountingUnit not entered)
							constraint (LocalAssetAccountingUnitGroup entered)
								"AssetDimensionGroupOrDefaultTransactionDimensionsRequired"
							constraint (LocalAssetAccountingUnitGroup.HasAllRequiredDimensions)
								"AssetDimensionGroupIsIncomplete;ProvideAdditionalDimensionsToDimensionGroupOrProvideDefaultTransactionDimensions"

						include CombineCreateAsset
						LocalAsset = NewAsset.Asset


					Exit Rules
						for each LocalAssetTemplateBooksRel
							LocalBook 					= each.Book
							LocalLife					= each.Life
							LocalMethod					= each.Method
							LocalConvention				= each.Convention
							LocalActive					= each.Active
							LocalLifeInYears			= each.LifeInYears
							LocalBusinessPercent		= each.BusinessPercent
							LocalReplacementMethod		= each.ReplacementCalculationMethod
							LocalInsuranceMethod		= each.InsuranceCalculationMethod
							LocalPersonalUseCode		= each.PersonalUseCode
							LocalAssetTaxCreditTable	= each.AssetTaxCreditTable
							LocalComputeOption			= ComputeOption
							LocalProjectCurrency2		= Currency
							if (each.Book.PostCurrency.Book)
								LocalProjectCurrency	= each.Book.Currency
							else
								if (OvrdCurrency entered)
									LocalProjectCurrency	= OvrdCurrency
								else
									LocalProjectCurrency	= Currency
							LocalTransactionAmount2		= CombineTransactionItemCost
							if (OvrdInServiceDate entered)
								LocalInServiceDate	= OvrdInServiceDate
							else
								LocalInServiceDate 		= InServiceDate
							if (OvrdAssetGuidelineClass entered)
								LocalAssetGuidelineClass = OvrdAssetGuidelineClass
							else
								LocalAssetGuidelineClass = AssetGuidelineClass
							if (each.BookRegulation entered)
								LocalBookRegulation			= each.BookRegulation
							else
								if (each.Book.BookRegulation entered)
									LocalBookRegulation			= each.Book.BookRegulation
							if (LocalAssetBookRel not exists)
								invoke Create AssetBook
									fill in fields from each
									invoked.FinanceEnterpriseGroup	= Company.FinanceEnterpriseGroup
									invoked.Asset					= LocalAsset
									invoked.Book					= LocalBook
									invoked.CreatingFromTemplate 	= true

									invoked.InServiceDate			= LocalInServiceDate

									invoked.ComputeOption			= LocalComputeOption
									invoked.ReplacementCalculationMethod 	= LocalReplacementMethod
									invoked.InsuranceCalculationMethod		= LocalInsuranceMethod
									invoked.BookRegulation					= LocalBookRegulation
									invoked.TransientOtherPrograms			= true
									invoked.BonusAmount						= each.BonusAmount
									invoked.Section179Expense				= each.Section179Expense
									if (OverrideAssetGuidelineClass)
										fill in fields from first GuidelineClassRegulationsRel
											except invoked.Book
											except invoked.Active
										invoked.FirstYearExpenseAmount			= DerivedTransactionAmount * (first GuidelineClassRegulationsRel.FirstYearExpensePercent/100)
										invoked.LocalSalvagePercentage 			= first GuidelineClassRegulationsRel.SalvagePercent
									else
										invoked.Method							= LocalMethod
										invoked.Convention						= LocalConvention
										invoked.Life							= LocalLife
										invoked.LocalSalvagePercentage 			= each.SalvagePercentage
										invoked.BusinessPercent					= LocalBusinessPercent
										invoked.PersonalUseCode					= LocalPersonalUseCode
										invoked.AssetTaxCreditTable				= LocalAssetTaxCreditTable
										invoked.ClassificationOfProperty 		= each.ClassificationOfProperty
										invoked.FirstYearExpenseAmount			= DerivedTransactionAmount * (each.FirstYearExpensePercent/100)
										invoked.Used 							= each.Used
										invoked.IndianReservation 				= each.IndianReservation
										invoked.PropertyType 					= each.PropertyType
										invoked.QualifiedImprovement 			= each.QualifiedImprovement
										invoked.ForeignProperty 				= each.ForeignProperty
										invoked.CostRecoverySystem 				= each.CostRecoverySystem
										invoked.NonConforming 					= each.NonConforming
										invoked.Farming 						= each.Farming
										invoked.MineralReserves 				= each.MineralReserves
										invoked.LowIncomeHousing 				= each.LowIncomeHousing
										invoked.Section179 						= each.Section179
										invoked.Listed 							= each.Listed
										invoked.DepreciableIntangible 			= each.DepreciableIntangible
										invoked.TransitionalRuleFlag			= each.TransitionalRuleFlag
							else
								invoke Update LocalAssetBookRel
									if (OverrideAssetGuidelineClass)
										fill in fields from first GuidelineClassRegulationsRel
											except invoked.Book
											except invoked.Active
										invoked.FirstYearExpenseAmount			= DerivedTransactionAmount * (first GuidelineClassRegulationsRel.FirstYearExpensePercent/100)
										invoked.LocalSalvagePercentage 			= first GuidelineClassRegulationsRel.SalvagePercent
										if (first GuidelineClassRegulationsRel.AssetTaxCreditTable not entered)
											invoked.TaxCredit					= 0
									else
										invoked.Method							= LocalMethod
										invoked.Life							= LocalLife
										invoked.LocalSalvagePercentage 			= each.SalvagePercentage
										invoked.Convention						= LocalConvention
										invoked.BusinessPercent					= LocalBusinessPercent
										invoked.PersonalUseCode					= LocalPersonalUseCode
										invoked.AssetTaxCreditTable				= LocalAssetTaxCreditTable
										if (LocalAssetTaxCreditTable not entered)
											invoked.TaxCredit					= 0
										invoked.ClassificationOfProperty 		= each.ClassificationOfProperty
										invoked.FirstYearExpenseAmount			= DerivedTransactionAmount * (each.FirstYearExpensePercent/100)
										invoked.Used 							= each.Used
										invoked.IndianReservation 				= each.IndianReservation
										invoked.PropertyType 					= each.PropertyType
										invoked.QualifiedImprovement 			= each.QualifiedImprovement
										invoked.ForeignProperty 				= each.ForeignProperty
										invoked.CostRecoverySystem 				= each.CostRecoverySystem
										invoked.NonConforming 					= each.NonConforming
										invoked.Farming 						= each.Farming
										invoked.MineralReserves 				= each.MineralReserves
										invoked.LowIncomeHousing 				= each.LowIncomeHousing
										invoked.Section179 						= each.Section179
										invoked.Listed 							= each.Listed
										invoked.DepreciableIntangible 			= each.DepreciableIntangible
										invoked.TransitionalRuleFlag			= each.TransitionalRuleFlag

									invoked.InServiceDate			= LocalInServiceDate

									invoked.ComputeOption			= LocalComputeOption
									invoked.Active 					= LocalActive
									invoked.LifeRemaining			= 0
									invoked.YearToDateDepreciation	= 0
									invoked.LifeToDateDepreciation	= 0
									invoked.InsuranceCalculationMethod		= LocalInsuranceMethod
									invoked.ReplacementCalculationMethod 	= LocalReplacementMethod
									invoked.BookRegulation					= LocalBookRegulation
									invoked.TransientOtherPrograms			= true
									invoked.BonusAmount						= each.BonusAmount
									invoked.Section179Expense				= each.Section179Expense

						if (OriginatingAssetInterfaceOptions.AppendOption
						and OriginatingAssetInterfaceOptions.AppendToAsset = blank)
							invoke UpdateFromAssetCreate OriginatingAssetInterfaceOptions
								invoked.AppendToAssetParameter	= LocalAsset

				Instance Rules
					constraint (!AppendsExistingAsset)
						"AppendToAssetAlreadyExists;UseItemAdjustmentImport"

					SavedAsset				= NewAsset.Asset
					BypassCompanyCheck		= true
					LocalComputeOption		= ComputeOption
					LocalAsset 				= SavedAsset
					LocalAssetTemplate		= PrmAssetTemplate
					LocalBaseItemCost		+= BaseItemCost
					LocalTransactionItemCost += TransactionItemCost
					LocalProjectCurrency2	= Currency
					if (OvrdCurrency entered)
						LocalOvrdCurrency	= OvrdCurrency
					CombineTransactionItemCost += TransactionItemCost
					include ReleaseEdits
					include CreateAssetItem
					if (AssetInterfaceFundsRel exists)
						if (FundAccounting)
							for each AssetInterfaceFundsRel
								LocalFromAmount					= each.TransactionAmount
								invoke Create AssetItemFund
									invoked.FinanceEnterpriseGroup 	= Company.FinanceEnterpriseGroup
									invoked.Asset					= SavedAsset
									invoked.AssetItem				= LocalAssetItem
									invoked.AccountingEntity		= each.AccountingEntity
									invoked.AccountingUnit			= each.AccountingUnit
									invoked.Project					= each.Project
									invoked.Fund					= each.Fund
									invoked.FinanceDimension1		= each.FinanceDimension1
									invoked.FinanceDimension2		= each.FinanceDimension2
									invoked.FinanceDimension3		= each.FinanceDimension3
									invoked.FinanceDimension4		= each.FinanceDimension4
									invoked.FinanceDimension5		= each.FinanceDimension5
									invoked.FinanceDimension6		= each.FinanceDimension6
									invoked.FinanceDimension7		= each.FinanceDimension7
									invoked.FinanceDimension8		= each.FinanceDimension8
									invoked.FinanceDimension9		= each.FinanceDimension9
									invoked.FinanceDimension10		= each.FinanceDimension10

									invoked.TransactionAmount		= DerivedConvertedAmount
								invoke Delete each
					else
						if (FundAccounting)
							if (HasLocalDimensions)
								LocalFromAmount					= TransactionItemCost
								invoke Create AssetItemFund
									invoked.FinanceEnterpriseGroup 	= Company.FinanceEnterpriseGroup
									invoked.Asset					= SavedAsset
									invoked.AssetItem				= LocalAssetItem
									invoked.AccountingEntity		= DistributionCodeBlock.ToAccountingEntity
						        	if (AssetFundControlRel.AccountingUnit)
										invoked.AccountingUnit		= DistributionCodeBlock.AccountingUnit
						        	if (AssetFundControlRel.Project)
										invoked.Project				= DistributionCodeBlock.Project
									if (FinanceEnterpriseGroup.FundDimension.AccountingUnit)
										invoked.Fund 				= DistributionCodeBlock.AccountingUnit
									else
										invoked.Fund 				= DistributionCodeBlock.FinanceDimension1
						        	if (AssetFundControlRel.FinanceDimension1)
										invoked.FinanceDimension1	= DistributionCodeBlock.FinanceDimension1
						        	if (AssetFundControlRel.FinanceDimension2)
										invoked.FinanceDimension2	= DistributionCodeBlock.FinanceDimension2
						        	if (AssetFundControlRel.FinanceDimension3)
										invoked.FinanceDimension3	= DistributionCodeBlock.FinanceDimension3
						        	if (AssetFundControlRel.FinanceDimension4)
						        		invoked.FinanceDimension4	= DistributionCodeBlock.FinanceDimension4
						        	if (AssetFundControlRel.FinanceDimension5)
										invoked.FinanceDimension5	= DistributionCodeBlock.FinanceDimension5
						        	if (AssetFundControlRel.FinanceDimension6)
										invoked.FinanceDimension6	= DistributionCodeBlock.FinanceDimension6
						        	if (AssetFundControlRel.FinanceDimension7)
										invoked.FinanceDimension7	= DistributionCodeBlock.FinanceDimension7
						        	if (AssetFundControlRel.FinanceDimension8)
										invoked.FinanceDimension8	= DistributionCodeBlock.FinanceDimension8
						        	if (AssetFundControlRel.FinanceDimension9)
										invoked.FinanceDimension9	= DistributionCodeBlock.FinanceDimension9
						        	if (AssetFundControlRel.FinanceDimension10)
										invoked.FinanceDimension10	= DistributionCodeBlock.FinanceDimension10
									invoked.TransactionAmount		= DerivedConvertedAmount
					invoke Delete

		ReleaseRebalance is an Instance Action
			valid when (AllowReleaseRebalance)
			Parameters
				PrmPostingDate		is Date
					default label is "PostingDate"

			Parameter Rules
				PrmPostingDate
					required
			Action Rules
				FromRebalanceRelease		= true
				LocalTransactionItemCost 	= sum InterfaceSplitRecordsRel.TransactionItemCost
				SplitRecordOriginalCost		= first InterfaceSplitRecordsRel.OriginalCost
				LocalTransactionAmount		= SplitRecordOriginalCost - LocalTransactionItemCost
				if (LocalTransactionAmount entered
				and HasWIPAndClearingTransactions)
		            increment GeneralLedgerSystemCodeRel.LastJournalizeGroup
   					LocalJournalizeGroup 	= GeneralLedgerSystemCodeRel.DerivedJournalizeGroup
					if (FundAccounting)
						include ReverseFundWIPAndClearing
					else
						include ReverseWipAndClearing
					invoke InitiateJournalizeForRunGroup Company.AccountingEntity.FinanceEnterpriseGroup in background
						invoked.PrmJournalizeGroup				= LocalJournalizeGroup
						invoked.PrmJournalizeGroupDescription	= "ProjectAssetInterfaceReversal"

				for each InterfaceSplitRecordsRel
					if (each.TransactionItemCost = 0)
						invoke Delete AssetInterfaceFundsRel
						invoke ProjectAssetInterfaceRelDelete each
					else
						invoke Update each
							initialize invoked.OriginalCost
							initialize invoked.OriginatingAssetInterface

		ReleaseRebalanceNoWIP is an Instance Action
			default label is "ReleaseRebalance"
			valid when (AllowReleaseRebalanceNoWIP)

			Action Rules
				FromRebalanceRelease		= true
				LocalTransactionItemCost 	= sum InterfaceSplitRecordsRel.TransactionItemCost
				SplitRecordOriginalCost		= first InterfaceSplitRecordsRel.OriginalCost
				LocalTransactionAmount		= SplitRecordOriginalCost - LocalTransactionItemCost
				for each InterfaceSplitRecordsRel
					if (each.TransactionItemCost = 0)
						invoke Delete AssetInterfaceFundsRel
						invoke ProjectAssetInterfaceRelDelete each
					else
						invoke Update each
							initialize invoked.OriginalCost
							initialize invoked.OriginatingAssetInterface

		ProjectInterfaceDelete is a Delete Action
			valid when (AllowProjectInterfaceDelete)
			Parameters
				PrmFinanceEnterpriseGroup 	is a FinanceEnterpriseGroup
					default label is "FinanceEnterpriseGroup"
				PrmPostingDate				is Date
					default label is "PostingDate"
			Parameter Rules
				PrmFinanceEnterpriseGroup
					initial value is Company.AccountingEntity.FinanceEnterpriseGroup
				PrmPostingDate
					if (HasWIPAndClearingTransactions)
						required

			Local Fields
				LocalJournalizeGroup 	is a JournalizeGroup

			Entrance Rules
				constraint (!RebalanceError)
					"RebalanceMustBePerformedPriorToDeleteToInsureProperWIPElimination"

			Action Rules

				if (OriginatingAssetInterfaceOptions entered)
	        		if (OriginatingAssetInterfaceOptions.AssetTemplate entered
	        		or  OriginatingAssetInterfaceOptions.AddToBasis)
	        			if (OriginatingAssetInterfaceOptions.AssetClearingAccount entered
						and TransactionItemCost entered)
				            increment GeneralLedgerSystemCodeRel.LastJournalizeGroup
	       					LocalJournalizeGroup 	= GeneralLedgerSystemCodeRel.DerivedJournalizeGroup
	       					if (FundAccounting)
								ActionCode = 1 
								include ReverseFundWIPAndClearing
	       					else
								LocalTransactionItemCost = TransactionItemCost
								invoke Released.Create GLTransactionDetail
									invoked.FinanceEnterpriseGroup	= Company.AccountingEntity.FinanceEnterpriseGroup
									invoked.AccountingEntity		= Company.AccountingEntity
									invoked.System					= "AM"
									invoked.GeneralLedgerEvent		= "CP"
									invoked.Reference				= "ReverseProjectWorkInProcess"
									invoked.Capitalize				= 1
									invoked.Billed					= blank
									invoked.RevenueRecognized		= blank
									invoked.PostingDate				= PrmPostingDate
									invoked.TransactionDate			= PurchaseDate
									invoked.JournalizeGroup			= LocalJournalizeGroup
									if(OriginatingAssetInterfaceOptions.WorkInProcessAccount entered)
										invoked.FinanceCodeBlock		= OriginatingAssetInterfaceOptions.WorkInProcessAccount
									else
										invoked.FinanceCodeBlock		= DistributionCodeBlock
										TransientBypassStructureRelationEdit   = true
										if(!PostWIPToProject)
											initialize invoked.FinanceCodeBlock.Project
											TransientBypassProjectEdits  = true
									invoked.TransactionAmount		= TransactionItemCost
									invoked.CurrencyCode			= Currency
								
								if(OriginatingAssetInterfaceOptions.WorkInProcessAccount not entered)
									TransientBypassStructureRelationEdit   = false
									if(!PostWIPToProject)
										TransientBypassProjectEdits  = false
								invoke Released.Create GLTransactionDetail
									invoked.FinanceEnterpriseGroup	= Company.AccountingEntity.FinanceEnterpriseGroup
									invoked.AccountingEntity		= Company.AccountingEntity
									invoked.System					= "AM"
									invoked.GeneralLedgerEvent		= "CP"
									invoked.Reference				= "ReverseProjectAssetClearing"
									invoked.Capitalize				= 1
									invoked.Billed					= blank
									invoked.RevenueRecognized		= blank
									invoked.PostingDate				= PrmPostingDate
									invoked.TransactionDate			= PurchaseDate
									invoked.JournalizeGroup			= LocalJournalizeGroup
									invoked.FinanceCodeBlock		= OriginatingAssetInterfaceOptions.AssetClearingAccount
									invoked.TransactionAmount		= TransactionItemCost * -1
									invoked.CurrencyCode			= Currency

							invoke InitiateJournalizeForRunGroup PrmFinanceEnterpriseGroup in background
								invoked.PrmJournalizeGroup				= LocalJournalizeGroup
								invoked.PrmJournalizeGroupDescription	= "ProjectAssetInterfaceReversal"

						LocalOriginatingAssetInterface	= OriginatingAssetInterface
						if (LocalOriginatingAssetInterface = blank)
							if (ProjectAssetInterfaceRel exists)
								invoke Delete ProjectAssetInterfaceRel
									invoked.CapitalizePrm = 0
						else
							for each InterfaceSplitRecordsRel
								invoke Update each
									invoked.OriginalCost = TransactionItemCostSum
							invoke Delete ProjectAssetInterfaceRel
								if (RebalanceError = true)
									confirmation required
										"Warning:ThisRecordIsPartOfASplitGLTransaction,TheOriginalGLTransactionWillRemainFlaggedAsCapitalized;Continue?"
									invoked.CapitalizePrm = 1
								else
									invoked.CapitalizePrm = 0
				invoke Delete AssetInterfaceFundsRel

		AssetInterfaceDelete is a Delete Action
			restricted

		ProjectAssetInterfaceRelDelete is a Delete Action
			restricted
			Action Rules
				invoke Delete ProjectAssetInterfaceRel


		Delete is a Delete Action
			restricted
			valid when (!CapitalizationUpgradeInProgress)
			Entrance Rules		
				if (SplitRecordsCreatedDisplay
				and !TransNoCombineEntered)	
					for each InterfaceSplitRecordsRel
						invoke Update each
							invoked.OriginalCost -= TransactionItemCost
				if (InterfaceSystem = "PS")
					if (ProjectAssetInterfaceRel exists)
						invoke DeleteAfterInterface ProjectAssetInterfaceRel

			Action Rules
				invoke Delete AssetInterfaceFundsRel

		OnlineDelete is a Delete Action
			default label is "Delete"
			valid when (AllowOnlineDelete)
			Action Rules
				invoke Delete AssetInterfaceFundsRel

			Exit Rules
				if (InterfaceSystem = "PS")
					if (ProjectAssetInterfaceRel exists)
						if(SplitRecordsCreated)
							invoke DeleteAfterInterface ProjectAssetInterfaceRel
						else
							invoke Delete ProjectAssetInterfaceRel
								if (RebalanceError = true)
									confirmation required
										"Warning:ThisRecordIsPartOfASplitGLTransaction,TheOriginalGLTransactionWillRemainFlaggedAsCapitalized;Continue?"
									invoked.CapitalizePrm = 1
								else
									invoked.CapitalizePrm = 0

		UpdateFromBatch is an Instance Action
			restricted
			Parameters
				PrmFinanceEnterpriseGroup   is a FinanceEnterpriseGroup
				PrmAsset 					is an Asset

			Action Rules
				invoke UpdateFromAssetCreate OriginatingAssetInterfaceOptions
					invoked.AppendToAssetParameter	= PrmAsset


		Transfer is an Instance Action
			valid when (AllowTransferAction)
			Parameters
				NewCompany						is an AssetCompany
				NewTemplate						is an AssetTemplate
				NewProjectInterfaceControl		is a AssetInterfaceOptions
				NewAssetType					is an AssetType
				NewAssetDimensionGroup			is an AssetAccountingUnitGroup
				NewAssetAccountGroup			is an AssetAccountGroup
				NewDefaultTransactionDimensions is a FinanceCodeBlockNoAccountFull
				NewLocation						is an AssetLocation
				NewDivision						is an AssetDivision
				PostingDate						is Date


			Parameter Rules
				NewCompany
					initial value is Company
					LocalCompany 					= NewCompany
					LocalAssetTemplate				= NewTemplate
					LocalAssetInterfaceOptions		= NewProjectInterfaceControl
					LocalAssetType					= NewAssetType
					LocalAssetAccountGroup			= NewAssetAccountGroup
					LocalAssetAccountingUnitGroup	= NewAssetDimensionGroup
					required
				NewTemplate
					initial value is AssetTemplate
					constraint (NewTemplateRel exists)
						"ToTemplateMustBeValidForNewCompany"
					required
				NewProjectInterfaceControl
					initial value is OriginatingAssetInterfaceOptions
					constraint (NewProjectInterfaceControl.AssetCurrency = OriginatingAssetInterfaceOptions.AssetCurrency)
						"ToProjectInterfaceControlMustBeInSameAssetCurrency"
					constraint (NewProjectInterfaceControlRel exists)
						"ToProjectInterfaceControlMustBeValidForNewCompany"
					if (NewProjectInterfaceControl.AssetClearingAccount entered)
						constraint (PostingDate entered)
							"ToProjectInterfaceControlRequiresAPostingDate"
					required
				NewAssetType
					initial value is AssetType
					constraint (NewAssetTypeRel exists)
						"ToTemplateMustBeValidForNewCompany"
				NewAssetAccountGroup
					initial value is AssetAccountGroup
					constraint (NewAssetAccountGroupRel exists)
						"ToTemplateMustBeValidForNewCompany"
				NewAssetDimensionGroup
					initial value is AssetAccountingUnitGroup
					constraint (NewAssetDimensionGroupRel exists)
						"ToTemplateMustBeValidForNewCompany"
				NewDefaultTransactionDimensions
					initial value is AssetAccountingUnit

				NewLocation
					initial value is AssetLocation
					if (NewLocation entered)
						LocalAssetLocation = NewLocation
							constraint (NewAssetLocationRel exists)
								"ToLocation<LocalAssetLocation>DoesNotExist"

				NewDivision
					initial value is AssetDivision
					if (NewDivision entered)
						LocalAssetDivision = NewDivision
							constraint (NewAssetDivisionRel exists)
								"ToDivision<LocalAssetDivision>DoesNotExist"

				PostingDate
					if (HasWIPAndClearingTransactions)
						required

			Action Rules
				invoke TransferCreate AssetInterface
					assign result to AssetInterfaceView

					invoked.TransientAssetInterfaceReference	= reference to this instance
					invoked.TransientProjectInterfaceControl	= NewProjectInterfaceControl
					invoked.PostingDate							= PostingDate
					invoked.Company 							= NewCompany
					invoked.OriginatingAssetInterfaceOptions	= NewProjectInterfaceControl
					invoked.AssetTemplate						= NewTemplate
					invoked.AssetAccountGroup 					= NewAssetAccountGroup
					invoked.AssetAccountingUnitGroup			= NewAssetDimensionGroup
					invoked.AssetAccountingUnit 				= NewDefaultTransactionDimensions
					invoked.AssetLocation						= NewLocation
					invoked.AssetType							= NewAssetType
					invoked.AssetDivision						= NewDivision
					invoked.InterfaceSystem						= "PS"
					fill in fields from this instance
						except invoked.AssetInterface
						except invoked.OriginatingGLTransactionDetail
					if (GLTransactionDetailRel exists)
						invoked.OriginatingGLTransactionDetail	= OriginatingGLTransactionDetail

				LocalAssetInterface		= AssetInterfaceView.AssetInterface
				for each AssetInterfaceFundsRel
					invoke Create AssetInterfaceFund
						invoked.Company							= LocalCompany
						invoked.AssetInterface 					= LocalAssetInterface
						invoked.AccountingEntity				= each.AccountingEntity
						invoked.AccountingUnit					= each.AccountingUnit
						invoked.Project							= each.Project
						invoked.FinanceDimension1				= each.FinanceDimension1
						invoked.FinanceDimension2				= each.FinanceDimension2
						invoked.FinanceDimension3				= each.FinanceDimension3
						invoked.FinanceDimension4				= each.FinanceDimension4
						invoked.FinanceDimension5				= each.FinanceDimension5
						invoked.FinanceDimension6				= each.FinanceDimension6
						invoked.FinanceDimension7				= each.FinanceDimension7
						invoked.FinanceDimension8				= each.FinanceDimension8
						invoked.FinanceDimension9				= each.FinanceDimension9
						invoked.FinanceDimension10				= each.FinanceDimension10
						invoked.PercentContribution				= each.PercentContribution
						invoked.TransactionAmount				= each.TransactionAmount
						if (GLTransactionDetailRel exists)
							invoked.OriginatingGLTransactionDetail	= OriginatingGLTransactionDetail
						invoked.OriginatingAssetCapitalTransaction	= each.OriginatingAssetCapitalTransaction

			Exit Rules

    			if (OriginatingAssetInterfaceOptions.AssetClearingAccount entered
    			or  NewProjectInterfaceControl.AssetClearingAccount entered)
					invoke TransferDelete
						invoked.PrmFinanceEnterpriseGroup 	= FinanceEnterpriseGroup
						invoked.NewProjectInterfaceControl	= NewProjectInterfaceControl
						invoked.NewCompany					= NewCompany
						invoked.PrmPostingDate				= PostingDate
				else
					invoke OnlineDelete

		TransferDelete is a Delete Action
			restricted
			Parameters
				PrmFinanceEnterpriseGroup 	is a FinanceEnterpriseGroup
					default label is "FinanceEnterpriseGroup"
				NewProjectInterfaceControl	is a AssetInterfaceOptions
					default label is "ProjectInterfaceControl"
					context of PrmFinanceEnterpriseGroup
				NewCompany					is an AssetCompany
				PrmPostingDate				is Date
					default label is "PostingDate"
			Parameter Rules
				PrmFinanceEnterpriseGroup
					initial value is Company.FinanceEnterpriseGroup
				PrmPostingDate
					if (HasWIPAndClearingTransactions)
						required

			Local Fields
				LocalJournalizeGroup 	is a JournalizeGroup

			Action Rules
				if (OriginatingAssetInterfaceOptions entered)
	        		if (OriginatingAssetInterfaceOptions.AssetTemplate entered
	        		or  OriginatingAssetInterfaceOptions.AddToBasis)
			            increment GeneralLedgerSystemCodeRel.LastJournalizeGroup
       					LocalJournalizeGroup = GeneralLedgerSystemCodeRel.DerivedJournalizeGroup
       					if (OriginatingAssetInterfaceOptions.AssetClearingAccount entered)
							invoke Released.Create GLTransactionDetail
								invoked.FinanceEnterpriseGroup	= Company.AccountingEntity.FinanceEnterpriseGroup
								invoked.AccountingEntity		= Company.AccountingEntity
								invoked.System					= "AM"
								invoked.GeneralLedgerEvent		= "CP"
								invoked.Reference				= "ReverseProjectWorkInProcess"
								invoked.Capitalize				= 1
								invoked.Billed					= blank
								invoked.RevenueRecognized		= blank
								invoked.PostingDate				= PrmPostingDate
								invoked.TransactionDate			= PurchaseDate
								invoked.JournalizeGroup			= LocalJournalizeGroup
								if(OriginatingAssetInterfaceOptions.WorkInProcessAccount entered)
									invoked.FinanceCodeBlock		= OriginatingAssetInterfaceOptions.WorkInProcessAccount
								else
									invoked.FinanceCodeBlock		= DistributionCodeBlock
									TransientBypassStructureRelationEdit   = true
									if(!PostWIPToProject)
										initialize invoked.FinanceCodeBlock.Project
										TransientBypassProjectEdits  = true
								invoked.TransactionAmount		= TransactionItemCost
								invoked.CurrencyCode			= Currency

							if(OriginatingAssetInterfaceOptions.WorkInProcessAccount not entered)
								TransientBypassStructureRelationEdit   = false
								if(!PostWIPToProject)
									TransientBypassProjectEdits  = false
							invoke Released.Create GLTransactionDetail
								invoked.FinanceEnterpriseGroup	= Company.AccountingEntity.FinanceEnterpriseGroup
								invoked.AccountingEntity		= Company.AccountingEntity
								invoked.System					= "AM"
								invoked.GeneralLedgerEvent		= "CP"
								invoked.Reference				= "ReverseProjectAssetClearing"
								invoked.Capitalize				= 1
								invoked.Billed					= blank
								invoked.RevenueRecognized		= blank
								invoked.PostingDate				= PrmPostingDate
								invoked.TransactionDate			= PurchaseDate
								invoked.JournalizeGroup			= LocalJournalizeGroup
								invoked.FinanceCodeBlock		= OriginatingAssetInterfaceOptions.AssetClearingAccount
								invoked.TransactionAmount		= TransactionItemCost * -1
								invoked.CurrencyCode			= Currency

						if (NewProjectInterfaceControl.AssetClearingAccount entered)
							invoke Released.Create GLTransactionDetail
								invoked.FinanceEnterpriseGroup	= NewCompany.AccountingEntity.FinanceEnterpriseGroup
								invoked.AccountingEntity		= NewCompany.AccountingEntity
								invoked.System					= "AM"
								invoked.GeneralLedgerEvent		= "CP"
								invoked.Reference				= "ProjectAssetWorkInProcess"
								invoked.Capitalize				= 1
								invoked.Billed					= blank
								invoked.RevenueRecognized		= blank
								invoked.PostingDate				= PrmPostingDate
								invoked.TransactionDate			= PurchaseDate
								invoked.JournalizeGroup			= LocalJournalizeGroup
								if(NewProjectInterfaceControl.WorkInProcessAccount entered)
									invoked.FinanceCodeBlock		= NewProjectInterfaceControl.WorkInProcessAccount
								else
									invoked.FinanceCodeBlock		= DistributionCodeBlock
									TransientBypassStructureRelationEdit  = true
									if(!PostWIPToProject)
										initialize invoked.FinanceCodeBlock.Project
										TransientBypassProjectEdits  = true
								invoked.TransactionAmount		= TransactionItemCost * -1
								invoked.CurrencyCode			= Currency
							if(NewProjectInterfaceControl.WorkInProcessAccount not entered)
								TransientBypassStructureRelationEdit   = false
								if(!PostWIPToProject)
									TransientBypassProjectEdits  = false
							invoke Released.Create GLTransactionDetail
								invoked.FinanceEnterpriseGroup	= NewCompany.AccountingEntity.FinanceEnterpriseGroup
								invoked.AccountingEntity		= NewCompany.AccountingEntity
								invoked.System					= "AM"
								invoked.GeneralLedgerEvent		= "CP"
								invoked.Reference				= "ProjectAssetClearing"
								invoked.Capitalize				= 1
								invoked.Billed					= blank
								invoked.RevenueRecognized		= blank
								invoked.PostingDate				= PrmPostingDate
								invoked.TransactionDate			= PurchaseDate
								invoked.JournalizeGroup			= LocalJournalizeGroup
								invoked.FinanceCodeBlock		= NewProjectInterfaceControl.AssetClearingAccount
								invoked.TransactionAmount		= TransactionItemCost
								invoked.CurrencyCode			= Currency


						invoke InitiateJournalizeForRunGroup PrmFinanceEnterpriseGroup in background
							invoked.PrmJournalizeGroup				= LocalJournalizeGroup
							invoked.PrmJournalizeGroupDescription	= "ProjectAssetInterfaceReversal"
						if (InterfaceSystem = "PS")
							if (ProjectAssetInterfaceRel exists)
								invoke DeleteAfterInterface ProjectAssetInterfaceRel

			Exit Rules
				invoke Delete AssetInterfaceFundsRel

		UpdateCombineCode is an Instance Action
			default label is "Update_Combine_Code"
			Parameters
				PrmCombine	is a Combine
					default label is "Combine"
				PrmPurchaseDate is Date
					default label is "PurchaseDate"
			Action Rules
				if (PrmCombine entered)
					LocalCompany			= Company
					LocalAssetTemplate		= AssetTemplate
					LocalCombine			= PrmCombine
					include CombineUpdateValidation
				Combine	= PrmCombine
				if (PrmPurchaseDate entered)
					PurchaseDate = PrmPurchaseDate

		HoldAsset is an Instance Action
			valid when (!HoldAsset)
			default label is "Hold_Asset"
			Action Rules
				HoldAsset	= true

		RemoveHold is an Instance Action
			valid when (HoldAsset)
			default label is "Remove_Hold"
			Action Rules
				HoldAsset	= false






