PhysicalInventorySelect is a BusinessClass
    owned by ic
    prefix is ICS
    classic name is ICSELECT

    Ontology
        symbolic key is PhysicalInventorySelect
            classic set name is ICSSET1
            classic name is SELECT-ID

    Patterns
        implements StaticJava
        disable AuditIndex

    Persistent Fields

        Description
        PageTotalsRequired                    is Boolean
            classic name is PG-TOT-REQ-FL
            restricted
        RequireUnitOfMeasure                  is Boolean
            classic name is UOM-REQ-FL
        CountInTransactionUnitOfMeasure       is Boolean
        CountQuantityRequired                 is Boolean
            classic name is QTY-REQ-FL
        AllLocations                          is Boolean
            classic name is ALL-LOC-FL
        LogicInformationEntered               is Boolean
            classic name is BY-LOGIC-FL
        FreezeDate                            is TimeStamp
        UpdateDate                            is TimeStamp
        FreezePages                           is Numeric size 4
        	protected
        FreezeLines                           is Numeric size 6
        	protected
        EnteredLines                          is Numeric size 6
        	protected
        UnexplainedLines                      is Numeric size 6
            classic name is UNEXPL-LINES
            protected
        LastManualLineNumber                  is Numeric size 2
            classic name is LAST-MAN-LINE
            disable Auditing
        Status                                is Numeric size 1
        	protected
            States
                SelectIDNotInUse        			value is 0
                SelectIDInUse           			value is 1
                SelectIDUpdated         			value is 2
                CountInProgress         			value is 5
                VariancesInProgress					value is 7
				CreationOfFreezeRecordsInProgress	value is 8
        ReportGroup							  is a InventoryReportGroup
            classic name is REPORT-GRP
        FreezeEmptyBins                       is Boolean
            classic name is FRZ-EMPTY-BINS
        IncludeAvailbilityLessThanZero        is Boolean
            classic name is STOCK-OUT-FL
        IncludeNegativeStockOnHand            is Boolean
            classic name is NEG-SOH-FL
        TransactionCount
            classic name is TRANS-COUNT
        CountAccuracy                         is an AccuracyClass1
            classic name is CNT-ACCURACY
        CycleDays                             is Numeric size 3
        NumberOfItems
            classic name is NBR-ITEMS
        FreezeZeroStockOnHand                 is Boolean
            classic name is FRZ-ZERO-SOH
        FreezeZeroUnitCost                    is Boolean
            classic name is FRZ-ZERO-UCOST
        SelectItemsFromClass1                 is a SelectItemsFromClassX
            classic name is SEL-1-ITEMS
        SelectItemsFromClass2                 is a SelectItemsFromClassX
            classic name is SEL-2-ITEMS
        SelectItemsFromClass3                 is a SelectItemsFromClassX
            classic name is SEL-3-ITEMS
        SelectItemsFromClassX
            classic name is SEL-X-ITEMS
        AccuracyClass1
            classic name is ACCURACY-1
        AccuracyClass2                        is an AccuracyClass1
            classic name is ACCURACY-2
        AccuracyClass3                        is an AccuracyClass1
            classic name is ACCURACY-3
        AccuracyClassX                        is an AccuracyClass1
            classic name is ACCURACY-X
        NumberOfItemsClass1                   is a NumberOfItems
            classic name is NBR-1-ITEMS
        NumberOfItemsClass2                   is a NumberOfItems
            classic name is NBR-2-ITEMS
        NumberOfItemsClass3                   is a NumberOfItems
            classic name is NBR-3-ITEMS
        NumberOfItemsClassX                   is a NumberOfItems
            classic name is NBR-X-ITEMS
        CycleDaysClass1
            classic name is CYCLE-DAYS-1
        CycleDaysClass2                       is a CycleDaysClass1
            classic name is CYCLE-DAYS-2
        CycleDaysClass3                       is a CycleDaysClass1
            classic name is CYCLE-DAYS-3
        CycleDaysClassX                       is a CycleDaysClass1
            classic name is CYCLE-DAYS-X
        ConsignmentItemOption                 is Numeric size 1
            classic name is CONSIGNMENT-ST
            States
                IncludeConsignmentItems value is 0
                NoConsignmentItems      value is 1
                OnlyConsignmentItems    value is 2
        PhysicalInventoryItemArray
        PhysicalInventoryBinGroupArray
        PhysicalInventoryMajorMinorClassArray
            classic name for PhysicalInventoryMajorMinorClassArray.InventoryMajorMinorClass.MajorInventoryClass is INVEN-MAJCL
            classic name for PhysicalInventoryMajorMinorClassArray.InventoryMajorMinorClass.MinorInventoryClass is INVEN-MINCL
		LastFreezePage							is Numeric size 4						
        	protected
        LastFreezeLine							is a PhysicalInventoryFreezeLine		
			protected
		BinGroupSelectHeader	
		CreatePhysicalInventoryFreezeBinRecords	is Boolean
		CycleCount								is Boolean
	

	Local Fields
		TempCounter 									is Numeric 2 
		TempCounter2 									is Numeric 2
		LocalLocation									is like InventoryLocation
		LocalItem										is like Item 
		LocalConsignment								is Boolean
		LocalBinGroup									is like BinGroup
		LocalFreezeDate									is AlphaUpper size 8
		LocalFreezeTime									is AlphaUpper size 6
		LocalItemArraySubscript							is Numeric size 3
		LocalItemFound									is Boolean
		TimeStampInGMT
		
        		
	Transient Fields
		BinGroupSelection								is AlphaUpper size 1
			default label is "BinGroupSelection"
			derive value from DerivedBinGroupSelection
        	States
        		BinGroupSelect							value is "B"
        		BinGroup								value is "G"
        

				
    Derived Fields
		DerivedFreezeDate is a DerivedField
			type is Date
			TimeStampInGMT.Value = FreezeDate
			return TimeStampInGMT.CorporateDate

    	DerivedBinGroupSelection is a DerivedField
			type is AlphaUpper size 1
			if (BinGroupSelectHeader entered)
				return "B"
			else
				return "G"
    	IsLogicInformationEntered  is a DerivedField
    		type is Boolean
    		if (LogicInfoExists)
    			return true
    		
		VarianceCount is a ComputeField
			type is Numeric size 8
			(instance count of PhysicalInventoryFreezesWithUnexplainedVarianceRel)  

		DerivedFreezeZeroStockOnHand is a ConditionalField
			type is Alpha size 3
			if (FreezeZeroStockOnHand)
				"Yes"
			else
				"No"
				
		DerivedFreezeZeroUnitCost is a ConditionalField
			type is Alpha size 3
			if (FreezeZeroUnitCost)
				"Yes"
			else
				"No"
				
		DerivedCountInTransactionUnitOfMeasure is a ConditionalField
			type is Alpha size 3
			if (CountInTransactionUnitOfMeasure)
				"Yes"
			else
				"No"
		
		DerivedTagDate is a DerivedField
			type is Alpha size 10
			LocalFreezeDate			= FreezeDate
			return LocalFreezeDate[1:4] + "/" + LocalFreezeDate[5:6] + "/" + LocalFreezeDate[7:8]
			
		DerivedTagTime is a DerivedField
			type is Alpha size 10
			LocalFreezeTime			= FreezeDate
			return LocalFreezeTime[9:10] + ":" + LocalFreezeTime[11:12] + ":" + LocalFreezeTime[13:14]
			
			
		DerivedItemArrayCondition is a DerivedField
			type is LPLText
			initialize LocalItemArraySubscript
			DerivedItemArrayCondition	= "("
			for each PhysicalInventoryItemArray.AdditionalInventoryItem
				LocalItemArraySubscript		+= 1
				if (!each.Item entered)
					end for each
				if (LocalItemArraySubscript = 1)
					DerivedItemArrayCondition += "(Item=\""
					DerivedItemArrayCondition += each.Item
					DerivedItemArrayCondition += "\")"
				else
				if (LocalItemArraySubscript > 1)
					DerivedItemArrayCondition += " or (Item=\""
					DerivedItemArrayCondition += each.Item
					DerivedItemArrayCondition += "\")"
			DerivedItemArrayCondition += ")"
		
		DisplaySelectID is a MessageField
			default label is "SelectI\D"
			"<PhysicalInventorySelect>_-_<Description>"		

		MustFinishPreviousCycle is a MessageField
			"SelectID<PhysicalInventorySelect>InUse;MustFinishPreviousCycle"

		VariancesNotDeleted is a MessageField
			"SelectId<PhysicalInventorySelect>CannotBeUsed;VariancesNotDeleted.ToUseSelectId,Run_'DeleteFreezeRecords'"

		CountInProgress is a MessageField
			"SelectId<PhysicalInventorySelect>CannotBeUsed;CountsInProgress.ToUseSelectId,FinishPreviousCycleOrRun_'DeleteFreezeRecords'"

		DeleteFreezeRecords is a MessageField
			"SelectId<PhysicalInventorySelect>CannotBeUsed;CountsAreEntered.ToUseSelectId,FinishPreviousCycleOrRun_'DeleteFreezeRecords'"

		MobileLocation	is a DerivedField
			type is like InventoryLocation
			return PhysicalInventoryFreezeRel.InventoryLocation

		RepresentativeText is a StringField
			type is Text
			default label is "SelectID"
			PhysicalInventorySelect " - " Description
			
	Context Fields
		InventoryControlResult

    Relations

		PhysicalInventoryFreezesRel								is a PhysicalInventoryFreeze set

		PhysicalInventoryFreezesWithCatchWeightRel				is a PhysicalInventoryFreeze set
			Instance Selection
				where (related.IsCatchWeightItem)
		
        PhysicalInventoryFreezeBinRel 
        	one-to-many relation to PhysicalInventoryFreezeBin
        	Field Mapping uses 	symbolic key
        		related.Company									= Company	
			Instance Selection
				where (related.PhysicalInventorySelect			= PhysicalInventorySelect)        	

        InventoryReportGroupRel
        	one-to-many relation to InventoryReportGroup
        	Field Mapping uses symbolic key
        		related.Company                 				= Company
        		related.InventoryReportGroup					= ReportGroup
       
       	InventoryReportGroupLocationSelectRel
        	one-to-many relation to InventoryReportGroupLocation
        	Field Mapping uses symbolic key
        		related.Company                 				= Company
        		related.InventoryReportGroup					= ReportGroup
        		
       	ItemLocationReportGroupForSelectRel
       		one-to-many relation to ItemLocation
        	Field Mapping uses Set2
        		related.Company                 				= Company	
        		related.Item									= LocalItem  
        
        InventoryLocationRel 
        	one-to-many relation to InventoryLocation
        	Field Mapping uses 	symbolic key
        		related.Company									= Company	
        	
        ItemLocationInventoryLocationRel						
        	one-to-one relation to ItemLocation 
        	Field Mapping uses symbolic key
        		related.Company                 				= Company	
        		related.InventoryLocation						= LocalLocation
        		related.Item									= LocalItem  
        		
        ItemLocationConsignmentRel
        	one-to-one relation to ItemLocation
        	Field Mapping uses Set9
        		related.Company                 				= Company
        		related.InventoryLocation						= LocalLocation
        		related.Consignment 							= LocalConsignment	
        		related.Item									= LocalItem 
        		
        InventoryControlResultRel
        	one-to-many relation to InventoryControlResult
        	Field Mapping uses symbolic key
        		related.FinanceEnterpriseGroup                  = actor.context.FinanceEnterpriseGroup
        	Instance Selection
        		where (related.IsPhysicalInventoryCountSheets
        		and    related.ParametersPhysicalInventoryCountSheets.PhysicalInventorySelect = PhysicalInventorySelect)
        
        PhysicalInventoryFreezesForNewLocationRel				is a PhysicalInventoryFreeze set
        	Instance Selection
        		where (related.HasAnotherInventoryLocation) 
        		
        PhysicalInventoryFreezesNoCountEnteredRel					is a PhysicalInventoryFreeze set
        	Instance Selection
        		where (related.CountEntered 					= false)	
        	
        PhysicalInventoryFreezeRel is a PhysicalInventoryFreeze set
        
		PhysicalInventoryFreezesWithVarianceRel is a PhysicalInventoryFreeze set
			Instance Selection
				where (related.VariancesExistAndReasonNotEntered)
				
		PhysicalInventoryFreezesWithUnexplainedVarianceRel is a PhysicalInventoryFreeze set
			Instance Selection
				where (related.VariancesExist
				and    related.InventoryReasonCode !entered
				and    related.CountEntered = true)      
        	
		LocalBinGroupLocationsRel
			one-to-many relation to BinGroup
			Field Mapping uses Set2
				related.Company									= Company
				related.BinGroup								= LocalBinGroup
	
		BinGroupSelectDetailsRel
			one-to-many relation to BinGroupSelectDetail
			Field Mapping uses symbolic key
				related.Company									= Company
				related.BinGroupSelectHeader					= BinGroupSelectHeader

		PhysicalInventoryFreezesCountEnteredRel					is a PhysicalInventoryFreeze set
			Instance Selection
				where (related.InventoryReasonCode !entered
				and    related.CountEntered = true)

		MSCMInventoryFreezeRel
			one-to-many relation to PhysicalInventoryFreeze
			Field Mapping uses symbolic key
				related.Company					= Company
				related.PhysicalInventorySelect	= PhysicalInventorySelect

		MobileSupplyChainResourceRel
			one-to-one relation to MobileSupplyChainResource
			Field Mapping uses symbolic key
				related.HROrganization 				= actor.agent(Employee).HROrganization
				related.MobileSupplyChainResource   = actor.agent(Employee).Employee
        		 
		MobileSupplyChainResourceCompanyAccessRel
    		one-to-many relation to MobileSupplyChainResourceAccess
    		Field Mapping uses symbolic key
    			related.HROrganization					= actor.agent(Employee).HROrganization
    			related.MobileSupplyChainResource		= actor.agent(Employee).Employee
    			related.Company							= Company

			
	Conditions

		LogicInfoExists
			restricted
			when (SelectItemsFromClass1 entered
        	or SelectItemsFromClass2 	entered
        	or SelectItemsFromClass3 	entered
        	or SelectItemsFromClassX 	entered
        	or TransactionCount 		entered
        	or CountAccuracy 			entered
        	or CycleDays   				entered                       
        	or NumberOfItems 			entered
        	or IncludeAvailbilityLessThanZero
        	or IncludeNegativeStockOnHand)
			
		UnexplainedVariancesOnly
			restricted
			when (PhysicalInventoryFreezesWithUnexplainedVarianceRel exists
			and   Status.SelectIDUpdated)	
		
		NoResultRecords
			restricted
			when (InventoryControlResultRel !exists)
		
		MovexExists
			restricted
			when (SelectItemsFromClass1 entered
        	or SelectItemsFromClass2 entered
        	or SelectItemsFromClass3 entered
        	or SelectItemsFromClassX entered)
        	
 		NotInUse
			restricted
			when (Status.SelectIDNotInUse)
		
		IsSelectIdInUseOrUpdated
			restricted
			when (Status.SelectIDInUse
			or    Status.SelectIDUpdated
			or    Status.CountInProgress)
			
		IsSelectIdInUseOrCountInProgress
			restricted
			when (Status.SelectIDInUse
			or    Status.CountInProgress)

		IsSelectIdInUseOrCountInProgressWithoutCatchWeight
			restricted
			when ((Status.SelectIDInUse
			or     Status.CountInProgress)
			and    not HasCatchWeightItem)

		IsSelectIdInUseOrCountInProgressWithCatchWeight
			restricted
			when ((Status.SelectIDInUse
			or     Status.CountInProgress)
			and    HasCatchWeightItem)
		
		PhysicalInventoryBinInUseOrCountInProgress
			restricted
			when (IsSelectIdInUseOrCountInProgress
			and   PhysicalInventoryFreezeBinRel exists)

		SelectIDForInterface
			restricted
			when (Status.SelectIDInUse
			or    Status.CountInProgress
			or    Status.SelectIDNotInUse)
		
		AllFreezesCounted
			when (PhysicalInventoryFreezesNoCountEnteredRel not exists)
			
		FreezesExist
			restricted
			when (PhysicalInventoryFreezeRel exists)
        	
		MarkAllLinesAsCounted
			when (PhysicalInventoryFreezesNoCountEnteredRel exists)
			
		BinGroupLocationRelExists
			when (LocalBinGroupLocationsRel exists)

 		MassFreezeHasRun
			restricted
			when (!Status.SelectIDNotInUse)
			
		HasCatchWeightItem
			restricted
			when (PhysicalInventoryFreezesWithCatchWeightRel exists)	

		IsNotInUseAndVarianceInProgress
			when (Status.SelectIDNotInUse
			or    Status.VariancesInProgress)
		
		RecordExists
			when (PhysicalInventorySelect exists)
		

		IsAccessibleByMobileSupplyChainResource
        	restricted
        	when (MSCMGlobalLocationAccess or  MobileSupplyChainResourceCompanyAccessRel exists)

		MSCMGlobalLocationAccess
			restricted
			when (MobileSupplyChainResourceRel.GlobalLocationAccess)

		IsAccessibleSelectID
			restricted
			when ((IsAccessibleByMobileSupplyChainResource) 
			and (PhysicalInventoryFreezeRel exists)
			and (Status.SelectIDInUse or Status.CountInProgress))

		
    Field Rules
    
        Description
            required

        CountQuantityRequired
            initial value is true
            
        RequireUnitOfMeasure
        	if (CountInTransactionUnitOfMeasure)
        		constraint (!RequireUnitOfMeasure)
        			"CannotRequireUnitOfMeasureWhenCountingInTransactionUnitOfMeasure"
        
        CountInTransactionUnitOfMeasure
        	if (CountInTransactionUnitOfMeasure)
        		constraint (!RequireUnitOfMeasure)
        			"CannotRequireUnitOfMeasureWhenCountingInTransactionUnitOfMeasure"
        
        PhysicalInventorySelect
        	if (action type.Update)
        		constraint (!Status.SelectIDUpdated)
        			"CannotChangeSelectIDIsInUse"         					
        			
        ReportGroup
        	if (!AllLocations)	
        		required
        			"MustSelectReportGroupWhenAllLocationsFlag=N"				
        	else
        		cannot be entered 
        			"LeaveReportGroupShouldBeBlankWhenSelectingAll"				
        
        SelectItemsFromClass1
        	if (NumberOfItemsClass1 entered
        	or CycleDaysClass1 entered
        	or AccuracyClass1 entered)
        		default to SelectItemsFromClass1.CountItemsInThisClass
        
        SelectItemsFromClass2
        	if (NumberOfItemsClass2 entered
        	or CycleDaysClass2 entered
        	or AccuracyClass2 entered)
        		default to SelectItemsFromClass2.CountItemsInThisClass
        
        SelectItemsFromClass3
        	if (NumberOfItemsClass3 entered
        	or CycleDaysClass3 entered
        	or AccuracyClass3 entered)
        		default to SelectItemsFromClass3.CountItemsInThisClass
        
        SelectItemsFromClassX
        	if (NumberOfItemsClassX entered
        	or CycleDaysClassX entered
        	or AccuracyClassX entered)
        		default to SelectItemsFromClassX.CountItemsInThisClass
        		
        PhysicalInventoryBinGroupArray
        	initialize TempCounter
   	        while (TempCounter < 20)
				TempCounter += 1
	        	if (LogicInfoExists)
					constraint (PhysicalInventoryBinGroupArray.PhysicalInventoryBinGroup[TempCounter].BinGroup not entered)
						"CannotEnterBothBinGroupsAndLogicInfo"     									

    			if (PhysicalInventoryBinGroupArray.PhysicalInventoryBinGroup[TempCounter].BinGroup entered)
    				LocalBinGroup			= PhysicalInventoryBinGroupArray.PhysicalInventoryBinGroup[TempCounter].BinGroup
    				constraint (first LocalBinGroupLocationsRel.BinGroup entered)
    					"BinGroup<LocalBinGroup>DoesNotExistForAnyLocation"
        					 					
        FreezeEmptyBins
            initial value is true
            
        PhysicalInventoryItemArray
        	initialize TempCounter
        	while (TempCounter < 36)
				TempCounter += 1
				if (PhysicalInventoryItemArray.AdditionalInventoryItem[TempCounter].Item entered)
					if (ReportGroup entered)
						LocalItem		= PhysicalInventoryItemArray.AdditionalInventoryItem[TempCounter].Item
						LocalItemFound	= false
						for each InventoryReportGroupLocationSelectRel
							LocalLocation = each.InventoryLocation
							if (ItemLocationInventoryLocationRel exists)
								LocalItemFound			= true
								end for each

						constraint (LocalItemFound)
							"Item<LocalItem>DoesNotExistAtAnyLocationInSpecifiedReportGroup"   				
					else
					if (AllLocations)						
						LocalItem	= PhysicalInventoryItemArray.AdditionalInventoryItem[TempCounter].Item
						constraint (ItemLocationReportGroupForSelectRel exists)
							"Item<LocalItem>DoesNotExistAtAnyLocationsWithinCompany"     							

				if (PhysicalInventoryItemArray.AdditionalInventoryItem[TempCounter].Item entered
				and ConsignmentItemOption entered
				and !ConsignmentItemOption.IncludeConsignmentItems
				and ReportGroup entered)
					if 	(ConsignmentItemOption.NoConsignmentItems)
						LocalConsignment = false
					else
						LocalConsignment = true
					for each InventoryReportGroupLocationSelectRel
						initialize LocalLocation
						LocalLocation = each.InventoryLocation
						if (ItemLocationConsignmentRel not exists)
							constraint (ConsignmentItemOption.NoConsignmentItems)
								"NoConsignmentItemMustBeSelectedfor<LocalLocation>"					
							constraint (ConsignmentItemOption.OnlyConsignmentItems)
								"OnlyConsignmentItemsMustBeSelected<LocalLocation>"					
						
					
				if ((PhysicalInventoryItemArray.AdditionalInventoryItem[TempCounter].Item entered)
				and AllLocations
				and ConsignmentItemOption entered
				and !ConsignmentItemOption.IncludeConsignmentItems)
					if 	(ConsignmentItemOption.NoConsignmentItems)
						LocalConsignment = false
					else
						LocalConsignment = true
					for each InventoryLocationRel
						initialize LocalLocation
						LocalLocation = each.InventoryLocation
						if (ItemLocationConsignmentRel not exists)
							constraint(ConsignmentItemOption.NoConsignmentItems)
								"NoConsignmentItemMustBeSelectedfor<LocalLocation>"					
							constraint(ConsignmentItemOption.OnlyConsignmentItems)
								"OnlyConsignmentItemsMustBeSelected<LocalLocation>"					
										
				if (PhysicalInventoryItemArray.AdditionalInventoryItem[TempCounter].Item entered)
					while (TempCounter2 < 20)
						TempCounter2 += 1
						constraint (PhysicalInventoryBinGroupArray.PhysicalInventoryBinGroup[TempCounter2].BinGroup not entered)
							"CannotEnterBothItemsAndBinGroups"     								
						constraint (BinGroupSelectHeader not entered)
							"CannotEnterBothItemsAndBinGroupSelect"     								
									
        AllLocations
        	if (AllLocations)
        		constraint (ReportGroup not entered)
        			"LeaveReportGroupBlankWhenSelectingAll"   			
        	
		CountAccuracy
			if (MovexExists)
				cannot be entered 
					"ClassInformationExistsMustLeaveAccuracyBlank"				
					
		CycleDays
			if (MovexExists)
				cannot be entered
					"ClassInformationExistsMustLeaveCycleDaysBlank"				
					
		NumberOfItems
			if (MovexExists)
				cannot be entered
					"ClassInformationExistsMustLeaveNumberOfItemsBlank"			
					
		LastFreezePage
			default to 1
        








		BinGroupSelectHeader
			if (PhysicalInventoryBinGroupArray.PhysicalInventoryBinGroup[1] entered)
				cannot be entered
					"CannotEnterBothBinGroupSelectAndIndividualBinGroups"						
    Actions
		Create is a Create Action








			
		Update is an Update Action













									
		Delete is a Delete Action
			valid when (NotInUse)
			
			Entrance Rules
				constraint (NoResultRecords) 
					"CannotDeleteAfterCountSheetsHaveBeenPrinted"

		Release is an Instance Action
			valid when (MarkAllLinesAsCounted)
			Action Rules
				confirmation required	
					"AllFreezeLinesNotMarkedAsCountedWillBeMarkedAsCounted;Proceed?"

				invoke Release PhysicalInventoryFreeze
					invoked.PrmCompany					= Company
					invoked.PrmPhysicalInventorySelect	= PhysicalInventorySelect
		
				Status = Status.SelectIDInUse

		CreateFreezePageAndLine					is an Instance Action
			restricted
			Action Rules

				if (LastManualLineNumber = 15)
					FreezePages 	    	   	+= 1
					LastManualLineNumber 		= 1
					FreezeLines					+= 1
					initialize LastFreezeLine			
					LastFreezePage				= FreezePages	
				else
		   			LastManualLineNumber		+= 1
		   			FreezeLines					+= 1 
				    if (FreezePages not entered)	
						FreezePages				= 1



		FastUpdateLastFreezeLinePage			is an Instance Action
			restricted
			Action Rules
				
				LastFreezeLine					= 0
				LastFreezePage					+= 1

		FastUpdateLastFreezeLineFromError is an Instance Action
			restricted
			Action Rules
				
				LastFreezeLine					-= 1
									
		InitializeLineCounts is an Instance Action
			restricted
			Action Rules	
				initialize EnteredLines							
				initialize UnexplainedLines
				initialize LastManualLineNumber			
				initialize FreezeLines
				initialize FreezePages
						
		UpdateFreezePageAndLine is an Instance Action
			restricted
			refresh and lock this instance
			Parameters
				PrmUnexplainedLines				is Numeric size 6
				PrmEnteredLines					is Numeric size 6
				PrmFreezeLines					is Numeric size 6
				PrmFreezePages					is Numeric size 6
				PrmInitializeManualLineNumber   is Boolean

			Action Rules	
				if (PrmUnexplainedLines entered)
					UnexplainedLines += PrmUnexplainedLines

				if (PrmEnteredLines entered)
					EnteredLines 	+= PrmEnteredLines

				if (PrmFreezeLines entered)	

					FreezeLines		+= PrmFreezeLines
					
				if (PrmFreezePages entered)	
					FreezePages		+= PrmFreezePages
					LastFreezePage	= FreezePages		
					
				if (PrmInitializeManualLineNumber)
				 	initialize LastManualLineNumber
				 	initialize LastFreezeLine			


				if (FreezeLines not entered)
					initialize EnteredLines							
					initialize UnexplainedLines	
					initialize LastManualLineNumber			
		
		ResetFreezePageAndLine is an Instance Action
			restricted
			Action Rules	
				initialize EnteredLines							
				initialize UnexplainedLines	
				initialize LastManualLineNumber	
				if (initiating action !="CreateFreezeRecords")		
					initialize Status
				LastFreezePage	= 1
				initialize LastFreezeLine
						
		UpdateEnteredLinesByBatch	is an Instance Action
			restricted
			Parameters
				PrmEnteredLines				is Numeric size 6

			Action Rules	
				if (PrmEnteredLines entered)
					EnteredLines 	+= PrmEnteredLines
				
				if (AllFreezesCounted)
					Status = Status.SelectIDInUse
					
		UpdateSelectIDStatus		is an Instance Action
			restricted
			Action Rules
				if (AllFreezesCounted)
					Status = Status.SelectIDInUse
				else
					Status = Status.CountInProgress
			 
		CreatePhysicalInventoryCountSheets is an Instance Action
			valid when (IsSelectIdInUseOrCountInProgress)
			Parameters
				Description									is a Description4
					default label is "ReportDescription"
				PrmInventoryCompany                         is an InventoryCompany 
				PrmPhysicalInventorySelect                  is a PhysicalInventorySelect
				PrmPrintTags                                is Boolean
				PrmPrintCountSheets                         is Boolean
				PrmPrintFreezeQuantityOnDocuments           is Boolean
				PrmPrintOnlyThisPage                        is Numeric size 6
				PrmNotificationGroup                        is an ActorGroup
				PrintParameters                             is Boolean
				
			Parameter Rules
			
				PrmInventoryCompany
					initial value is Company
					
				PrmPhysicalInventorySelect
					initial value is PhysicalInventorySelect
				
				PrintParameters
					initial value is true
			
			Action Rules
				
				invoke CreatePhysicalInventoryCountSheets InventoryControlResult
					invoked.Description        = Description
					invoked.ParametersPhysicalInventoryCountSheets.InventoryCompany 		= PrmInventoryCompany
					invoked.ParametersPhysicalInventoryCountSheets.PhysicalInventorySelect 	= PrmPhysicalInventorySelect
					invoked.ParametersPhysicalInventoryCountSheets.PrintTags                = PrmPrintTags
					invoked.ParametersPhysicalInventoryCountSheets.PrintCountSheets         = PrmPrintCountSheets
					invoked.ParametersPhysicalInventoryCountSheets.PrintFreezeQuantityOnDocuments = PrmPrintFreezeQuantityOnDocuments
					invoked.ParametersPhysicalInventoryCountSheets.PrintOnlyThisPage        = PrmPrintOnlyThisPage
					invoked.ParametersPhysicalInventoryCountSheets.NotificationGroup        = PrmNotificationGroup
					invoked.PrintParameters    = PrintParameters
					 
		CreateFreezeRecords is an Instance Action
			valid when (Status.SelectIDNotInUse)
			Parameters
				PrmActorGroup					is an ActorGroup

			Local Fields
				LocalAsyncId							is an AsyncActionRequest
				
			Entrance Rules				
				if (Status.SelectIDInUse
				or  Status.CreationOfFreezeRecordsInProgress)
					constraint (Status.SelectIDNotInUse)
						"<MustFinishPreviousCycle>"
				if (Status.SelectIDUpdated)
					constraint (Status.SelectIDNotInUse)
						"<VariancesNotDeleted>"
				if (Status.CountInProgress)
					constraint (Status.SelectIDNotInUse)
						"<CountInProgress>"
				constraint (!PhysicalInventorySelect.EnteredLines entered)
					"<DeleteFreezeRecords>"	
				Status = Status.CreationOfFreezeRecordsInProgress	
					

			Action Rules

				invoke DeleteFreezeRecords PhysicalInventoryFreeze in foreground
					invoked.PrmCompany						= Company
					invoked.PrmPhysicalInventorySelect		= PhysicalInventorySelect
					invoked.PrmDoNotSendNotification		= true





				initialize EnteredLines							
				initialize UnexplainedLines
				initialize LastManualLineNumber			
				initialize FreezeLines
				initialize FreezePages







				if (BinGroupSelectHeader entered
				or  PhysicalInventoryBinGroupArray.PhysicalInventoryBinGroup[1] entered)
					invoke BuildBinGroupBusinessClassGroup in background
						assign async action background group id to LocalAsyncId
						invoked.PrmCompany				= Company
						invoked.PrmSelectId				= PhysicalInventorySelect
				else

					if (PhysicalInventoryItemArray.AdditionalInventoryItem[1] entered)
						invoke BuildItemArrayDynamicCondition in background
							assign async action background group id to LocalAsyncId
							invoked.PrmCompany				= Company
							invoked.PrmSelectId				= PhysicalInventorySelect


					if (ReportGroup entered)
						invoke FreezeLocationsInReportGroup	InventoryReportGroupLocation in background
							assign async action background group id to LocalAsyncId
							invoked.PrmCompany				= Company
							invoked.PrmSelectId				= PhysicalInventorySelect
					else
					if (AllLocations)
						invoke FreezeAllLocationsForCompany InventoryLocation in background
							assign async action background group id to LocalAsyncId
							invoked.PrmCompany					= Company
							invoked.PrmSelectId					= PhysicalInventorySelect	





				invoke CreateFreezeLinesFromWork PhysicalInventoryFreezeLineWork in background
					run outside of action background group
		   			run after action background group LocalAsyncId
					invoked.PrmCompany						= Company
					invoked.PrmSelectId						= PhysicalInventorySelect
					invoked.PrmActorGroup					= PrmActorGroup
				
		
		DeleteFreezeRecords is an Instance Action
			valid when (FreezesExist)
			Parameters
				PrmDoNotSendNotification			is Boolean
				PrmActorGroup						is an ActorGroup			
			Action Rules
				confirmation required
					"AllFreezeLinesForPhysicalInventorySelect<PhysicalInventorySelect>WillBeDeleted;Proceed?"
				invoke DeleteFreezeRecords PhysicalInventoryFreeze
					invoked.PrmCompany    				= Company
					invoked.PrmPhysicalInventorySelect  = PhysicalInventorySelect
					invoked.PrmDoNotSendNotification    = PrmDoNotSendNotification
					invoked.PrmActorGroup 				= PrmActorGroup
		
		UpdateToSelectIDStatusUpdated		is an Instance Action
			restricted
			Action Rules
				Status = Status.SelectIDUpdated

		UpdateToCreationOfFreezeRecordsInProgress		is an Instance Action
			restricted
			Action Rules
				Status = Status.CreationOfFreezeRecordsInProgress
			 
		UpdateToSelectIDStatusInUse		is an Instance Action
			restricted
			Action Rules
				Status 		= Status.SelectIDInUse
				FreezeDate	= current timestamp
			 


		BuildBinGroupBusinessClassGroup is an Instance Action
			restricted
			Parameters
				PrmCompany				is an InventoryCompany
				PrmSelectId				is a PhysicalInventorySelect
				
			Local Fields
				LocalBusinessClass				is a BusinessClass
				LocalBinGroupGroup				is a BusinessClassGroup
				LocalBinGroupCondition			is LPLText
				LocalQuote						is Alpha 1

			Exit Rules			


				invoke FreezeBinGroups BinGroupDetail
					invoked.PrmCompany						= PrmCompany
					invoked.PrmSelectId						= PrmSelectId
					invoked.PrmBinGroupBusinessClassGroup	= ("_BinGroup_" + Company + "/" + PhysicalInventorySelect + "_")
					
			Action Rules

				LocalQuote					= "\""
				LocalBinGroupCondition		= "("

				for each BinGroupSelectDetailsRel	
					if (!each.BinGroup entered)
						end for each
					if (LocalBinGroupCondition = "(")
						LocalBinGroupCondition += "(BinGroup.BinGroup="
						LocalBinGroupCondition += LocalQuote
						LocalBinGroupCondition += each.BinGroup
						LocalBinGroupCondition += LocalQuote
						LocalBinGroupCondition += ")"
					else
						LocalBinGroupCondition += " or (BinGroup.BinGroup="
						LocalBinGroupCondition += LocalQuote
						LocalBinGroupCondition += each.BinGroup
						LocalBinGroupCondition += LocalQuote
						LocalBinGroupCondition += ")"

				if (PhysicalInventoryBinGroupArray.PhysicalInventoryBinGroup[1] entered)
					for each PhysicalInventoryBinGroupArray.PhysicalInventoryBinGroup
						if (!each.BinGroup entered)
							end for each
						if (LocalBinGroupCondition = "(")
							LocalBinGroupCondition += "(BinGroup.BinGroup="
							LocalBinGroupCondition += LocalQuote
							LocalBinGroupCondition += each.BinGroup
							LocalBinGroupCondition += LocalQuote
							LocalBinGroupCondition += ")"
						else
							LocalBinGroupCondition += " or (BinGroup.BinGroup="
							LocalBinGroupCondition += LocalQuote
							LocalBinGroupCondition += each.BinGroup
							LocalBinGroupCondition += LocalQuote
							LocalBinGroupCondition += ")"
				LocalBinGroupCondition += ")"

				LocalBusinessClass            = "BinGroup"
				LocalBinGroupGroup            = ("_BinGroup_" + Company + "/" + PhysicalInventorySelect + "_")

				if (!LocalBinGroupGroup exists)
					invoke Create BusinessClassGroup
						invoked.BusinessClass         = LocalBusinessClass
						invoked.BusinessClassGroup    = LocalBinGroupGroup
						invoked.Description           = ("Group For SelectId " + PhysicalInventorySelect)
						invoked.Active                = true
						invoked.Condition             = LocalBinGroupCondition
				else
					invoke Update LocalBinGroupGroup
						invoked.Condition             = LocalBinGroupCondition							



		BuildItemArrayDynamicCondition is an Instance Action
			restricted
			Parameters
				PrmCompany				is an InventoryCompany
				PrmSelectId				is a PhysicalInventorySelect
				
			Action Rules


	   			if (ReportGroup entered)
	   				for each InventoryReportGroupLocationSelectRel
						invoke FreezeItemsInArray ItemLocation
							invoked.PrmCompany						= PrmCompany
							invoked.PrmSelectId						= PrmSelectId
							invoked.PrmItemArrayCondition			= DerivedItemArrayCondition
							invoked.PrmInventoryLocation			= each.InventoryLocation
				else   				
					invoke FreezeItemsInArray ItemLocation
						invoked.PrmCompany						= PrmCompany
						invoked.PrmSelectId						= PrmSelectId
						invoked.PrmItemArrayCondition			= DerivedItemArrayCondition
						initialize invoked.PrmInventoryLocation

		SendFreezeCompletionNotification is an Instance Action
			restricted
			Parameters
				PrmActorGroup					is an ActorGroup
				PrmFreezeCount					is Numeric size 9
				
			Local Fields
				LocalActor						is an Actor
								
			Action Rules
				LocalActor						= actor
				
				if (PrmActorGroup entered)
					send notification
						to PrmActorGroup
						description is "MassFreezeOfSelectId:<PhysicalInventorySelect>IsComplete.FreezeRecordsAdded:<PrmFreezeCount>"
						priority is high
						detail is "MassFreezeOfSelectId:<PhysicalInventorySelect>IsComplete.FreezeRecordsAdded:<PrmFreezeCount>"
				else			   								
					send notification
						to LocalActor
						description is "MassFreezeOfSelectId:<PhysicalInventorySelect>IsComplete.FreezeRecordsAdded:<PrmFreezeCount>"
						priority is high
						detail is "MassFreezeOfSelectId:<PhysicalInventorySelect>IsComplete.FreezeRecordsAdded:<PrmFreezeCount>"
				
