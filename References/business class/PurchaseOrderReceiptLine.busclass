PurchaseOrderReceiptLine is a BusinessClass
    owned by po
    prefix is PRL
    classic name is PORECLINE

    Ontology
        symbolic key is PurchaseOrderReceiptLine
            classic set name is PRLSET1
            classic name is LINE-NBR
            classic name for PurchaseOrderReceipt is REC-NUMBER

    Patterns
        implements ContextualParent
        implements StaticJava
        disable AuditIndex
        implements Archivable


    Persistent Fields

        ReferenceNumber
            classic name is REFERENCE-NO
        PurchaseOrder
        PurchaseOrderLine
            classic name is PO-LINE-NBR
        Item
        Description
        ItemType							
        VendorItem
            classic name is VEN-ITEM
        ShipToLocation                     is an InventoryLocation
            classic name is LOCATION
        ProcessLevel                       is a PayablesProcessLevel
        VendorPriceUOM                     is a UnitOfMeasure		
            classic name is VPRI-UOM
        ReceivedUOM                        is a UnitOfMeasure		
            classic name is ENT-REC-UOM
        EnteredReceivedQuantity            is a Quantity 
            classic name is ENT-REC-QTY
            precision is DerivedNumberOfDecimalsQuantity
        ReceivedUOMMultiplier              is an UOMMultiplier
            classic name is ENT-RUOM-MULT
        RejectedQuantity                   is a Quantity
            classic name is REJECT-QTY
            precision is DerivedNumberOfDecimalsQuantity
        OriginalReceivedQuantity           is a Quantity 
            classic name is ORIG-REC-QTY
            precision is DerivedNumberOfDecimalsQuantity
        OriginalCatchWeightQuantity        is a Quantity
            precision is DerivedNumberOfDecimalsQuantity
        CatchWeightQuantity                is a Quantity
            classic name is CATCH-WT-QTY
            default label is "StockQuantity"
            precision is DerivedNumberOfDecimalsQuantity
        OriginalUnitCost                   is an InternationalCost
            classic name is ORIG-UNIT-CST
            precision is DerivedNumberOfDecimalsCost
        MatchUnitCost                      is an InternationalCost
            classic name is MATCH-UNIT-CST
            precision is DerivedNumberOfDecimalsCost
        Bin
        CancelBackorder                    is Boolean
            classic name is CANCEL-BO-FL
        InspectionRequired                 is Boolean
            classic name is INSP-REQ-FL
        DetailsInBalance                   is Boolean
            classic name is DETAIL-BAL-FL
        Status                             is Numeric size 1
            States
                Entered                      		value is 0
                	default label is "Entered_/Unreleased"
				ReleasedInspected            		value is 1
                    default label is "Released_/Inspected"
				ReleasedPendingTwoStepReceiving		value is 4
					default label is "Released_/PendingTwoStepReceiving"
                ReleasedRequiresInspection   		value is 5
                    default label is "Released_/Requires Inspection"
                ReleasedUnreleasedInspection 		value is 6
                    default label is "Released_/Unreleased Inspection"
        BuyerMessage                       is Boolean
            classic name is BUYER-MSG-FLAG
        LastPurchaseOrderTransactionDetail
            sql name is LPOrderTransactionDetail
            classic name is LAST-POT-SEQ
            disable Auditing
        UpdateDate                         is TimeStamp
        ReceivedDate                       is Date
            classic name is REC-DATE
        Vendor
        Invoice
        Suffix
        MSDSRequired                       is Boolean
            classic name is MSDS-FLAG
        MSDSVersion
        MSDSDocument
        MatchedQuantity                    is a Quantity 
            classic name is MATCHED-QTY
            precision is DerivedNumberOfDecimalsQuantity
        MatchObjectID                      is an ObjId
            classic name is MATCH-OBJ-ID
        MatchDetailKey
            classic name is MATCH-DTL-KEY
        ArchivedQuantity                   is a Quantity 
            classic name is ARCHIVE-QTY
            precision is DerivedNumberOfDecimalsQuantity
        ArchivedWriteOffQuantity           is a Quantity
            classic name is ARCH-WO-QTY
            precision is DerivedNumberOfDecimalsQuantity
     	VendorPriceUOMMultiplier           is an UOMMultiplier
            classic name is VPRI-UOM-MULT
     	VendorPriceUOMQuantity             is a Quantity
            classic name is VPRI-QUANTITY
            precision is DerivedNumberOfDecimalsQuantity
        OpenToMatchQuantity                is a Quantity  
            classic name is OPEN-TO-MATCH
            precision is DerivedNumberOfDecimalsQuantity
        BuyUOMQuantity                     is a Quantity
            classic name is BUOM-QTY
            precision is DerivedNumberOfDecimalsQuantity
        VendorBuyUOM                       is a UnitOfMeasure
            classic name is VBUY-UOM
        VendorBuyUOMMultiplier             is an UOMMultiplier
            classic name is VBUY-UOM-MULT
        ChargebackQuantity                 is a Quantity 
            classic name is CHARGEBACK-QTY
            precision is DerivedNumberOfDecimalsQuantity
        WriteOffQuantity                   is a Quantity 
            classic name is WRITE-OFF-QTY
            precision is DerivedNumberOfDecimalsQuantity
        MatchSequence
            classic name is MATCH-SEQ-NBR
        TaxCode
        TaxableUnitCost                    is an InternationalCost
            classic name is TAX-UNIT-CST
            precision is DerivedNumberOfDecimalsCost
        ExtendedAmount                     is an InternationalAmount
            classic name is EXTENDED-AMT
        VendorReturn
            classic name is RETURN-NUMBER
        VendorReturnLine
            classic name is RET-LINE-NBR
        FullyDelivered                     is Boolean
            classic name is FULLY-DELIV
        ReceivedAllocatedQuantity          is a Quantity
            classic name is REC-ALLOC-QTY
            precision is DerivedNumberOfDecimalsQuantity
        TaxUsageCode
            classic name is TAX-USAGE-CD
        IntrastatNumber
            classic name is INTRASTAT-NBR
        ManufacturerID
            classic name is MANUF-ID
        ManufacturerNumber
            classic name is MANUF-NBR
        ShipToFacility
            classic name is ST-FACILITY
        CatchWeightCost                    is an InternationalCost
            classic name is CATCH-WGT-COST
            precision is DerivedNumberOfDecimalsCost
        CommodityCode					   is a CommCodes
        ChargeQuantity                     is a Quantity
            classic name is CHARGE-QTY
            precision is DerivedNumberOfDecimalsQuantity
        ProductTaxCategory
            classic name is PROD-TAX-CAT
        ItemGTIN
            classic name is GTIN
        EAMOperationNumber                 is an OperationNumber
            classic name is EAM-OPER-NBR
        EAMSequenceNumber                  is a SeqNbr
            classic name is EAM-SEQ-NBR
        EAMWorkOrderNumber                 is a WorkOrderNumber
            classic name is EAM-WO-NBR
        CreatedBy                          is an Operator 
        	holds pii
        LastUpdateDate                     is TimeStamp
            classic name is LAST-UPDT-DATE
        LastUpdateBy                       is an Operator 
        	holds pii
        GlobalLineType
            classic name is GLBL-LINE-TYPE
		IsCancelRemaining					is Boolean
		StockUOMFlag						is Boolean
			classic name is STOCK-UOM-FL
		MultipleBins                  		is Boolean
		InterfaceInProcess					is Boolean
		OriginatingInterfaceRun				is a PurchaseOrderReceiptInterfaceResult
			delete ignored
		HSNSACCode         
        FreightTotal				  is an InternationalAmount
            classic name is FREIGHT-TOT
        InsuranceTotal				  is an InternationalAmount
            classic name is INSURANCE-TOT
        CustomsTotal				  is an InternationalAmount
            classic name is CSTMS-TOT
        OtherAddOnChargesTotal		  is an InternationalAmount
            classic name is OTHER-AOC-TOT
        TemporaryHold                 is AlphaUpper size 1
            classic name is TEMP-HOLD
            States
                ApprovedByEngine value is "A"
                    default label is "Approved by Engine"
                SentForApproval  value is "S"
                    default label is "Sent for Approval"
				RejectedByEngine value is "R"
					default label is "Rejected by Engine"
		CatchWeightRejectedQuantity			is a Quantity
			protected
			precision is DerivedNumberOfDecimalsQuantity
		CatchWeightMatchedQuantity			is a Quantity
			protected
			precision is DerivedNumberOfDecimalsQuantity
		CatchWeightArchivedQuantity			is a Quantity
			protected
			precision is DerivedNumberOfDecimalsQuantity
		CatchWeightArchivedWriteOffQuantity	is a Quantity
			protected
			precision is DerivedNumberOfDecimalsQuantity
		CatchWeightOpenToMatchQuantity		is a Quantity 
			protected
			precision is DerivedNumberOfDecimalsQuantity
		CatchWeightChargebackQuantity		is a Quantity
			protected
			precision is DerivedNumberOfDecimalsQuantity
		CatchWeightWriteOffQuantity			is a Quantity
			protected
			precision is DerivedNumberOfDecimalsQuantity
	Local Fields
		LocalInterfacedAddOnCharge		is like AddOnCharge

		LocalPutawayDocumentReport		is a PurchaseOrderResult
		LocalDeliveryDocumentReport		is a PurchaseOrderResult
		LocalBackorderDocumentReport	is a PurchaseOrderResult
        LocalRequestingLocation         is like RequestingLocation
        LocalSourceDocumentNumeric      is a SourceDocumentNumeric
		

	
		LocalQuantityToProcessInStockUOM is like Quantity
		LocalReceivedQuantityInStockUOM is like Quantity
		LocalRejectedQuantityInStockUOM is like Quantity
		LocalCalculateTax 				is a CalculateTax
		IntrastatProcessing
		LocalTrigger 					is Alpha 1	
	
		UOMCalculation
		RoundedValue
		CalculateTax
		
		CurrencyExchange
		LocalCurrencyTable                  is a CurrencyTable		
		LocalAdjustedUnitCost			is an InternationalCost
		LocalReceivedQuantity			is like Quantity
		NewInventoryTransaction				is an InventoryTransaction		view
		NewInventoryTransactionLine			is an InventoryTransactionLine	view
		LocalTransactionSystemCode			is a  TransactionSystemCode
		LocalInventoryTransaction			is an InventoryTransaction
		LocalInventoryTransactionLine		is an InventoryTransactionLine
		LocalTotalReceivedQuantity	is like Quantity
		LocalOverreceived			is Boolean		
		LocalIsSubstitute			is Boolean
		LocalIsUnitCost				is Boolean
		LocalNoOvershipment			is Boolean
		LocalArray					is a PurchaseOrderBuyerMessageCommentArray
		Counter1					is Numeric size 1
		LocalBuyerMessage			is Boolean
		OvershipmentCost            is an InternationalAmount
		OvershipQuantity            is like Quantity
        LocalPOLineProcessStockQuantity 	is like Quantity


		SavedTransactionAmount		is a CurrencyAmount
		SavedExchangeDate			is a ExchangeDate
		SavedFromCurrency			is a FromCurrency

		CreateFromInterface			is Boolean
        AdditionalQuantity          is a Quantity
        WorkQuantity           		is a Quantity
        LocalSavedBin				is like Bin


        
		LocalAOCTaxCost							is an InternationalCost 
		LocalIncludeAOCTax						is Boolean				
		LocalUnitCostToApply					is an InternationalCost	
		LocalAOCUnitCost						is an InternationalCost	
		LocalLandTaxUnitCost					is an InternationalCost	
		LocalDistributionAmountWithAOC			is Boolean				
		LocalDistributionQuantity				is a Quantity			
		LocalReturnQuantityInStock				is a Quantity
		LocalBuyQuantityInStock					is a Quantity
		LocalMatchedQuantityInStock				is a Quantity
		LocalDistributionAmount					is an InternationalCost	
		LocalLineIsClosed						is Boolean				
		LocalDistributionAccount				is a FinanceCodeBlock

		LocalSkipQuantity 						is a Quantity			
		LocalComputedPostQuantity				is a Quantity			
		LocalPostQuantity						is a Quantity			
		LocalPOLineOnChargeRemainingQuantity	is a Quantity		
		
		LocalUnitCost							is an InternationalCost	
			precision is DerivedNumberOfDecimalsCost
		LocalUnitAOC							is an InternationalCost	
		LocalQuantity							is a Quantity			
		LocalHoldQuantity						is a Quantity			
		LocalHoldCatchWeightQuantity			is a Quantity 
		LocalMatchAmount						is like InternationalAmount
		
		LocalMatchQuantity						is a Quantity			
		LocalMatchedNotReceivedQuantity			is a Quantity			
		LocalSkippedQuantity					is a Quantity			
		LocalRemainingQuantity					is a Quantity			
		LocalMatchQuantityToApply				is a Quantity			
		LocalInvoiceRunTotalAmount				is an InternationalAmount	
		LocalTotalInvoiceQuantity				is a Quantity			
		LocalInvoiceTotalAmount					is an InternationalAmount 

		LocalCheckCountries						is Alpha 1
		
		LocalPercentUndershipped				is like UndershipmentTolerancePercentage
		LocalPercentOvershipped					is like OvershipmentTolerancePercentage

		LocalLandedCost							is like UnitCost
		LocalLineLandedCost						is like UnitCost
		LocalTotalLineAOCLandedCost		 		is like UnitCost
		LocalCalculateTaxTrigger				is Alpha size 1
		LocalUnitCostComputed					is Boolean
		LocalLineTotalCost						is like UnitCost
		LocalCreateVariance						is Boolean
		LocalReceiptInventoryTransactionUnitCost		is like UnitCost
		LocalCostAdjustmentInventoryTransactionUnitCost	is like UnitCost		

		WorkMatchUnitCost						is an InternationalCost
		LastCostUpdate							is an InternationalCost
		LocalPayablesInvoice					is a PayablesInvoice

		LocalPurchaseOrder						is like PurchaseOrder
		LocalPurchaseOrderLine					is like PurchaseOrderLine
		WorkCost							is like InternationalCost


		LocalCancelFromTemplate					is Alpha 1
		LocalAddOnCharge						is like AddOnCharge
		LocalPostingType						is AlphaUpper size 2
		LocalCanReceive                         is Boolean
		LocalVariancePercent					is like CatchWeightVariancePercent
		Execute									is Boolean
		TimeStampInGMT
		LocalReceivedQuantityForAllocationInStockUOM	is a Quantity
		LocalRemainingToProcess							is a Quantity
		LocalAllocateQuantity							is a Quantity
		LocalDemandDocument								is a SourceDocumentNumeric
		LocalDemandLineNumber							is a LineNumber
		LocalCatchWeightQuantityRounded					is like Quantity
			precision is DerivedNumberOfDecimalsQuantity
				round to precision
		LocalTotalUDIQuantity					is like Quantity
		LocalTotalUDIComputed					is Boolean				
		UpdateFromPurchaseOrder					is Boolean
		UnitCostDifference 						is an InternationalCost
		LocalTwoStepReleaseType					is Numeric size 1
			States
				NotTwoStepReceiving				value is 0
				TwoStepReceivingFirstRelease	value is 1
				TwoStepReceivingFinalRelease	value is 2
		LocalFromCurrency						is like Currency
		LocalToCurrency 						is like Currency
		LocalFinalRelease						is Boolean

		LocalFSMGroup							is Alpha size 20
		LocalDelimiter							is Alpha size 2
		LocalBusinessGroup						is Alpha size 5
		LocalPORStatus							is Alpha size 20
		LocalAccountingEntity					is Alpha size 50
		LocalGroupPONumber						is Alpha size 50
		LocalCrossAccountingEntity				is Alpha size 50
		LocalConfigurationParameter				is Alpha size up to 200

		LocalMatchedQuantityInVendorPriceUOM	is a Quantity
		LocalRunBatchID							is an IDMPID
		LocalShipToFacility						is like ShipToFacility

		LocalTrackingNumber								is a TrackingNumber
		LocalRequisition								is a Requisition
		LocalMSCMRequestingLocation						is a RequestingLocation
		LocalDeliverTo   								is a DeliverTo

	Transient Fields
		TransientDisallowTxnDetailCallback is Boolean
		UpdateTemplateLine          is Boolean
		SpreadQuantity				is Boolean
		TaxEntityValue				is a TaxEntity							
			derive value from Company.AccountingEntity	
		InterfaceHasDetails			is Boolean
		TransientTrackingNumber		is AlphaUpper size 40
		TransientNumberOfLabels		is Numeric size 4
		BypassDropshipEdit			is Boolean

		BypassCreateTransactionDetail is Boolean
										
	Context Fields
		ContextPurchasingCompany	is a PurchasingCompany
		ContextPurchaseOrder		is a PurchaseOrder
		ContextPurchaseOrderLine	is a PurchaseOrderLine
		PayablesInvoice
		MatchInvoiceMessage
		MatchPurchaseOrderInvoice
		MatchReconQueue
        GeneralLedgerCompanyGroup
        ReceivedDateRange			is a DateRange
		AuditDateRange				is a DateRange2
        
    Derived Fields
    
    	DerivedAssetDetailIndicator is a DerivedField
    		type is Alpha 1
    		if (PurchaseOrderLineAssetDetailRel exists)
    			return "*"
    		else
    			return ""
		
		DerivedRejectedQuantityDisplay is a DerivedField
			type is like Quantity
				precision is Item.NumberOfDecimalsQuantity
			default label is "RejectedQuantity"
			return first POReceiptLineInspectionsRel.TransientRejectedQuantity
		
		DerivedRejectedQuantityInReceiptUOM is a DerivedField
            type is like Quantity
				precision is Item.NumberOfDecimalsQuantity
			default label is "RejectedQuantity"
			if (HasItemMaster
			and ReceivedUOM not = Item.StockUOM)
				LocalRejectedQuantityInStockUOM = DerivedStockRejectedQuantity
				initialize UOMCalculation
				UOMCalculation.InputUOM			= Item.StockUOM
				UOMCalculation.InputQuantity	= LocalRejectedQuantityInStockUOM
				UOMCalculation.InputToUOM		= ReceivedUOM
				UOMCalculation.Method			= UOMCalculation.Method.ConvertToAlternate
				return UOMCalculation.OutputQuantity
			else
				return DerivedStockRejectedQuantity
		
		DerivedStockRejectedQuantity is a DerivedField
            type is like Quantity
				precision is Item.NumberOfDecimalsQuantity
			restricted
			if (HasItemMaster
			and PurchaseOrderLine.EnteredBuyUOM not = Item.StockUOM)
				initialize UOMCalculation
				UOMCalculation.InputUOM			= PurchaseOrderLine.EnteredBuyUOM
				UOMCalculation.InputQuantity	= RejectedQuantity
				UOMCalculation.Method			= UOMCalculation.Method.ConvertToStock
				return UOMCalculation.OutputQuantity
			else
				return RejectedQuantity
		
		DerivedExtendedAmount is a DerivedField
			type is like InternationalAmount
			restricted
			initialize RoundedValue
			RoundedValue.RoundInput			= EnteredReceivedQuantity * DerivedCostInReceivedUOMFullPrecision
			RoundedValue.RoundingType		= RoundedValue.RoundingType.Normal
			RoundedValue.RoundTo			= (1/10^PurchaseOrder.Currency.NumberOfDecimals)
			RoundedValue.RoundingMethodFW	= RoundedValue.RoundingMethodFW.MultipleOf
			
			return RoundedValue.RoundResult
		
    	DerivedLastUpdateDate is a DerivedField
    		type is Date
    		restricted
    		TimeStampInGMT.Value = LastUpdateDate
    		return TimeStampInGMT.CorporateDate
    		
		DerivedReceivedQuantityInPOUOM is a DerivedField
			type is like Quantity
			restricted
			if (HasItemMaster
			and PurchaseOrderLine.EnteredBuyUOM != Item.StockUOM)
				initialize UOMCalculation
				UOMCalculation.InputQuantity		= DerivedStockQuantity
				UOMCalculation.InputUOM				= Item.StockUOM
				UOMCalculation.InputUOMConversion	= 1
				UOMCalculation.InputToUOM			= PurchaseOrderLine.EnteredBuyUOM
				UOMCalculation.InputToUOMConversion	= PurchaseOrderLine.EnteredBuyUOMMultiplier
				UOMCalculation.Method				= UOMCalculation.Method.ConvertToAlternate
				return UOMCalculation.OutputQuantity
			else
				return DerivedStockQuantity
		
		DerivedInventoryTransaction is a DerivedField
			type is like InventoryTransaction
			restricted
			return first InventoryTransactionLineRel.InventoryTransaction
		



		OneSourceDerivedOriginalCostWithTaxAndAOC is a DerivedField
			type is like UnitCost
			restricted	
			if (TaxCode entered) 
				LocalLandedCost = ((PurchaseOrderLine.LandedUnitCost - PurchaseOrderLine.EnteredUnitCost)) 
				initialize LocalTotalLineAOCLandedCost
				for each LandedReceiptLineAddOnChargesRel
					LocalTotalLineAOCLandedCost += each.LandedUnitCost
				return OriginalUnitCost + LocalLandedCost + LocalTotalLineAOCLandedCost

		DerivedOriginalCostWithTaxAndAOC is a DerivedField
			type is like UnitCost
			restricted		
			if (TaxCode entered)
				LocalCalculateTax.TaxEntity		= Company.AccountingEntity
				LocalCalculateTax.Function 		= LocalCalculateTax.Function.CalculateTax
				LocalCalculateTax.TaxCode 		= TaxCode
				LocalCalculateTax.TaxableAmount	= OriginalUnitCost * VendorPriceUOMQuantity 
				LocalCalculateTax.System		= "PO"
				LocalCalculateTax.TaxDate		= ReceivedDate
				LocalCalculateTax.InvoiceDate	= ReceivedDate
				LocalCalculateTax.PaymentDate	= ReceivedDate
				if  (TaxEntityUsesThirdPartyTax)
			   		CalculateTax.RelatedObjectReference			= reference to this instance
		   			CalculateTax.InputVertexRequest				= "P" 
			   		CalculateTax.TransactionSource				= "I"	
			   		CalculateTax.InputReturnVertexTaxIn			= "D" 
			   		CalculateTax.InvoiceCompany					= Company
			   		CalculateTax.ProcessLevel					= PurchaseOrder.ProcessLevel 
					CalculateTax.Vendor							= PurchaseOrder.Vendor 
					CalculateTax.VendorCustomerName				= PurchaseOrder.Vendor.VendorName 	
					CalculateTax.LineNumber						= PurchaseOrderLine		
			   		CalculateTax.CommodityCode					= PurchaseOrderLine.ICNCode				
					CalculateTax.TaxUsageCode					= PurchaseOrderLine.TaxUsageCode					
					CalculateTax.DeliveryTerms          		= PurchaseOrder.ShipTerm
					CalculateTax.PostalAddress					= PurchaseOrder.ProcessLevel.PostalAddress	
				    CalculateTax.VATRegistrationCountry    	 	= TaxEntityRel.VATRegistrationCountry 			
				    CalculateTax.VATRegistrationNumber			= TaxEntityRel.VATRegistrationNumber			
					if (PurchaseOrder.PurchaseFromLocation entered
					and PurchaseOrder.PurchaseFromLocation.CurrentAddressRelExists
					and PurchaseOrder.PurchaseFromLocation.VATRegistrationNumber entered)
						CalculateTax.FromPostalAddress				= PurchaseOrder.PurchaseFromLocation.VendorAddress 
				    	CalculateTax.FromVATRegistrationCountry 	= PurchaseOrder.PurchaseFromLocation.VATRegistrationCountry			
				    	CalculateTax.FromVATRegistrationNumber		= PurchaseOrder.PurchaseFromLocation.VATRegistrationNumber				
					else
						CalculateTax.FromPostalAddress				= Vendor.VendorAddress		
				    	CalculateTax.FromVATRegistrationCountry 	= Vendor.VATRegistrationCountry					
				    	CalculateTax.FromVATRegistrationNumber		= Vendor.VATRegistrationNumber					
				    CalculateTax.DefaultFilingCurrency 			= Company.Currency 
					CalculateTax.CurrencyRate					= PurchaseOrder.EnteredCurrencyConversionRate 		
				    CalculateTax.TransactionCurrency 			= PurchaseOrder.Currency								
					CalculateTax.BaseCurrency 					= Company.Currency					
					CalculateTax.ReceiptSite					= PurchaseOrder.ProcessLevel								
					CalculateTax.UniqueIdOfRelatedObject		= UniqueID									
				
				LocalCalculateTaxTrigger		= LocalCalculateTax.ExecuteCalculateTax
				LocalLandedCost					= LocalCalculateTax.OutputTotalLandedTaxAmount8DP / VendorPriceUOMQuantity
			
			initialize LocalTotalLineAOCLandedCost
			for each LandedReceiptLineAddOnChargesRel
				LocalTotalLineAOCLandedCost += each.LandedUnitCost
				
			return OriginalUnitCost + LocalLandedCost + LocalTotalLineAOCLandedCost

		DerivedCostInReceivedUOMFullPrecision is a DerivedField
			type is like UnitCost
			restricted
			if (TaxEntityUsesSabrix)
				if (VendorPriceUOM not = ReceivedUOM)
					return (OneSourceDerivedOriginalCostWithTaxAndAOC * (ReceivedUOMMultiplier / VendorPriceUOMMultiplier))
				else 
					return OneSourceDerivedOriginalCostWithTaxAndAOC
			else 
			if (VendorPriceUOM not = ReceivedUOM)
				return (DerivedOriginalCostWithTaxAndAOC * (ReceivedUOMMultiplier / VendorPriceUOMMultiplier))
			else
				return DerivedOriginalCostWithTaxAndAOC
		
		DerivedUnitCostInReceivedUOM is a DerivedField
			type is like UnitCost
				precision is DerivedNumberOfDecimalsCost
			default label is "ReceivedUnitCost"
			initialize RoundedValue
			RoundedValue.RoundInput				= DerivedCostInReceivedUOMFullPrecision
			RoundedValue.RoundingType 			= RoundedValue.RoundingType.Normal
			RoundedValue.RoundTo				= (1/10^DerivedNumberOfDecimalsCost)
			RoundedValue.RoundingMethodFW		= RoundedValue.RoundingMethodFW.MultipleOf
			return RoundedValue.RoundResult
			
		DerivedOriginalUnitCostInReceivedUOM is a DerivedField
			type is like UnitCost
				precision is DerivedNumberOfDecimalsCost
			default label is "ReceivedUnitCost"
			if (OriginalUnitCost entered)
				if (IsCatchWeightItemAndHasItemMaster)
					return PurchaseOrderLine.VendorBuyUnitCost
				else
				if (VendorPriceUOM != ReceivedUOM)
					initialize UOMCalculation
					UOMCalculation.InputUOM 			= VendorPriceUOM 
					UOMCalculation.InputToUOM 			= ReceivedUOM
					UOMCalculation.InputUnitCost 		= OriginalUnitCost
					UOMCalculation.Method 				= UOMCalculation.Method.ConvertToAlternate
					return UOMCalculation.OutputUnitCost
				else 
					return OriginalUnitCost	

		DerivedUnitCostInTransactionCurrencyInReceivedUOM is a DerivedField
			type is like UnitCost
			restricted
			if (VendorPriceUOM not = ReceivedUOM)
				return (LocalUnitCost * (ReceivedUOMMultiplier / VendorPriceUOMMultiplier))
			else
				return LocalUnitCost

		DerivedInventoryTransactionUnitCost is a DerivedField 
			type is like UnitCost
			restricted


			LocalReceiptInventoryTransactionUnitCost 		= first InventoryTransactionLineRel.UnitCost	

			LocalCostAdjustmentInventoryTransactionUnitCost	= first InventoryTransactionLineRel.InventoryCostHistoryForReceivingAdjustmentRel.TotalCostAdjustmentFromPOUnitCost
			return LocalReceiptInventoryTransactionUnitCost + LocalCostAdjustmentInventoryTransactionUnitCost

		DerivedLineAOCUnitCostInReceivedUOM is a DerivedField
			type is like UnitCost
			initialize LocalTotalLineAOCLandedCost
			for each LandedReceiptLineAddOnChargesRel
				LocalTotalLineAOCLandedCost += each.LandedUnitCost
			UOMCalculation.InputUOM				= VendorPriceUOM
			UOMCalculation.InputUOMConversion	= VendorPriceUOMMultiplier
			UOMCalculation.InputToUOM			= ReceivedUOM
			UOMCalculation.InputToUOMConversion	= ReceivedUOMMultiplier
			UOMCalculation.InputUnitCost		= LocalTotalLineAOCLandedCost
			UOMCalculation.Method				= UOMCalculation.Method.ConvertToAlternate
			
			return UOMCalculation.OutputUnitCost
		




		
		DerivedLineStockUnitCost is a DerivedField
			type is like UnitCost
			restricted
			if (not LocalUnitCostComputed)
				if (TaxEntityUsesSabrix)
					if (TaxCode entered) 
						LocalLineLandedCost = ((PurchaseOrderLine.LandedUnitCost - PurchaseOrderLine.EnteredUnitCost) / PurchaseOrderLine.VendorPriceUOMMultiplier)
					
						initialize LocalTotalLineAOCLandedCost
						for each LandedReceiptLineAddOnChargesRel
							LocalTotalLineAOCLandedCost += each.LandedUnitCost
						
						LocalLineTotalCost = ((OriginalUnitCost / VendorPriceUOMQuantity) + (LocalLineLandedCost / VendorPriceUOMMultiplier) + LocalTotalLineAOCLandedCost)
						LocalUnitCostComputed = true
				else 
				if (TaxCode entered)
					LocalCalculateTax.TaxEntity		= Company.AccountingEntity
					LocalCalculateTax.Function 		= LocalCalculateTax.Function.CalculateTax
					LocalCalculateTax.TaxCode 		= TaxCode
					LocalCalculateTax.TaxableAmount	= OriginalUnitCost * VendorPriceUOMQuantity 
					LocalCalculateTax.System		= "PO"
					LocalCalculateTax.TaxDate		= ReceivedDate
					LocalCalculateTax.InvoiceDate	= ReceivedDate
					LocalCalculateTax.PaymentDate	= ReceivedDate
					if  (TaxEntityUsesThirdPartyTax)
				   		CalculateTax.RelatedObjectReference			= reference to this instance
			   			CalculateTax.InputVertexRequest				= "P" 
				   		CalculateTax.TransactionSource				= "I"	
				   		CalculateTax.InputReturnVertexTaxIn			= "D" 
				   		CalculateTax.InvoiceCompany					= Company
				   		CalculateTax.ProcessLevel					= PurchaseOrder.ProcessLevel 
						CalculateTax.Vendor							= PurchaseOrder.Vendor 
						CalculateTax.VendorCustomerName				= PurchaseOrder.Vendor.VendorName 	
						CalculateTax.LineNumber						= PurchaseOrderLine		
				   		CalculateTax.CommodityCode					= PurchaseOrderLine.ICNCode				
						CalculateTax.TaxUsageCode					= PurchaseOrderLine.TaxUsageCode					
						CalculateTax.DeliveryTerms          		= PurchaseOrder.ShipTerm
						CalculateTax.PostalAddress					= PurchaseOrder.ProcessLevel.PostalAddress	
					    CalculateTax.VATRegistrationCountry    	 	= TaxEntityRel.VATRegistrationCountry 			
					    CalculateTax.VATRegistrationNumber			= TaxEntityRel.VATRegistrationNumber			
						if (PurchaseOrder.PurchaseFromLocation entered
						and PurchaseOrder.PurchaseFromLocation.CurrentAddressRelExists
						and PurchaseOrder.PurchaseFromLocation.VATRegistrationNumber entered)
							CalculateTax.FromPostalAddress				= PurchaseOrder.PurchaseFromLocation.VendorAddress 
					    	CalculateTax.FromVATRegistrationCountry 	= PurchaseOrder.PurchaseFromLocation.VATRegistrationCountry			
					    	CalculateTax.FromVATRegistrationNumber		= PurchaseOrder.PurchaseFromLocation.VATRegistrationNumber				
						else
							CalculateTax.FromPostalAddress				= Vendor.VendorAddress		
					    	CalculateTax.FromVATRegistrationCountry 	= Vendor.VATRegistrationCountry					
					    	CalculateTax.FromVATRegistrationNumber		= Vendor.VATRegistrationNumber					
					    CalculateTax.DefaultFilingCurrency 			= Company.Currency 
						CalculateTax.CurrencyRate					= PurchaseOrder.EnteredCurrencyConversionRate 		
					    CalculateTax.TransactionCurrency 			= PurchaseOrder.Currency								
						CalculateTax.BaseCurrency 					= Company.Currency					
						CalculateTax.ReceiptSite					= PurchaseOrder.ProcessLevel								
						CalculateTax.UniqueIdOfRelatedObject		= UniqueID									
					
					LocalCalculateTaxTrigger		= LocalCalculateTax.ExecuteCalculateTax

					LocalLineLandedCost 			= LocalCalculateTax.OutputTotalLandedTaxAmount8DP / VendorPriceUOMQuantity / VendorPriceUOMMultiplier 


				
				initialize LocalTotalLineAOCLandedCost
				for each LandedReceiptLineAddOnChargesRel
					LocalTotalLineAOCLandedCost += each.LandedUnitCost / VendorPriceUOMMultiplier
				
				LocalLineTotalCost = ((OriginalUnitCost / VendorPriceUOMMultiplier) + LocalLineLandedCost + LocalTotalLineAOCLandedCost)
				LocalUnitCostComputed = true
			return LocalLineTotalCost

		DerivedStandardCostInPOCurrency is a DerivedField
			type is like UnitCost
			restricted
			if (PurchaseOrder.Currency = Company.Currency)
				return ItemLocationRel.StandardCost
			else
				initialize CurrencyExchange
				SavedFromCurrency				= Company.Currency
				CurrencyExchange.ToCurrency		= PurchaseOrder.Currency
				LocalCurrencyTable				= PurchaseOrder.CurrencyTable
				SavedTransactionAmount			= ItemLocationRel.StandardCost
				if (PurchaseOrder.CurrencyExchangeSetPoint.Receiving)
					SavedExchangeDate			= PurchaseOrderReceipt.ReceivedDate
				else
					SavedExchangeDate			= PurchaseOrder.PurchaseOrderDate

				LocalFromCurrency	      		= Company.Currency
				LocalToCurrency	      			= PurchaseOrder.Currency
				if (CurrencyRelationshipRel.MultDiv.Divide)
					return (ItemLocationRel.StandardCost / CurrencyExchange.OutputCurrencyRate)
				else
					return (ItemLocationRel.StandardCost * CurrencyExchange.OutputCurrencyRate)

		
		DerivedUnitCostForCatchWeight is a DerivedField 
			type is like UnitCost
			restricted
			UOMCalculation.InputUOM				= ReceivedUOM
			UOMCalculation.InputUOMConversion	= ReceivedUOMMultiplier
			if (TaxEntityUsesSabrix)
				UOMCalculation.InputUnitCost	= OneSourceDerivedOriginalCostWithTaxAndAOC
			else 
				UOMCalculation.InputUnitCost	= DerivedOriginalCostWithTaxAndAOC
			UOMCalculation.InputToUOM			= Item.StockUOM
			UOMCalculation.Method				= UOMCalculation.Method.ConvertToStock
			return UOMCalculation.OutputUnitCost

		DerivedReceivedUOMUnitCostInBaseCurrency is a DerivedField
			type is like UnitCost
			restricted
			if (PurchaseOrder.Currency = Company.Currency)
				return DerivedUnitCostInReceivedUOM
			else
				initialize CurrencyExchange
				SavedFromCurrency 					= PurchaseOrder.Currency
				CurrencyExchange.ToCurrency			= Company.Currency
				LocalCurrencyTable            		= PurchaseOrder.CurrencyTable
				if (PurchaseOrder.CurrencyExchangeSetPoint.Receiving)
					SavedExchangeDate 				= PurchaseOrderReceipt.ReceivedDate
				else
					SavedExchangeDate 				= PurchaseOrder.PurchaseOrderDate
				SavedTransactionAmount				= DerivedUnitCostInReceivedUOM


				LocalFromCurrency	      			= PurchaseOrder.Currency
				LocalToCurrency	      				= Company.Currency
				if (CurrencyRelationshipRel.MultDiv.Divide)
					return (DerivedUnitCostInReceivedUOM / CurrencyExchange.OutputCurrencyRate)
				else
					return (DerivedUnitCostInReceivedUOM * CurrencyExchange.OutputCurrencyRate)

			
		DerivedReceivedQuantityInStockUOM is a DerivedField
			type is like Quantity
			restricted
			return EnteredReceivedQuantity * ReceivedUOMMultiplier
			
		DerivedReceivedQuantityInStockOrCatchweightUOM is a DerivedField
			type is like Quantity
			restricted
			if (IsCatchWeightItemAndHasItemMaster)
				return CatchWeightQuantity
			else
				return EnteredReceivedQuantity * ReceivedUOMMultiplier
				
		DerivedTotalReceivedQuantityInPOUOM is a DerivedField
			type is like Quantity
			restricted
			return PurchaseOrderLine.ReceivedQuantity * PurchaseOrderLine.EnteredBuyUOMMultiplier		
			

		DerivedTotalReceivedQuantityInStockUOM is a DerivedField
			type is like Quantity
			restricted
			return (DerivedReceivedQuantityInStockUOM + DerivedTotalReceivedQuantityInPOUOM)
			
		DerivedProcessedQuantity is a DerivedField
			type is like Quantity
			restricted
			return (MatchedQuantity + ArchivedQuantity)
		
		DerivedReceivedQuantity is a DerivedField
			type is like Quantity
			restricted
			return (BuyUOMQuantity + WriteOffQuantity + ChargebackQuantity)
		
    	ContextMessageEntityType is a StringField
			type is Alpha 30
			restricted
			"InforReceiveDeliveryLine"

		ContextMessageText is a MessageField
			restricted
			"PurchaseOrderReceiptLine<PurchaseOrderReceiptLine>OfPurchaseOrderReceipt<PurchaseOrderReceipt>"
			
		CreatedByDisplayText is a MessageField
			restricted
			"<CreatedBy>"
			
    	DerivedStockQuantity is a DerivedField
    		type is like Quantity
				precision is Item.NumberOfDecimalsQuantity
			if (HasItemMaster
			and ReceivedUOM not = Item.StockUOM
			and EnteredReceivedQuantity entered)
				return EnteredReceivedQuantity * ReceivedUOMMultiplier
			else 
				return EnteredReceivedQuantity

		DerivedMatchedQuantityInVendorPriceUOM		is a DerivedField
			type is like Quantity
				precision is Item.NumberOfDecimalsQuantity
			if (CatchWeightMatchedQuantity entered)
				return CatchWeightMatchedQuantity
			else
				return MatchedQuantity * VendorPriceUOMMultiplier

		DerivedPOReceivedQuantityInStockUOM is a DerivedField
			type is like Quantity
				precision is Item.NumberOfDecimalsQuantity
			restricted
			if (HasItemMaster
			and PurchaseOrderLine.EnteredBuyUOM not = Item.StockUOM)
				initialize UOMCalculation
				UOMCalculation.InputUOM			= PurchaseOrderLine.EnteredBuyUOM
				UOMCalculation.InputQuantity	= PurchaseOrderLine.ReceivedQuantity
				UOMCalculation.Method			= UOMCalculation.Method.ConvertToStock
				return UOMCalculation.OutputQuantity
			else
				return PurchaseOrderLine.ReceivedQuantity
		
		DerivedPOQuantityToProcessInStockUOM is a DerivedField
			type is like Quantity
				precision is Item.NumberOfDecimalsQuantity
			restricted
			if (HasItemMaster
			and PurchaseOrderLine.EnteredBuyUOM not = Item.StockUOM)
				initialize UOMCalculation
				UOMCalculation.InputUOM			= PurchaseOrderLine.EnteredBuyUOM
				UOMCalculation.InputQuantity	= PurchaseOrderLine.QuantityToProcess
				UOMCalculation.Method			= UOMCalculation.Method.ConvertToStock
				return UOMCalculation.OutputQuantity
			else
				return PurchaseOrderLine.QuantityToProcess
				
		DerivedPOReceivedQuantityInReceivedUOM is a DerivedField
			type is like Quantity
				precision is Item.NumberOfDecimalsQuantity
			restricted
			if (HasItemMaster
			and ReceivedUOM not = Item.StockUOM)
				LocalReceivedQuantityInStockUOM = DerivedPOReceivedQuantityInStockUOM
				initialize UOMCalculation
				UOMCalculation.InputUOM			= Item.StockUOM
				UOMCalculation.InputQuantity	= LocalReceivedQuantityInStockUOM
				UOMCalculation.InputToUOM		= ReceivedUOM
				UOMCalculation.Method			= UOMCalculation.Method.ConvertToAlternate
				return UOMCalculation.OutputQuantity
			else
				return DerivedPOReceivedQuantityInStockUOM
		
		DerivedPOQuantityToProcessInReceivedUOM is a DerivedField
			type is like Quantity
				precision is Item.NumberOfDecimalsQuantity
			restricted
			if (HasItemMaster
			and ReceivedUOM not = Item.StockUOM)
				LocalQuantityToProcessInStockUOM = DerivedPOQuantityToProcessInStockUOM
				initialize UOMCalculation
				UOMCalculation.InputUOM			= Item.StockUOM
				UOMCalculation.InputQuantity	= LocalQuantityToProcessInStockUOM
				UOMCalculation.InputToUOM		= ReceivedUOM
				UOMCalculation.Method			= UOMCalculation.Method.ConvertToAlternate
				return UOMCalculation.OutputQuantity
			else
				return DerivedPOQuantityToProcessInStockUOM

		DerivedPreferredBin is a DerivedField
			type is like Bin
			if (ItemLocationRel.BinTracked
			and !MultipleBins)	
				return ItemLocationRel.PreferredBin	
    	
		DerivedUnitCostFromCostAdjustment is a DerivedField
			type is like UnitCost
			restricted
			return (sum InventoryTransactionLineRel.DerivedUnitCostForCostAdjustment)

		DerivedQuantityUnitCost                                        is a DerivedField
			type is like InternationalAmount
			restricted
			return (InventoryTransactionLineRel.Quantity * InventoryTransactionLineRel.UnitCost) 
		
		DerivedQuantityBaseCost									        is a DerivedField
			type is like InternationalAmount
			restricted
			return (InventoryTransactionLineRel.Quantity * InventoryTransactionLineRel.BaseCost)

		DerivedQuantityAddOnChargeCost								    is a DerivedField
			type is like InternationalAmount
			restricted
			return (InventoryTransactionLineRel.Quantity * InventoryTransactionLineRel.AddOnChargeUnitCost)

		DerivedQuantityUnitCostInTranCurrency							is a DerivedField
			type is like InternationalAmount
			restricted					
			return (InventoryTransactionLineRel.Quantity * InventoryTransactionLineRel.UnitCostInTransactionCurrency)

    	DerivedUOMMultiplier is a DerivedField
			type is Decimal 13.7
			restricted
			if (HasItemMaster)
				if (PurchaseOrderLine entered 
				and ReceivedUOM = PurchaseOrderLine.EnteredBuyUOM)
					return 1
				else
					return PurchaseOrderLine.EnteredBuyUOMMultiplier	
			else
				return 1
			
        Substitute is a DerivedField
            type is Alpha size 15
            restricted
            if (SubstituteReceiving)
                return SubstituteLine
            else
                return blank
        
		BuyerMessageDisplay is a DerivedField
			type is Alpha size 50
			if (HasUnreleasedBuyerMessage)
				return HasBuyerMessageError 
			else
				return blank
				
		SubstituteMessageDisplay is a DerivedField
			type is Alpha size 20
			restricted
			if (SubstituteReceiving)
				return HasSubstitute 			 	
			else
				return blank

		BalanceMessage is a DerivedField
			type is Alpha size 20
			restricted			
			if (not DetailsInBalance)
 				return OutOfBalance	
			else
				return blank
		
		AssetDetails is a DerivedField
			type is Alpha size 10
			if (AssetDetailExist 
			and PurchaseOrderLineAssetRel.IsAmpoastdtl)
				return "*"
		
		ReceiverMessages is a DerivedField	
			type is Alpha size 30
			restricted
			if (HasItemMaster)
				if (IsCatchWeightItem)
					return CatchWeightItemExists
				
				if (Item.HazardCode entered)
					return HazardousItemExists
						
				if (ItemLocationRel exist
				and ItemLocationRel.BackorderedQuantity > 0)
					return BackordersExist
			else
				return blank		 
		
		DerivedCatchWeightVariancePercent is a DerivedField
			type is Decimal size 5.2
			LocalVariancePercent = (((CatchWeightQuantity - DerivedStockQuantity)/DerivedStockQuantity) * 100)
			if (LocalVariancePercent < 0)
				LocalVariancePercent = LocalVariancePercent * -1
			return LocalVariancePercent
			
		ItemHazardCode is a ConditionalField
			type is like HazardCode
			if (PurchaseOrderLine.ItemExists)
				Item.HazardCode
			else
				blank
		
		ItemHazardDescription is a DerivedField
			type is Alpha size 60
			if (PurchaseOrderLine.ItemExists
			and Item.HasHazardCode)
				return Item.HazardCode.Description

		CatchWeightUOM is a DerivedField
			type is like UnitOfMeasure
			if (PurchaseOrderLine.ItemExists
			and IsCatchWeightItem) 
				return Item.StockUOM
			else
				return blank
				
        DerivedNumberOfDecimalsQuantity is a ConditionalField
			type is Numeric size 1
			restricted
			if (HasItemMaster) 
				Item.NumberOfDecimalsQuantity
			else
			if (InventoryCompanyRel exists) 
				InventoryCompanyRel.NumberOfDecimalsQuantity
			else
				4
	
		RemainingQuantity is a DerivedField
			type is like Quantity
				precision is DerivedNumberOfDecimalsQuantity
			if (SubstituteReceiving)
				return 0
			if (PurchaseOrderLine.RemainingQuantity < 0
			or ContextPurchaseOrderLine.RemainingQuantity < 0)
				return 0
			if (PurchaseOrder.Closed.Historical
			or PurchaseOrderLine.Closed.Historical
			or ContextPurchaseOrderLine.Closed.Historical)
				return 0
	        if (not Company.DisplayRemainingQuantity)
	        	return 0
	        else
        		return PurchaseOrderLine.RemainingQuantity 	

		BinMismatchMessage is a DerivedField
			type is Alpha size 25
			if (Bin.StorageCode != ItemLocationRel.StorageCode)
				return StorageCodeMismatch
		
		BackOrderExistMessage is a DerivedField
			type is Alpha size 20
			if (PurchaseOrderLine.IsInventoryType)
				if (ItemLocationRel.BackorderedQuantity > 0)
					return BackordersExist
			else
				return blank		 
		
		SubstituteLine			is a MessageField
			restricted
			"SubstituteLine"
		HasBuyerMessageError	is a MessageField
			restricted
			"HasBuyerMessage"
		HasSubstitute			is a MessageField
			restricted
			"SubstituteItem"		
		CatchWeightItemExists	is a MessageField
			restricted
			"CatchWeightItemExists"
		HazardousItemExists		is a MessageField
			restricted	
			"HazardousItemExists"
		BackordersExist			is a MessageField
			restricted
			"BackordersExist"
		OutOfBalance 			is a MessageField
			restricted
			"OutOfBalance"
		StorageCodeMismatch		is a MessageField
			restricted
			"StorageCodeMismatch"
		QuantityNotEqual		is a MessageField
			restricted
			"QuantityDoesNotEqualReceivedQuantity"
		CatchWeightOutOfToleranceMessage is a MessageField
			restricted
			"CatchWeightQuantityIsOutsideOfTolerance"
		
		BinDetailsLabel is a LabelField
			restricted
			"BinDetails"
			
		SerialDetailsLabel is a LabelField
			restricted
			"SerialDetails"
		
		LotDetailsLabel is a LabelField
			restricted
			"LotDetails"
			
		SerialAndBinDetailsLabel is a LabelField
			restricted
			"SerialAndBinDetails"
		
		LotAndBinDetailsLabel is a LabelField
			restricted
			"LotAndBinDetails"

		BinDetailsMessage is a MessageField
			restricted
			"BinDetails"
			
		SerialDetailsMessage is a MessageField
			restricted
			"SerialDetails"
		
		LotDetailsMessage is a MessageField
			restricted
			"LotDetails"
		
		DifferentLotExpirationDate is a MessageField
			"LineDetailCannotHaveSameLotWithDifferentLotExpirationDate"

		SerialAndBinDetailsMessage is a MessageField
			restricted
			"SerialAndBinDetails"
		
		LotAndBinDetailsMessage is a MessageField
			restricted
			"LotAndBinDetails"

		UDIDetailsMessage is a MessageField
			restricted
			"UDIDetails"

		SerialAndUDIDetailsMessage is a MessageField
			restricted
			"SerialAndUDIDetails"
		
		LotAndUDIDetailsMessage is a MessageField
			restricted
			"LotAndUDIDetails"

		ReceivingDetailMessage is a DerivedField
			type is Alpha size 25
			restricted
			if (IsBinTracked and IsInventoried and !IsSerialRequiredAtReceipt and !IsLotRequiredAtReceipt)
				return BinDetailsMessage
			if (IsSerialRequiredAtReceipt and !IsBinTracked and !IsUDIRequiredAtReceipt)
				return SerialDetailsMessage
			if (IsLotRequiredAtReceipt and !IsBinTracked and !IsUDIRequiredAtReceipt)
				return LotDetailsMessage
			if (IsSerialRequiredAtReceipt and IsBinTracked)
				return SerialAndBinDetailsMessage
			if (IsLotRequiredAtReceipt and IsBinTracked)
				return LotAndBinDetailsMessage
			if (IsSerialRequiredAtReceipt and !IsBinTracked and IsUDIRequiredAtReceipt)
				return SerialAndUDIDetailsMessage
			if (IsLotRequiredAtReceipt and !IsBinTracked and IsUDIRequiredAtReceipt)
				return LotAndUDIDetailsMessage
			if (IsUDIRequiredAtReceipt and !IsLotRequiredAtReceipt and !IsSerialRequiredAtReceipt)
				return UDIDetailsMessage
		
		ReceivingDetailLabel is a DerivedField
			type is Alpha size 25
			restricted
			if (IsBinTracked and IsInventoried and !IsSerialRequiredAtReceipt and !IsLotRequiredAtReceipt)
				return BinDetailsLabel
			if (IsSerialRequiredAtReceipt and !IsBinTracked)
				return SerialDetailsLabel
			if (IsLotRequiredAtReceipt and !IsBinTracked)
				return LotDetailsLabel
			if (IsSerialRequiredAtReceipt and IsBinTracked)
				return SerialAndBinDetailsLabel
			if (IsLotRequiredAtReceipt and IsBinTracked)
				return LotAndBinDetailsLabel
				
		CatchWeightMessage is a DerivedField
			type is AlphaUpper size 20
			if (PurchaseOrderLine.ItemExists
			and IsCatchWeightItem) 
				return "Catch weight item"
			
		SumOfQuantity            is a DerivedField    
            type is like Quantity
            	precision is Item.NumberOfDecimalsQuantity
            if (IsBinTracked)
            	return (sum PurchaseOrderTransactionDetailsWithBinRel.Quantity)
            else
			if (IsNotADistributionManagementItem)
				return EnteredReceivedQuantity
            else
            	return (sum PurchaseOrderTransactionDetailsRel.Quantity)
            
        SumOfStockQuantity       is a DerivedField    
            type is like Quantity
            	precision is Item.NumberOfDecimalsQuantity
            restricted
            return (sum PurchaseOrderTransactionDetailsRel.SecondaryQuantity)
            
		SumOfAssetDetailQuantity is a DerivedField
        	type is like Quantity
        		precision is Item.NumberOfDecimalsQuantity
        	restricted
        	return (instance count of PurchaseOrderLineAssetDetailRel)
        
        SumOfReceivedAssetDetailQuantity is a DerivedField
        	type is like Quantity
        		precision is Item.NumberOfDecimalsQuantity
        	restricted
        	return (instance count of PurchaseOrderLineReceivedYesAssetDetailRel)
        
        SumOfCancelledAssetDetailQuantity is a DerivedField
        	type is like Quantity
        		precision is Item.NumberOfDecimalsQuantity
        	restricted
        	return (instance count of CancelledAssetDetailRel)
         
		SumOfUDIQuantity		is a DerivedField    
			type is like Quantity
				precision is Item.NumberOfDecimalsQuantity
			restricted
			if (not LocalTotalUDIComputed and IsUDIRequiredAtReceipt)
				initialize LocalTotalUDIQuantity
				for each PurchaseOrderUDIDetailsRel
					LocalTotalUDIQuantity += each.DerivedQuantityInReceivedUOM
				LocalTotalUDIComputed = true
			return LocalTotalUDIQuantity


		UDIDetailsInBalance		is a DerivedField
			type is Boolean
			restricted
			if  (SumOfUDIQuantity != EnteredReceivedQuantity
			and  IsUDIRequiredAtReceipt)
				return false
			else
				return true

        OutofBalanceMessage is a MessageField  
        	restricted
			"OutOfBalance"
	
		DerivedRNIDate is a DerivedField
			type is Numeric 6
			restricted
			if (OpenToMatchQuantity > 0
			and ReceivedDate < current corporate date)
				if (current corporate date - ReceivedDate < 8)
					return 1
				else 
				if (current corporate date - ReceivedDate < 15)
					return 2
				else 
				if (current corporate date - ReceivedDate < 22)
					return 3
				else 
				if (current corporate date - ReceivedDate < 29)
					return 4
				else 
					return 5

		DerivedReceiptLineQuantity is a DerivedField
			type is Decimal size 13.4
			if (PurchaseOrderReceiptInvoiceLinksRel exist)
				return (PurchaseOrderReceiptInvoiceLinksRel.MatchedQuantity + OpenToMatchQuantity)
			else
				return EnteredReceivedQuantity 
								    
		DerivedUnitOfMeasure is a ConditionalField
			type is AlphaUpper size 4
			if (!VendorPriceUOM = VendorBuyUOM)
				VendorPriceUOM
			else
				ReceivedUOM 
				
		DerivedReceiptUnitCost is a DerivedField
			type is like InternationalCost
			initialize LocalAdjustedUnitCost
			for each MatchInvoiceMessage.POCostMessagesForMatchReconciliationInvoiceMessageRel
				if (each.MatchMessageOrigin.PoCost)
					if (each.ApplicationAction.AdjustCost)
						return each.AdjustedUnitCost
						end for each
			return MatchUnitCost
							
		DerivedReceiptExtendedCost is a DerivedField
			type is like InternationalCost
			return (DerivedReceiptLineQuantity * DerivedReceiptUnitCost)
			
		DerivedOpenAmount is a DerivedField
			type is like InternationalCost
			return (DerivedOpenToMatchQuantity * PurchaseOrderLine.DerivedEntUnitCst)
			
		CalculateRemainingQuantity is a DerivedField	
			type is like Quantity
				precision is Item.NumberOfDecimalsQuantity
			restricted
			return (BuyUOMQuantity - MatchedQuantity) 

		PurchaseOrderReceiptLineAOCQuantity is a DerivedField		
			type is like Quantity
				precision is Item.NumberOfDecimalsQuantity
			restricted																	

			if (EnteredReceivedQuantity = VendorBuyUOM)
				return EnteredReceivedQuantity
			else
				return (EnteredReceivedQuantity * ReceivedUOMMultiplier / VendorBuyUOMMultiplier)
		
		DerivedOpenToMatchQuantity is a DerivedField  
			type is like Quantity
			if (CatchWeightQuantity entered)
			    return CatchWeightQuantity
			else
				return OpenToMatchQuantity

		DerivedOpenToMatchUOM is a DerivedField 
			type is like UnitOfMeasure
			default label is "UOM"
			if (CatchWeightQuantity entered)
			    return VendorPriceUOM
			else
				return ReceivedUOM

		DerivedOpenToMatchExtendedCost is a DerivedField
			type is like InternationalAmount
			restricted
			if (IsCatchWeightItem)
				return EnteredReceivedQuantity * PurchaseOrderLine.VendorBuyUnitCost
			else
				return (OpenToMatchQuantity * MatchUnitCost)
		
		CalculateUnitCost is a DerivedField

			type is like InternationalCost
			restricted
			if (PurchaseOrder.VendorReturn entered
			and PurchaseOrderLine.ItemType.Inventoried
			and PurchaseOrderLine.CostOption.NoCharge)
				return VendorReturnLine.UnitCost
			else
				if (OriginalUnitCost not entered)
					if (PurchaseOrderLine.LastMatchUnitCost entered)
						return PurchaseOrderLine.LastMatchUnitCost	
					else
						return PurchaseOrderLine.LandedUnitCost
				else
					return OriginalUnitCost
		
		AOCUnitCost is a DerivedField		

			type is like InternationalCost
			restricted
			return (sum ReceiptLineAOCsRel.OriginalUnitCost)
			
		AOCTaxCost is a DerivedField

			type is like InternationalCost
			restricted
			return (sum ReceiptLineAOCsRel.TaxableUnitCost)

		TaxUnitCost is a DerivedField

			type is like InternationalCost
			restricted
			if (TaxCode entered)
				CalculateTax.InvoiceCompany			= Company
				CalculateTax.TaxCode				= TaxCode
				CalculateTax.ProductTaxCategory		= ProductTaxCategory
				CalculateTax.TaxableAmount			= ExtendedAmount
				CalculateTax.TaxDate				= ReceivedDate
				CalculateTax.InvoiceDate			= ReceivedDate
				CalculateTax.PaymentDate			= ReceivedDate
				CalculateTax.GeneralLedgerDate		= ReceivedDate
				CalculateTax.PostalAddress			= PurchaseOrder.DropshipAddress
				CalculateTax.FromPostalAddress		= Vendor.VendorAddressesRel.PostalAddress
				if  (TaxEntityUsesThirdPartyTax)
			   		CalculateTax.RelatedObjectReference			= reference to this instance
		   			CalculateTax.InputVertexRequest				= "P" 
			   		CalculateTax.TransactionSource				= "I"	
			   		CalculateTax.InputReturnVertexTaxIn			= "D" 
			   		CalculateTax.InvoiceCompany					= Company
			   		CalculateTax.ProcessLevel					= PurchaseOrder.ProcessLevel 
					CalculateTax.Vendor							= PurchaseOrder.Vendor 
					CalculateTax.VendorCustomerName				= PurchaseOrder.Vendor.VendorName 	
					CalculateTax.LineNumber						= PurchaseOrderLine		
			   		CalculateTax.CommodityCode					= PurchaseOrderLine.ICNCode				
					CalculateTax.TaxUsageCode					= PurchaseOrderLine.TaxUsageCode					
					CalculateTax.DeliveryTerms          		= PurchaseOrder.ShipTerm
					CalculateTax.PostalAddress					= PurchaseOrder.ProcessLevel.PostalAddress	
				    CalculateTax.VATRegistrationCountry    	 	= TaxEntityRel.VATRegistrationCountry 			
				    CalculateTax.VATRegistrationNumber			= TaxEntityRel.VATRegistrationNumber			
					if (PurchaseOrder.PurchaseFromLocation entered
					and PurchaseOrder.PurchaseFromLocation.CurrentAddressRelExists
					and PurchaseOrder.PurchaseFromLocation.VATRegistrationNumber entered)
						CalculateTax.FromPostalAddress				= PurchaseOrder.PurchaseFromLocation.VendorAddress 
				    	CalculateTax.FromVATRegistrationCountry 	= PurchaseOrder.PurchaseFromLocation.VATRegistrationCountry			
				    	CalculateTax.FromVATRegistrationNumber		= PurchaseOrder.PurchaseFromLocation.VATRegistrationNumber				
					else
						CalculateTax.FromPostalAddress				= Vendor.VendorAddress		
				    	CalculateTax.FromVATRegistrationCountry 	= Vendor.VATRegistrationCountry					
				    	CalculateTax.FromVATRegistrationNumber		= Vendor.VATRegistrationNumber					
				    CalculateTax.DefaultFilingCurrency 			= Company.Currency 
					CalculateTax.CurrencyRate					= PurchaseOrder.EnteredCurrencyConversionRate 		
				    CalculateTax.TransactionCurrency 			= PurchaseOrder.Currency								
					CalculateTax.BaseCurrency 					= Company.Currency					
					CalculateTax.ReceiptSite					= PurchaseOrder.ProcessLevel								
					CalculateTax.UniqueIdOfRelatedObject		= UniqueID									
				
				CalculateTax.Function				= CalculateTax.Function.CalculateTax
				CalculateTax.NbrOfDecimals			= Item.NumberOfDecimalsCost
				return (CalculateTax.OutputTotalTaxAmount * VendorPriceUOMQuantity)

		SabrixTaxUnitCost is a DerivedField

			type is like InternationalCost
			restricted
			if (TaxCode entered) 
				return (((PurchaseOrderLine.LandedUnitCost - PurchaseOrderLine.EnteredUnitCost) * ExtendedAmount / PurchaseOrderLine.ExtendedAmount)  * VendorPriceUOMQuantity) 

		LandTaxUnitCost is a DerivedField


			type is like InternationalCost
			restricted
			if (TaxCode entered 
			and TaxEntityUsesSabrix)
				return SabrixTaxUnitCost * VendorPriceUOMQuantity  
			else 
			if (CalculateTax.OutputTotalTaxAmount = CalculateTax.OutputTotalLandedTaxAmount)
				return TaxUnitCost
			else
				return (CalculateTax.OutputTotalTaxAmount5DP * VendorPriceUOMQuantity)
		
		UnitCost is a DerivedField

			type is like InternationalCost
			restricted
			return (CalculateUnitCost + AOCUnitCost + AOCTaxCost + LandTaxUnitCost) 
		
		DerivedEnteredReceivedQuantity is a DerivedField
			type is like Quantity
				precision is Item.NumberOfDecimalsQuantity
			restricted
			if (ReceivedUOM entered
			and PurchaseOrderLine.EnteredBuyUOM != ReceivedUOM
			and EnteredReceivedQuantity entered)
				UOMCalculation.InputUOM			= PurchaseOrderLine.EnteredBuyUOM
				UOMCalculation.InputToUOM		= ReceivedUOM
				UOMCalculation.InputQuantity	= EnteredReceivedQuantity
				UOMCalculation.Method			= UOMCalculation.Method.ConvertToAlternate
				return UOMCalculation.OutputQuantity
			else
				return EnteredReceivedQuantity
		
		DerivedBuyUOMQuantity is a DerivedField
			type is like Quantity
				precision is Item.NumberOfDecimalsQuantity
			restricted
			if (HasItemMaster
            and PurchaseOrderLine.EnteredBuyUOM != ReceivedUOM)
                UOMCalculation.InputUOM             = ReceivedUOM
                UOMCalculation.InputUOMConversion   = ReceivedUOMMultiplier
                UOMCalculation.InputToUOM           = PurchaseOrderLine.EnteredBuyUOM
                UOMCalculation.InputToUOMConversion = PurchaseOrderLine.EnteredBuyUOMMultiplier
                UOMCalculation.InputQuantity        = EnteredReceivedQuantity
                UOMCalculation.Method               = UOMCalculation.Method.ConvertToAlternate
                UOMCalculation.InputDecimal			= Item.NumberOfDecimalsQuantity
				return UOMCalculation.OutputQuantity
			else
				return EnteredReceivedQuantity
				
		DerivedVendorPriceUOMQuantity is a DerivedField
			type is like Quantity
				precision is Item.NumberOfDecimalsQuantity
			restricted
			if (HasItemMaster)
				if (Item.IsCatchWeightItem)
					return CatchWeightQuantity
            	else
            	if (ReceivedUOM != VendorPriceUOM)
	                UOMCalculation.InputUOM             = ReceivedUOM
	                UOMCalculation.InputUOMConversion   = ReceivedUOMMultiplier
	                UOMCalculation.InputToUOM           = VendorPriceUOM
	                UOMCalculation.InputToUOMConversion = VendorPriceUOMMultiplier
	                UOMCalculation.InputQuantity        = EnteredReceivedQuantity
	                UOMCalculation.Method               = UOMCalculation.Method.ConvertToAlternate
	                UOMCalculation.InputDecimal			= Item.NumberOfDecimalsQuantity
	                return UOMCalculation.OutputQuantity
	           	else
	           		return EnteredReceivedQuantity
			else
				return EnteredReceivedQuantity
		
		DerivedVendorPriceUOMOriginalQty is a DerivedField
			type is like Quantity
				precision is Item.NumberOfDecimalsQuantity
			restricted
			if (HasItemMaster)
				if (Item.IsCatchWeightItem)
					return OriginalCatchWeightQuantity
            	else
            	if (ReceivedUOM != VendorPriceUOM)
	                UOMCalculation.InputUOM             = ReceivedUOM
	                UOMCalculation.InputUOMConversion   = ReceivedUOMMultiplier
	                UOMCalculation.InputToUOM           = VendorPriceUOM
	                UOMCalculation.InputToUOMConversion = VendorPriceUOMMultiplier
	                UOMCalculation.InputQuantity        = OriginalReceivedQuantity
	                UOMCalculation.Method               = UOMCalculation.Method.ConvertToAlternate
	                UOMCalculation.InputDecimal			= Item.NumberOfDecimalsQuantity
	                return UOMCalculation.OutputQuantity
	           	else
	           		return OriginalReceivedQuantity
			else
				return OriginalReceivedQuantity

		DerivedBackorderedQuantity is a DerivedField
			type is like Quantity
				precision is DerivedNumberOfDecimalsQuantity
					round to precision
			restricted
			if (PurchaseOrderLine.QuantityToProcess - PurchaseOrderLine.ReceivedQuantity > 0)
				return PurchaseOrderLine.QuantityToProcess - PurchaseOrderLine.ReceivedQuantity
			else
				return 0

		DerivedQuantityToReceiptUOM is a DerivedField
			type is like Quantity
			restricted

			if (ReceivedUOM not = PurchaseOrderLine.EnteredBuyUOM)
				initialize UOMCalculation
				UOMCalculation.InputQuantity			= DerivedBackorderedQuantity
				UOMCalculation.InputUOM					= PurchaseOrderLine.EnteredBuyUOM
				UOMCalculation.InputToUOM				= ReceivedUOM
				UOMCalculation.Method					= UOMCalculation.Method.ConvertToAlternate
				UOMCalculation.InputDecimal				= Item.NumberOfDecimalsQuantity
				return UOMCalculation.OutputQuantity
			else
				return DerivedBackorderedQuantity
		
		TrackingMethod is a DerivedField
			type is Numeric size 1
			restricted
			if (ItemLocationRel exist)
				if (IsLotRequiredAtReceipt)
					if (Item.CatchWeightCode.NotCatchWeight)
						return 3	
					else
						return 5	
				else
					if (IsSerialRequiredAtReceipt)	
						return 2 	
					else
						if (MultipleBins
						or	IsBinTracked)
							if (Item.CatchWeightCode.NotCatchWeight)
								return 1	
							else
								return 4	
			else	
				if (Item.LotTracked.LotRequiredAtReceipt)
					if (Item.CatchWeightCode.NotCatchWeight)
						return 3	
					else
						return 5	
				else
					if (Item.SerialTracked.SerialRequiredAtReceipt)
						return 2	
					else
						if (MultipleBins
						or	IsBinTracked)
							if (Item.CatchWeightCode.NotCatchWeight)
								return 1	
							else
								return 4	
		
		QuantityExceed is a MessageField
			restricted
			"QuantityReceivedExceedsOrderEntryRequest"											//"POMSG.808"
		
		CheckQuantityExceed is a DerivedField
			type is Alpha size 40
			restricted
			if (PurchaseOrderLineSourcesRel exists
			and Company.CustomerOrderOvershipmentMessages)
				return QuantityExceed
				
		Overshipment is a MessageField
			restricted 									
			"ExceedsOvershipmentTolerance"	
			
		CheckOvershipment is a DerivedField
			type is Alpha size 40
			restricted 
			if (!IsBuyerOverreceiving)
				return Overshipment												//"POMSG.812"
		
		SubstituteMessage is a MessageField
			restricted
			"SubstituteReceivedForRequestedItem"												//"POMSG.809"
			
		StockQuantityAlertMessage is a MessageField
			restricted
			"CatchWeightItem,EnterStockQuantity"
			
		OutOfBalanceMessage is a MessageField
			restricted
			"<ReceivingDetailMessage>QuantityDoesNotEqualReceivedQuantity"

		OutOfBalanceMessageForCardView is a MessageField
			"<ReceivingDetailMessage>QuantityMismatch"
		
		QuantityRedAlertMessage is a DerivedField
			type is Alpha size 80
			restricted
			if (ShowQuantityRedAlert)
				if (!IsCatchWeightItemFulfilled)
					return StockQuantityAlertMessage
				else
				if (not DetailsInBalance)
					return OutOfBalanceMessage

		QuantityRedAlertMessageForCardView is a DerivedField
			type is Alpha size 80
			if (ShowQuantityRedAlert)
				if (!IsCatchWeightItemFulfilled)
					return StockQuantityAlertMessage
				else
				if (not DetailsInBalance)
					return OutOfBalanceMessageForCardView
		
		CheckSubstitute is a DerivedField
			type is Alpha size 40
			restricted 
			if (Company.SubstituteMessages
			and SubstituteReceiving)
				return Substitute
				
		NoVendorUnitcost is a MessageField
			restricted
			"NoVendorUnitcost"																	//"POMSG.811"
		
		CheckUnitCost is a DerivedField
			type is Alpha size 40
			restricted
			if ((PurchaseOrderLine.CostOption.VendorDetermined
			or  (PurchaseOrderLine.CostOption.NoCharge				
			and  PurchaseOrderLine.AllowZeroCostInvoice))			
			and PurchaseOrderLine.LandedUnitCost not entered
			and PurchaseOrderLine.LastMatchUnitCost not entered
			and OriginalUnitCost not entered)
				return UnitCost

		DerivedPurchaseOrderReceiptLineCommentsConditionalMessage is a ConditionalField
			type is Alpha size 65
			if (HasReceiptLineComments)
				DerivedPurchseOrderReceiptLineCommentsMessage
			else
				blank

		DerivedPurchseOrderReceiptLineCommentsMessage is a MessageField
			restricted
			"PurchaseOrderReceiptLineHasCommentsAndPossiblyAttachments"
						
		DerivedNumberOfDecimalsCost is a DerivedField
			type is Numeric size 1
			restricted
			if (HasItemMaster) 
				return Item.NumberOfDecimalsCost
			else
			if (InventoryCompanyRel exists) 
				return InventoryCompanyRel.NumberOfDecimalsCost
			else
				return 8

		DerivedLandedAddOnCharge is a DerivedField
			type is like UnitCost

			return (sum LandedPurchaseOrderLineAddOnChargeRel.TotalAddOnChargeAmount)
			
		MatchedNotReceivedQuantity is a DerivedField
			type is like Quantity
				precision is DerivedNumberOfDecimalsQuantity
			if ((MatchedQuantity - DerivedBuyUOMQuantity) < 0)
                initialize MatchedNotReceivedQuantity
            else
                return (MatchedQuantity - DerivedBuyUOMQuantity)

		CatchWeightMatchedNotReceivedQuantity is a DerivedField
			type is like Quantity
				precision is DerivedNumberOfDecimalsQuantity
			if (IsCatchWeightItem)
				if ((CatchWeightMatchedQuantity - CatchWeightQuantity) < 0)
					return 0
				else
					return (CatchWeightMatchedQuantity - CatchWeightQuantity)
			else
				return 0

	    CommentCount                       is a DerivedField
            type is Alpha size up to 20
            restricted
            if (PurchaseOrderReceiptLineCommentRel exists)
                return "(" + instance count of PurchaseOrderReceiptLineCommentRel + ")"
            else
                return ""

		DerivedRequester is a DerivedField
			type is Alpha size 15
			if (MultipleRequesters)
				return "Multiple"
			if (first PurchaseOrderRequesterLineSourceRel.Requester != 0)
				return first PurchaseOrderRequesterLineSourceRel.Requester

		DerivedRequisitionLine is a DerivedField
			type is like RequisitionLine
			restricted
			if (first PurchaseOrderRequesterLineSourceRel exists
			and first PurchaseOrderRequesterLineSourceRel.Requester != 0)
				return first PurchaseOrderRequesterLineSourceRel.PurchaseOrderLineSource.SourceDocumentLineNumber
			return ""
				
		DerivedRequestingLocation is a DerivedField
			type is like RequestingLocation
			restricted
			if (first PurchaseOrderRequesterLineSourceRel exists
			and first PurchaseOrderRequesterLineSourceRel.Requester != 0)
				return first PurchaseOrderRequesterLineSourceRel.RequestingLocation
			return ""
				
		DerivedRequisition is a DerivedField
			type is like Requisition
			restricted
			if (first PurchaseOrderRequesterLineSourceRel exists
			and first PurchaseOrderRequesterLineSourceRel.Requester != 0)
				return first PurchaseOrderRequesterLineSourceRel.PurchaseOrderLineSource.SourceDocumentNumeric
			return ""

		DerivedRequesterName is a DerivedField
			type is Alpha up to 230
			if (MultipleRequesters)
				return "Multiple"
			if (first PurchaseOrderRequesterLineSourceRel.Requester != 0)
				return first PurchaseOrderRequesterLineSourceRel.Requester.PresentationNameSnapshot

    	ReceiptDisplay						is a LabelField
    		"Receipt:<PurchaseOrderReceipt>"
    	LineDisplay							is a LabelField
    		"Line:<PurchaseOrderReceiptLine>"
    	ReceiptAndLineDisplay				is a LabelField
			"Receipt:<PurchaseOrderReceipt>_|_Line:<PurchaseOrderReceiptLine>"
    	PurchaseOrderDisplay				is a LabelField
    		"PurchaseOrder:<PurchaseOrder>"
    	CompanyDisplay						is a LabelField
    		"Company:<Company>,<Company.Name>"
    	ItemDisplay							is a LabelField
    		"Item:<Item>"
    	ItemDescriptionDisplay				is a LabelField
    		"ItemDescription:<Description>"
    	StatusDisplay						is a LabelField
    		"Status:<Status>"
		RemainingQuantityDisplay			is a LabelField
			"RemainingQuantity:<PurchaseOrderLine.RemainingQuantity>_<PurchaseOrderLine.EnteredBuyUOM>"
		ReceivedQuantityDisplay				is a LabelField
			"ReceivedQuantity:<EnteredReceivedQuantity>_<ReceivedUOM>"
		OpenToMatchQuantityDisplay				is a LabelField
			"OpenToMatchQuantity:<OpenToMatchQuantity>_<VendorPriceUOM>"
			
		MobileCompanyDisplay				is a LabelField
			"<Company>_-_<Company.Name>"

		ItemDescriptionCardViewDisplay		is a LabelField
			"<Item>_-_<Description>"

		VendorItemDisplay					is a LabelField
			"VendorItem:<VendorItem>"

		ReceivedAndRemainingQuantityDisplay	is a LabelField
			"Received:<EnteredReceivedQuantity>_<ReceivedUOM>_|_Remaining:<PurchaseOrderLine.RemainingQuantity>_<PurchaseOrderLine.EnteredBuyUOM>"

		ReceivedQuantityDisplayLabel	is a LabelField  
			"Received:<EnteredReceivedQuantity>_<ReceivedUOM>"

		RemainingQuantityDisplayLabel is a LabelField 
			"Remaining:<PurchaseOrderLine.RemainingQuantity>_<PurchaseOrderLine.EnteredBuyUOM>"

		CatchWeightQuantityDisplay			is a LabelField
			"CatchWeight:<CatchWeightQuantity>_<CatchWeightUOM>"


		
		DerivedItemFlag is a DerivedField
			type is Alpha size 60
			restricted
			LocalConfigurationParameter = "IsCSF_NonSOR_For_Item"
			if (FSMBODConfigurationParameterRel exists)
				return FSMBODConfigurationParameterRel.Value
		
		DerivedConfigDocID is a DerivedField
			type is Alpha size 60
			restricted
			LocalConfigurationParameter = "RequiredCleanDocumentID"
			if (FSMBODConfigurationParameterRel exists)
				return FSMBODConfigurationParameterRel.Value
		
		DerivedItemGroup is a DerivedField
			type is Alpha size 5
			restricted
			return InventoryCompanyRel.ItemGroup
		
		DerivedItemID is a DerivedField
			type is Alpha size 100
			restricted
			if (ItemType.Special or DerivedItemFlag = "Y" or DerivedConfigDocID = "Y")
				return Item
			else
				return LocalFSMGroup + LocalDelimiter + DerivedItemGroup + LocalDelimiter + Item
		
		DerivedActivity is a DerivedField
			type is Alpha size 25
			restricted
			return first PurchaseOrderLineSourcesRel.RequisitionLineRel.RequisitionLineDistributionsRel.DistributionAccount.Project
		
		DerivedTempAccount is a DerivedField	
			type is Alpha size 26
			restricted
			return first PurchaseOrderLineSourcesRel.RequisitionLineRel.RequisitionLineDistributionsRel.DistributionAccount.GeneralLedgerChartAccount
		
		UserAreaXML is a DerivedField
			type is XMLDocument
			restricted
			if (PurchaseOrderLineSourcesRel exist)
				UserAreaXML = template.IONSyncReceiveDelivery_PurchaseOrderReceiptLine_UserArea_ST document for this instance
				return UserAreaXML
			else	
				return ""
		
		DerivedServiceIndicator is a DerivedField
			type is Alpha size 10
			restricted
			if (ItemType.Service)
				return "true"
			else
				return "false"
						
		SerialXML is a DerivedField
			type is XMLDocument
			restricted
			if (LastPurchaseOrderTransactionDetail > 0)
				if (PurchaseOrderTransactionDetailsRel exist)
					if (PurchaseOrderTransactionDetailsRel.Serial entered)
						for each PurchaseOrderTransactionDetailsRel
							SerialXML += template.IONSyncReceiveDelivery_PurchaseOrderReceiptLine_Serial_ST document for each
						return SerialXML
					else 
						return ""
				else
					return ""
			else
				return ""
		
		LotXML is a DerivedField
			type is XMLDocument
			restricted
			if (LastPurchaseOrderTransactionDetail > 0)
				if (PurchaseOrderTransactionDetailsRel exist)
					if (PurchaseOrderTransactionDetailsRel.Lot entered)
						for each PurchaseOrderTransactionDetailsRel
							LotXML += template.IONSyncReceiveDelivery_PurchaseOrderReceiptLine_Lot_ST document for each
						return LotXML
					else 
						return ""
				else
					return ""
			else
				return ""

	

		DerivedTenantID is a DerivedField 
			type is Alpha size 60
			restricted
			LocalConfigurationParameter = "tenantID"
			if (FSMBODConfigurationParameterRel exists)
				return FSMBODConfigurationParameterRel.Value
				
		InspectionReqDescription is a DerivedField
			type is Alpha 100
			restricted
			return "Inspection Required for PO # "+ PurchaseOrder
				
		DerivedBODID is a DerivedField
			type is Alpha 200
			restricted 
			return	"infor-nid:" + DerivedTenantID +":"+ GeneralLedgerCompanyRel.FinanceEnterpriseGroup +":"+ PurchaseOrderReceipt +":"+ "?InspectionReq&verb=Process"
			
		InspectionReqAlertXML is a DerivedField
			type is XMLDocument
			restricted
			InspectionReqAlertXML = template.IONInspectionReq_PurchaseOrderReceipt_ST document for this instance
								
		DerivedPORelease is a DerivedField
			type is Alpha 30
			restricted 
			return	PurchaseOrderReceipt.PORelease
										
		DerivedPOCode is a DerivedField
			type is Alpha 30
			restricted 
			return	PurchaseOrderReceipt.POCode



		DerivedUnitCostInStockForInventoryTransactionLine is a DerivedField
			type is like UnitCost
			restricted
			UOMCalculation.InputUOM				= ReceivedUOM
			UOMCalculation.InputUOMConversion	= ReceivedUOMMultiplier
			UOMCalculation.InputUnitCost		= DerivedOriginalCostWithTaxAndAOC
			UOMCalculation.InputToUOM			= Item.StockUOM
			UOMCalculation.Method				= UOMCalculation.Method.ConvertToStock
			return UOMCalculation.OutputUnitCost	
			
		DerivedReceivedUOMInvTranUnitCost is a DerivedField
			type is like UnitCost
			restricted
			if (ReceivedUOM not = Item.StockUOM)
				UOMCalculation.InputUOM				= Item.StockUOM
				UOMCalculation.InputUOMConversion	= 1
				UOMCalculation.InputUnitCost		= DerivedInventoryTransactionUnitCost
				UOMCalculation.InputToUOM			= ReceivedUOM
				UOMCalculation.InputToUOMConversion	= ReceivedUOMMultiplier
				UOMCalculation.Method				= UOMCalculation.Method.ConvertToAlternate
				return UOMCalculation.OutputUnitCost
			else
				return DerivedInventoryTransactionUnitCost

		DerivedReceivedUOMInvTranUnitCostInBaseCurrency is a DerivedField
			type is like UnitCost
			restricted
			if (PurchaseOrder.Currency = Company.Currency)
				return DerivedReceivedUOMInvTranUnitCost
			else
				initialize CurrencyExchange
				SavedFromCurrency 					= PurchaseOrder.Currency
				CurrencyExchange.ToCurrency			= Company.Currency
				LocalCurrencyTable            		= PurchaseOrder.CurrencyTable
				if (PurchaseOrder.CurrencyExchangeSetPoint.Receiving)
					SavedExchangeDate 				= PurchaseOrderReceipt.ReceivedDate
				else
					SavedExchangeDate 				= PurchaseOrder.PurchaseOrderDate
				SavedTransactionAmount				= DerivedReceivedUOMInvTranUnitCost
				CurrencyExchange.EnteredCurrencyRate 	= PurchaseOrder.ReceiptCurrencyConversionRate
				return CurrencyExchange.OutputCurrencyAmount
		
		DerivedOriginalUnitCost is a DerivedField
			type is like InternationalCost
				precision is DerivedNumberOfDecimalsCost
			default label is "ReceivedUnitCost"
			if (OriginalUnitCost entered)
				if (PurchaseOrderLine.EnteredBuyUOM != PurchaseOrderLine.VendorPriceUOM)
					initialize UOMCalculation
					UOMCalculation.InputUOM 			= PurchaseOrderLine.VendorPriceUOM 
					UOMCalculation.InputToUOM 			= PurchaseOrderLine.EnteredBuyUOM
					UOMCalculation.InputUnitCost 		= OriginalUnitCost
					UOMCalculation.Method 				= UOMCalculation.Method.ConvertToAlternate
					return UOMCalculation.OutputUnitCost
				else 
					return OriginalUnitCost	

		DerivedCatchWeightRejectedQuantity is a DerivedField
			type is like Quantity
				precision is DerivedNumberOfDecimalsQuantity
			if (CatchWeightRejectedQuantity entered)
				return CatchWeightRejectedQuantity
			else
				initialize UOMCalculation
				UOMCalculation.InputUOM 			= ReceivedUOM
				UOMCalculation.InputToUOM 			= Item.StockUOM
				UOMCalculation.InputQuantity 		= RejectedQuantity
				UOMCalculation.Method 				= UOMCalculation.Method.ConvertToAlternate
				return UOMCalculation.OutputQuantity
			
		DerivedCatchWeightMatchedQuantity is a DerivedField
			type is like Quantity
				precision is DerivedNumberOfDecimalsQuantity
			if (CatchWeightMatchedQuantity entered)
				return CatchWeightMatchedQuantity
			else
				initialize UOMCalculation
				UOMCalculation.InputUOM 			= ReceivedUOM
				UOMCalculation.InputToUOM 			= Item.StockUOM
				UOMCalculation.InputQuantity 		= MatchedQuantity
				UOMCalculation.Method 				= UOMCalculation.Method.ConvertToAlternate
				return UOMCalculation.OutputQuantity
			
		DerivedCatchWeightArchivedQuantity is a DerivedField
			type is like Quantity
				precision is DerivedNumberOfDecimalsQuantity
			if (CatchWeightArchivedQuantity entered)
				return CatchWeightArchivedQuantity
			else
				initialize UOMCalculation
				UOMCalculation.InputUOM 			= ReceivedUOM
				UOMCalculation.InputToUOM 			= Item.StockUOM
				UOMCalculation.InputQuantity 		= ArchivedQuantity
				UOMCalculation.Method 				= UOMCalculation.Method.ConvertToAlternate
				return UOMCalculation.OutputQuantity
			
		DerivedCatchWeightArchivedWriteOffQuantity is a DerivedField
			type is like Quantity
				precision is DerivedNumberOfDecimalsQuantity
			if (CatchWeightArchivedWriteOffQuantity entered)
				return CatchWeightArchivedWriteOffQuantity
			else
				initialize UOMCalculation
				UOMCalculation.InputUOM 			= ReceivedUOM
				UOMCalculation.InputToUOM 			= Item.StockUOM
				UOMCalculation.InputQuantity 		= ArchivedWriteOffQuantity
				UOMCalculation.Method 				= UOMCalculation.Method.ConvertToAlternate
				return UOMCalculation.OutputQuantity
		
		DerivedCatchWeightOpenToMatchQuantity is a DerivedField 
			type is like Quantity
				precision is DerivedNumberOfDecimalsQuantity
			if (CatchWeightOpenToMatchQuantity entered)
				return CatchWeightOpenToMatchQuantity
			else

				initialize UOMCalculation
				UOMCalculation.InputUOM 			= Item.StockUOM
				UOMCalculation.InputToUOM 			= ReceivedUOM
				UOMCalculation.InputQuantity 		= OpenToMatchQuantity
				UOMCalculation.Method 				= UOMCalculation.Method.ConvertToAlternate
				return UOMCalculation.OutputQuantity
			
		DerivedCatchWeightChargebackQuantity is a DerivedField
			type is like Quantity
				precision is DerivedNumberOfDecimalsQuantity
			if (CatchWeightChargebackQuantity entered)
				return CatchWeightChargebackQuantity
			else
				initialize UOMCalculation
				UOMCalculation.InputUOM 			= ReceivedUOM
				UOMCalculation.InputToUOM 			= Item.StockUOM
				UOMCalculation.InputQuantity 		= ChargebackQuantity
				UOMCalculation.Method 				= UOMCalculation.Method.ConvertToAlternate
				return UOMCalculation.OutputQuantity
			
		DerivedCatchWeightWriteOffQuantity is a DerivedField
			type is like Quantity
				precision is DerivedNumberOfDecimalsQuantity
			if (CatchWeightWriteOffQuantity entered)
				return CatchWeightWriteOffQuantity
			else
				initialize UOMCalculation
				UOMCalculation.InputUOM 			= ReceivedUOM
				UOMCalculation.InputToUOM 			= Item.StockUOM
				UOMCalculation.InputQuantity 		= WriteOffQuantity
				UOMCalculation.Method 				= UOMCalculation.Method.ConvertToAlternate
				return UOMCalculation.OutputQuantity

		IsOutofBalancemsg		is a MessageField
			"<ReceivingDetailMessage>_\<QuantityNotEqual>" 
			
		HasBuyerMsgError	is a MessageField
			"HasBuyerMessage"
			
		StockQuantityAlertMsg is a MessageField
			"CatchWeightItem,EnterStockQuantity"
		
		CatchWeightOutOfToleranceMsg is a MessageField
			"CatchWeightQuantityIsOutsideOfTolerance"

		DerivedSpecialHandlingCode					is a DerivedField
			type is like SpecialHandlingCode
			return PurchaseOrderLine.SpecialHandlingCode

		DerivedSpecialHandlingDescription			is a DerivedField
			type is like Description
			return PurchaseOrderLine.SpecialHandlingCode.Description

		DerivedSpecialHandlingInstructions			is a DerivedField
			type is like Description4
			return PurchaseOrderLine.SpecialHandlingInstructions
			
		DerivedTimeSensitive						is a DerivedField
			type is Boolean
			return PurchaseOrderLine.SpecialHandlingCode.TimeSensitive

		DerivedHandlingTimeInMinutes				is a DerivedField
			type is Numeric 3
			return PurchaseOrderLine.HandlingTimeInMinutes

		DerivedInvoiceStatus is a DerivedField			
			type is Numeric 1
			return first PayablesInvoiceByVendorInvoiceRel.Status

		DerivedInvoiceDate is a DerivedField			
			type is Date
			return first PayablesInvoiceByVendorInvoiceRel.InvoiceDate

		OutputNumberOfDecimals is a DerivedField		
			type is Numeric 1
			if (PurchaseOrder.Currency entered)
				return PurchaseOrder.Currency.NumberOfDecimals
			else
				return 2

		DerivedRoundTo is a DerivedField		
			type is Decimal 5.4
			restricted
			if (OutputNumberOfDecimals = 2)
				return .01
			else
			if (OutputNumberOfDecimals = 0)
				return 1
			else
			if (OutputNumberOfDecimals = 3)
				return .001
			else
			if (OutputNumberOfDecimals = 4)
				return .0001

		DerivedTaxableAmount is a DerivedField
			type is like InternationalCost 
			restricted
			LocalLineTotalCost = OriginalUnitCost * VendorPriceUOMQuantity
			round LocalLineTotalCost to nearest DerivedRoundTo
			return LocalLineTotalCost
			
		DerivedInvoicedTaxAmount is a DerivedField
			type is like InternationalAmount
			restricted
			return ((PurchaseOrderLine.InvoicedTaxAmount / PurchaseOrderLine.VendorPriceUOMQuantity) * VendorPriceUOMQuantity)

		DerivedAssetDetailNotReceivedQuantity is a DerivedField 
			type is Numeric 6
			restricted 
			return (instance count of PurchaseOrderLineReceivedNoAssetDetailRel)

		DerivedForegroundLimit is a DerivedField
			type is Numeric 2
			restricted
			return 50

		DerivedRemainingPutawayQuantity is a DerivedField
            type is Decimal size 13.4
            default label is untranslatable:"Remaining"
            return (EnteredReceivedQuantity - SumOfQuantity)
		
		DistributionManagementMessageText is a MessageField
			"<ShipToLocation>IsA_Warehouse;_Bin_TrackingIsASuggestedSetupToUtilize_Warehouse_Storage_Location"
    Conditions
		IsMSCMTrackedDoNotPrint
			restricted
			when (Company.PackageTrackingLevel.EnableMscmRadTracking
			and   not Company.PrintPutawayAndDeliveryTicket)
    
    	MissingUOM
    		restricted
    		when (VendorPriceUOM not entered
			or	  VendorBuyUOM not entered)
    
    	BypassUnitAndAmountEdit
    		restricted
    		when (PurchaseOrderLine.CostOption.NoCharge
    		or    PurchaseOrderLine.AllowZeroCostInvoice)

		PurchaseOrderReceiptLineExists
			when (PurchaseOrderReceiptLine exists)
		
		CanCreateReceiptLine
			restricted
			when (not PurchaseOrderLine.ItemType.Service)
		
		CanUpdateReceiptLine
			restricted
			when (PurchaseOrderReceipt.IsUnreleased
			and   !PurchaseOrderReceipt.InterfaceInProcess)
		
		LineFullyMatched
			restricted
			when (MatchedQuantity >= DerivedVendorPriceUOMOriginalQty)
		
		TaxEntityUsesThirdPartyTax
			restricted
			when (TaxEntityUsesVertex
			or    TaxEntityUsesSabrix)
		
		TaxEntityUsesVertex
			restricted				 							
			when (TaxEntityValue.ThirdParty.VertexOSeries)	

		TaxEntityUsesSabrix										
			restricted				 							
			when (TaxEntityValue.ThirdParty.Sabrix)	
		
		ReceivingDateWithinRange
    		restricted
    		when (!ReceivedDateRange entered
    		or   (ReceivedDateRange entered
    		and   ReceivedDate within ReceivedDateRange))
		
		ReadyForArchive
			restricted
			when (not PurchaseOrderLine.MatchedRequired
			or    OpenToMatchQuantity not entered)

    	ItemLocationInventoryTracked
    		restricted
    		when (ItemLocationRel.InventoryTracked)

    	ItemHazardCodeEntered
    		restricted
    		when (ItemHazardCode entered)
    	






		
		ReceivedAllNotAllowed
			restricted
			when (EnteredReceivedQuantity entered
			and IsCatchWeightItem
			and CatchWeightQuantity not entered)

		RecallNoticesExist
        	restricted
        	when (RecallProductItemsRel exists)
		
		FromContract
			restricted
			when (PurchaseOrderLine.CostCode.TierReqLocParticipant
			or	  PurchaseOrderLine.CostCode.TierIcLocationParticipant
			or	  PurchaseOrderLine.CostCode.TierCompanyParticipant
			or    PurchaseOrderLine.CostCode.Contract
			or	  PurchaseOrderLine.CostCode.CatalogQuote
			or	  PurchaseOrderLine.CostCode.Blanket)
		
		FromLastPOLastCost
			restricted
			when (PurchaseOrderLine.CostCode.LastCost
			or    PurchaseOrderLine.CostCode.LastPoCreated)

		CostUpdateYes
			restricted
			when ((PurchaseOrderLine.HasPurchaseFromLocation
			and  ((PurchaseOrderLine.CostOption.VendorDetermined
			and    PurchaseFromLocationRel.UpdatePurchaseOrderCost.UpdatePOCostFromReceiptOrAcknowledgement)
			or   ((PurchaseFromLocationRel.OverrideContractCost
			and    FromContract)
			or    (PurchaseFromLocationRel.OverrideLastPOLastCost
			and    FromLastPOLastCost))))
			or   ((not PurchaseOrderLine.HasPurchaseFromLocation
			and  ((PurchaseOrderLine.CostOption.VendorDetermined
			and    PurchasingVendorRel.UpdatePurchaseOrderCost.UpdatePOCostFromReceiptOrAcknowledgement)
			or   ((PurchasingVendorRel.OverrideContractCost
			and    FromContract)
			or    (PurchasingVendorRel.OverrideLastPOLastCost
			and    FromLastPOLastCost))))))
		
    	ItemlocRelExist
    		restricted
    		when (ItemLocationRel exist)
    		
		IsValidForActorContext
			restricted
			when ((actor.context.FinanceEnterpriseGroup != ""
			and   GeneralLedgerCompanyRel.FinanceEnterpriseGroup = actor.context.FinanceEnterpriseGroup)
			or   (actor.context.FinanceEnterpriseGroup = ""))

        AvailableToMatch
            classic name is AVAIL-TO-MATCH+
        	restricted
            when (Status >  blank
            and   MatchObjectID not entered
            and   PurchaseOrderReceipt.Status.Released
            and   PurchaseOrderReceipt.ReceiptAmount >  0
            and   (Status.ReleasedInspected
                or    Vendor.HoldUntilInspected.No
                or    Vendor.HoldUntilInspected.UseCompany
                and   not MatchCompanyRel.HoldUntilInspected.Yes))

		UnmatchedReceiptLine
			restricted
            when (EnteredReceivedQuantity != MatchedQuantity
            and   PurchaseOrderReceipt.Status.Released
            and   PurchaseOrderLine.ArchivedQuantity not entered  
            and  (!PurchaseOrderLine.CostOption.NoCharge
            or     PurchaseOrderLine.AllowZeroCostInvoice))		

        HasBuyerMessage
            classic name is BUYER-MESSAGE
        	restricted
            when (BuyerMessageRel exists
			and   not PurchaseOrderReceipt.IsCreateInProgress)
        
		BuyerMessageForProcessing
        	restricted
            when (BuyerMessageRel exists)

		HasUnreleasedBuyerMessage
			restricted
			when (BuyerMessageRel exists
			and   BuyerMessageRel.Status.Unreleased)

		HasUnreleasedReceiptLineBuyerMessage
			restricted
			when (UnreleasedReceiptLineBuyerMessageRel exists)

        DetailsExist
        	restricted
            when (LastPurchaseOrderTransactionDetail >  blank)

		AssetDetailsInBalance
			restricted
			when (PurchaseOrderLineAssetDetailRel not exists
			or	 (SumOfAssetDetailQuantity = PurchaseOrderLineAssetRel.DerivedStockReceivedQuantity))
			
		ReceivedAssetDetailsInBalance
			restricted
			when (PurchaseOrderLineAssetDetailRel not exists
			or	 (Status.Entered  
			and   SumOfReceivedAssetDetailQuantity = PurchaseOrderLine.ReceivedQuantity + EnteredReceivedQuantity)	
			or	 (!Status.Entered 
			and   SumOfReceivedAssetDetailQuantity = PurchaseOrderLine.ReceivedQuantity))	
			
		CancelledAssetDetailsInBalance
			restricted
			when (PurchaseOrderLineAssetDetailRel not exists
			or	 (SumOfCancelledAssetDetailQuantity = PurchaseOrderLine.CancelQuantity))
		
		HasUnreceivedAssetDetails
			when (PurchaseOrderLineAssetRel.HasUnreceivedAssetDetails)

        AdjustmentInspectionExists
            classic name is HAS-ADJ-IN
        	restricted
            when (first RecieptAdjustmentAndInspectionLinesRel exists)

        HasBin
            classic name is ICR
        	restricted
            when (Bin entered
            and not MultipleBins)

        RequiresOrHasInspection
            classic name is INSPECTION
        	restricted
            when ((Status.ReleasedRequiresInspection
            or     Status.ReleasedUnreleasedInspection)
            and    EnteredReceivedQuantity > 0)
		
		IsOnHoldUntilInspected
			restricted
			when ((RequiresOrHasInspection			
			and    Vendor.HoldUntilInspected.Yes)
			or    (PurchaseOrderReceipt.PurchaseOrderMatch
			and    MatchCompanyRel.HoldUntilInspected.Yes))
		
        IsInventoried
            classic name is ITEMLOC
        	restricted
            when (ItemType.Inventoried)
            
        IsNonstock
        	when (ItemType.NonStock)

        HasItemMaster
        	restricted
            when (ItemType.Inventoried
            or    ItemType.NonStock)

        IsMatched
        	restricted
            when (MatchObjectID entered)

        HasManufacturerID
            classic name is MFG-INFO-EXIST
        	restricted
            when (ManufacturerID entered)

        IsNonInventory
        	restricted
            when (ItemType.NonStock
            or    ItemType.Special)

        OriginalReceiving
            classic name is ORIG-RECEIVING
        	restricted
            when (PurchaseOrderReceiptLine = PurchaseOrderLine)

        HasReferenceNumber
            classic name is REFERENCE-NO
        	restricted
            when (ReferenceNumber entered)
            
        HasAOCs
        	restricted
    		when (ReceiptLineAOCsRel exists)

        IsReleased
        	restricted
            when (Status > 0)

        SubstituteReceiving
            classic name is SUB-RECEIVING
            when (PurchaseOrderLine != PurchaseOrderReceiptLine)

        UnreleasedSubstitute
        	when (IsUnreleased
        	and   SubstituteReceiving)
        
        IsUndelivered
        	restricted
            when (not FullyDelivered
            and   Status.ReleasedInspected)

        IsUnreleased
        	restricted
            when (Status.Entered)
        
        AssetDetailExist
        	restricted
			when (not IsInventoried
			and PurchaseOrderLineAssetRel exist)

		ValidForReceiveAllAssetDetail
			restricted
			when (PurchaseOrderLineReceivedNoAssetDetailRel exists)

		IsNotLotRequiredAtReceipt
			restricted
			when (not ItemLocationRel.LotTracked.LotRequiredAtReceipt)

		IsNotSerialRequiredAtReceipt
			restricted
			when (not ItemLocationRel.SerialTracked.SerialRequiredAtReceipt)
		
		PurchaseOrderReceiptExist
			restricted
			when (PurchaseOrderReceipt exist)	

		HasDifferentLotExpirationDate
			restricted
			when (POTransactionDetailsDifferentLotExpirationRel exists)	

		IsLotRequiredAtReceipt
			restricted  
			when (ItemLocationRel.LotTracked.LotRequiredAtReceipt
			and   IsInventoried)
						
		IsSerialRequiredAtReceipt
			restricted
			when (ItemLocationRel.SerialTracked.SerialRequiredAtReceipt
			and   IsInventoried)
		
		IsLotOrSerialRequiredAtReceipt
			restricted
			when (IsLotRequiredAtReceipt or IsSerialRequiredAtReceipt)
		
		IsBinTracked 
			restricted	
			when (ItemLocationRel.BinTracked
			and   IsInventoried)
		
		IsNotAStorageLocationItem
			restricted
			when (not IsAWarehouseLocationItem
			and	  IsBinTracked)
		
		IsBinLotSerialTracked
			restricted
			when (IsLotRequiredAtReceipt or IsSerialRequiredAtReceipt or IsBinTracked)
		
		IsInventoryBinLotSerialTracked
			restricted
			when (IsBinLotSerialTracked and IsInventoried)	
		
		IsNonstockLotRequiredAtReceipt
			when (ItemRel.LotTracked.LotRequiredAtReceipt and IsNonstock)
			
		IsNonstockSerialRequiredAtReceipt
			when (ItemRel.SerialTracked.SerialRequiredAtReceipt and IsNonstock)
			
		IsNonstockTracked
			when (IsNonstockLotRequiredAtReceipt or IsNonstockSerialRequiredAtReceipt)
			
		IsDetailTracked
			when (IsInventoryBinLotSerialTracked or IsNonstockTracked)
			       
        IsCatchWeightItem
        	restricted
        	when (HasItemMaster
			and  (Item.CatchWeightCode.AllTransactionsRequireBoth or Item.CatchWeightCode.ReceiptRequiresBoth))
        	
        IsCatchWeightItemAndHasItemMaster
        	restricted
        	when (IsCatchWeightItem
        	and    HasItemMaster)	   
        	
		IsCatchWeightItemFulfilled
			restricted
			when (!IsCatchWeightItem
			or (IsCatchWeightItem
			and CatchWeightQuantity entered))
		
		IsCatchWeightQuantityOutOfTolerance
			restricted
			when (IsCatchWeightItem
			and   DerivedCatchWeightVariancePercent > Item.CatchWeightVariancePercent)
		
		IsUDITracked 
			restricted	
			when (ItemLocationRel.UDITracked.UDIRequiredAtReceipt
			and   IsInventoried)

		ShowQuantityRedAlert
			restricted
			when (not DetailsInBalance
			or    not UDIDetailsInBalance
			or !IsCatchWeightItemFulfilled)
			
		IsOutofBalance
			restricted
			when (not DetailsInBalance)

		UDIIsOutofBalance
			restricted
			when (not UDIDetailsInBalance)

		IsUDIRequiredAtReceipt
			restricted
			when (ItemLocationRel.UDITracked.UDIRequiredAtReceipt
			and   IsInventoried)
        
		IsLotOrSerialDetailDisplayed
			restricted
			when (IsLotOrSerialRequiredAtReceipt
			and  !IsUDIRequiredAtReceipt)

		IsUDIDetailDisplayed
			restricted
			when (IsLotOrSerialRequiredAtReceipt
			and   IsUDIRequiredAtReceipt)

        IntrastatDetailNotExist
        	restricted 
        	when (IntrastatDetailRel not exist)

		LinkedToContextInvoice
			restricted
			when (ContextMatchPurchaseOrderInvoiceRel exists)
			
		IsBuyerOverreceiving
			restricted
			when (BuyerMessageRel.OverreceivingMessage)
			
		HasReceiptLineComments
			restricted
			when (PurchaseOrderReceiptLineComment set exists)
		
		POTrackExistsAtLineLevel
			restricted
			when (PurchaseOrderReceiptTrackingRel exists
			and   IsLineLevelTracking)
			
		POTrackNotExistsAtLineLevel
			restricted
			when (PurchaseOrderReceiptTrackingRel not exists
			and   IsLineLevelTracking)

		IsLineLevelTracking
			restricted
			when (Company.PackageTrackingLevel.LineLevel)
					
		IsFromRequisition
			restricted
			when (PurchaseOrderLineSourcesRel.FromRequisition)
			
		HasVendorItem
			restricted
			when (VendorItem entered)
			
		HasSafetyInfo
			restricted 
			when (MSDSRequired entered
			or MSDSDocument entered
			or MSDSVersion entered
			or ItemHazardCode entered)
			
		HasVendorItemBuyUOM
			restricted
			when (VendorItem.VendorBuyUOM.UnitOfMeasure entered)
		
		HasMultipleBins
			restricted
        	when (instance count of PurchaseOrderTransactionDetailsWithBinRel > 1)
        	
    	HasPicture
    		restricted
    		when (Item.Picture entered)

        WithinCompanyGroupFilter
            restricted
            when (GeneralLedgerCompanyGroup not entered
            or    GLCompanyGroupMemberRel exists)
        
        GLCompanyGroupMemberRelExists
            restricted
            when (GLCompanyGroupMemberRel exists)

		CreateInvoiceDetailsValid
 		    restricted
			when (not InvoiceDetailExists
			and   not POLineInvoiceDetailExists
			and   PayablesInvoice entered
			and	  (PayablesInvoice.IsUpdateable
			or     PayablesInvoice.Status.Amended
			or    (PayablesInvoice.MatchPrepayment
			and    PayablesInvoice.MatchStatus < 2)))

		InvoiceDetailExists
			restricted
			when (PayablesInvoiceDetailRel exists)			
					                                    
		POLineInvoiceDetailExists
			restricted
			when (PayablesInvoiceDetailPOLineRel exists)
			
		OtherReceivingLineExists    
			restricted
			when (PurchaseOrderReceiptLinesOtherRel exists)

		MultipleRequesters
			restricted
			when (PurchaseOrderRequesterLineSourceRel exists
			and   first PurchaseOrderRequesterLineSourceRel.Requester != any PurchaseOrderRequesterLineSourceRel.Requester)
			                                  
		HasLineSourceForThisRequester
			restricted
			when (PurchaseOrderReceipt.PurchaseOrderLineSourceForRequesterRel exists)

		InspectionsExist
			restricted
			when (POReceiptLineInspectionsRel exists)
		
		AdjustmentsExist
			restricted
			when (POReceiptLineAdjustmentsRel exists)
			
		ReceivingAdjustmentsAndInspectionsExist
			restricted
			when (RecieptAdjustmentAndInspectionLinesRel exists)
			
		CanCancelRemaining
			restricted
			when ((IsReleased and PurchaseOrderLine.RemainingQuantity entered)
			or     PurchaseOrderLine.RemainingQuantity > DerivedReceivedQuantityInPOUOM)

		InventoriedOrNonstockRequiresMSDS
			restricted
			when (HasItemMaster
			and  ItemlocRelExist
			and  MSDSRequired)
			
		IsHSNSACCodeEnabled
			restricted
			when (Company.GeneralLedgerCompany.RequireHSNSACCode)
			
		IsCatchWeightItemAndHasItemMasterAndAdjustmentsExists
			restricted
			when (IsCatchWeightItemAndHasItemMaster
			and   AdjustmentsExist)
			
		IsNotCatchWeightItemAndAdjustmentsExists
			restricted
			when (not IsCatchWeightItemAndHasItemMaster
			and   AdjustmentsExist)
			
		HasBackorders
			restricted
			when (PurchaseOrderLine.QuantityToProcess > PurchaseOrderLine.ReceivedQuantity)
			
		IsPartialReceiptLine
			restricted
			when (EnteredReceivedQuantity < PurchaseOrderLine.QuantityToProcess)

		HasItemLocationStockUOM
			when (HasItemMaster
			and	  ItemLocationRel.HasItemLocationStockUOM)

		ItemMasterExists
			restricted
			when (Item exists)
		
		IsNonDetailTracked
			restricted
			when (not IsDetailTracked 
			and	  not IsUDITracked)
		
		IsValidForDelivery
			restricted
			when (IsNonDetailTracked and PurchaseOrderReceipt.IsMSCMEnabled)
		
		IsTrackingDetailBalanced
			restricted
			when (IsNonDetailTracked
			and   sum MobileSupplyChainPurchaseOrderReceiptTrackingRel.Quantity = EnteredReceivedQuantity)

		HasMobileSupplyChainPurchaseOrderReceipt
			restricted
			when (MobileSupplyChainPurchaseOrderReceiptRel exists)

		IsAWarehouseLocationItem
			restricted
			when (ItemLocationRel.IsAWarehouseLocationItem)
		
		IsBinTrackedAndLotTrackedWarehouseItem
			restricted
			when (ItemLocationRel.IsBinTrackedAndLotTrackedWarehouseItem)

		ReceivedEqualsPutaway
			restricted
            when (EnteredReceivedQuantity = SumOfQuantity)

		PutawayLessThanReceived
			restricted
            when (SumOfQuantity <  EnteredReceivedQuantity)

		PutawayGreaterThanReceived
			restricted
            when (SumOfQuantity >  EnteredReceivedQuantity)

		PurchaseOrderTransactionDetailsExist
			restricted
            when (PurchaseOrderTransactionDetailsRel exists)

		IsAWarehouseLocationItemLessThanReceived
			restricted
			when (IsAWarehouseLocationItem
			and   PutawayLessThanReceived)

		IsADistributionManangementItem
			restricted
			when (ItemLocationRel.IsAWarehouseLocation
			and ItemLocationRel.InventoryTracked
			and (IsBinTracked
			or IsLotRequiredAtReceipt
			or IsSerialRequiredAtReceipt
			or IsUDIRequiredAtReceipt)
			and PutawayLessThanReceived)

		DistributionManangementItemRequiresBinSetup
			restricted
			when (ItemLocationRel.IsAWarehouseLocation
			and not IsBinTracked)

		IsTrackingPanelEnabled
			restricted
            when (PurchaseOrderReceipt.IsMSCMEnabled
            and  not PurchaseOrderReceipt.HasLineWithMultipleLineSources
            and  (IsNonInventory or MobileSupplyChainConfigurationRel.DeliveryInventoryItem)
            or   MobileSupplyChainPurchaseOrderReceiptTrackingRel exists)

		IsDMCatchWeightItemAndNotSerialRequiredAtReceipt
			restricted
			when (IsCatchWeightItem
			and not IsSerialRequiredAtReceipt)

		IsDMCatchWeightItemOrSerialRequiredAtReceipt
			restricted
			when (IsCatchWeightItem
			or IsSerialRequiredAtReceipt)

		IsNotADistributionManagementItem
			restricted
			when (ItemLocationRel.IsAWarehouseLocation
			and not IsBinTracked
			and not IsLotRequiredAtReceipt
			and not IsSerialRequiredAtReceipt
			and not IsUDIRequiredAtReceipt)

		IsForReleaseCompletion 
			restricted
			when ((not ShipToLocation.TwoStepPurchaseOrderReceiving and not LocalFinalRelease)
			or    (ShipToLocation.TwoStepPurchaseOrderReceiving and LocalFinalRelease ))

    Relations

		LineSourcesForPrintingRel
            one-to-many relation to PurchaseOrderLineSource
            Field Mapping uses Set1
                related.Company                  = Company
                related.PurchaseOrder            = PurchaseOrder
                related.PurchaseOrderLine        = PurchaseOrderLine
            Instance Selection
                where (related.IsNotFullyDelivered)
    
		RequisitionLineSourcesToDeliverRel
 			one-to-many relation to PurchaseOrderLineSource
 			Field Mapping uses BySet1ReversedOrder
 				related.Company											= Company
				related.PurchaseOrder									= PurchaseOrder	
 				related.PurchaseOrderLine								= PurchaseOrderLine
 				related.PurchaseOrderLineSource.SourceDocumentOrigin	= SourceDocumentOrigin.Requisitions
			Instance Selection
				where (related.IsNotFullyDelivered)
				
		PutawayHeadingForLocationRel
			one-to-many relation to PurchaseOrderResultHeading
			Field Mapping uses symbolic key
				related.FinanceEnterpriseGroup							= GeneralLedgerCompanyRel.FinanceEnterpriseGroup
				related.PurchaseOrderResult								= LocalPutawayDocumentReport
			Instance Selection
				where (related.PurchasingCompany						= Company
				and    related.InventoryLocation						= ShipToLocation)
				
		PurchaseOrderPutawayHeaderForLocationRel
			one-to-many relation to PurchaseOrderPutAway
			Field Mapping uses symbolic key
				related.Company											= Company
				related.InventoryLocation								= ShipToLocation
			Instance Selection
				where (related.CurrentUser 								= actor
				and    related.RunBatchID								= LocalRunBatchID)
				
		DeliveryReportHeadingForLineSourceRel
            one-to-many relation to PurchaseOrderResultHeading
            Field Mapping uses symbolic key
                related.FinanceEnterpriseGroup      					= GeneralLedgerCompanyRel.FinanceEnterpriseGroup
                related.PurchaseOrderResult    							= LocalDeliveryDocumentReport
            Instance Selection
                where (related.PurchasingCompany						= Company
                and	   related.RequestingLocation        				= LocalRequestingLocation
                and    related.SourceDocumentNumeric					= LocalSourceDocumentNumeric
                and	   related.PurchaseOrderReceipt						= PurchaseOrderReceipt
                and    not related.IsBackorder)

		ReceivingDeliveryTicketsForLineSourceRel
			one-to-many relation to ReceivingDeliveryTickets
			Field Mapping uses symbolic key
				related.Company											= Company
				related.PurchaseOrderReceipt							= PurchaseOrderReceipt
			Instance Selection
				where (related.RequestingLocation						= LocalRequestingLocation
				and    related.SourceDocumentNumeric					= LocalSourceDocumentNumeric
				and    related.CurrentUser 								= actor
				and    related.RunBatchID								= LocalRunBatchID)
			

		DeliveryReportHeadingForReceiptRel
            one-to-many relation to PurchaseOrderResultHeading
            Field Mapping uses symbolic key
                related.FinanceEnterpriseGroup              			= GeneralLedgerCompanyRel.FinanceEnterpriseGroup
                related.PurchaseOrderResult	    						= LocalDeliveryDocumentReport
            Instance Selection
                where (related.PurchasingCompany						= Company
                and	   related.PurchaseOrderReceipt        				= PurchaseOrderReceipt
                and    not related.IsBackorder)

		ReceivingDeliveryTicketsForReceiptRel
			one-to-many relation to ReceivingDeliveryTickets
			Field Mapping uses symbolic key
				related.Company											= Company
				related.PurchaseOrderReceipt							= PurchaseOrderReceipt
			Instance Selection
				where (related.CurrentUser 								= actor
				and    related.RunBatchID								= LocalRunBatchID)
		
		BackorderReportHeadingForReceiptRel
            one-to-many relation to PurchaseOrderResultHeading
            Field Mapping uses symbolic key
                related.FinanceEnterpriseGroup                  		= GeneralLedgerCompanyRel.FinanceEnterpriseGroup
                related.PurchaseOrderResult 	   						= LocalBackorderDocumentReport
            Instance Selection
                where (related.PurchasingCompany						= Company
                and	   related.PurchaseOrderReceipt        				= PurchaseOrderReceipt
                and    related.IsBackorder)

		ReceivingBackordersForReceiptRel
			one-to-many relation to ReceivingBackOrders
			Field Mapping uses Set1
				related.Company											= Company
				related.PurchaseOrder									= PurchaseOrder
			Instance Selection
				where (related.CurrentUser 								= actor
				and    related.RunBatchID								= LocalRunBatchID)

       	BackOrderHeadingForSourceRel
            one-to-many relation to PurchaseOrderResultHeading
            Field Mapping uses symbolic key
                related.FinanceEnterpriseGroup     						= GeneralLedgerCompanyRel.FinanceEnterpriseGroup
                related.PurchaseOrderResult	    						= LocalBackorderDocumentReport
            Instance Selection
                where (related.PurchasingCompany						= Company
                and	   related.RequestingLocation         				= LocalRequestingLocation
                and    related.SourceDocumentNumeric    				= LocalSourceDocumentNumeric
                and    related.PurchaseOrderReceipt        				= PurchaseOrderReceipt
                and    related.IsBackorder)
                  
		ReceivingBackordersForSourceRel
			one-to-many relation to ReceivingBackOrders
			Field Mapping uses Set1
				related.Company											= Company
				related.PurchaseOrder									= PurchaseOrder
				related.RequestingLocation								= LocalRequestingLocation
			Instance Selection
				where (related.SourceDocumentNumeric					= LocalSourceDocumentNumeric
				and    related.CurrentUser 								= actor
				and    related.RunBatchID								= LocalRunBatchID)



		LineSourcesWithRequisitionRel
 			one-to-many relation to PurchaseOrderLineSource
 			Field Mapping uses Set1
 				related.Company				= Company
				related.PurchaseOrder		= PurchaseOrder	
 				related.PurchaseOrderLine	= PurchaseOrderLine
			Instance Selection
				where (related.FromRequisition)

		LineSourcesByPriorityRel
			one-to-many relation to PurchaseOrderLineSource
			Field Mapping uses Set4
			 	related.Company				= Company
				related.PurchaseOrder		= PurchaseOrder	
 				related.PurchaseOrderLine	= PurchaseOrderLine
		
		LandedReceiptLineAddOnChargesRel is a PurchaseOrderReceiptLineAOC set
			Instance Selection
				where (related.LandedAddOnCharge)
		
		PurchaseOrderTransactionDetailsWithDifferentBin
			one-to-many relation to PurchaseOrderTransactionDetail
			delete cascades
			Field Mapping uses symbolic key
				related.Company			= Company
			Instance Selection
				where (related.PurchaseOrderTransactionDetail.PurchaseTransactionDocumentType.Receiving
                and    related.PurchaseOrderTransactionDetail.DocumentNumberNumeric = PurchaseOrderReceipt
                and    related.PurchaseOrderTransactionDetail.LineNumber = PurchaseOrderReceiptLine
				and    related.Bin != LocalSavedBin)
    
    	TaxEntityRel
			one-to-one relation to TaxEntity
			Field Mapping uses symbolic key
				related.FinanceEnterpriseGroup	= GeneralLedgerCompanyRel.FinanceEnterpriseGroup
				related.TaxEntity 				= Company.AccountingEntity
    	
    	ReceivedItemUOMRel												
    		one-to-one relation to ItemUOM
    		Field Mapping uses symbolic key
    			related.ItemGroup		= Company.ProcurementGroup
    			related.Item			= Item
    			related.UnitOfMeasure	= ReceivedUOM
    			
    	ItemUOMPriceRel
    		one-to-one relation to ItemUOM
    		Field Mapping uses symbolic key
    			related.ItemGroup		= Company.ProcurementGroup
    			related.Item			= Item
    			related.UnitOfMeasure	= VendorPriceUOM
    			
    	ItemUOMBuyRel
    		one-to-one relation to ItemUOM
    		Field Mapping uses symbolic key
    			related.ItemGroup		= Company.ProcurementGroup
    			related.Item			= Item
    			related.UnitOfMeasure	= VendorBuyUOM
    			
    	LineAddOnChargesWithoutTotalAddOnChargeAmountRel is a PurchaseOrderReceiptLineAOC set
    		Instance Selection
    			where (related.TotalAddOnChargeAmount = 0)

    	MatchCompanyRel
            one-to-one relation to MatchCompany
            Field Mapping uses symbolic key
                related.Company        = Company

        PayablesInvoiceByVendorInvoiceRel
            one-to-many relation to PayablesInvoice
            Field Mapping uses Set13
                related.Company        = Company
                related.Vendor         = Vendor
                related.MatchObjectID  = MatchObjectID
                related.Invoice        = Invoice
                related.Suffix         = Suffix
                related.CancelSequence = blank

        BuyerMessageRel				
            one-to-one relation to PurchaseOrderBuyerMessage
            Field Mapping uses Set3
                related.Company                  = Company
                related.PurchaseOrderReceipt     = PurchaseOrderReceipt
                related.PurchaseOrderReceiptLine = PurchaseOrderReceiptLine

		UnreleasedReceiptLineBuyerMessageRel 	
			one-to-many relation to PurchaseOrderBuyerMessage
			Field Mapping uses AllByReceiver
                related.Company                  = Company
                related.PurchaseOrderReceipt     = PurchaseOrderReceipt
                related.PurchaseOrderReceiptLine = PurchaseOrderReceiptLine
			Instance Selection
				where (related.Status.Unreleased 
				and    related.DocumentNumberNumeric not entered
				and    not related.PurchaseOrderReceipt.IsCreateInProgress)

        AllBuyerMessagesRel    
            one-to-many relation to PurchaseOrderBuyerMessage
            Field Mapping uses AllByReceiver
                related.Company                  = Company
                related.PurchaseOrderReceipt     = PurchaseOrderReceipt
            Instance Selection
            	where (related.PurchaseOrderReceiptLine.PurchaseOrderLine = PurchaseOrderLine)
        
        InventoryCompanyRel
            one-to-one relation to InventoryCompany
            required
            Field Mapping uses symbolic key
                related.Company = Company

        InventoryTransactionRel
            one-to-one relation to InventoryTransaction
            valid when (IsInventoried)
            Field Mapping uses symbolic key
                related.Company                                    = Company
                related.InventoryLocation                          = ShipToLocation
                related.InventoryTransaction					   = PurchaseOrderReceipt

				
        POInventoryTransactionRel
            one-to-one relation to InventoryTransaction
            valid when (IsInventoried)
            Field Mapping uses symbolic key
                related.Company                                    = Company
                related.InventoryLocation                          = ShipToLocation
                related.InventoryTransaction					   = PurchaseOrder

        InventoryTransactionLineRel
            one-to-many relation to InventoryTransactionLine
            valid when (IsInventoried)
			Field Mapping uses ByOriginatingTransaction
				related.OriginatingTransaction						= reference to this instance 
				related.TransactionSystemCode						= "PO"
				related.Company										= Company
				related.InventoryLocation							= ShipToLocation
			Instance Selection
				where (related.InventoryTransactionLine.WarehouseShipment	= blank
				and    related.InventoryTransactionLine.LineNumber			= PurchaseOrderReceiptLine
				and    related.InventoryTransactionLine.ComponentSequence	= blank)

        InventoryTransactionLineCostAdjustmentRel
            one-to-many relation to InventoryTransactionLine
            valid when (IsInventoried)
            
			Field Mapping uses symbolic key
				related.Company										= Company
				related.InventoryLocation							= ShipToLocation
			Instance Selection
				where (related.TransactionSystemCode						= "PO"
				and    related.Item 										= Item
				and    related.InventoryTransaction.InventoryDocumentType.CostAdjustment
				and    related.InventoryTransactionLine.WarehouseShipment	= blank
				and    related.InventoryTransactionLine.LineNumber			= PurchaseOrderReceiptLine
				and    related.InventoryTransactionLine.ComponentSequence	= blank)

        InventoryTransactionLineCostAdjustmentDescendingRel
            one-to-many relation to InventoryTransactionLine
            valid when (IsInventoried)
            
			Field Mapping uses Set2
				related.Company										= Company
				related.InventoryLocation							= ShipToLocation
				related.Item 										= Item
			Instance Selection
				where (related.TransactionSystemCode						= "PO"
				and    related.InventoryTransaction.InventoryDocumentType.CostAdjustment
				and    related.InventoryTransactionLine.WarehouseShipment	= blank
				and    related.OriginatingTransactionLine					= PurchaseOrderReceiptLine
				and    related.InventoryTransactionLine.ComponentSequence	= blank)

        RecallProductItemsRel
			one-to-many relation to RecallProductItem
			Field Mapping uses ByItem
				related.RecallGroup	= Company.ProcurementGroup
				related.Item        = Item
			Instance Selection
				where (related.RecallNotice.Status.Pending
				or     related.RecallNotice.Status.Active)
        
        ItemLocationRel
            one-to-one relation to ItemLocation
            valid when (IsInventoried)
            required
            Field Mapping uses symbolic key
                related.Company           = Company
                related.InventoryLocation = ShipToLocation
                related.Item              = Item
                
		ItemRel
			one-to-one relation to Item
			Field Mapping uses symbolic key
				related.ItemGroup		= Company.ProcurementGroup
				related.Item			= Item

		ItemMasterLocationRel
			one-to-one relation to ItemLocation
			Field Mapping uses symbolic key
				related.Company				= Company
				related.InventoryLocation	= ShipToLocation
				related.Item				= Item

        InvoiceDetailMatchObjectIDAndSequenceRel
            one-to-many relation to PayablesInvoiceDetail
            Field Mapping uses Set9
                related.Company       = Company
                related.MatchObjectID = MatchObjectID
                related.MatchSequence = MatchSequence

        PurchaseOrderMatchInvoiceLinksRel
            one-to-many relation to PurchaseOrderReceiptInvoiceLink
            Field Mapping uses symbolic key
                related.Company = Company
            Instance Selection
                where (related.PurchaseOrderReceiptInvoiceLink.PurchaseOrderReceipt = PurchaseOrderReceipt
                and   related.PurchaseOrderReceiptInvoiceLink.PurchaseOrderReceiptLine = PurchaseOrderReceiptLine
                and   related.PurchaseOrderReceiptInvoiceLink.MatchObjectID = MatchObjectID
                and   related.PurchaseOrderReceiptInvoiceLink.MatchSequence = MatchSequence)

        PurchaseOrderReceiptInvoiceLinksRel
            one-to-one relation to PurchaseOrderReceiptInvoiceLink
            Field Mapping uses Set2
                related.Company = Company
                related.PurchaseOrderReceiptInvoiceLink.MatchObjectID = MatchObjectID
                related.PurchaseOrderReceiptInvoiceLink.MatchSequence = MatchSequence
                related.PurchaseOrderReceiptInvoiceLink.PurchaseOrderReceipt = PurchaseOrderReceipt
                related.PurchaseOrderReceiptInvoiceLink.PurchaseOrderReceiptLine = PurchaseOrderReceiptLine
                related.PurchaseOrderReceiptInvoiceLink.AddOnCharge	= blank

		PurchaseOrderReceiptInvoiceLinkLastCostRel
			one-to-many relation to PurchaseOrderReceiptInvoiceLink
			Field Mapping uses Set3
                related.Company                 											= Company
			Instance Selection
                where (related.PurchaseOrderReceiptInvoiceLink.PurchaseOrder				= PurchaseOrder
                and    related.PurchaseOrderLine	    									= PurchaseOrderLine
				and    related.Status														= 1
				and   (related.Type															= "PO"
				or     related.Type															= "CS"))

		UnreleasedAdjustmentAndInspectionLinesRel
			one-to-many relation to POReceiptAdjustmentAndInspectionLine
            Field Mapping uses Set2
                related.Company                  = Company
                related.PurchaseOrderReceipt     = PurchaseOrderReceipt
                related.PurchaseOrderReceiptLine = PurchaseOrderReceiptLine
            Instance Selection
            	where (related.IsUnreleased)

        RecieptAdjustmentAndInspectionLinesRel
            one-to-many relation to POReceiptAdjustmentAndInspectionLine
            Field Mapping uses Set2
                related.Company                  = Company
                related.PurchaseOrderReceipt     = PurchaseOrderReceipt
                related.PurchaseOrderReceiptLine = PurchaseOrderReceiptLine

		POReceiptLineAdjustmentsRel
            one-to-many relation to POReceiptAdjustmentAndInspectionLine
            Field Mapping uses Set2
				related.Company								= Company
                related.PurchaseOrderReceipt     			= PurchaseOrderReceipt
                related.PurchaseOrderReceiptLine 			= PurchaseOrderReceiptLine
				related.AdjustmentInspectionDocumentType	= AdjustmentInspectionDocumentType.ReceiptAdjustment 
    	
		POReceiptLineInspectionsRel
            one-to-many relation to POReceiptAdjustmentAndInspectionLine
            Field Mapping uses Set2
				related.Company						= Company
                related.PurchaseOrderReceipt    	= PurchaseOrderReceipt
                related.PurchaseOrderReceiptLine 	= PurchaseOrderReceiptLine
				related.AdjustmentInspectionDocumentType	= AdjustmentInspectionDocumentType.ReceiptInspection

        PurchaseOrderReceiptTrackingRel
            one-to-many relation to PurchaseOrderReceiptTracking
            delete cascades
            Field Mapping uses symbolic key
                related.Company                  = Company
                related.PurchaseOrderReceipt     = PurchaseOrderReceipt
                related.PurchaseOrderReceiptLine = PurchaseOrderReceiptLine

        PurchaseOrderReceiptTrackingWithoutLabelRel
            one-to-many relation to PurchaseOrderReceiptTracking
            delete cascades
            Field Mapping uses symbolic key
                related.Company                  = Company
                related.PurchaseOrderReceipt     = PurchaseOrderReceipt
                related.PurchaseOrderReceiptLine = PurchaseOrderReceiptLine
			Instance Selection
				where (related.NumberOfLabels <= 0)

        PurchaseOrderTransactionDetailsRel  
            one-to-many relation to PurchaseOrderTransactionDetail
            delete cascades
            Field Mapping uses symbolic key
                related.Company = Company
            Instance Selection
                where (related.PurchaseOrderTransactionDetail.PurchaseTransactionDocumentType.Receiving
                and   related.PurchaseOrderTransactionDetail.DocumentNumberNumeric = PurchaseOrderReceipt
                and   related.PurchaseOrderTransactionDetail.LineNumber = PurchaseOrderReceiptLine)
             
		POTransactionDetailsDifferentLotExpirationRel  
            one-to-many relation to PurchaseOrderTransactionDetail
            Field Mapping uses ByLine
                related.Company 																	= Company
				related.PurchaseOrderTransactionDetail.PurchaseTransactionDocumentType				= PurchaseTransactionDocumentType.Receiving
				related.PurchaseOrderTransactionDetail.DocumentNumberNumeric 						= PurchaseOrderReceipt
				related.PurchaseOrderTransactionDetail.LineNumber 									= PurchaseOrderReceiptLine
            Instance Selection
                where (related.HasLotOrSerial
				and   related.HasDifferentLotExpirationDate)

        PurchaseOrderTransactionDetailsWithBinRel  
            one-to-many relation to PurchaseOrderTransactionDetail
            delete cascades
            Field Mapping uses symbolic key
                related.Company = Company
            Instance Selection
                where (related.PurchaseOrderTransactionDetail.PurchaseTransactionDocumentType.Receiving
                and   related.PurchaseOrderTransactionDetail.DocumentNumberNumeric = PurchaseOrderReceipt
                and   related.PurchaseOrderTransactionDetail.LineNumber = PurchaseOrderReceiptLine
                and   related.Bin entered)

        PurchaseOrderUDIDetailsRel  
            one-to-many relation to PurchaseOrderUDIDetail
            delete cascades
            Field Mapping uses symbolic key
                related.Company = Company
            Instance Selection
                where (related.PurchaseOrderUDIDetail.PurchaseTransactionDocumentType.Receiving
                and   related.PurchaseOrderUDIDetail.DocumentNumberNumeric = PurchaseOrderReceipt
                and   related.PurchaseOrderUDIDetail.LineNumber = PurchaseOrderReceiptLine)

        SubstitutesRel
            one-to-many relation to PurchaseOrderReceiptLine
            valid when (SubstituteReceiving)
            Field Mapping uses Set4
                related.Company                 = Company
                related.PurchaseOrder    		= PurchaseOrder
                related.ShipToLocation          = ShipToLocation
                related.MatchDetailKey          = MatchDetailKey

        ItemLocationGeneralLedgerCategoryRel
            one-to-one relation to GeneralLedgerCategory
            valid when (IsInventoried)
            required
            Field Mapping uses symbolic key
                related.Company               = Company
                related.InventoryLocation     = ShipToLocation
                related.GeneralLedgerCategory = ItemLocationRel.GeneralLedgerCategory

        VendorLocationRel
            one-to-one relation to VendorLocation
            required
            Field Mapping uses symbolic key
                related.VendorGroup    = Company.VendorGroup
                related.Vendor         = Vendor
                related.VendorLocation = PurchaseOrderLine.PurchaseFromLocation

 		PurchaseOrderLineAssetRel
 			one-to-one relation to PurchaseOrderLineAsset
 			Field Mapping uses symbolic key
 				related.Company					= Company
 				related.PurchaseOrder			= PurchaseOrderReceipt.PurchaseOrder
 				related.PurchaseOrderLine		= PurchaseOrderLine
 				
  		PurchaseOrderLineAssetDetailRel
			one-to-many relation to PurchaseOrderLineAssetDetail
			Field Mapping uses Set2
				related.Company 				= Company
				related.PurchaseOrder 			= PurchaseOrder
				related.PurchaseOrderLineAsset 	= PurchaseOrderLine
				
		PurchaseOrderLineReceivedYesAssetDetailRel
			one-to-many relation to PurchaseOrderLineAssetDetail
			Field Mapping uses Set2		
				related.Company					= Company
				related.PurchaseOrder			= PurchaseOrder
				related.PurchaseOrderLineAsset	= PurchaseOrderLine
			Instance Selection
				where (related.Received.Yes)

		PurchaseOrderLineReceivedNoAssetDetailRel
			one-to-many relation to PurchaseOrderLineAssetDetail
			Field Mapping uses Set2		
				related.Company					= Company
				related.PurchaseOrder			= PurchaseOrder
				related.PurchaseOrderLineAsset	= PurchaseOrderLine
			Instance Selection
				where (related.Cancelled.No and related.Received.No)

		ValidForReceiveAllAssetDetailRel
 			one-to-many relation to PurchaseOrderLineAssetDetail
			Field Mapping uses Set2		
				related.Company					= Company
				related.PurchaseOrder			= PurchaseOrder
				related.PurchaseOrderLineAsset	= PurchaseOrderLine
			Instance Selection
				where ((related.Cancelled.No and related.Received.No)
				or		related.Received.Yes)

		CancelledAssetDetailRel
 			one-to-many relation to PurchaseOrderLineAssetDetail
			Field Mapping uses Set2		
				related.Company					= Company
				related.PurchaseOrder			= PurchaseOrder
				related.PurchaseOrderLineAsset	= PurchaseOrderLine
			Instance Selection
				where (related.Cancelled.Yes)
 
 		PurchaseOrderLineSourcesRel
 			one-to-many relation to PurchaseOrderLineSource
 			Field Mapping uses Set1
 				related.Company				= Company
                related.PurchaseOrder		= PurchaseOrder	
 				related.PurchaseOrderLine	= PurchaseOrderLine

 		PurchaseOrderRequesterLineSourceRel
 			one-to-many relation to PurchaseOrderLineSource
 			Field Mapping uses Set9
 				related.Company											= Company
 				related.PurchaseOrder									= PurchaseOrder
 				related.PurchaseOrderLine								= PurchaseOrderLine
 				related.PurchaseOrderLineSource.SourceDocumentOrigin	= SourceDocumentOrigin.Requisitions
 		
 		PurchaseOrderLineSourceForRequesterRel
 			one-to-many relation to PurchaseOrderLineSource
 			Field Mapping uses Set9
 				related.Company											= Company
                related.PurchaseOrder									= PurchaseOrder	
 				related.PurchaseOrderLine								= PurchaseOrderLine
 				related.PurchaseOrderLineSource.SourceDocumentOrigin	= SourceDocumentOrigin.Requisitions
            Instance Selection
                where (related.Requester = actor.agent(Employee).Employee)
 		
 		PurchaseOrderLineDistributionRel
 			one-to-many relation to PurchaseOrderLineDistribution
 			Field Mapping uses symbolic key
 				related.Company				= Company
                related.PurchaseOrder		= PurchaseOrder	
 				related.PurchaseOrderLine	= PurchaseOrderLine
 		
 		PurchaseOrderLineFromOrderEntryRel
 			one-to-many relation to PurchaseOrderLineSource
 			Field Mapping uses Set1
 				related.Company					= Company
                related.PurchaseOrder			= PurchaseOrder	
 				related.PurchaseOrderLine		= PurchaseOrderLine
 			Instance Selection
 				where (related.PurchaseOrderLineSource.SourceDocumentOrigin	= "OE")
 
 		OpenPurchaseOrderLineSourcesRel
 		 	one-to-many relation to PurchaseOrderLineSource
 			Field Mapping uses Set4
 				related.Company				= Company
                related.PurchaseOrder		= PurchaseOrder	
 				related.PurchaseOrderLine	= PurchaseOrderLine
 				
 		ReceiptLineAOCsRel
            one-to-many relation to PurchaseOrderReceiptLineAOC
            delete cascades
            Field Mapping uses symbolic key
                related.Company              = Company
                related.PurchaseOrderReceipt = PurchaseOrderReceipt
                related.PurchaseOrderReceiptLine = PurchaseOrderReceiptLine

		InterfacedReceiptLineAddOnChargeRel
			one-to-many relation to PurchaseOrderReceiptLineAOC
			delete cascades
			Field Mapping uses Set3
				related.Company						= Company
				related.PurchaseOrder				= PurchaseOrder
				related.PurchaseOrderReceipt		= PurchaseOrderReceipt
				related.PurchaseOrderReceiptLine	= PurchaseOrderReceiptLine
				related.AddOnCharge					= LocalInterfacedAddOnCharge

 		RecieptLineAOCDetailsRel
            one-to-many relation to PurchaseOrderReceiptLineAOC
            delete cascades
            Field Mapping uses Set3
                related.Company              		= Company
                related.PurchaseOrder				= PurchaseOrder
                related.PurchaseOrderReceipt 		= PurchaseOrderReceipt
                related.PurchaseOrderReceiptLine 	= PurchaseOrderReceiptLine
                
        VendorReturnLinesRel
    		one-to-many relation to VendorReturnLine
        	Field Mapping uses ByCompanyAndVendorReturnLine
          		related.Company					 = Company
				related.VendorReturnLine  		 = PurchaseOrderReceiptLine				
			Instance Selection
				where (related.DocumentNumberNumeric not entered
				and    related.PurchaseOrderReceipt = PurchaseOrderReceipt)
 				
		VendorReturnRel
			one-to-many relation to VendorReturn
			Field Mapping uses Set1
				related.Company			= Company
				related.VendorReturn  	= VendorReturn

		PayablesInvoiceDetailRel
			one-to-many relation to PayablesInvoiceDetail
			Field Mapping uses ByPurchaseOrderLine
				related.Company						= Company
				related.PurchaseOrder				= PurchaseOrder
				related.PurchaseOrderLine			= PurchaseOrderLine
        		related.PurchaseOrderReceipt		= PurchaseOrderReceipt
        		related.PurchaseOrderReceiptLine	= PurchaseOrderReceiptLine
				related.Vendor						= Vendor
				related.PayablesInvoice				= PayablesInvoice
			Instance Selection
				where (related.Status.Unreleased)

		LocalPayablesInvoiceDetailRel
			one-to-many relation to PayablesInvoiceDetail
			Field Mapping uses ByPurchaseOrderLine
				related.Company						= Company
				related.PurchaseOrder				= PurchaseOrder
				related.PurchaseOrderLine			= PurchaseOrderLine
        		related.PurchaseOrderReceipt		= PurchaseOrderReceipt
        		related.PurchaseOrderReceiptLine	= PurchaseOrderReceiptLine
				related.Vendor						= Vendor
				related.PayablesInvoice				= LocalPayablesInvoice
			Instance Selection
				where (related.Status.Unreleased)

		PayablesInvoiceDetailPOLineRel
			one-to-many relation to PayablesInvoiceDetail
			Field Mapping uses ByPurchaseOrderLine
				related.Company						= Company
				related.PurchaseOrder				= PurchaseOrder
				related.PurchaseOrderLine			= PurchaseOrderLine
        		related.PurchaseOrderReceipt		= blank
        		related.PurchaseOrderReceiptLine	= blank
				related.Vendor						= Vendor
				related.PayablesInvoice				= PayablesInvoice
			Instance Selection
				where (related.Status.Unreleased)

		PayablesInvoiceDetailMatchRel
			one-to-many relation to PayablesInvoiceDetail
			Field Mapping uses ByPurchaseOrderLine
				related.Company						= Company
				related.PurchaseOrder				= PurchaseOrder
				related.PurchaseOrderLine			= PurchaseOrderLine
				related.PurchaseOrderReceipt		= PurchaseOrderReceipt
				related.PurchaseOrderReceiptLine	= PurchaseOrderReceiptLine



		PurchaseFromLocationRel
			one-to-one relation to PurchaseFromLocation
			Field Mapping uses symbolic key
				related.VendorGroup				= Vendor.VendorGroup
				related.Vendor					= Vendor
				related.PurchaseFromLocation	= PurchaseOrderLine.PurchaseFromLocation		
		
		PurchasingVendorRel
			one-to-one relation to PurchasingVendor
			Field Mapping uses symbolic key
				related.VendorGroup				= Vendor.VendorGroup
				related.Vendor					= Vendor

		PurchaseOrderAndLineAddOnChargeRel
			one-to-many relation to PurchaseOrderAndLineAddOnCharge
			Field Mapping uses Set3
				related.Company				= Company
				related.PurchaseOrder		= PurchaseOrder
				related.PurchaseOrderLine	= PurchaseOrderLine


		LandedPurchaseOrderLineAddOnChargeRel
			one-to-many relation to PurchaseOrderAndLineAddOnCharge
			Field Mapping uses Set3
				related.Company				= Company
				related.PurchaseOrder		= PurchaseOrder
				related.PurchaseOrderLine	= PurchaseOrderLine
			Instance Selection
				where (related.LandedAddOnCharge = true)

        ClosedLandedPurchaseOrderAndLineAddOnChargeRel
            one-to-many relation to PurchaseOrderAndLineAddOnCharge
            Field Mapping uses symbolic key
                related.Company 				= Company
                related.PurchaseOrder			= PurchaseOrder
                related.PurchaseOrderLine 		= PurchaseOrderLine
			Instance Selection 
                where (related.Closed.Yes
                and    related.LandedAddOnCharge)

		PayablesInvoiceAddOnChargeRel
			one-to-many relation to PayablesInvoiceAddOnCharge
			Field Mapping uses Set6
				related.Company				= Company
				related.PurchaseOrder   	= PurchaseOrder
				related.PurchaseOrderLine	= PurchaseOrderLine
				related.Vendor				= Vendor
		
		CountryCodeRel
			one-to-many relation to Country
			Field Mapping uses symbolic key
				related.Country				= Vendor.VendorAddressesRel.PostalAddress.Country
				
		IntrastatDetailRel
			one-to-many relation to IntrastatDetail
			Field Mapping uses symbolic key
				related.FinanceEnterpriseGroup	= GeneralLedgerCompanyRel.FinanceEnterpriseGroup
				related.TaxEntity				= Company.AccountingEntity
				related.IntrastatHeader			= PurchaseOrderReceipt.IntrastatHeaderRel.IntrastatHeader
		
		ICNCodeRel
			one-to-many relation to ICNCode
			Field Mapping uses symbolic key
				related.FinanceEnterpriseGroup	= GeneralLedgerCompanyRel.FinanceEnterpriseGroup
				related.ICNCode		= PurchaseOrderLine.ICNCode	
		
		StockOnHandDetailRel								
			one-to-one relation to StockOnHandDetail
			Field Mapping uses symbolic key
				related.Company							= Company
				related.InventoryLocation				= ShipToLocation
				related.Item							= Item
				related.StockOnHandDetail.UnitOfMeasure	= ReceivedUOM
				related.StockOnHandDetail.Lot			= blank	
				related.StockOnHandDetail.Sublot		= blank 
				related.StockOnHandDetail.Bin			= Bin
	
		ReceiptLineDistributionsRel
			one-to-many relation to PurchaseOrderReceiptLineDistribution
			Field Mapping uses symbolic key
				related.Company						= Company
				related.PurchaseOrderReceipt		= PurchaseOrderReceipt
			Instance Selection
				where (related.PurchaseOrderReceiptLine	= PurchaseOrderReceiptLine)
				
		LastPurchaseOrderReceiptLineDistributionRel
			one-to-one relation to PurchaseOrderReceiptLineDistribution
			Field Mapping uses symbolic key
				related.Company								 = Company
				related.PurchaseOrderReceipt				 = PurchaseOrderReceipt
				related.PurchaseOrderReceiptLine			 = PurchaseOrderReceiptLine
				related.AddOnCharge							 = blank				
				related.PurchaseOrderReceiptLineDistribution = last ReceiptLineDistributionsRel.PurchaseOrderReceiptLineDistribution				
		
		ContextMatchPurchaseOrderInvoiceRel
			one-to-one relation to MatchPurchaseOrderInvoice
			Field Mapping uses symbolic key
				related.Company			= Company
				related.PurchaseOrder	= PurchaseOrder
				related.PayablesInvoice	= PayablesInvoice
				related.Vendor			= Vendor
		
		MatchPurchaseOrderInvoiceRel
			one-to-one relation to MatchPurchaseOrderInvoice
			Field Mapping uses symbolic key
				related.Company			= Company
				related.PurchaseOrder	= PurchaseOrder
				related.PayablesInvoice	= LocalPayablesInvoice		
				related.Vendor			= Vendor
		
		PayablesInvoiceRel
			one-to-many relation to PayablesInvoice
			Field Mapping uses ByCompanyVendorInvoice
				related.Company		= Company
				related.Vendor		= Vendor
				related.Invoice		= Invoice

		InventoryCostHistoryRel
			one-to-one relation to InventoryCostHistory
			Field Mapping uses symbolic key
				related.Company 										= Company
				related.InventoryLocation								= ShipToLocation
				related.Item											= Item
				related.InventoryTransaction							= PurchaseOrderReceipt
				related.InventoryCostHistory.TransactionSystemCode  	= "PO"			
				related.InventoryCostHistory.LineNumber					= PurchaseOrderReceiptLine
				related.InventoryCostHistory.ComponentSequence			= 0

        EntityTaxCodeRel
            classic name is TAXCODE
            one-to-one relation to EntityTaxCode
            Field Mapping uses symbolic key
            	related.FinanceEnterpriseGroup	= GeneralLedgerCompanyRel.FinanceEnterpriseGroup
                related.TaxEntity 				= Company.AccountingEntity
                related.TaxCode 				= TaxCode
                
		PurchaseOrderReceiptLinesRel
			one-to-many relation to PurchaseOrderReceiptLine
			Field Mapping uses Set6
				related.Company  				= Company
				related.PurchaseOrderReceipt	= PurchaseOrderReceipt
                related.PurchaseOrderLine		= PurchaseOrderLine
                
		PurchaseOrderReceiptLinesOtherRel
			one-to-many relation to PurchaseOrderReceiptLine
			Field Mapping uses Set6
				related.Company  				= Company
				related.PurchaseOrderReceipt	= PurchaseOrderReceipt
                related.PurchaseOrderLine		= PurchaseOrderLine
            Instance Selection
            	where (related.UniqueID        != UniqueID)
		
        ReleasedPurchaseOrderReceiptLinesRel
            one-to-many relation to PurchaseOrderReceiptLine
            Field Mapping uses Set5
                related.Company                 = Company
                related.PurchaseOrder		    = PurchaseOrder
                related.PurchaseOrderLine       = PurchaseOrderLine
			Instance Selection
				where (related.UniqueID != UniqueID)               
                
		UnreleasedReceiptLineRel
			one-to-many relation to PurchaseOrderReceiptLine
			Field Mapping uses ByPurchaseOrderLine
				related.Company					= Company
				related.PurchaseOrder			= PurchaseOrder
				related.PurchaseOrderLine		= PurchaseOrderLine
			Instance Selection
				where (related.Status.Entered)

		OtherUnreleasedReceiptLinesRel
			one-to-many relation to PurchaseOrderReceiptLine
			Field Mapping uses ByPurchaseOrderLine
				related.Company					= Company
				related.PurchaseOrder			= PurchaseOrder
				related.PurchaseOrderLine		= PurchaseOrderLine
			Instance Selection
				where (related.PurchaseOrderReceipt != PurchaseOrderReceipt
				and	   related.Status.Entered
				and    not related.PurchaseOrderReceipt.IsDropShip) 

		POReceiptLineTemplateRel
			one-to-one relation to POReceiptLineTemplate
			Field Mapping uses ByReceiptLine
				related.Company						= Company
				related.PurchaseOrderReceipt		= PurchaseOrderReceipt
				related.PurchaseOrderReceiptLine	= PurchaseOrderReceiptLine

        POReceiptLineTemplateByPurchaseOrderLineRel
        	one-to-one relation to POReceiptLineTemplate
			Field Mapping uses ByPurchaseOrderLine
				related.Company						= Company
				related.PurchaseOrderReceipt		= PurchaseOrderReceipt
				related.PurchaseOrderLine			= PurchaseOrderLine
        
        PurchaseOrderReceiptLineCommentRel
			one-to-many relation to PurchaseOrderReceiptLineComment
			Field Mapping uses part of key
				related.Company						= Company
				related.PurchaseOrderReceipt		= PurchaseOrderReceipt
				related.PurchaseOrderReceiptLine	= PurchaseOrderReceiptLine
        
        GLCompanyGroupMemberRel
            one-to-one relation to GeneralLedgerCompanyGroupMember
            Field Mapping uses symbolic key
                related.GeneralLedgerCompanyGroup    = GeneralLedgerCompanyGroup
                related.Company                        = Company

        PurchaseOrderLineLookupRel
			one-to-many relation to PurchaseOrderLine
			Field Mapping uses Set11
				related.Company						= Company
				related.PurchaseOrder				= PurchaseOrder
				related.MatchDetailKey				= MatchDetailKey
			Instance Selection
				where (related.Closed.No
				and   (ShipToLocation not entered
				or     related.ShipToLocation		= ShipToLocation))
				
		WarehouseDemandRel
        	one-to-one relation to WarehouseDemand
        	Field Mapping uses symbolic key
        		related.Company								= Company
        		related.WarehouseDemand.DemandSystemCode	= "PO"
        		related.WarehouseDemand.DemandDocument		= PurchaseOrder
        		related.WarehouseDemand.DemandCompany		= Company				
				
		WarehouseDemandLinesRel 
			one-to-many relation to WarehouseDemandLine
			Field Mapping uses symbolic key
				related.Company											= Company
				related.WarehouseDemand.DemandSystemCode				= DemandSystemCode.PurchaseOrder
				related.WarehouseDemand.DemandDocument					= PurchaseOrder
				related.WarehouseDemand.DemandCompany					= Company
				related.InventoryLocation								= ShipToLocation
				related.Item											= Item
			Instance Selection 
				where (related.WarehouseDemandLine.DemandDocumentType	= DemandDocumentType.PurchaseOrder
				and    related.WarehouseDemandLine.LineNumber			= PurchaseOrderLine)

		SourceDemandLineRel
			one-to-one relation to WarehouseDemandLine
			Field Mapping uses Set9
				related.Company											= Company
				related.WarehouseDemand.DemandSystemCode				= DemandSystemCode.Requisitions
				related.WarehouseDemand.DemandDocument					= LocalDemandDocument
                related.WarehouseDemand.DemandCompany					= Company
				related.WarehouseDemandLine.LineNumber					= LocalDemandLineNumber
				related.InventoryLocation								= ShipToLocation
				related.WarehouseDemandLine.ComponentSequence			= 0
						
		DemandLinesWithBackorderRel
			one-to-many relation to WarehouseDemandLine
			Field Mapping uses Set2
				related.Company											= Company
                related.InventoryLocation								= ShipToLocation
                related.LineType										= ItemType.Inventoried
                related.Item											= Item
            Instance Selection
            	where (related.BackorderedQuantity > 0)
		
		PurchaseOrderLineSourceByOrderEntryRel
			one-to-many relation to PurchaseOrderLineSource
			Field Mapping uses Set1
				related.Company                           = Company
				related.PurchaseOrder               = PurchaseOrderLine.PurchaseOrder
				related.PurchaseOrderLine           = PurchaseOrderLine
			Instance Selection
				where (related.PurchaseOrderLineSource.SourceDocumentOrigin.OrderEntry)

		POReceiptLineCommentsRel
			one-to-many relation to PurchaseOrderLineComment
			Field Mapping uses ByCommentType
				related.Company				= Company
				related.PurchaseOrder		= PurchaseOrder
	  			related.PurchaseOrderLine	= PurchaseOrderLine

        LocalInvoiceAddOnChargeForPOLineRel
            one-to-many relation to PayablesInvoiceAddOnCharge
            Field Mapping uses symbolic key
                related.Company 			= Company
                related.PayablesInvoice		= PayablesInvoice
                related.PurchaseOrder		= LocalPurchaseOrder
                related.PurchaseOrderLine	= LocalPurchaseOrderLine

        ItemGTINUOMRel
        	one-to-many relation to ItemGTIN
        	Field Mapping uses Set3
        		related.ItemGroup             = Company.BusinessGroup
        		related.Item                  = Item
        		related.UnitOfMeasure         = ReceivedUOM
        
        VendorItemUOMRel
        	one-to-many relation to VendorItem
        	Field Mapping uses Set4
        		related.ProcurementGroup      = Company.BusinessGroup
        		related.Vendor                = Vendor
        		related.Item                  = Item
			Instance Selection
        		where (related.VendorBuyUOM.UnitOfMeasure = ReceivedUOM)
        
        POLineInvoiceMessageRel
            one-to-many relation to MatchInvoiceMessage
            Field Mapping uses Set1
                related.Company						= Company
                related.Vendor						= Vendor
                related.PayablesInvoice				= LocalPayablesInvoice
     			related.PurchaseOrder				= PurchaseOrder
			Instance Selection
				where (related.MatchMessageOrigin.PoCost
				and    related.Status.Closed
				and    related.ApplicationAction.AdjustCost
				and    related.PurchaseOrderLine		= PurchaseOrderLine)
				
		InventoriedReceiptLinesInALocationRel
			one-to-many relation to PurchaseOrderReceiptLine
			Field Mapping uses symbolic key
				related.Company									= Company
				related.PurchaseOrderReceipt					= PurchaseOrderReceipt
			Instance Selection
				where	(related.ShipToLocation						= ShipToLocation
				and		 related.IsInventoried)

		PendingTwoStepReceivingReceiptLineRel
			one-to-many relation to PurchaseOrderReceiptLine
			Field Mapping uses ByPurchaseOrderLine
				related.Company									= Company
				related.PurchaseOrder							= PurchaseOrder
				related.PurchaseOrderLine						= PurchaseOrderLine
			Instance Selection
				where (related.PurchaseOrderReceipt			   != PurchaseOrderReceipt
				and    related.Status.ReleasedPendingTwoStepReceiving
				and    related.IsInventoried)

        PurchaseOrderUDIDetailRel  
            one-to-many relation to PurchaseOrderUDIDetail
            delete cascades
            Field Mapping uses symbolic key
                related.Company = Company
            Instance Selection
                where (related.PurchaseOrderUDIDetail.PurchaseTransactionDocumentType.Receiving
                and   related.PurchaseOrderUDIDetail.DocumentNumberNumeric = PurchaseOrderReceipt
                and   related.PurchaseOrderUDIDetail.LineNumber = PurchaseOrderReceiptLine)
				

		PurgePurchaseOrderReceiptLineDistributionRel
			one-to-many relation to PurchaseOrderReceiptLineDistribution

			Field Mapping uses symbolic key
				related.Company  					= Company
				related.PurchaseOrderReceipt		= PurchaseOrderReceipt
				related.PurchaseOrderReceiptLine	= PurchaseOrderReceiptLine
			Instance Selection
				include deleted records
				
		PurgePOReceiptLineTemplateRel
			one-to-many relation to POReceiptLineTemplate
			Field Mapping uses ByReceiptLine
				related.Company  					= Company
				related.PurchaseOrderReceipt		= PurchaseOrderReceipt
				related.PurchaseOrderReceiptLine	= PurchaseOrderReceiptLine
			Instance Selection
				include deleted records

		PurgePurchaseOrderReceiptLineCommentRel
			one-to-many relation to PurchaseOrderReceiptLineComment
			Field Mapping uses part of key
				related.Company						= Company
				related.PurchaseOrderReceipt		= PurchaseOrderReceipt
				related.PurchaseOrderReceiptLine	= PurchaseOrderReceiptLine
			Instance Selection
				include deleted records

		LocationItemUOMRel
			one-to-many relation to LocationItemUOM
			Field Mapping uses symbolic key
				related.Company  					= Company
				related.InventoryLocation 			= ShipToLocation
				related.Item						= Item
				related.UnitOfMeasure				= ReceivedUOM	
			Instance Selection
				where (related.ActiveBuyingUOM)

		GeneralLedgerCompanyRel
			one-to-one relation to GeneralLedgerCompany
			Field Mapping uses symbolic key
				related.Company		= Company

		CurrencyRelationshipRel
			one-to-one relation to CurrencyRelationship
			Field Mapping uses symbolic key
				related.FinanceEnterpriseGroup				 = GeneralLedgerCompanyRel.FinanceEnterpriseGroup
				related.CurrencyRelationship.FromCurrency	 = LocalFromCurrency
				related.CurrencyRelationship.ToCurrency		 = LocalToCurrency


		FSMBODConfigurationParameterRel
        	one-to-one relation to FSMBODConfigurationParameter
			Field Mapping uses symbolic key
            	related.FSMBODConfigurationParameter 		= LocalConfigurationParameter
		
		FSMBODConfigurationPARel
        	one-to-one relation to FSMBODConfiguration
			Field Mapping uses symbolic key
            	related.FSMBODConfiguration.Verb 		= 2
            	related.FSMBODConfiguration.Noun 		= "PulseAlert"
            	related.FSMBODConfiguration.Direction 	= 1
        
        FSMBODConfigurationDetailPARel
        	one-to-many relation to FSMBODConfigurationDetail
			Field Mapping uses symbolic key
            	related.FSMBODConfiguration.Verb 			= 2	
            	related.FSMBODConfiguration.Noun 			= "PulseAlert"
            	related.FSMBODConfiguration.Direction 		= 1
            Instance Selection
				where (related.Alert						= "FSM_ION_InspectionReqAlert"
				and	   related.Enable)


 		PurchaseOrderLineSourceForPORQRel
 			one-to-many relation to PurchaseOrderLineSource
 			Field Mapping uses Set9
 				related.Company											= Company
 				related.PurchaseOrder									= PurchaseOrder
 				related.PurchaseOrderLine								= PurchaseOrderLine
			Instance Selection
 				where (related.PurchaseOrderLineSource.SourceDocumentOrigin = SourceDocumentOrigin.PurchaseOrder
				or     related.PurchaseOrderLineSource.SourceDocumentOrigin	= SourceDocumentOrigin.Requisitions)
 		
		ShipToFacilityDetailRel
			one-to-many relation to ShipToFacilityDetail
			Field Mapping uses ByCompanyLocation
				related.ItemGroup											= Company.ProcurementGroup
				related.ShipToFacilityDetail.Company						= first PurchaseOrderLineSourceForPORQRel.PurchaseOrderLineSource.OperatingCompany
				related.ShipToFacilityDetail.InventoryLocation				= blank
				related.ShipToFacilityDetail.RequestingLocation				= first PurchaseOrderLineSourceForPORQRel.RequestingLocation
			
		ShipToFacilityDetailWithCompanyOnlyRel
			one-to-many relation to ShipToFacilityDetail
			Field Mapping uses ByCompanyLocation
				related.ItemGroup											= Company.ProcurementGroup
				related.ShipToFacilityDetail.Company						= first PurchaseOrderLineSourceForPORQRel.PurchaseOrderLineSource.OperatingCompany
			Instance Selection
				where (related.ShipToFacilityDetail.InventoryLocation not entered
				and    related.ShipToFacilityDetail.RequestingLocation not entered)
			
		ManufacturerIDManufacturerRel
			one-to-many relation to ManufacturerIDManufacturer
			Field Mapping uses Set2
				related.ItemGroup											= Company.ProcurementGroup
				related.Manufacturer.ManufacturerCode						= PurchaseOrderLine.Manufacturer.ManufacturerCode	
				related.Manufacturer.ManufacturerDivision					= PurchaseOrderLine.Manufacturer.ManufacturerDivision

		ManufacturerIDShipToFacilityRel
			one-to-one relation to ManufacturerIDShipToFacility
			Field Mapping uses symbolic key
				related.ItemGroup											= Company.ProcurementGroup
				related.ManufacturerID										= first ManufacturerIDManufacturerRel.ManufacturerID
				related.ShipToFacility										= LocalShipToFacility  			

		ManufacturerIDDistributionCenterRel
			one-to-many relation to ManufacturerIDDistributionCenter
			Field Mapping uses symbolic key
				related.ItemGroup											= Company.ProcurementGroup
				related.ManufacturerID										= first ManufacturerIDManufacturerRel.ManufacturerID
            Instance Selection
				where (related.ManufacturerIDDistributionCenter.Company				= Company
				and    related.ManufacturerIDDistributionCenter.InventoryLocation	= ShipToLocation)


		MobileSupplyChainConfigurationRel
            one-to-one relation to MobileSupplyChainConfiguration
            Field Mapping uses symbolic key
                related.MobileSupplyChainConfiguration = Company.FinanceEnterpriseGroup

		MobileSupplyChainPurchaseOrderReceiptTrackingRel
			one-to-many relation to MobileSupplyChainPurchaseOrderReceiptTracking
			Field Mapping uses symbolic key
				related.Company						= Company
				related.PurchaseOrderReceipt		= PurchaseOrderReceipt
				related.PurchaseOrderReceiptLine	= PurchaseOrderReceiptLine

		MobileSupplyChainPurchaseOrderReceiptLineDetailRel
			one-to-many relation to MobileSupplyChainPurchaseOrderReceiptLineDetail
			Field Mapping uses symbolic key
				related.Company						= Company
			Instance Selection
				where (related.MobileSupplyChainPurchaseOrderReceiptLine.MobileSupplyChainPurchaseOrderReceipt.PurchaseOrderReceipt = PurchaseOrderReceipt
				and    related.MobileSupplyChainPurchaseOrderReceiptLine.PurchaseOrderReceiptLine								    = PurchaseOrderReceiptLine)

		MobileSupplyChainPurchaseOrderReceiptRel
			one-to-many relation to MobileSupplyChainPurchaseOrderReceipt
			Field Mapping uses symbolic key
				related.Company						= Company
			Instance Selection
				where (related.PurchaseOrderReceipt = PurchaseOrderReceipt
				and    related.PurchaseOrder	    = PurchaseOrderReceipt.PurchaseOrder)
		MobileSupplyChainPOReceiptTrackingNumberHeaderRel
			one-to-one relation to MobileSupplyChainPOReceiptTrackingNumberHeader
			Field Mapping uses symbolic key
				related.Company																		= Company
				related.PurchaseOrderReceipt														= PurchaseOrderReceipt
				related.MobileSupplyChainPOReceiptTrackingNumberHeader.ShipToLocation 				= ShipToLocation
				related.MobileSupplyChainPOReceiptTrackingNumberHeader.RequestingLocation			= LocalMSCMRequestingLocation
				related.MobileSupplyChainPOReceiptTrackingNumberHeader.DeliverTo					= LocalDeliverTo


    Sets
        Set10
            indexed
            Instance Selection
                where (RequiresOrHasInspection)
            Sort Order
                Company
                PurchaseOrderReceipt
                PurchaseOrderReceiptLine

        Set11
            indexed
            Sort Order
                Company
                MatchObjectID
                MatchSequence
                PurchaseOrderReceipt
                PurchaseOrderReceiptLine

        Set12
            indexed
            Sort Order
                Company
                PurchaseOrderReceipt
                MatchDetailKey
                PurchaseOrderLine
                PurchaseOrderReceiptLine

        Set13
            indexed
            Sort Order
                Company
                ReceivedDate
                PurchaseOrder
                Item
                Vendor
                VendorItem
                ShipToLocation
                ReferenceNumber
                Status
                ItemType
                PurchaseOrderReceipt
                PurchaseOrderReceiptLine

        Set14
            indexed
            Instance Selection
                where (HasManufacturerID)
            Sort Order
                ManufacturerID
                Company
                ShipToLocation
                ReceivedDate
                ShipToFacility
                ManufacturerNumber
                PurchaseOrderReceipt
                PurchaseOrderReceiptLine

        Set2
            indexed
            Sort Order
                Company
                PurchaseOrderReceipt
                Item
                Bin
                PurchaseOrderLine
                PurchaseOrderReceiptLine

        Set3
            indexed
            Instance Selection
                where (IsUndelivered)
            Sort Order
                Company
                PurchaseOrderReceipt
                PurchaseOrderReceiptLine

        Set4
            indexed
            Sort Order
                Company
                PurchaseOrder
                ShipToLocation
                MatchDetailKey
                PurchaseOrderLine
                PurchaseOrderReceipt
                PurchaseOrderReceiptLine

        Set5
            indexed
            Instance Selection
                where (IsReleased)
            Sort Order
                Company
                PurchaseOrder
                PurchaseOrderLine
                UpdateDate descending
                PurchaseOrderReceipt
                PurchaseOrderReceiptLine

        Set6
            indexed
            Sort Order
                Company
                PurchaseOrderReceipt
                PurchaseOrderLine
                PurchaseOrderReceiptLine

        Set7
            indexed
            Sort Order
                Company
                ShipToLocation
                Item
                UpdateDate descending
                PurchaseOrderReceipt
                PurchaseOrderReceiptLine

        Set9
            indexed
            Sort Order
                Company
                Item
                ShipToLocation
                PurchaseOrderReceipt
                PurchaseOrderReceiptLine

        ByItem
            indexed
            Sort Order
                Company
                Item
                PurchaseOrderReceipt
                PurchaseOrderReceiptLine
                
		ByStatus
			indexed
        	Sort Order
        		Company
        		Status
        		PurchaseOrderReceipt
        		PurchaseOrderReceiptLine
                
        ByVendorItem
            indexed
            Sort Order
                Company
                VendorItem
                PurchaseOrderReceipt
                PurchaseOrderReceiptLine
              
		ByPurchaseOrderLine
			indexed
			Sort Order
				Company
				PurchaseOrder
				PurchaseOrderLine
				PurchaseOrderReceipt
				PurchaseOrderReceiptLine


        ByCompanyVendor
            indexed
            Sort Order
                Company
                Vendor
                MatchDetailKey
                PurchaseOrderReceipt
                PurchaseOrderReceiptLine

        ByInterfaceRun
            indexed
            Sort Order
            	OriginatingInterfaceRun
                Company
                PurchaseOrderReceipt
                PurchaseOrderReceiptLine

    Field Rules
    	InspectionRequired
			if (action type.Create
			and HasItemMaster)
				default to PurchaseOrderLine.InspectionRequired
				
		ExtendedAmount
			force default to DerivedExtendedAmount

        ReferenceNumber
        	force default to PurchaseOrderReceipt.ReferenceNumber
        
        PurchaseOrder
			initial value is PurchaseOrderReceipt.PurchaseOrder
        	default to PurchaseOrderReceipt.PurchaseOrder
        	
        PurchaseOrderLine
            required
			default to ContextPurchaseOrderLine

        Item
            initial value is ContextPurchaseOrderLine.Item
            default to PurchaseOrderLine.Item

		ItemType
 			default to PurchaseOrderLine.ItemType				                                   
 			
 			if (SubstituteReceiving)			
				if (PurchaseOrderLine.IsInventoryType)
					constraint (IsInventoried)
						"CannotUseNonInventoryItemAsASubstituteForInventoryItem"
				else
				if (PurchaseOrderLine.IsNonStockType)
					constraint (not IsInventoried)
						"CannotUseInventoryItemAsASubstituteForNon-InventoryItem"
				else
				if (PurchaseOrderLine.ItemType.Special)
					constraint (ItemType.Special)
						"CanOnlyUseSpecialItemAsSubstituteForSpecialItems"

				if (PurchaseOrderLine.IsInventoryType
				or  PurchaseOrderLine.IsNonStockType)
					confirmation required
						"WhenInvoicingAgainstASubstituteItemForAnInventoriedOrNonStockItem,ThePurchaseOrderLineMatchedQuantitiesWillNotBeUpdated.Continue?"

			constraint (not ItemType.Service)
				"CannotReceiveServiceTypeItem"
						
			if (IsInventoried)
				constraint (ItemlocRelExist and ItemLocationInventoryTracked)
					"Item<Item>IsNotInventoryTrackedAtThisLocation"
			if (IsNonstock)
				constraint (ItemMasterExists)
					"ItemRecordFor<Item>DoesNotExist"

		ItemGTIN
			default to PurchaseOrderLine.ItemGTIN
			
		ShipToLocation
			initial value is PurchaseOrderLine.ShipToLocation
			default to PurchaseOrderLine.ShipToLocation
			
			if (PurchaseOrderReceipt.ShipToLocation entered)
				force default to PurchaseOrderReceipt.ShipToLocation
			else
				required
					"LocationIsRequiredWhenAnOverrideLocationIsNotUsed"
			
			if (PurchaseOrderLineFromOrderEntryRel exist)
				constraint (ShipToLocation = PurchaseOrderLine.ShipToLocation)
					"CannotReceive,OrderEntryOriginatedAtADifferentLocation"
			
			if (PurchaseOrderReceipt.ERSStatus.InvoiceFromReceipt)
				constraint (ShipToLocation.ERSCapable)
					"LocationDoesNotSupportERS,CannotUseOnERSReceiver"
			
		StockUOMFlag
			if (IsCatchWeightItem) 
			 	constraint (not StockUOMFlag)
		 			"CannotIndicateStockUOMForCatchWeightItems"
			
		ProcessLevel
			force default to PurchaseOrderReceipt.ProcessLevel
			
        ReceivedDate
        	force default to PurchaseOrderReceipt.DerivedReceivedDate
       
       	VendorItem
       		default to PurchaseOrderLine.VendorItem
       		
       		if (SubstituteReceiving
			and HasItemMaster
			and PurchaseOrderLine.VendorItem entered)
				required
					"InvalidVendorItem<VendorItem>ForPOLineVendorItem<PurchaseOrderLine.VendorItem>Referenced"
        	
        	if (VendorItem changed)
        		initialize VendorPriceUOM
        		initialize VendorPriceUOMQuantity
        		initialize VendorPriceUOMMultiplier
        		initialize VendorBuyUOM
        		initialize VendorBuyUOMMultiplier
        	
        Vendor
			if (SubstituteReceiving)
				default to PurchaseOrder.Vendor
        	else
				default to PurchaseOrderReceipt.Vendor

		ManufacturerNumber
			force default to PurchaseOrderLine.ManufacturerNumber

        Invoice
			force default to PurchaseOrderReceipt.Invoice

		MatchDetailKey
			if  (ItemType.Inventoried 
			or   ItemType.NonStock)
				force default to Item
			else
			if  (ItemType.Special) 
				force default to VendorItem
			else
				force default to Description
		
		EAMOperationNumber
			default to PurchaseOrderLine.EAMOperationNumber
		
		EAMSequenceNumber
			default to PurchaseOrderLine.EAMSequenceNumber
		
		EAMWorkOrderNumber
			default to PurchaseOrderLine.EAMWorkOrderNumber

        LastUpdateDate
			force default to current timestamp

		LastUpdateBy
			force default to actor
					
		ReceivedUOM
			default to PurchaseOrderLine.EnteredBuyUOM
			initial value is PurchaseOrderLine.EnteredBuyUOM 
			
			if (ItemType.Special)
				constraint (ReceivedUOM = PurchaseOrderLine.EnteredBuyUOM)
					"ReceiptLineUOM<ReceivedUOM>MustEqualPurchaseOrderLineUOM<PurchaseOrderLine.EnteredBuyUOM>ForSpecialItem"
			
			else
			if (Item exists)
				if (IsCatchWeightItem)
					default to Item.SecondaryUOM
					constraint (ReceivedUOM = Item.SecondaryUOM)
						"ChangeToSecondaryUOMForCatchWeightItems"

				if (HasItemLocationStockUOM)
					constraint (LocationItemUOMRel exists)
						"<ReceivedUOM>IsNotValidUnitOfMeasureOnLocationForThisItem<Item>"
				else
					constraint (ReceivedItemUOMRel exists)					
						"<ReceivedUOM>IsNotAValidUOMForTheReceivedItem<Item>"
						
					constraint (not ReceivedItemUOMRel.ValidForBuying.Inactive)    
						"<ReceivedUOM>IsNotValidForThisItem<Item>"
					
			if (Company.RequireUnitOfMeasure)
				required		
			
			if (ReceivedUOM changed
			and not ReceivedUOM.Active
			and not ReceivedUOM = PurchaseOrderLine.EnteredBuyUOM)	
				cannot be changed
					"UnitOfMeasure<ReceivedUOM>IsInactive"
			
			if (ReceivedUOM changed)
				if (ItemGTIN entered)
					if (ItemGTINUOMRel exists)
						ItemGTIN = first ItemGTINUOMRel.ItemGTIN
				
		VendorPriceUOM
			default to PurchaseOrderLine.VendorPriceUOM
		
		VendorPriceUOMMultiplier
			default to PurchaseOrderLine.VendorPriceUOMMultiplier
		
		DetailsInBalance
			if  (IsCatchWeightItem
			and (IsBinTracked
			or   IsSerialRequiredAtReceipt
			or   IsLotRequiredAtReceipt)
			and (SumOfQuantity != CatchWeightQuantity 
			or  SumOfStockQuantity != EnteredReceivedQuantity)) 
				force default to false
			else
			if  (not IsCatchWeightItem
			and (SumOfQuantity != EnteredReceivedQuantity
			and (IsBinTracked
			or   IsSerialRequiredAtReceipt
			or   IsLotRequiredAtReceipt))
			or  (SumOfUDIQuantity != EnteredReceivedQuantity
			and  IsUDIRequiredAtReceipt))
				force default to false
			else
				force default to true

			
		TaxUsageCode
			default to PurchaseOrderLine.TaxUsageCode		

		BuyUOMQuantity
			force default to DerivedBuyUOMQuantity
			
		VendorPriceUOMQuantity
			force default to DerivedVendorPriceUOMQuantity





    	OpenToMatchQuantity   

			if (!PurchaseOrderLine.CostOption.NoCharge
			or   PurchaseOrderLine.AllowZeroCostInvoice)

				if (CatchWeightQuantity entered)
			    	force default to CatchWeightQuantity
				else
					force default to VendorPriceUOMQuantity 

   		CatchWeightOpenToMatchQuantity

			if  (IsCatchWeightItem
			and (not PurchaseOrderLine.CostOption.NoCharge
			or   PurchaseOrderLine.AllowZeroCostInvoice))
			    force default to EnteredReceivedQuantity

		OriginalUnitCost 
			default to PurchaseOrderLine.EnteredUnitCost
			
			if (PurchaseOrderReceipt.ERSStatus.InvoiceFromReceipt
			and PurchaseOrderLine entered
			and not MatchCompanyRel.UpdateERSCost)
				constraint (OriginalUnitCost = PurchaseOrderLine.DerivedVendorPriceUnitCost)
					"UpdateOfInvoiceUnitPriceIsNotAuthorized"
			



		Bin
			constraint (IsInventoried
			or			Bin not entered)
				"BinAllocationNotAllowedForNonInventoryItems"
				
			if (IsInventoried and IsBinTracked and not MultipleBins)
				default to ItemLocationRel.PreferredBin
		
		CancelBackorder
			if (PurchaseOrder.VendorReturn entered
			and PurchaseOrderLine.CostOption.NoCharge
			and PurchaseOrderLine.ItemType.Inventoried)
				constraint (not CancelBackorder)
					"CannotCancelBackorder,MustAdjustInReturns"
			
			if (CancelBackorder
			and PayablesInvoiceRel exist)
				constraint (not PayablesInvoiceRel.Status.Unreleased)
					"CannotCancelBackorder,UnmatchedInvoicesExistForPO"
			







		
		
		TaxCode
			default to PurchaseOrderLine.TaxCode
		
		TaxableUnitCost
			default to PurchaseOrderLine.TaxableUnitCost
				
		ProductTaxCategory
			default to PurchaseOrderLine.ProductTaxCategory		
		
		CommodityCode
			if (HasItemMaster
			and Item.CommodityCode entered)
				default to Item.CommodityCode
				constraint (CommodityCode = Item.CommodityCode)
					"CommodityCodeDoesNotMatchItemMaster"
					
			default to PurchaseOrderLine.CommodityCode			
		
		MSDSRequired	
			if (action type.Create)
				default to PurchaseOrderLine.MSDSRequired
				
			if (MSDSRequired) 
				constraint (PurchaseOrderLine.MSDSRequired)
					"MSDSIsNotRequested"
			
		MSDSDocument
			if (action type.Create
			and InventoriedOrNonstockRequiresMSDS)
				default to ItemLocationRel.MSDSDocument
			
			if (not MSDSRequired)
				cannot be entered
					"CannotEnterMSDSDocumentWhenOneIsNotReceived"
					
		MSDSVersion
			if (action type.Create
			and InventoriedOrNonstockRequiresMSDS)
				default to ItemLocationRel.MSDSVersion

			if (not MSDSRequired)			
				cannot be entered
					"CannotEnterMSDSDocumentWhenOneIsNotReceived"
	
		ReceivedUOMMultiplier
			if (ReceivedUOM = PurchaseOrderLine.EnteredBuyUOM)
				force default to PurchaseOrderLine.EnteredBuyUOMMultiplier
			else
			if (ItemType.Inventoried or ItemType.NonStock)

				force default to ReceivedItemUOMRel.UOMConversion
			else
				if (SubstituteReceiving
				and ItemType.Special)
					default to PurchaseOrderLine.EnteredBuyUOMMultiplier                           
					constraint (PurchaseOrderLine.EnteredBuyUOMMultiplier = ReceivedUOMMultiplier)
						"UOMConversionMustBeTheSameAsPurchaseOrderLine"
			default to 1
		
        VendorBuyUOM
			default to PurchaseOrderLine.EnteredBuyUOM
            default to ReceivedUOM

        VendorBuyUOMMultiplier
			if (ItemType.Inventoried or ItemType.NonStock)
				default to PurchaseOrderLine.EnteredBuyUOMMultiplier
            default to ReceivedUOMMultiplier
            default to 1

		Description
			if (not SubstituteReceiving)
				default to PurchaseOrderLine.Description
			else
				if (HasItemMaster)
					default to Item.Description	
		
		EnteredReceivedQuantity
			if (EnteredReceivedQuantity > 0)
				if (PurchaseOrderReceipt.ShipToLocation entered)
					constraint (PurchaseOrderReceipt.ShipToLocation = ShipToLocation)
						"CannotReceiveItem<Item>;CannotHaveMultipleLocationsForReceiverLines"
						
				if (HasItemMaster)
					constraint (EnteredReceivedQuantity decimals <= Item.NumberOfDecimalsQuantity)
						"TooManyDecimalDigitsEnteredForQuantity:MaxForItem<Item>Is<Item.NumberOfDecimalsQuantity>"
				else
					constraint (EnteredReceivedQuantity decimals <= InventoryCompanyRel.NumberOfDecimalsQuantity)
						"TooManyDecimalDigitsEnteredForQuantity:MaxForItem<Item>Is<InventoryCompanyRel.NumberOfDecimalsQuantity>"
				
				if (HasItemMaster
				and ReceivedUOM != PurchaseOrderLine.EnteredBuyUOM)		
					UOMCalculation.InputUOM				= ReceivedUOM
					UOMCalculation.InputToUOM			= PurchaseOrderLine.EnteredBuyUOM
					UOMCalculation.InputQuantity		= EnteredReceivedQuantity
					UOMCalculation.Method				= UOMCalculation.Method.ConvertToAlternate
	    			if (Item.NumberOfDecimalsQuantity.0Decimals)
	    				UOMCalculation.ValidateDecimal	= true
	    			else
	    				UOMCalculation.DoRounding		= true
					Execute							= UOMCalculation.OutputQuantity
						
		CatchWeightQuantity
            if (IsCatchWeightItem)
                required

            else
				cannot be entered
					"CannotEnterCatchWeightQuantity;Item<Item>NotSetUpForCatchWeight"
						
		CreatedBy
			default to actor
			
		IsCancelRemaining
			if (old IsCancelRemaining)
				cannot be changed
	
		HSNSACCode
			if (IsHSNSACCodeEnabled)
				default to PurchaseOrderLine.HSNSACCode
			else
				cannot be entered
					"CannotEnter,HSN_/SACCodeFlagIsNotSetAtGlobalLedgerCompany"
				
		TransientTrackingNumber
			if (Company.PackageTrackingLevel.LineLevel
			and PurchaseOrderReceiptTrackingRel not exists)
				if (PurchaseOrderLineSourcesRel exists)
					for each PurchaseOrderLineSourcesRel
						invoke Create PurchaseOrderReceiptTracking
							invoked.Company						= Company
							invoked.PurchaseOrderReceipt 		= PurchaseOrderReceipt
							invoked.PurchaseOrderReceiptLine	= PurchaseOrderReceiptLine
							invoked.PurchaseOrderReceiptTracking.PackageTrackingNumber = TransientTrackingNumber
							invoked.NumberOfLabels				= TransientNumberOfLabels						
							invoked.PurchaseOrderReceiptTracking.Requisition = each.PurchaseOrderLineSource.SourceDocumentNumeric
							invoked.Requester				    = each.Requester
				else
					invoke Create PurchaseOrderReceiptTracking
						invoked.Company						= Company
						invoked.PurchaseOrderReceipt 		= PurchaseOrderReceipt
						invoked.PurchaseOrderReceiptLine	= PurchaseOrderReceiptLine
						invoked.PurchaseOrderReceiptTracking.PackageTrackingNumber = TransientTrackingNumber
						invoked.NumberOfLabels				= TransientNumberOfLabels						

    Rule Blocks
		CreatePOTransactionDetail	
			if (!TransientDisallowTxnDetailCallback)
				if (EnteredReceivedQuantity > 0)
		    		increment LastPurchaseOrderTransactionDetail by 1
					invoke Create PurchaseOrderTransactionDetailsRel
						invoked.Company		= Company
						invoked.PurchaseOrderTransactionDetail.PurchaseTransactionDocumentType	= PurchaseOrderTransactionDetailsRel.PurchaseOrderTransactionDetail.PurchaseTransactionDocumentType.Receiving
						invoked.PurchaseOrderTransactionDetail.TransactionSequence				= LastPurchaseOrderTransactionDetail	
						invoked.PurchaseOrderTransactionDetail.DocumentNumberNumeric			= PurchaseOrderReceipt
						invoked.PurchaseOrderTransactionDetail.PurchaseOrderReceipt				= PurchaseOrderReceipt
						invoked.PurchaseOrderTransactionDetail.SourceDocumentAlpha				= PurchaseOrderReceipt
						invoked.PurchaseOrderTransactionDetail.LineNumber		    			= PurchaseOrderReceiptLine
						
						if (IsInventoried)
							invoked.Bin		= Bin
						else
							initialize invoked.Bin
						
						if (IsCatchWeightItemAndHasItemMaster)
							invoked.Quantity			= CatchWeightQuantity
							invoked.SecondaryQuantity	= EnteredReceivedQuantity
						else
							invoked.Quantity			= EnteredReceivedQuantity
							
						invoked.Item		= Item
					
					include UpdatePOTransactionDetail
			
			initialize TransientDisallowTxnDetailCallback 
	    		


    		
    	UpdatePOTransactionDetail	
    		if (!TransientDisallowTxnDetailCallback)
    			initialize LocalSavedBin
				LocalSavedBin = first PurchaseOrderTransactionDetailsWithBinRel.Bin
    			if (PurchaseOrderTransactionDetailsWithDifferentBin exists)
    				for each PurchaseOrderTransactionDetailsRel
    					invoke Update each
    			else
    				for each PurchaseOrderTransactionDetailsRel
    					invoke Update each
    						invoked.Bin     = Bin
    						invoked.LocalDoNotUpdateBins = true

    			if (instance count of PurchaseOrderTransactionDetailsRel = 1 
    			and first PurchaseOrderTransactionDetailsRel.Serial not entered)
    				invoke Update first PurchaseOrderTransactionDetailsRel
    					if (IsCatchWeightItemAndHasItemMaster)
    						invoked.Quantity			= CatchWeightQuantity
    						invoked.SecondaryQuantity	= EnteredReceivedQuantity
    					else
    						invoked.Quantity = EnteredReceivedQuantity
    		
    		initialize TransientDisallowTxnDetailCallback 
    						
    	
    	DeletePOTransactionDetail
    		if (!TransientDisallowTxnDetailCallback)
    			for each PurchaseOrderTransactionDetailsRel
    				invoke Delete each		
    	
  		CreatePOUDIDetail
			if (EnteredReceivedQuantity > 0)
		    	increment LastPurchaseOrderTransactionDetail by 1
				invoke Create PurchaseOrderUDIDetailRel
					invoked.Company													= Company
					invoked.PurchaseOrderUDIDetail.PurchaseTransactionDocumentType	= PurchaseOrderTransactionDetailsRel.PurchaseOrderTransactionDetail.PurchaseTransactionDocumentType.Receiving
					invoked.PurchaseOrderUDIDetail.TransactionSequence				= LastPurchaseOrderTransactionDetail	
					invoked.PurchaseOrderUDIDetail.DocumentNumberNumeric			= PurchaseOrderReceipt
					invoked.PurchaseOrderUDIDetail.PurchaseOrderReceipt				= PurchaseOrderReceipt
					invoked.PurchaseOrderUDIDetail.SourceDocumentAlpha				= PurchaseOrderReceipt
					invoked.PurchaseOrderUDIDetail.LineNumber		    			= PurchaseOrderReceiptLine
					invoked.Quantity												= EnteredReceivedQuantity
					invoked.Item													= Item
    	
    	EditReceiptLine		
			if ((TrackingMethod = 1
			or	TrackingMethod = 4)
			and IsInventoried
			and IsBinTracked
			and Bin entered	
			and not InterfaceHasDetails)
				if (PurchaseOrderTransactionDetailsRel exist)
					include UpdatePOTransactionDetail
				else
					include CreatePOTransactionDetail
				




					
    	SetDefaults	
    		
    		if (PurchaseOrderLine entered
			and not LocalFinalRelease) 	
				if (not Company.ReopenPurchaseOrderLine)
					constraint (!PurchaseOrderLine.Closed.Yes)
						"CompanyDoesNotAllowChangesToAClosedPurchaseOrderLine"
				
				initialize LocalReceivedQuantity
				LocalReceivedQuantity = PurchaseOrderLine.ReceivedQuantity + EnteredReceivedQuantity
				
				if ((PurchaseOrderLine.CostOption.NoCharge
				or   PurchaseOrderLine.AllowZeroCostInvoice)	
				and  PurchaseOrder.VendorReturn entered)
					constraint (LocalReceivedQuantity <= PurchaseOrderLine.Quantity)
						"CannotOverReceiveOnANoChargeReturnPOLine"
					
		CheckStockItems
			initialize LocalUnitCost
			if (OriginalUnitCost not entered
			and PurchaseOrder.VendorReturn entered)
				if  (PurchaseOrderLine.ItemType.Inventoried
				and (PurchaseOrderLine.CostOption.NoCharge
				or   PurchaseOrderLine.AllowZeroCostInvoice))	
					LocalUnitCost = VendorReturnLine.UnitCost
				else
					LocalUnitCost = OriginalUnitCost
			else
				for each ReceiptLineAOCsRel
					if (each.Closed.Yes
					and PurchaseOrder.PurchaseOrderAndLineAddOnCharge set.Closed.Yes)
						initialize LocalIncludeAOCTax 	
					else
						if (PurchaseOrder.Currency != each.Currency)
							initialize CurrencyExchange
							SavedFromCurrency						= each.Currency
							CurrencyExchange.ToCurrency				= PurchaseOrder.Currency
							SavedExchangeDate						= PurchaseOrder.PurchaseOrderDate
							CurrencyExchange.EnteredCurrencyAmount	= each.OriginalUnitCost 
							LocalCurrencyTable						= PurchaseOrder.CurrencyTable



							LocalFromCurrency	      				= each.Currency
							LocalToCurrency	      					= PurchaseOrder.Currency
							if (CurrencyRelationshipRel.MultDiv.Divide)
								LocalAOCUnitCost = each.OriginalUnitCost / CurrencyExchange.OutputCurrencyRate
							else
								LocalAOCUnitCost = each.OriginalUnitCost * CurrencyExchange.OutputCurrencyRate

						else
							LocalAOCUnitCost = each.OriginalUnitCost
									
						if (each.Taxable
						and each.TaxCode entered
						and TaxCode.EntityTaxCode set.LandedCost)
							LocalIncludeAOCTax 	 = true
							LocalAOCTaxCost 	+= each.TaxableUnitCost
						
				if (not LocalIncludeAOCTax)
					LocalUnitCost = OriginalUnitCost + LocalLandTaxUnitCost + LocalAOCUnitCost
				else
					LocalUnitCost = OriginalUnitCost + LocalLandTaxUnitCost + LocalAOCUnitCost + LocalAOCTaxCost
				
				LocalUnitAOC = LocalAOCUnitCost + LocalAOCTaxCost 
							
			if (IsCatchWeightItem)
				LocalQuantity = CatchWeightQuantity
			else
				initialize UOMCalculation
				UOMCalculation.InputQuantity	= EnteredReceivedQuantity
				UOMCalculation.InputUOMConversion = ReceivedUOMMultiplier
				UOMCalculation.Method			= UOMCalculation.Method.ConvertToStock							
				LocalQuantity					= UOMCalculation.OutputQuantity
												
				initialize UOMCalculation
				UOMCalculation.InputUnitCost	= LocalUnitCost
				UOMCalculation.InputUOMConversion = ReceivedUOMMultiplier
				UOMCalculation.Method			= UOMCalculation.Method.ConvertToStock							
				LocalUnitCost					= UOMCalculation.OutputUnitCost
				
				initialize UOMCalculation
				UOMCalculation.InputUnitCost	= LocalUnitAOC
				UOMCalculation.InputUOMConversion = ReceivedUOMMultiplier
				UOMCalculation.Method			= UOMCalculation.Method.ConvertToStock							
				LocalUnitAOC					= UOMCalculation.OutputUnitCost
				
				initialize RoundedValue
				RoundedValue.RoundInput		= LocalQuantity
				RoundedValue.RoundingType 	= RoundedValue.RoundingType.Normal
				RoundedValue.RoundTo		= 1/(10^Item.NumberOfDecimalsQuantity)
				LocalQuantity				= RoundedValue.RoundResult
				
				if (PurchaseOrder entered
				and PurchaseOrder.Currency entered)
					if (PurchaseOrder.CurrencyExchangeSetPoint.Entry
					or	PurchaseOrder.CurrencyExchangeSetPoint.Receiving)
				
						initialize CurrencyExchange
						SavedFromCurrency 			= PurchaseOrder.Currency
						CurrencyExchange.ToCurrency	= Company.Currency
						LocalCurrencyTable			= PurchaseOrder.CurrencyTable
						if (PurchaseOrder.CurrencyExchangeSetPoint.Receiving)
							SavedExchangeDate 		= PurchaseOrderReceipt.ReceivedDate
						else
							SavedExchangeDate 		= PurchaseOrder.PurchaseOrderDate	
						
						SavedTransactionAmount		= LocalUnitCost

						LocalFromCurrency	      	= PurchaseOrder.Currency
						LocalToCurrency	      		= Company.Currency
						if (CurrencyRelationshipRel.MultDiv.Divide)
							LocalUnitCost 			= (LocalUnitCost / CurrencyExchange.OutputCurrencyRate)
						else
							LocalUnitCost 			= (LocalUnitCost * CurrencyExchange.OutputCurrencyRate)

						
						if (LocalUnitAOC entered)
							initialize CurrencyExchange
							SavedFromCurrency 			= PurchaseOrder.Currency
							CurrencyExchange.ToCurrency	= Company.Currency
							LocalCurrencyTable            			= PurchaseOrder.CurrencyTable
							if (PurchaseOrder.CurrencyExchangeSetPoint.Receiving)
								SavedExchangeDate 		= PurchaseOrderReceipt.ReceivedDate
							else
								SavedExchangeDate 		= PurchaseOrder.PurchaseOrderDate
							
							SavedTransactionAmount		= LocalUnitAOC
							CurrencyExchange.EnteredCurrencyRate 	= PurchaseOrder.ReceiptCurrencyConversionRate
							LocalUnitAOC							= CurrencyExchange.OutputCurrencyAmount		

					else
						initialize CurrencyExchange
						SavedFromCurrency 			= PurchaseOrder.Currency
						CurrencyExchange.ToCurrency	= Company.Currency
						SavedExchangeDate 			= PurchaseOrderReceipt.ReceivedDate
						SavedTransactionAmount		= LocalUnitCost
						LocalCurrencyTable            			= PurchaseOrder.CurrencyTable




							
						LocalFromCurrency	      	= PurchaseOrder.Currency
						LocalToCurrency	      		= Company.Currency
						if (CurrencyRelationshipRel.MultDiv.Divide)
							LocalUnitCost 								= LocalUnitCost / CurrencyExchange.OutputCurrencyRate
						else
							LocalUnitCost 								= LocalUnitCost * CurrencyExchange.OutputCurrencyRate

						
						if (LocalUnitAOC entered)
							initialize CurrencyExchange
							SavedFromCurrency 						= PurchaseOrder.Currency
							CurrencyExchange.ToCurrency				= Company.Currency
							SavedExchangeDate 						= PurchaseOrderReceipt.ReceivedDate
							SavedTransactionAmount					= LocalUnitCost
							CurrencyExchange.EnteredCurrencyRate 	= PurchaseOrder.ReceiptCurrencyConversionRate
							LocalCurrencyTable            			= PurchaseOrder.CurrencyTable
							LocalUnitAOC 								= CurrencyExchange.OutputCurrencyAmount 
			
				initialize RoundedValue
				RoundedValue.RoundInput		= LocalUnitCost
				RoundedValue.RoundingType 	= RoundedValue.RoundingType.Normal
				RoundedValue.RoundTo		= 1/(10^Item.NumberOfDecimalsCost)
				LocalUnitCost				= RoundedValue.RoundResult	

				initialize RoundedValue
				RoundedValue.RoundInput		= LocalUnitAOC
				RoundedValue.RoundingType 	= RoundedValue.RoundingType.Normal
				RoundedValue.RoundTo		= 1/(10^Item.NumberOfDecimalsCost)
				LocalUnitAOC				= RoundedValue.RoundResult
				
			if (InspectionRequired)
				if (IsCatchWeightItem)
					LocalHoldQuantity				= EnteredReceivedQuantity
					LocalHoldCatchWeightQuantity	= CatchWeightQuantity
				else
					initialize UOMCalculation
					UOMCalculation.InputQuantity	= EnteredReceivedQuantity
					UOMCalculation.InputUOMConversion = ReceivedUOMMultiplier
					UOMCalculation.Method			= UOMCalculation.Method.ConvertToStock
					LocalHoldQuantity				= UOMCalculation.OutputQuantity
			else
				initialize LocalHoldQuantity	

		CreateDistribution



			if (!PurchaseOrderLine.CostOption.NoCharge
			or   PurchaseOrderLine.AllowZeroCostInvoice)	
				for each PurchaseOrderLine.PurchaseOrderLineDistribution set
					if (each.AddOnCharge not entered)
						invoke Create PurchaseOrderReceiptLineDistribution
							fill in fields from PurchaseOrderLine
							invoked.Company                     = PurchaseOrderLine.Company
							invoked.PurchaseOrderReceipt		= PurchaseOrderReceipt
							invoked.PurchaseOrderReceiptLine	= PurchaseOrderReceiptLine
							invoked.PostingType					= "I1"							
							invoked.DistributionAccount			= each.DistributionAccount							
							
							if (each.DistributionQuantity entered)
								if (InspectionRequired
								and VendorReturn entered
								and VendorReturnLine entered)
									invoked.DistributionQuantity 	= each.DistributionQuantity - VendorReturnLine.ReturnQuantity
									invoked.DistributionAmount		= ((each.DistributionQuantity - VendorReturnLine.ReturnQuantity) * OriginalUnitCost)
								else
									invoked.DistributionQuantity	= each.DistributionQuantity
									invoked.DistributionAmount		= each.DistributionQuantity * OriginalUnitCost
							else
								if (each.DistributionPercent entered)
									invoked.DistributionPercent		= each.DistributionPercent
									if (InspectionRequired
									and VendorReturn entered
									and VendorReturnLine entered)
										invoked.DistributionAmount	= ((each.DistributionPercent * (EnteredReceivedQuantity - VendorReturnLine.ReturnQuantity)) * OriginalUnitCost)
									else											
										invoked.DistributionAmount	= ((each.DistributionPercent * EnteredReceivedQuantity) * OriginalUnitCost)
								else
									if (InspectionRequired
									and VendorReturn entered
									and VendorReturnLine entered)
										invoked.DistributionAmount	= each.DistributionAmount - (VendorReturnLine.ReturnQuantity * OriginalUnitCost)
									else
										invoked.DistributionAmount	= each.DistributionAmount
					
		CalculateTolerances		
			if (not PurchaseOrder.Dropship)
				initialize LocalOverreceived
				initialize LocalIsSubstitute
				initialize LocalIsUnitCost
				initialize LocalBuyerMessage
				initialize LocalNoOvershipment
				
				if (BuyerMessageForProcessing)    
					constraint (DerivedEnteredReceivedQuantity >= BuyerMessageRel.ReturnQuantity)
						"LineReceivedQuantityCannotBeLessThanReturnedQuantity"
				

				LocalTotalReceivedQuantity 		= DerivedTotalReceivedQuantityInStockUOM
				LocalPOLineProcessStockQuantity = PurchaseOrderLine.QuantityToProcess * PurchaseOrderLine.EnteredBuyUOMMultiplier


				if (LocalTotalReceivedQuantity > LocalPOLineProcessStockQuantity)
					if (PurchaseOrderLineSourceByOrderEntryRel exists 
					and Company.CustomerOrderOvershipmentMessages)
						if (not IsBuyerOverreceiving)
							Counter1			+= 1 
							LocalArray.PurchaseOrderBuyerMessageComment[Counter1].Comment = QuantityExceed
						LocalOverreceived	= true
						LocalBuyerMessage	= true    
					else 
					if (not Company.DisableOvershipmentMessages
					and not PurchaseOrderReceiptLine.ShipToLocation.DisableOvershipmentMessages
					and not PurchaseOrderLine.OvershipmentToleranceOption.DisableOvershipmentMessage)
						LocalPercentOvershipped = ((LocalTotalReceivedQuantity - LocalPOLineProcessStockQuantity)/ LocalPOLineProcessStockQuantity)
						
						if (LocalPercentOvershipped > PurchaseOrderLine.OvershipmentTolerancePercentage
						or  LocalPOLineProcessStockQuantity not entered)
							if (not IsBuyerOverreceiving)
								Counter1    += 1 
								LocalArray.PurchaseOrderBuyerMessageComment[Counter1].Comment = Overshipment
							LocalOverreceived   = true
							LocalBuyerMessage   = true    	

				

				if (Company.SubstituteMessages
				and SubstituteReceiving)
					if (not BuyerMessageForProcessing)
						Counter1	+= 1 
						LocalArray.PurchaseOrderBuyerMessageComment[Counter1].Comment	=	SubstituteMessage
					LocalBuyerMessage    = true
					LocalIsSubstitute 	 = true
					

				if (PurchaseOrderLine.CostOption.VendorDetermined
				and PurchaseOrderLine.EnteredUnitCost not entered
				and PurchaseOrderLine.LastMatchUnitCost not entered
				and OriginalUnitCost not entered)
					if (not BuyerMessageForProcessing)
						Counter1	+= 1 
						LocalArray.PurchaseOrderBuyerMessageComment[Counter1].Comment	=	NoVendorUnitcost
					LocalBuyerMessage  	= true
					LocalIsUnitCost		= true
					


				if (LocalOverreceived
				or  LocalIsSubstitute
				or  LocalIsUnitCost)
					if (BuyerMessageForProcessing)
						invoke UpdateFromPOReceiptLine BuyerMessageRel
							invoked.PrmOverreceivingMessage  = LocalOverreceived
							invoked.PrmSubstituteItemMessage = LocalIsSubstitute
							invoked.PrmVendorUnitCostMessage = LocalIsUnitCost	
					else	
						increment Company.LastMessageSequence by 1
						invoke Create BuyerMessageRel	
							invoked.Company										= Company
							invoked.Buyer										= PurchaseOrderReceipt.Buyer
							invoked.BuyerMessageType							= "R"
							invoked.PurchaseOrder								= PurchaseOrder
							invoked.ShipToLocation								= ShipToLocation
							invoked.PurchaseOrderReceiptLine					= PurchaseOrderReceiptLine
							invoked.PurchaseOrderReceipt						= PurchaseOrderReceipt
							invoked.Vendor										= Vendor
							invoked.Invoice										= Invoice
							invoked.Suffix										= Suffix
							invoked.PurchaseOrderBuyerMessage.MessageDate		= current timestamp
							invoked.PurchaseOrderBuyerMessage.MessageSequence	= Company.LastMessageSequence
							invoked.Status										= 1
							invoked.OverreceivingMessage						= LocalOverreceived							
							initialize invoked.DocumentNumberNumeric			
							invoked.SubstituteItemMessage						= LocalIsSubstitute
							invoked.VendorUnitCostMessage						= LocalIsUnitCost
							invoked.PurchaseOrderBuyerMessageCommentArray		= LocalArray 

				else
					if (HasUnreleasedBuyerMessage)
						invoke Delete BuyerMessageRel
				
				if (LocalOverreceived)
					if(Company.PurchasingCompany.OvershipmentBudgetEdit)
						OvershipQuantity= LocalTotalReceivedQuantity - LocalPOLineProcessStockQuantity
						
						if(VendorBuyUOM = ReceivedUOM)
							OvershipmentCost= OriginalUnitCost*OvershipQuantity
						else
							OvershipmentCost= PurchaseOrderLine.VendorBuyUnitCost*OvershipQuantity
						for each PurchaseOrderLineDistributionRel
							if (!each.ContractCommitments)
								invoke EditCommitmentIncrease each
									invoked.FromReceiving 			= true
									invoked.ParmCommitmentIncrease 	= OvershipmentCost
				
				BuyerMessage = LocalBuyerMessage


				if (not LocalOverreceived
				and LocalTotalReceivedQuantity < LocalPOLineProcessStockQuantity
				and LocalCancelFromTemplate not entered)
					if (PurchaseOrderLine.UndershipmentToleranceOption.CancelAllBackorders)
						CancelBackorder = true
					else
					if (PurchaseOrderLine.UndershipmentTolerancePercentage entered)
						LocalPercentUndershipped = ((LocalPOLineProcessStockQuantity - LocalTotalReceivedQuantity)/ LocalPOLineProcessStockQuantity)
						if (LocalPercentUndershipped <= PurchaseOrderLine.UndershipmentTolerancePercentage)
							CancelBackorder = true
						else
							initialize CancelBackorder

					if ((CancelBackorder 	not = POReceiptLineTemplateByPurchaseOrderLineRel.CancelBackorder)
					or  (InspectionRequired not = POReceiptLineTemplateByPurchaseOrderLineRel.InspectionRequired))
						invoke UpdateFromReceiptLine POReceiptLineTemplateByPurchaseOrderLineRel
							invoked.PrmCancelBackorder				= CancelBackorder	
							invoked.PrmInspectionRequired			= InspectionRequired
							invoked.PrmCancelRemaining				= IsCancelRemaining


			
		PostTolerance
			invoke Create PurchaseOrderReceiptLineDistribution
				fill in fields from PurchaseOrderLine	
				invoked.Company                     = PurchaseOrder.Company
				invoked.PurchaseOrderReceipt		= PurchaseOrderReceipt
				invoked.PurchaseOrderReceiptLine	= PurchaseOrderReceiptLine
				invoked.PostingType					= "A"
				
				if (PurchaseOrderReceipt.ProcessLevel entered)
					invoked.DistributionAccount		= ProcessLevel.ToleranceOffsetAccount
					
				if (ProcessLevel.ToleranceOffsetAccount not entered)
					invoked.DistributionAccount		= MatchCompanyRel.ToleranceOffsetAccount

				invoked.DistributionQuantity		= (LocalPostQuantity * -1)
				invoked.DistributionAmount			= ((PurchaseOrderAndLineAddOnChargeRel.LandedUnitCost / VendorPriceUOMMultiplier) * (LocalPostQuantity * -1)) 

		PostMatchNotReceive
			invoke Create PurchaseOrderReceiptLineDistribution
				fill in fields from PurchaseOrderLine	
				invoked.Company                     = PurchaseOrder.Company
				invoked.PurchaseOrderReceipt		= PurchaseOrderReceipt
				invoked.PurchaseOrderReceiptLine	= PurchaseOrderReceiptLine
				invoked.PostingType					= "MN"
				
				if (PurchaseOrderReceipt.ProcessLevel entered)
					invoked.DistributionAccount		= ProcessLevel.MatchedNotReceivedAccount
					
				if (ProcessLevel.MatchedNotReceivedAccount not entered)
					invoked.DistributionAccount		= MatchCompanyRel.MatchedNotReceivedAccount													

				invoked.DistributionQuantity		= (LocalPostQuantity * -1)
				invoked.DistributionAmount			= ((PurchaseOrderAndLineAddOnChargeRel.LandedUnitCost / VendorPriceUOMMultiplier) * (LocalPostQuantity * -1)) 

		UpdateDistribution	
			if (not UpdateFromPurchaseOrder)
				for each ReceiptLineDistributionsRel
					invoke Update each
						invoked.DistributionQuantity	= EnteredReceivedQuantity
			else
				for each ReceiptLineDistributionsRel
					invoke Update each
						if (each.DistributionQuantity entered)
							invoked.DistributionAmount 	+= (each.DistributionByQuantity * UnitCostDifference)
						else
						if (each.DistributionPercent entered)
							invoked.DistributionAmount	+= ((each.DistributionPercent * EnteredReceivedQuantity) * UnitCostDifference)

    	ReleaseReceiptForPayment 
    		if (TaxCode entered)
    			if (EntityTaxCodeRel.LandedCost
    			and	PurchaseOrderLine.MatchedNotReceivedQuantity entered)
    				if (PurchaseOrderLine.EnteredBuyUOM != PurchaseOrderLine.VendorPriceUOM)
    					LocalMatchQuantity				= PurchaseOrderLine.MatchedQuantity * PurchaseOrderLine.EnteredBuyUOMMultiplier
    					LocalMatchedNotReceivedQuantity	= PurchaseOrderLine.MatchedNotReceivedQuantity * PurchaseOrderLine.EnteredBuyUOMMultiplier 
    				
    				LocalSkippedQuantity = LocalMatchQuantity - LocalMatchedNotReceivedQuantity
    				for each PayablesInvoiceDetailMatchRel
    					if ((not each.PayablesInvoice.MatchStatus.Unmatched
    					or	not each.PayablesInvoice.MatchStatus.POCostMessagesExist)
    					and not each.PayablesInvoice.TaxAdjustment.NoTax
    					and each.PayablesInvoice.TaxCode not entered)

							if (LocalSkippedQuantity not entered
							or	(LocalSkippedQuantity > 0
							and	LocalSkippedQuantity != each.MatchedQuantity))
								if (LocalSkippedQuantity <= each.MatchedQuantity)
									if (LocalRemainingQuantity entered)
										if (LocalRemainingQuantity <= each.MatchedQuantity)
											LocalMatchQuantityToApply = LocalRemainingQuantity
											include CalculateAmountQuantityByUnitCost
										else
											include CalculateAmountQuantityByMatched
											LocalRemainingQuantity	-= each.MatchedQuantity
									else
										if (VendorPriceUOMQuantity <= each.MatchedQuantity)
											LocalMatchQuantityToApply	 = VendorPriceUOMQuantity
											include CalculateAmountQuantityByUnitCost
										else
											include CalculateAmountQuantityByMatched
											LocalRemainingQuantity = VendorPriceUOMQuantity - each.MatchedQuantity
												 
								else
									LocalSkippedQuantity	-= each.MatchedQuantity
									LocalRemainingQuantity 	= VendorPriceUOMQuantity
							
							if (LocalSkippedQuantity = each.MatchedQuantity)
								initialize LocalSkippedQuantity		
										
					if (LocalInvoiceTotalAmount entered
					and LocalTotalInvoiceQuantity entered)
						LocalUnitCostToApply	= LocalInvoiceTotalAmount / LocalTotalInvoiceQuantity
				
		CalculateAmountQuantityByUnitCost	
			LocalInvoiceRunTotalAmount = LocalMatchQuantityToApply * OriginalUnitCost



			LocalTotalInvoiceQuantity	+= LocalMatchQuantityToApply
			LocalInvoiceTotalAmount		+= LocalInvoiceRunTotalAmount
			
		CalculateAmountQuantityByMatched	
			LocalInvoiceRunTotalAmount = each.MatchedQuantity * OriginalUnitCost



			LocalTotalInvoiceQuantity	+= each.MatchedQuantity
			LocalInvoiceTotalAmount		+= LocalInvoiceRunTotalAmount

		CreateInventoryTransactionLineDistribution
			invoke Create InventoryTransactionLineDistribution
				fill in fields from this instance					
				invoked.InventoryTransaction								= LocalInventoryTransaction
				invoked.InventoryTransactionLine							= NewInventoryTransactionLine.InventoryTransactionLine
				invoked.TransactionSystemCode								= NewInventoryTransactionLine.TransactionSystemCode
				invoked.System												= TransactionSystemCode.PurchaseOrder
				invoked.InventoryLocation									= ShipToLocation
				invoked.PostingType											= LocalPostingType
				if (NewInventoryTransaction.InventoryDocumentType.PurchaseOrderReceiptArchive)
					invoked.PostingDate										= current corporate date
				else
					invoked.PostingDate										= ReceivedDate	
				if (PurchaseOrder.CurrencyExchangeSetPoint.Receiving)
					invoked.TransactionDate  								= ReceivedDate
				else
					invoked.TransactionDate  								= PurchaseOrder.PurchaseOrderDate
				invoked.GLFinanceCodeBlock									= LocalDistributionAccount
				invoked.GLTransactionAmount									= LocalDistributionAmount
				invoked.CurrencyCode										= PurchaseOrder.Currency
				invoked.AddOnCharge 										= LocalAddOnCharge
				invoked.GeneralLedgerEvent									= TransactionSystemCode.PurchaseOrder
				invoked.DocumentNumber										= LocalInventoryTransaction
				initialize invoked.Status
				invoked.BypassUnitAndAmountEdit 							= BypassUnitAndAmountEdit
				invoked.BypassActiveCodeBlockEdit                           = true
				if (not LocalDistributionAccount.GeneralLedgerChartAccount.AllowUnits.No)
					invoked.UnitsAmount										= LocalDistributionQuantity

		ConvertQuantityToPurchaseOrderUOM
		
			if (HasItemMaster 
			and (ReceivedUOM not = PurchaseOrderLine.EnteredBuyUOM
			or   ReceivedUOM not = LineSourcesForPrintingRel.EnteredUOM))
				initialize UOMCalculation
				UOMCalculation.InputQuantity			= RemainingReceivedQuantity
				UOMCalculation.InputUOM					= ReceivedUOM
				if (LineSourcesForPrintingRel exists)
					UOMCalculation.InputToUOM			= LineSourcesForPrintingRel.EnteredUOM
				else
					UOMCalculation.InputToUOM			= PurchaseOrderLine.EnteredBuyUOM
				UOMCalculation.Method					= UOMCalculation.Method.ConvertToAlternate
				RemainingReceivedQuantity 				= UOMCalculation.OutputQuantity	

		CalculateBackorderedQuantityFromDerived

			if (ReceivedUOM not = each.EnteredUOM)
				initialize UOMCalculation
				UOMCalculation.InputQuantity			= DerivedQuantityToReceiptUOM
				UOMCalculation.InputUOM					= ReceivedUOM
				UOMCalculation.InputToUOM				= each.EnteredUOM
				UOMCalculation.Method					= UOMCalculation.Method.ConvertToAlternate
				UOMCalculation.InputDecimal				= Item.NumberOfDecimalsQuantity
				LocalBackorderedQuantity		 		= UOMCalculation.OutputQuantity	
			else
				LocalBackorderedQuantity = DerivedQuantityToReceiptUOM





    	ReleaseActionRules
    		include SetDefaults
			
			if (PurchaseOrderLine.MatchedQuantity >= PurchaseOrderLine.ReceivedQuantity)
				MatchedQuantity = PurchaseOrderLine.MatchedNotReceivedQuantity	
				CatchWeightMatchedQuantity = PurchaseOrderLine.CatchWeightMatchedNotReceivedQuantity	
				if (MatchedQuantity > BuyUOMQuantity)
					MatchedQuantity = BuyUOMQuantity
					CatchWeightMatchedQuantity = CatchWeightQuantity
					
			IntrastatNumber = PrmIntrastatNumber





			OriginalReceivedQuantity	= EnteredReceivedQuantity
			OriginalCatchWeightQuantity	= CatchWeightQuantity
			MatchUnitCost				= OriginalUnitCost
			UpdateDate					= current timestamp
			if (PurchaseOrderLine.MatchedNotReceivedQuantity > 0)
				if (PurchaseOrderLine.MatchedNotReceivedQuantity > BuyUOMQuantity)
					if (IsCatchWeightItem)
						MatchedQuantity 					= EnteredReceivedQuantity
						CatchWeightMatchedQuantity 			= CatchWeightQuantity
					else
						MatchedQuantity 					= VendorPriceUOMQuantity
				else
					if (IsCatchWeightItem)
						MatchedQuantity 					 = PurchaseOrderLine.MatchedNotReceivedQuantity
						CatchWeightMatchedQuantity 			 = PurchaseOrderLine.MatchedNotReceivedQuantityInStockUOM
					else
					if (PurchaseOrderLine.EnteredBuyUOM = VendorPriceUOM)
						MatchedQuantity 					 = PurchaseOrderLine.MatchedNotReceivedQuantity
					else
						UOMCalculation.InputUOM              = PurchaseOrderLine.EnteredBuyUOM
		                UOMCalculation.InputUOMConversion    = PurchaseOrderLine.EnteredBuyUOMMultiplier
		                UOMCalculation.InputToUOM            = VendorPriceUOM
		                UOMCalculation.InputToUOMConversion  = VendorPriceUOMMultiplier
		                UOMCalculation.InputQuantity         = PurchaseOrderLine.MatchedNotReceivedQuantity
		                UOMCalculation.Method                = UOMCalculation.Method.ConvertToAlternate
		                MatchedQuantity						 = UOMCalculation.OutputQuantity
					
				if (IsCatchWeightItem)
					OpenToMatchQuantity 			= (OpenToMatchQuantity - CatchWeightMatchedQuantity) 
					CatchWeightOpenToMatchQuantity 	= (CatchWeightOpenToMatchQuantity - MatchedQuantity) 
				else
					OpenToMatchQuantity = (OpenToMatchQuantity - MatchedQuantity)
			
			if (OpenPurchaseOrderLineSourcesRel exist)
				initialize FullyDelivered

			if (not LocalFinalRelease) 
				for each PurchaseOrderLine.AddOnChargesForReceivingRel
					LocalInterfacedAddOnCharge = each.AddOnCharge
					if (InterfacedReceiptLineAddOnChargeRel not exists)
						invoke CreatefromPorecepd PurchaseOrderReceiptLineAOC
							fill in fields from each
								except invoked.TaxCode
								except invoked.ExtendedTaxableAmount
								except invoked.AddOnChargeAmountPOCurrency
							invoked.Company						= Company
							invoked.PurchaseOrder				= PurchaseOrder
							invoked.PurchaseOrderReceipt		= PurchaseOrderReceipt
							invoked.PurchaseOrderReceiptLine	= PurchaseOrderReceiptLine
							invoked.AddOnChargeOrigin			= AddOnChargeOrigin.PurchaseOrder
							invoked.AddOnCharge					= each.AddOnCharge
							invoked.OriginalUnitCost			= each.EnteredUnitCost
							invoked.TotalAddOnChargeAmount		= each.EnteredUnitCost * DerivedReceivedQuantityInPOUOM
							invoked.TaxCode						= each.TaxCode
							invoked.TaxableUnitCost				= each.ExtendedTaxableAmount
							invoked.ReceivedQuantity			= EnteredReceivedQuantity
			
				invoke GlobalFastUpdate PurchaseOrderReceipt
					invoked.ReceiptAmount   	+= EnteredReceivedQuantity * DerivedCostInReceivedUOMFullPrecision
					invoked.HashQuantity    	+= VendorPriceUOMQuantity
					invoked.MatchedAmount		+= MatchedQuantity * MatchUnitCost
					invoked.HashQuantityMatched += MatchedQuantity
						
			if  (IsForReleaseCompletion 
			and (EnteredReceivedQuantity > 0 or IsCancelRemaining or SubstituteReceiving))
				if (IsInventoried)
					LocalTransactionSystemCode = TransactionSystemCode.PurchaseOrder
					invoke Unreleased.Create InventoryTransactionLineRel
						assign result to NewInventoryTransactionLine
						invoked.OriginatingTransaction 					= reference to this instance
						invoked.TransientDetailTransfer					= true
						invoked.Company									= Company
						invoked.InventoryLocation						= ShipToLocation
						invoked.InventoryTransaction					= LocalInventoryTransaction
						invoked.TransactionSystemCode					= LocalTransactionSystemCode//"PO"
						invoked.InventoryTransactionLine.LineNumber		= PurchaseOrderReceiptLine
						invoked.UpdateDate								= current timestamp
						invoked.GeneralLedgerDate						= ReceivedDate	
						invoked.Item									= Item
						invoked.Reference								= ReferenceNumber
						if (Bin entered)
							invoked.Bin									= Bin
						else
							invoked.MultipleBins						= MultipleBins

						invoked.OperatorID								= PurchaseOrderReceipt.OperatorID
						invoked.OffsetAccount							= MatchCompanyRel.ReceiptAccrualAccount	
						invoked.AddOnChargeUnitCost						= DerivedLineAOCUnitCostInReceivedUOM 
						invoked.FromCurrency							= PurchaseOrder.Currency
						invoked.ToCurrency								= Company.Currency
						if (CatchWeightQuantity entered)
							invoked.SecondaryUOM						= ReceivedUOM
							invoked.SecondaryUOMMultiplier				= ReceivedUOMMultiplier
							invoked.SecondaryQuantity					= EnteredReceivedQuantity
							invoked.Quantity							= CatchWeightQuantity
							invoked.TransactionUOM						= Item.StockUOM
							invoked.TransactionUOMMultiplier			= 1
							if (TaxEntityUsesSabrix)
								invoked.UnitCost						= OneSourceDerivedOriginalCostWithTaxAndAOC	
							else 
								invoked.UnitCost						= DerivedOriginalCostWithTaxAndAOC	
						else
							invoked.Quantity							= EnteredReceivedQuantity	
							invoked.TransactionUOM						= ReceivedUOM 
							invoked.TransactionUOMMultiplier			= ReceivedUOMMultiplier
							invoked.UnitCost							= DerivedReceivedUOMUnitCostInBaseCurrency 

						include CheckStockItems
						invoked.UnitCostInTransactionCurrency 			= DerivedUnitCostInTransactionCurrencyInReceivedUOM
						invoked.TransMatchedQuantity 					= MatchedQuantity
						invoked.TransReceivedQuantity 					= EnteredReceivedQuantity
						invoked.TransOpenMatchQuantity 					= OpenToMatchQuantity
						invoked.BypassActiveCodeBlockEdit 				= true
						invoked.EAMWorkOrder							= PurchaseOrderLine.EAMWorkOrder
						invoked.EAMWorkOrderActivity					= PurchaseOrderLine.EAMWorkOrderActivity
						LocalInventoryTransactionLine 					= NewInventoryTransactionLine.InventoryTransactionLine

				if (HasItemMaster and ReceivedDate != PurchaseOrder.PurchaseOrderDate)	
					invoke UpdateLeadTimeFromPOReceiptLine ItemMasterLocationRel 
						invoked.PrmLastLeadtime 	= ReceivedDate - PurchaseOrder.PurchaseOrderDate
					invoke UpdateLastLeadtimeFromPOReceiptLine VendorItem
						invoked.PrmLastLeadtime 	= ReceivedDate - PurchaseOrder.PurchaseOrderDate
			
			if (LocalTwoStepReleaseType.TwoStepReceivingFirstRelease
			and IsInventoried) 
				Status = Status.ReleasedPendingTwoStepReceiving
			else 
				if (not Status.ReleasedInspected) //For Receipt Lines already Inspected (Status of "Released / Inspected")
					if (InspectionRequired)
						Status = Status.ReleasedRequiresInspection
					else
						Status = Status.ReleasedInspected

				if (ItemLocationRel.PatientChargeable
				and ShipToLocation.PrintLabels.PrintAtReceivingTime)
					invoke Create ItemLocationLabel
						invoked.Company						= Company
						invoked.InventoryLocation			= ShipToLocation
						invoked.ItemLocationLabel.LabelType = 1	
						invoked.ItemLocationLabel.Item		= Item
						invoked.ManufacturerNumber			= ManufacturerNumber
						invoked.NumberOfLabels				= EnteredReceivedQuantity
						invoked.ChargeNumber				= ItemLocationRel.PatientChargeNumber

			if (PurchaseOrderLine.Manufacturer.ManufacturerCode entered
			and PurchaseOrderLineSourceForPORQRel exists)
					if (ManufacturerIDManufacturerRel exists)
						if (ShipToFacilityDetailWithCompanyOnlyRel exists)
							LocalShipToFacility = first ShipToFacilityDetailWithCompanyOnlyRel.ShipToFacility
						else
							LocalShipToFacility = first ShipToFacilityDetailRel.ShipToFacility
						
						if (ManufacturerIDShipToFacilityRel exists
						and ManufacturerIDDistributionCenterRel exists)
							ShipToFacility = ManufacturerIDShipToFacilityRel.ShipToFacility
							ManufacturerID = ManufacturerIDShipToFacilityRel.ManufacturerID


	





    	ReleaseExitRules	
			if (PrmCreateIntrastatDetail
			and not LocalFinalRelease) 
				initialize IntrastatProcessing
				IntrastatProcessing.InFinanceEnterpriseGroup		= GeneralLedgerCompanyRel.FinanceEnterpriseGroup
				IntrastatProcessing.TaxEntity						= Company.AccountingEntity
				IntrastatProcessing.DestinationCountry				= PrmDestinationCountry
				IntrastatProcessing.DestinationRegion				= PrmDestinationRegion
				IntrastatProcessing.OriginCountry					= PrmOriginCountry
				IntrastatProcessing.OriginRegion					= PrmOriginRegion
				LocalCheckCountries									= IntrastatProcessing.CheckCountries

				if (IntrastatProcessing.OutputErrorNumber entered)
					constraint (IntrastatProcessing.OutputErrorMessage not entered)
						"<IntrastatProcessing.OutputErrorMessage>"
				
				IntrastatProcessing.DetailFc						= IntrastatProcessing.DetailFc.Create



				IntrastatProcessing.IntrastatNumber					= IntrastatNumber

				IntrastatProcessing.ICNCode				  			= PurchaseOrderLine.ICNCode
				IntrastatProcessing.StockWeight						= (PurchaseOrderLine.StockWeight / PurchaseOrderLine.Quantity * BuyUOMQuantity)
				IntrastatProcessing.ReceivedAmount					= (ExtendedAmount + ((PurchaseOrderLine.DerivedTaxAmount / PurchaseOrderLine.Quantity) * EnteredReceivedQuantity))

				IntrastatProcessing.SupplementaryUOM				= PurchaseOrderLine.ICNCode.SupplementaryUOM
				IntrastatProcessing.SupplementaryQuantity 			= (PurchaseOrderLine.SupplementaryQuantity * BuyUOMQuantity / PurchaseOrderLine.Quantity)			
				IntrastatProcessing.InvoiceDate						= PurchaseOrderReceipt.ReceivedDate
				IntrastatProcessing.LineNumber						= PurchaseOrderReceiptLine
				LocalTrigger 										= IntrastatProcessing.MainTrigger





			if (IsInventoried
			and PurchaseOrderTransactionDetailsRel exist
			and IsForReleaseCompletion) 
				if (not NewInventoryTransactionLine.IsBinTrackedItemWithSingleBin)
					for each PurchaseOrderTransactionDetailsRel						
						invoke Unreleased.Create InventoryTransactionLineDetail
							invoked.Company										= Company 
							invoked.InventoryLocation							= ShipToLocation
							invoked.TransactionSystemCode						= LocalTransactionSystemCode
							invoked.InventoryTransaction						= LocalInventoryTransaction
							invoked.InventoryTransactionLine.WarehouseShipment	= NewInventoryTransactionLine.InventoryTransactionLine.WarehouseShipment
							invoked.InventoryTransactionLine.LineNumber			= NewInventoryTransactionLine.InventoryTransactionLine.LineNumber
							invoked.InventoryTransactionLine.ComponentSequence	= NewInventoryTransactionLine.InventoryTransactionLine.ComponentSequence
							invoked.Item										= each.Item
							invoked.UnitOfMeasure								= NewInventoryTransactionLine.TransactionUOM
							invoked.Serial										= each.Serial
							invoked.Lot											= each.Lot
							invoked.Sublot										= each.Sublot
							invoked.LotOnHold									= each.LotOnHold
							if (each.ShelfLife not entered)
								invoked.LotExpirationDate						= each.LotExpirationDate
							invoked.Bin											= each.Bin
							invoked.Quantity									= each.Quantity
							invoked.SecondaryQuantity							= each.SecondaryQuantity
							invoked.ManufacturingDate							= each.ManufacturingDate
							invoked.ShelfLife									= each.ShelfLife
							invoked.ExpirationDateSource						= each.ExpirationDateSource

			invoke UpdateFromReceiptLine PurchaseOrderLine
				invoked.PrmPurchaseOrderReceipt 	= PurchaseOrderReceipt
				invoked.PrmPurchaseOrderReceiptLine = PurchaseOrderReceiptLine
				invoked.PrmReceivedQuantity			= EnteredReceivedQuantity
				invoked.PrmReceivedUOM				= ReceivedUOM
				invoked.PrmReceivedUOMMultiplier    = ReceivedUOMMultiplier
				invoked.PrmIsSubstitute				= SubstituteReceiving
				invoked.PrmIsCancelRemaining		= IsCancelRemaining
				invoked.PrmIsCancelBackorder		= CancelBackorder
				invoked.PrmMatchedNotReceivedQty	= MatchedQuantity  	
				invoked.PrmCatchWeightMatchedNotReceivedQty	= CatchWeightMatchedQuantity 
				invoked.PrmCatchWeightQuantity      = CatchWeightQuantity
				invoked.PrmReceivingActivityDate	= ReceivedDate
				if (CostUpdateYes)
					invoked.PrmReceiptUnitCost		= OriginalUnitCost
				invoked.PrmReleaseType				= LocalTwoStepReleaseType 

			if (OriginalUnitCost > 0
			or  PurchaseOrderLine.LandedUnitCost > 0)
				LocalDistributionAmountWithAOC = true

				for each PurchaseOrderAndLineAddOnChargeRel
					if (each.Closed.Yes
					or  each.Canceled)
						LocalLineIsClosed = true
					else
						LocalSkipQuantity = each.MatchedQuantity + each.ReceivedQuantityToMatch
						
						for each PayablesInvoiceAddOnChargeRel
							LocalComputedPostQuantity = each.MatchedQuantity - LocalSkipQuantity
							if (LocalComputedPostQuantity > 0
							and each.Status != 0)
								if (each.AocAlpha  	= "R"
								and each.AocNum		= 1)
									if (PurchaseOrderReceiptLineAOCQuantity > LocalComputedPostQuantity)
										initialize LocalSkipQuantity
										LocalPostQuantity = LocalComputedPostQuantity
									else
										LocalPostQuantity = PurchaseOrderReceiptLineAOCQuantity
										LocalSkipQuantity -= LocalPostQuantity 
									include PostTolerance
								else
									if (LocalSkipQuantity > LocalPostQuantity)
										initialize LocalSkipQuantity
										LocalPostQuantity = LocalComputedPostQuantity
										include PostMatchNotReceive
									else
										LocalPostQuantity = PurchaseOrderReceiptLineAOCQuantity
										LocalSkipQuantity -= LocalPostQuantity 
										include PostTolerance
								
								LocalPOLineOnChargeRemainingQuantity -= LocalPostQuantity
							else
								initialize LocalSkipQuantity














			if (IsForReleaseCompletion) 
				if (IsInventoried)

					LocalPostingType						= InventoryTransactionLineDistribution.PostingType.Inventory
					LocalMatchedQuantityInStock				= MatchedQuantity * PurchaseOrderLine.EnteredBuyUOMMultiplier 
					
					if (IsCatchWeightItemAndHasItemMaster)
						LocalDistributionQuantity			= CatchWeightQuantity
						LocalReturnQuantityInStock			= VendorReturnLine.CatchWeightQuantity
						LocalBuyQuantityInStock				= CatchWeightQuantity
					else
						LocalDistributionQuantity			= DerivedReceivedQuantityInStockUOM
						LocalReturnQuantityInStock			= VendorReturnLine.ReturnQuantity * VendorReturnLine.EnteredUOMMultiplier
						LocalBuyQuantityInStock				= DerivedReceivedQuantityInStockUOM
						
					if (InspectionRequired)
						LocalDistributionAccount			= ShipToLocation.InspectionHoldAccount
						if (VendorReturn entered
						and VendorReturnLine entered)
							LocalDistributionAmount			= ((LocalDistributionQuantity - LocalReturnQuantityInStock) * DerivedLineStockUnitCost)
						else
							LocalDistributionAmount			= LocalDistributionQuantity * DerivedLineStockUnitCost
					else
						LocalDistributionAccount			= ItemLocationRel.GeneralLedgerCategory.InventoryAccount
						if (InventoryCompanyRel.CostingMethod.StandardCosting
						and PurchaseOrderLine.DerivedLandedUnitCostInStockUOM != DerivedStandardCostInPOCurrency)
							LocalDistributionAmount			= LocalDistributionQuantity * DerivedStandardCostInPOCurrency
							LocalCreateVariance 			= true
						else
							LocalDistributionAmount			= LocalDistributionQuantity * DerivedLineStockUnitCost
					include CreateInventoryTransactionLineDistribution
					

					if (LocalCreateVariance)
						LocalPostingType 			= InventoryTransactionLineDistribution.PostingType.Offset
						LocalDistributionAccount 	= ItemLocationRel.GeneralLedgerCategory.CostVarianceAccount
						LocalDistributionAmount		= LocalDistributionQuantity * (DerivedLineStockUnitCost - DerivedStandardCostInPOCurrency)
						include CreateInventoryTransactionLineDistribution
		
					if (MatchedQuantity entered)	
						LocalPostingType 					= InventoryTransactionLineDistribution.PostingType.Offset
						LocalDistributionQuantity			= (DerivedMatchedQuantityInVendorPriceUOM * -1)

						if (ProcessLevel.MatchedNotReceivedAccount entered)
							LocalDistributionAccount		= ProcessLevel.MatchedNotReceivedAccount
						else
							LocalDistributionAccount		= MatchCompanyRel.MatchedNotReceivedAccount	
						
						LocalDistributionAmount = DerivedLineStockUnitCost * LocalDistributionQuantity
						include CreateInventoryTransactionLineDistribution	
					

					if (IsCatchWeightItem)
						LocalDistributionQuantity				= ((LocalBuyQuantityInStock - DerivedMatchedQuantityInVendorPriceUOM) * -1)
					else
						LocalDistributionQuantity				= ((LocalBuyQuantityInStock - LocalMatchedQuantityInStock) * -1) 
					if (LocalDistributionQuantity entered)
						LocalPostingType = InventoryTransactionLineDistribution.PostingType.Offset
						if (PurchaseOrder.VendorReturn entered 
						and PurchaseOrderLine.CostOption.NoCharge)
							LocalDistributionAccount		= ShipToLocation.VendorReturnSuspenseAccount
						else
						if (ProcessLevel.ReceiptAccrualAccount entered)
							LocalDistributionAccount		= ProcessLevel.ReceiptAccrualAccount
						else
							LocalDistributionAccount		= MatchCompanyRel.ReceiptAccrualAccount
						LocalDistributionAmount 			= ((DerivedLineStockUnitCost - LocalTotalLineAOCLandedCost) * LocalDistributionQuantity)
						include CreateInventoryTransactionLineDistribution
						
						if (IsCatchWeightItemAndHasItemMaster)
							LocalDistributionQuantity			= CatchWeightQuantity
						else
							LocalDistributionQuantity			= DerivedReceivedQuantityInStockUOM
						
						for each LandedReceiptLineAddOnChargesRel
							LocalDistributionAmount 		= (((each.LandedUnitCost / VendorPriceUOMMultiplier) * LocalDistributionQuantity) * -1)
							LocalAddOnCharge 				= each.AddOnCharge
							include CreateInventoryTransactionLineDistribution
					
					invoke Release NewInventoryTransactionLine.InventoryTransactionLine
						invoked.PrmSkipDistributions						= true
						if (InspectionRequired)
							invoked.PrmInspectionHoldQuantity				= LocalHoldQuantity 
							invoked.PrmInspectionHoldCatchWeightQuantity	= LocalHoldCatchWeightQuantity

				for each PurchaseOrderReceiptLineDistribution set
					invoke Release each

				include ReceivingAllocation
			
				if (InventoriedOrNonstockRequiresMSDS)
					invoke FastUpdate ItemLocationRel
						invoked.MSDSDate     = ReceivedDate + 1 year
						if (MSDSDocument entered)
							invoked.MSDSDocument = MSDSDocument
						if (MSDSVersion entered) 
							invoked.MSDSVersion  = MSDSVersion
								
				if (Status.ReleasedRequiresInspection 
				and InspectionRequired)
					invoke TriggerInspectionRequired
				
					
















			
				if (PurchaseOrderLine.RequisitionInterfaceInformation entered
				and not PurchaseOrderLine.RequisitionInterfaceInformation.SurgerySystemSource.INTER
				and Status.ReleasedInspected)
					invoke Create RQSourceDeliveryFeedback 
						invoked.Company								= Company
						invoked.InventoryLocation					= ShipToLocation
						invoked.DocumentNumber						= PurchaseOrderReceipt			
						invoked.DocumentLineNumber					= PurchaseOrderReceiptLine
						invoked.RequisitionInterfaceInformation		= PurchaseOrderLine.RequisitionInterfaceInformation
						invoked.Item								= Item
						invoked.Description							= Description					
						invoked.Quantity							= EnteredReceivedQuantity
						invoked.TransactionUOM						= ReceivedUOM
						invoked.TransactionType						= RQSourceDeliveryFeedback.TransactionType.Receipt


    	UpdateActionRules
        	if (EnteredReceivedQuantity entered)
        		constraint(EnteredReceivedQuantity >= 0)
        			"CannotEnterNegativeQuantity"
        	
    			if (Company.PackageTrackingLevel.LineLevel and PurchaseOrderReceiptTrackingRel not exists
				and TransientNumberOfLabels changed
    			and TransientNumberOfLabels entered)
					constraint (TransientTrackingNumber entered)
						"TrackingNumberNotFound"
        		
        	if  (EnteredReceivedQuantity not entered
        	and (Company.DisableOvershipmentMessages
        	or	 ShipToLocation.DisableOvershipmentMessages)
        	and  BuyerMessage
        	and  PurchaseOrderLine = PurchaseOrderReceiptLine)
        		if (BuyerMessageRel exist)
        			initialize BuyerMessage
        				
        	include SetDefaults



    	UpdateExitRules
        	if (EnteredReceivedQuantity changed
        	or	ReceivedUOM changed)
        		include CalculateTolerances 
        			
        	include EditReceiptLine
        	if (EnteredReceivedQuantity changed and OriginalUnitCost > 0)
        		if (ReceiptLineDistributionsRel exist)
					include UpdateDistribution
        		else
        			include CreateDistribution
        			
        	if (PurchaseOrderLineAssetRel exists
        	and EnteredReceivedQuantity changed)
        		increment PurchaseOrderLineAssetRel.ReceivedQuantity by (EnteredReceivedQuantity - old EnteredReceivedQuantity)    
        		
        	invoke UpdateFromReceiptLine POReceiptLineTemplateByPurchaseOrderLineRel	
        		if (not SubstituteReceiving)	
        			invoked.PrmReceivedUOM					= ReceivedUOM
					invoked.PrmShipToLocation				= ShipToLocation
					invoked.PrmBin							= Bin		
					invoked.PrmInspectionRequired			= InspectionRequired
					invoked.PrmCancelBackorder				= CancelBackorder
					invoked.PrmCancelRemaining				= IsCancelRemaining
				if (EnteredReceivedQuantity not entered
				and not SubstituteReceiving
				and OtherReceivingLineExists)
					invoked.PrmDeleteReceiptLine			= true 
				
			if (IsCancelRemaining changed and CanCancelRemaining)
				invoke CancelRemaining


			if (EnteredReceivedQuantity not entered 
			and POReceiptLineTemplateByPurchaseOrderLineRel exists)
				invoke DeleteForZeroQuantity

		ReceivingAllocation
			if  (IsInventoried
			and (ShipToLocation.ReceivingAllocation.POLineSourceAllocation 
			or 	 ShipToLocation.ReceivingAllocation.POLineSourceStandardAllocation) 
			and  Status.ReleasedInspected)
				initialize LocalReceivedQuantityForAllocationInStockUOM
				initialize LocalRemainingToProcess
				initialize LocalAllocateQuantity
				
				LocalReceivedQuantityForAllocationInStockUOM 			 = DerivedReceivedQuantityInStockUOM

				for each LineSourcesByPriorityRel
					LocalDemandDocument		= each.PurchaseOrderLineSource.SourceDocumentNumeric
					LocalDemandLineNumber 	= each.PurchaseOrderLineSource.SourceDocumentLineNumber
					
					if (LocalReceivedQuantityForAllocationInStockUOM > 0
					and SourceDemandLineRel.BackorderedQuantity > 0)
						if (LocalReceivedQuantityForAllocationInStockUOM > SourceDemandLineRel.BackorderedQuantity)
							LocalAllocateQuantity						 = SourceDemandLineRel.BackorderedQuantity
						else
							LocalAllocateQuantity						 = LocalReceivedQuantityForAllocationInStockUOM
					
						invoke UpdateFromAllocation SourceDemandLineRel
							invoked.TransAllocatedQuantity				 = SourceDemandLineRel.DerivedNotYetPrintedQuantity + LocalAllocateQuantity
						
						invoke UpdatePurchaseorderLineSource each
							invoked.PrmProcessedQuantity 				 = LocalAllocateQuantity 
						
						LocalReceivedQuantityForAllocationInStockUOM 	-= LocalAllocateQuantity
					
						if (LocalReceivedQuantityForAllocationInStockUOM = 0)
							end for each
						
				if (ShipToLocation.ReceivingAllocation.POLineSourceStandardAllocation
				and LocalReceivedQuantityForAllocationInStockUOM > 0)
					for each DemandLinesWithBackorderRel
						if (LocalReceivedQuantityForAllocationInStockUOM > 0)
							if (LocalReceivedQuantityForAllocationInStockUOM > each.BackorderedQuantity)
								LocalAllocateQuantity 					  = each.BackorderedQuantity
							else
								LocalAllocateQuantity					  = LocalReceivedQuantityForAllocationInStockUOM
							
							invoke UpdateFromAllocation each
								invoked.TransAllocatedQuantity			  = each.DerivedNotYetPrintedQuantity + LocalAllocateQuantity
								
							LocalReceivedQuantityForAllocationInStockUOM -= LocalAllocateQuantity
							
							if (LocalReceivedQuantityForAllocationInStockUOM = 0)
								end for each


		CreateMobileSupplyChainPOReceiptTrackingNumberHeader										
			if (MobileSupplyChainPOReceiptTrackingNumberHeaderRel exists)
				LocalTrackingNumber = MobileSupplyChainPOReceiptTrackingNumberHeaderRel.TrackingNumber
			else
				invoke GenerateTrackingNumber MobileSupplyChainConfigurationRel
				LocalTrackingNumber = MobileSupplyChainConfigurationRel.DerivedTrackingNumber
												
				invoke Create MobileSupplyChainPOReceiptTrackingNumberHeader
					invoked.Company																		= Company
					invoked.PurchaseOrderReceipt														= PurchaseOrderReceipt
					invoked.MobileSupplyChainPOReceiptTrackingNumberHeader.ShipToLocation     			= ShipToLocation
					invoked.MobileSupplyChainPOReceiptTrackingNumberHeader.RequestingLocation 			= LocalMSCMRequestingLocation
					invoked.MobileSupplyChainPOReceiptTrackingNumberHeader.DeliverTo					= LocalDeliverTo
					invoked.TrackingNumber       														= LocalTrackingNumber						

	Create Exit Rules
		if (!CreateFromInterface)
			if (UpdateTemplateLine = true)
				invoke UpdateForReceiptLineTemplate   
				
    Actions
		PopulateMissingUOM is a Set Action
			Parameters
				PrmCompany 		is a PurchasingCompany
			Instance Selection
				where ((PrmCompany not entered
				or      PrmCompany = Company)
				and		MissingUOM)
			Action Rules	
				Instance Rules
					default VendorPriceUOM to PurchaseOrderLine.VendorPriceUOM
					default VendorPriceUOM to VendorItem.VendorPriceUOM
					default VendorBuyUOM to PurchaseOrderLine.EnteredBuyUOM
					default VendorBuyUOM to ReceivedUOM
		
		PopulateBlankItem is a Set Action
			restricted
    		Parameters
    			PrmCompany		is a PurchasingCompany
    		Instance Selection
    			where (Company = PrmCompany
    			and	   ItemType.Special
    			and	   Item not entered)
    		Action Rules
    			Instance Rules
					if (VendorItem entered)
						Item = VendorItem
					else
						Item = Description
    					
		UpdateBinAndMultipleBins is an Instance Action
			restricted
			Action Rules
				initialize LocalSavedBin
				LocalSavedBin = first PurchaseOrderTransactionDetailsWithBinRel.Bin
				if (PurchaseOrderTransactionDetailsWithDifferentBin exists)
					MultipleBins = true
					initialize Bin
				else
					Bin = LocalSavedBin
					initialize MultipleBins
			

    	TriggerInspectionRequired is an Instance Action
			restricted
			Parameters
				PrmReceiverNumber is Numeric size 6
			Action Rules
				trigger "InspectionReqService" PA service
					resume on error
					title is "PO:<PurchaseOrder>ITEM:<Item>"
					Criteria
						GeneralLedgerCompanyRel.FinanceEnterpriseGroup
						Company
					Variables
						Company
							variable name is Company	
						PurchaseOrderReceipt
							variable name is PurchaseOrderReceipt
						PurchaseOrder
							variable name is PurchaseOrder
						PurchaseOrder.PORelease
							variable name is PORelease
						PurchaseOrder.POCode
							variable name is POCode
						ShipToLocation
							variable name is Location
						PurchaseOrderReceiptLine
							variable name is PurchaseOrderReceiptLine
						Item
							variable name is Item
						Description
							variable name is Description
						OriginalReceivedQuantity
							variable name is OriginalReceivedQuantity
						EnteredReceivedQuantity
							variable name is EnteredReceivedQuantity
						PurchaseOrderReceipt.Buyer.EmailAddress
							variable name is BuyerEmailAddress	

				invoke InspectionReqAlert
		Create is a Create Action
        	restricted
        	valid when (CanCreateReceiptLine)
        	Entrance Rules
        		if (EnteredReceivedQuantity entered)
        			constraint(EnteredReceivedQuantity >= 0)
        				"CannotEnterNegativeQuantity"
        		constraint (OtherUnreleasedReceiptLinesRel not exists) 
        			"UnreleasedReceiptExistsForPO<PurchaseOrder>AndPOLine<PurchaseOrderLine>"
        		include SetDefaults
     
        	
		    Action Rules
				LocalCanReceive = false
			
		    Exit Rules
		    
        		if (PurchaseOrderLineAssetRel exists)
        			increment PurchaseOrderLineAssetRel.ReceivedQuantity by EnteredReceivedQuantity
        		
 				for each POReceiptLineCommentsRel
 					if (each.CommentType != "4")
	 					invoke SystemCreate PurchaseOrderReceiptLineComment
	 						fill in fields from each
								except invoked.Attachment.FSMAttachmentIDM
	 						invoked.PurchaseOrderReceipt		= PurchaseOrderReceipt
	 						invoked.PurchaseOrderReceiptLine	= PurchaseOrderReceiptLine
							invoked.Attachment.File				= each.Attachment.File
							invoked.Attachment.MimeType			= each.Attachment.MimeType
							invoked.Attachment.Title			= each.Attachment.Title
        		
        		if ((TrackingMethod = 1
				or	TrackingMethod = 4)
				and IsInventoried
				and IsBinTracked
				and Bin entered)
					if (PurchaseOrderTransactionDetailsRel not exists
					and !InterfaceHasDetails
					and not BypassCreateTransactionDetail)
						include CreatePOTransactionDetail
							






				if (EnteredReceivedQuantity > 0)
					include CalculateTolerances	
					
					if (OriginalUnitCost > 0)
	        			include CreateDistribution
				
					if (IsCancelRemaining and CanCancelRemaining)
						invoke CancelRemaining
						
		CreateFromInterface is a Create Action
			restricted
			Entrance Rules
				CreateFromInterface 		= true
				
				constraint (PurchaseOrderLine exists)
					"PurchaseOrderLineDoesNotExist"
				
				if (Item entered)
					constraint (Item = PurchaseOrderLine.Item)
						"Item<Item>DoesNotEqualPurchaseOrderLineItem<PurchaseOrderLine.Item>"
						
				if  (VendorItem entered)
					constraint (VendorItem = PurchaseOrderLine.VendorItem)
						"VendorItemDoesNotEqualPurchaseOrderLineVendorItem"

				if  (ItemType entered)
					constraint (ItemType = PurchaseOrderLine.ItemType)
						"ItemTypeDoesNotEqualPurchaseOrderLineItemType"

				if  (ShipToLocation not entered)
					if (PurchaseOrderReceipt.ShipToLocation entered)
						ShipToLocation = PurchaseOrderReceipt.ShipToLocation
					else
						ShipToLocation = PurchaseOrderLine.ShipToLocation
					
				if  (PurchaseOrderLine.ItemType.Special
				and  ReceivedUOM entered)					
					constraint (PurchaseOrderLine.EnteredBuyUOM		= ReceivedUOM)
						"UOMMustMatchPurchaseOrderLineForSpecialItems"				

				if  (!PurchaseOrderReceipt.ValidatePurchaseOrder)
					constraint (ShipToLocation entered)
						"LocationRequiredIfValidatePurchaseOrderIsFalse"

			Action Rules
				invoke Create this instance
					invoked.InterfaceHasDetails = InterfaceHasDetails
					if (PurchaseOrder.Dropship)
						invoked.Status			=	1 	
				
			Exit Rules

				invoke RestrictedCreate POReceiptLineTemplate
					invoked.Company						= Company
					invoked.PurchaseOrderReceipt		= PurchaseOrderReceipt
					invoked.PurchaseOrderLine			= PurchaseOrderLine							
					invoked.PurchaseOrderReceiptLine	= PurchaseOrderReceiptLine							
					invoked.ReceivedQuantity			= EnteredReceivedQuantity
					invoked.Item						= Item
					invoked.ItemType					= ItemType
					invoked.ReceivedUOM					= ReceivedUOM
					invoked.CatchWeightQuantity			= CatchWeightQuantity
					invoked.ShipToLocation				= ShipToLocation
					invoked.CancelBackorder				= CancelBackorder
					invoked.TransientInspectionRequired	= InspectionRequired

				if  (SpreadQuantity
				and  ReceivedUOM				= PurchaseOrderLine.EnteredBuyUOM
				and  EnteredReceivedQuantity	> PurchaseOrderLine.Quantity)
					AdditionalQuantity			= EnteredReceivedQuantity - PurchaseOrderLine.Quantity 
					for each PurchaseOrderLineLookupRel
						if  (each.PurchaseOrderLine != PurchaseOrderLine)
							if  (AdditionalQuantity < each.Quantity)
								WorkQuantity						= AdditionalQuantity
							else
								WorkQuantity						= each.Quantity
														
							EnteredReceivedQuantity 				-= WorkQuantity
							AdditionalQuantity 						-= WorkQuantity

							invoke Create PurchaseOrderReceiptLine
								fill in fields from this instance
									except invoked.PurchaseOrderLine
									except invoked.PurchaseOrderReceiptLine
									except invoked.EnteredReceivedQuantity
								invoked.PurchaseOrderLine			= each.PurchaseOrderLine
								invoked.PurchaseOrderReceiptLine	= each.PurchaseOrderLine
								invoked.EnteredReceivedQuantity     = WorkQuantity

						if  (AdditionalQuantity !> 0)
							end for each
										
        Update is an Update Action
        	valid when (CanUpdateReceiptLine)
			Entrance Rules
				constraint (not TemporaryHold.SentForApproval)
					"CannotUpdateWhileAwaitingApproval"				
        	Action Rules
        		include UpdateActionRules        				
        	Exit Rules      		      			       		
        		include UpdateExitRules        				
        												        				       			
		UpdateForReceiptLineTemplate is an Instance Action
        	restricted
        	
        	Action Rules
        		
        		if (not SubstituteReceiving and POReceiptLineTemplateRel exists)
					invoke UpdateFromReceiptLine POReceiptLineTemplateRel
		
		FastUpdate is an Update Action
			restricted
			bypass field rules
			Entrance Rules
				constraint (not TemporaryHold.SentForApproval)
					"CannotUpdateWhileAwaitingApproval"

		MobileUpdate is an Update Action
			default label is "Update"
        	valid when (CanUpdateReceiptLine)
        	
        	Entrance Rules
        		if (IsCatchWeightItem)
					constraint (CatchWeightQuantity entered)
						"CatchWeightItem,EnterStockQuantity"
        	Action Rules
        		include UpdateActionRules        				
        	Exit Rules      		      			       		
        		include UpdateExitRules        				

		MobileUpdateReceiptLine is an Update Action	
			default label is "Update"
			valid when (CanUpdateReceiptLine)
			Action Rules
				include UpdateActionRules
			Exit Rules
				include UpdateExitRules
		
		UpdateFromMatch is an Update Action			
			restricted
			bypass field rules
			Action Rules
				invoke UpdateFromMatch PurchaseOrderReceipt
					invoked.MatchedAmount		+= ((MatchedQuantity - old MatchedQuantity) * MatchUnitCost)
					invoked.HashQuantityMatched	+= (MatchedQuantity - old MatchedQuantity)
			
        Delete is a Delete Action
        	restricted
        	Entrance Rules
        		constraint (SumOfAssetDetailQuantity <= PurchaseOrderLine.Quantity)
        			"TooManyAssetDetailLinesExist"
				constraint (not TemporaryHold.SentForApproval)
					"CannotDeleteWhileAwaitingApproval"
        		invoke Delete AllBuyerMessagesRel
        		invoke Delete PurchaseOrderTransactionDetailsRel
        		invoke Delete PurchaseOrderUDIDetailRel
        		if (!OtherReceivingLineExists)
        			invoke Delete POReceiptLineTemplateRel
        	Action Rules
        		if (PurchaseOrderLineAssetRel exists)
	        		decrement PurchaseOrderLineAssetRel.ReceivedQuantity by EnteredReceivedQuantity
				invoke Delete PurchaseOrderReceiptLineDistribution set
		
        DeleteForZeroQuantity is a Delete Action
        	restricted
        	Entrance Rules
				constraint (SumOfAssetDetailQuantity <= PurchaseOrderLine.Quantity)
        			"TooManyAssetDetailLinesExist"
        		invoke Delete BuyerMessageRel
        		invoke Delete PurchaseOrderTransactionDetailsRel
        		invoke Delete PurchaseOrderUDIDetailRel
        	Action Rules
        		if (PurchaseOrderLineAssetRel exists)
	        		decrement PurchaseOrderLineAssetRel.ReceivedQuantity by EnteredReceivedQuantity
				invoke Delete PurchaseOrderReceiptLineDistribution set

		DeleteFromHeader is a Delete Action
        	restricted
        	Entrance Rules
        		constraint (SumOfAssetDetailQuantity <= PurchaseOrderLine.Quantity)
        			"TooManyAssetDetailLinesExist"
        		invoke Delete AllBuyerMessagesRel
        		invoke DeleteFromHeader PurchaseOrderTransactionDetailsRel
        		invoke Delete PurchaseOrderUDIDetailRel
        		if (!OtherReceivingLineExists)
        			invoke DeleteFromHeader POReceiptLineTemplateRel
        	Action Rules
        		if (PurchaseOrderLineAssetRel exists)
	        		decrement PurchaseOrderLineAssetRel.ReceivedQuantity by EnteredReceivedQuantity
				invoke Delete PurchaseOrderReceiptLineDistribution set

		DeleteSubstitute is a Delete Action
			valid when (UnreleasedSubstitute) 
			Entrance Rules
        		invoke Delete AllBuyerMessagesRel
        		invoke Delete PurchaseOrderTransactionDetailsRel
        		if (!OtherReceivingLineExists)
        			invoke Delete POReceiptLineTemplateByPurchaseOrderLineRel
        		 
        	Action Rules
        		decrement PurchaseOrderLineAssetRel.ReceivedQuantity by EnteredReceivedQuantity
				invoke Delete PurchaseOrderReceiptLineDistribution set 
			
			Exit Rules
				invoke UpdateFromReceiptLine POReceiptLineTemplateByPurchaseOrderLineRel
		
		UpdateReceiptLinesFromReceipt is an Instance Action
			restricted
			Parameters
		        PrmReceivedDate		is Date
				PrmReferenceNumber	is a ReferenceNumber
				PrmProcessLevel		is a PayablesProcessLevel
		        PrmVendor			is a Vendor
		        PrmInvoice			is an Invoice

			Action Rules				
				if (PrmReceivedDate	entered)
			        	ReceivedDate	= PrmReceivedDate
				if (PrmReferenceNumber	entered)
			        ReferenceNumber	= PrmReferenceNumber
				if (PrmProcessLevel	entered)
					ProcessLevel	= PrmProcessLevel
				if (PrmVendor	entered)
			        Vendor			= PrmVendor
				if (PrmInvoice	entered)
			        Invoice			= PrmInvoice
		        LastUpdateDate	= current timestamp
		        LastUpdateBy	= actor
		
		CheckItemType is an Instance Action	
			restricted

        







        BatchRelease is a Set Action
        	restricted
        	Parameters
        		PrmCompany									is a PurchasingCompany
        		PrmPurchaseOrderReceipt						is a PurchaseOrderReceipt
        	
        		PrmCreateIntrastatDetail					is Boolean
        		PrmIntrastatNumber							is an IntrastatNumber
        		PrmDestinationCountry						is like Country
        		PrmDestinationRegion						is like Region
        		PrmOriginCountry							is like Country
        		PrmOriginRegion								is like Region
        		PrmSkipNotification							is Boolean
        		PrmBatchReleaseResult						is like PurchaseOrderResult
				PrmFinalRelease								is Boolean
        		
        	Local Fields
        		LocalInventoryTransaction					is an InventoryTransaction
        		LocalInventoryLocation						is an InventoryLocation
				LocalReleaseType							is Numeric size 1
					States
						NotTwoStepReceiving					value is 0
						TwoStepReceivingFirstRelease		value is 1
						TwoStepReceivingFinalRelease		value is 2
        		
        	Sort Order
				Company
				PurchaseOrderReceipt
				ShipToLocation
				PurchaseOrderReceiptLine
        	
        	Instance Selection
        		where (Company					= PrmCompany
        		and	   PurchaseOrderReceipt		= PrmPurchaseOrderReceipt)
        		
        	Action Rules
				PurchaseOrderReceipt Set Rules
					Exit Rules
						if (PurchaseOrderReceipt.Status.ReleaseInProgress)
							invoke ReleaseInProgress.TransitionToReleased PurchaseOrderReceipt
								invoked.PrmSkipNotification		= PrmSkipNotification
								invoked.PrmBatchReleaseResult	= PrmBatchReleaseResult
							
						if (WarehouseDemandRel exists and WarehouseDemandRel.HasNoLines)
							invoke Delete WarehouseDemandRel
													
				ShipToLocation Set Rules
					Entrance Rules
						LocalFinalRelease = PrmFinalRelease
						if (ShipToLocation.TwoStepPurchaseOrderReceiving
						and InventoriedReceiptLinesInALocationRel exists)
							if (PrmFinalRelease)
								LocalReleaseType		= LocalReleaseType.TwoStepReceivingFinalRelease
							else
								LocalReleaseType		= LocalReleaseType.TwoStepReceivingFirstRelease

						if (IsForReleaseCompletion) 
							if (InventoriedReceiptLinesInALocationRel exists)
							
								LocalInventoryLocation = ShipToLocation
								
								invoke Unreleased.Create InventoryTransaction
									assign result to NewInventoryTransaction
									invoked.Company					= Company
									invoked.InventoryLocation		= ShipToLocation
									invoked.InventoryDocumentType	= "PO"
									invoked.TransactionDate			= PurchaseOrderReceipt.ReceivedDate		
									invoked.GeneralLedgerDate		= ReceivedDate
									invoked.OriginatingTransaction	= reference to PurchaseOrderReceipt
									
								LocalInventoryTransaction	= NewInventoryTransaction.InventoryTransaction
							
					Exit Rules
						invoke ReleaseFromReceiptLine LocalInventoryTransaction
						
				Instance Rules
					LocalFinalRelease = PrmFinalRelease
					LocalTwoStepReleaseType = LocalReleaseType

					include ReleaseActionRules
					include ReleaseExitRules
					if (IsMSCMTrackedDoNotPrint
					and not PurchaseOrderReceipt.IsMSCMEnabled
					and IsForReleaseCompletion) 
						invoke LineDeliveryUpdate










        Release is an Instance Action	
        	completion message is "LineReleaseCompleted"
        	restricted
        	Parameters
        		PrmCreateIntrastatDetail					is Boolean
        		PrmIntrastatNumber							is an IntrastatNumber
        		PrmDestinationCountry						is like Country
        		PrmDestinationRegion						is like Region
        		PrmOriginCountry							is like Country
        		PrmOriginRegion								is like Region
				
			Action Rules
				include ReleaseActionRules

			Exit Rules
				include ReleaseExitRules


				
		CostUpdatedFromPOLine is an Instance Action
			restricted
			Parameters
				PrmNewCost				is an InternationalCost
				PrmNewExtendedAmount	is an InternationalAmount
			Local Fields
				LocalOldCostTaxAndAOC	is an InternationalCost
				LocalNewCostTaxAndAOC	is an InternationalCost
			Action Rules
				LocalOldCostTaxAndAOC = EnteredReceivedQuantity * DerivedCostInReceivedUOMFullPrecision
				UnitCostDifference = PrmNewCost - OriginalUnitCost
				OriginalUnitCost = PrmNewCost
				LocalNewCostTaxAndAOC = EnteredReceivedQuantity * DerivedCostInReceivedUOMFullPrecision
				if (IsReleased)
					MatchUnitCost = PrmNewCost	
					ExtendedAmount	= PrmNewExtendedAmount
					invoke GlobalFastUpdate PurchaseOrderReceipt
						invoked.PurchaseOrderReceipt.ReceiptAmount += LocalNewCostTaxAndAOC - LocalOldCostTaxAndAOC
				else
					ExtendedAmount	= DerivedExtendedAmount
					UpdateFromPurchaseOrder = true
					include UpdateDistribution


        UpdatePOReceiptLineFromMatch is an Instance Action
			restricted					
			Parameters
				PrmMatchUnitCost	is an InternationalAmount
			Action Rules
				MatchUnitCost		= PrmMatchUnitCost
				
		UpdatePOReceiptLineFromPOAdjustment is an Instance Action
			restricted					
			Parameters
				PrmEnteredReceivedQuantity	is a Quantity
				PrmCancelBackorder			is Boolean
				PrmBuyUOMQuantity	 		is a Quantity
				PrmWriteOffQuantity  		is a Quantity
				PrmCatchWeightQuantity		is a Quantity
				PrmHasMatchedQuantity		is Boolean
			
			Local Fields
				LocalMNRAdjustmentQuantity				is like Quantity
				LocalMatchedQuantityInVendorPriceUOM	is like Quantity
			
			Action Rules
				EnteredReceivedQuantity		+= PrmEnteredReceivedQuantity
				CancelBackorder				= PrmCancelBackorder
				WriteOffQuantity			+= PrmWriteOffQuantity
				CatchWeightQuantity			+= PrmCatchWeightQuantity

				BuyUOMQuantity				= DerivedBuyUOMQuantity
				VendorPriceUOMQuantity		= DerivedVendorPriceUOMQuantity
				
				ExtendedAmount				= DerivedExtendedAmount
				
				if (PrmEnteredReceivedQuantity > 0) 
					if (PurchaseOrderLine.MatchedNotReceivedQuantity entered)
						if (PurchaseOrderLine.MatchedNotReceivedQuantity > PrmEnteredReceivedQuantity)
							if (not LineFullyMatched)
								UOMCalculation.InputUOM              	 = PurchaseOrderLine.EnteredBuyUOM
								UOMCalculation.InputUOMConversion    	 = PurchaseOrderLine.EnteredBuyUOMMultiplier
								UOMCalculation.InputToUOM            	 = VendorPriceUOM
								UOMCalculation.InputToUOMConversion  	 = VendorPriceUOMMultiplier
								UOMCalculation.InputQuantity         	 = PrmEnteredReceivedQuantity
								UOMCalculation.Method                	 = UOMCalculation.Method.ConvertToAlternate
								MatchedQuantity							+= UOMCalculation.OutputQuantity 
							LocalMNRAdjustmentQuantity				 	 = PrmEnteredReceivedQuantity	
							
						else
							LocalMNRAdjustmentQuantity				 	 = PurchaseOrderLine.MatchedNotReceivedQuantity
							if (not LineFullyMatched)
								if (IsCatchWeightItemAndHasItemMaster)
									MatchedQuantity						+= PurchaseOrderLine.MatchedNotReceivedQuantityInStockUOM
								else
									UOMCalculation.InputUOM              = PurchaseOrderLine.EnteredBuyUOM
									UOMCalculation.InputUOMConversion    = PurchaseOrderLine.EnteredBuyUOMMultiplier
									UOMCalculation.InputToUOM            = VendorPriceUOM
									UOMCalculation.InputToUOMConversion  = VendorPriceUOMMultiplier
									UOMCalculation.InputQuantity         = PurchaseOrderLine.MatchedNotReceivedQuantity
									UOMCalculation.Method                = UOMCalculation.Method.ConvertToAlternate

									MatchedQuantity						+= UOMCalculation.OutputQuantity
				
				if (not PurchaseOrderLine.CostOption.NoCharge
				or PurchaseOrderLine.AllowZeroCostInvoice)
					OpenToMatchQuantity	= (VendorPriceUOMQuantity - MatchedQuantity)
					if (OpenToMatchQuantity < 0
					or  LineFullyMatched)
						initialize OpenToMatchQuantity
				
			Exit Rules
				invoke UpdateFromReceiptLine PurchaseOrderLine
					invoked.PrmPurchaseOrderReceipt 	= PurchaseOrderReceipt
					invoked.PrmPurchaseOrderReceiptLine = PurchaseOrderReceiptLine
					invoked.PrmReceivedQuantity			= PrmEnteredReceivedQuantity
					invoked.PrmReceivedUOM				= ReceivedUOM
					invoked.PrmReceivedUOMMultiplier    = ReceivedUOMMultiplier
					invoked.PrmIsSubstitute				= SubstituteReceiving
					invoked.PrmIsCancelRemaining		= IsCancelRemaining
					invoked.PrmIsCancelBackorder		= CancelBackorder
					invoked.PrmCatchWeightQuantity      = PrmCatchWeightQuantity
					invoked.PrmMatchedNotReceivedQty	= LocalMNRAdjustmentQuantity
					if (PrmHasMatchedQuantity)
						invoked.PrmHasMatchedWriteOff	= PrmHasMatchedQuantity
						invoked.PrmWriteOffQuantity		= WriteOffQuantity

		
		UpdateStatusFromPORAdjInspLine is an Instance Action
			restricted					
			Parameters
				PrmStatus                        is Numeric size 1
			Action Rules
				Status       = PrmStatus      
				LastUpdateDate	= current timestamp
		        LastUpdateBy	= actor
		        
		        include ReceivingAllocation
		        
		UpdateRejQtyFromPORAdjInspLine is an Instance Action
			restricted					
			Parameters
				PrmRejectedQuantity     	   is a Quantity
				PrmCatchWeightRejectedQuantity is a Quantity
			Action Rules
				RejectedQuantity			= PrmRejectedQuantity
				CatchWeightRejectedQuantity	= PrmCatchWeightRejectedQuantity
				LastUpdateDate				= current timestamp
		        LastUpdateBy				= actor
		        
		UpdateRejectQtyFromPORAdjInspLine is an Instance Action
			restricted					
			Parameters
				PrmRejectedQuantity     is a Quantity
				PrmInspectionRequired is Boolean
			Action Rules
				RejectedQuantity = PrmRejectedQuantity
				InspectionRequired = PrmInspectionRequired
				LastUpdateDate	= current timestamp
		        LastUpdateBy	= actor
				
		CancelRemaining is an Instance Action
			valid when (CanCancelRemaining)
			confirmation required
				"ThisWillCancelTheRemainingItems"
			Action Rules

				IsCancelRemaining	= true
				
				invoke UpdateFromReceiptLine PurchaseOrderLine
					invoked.PrmPurchaseOrderReceipt 	= PurchaseOrderReceipt
					invoked.PrmPurchaseOrderReceiptLine = PurchaseOrderReceiptLine
					invoked.PrmIsCancelRemaining		= IsCancelRemaining
					if (IsUnreleased)
						invoked.PrmCurrentReceiptQuantity	= DerivedReceivedQuantityInPOUOM

		ReceiveAllAssetDetails is an Instance Action
			valid when (ValidForReceiveAllAssetDetail)

			Local Fields
				LocalTotalReceivedCount is Numeric size 4
			Entrance Rules
				LocalTotalReceivedCount = instance count of ValidForReceiveAllAssetDetailRel
				constraint (LocalTotalReceivedCount <= first PurchaseOrderLineAssetDetailRel.TotalReceivedQuantity)
					"CannotReceiveMoreDetailsThanTotalReceivedQuantity"
			Action Rules
				if (DerivedAssetDetailNotReceivedQuantity > DerivedForegroundLimit)
					invoke ReceiveAssetDetailsSet PurchaseOrderLineAssetDetail
						invoked.PrmCompany  		 = Company 
						invoked.PrmPurchaseOrder     = PurchaseOrder 
						invoked.PrmPurchaseOrderLine = PurchaseOrderLine 
				else
					invoke ReceiveAssetDetailsSet PurchaseOrderLineAssetDetail in foreground
						invoked.PrmCompany  		 = Company 
						invoked.PrmPurchaseOrder     = PurchaseOrder 
						invoked.PrmPurchaseOrderLine = PurchaseOrderLine

		CreateInvoiceDetailsFromReceiptSet is a Set Action
			restricted
			Parameters
				PrmCompany				is a PayablesCompany
				PrmPayablesInvoice		is a PayablesInvoice
				PrmPurchaseOrder		is a PurchaseOrder
			Parameter Rules
				PrmPayablesInvoice
					required
			Set Is  
				PrmCompany
				PrmPayablesInvoice

			Local Fields 
				HasServiceLines is Boolean
			Instance Selection
				where (Company			= PrmCompany
				and    PurchaseOrder 	= PrmPurchaseOrder
				and   (Status.ReleasedInspected
				or     Status.ReleasedPendingTwoStepReceiving)
				and    OpenToMatchQuantity entered
				and    !InvoiceDetailExists
				and    !POLineInvoiceDetailExists)

			Action Rules
				Empty Set Rules
					invoke CreateInvoiceDetailsFromPoLinesSet PurchaseOrderLine
						invoked.PrmCompany 			= PrmCompany
						invoked.PrmPayablesInvoice 	= PrmPayablesInvoice
						invoked.PrmPurchaseOrder 	= PrmPurchaseOrder
						invoked.ServiceOnly			= true

				Set Rules
					Exit Rules
						HasServiceLines = false 

						for each PrmPurchaseOrder.PurchaseOrderLineRel 
							if    ((each.ItemType.Service)
							and     !each.Closed.Yes
							and     each.AllowMatchCreateDetail
							and    (!PrmPayablesInvoice.DerivedPoolOption.CompanyVendorPoShipTo
							or       each.ShipToLocation = PrmPayablesInvoice.Location))
								HasServiceLines = true 
								end for each 

						if (!HasServiceLines)

							for each PrmPayablesInvoice.MatchPurchaseOrderInvoicesRel
								if (each.CreateAOCValid)
									invoke CreateAOCFromPurchaseOrder each

							invoke InvoiceUpdate PrmPayablesInvoice
								invoked.ResetBackgroundProcessing = true
						else

							invoke CreateInvoiceDetailsFromPoLinesSet PurchaseOrderLine
								invoked.PrmCompany 			= PrmCompany
								invoked.PrmPayablesInvoice 	= PrmPayablesInvoice
								invoked.PrmPurchaseOrder 	= PrmPurchaseOrder
								invoked.ServiceOnly			= true
				Instance Rules
					if  (!PrmPayablesInvoice.DerivedPoolOption.CompanyVendorPoShipTo
					or    ShipToLocation = PrmPayablesInvoice.Location)
						invoke CreateInvoiceDetailsFromReceipt
							invoked.Company			= PrmCompany
							invoked.PayablesInvoice = PrmPayablesInvoice

		CreateInvoiceDetailsFromReceipt is an Instance Action
			valid when (CreateInvoiceDetailsValid)
			default label is "CreateDetailFromReceiptLine"
			Parameters
				Company
				PayablesInvoice
			Parameter Rules
				Company
					default to MatchPurchaseOrderInvoice.PayablesInvoice.Company
				PayablesInvoice
					default to MatchPurchaseOrderInvoice.PayablesInvoice
			Action Rules
				LocalPayablesInvoice							= PayablesInvoice
				constraint (!LocalPayablesInvoiceDetailRel exist)
					"CreateFailedInvoiceDetailExists" 

				invoke CreateFromPurchaseOrderLine PayablesInvoiceDetail
					invoked.Company							= Company 
					invoked.Vendor							= Vendor
					invoked.PayablesInvoice					= PayablesInvoice
					invoked.PurchaseOrder					= PurchaseOrder
					invoked.PurchaseOrderLine				= PurchaseOrderLine
					invoked.Item							= Item
					invoked.ItemType						= ItemType
					invoked.VendorItem						= VendorItem
					invoked.Location						= ShipToLocation
					invoked.EnteredQuantity					= DerivedOpenToMatchQuantity
					invoked.EnteredUOM						= VendorPriceUOM
					invoked.EnteredUOMMultiplier			= VendorPriceUOMMultiplier
					if (IsCatchWeightItem)
						invoked.EnteredUnitCost				= PurchaseOrderLine.DerivedEntUnitCst
					else
					if (VendorPriceUOM != PurchaseOrderLine.EnteredBuyUOM)
						invoked.EnteredUnitCost				= PurchaseOrderLine.EnteredUnitCost
					else
					if  (PurchaseOrderLine.DerivedEntUnitCst entered)
						invoked.EnteredUnitCost				= PurchaseOrderLine.DerivedEntUnitCst
					else
						invoked.EnteredUnitCost				= OriginalUnitCost

					if (IsCatchWeightItem)
					    invoked.BuyUOMMatchedQuantity		= EnteredReceivedQuantity
					    
					invoked.VendorPriceUOM					= VendorPriceUOM
					invoked.VendorPriceUOMMultiplier		= VendorPriceUOMMultiplier
					invoked.VendorBuyUOM					= VendorBuyUOM
					invoked.VendorBuyUOMMultiplier			= VendorBuyUOMMultiplier
					invoked.PurchaseOrderReceipt			= PurchaseOrderReceipt
					invoked.PurchaseOrderReceiptLine		= PurchaseOrderReceiptLine

			        invoked.RecordSource							= "LM"
			        invoked.DistributionDate						= PayablesInvoice.DistributionDate
					invoked.StockWeight								= PurchaseOrderLine.StockWeight 
					invoked.ICNCode									= PurchaseOrderLine.ICNCode 
					invoked.SupplementaryQuantity					= PurchaseOrderLine.SupplementaryQuantity 
					invoked.CommodityCode							= PurchaseOrderLine.CommodityCode
					invoked.ProductTaxCategory						= ProductTaxCategory
					invoked.SupplementaryUOM						= PurchaseOrderLine.ICNCode.SupplementaryUOM 
					if  (!PayablesInvoice.TaxAdjustment.IgnoreProductOnly
					and  !PayablesInvoice.TaxAdjustment.Calculate
					and  !PayablesInvoice.TaxAdjustment.IgnoreProductAndAOC)
						invoked.TaxCode									= TaxCode
						if (Vendor.TaxUsageCode entered)
							invoked.TaxUsageCode						= Vendor.TaxUsageCode
						else
							invoked.TaxUsageCode						= Vendor.VendorClass.TaxUsageCode
					invoked.Contract								= PurchaseOrderLine.Contract
					invoked.ContractLine							= PurchaseOrderLine.ContractLine
					if (initiating action = "MatchPurchaseOrderInvoice.CreateDetailFromReceipt"
					or  initiating action = "PayablesInvoice.CreateInvoiceUnreleased"
					or  initiating action = "CreateInvoiceDetailsFromReceiptSet")
						invoked.BypassInvoiceErrorChecking		= true



		CreateMatchWorkReceiptDetails is a Set Action
			restricted
			Parameters
				PrmCompany				 is a PayablesCompany
				PrmPurchaseOrder	 	 is a PurchaseOrder
				PrmMultiplePOs			 is Boolean
				PrmVendor				 is a Vendor
				PrmInvoice				 is a PayablesInvoice
				PrmMatchWork			 is a MatchWork
				FromRecon				 is Boolean
				PrmAutoMatchResult		 is an AutoMatchResult
				PoolOption
			Local Fields
				DoThisOne						is Boolean

			Instance Selection
				where (Company					= PrmCompany
				and    Vendor					= PrmVendor
				and   (PrmMultiplePOs
				or     PurchaseOrder 			= PrmPurchaseOrder)
				and    OpenToMatchQuantity entered
				and    EnteredReceivedQuantity entered
				and   (MatchUnitCost entered
				or     PurchaseOrderLine.CostOption.NoCharge)
				and    PurchaseOrderReceipt.Status.Released)
						
			Set Is
				PrmCompany
				PrmPurchaseOrder
				PrmInvoice
				PrmMatchWork

			Action Rules
				Empty Set Rules
					invoke CreateMatchWorkDetails PayablesInvoiceDetail
						invoked.PrmCompany 		= PrmCompany
						invoked.PrmInvoice 		= PrmInvoice
						invoked.PrmMatchWork 	= PrmMatchWork
						invoked.FromRecon		= FromRecon
						invoked.PrmAutoMatchResult = PrmAutoMatchResult
				Set Rules
					Exit Rules

						invoke CreateMatchWorkDetails PayablesInvoiceDetail
							invoked.PrmCompany 		= PrmCompany
							invoked.PrmInvoice 		= PrmInvoice
							invoked.PrmMatchWork 	= PrmMatchWork
							invoked.FromRecon		= FromRecon
							invoked.PrmAutoMatchResult = PrmAutoMatchResult

				Instance Rules


					DoThisOne										= false
					
					LocalPayablesInvoice							= PrmInvoice

					if  (PrmInvoice.MatchReferenceNumber entered
					and  Vendor.RequireMatchReference)
						if  (PurchaseOrderReceipt.MatchReferenceNumber = PrmInvoice.MatchReferenceNumber)
							DoThisOne = true
					else					
					if  (MatchPurchaseOrderInvoiceRel exists
					and (!PoolOption.CompanyVendorPoShipTo
					or    ShipToLocation	= PrmInvoice.Location))
						DoThisOne = true

					if (DoThisOne)						

						if  (!Status.ReleasedInspected
						and (Vendor.HoldUntilInspected.Yes
						or   MatchCompanyRel.HoldUntilInspected.Yes))
							initialize LastCostUpdate
						else						
						if  (OpenToMatchQuantity entered
						and (MatchObjectID not entered
						or   PurchaseOrderMatchInvoiceLinksRel exists))
						
							LastCostUpdate									= first PurchaseOrderReceiptInvoiceLinkLastCostRel.PoCostUpd
							WorkMatchUnitCost								= LastCostUpdate
					      	if  (first POLineInvoiceMessageRel.AdjustedUnitCost entered)
								WorkMatchUnitCost								= first POLineInvoiceMessageRel.AdjustedUnitCost
							if (WorkMatchUnitCost not entered)
								WorkMatchUnitCost								= MatchUnitCost
	
							if  ((ItemType.Inventoried
							or    ItemType.NonStock)
							and   VendorPriceUOM != VendorBuyUOM
							and   MatchedQuantity entered)
								initialize UOMCalculation
								UOMCalculation.InputUOM							= ReceivedUOMMultiplier
								UOMCalculation.InputToUOM						= VendorPriceUOMMultiplier
								UOMCalculation.InputQuantity					= MatchedQuantity
								UOMCalculation.InputUnitCost					= OriginalUnitCost
								UOMCalculation.Method						    = UOMCalculation.Method.ConvertToAlternate
			
							invoke Create MatchWorkReceiptLine
								fill in fields from this instance
									except invoked.PayablesInvoice
									except invoked.EnteredReceivedQuantity
									except invoked.BuyUOMQuantity
									except invoked.VendorPriceMatchedQuantity
								invoked.MatchWork 								= PrmMatchWork
								invoked.Company									= Company
								invoked.PurchaseOrderReceipt					= PurchaseOrderReceipt
								invoked.PurchaseOrderReceiptLine				= PurchaseOrderReceiptLine
								invoked.LastAdjustedMatchUnitCost				= LastCostUpdate	
								invoked.MatchUnitCost							= WorkMatchUnitCost
								invoked.VendorPriceUOM							= VendorPriceUOM
								invoked.MatchedQuantity							= MatchedQuantity
								invoked.OpenToMatchQuantity						= OpenToMatchQuantity
	
								invoked.EnteredReceivedQuantity					= EnteredReceivedQuantity
								invoked.BuyUOMQuantity							= BuyUOMQuantity
	
								invoked.VendorPriceUOMQuantity					= VendorPriceUOMQuantity
								invoked.VendorPriceUOM							= VendorPriceUOM
			

								if  ((ItemType.Inventoried
								or    ItemType.NonStock)
								and   VendorPriceUOM != VendorBuyUOM
								and   MatchedQuantity entered)
									invoked.VendorPriceMatchedQuantity			= UOMCalculation.OutputQuantity
								else
									invoked.VendorPriceMatchedQuantity			= MatchedQuantity
				
								invoked.UnmatchedQuantity						= OpenToMatchQuantity
								if  (OpenToMatchQuantity not entered)
									if  (VendorPriceUOMQuantity > 0)
										invoked.UnmatchedQuantity				= VendorPriceUOMQuantity
										if  (!ItemType.Service)
											invoked.MatchAmount					= VendorPriceUOMQuantity * WorkMatchUnitCost
								else						
								if  (OpenToMatchQuantity > 0)
									invoked.UnmatchedQuantity					= OpenToMatchQuantity
									if  (!ItemType.Service)
										invoked.MatchAmount						= OpenToMatchQuantity * WorkMatchUnitCost
									if  (!PrmMatchWork.MatchLevel.InvoiceMatch)
										initialize invoked.MatchObjectID
					
								if  (PrmMatchWork.ProcessByMatchReference)
									invoked.Selected							= true
				



		UnmatchPhase2ReceiptLine is a Set Action
			restricted
			Parameters
				PrmPayablesCompany			is a PayablesCompany
				PrmPayablesInvoice			is a PayablesInvoice
				UnmatchFrom							is Alpha 4
					States
						MA70 value is "MA70"
						MA75 value is "MA75"
				PrmMatchObjectID			is an ObjId
			Parameter Rules
				PrmPayablesCompany
					required
				PrmPayablesInvoice
					required

			Instance Selection
				where (Company				= PrmPayablesCompany
				and    MatchObjectID		= PrmMatchObjectID)

			Local Fields
				LocalMNRTestQuantity				is like Quantity

			Action Rules
				Empty Set Rules
					invoke UnmatchPhase3InvoiceDetail PayablesInvoiceDetail
						invoked.PrmPayablesCompany		= PrmPayablesCompany
						invoked.PrmPayablesInvoice		= PrmPayablesInvoice
						invoked.UnmatchFrom 			= UnmatchFrom

				Set Rules
					Exit Rules
						invoke UnmatchPhase3InvoiceDetail PayablesInvoiceDetail
							invoked.PrmPayablesCompany		= PrmPayablesCompany
							invoked.PrmPayablesInvoice		= PrmPayablesInvoice
							invoked.UnmatchFrom 			= UnmatchFrom
				
				Instance Rules
					if (MatchObjectID entered)   
						if  (MatchSequence > 0)


							if  (PurchaseOrderLine entered
							and  LocalMNRTestQuantity entered
							and (PurchaseOrderLine.MatchedNotReceivedQuantity entered
							or   PurchaseOrderLine.ChargebackQuantity entered
							or   PurchaseOrderLine.WriteOffQuantity entered
							or   PurchaseOrderLine.MatchedQuantity entered))

								if (InvoiceDetailMatchObjectIDAndSequenceRel exists)
									LocalMNRTestQuantity -= first InvoiceDetailMatchObjectIDAndSequenceRel.BuyUOMMatchedQuantity
									if (LocalMNRTestQuantity < 0)
										initialize LocalMNRTestQuantity
									else

										invoke UpdateFromMatch PurchaseOrderLine
											if (first InvoiceDetailMatchObjectIDAndSequenceRel.ExcessQuantityProcess.Chargeback)
												if (this instance.PurchaseOrderLine.ChargebackQuantity entered)
													if (LocalMNRTestQuantity > ChargebackQuantity)
														invoked.LocalUpdateFromMatchChargebackQuantity	= this instance.PurchaseOrderLine.ChargebackQuantity * -1
													else
														invoked.LocalUpdateFromMatchChargebackQuantity	= LocalMNRTestQuantity * -1
											else
											if (first InvoiceDetailMatchObjectIDAndSequenceRel.ExcessQuantityProcess.MatchWriteOff)
												if (this instance.PurchaseOrderLine.WriteOffQuantity entered)
													if (LocalMNRTestQuantity > this instance.PurchaseOrderLine.WriteOffQuantity)
														invoked.LocalUpdateFromMatchWriteOffQuantity	= this instance.PurchaseOrderLine.WriteOffQuantity * -1
													else
														invoked.LocalUpdateFromMatchWriteOffQuantity	= LocalMNRTestQuantity * -1
											else
											if (first InvoiceDetailMatchObjectIDAndSequenceRel.ExcessQuantityProcess.MatchNoReceipt)
												if (this instance.PurchaseOrderLine.MatchedNotReceivedQuantity entered)
													if (LocalMNRTestQuantity > this instance.PurchaseOrderLine.MatchedNotReceivedQuantity)
														invoked.PurchaseOrderLineUpdateFromMatchMatchedNotReceivedQuantity	= this instance.PurchaseOrderLine.MatchedNotReceivedQuantity * -1
													else
														invoked.PurchaseOrderLineUpdateFromMatchMatchedNotReceivedQuantity	= LocalMNRTestQuantity * -1
											
											if (this instance.PurchaseOrderLine.MatchedQuantity entered)
												if (LocalMNRTestQuantity > this instance.PurchaseOrderLine.MatchedQuantity)
													invoked.LocalUpdateFromMatchMatchedQuantity	= this instance.PurchaseOrderLine.MatchedQuantity * -1
												else
													invoked.LocalUpdateFromMatchMatchedQuantity	= LocalMNRTestQuantity * -1
	
							LocalMNRTestQuantity 		= MatchedQuantity 




						else
							LocalMNRTestQuantity 		+= MatchedQuantity
							
						if ((ItemType.Inventoried
						or   ItemType.NonStock)
						and  PrmPayablesInvoice.MatchLevel.DetailMatch
						and  InvoiceDetailMatchObjectIDAndSequenceRel exists)

							LocalPurchaseOrder						= PurchaseOrder
							LocalPurchaseOrderLine					= PurchaseOrderLine
	
							for each InventoryTransactionLineCostAdjustmentRel
	
								WorkCost = each.UnitCost * -1
								WorkQuantity = each.Quantity
								if  (WorkCost entered
								or   WorkQuantity entered)
									invoke UpdateForCostAdjustment each.ItemLocation			
										invoked.PrmCostDifference			= WorkCost
										invoked.PrmQuantity					= WorkQuantity
										invoked.PrmDocumentNumber			= each.InventoryTransaction
										invoked.PrmLineNumber				= each.InventoryTransactionLine.LineNumber
										if (LocalInvoiceAddOnChargeForPOLineRel exists)
											invoked.PrmAddOnChargeDifference	= true
										if (ProcessLevel.CostVarianceAccount entered)
											invoked.PrmOffsetAccount			= ProcessLevel.CostVarianceAccount
										else
											invoked.PrmOffsetAccount			= MatchCompanyRel.CostVarianceAccount
							
						if ((!PurchaseOrderLine.CostOption.NoCharge
						or    PurchaseOrderLine.AllowZeroCostInvoice)		
						and (PrmPayablesInvoice.MatchLevel.DetailMatch
						or   !PrmPayablesInvoice.IsChargeback))
	

							invoke UpdateFromMatch PurchaseOrderLine 
								if (!ItemType.Service
								or   this instance.PurchaseOrderLine.ServiceCode.Quantity)
									invoked.LocalUpdateFromMatchMatchedQuantity				= MatchedQuantity * -1
									invoked.LocalUpdateFromMatchChargebackQuantity			= PurchaseOrderLine.ChargebackQuantity * -1
									invoked.LocalUpdateFromMatchMemoQuantity				= PurchaseOrderLine.MemoQuantity * -1
			
								if (this instance.PurchaseOrderLine.ServiceCode.Amount)
									invoked.LocalUpdateFromMatchMatchedAmount				= PurchaseOrderLine.MatchedAmount * -1
									

								if (PrmPayablesInvoice.InvoiceType.CreditMemo
								and PrmPayablesInvoice.Suffix not entered)
									initialize invoked.LocalUpdateFromMatchMatchedQuantity
			
							invoke UpdateFromMatch PurchaseOrder  
								invoked.PrmMatchObjID					= MatchObjectID
								invoked.PrmVendorBuyMatchedQuantity		= MatchedQuantity
								invoked.PrmPOLineVendorBuyUnitCost		= PurchaseOrderLine.VendorBuyUnitCost
						
						if (PrmPayablesInvoice.IntrastatNumber entered)

							IntrastatProcessing.DetailFc						= "C"
							IntrastatProcessing.TaxEntity						= Company.AccountingEntity
							IntrastatProcessing.IntrastatNumber 				= IntrastatNumber
							IntrastatProcessing.LineNumber						= PurchaseOrderReceiptLine
							initialize IntrastatProcessing.BaseAmount							
							LocalTrigger										= IntrastatProcessing.MainTrigger
						

						if (!PrmPayablesInvoice.IsChargeback)

							invoke UpdateFromMatch 
								initialize invoked.MatchedQuantity
								initialize invoked.MatchObjectID
								initialize invoked.MatchSequence
								initialize invoked.Invoice
								initialize invoked.Suffix
								initialize invoked.ArchivedWriteOffQuantity
								
								if (VendorBuyUOM != VendorPriceUOM
								and CatchWeightQuantity > 0)
									if (OpenToMatchQuantity not entered)
										if (BuyUOMQuantity = MatchedQuantity)
											invoked.OpenToMatchQuantity 	+= (MatchedQuantity * (VendorPriceUOMQuantity / BuyUOMQuantity))
										else
											invoked.OpenToMatchQuantity 	+= MatchedQuantity
									else
										if ((PurchaseOrderReceipt.Status.ReadyToArchive
										or   PurchaseOrderReceipt.Status.ArchivedClosed)
										and  BuyUOMQuantity			= MatchedQuantity
										and  VendorPriceUOMQuantity	= MatchedQuantity)
											invoked.OpenToMatchQuantity		= (MatchedQuantity *(VendorPriceUOMQuantity / BuyUOMQuantity))
										else
											invoked.OpenToMatchQuantity 	+= VendorPriceUOMQuantity
								else
									invoked.OpenToMatchQuantity				= BuyUOMQuantity
	
						

							if  (VendorPriceUOMQuantity entered)
								LocalQuantity			= VendorPriceUOMQuantity
								LocalMatchAmount 		= OriginalUnitCost * VendorPriceUOMQuantity
							else
								LocalQuantity			= EnteredReceivedQuantity
								LocalMatchAmount 		= OriginalUnitCost * EnteredReceivedQuantity
										
						




































































		ReceiptArchiveFromBatch is an Instance Action
			restricted
			Action Rules
				invoke ReceiptArchive
				invoke ClosePurchaseOrderLine PurchaseOrderLine
					invoked.PrmFromOpenReceiptArchive = true

		ReceiptArchive is an Instance Action
			restricted

			Local Fields
				LocalCalculateTaxExecuted			is Alpha 1
				LocalLandTaxUnitCost				is an InternationalAmount
				LocalLandedUnitCost					is an InternationalAmount
				LocalTransactionSystemCode			is a TransactionSystemCode
				LocalArchivedQuantity				is a Quantity
				
			Action Rules
				initialize LocalInventoryTransaction
				initialize LocalInventoryTransactionLine
				
				constraint (not Status.Entered)
					"CannotClosePurchaseOrderLine;UnreleasedReceiptLinesExists" 
				constraint (not Status.ReleasedRequiresInspection 
				and 		not Status.ReleasedUnreleasedInspection)
					"CannotClosePurchaseOrderLine;ReceiptPendingInspection" 
				constraint (UnreleasedAdjustmentAndInspectionLinesRel not exists)
					"CannotClosePurchaseOrderLine;UnreleasedAdjustmentExists)" 
				
				if (MatchedQuantity not = DerivedBuyUOMQuantity 
				and not PurchaseOrderReceipt.Status.ArchivedClosed)
					ArchivedQuantity = DerivedBuyUOMQuantity + WriteOffQuantity + ChargebackQuantity - MatchedQuantity	
					CatchWeightArchivedQuantity = CatchWeightQuantity + DerivedCatchWeightWriteOffQuantity + DerivedCatchWeightChargebackQuantity - DerivedCatchWeightMatchedQuantity
					
					increment PurchaseOrderLine.CatchWeightArchivedQuantity by CatchWeightArchivedQuantity
					increment PurchaseOrderLine.ArchivedQuantity by ArchivedQuantity
					if (IsCatchWeightItem)
						decrement PurchaseOrderReceipt.ReceiptAmount by ((CatchWeightArchivedQuantity  + CatchWeightMatchedQuantity) * DerivedOriginalCostWithTaxAndAOC)
					else
						decrement PurchaseOrderReceipt.ReceiptAmount by ((ArchivedQuantity  + MatchedQuantity) * DerivedOriginalCostWithTaxAndAOC)
					
					if  ((not IsCatchWeightItem 	
					and (ArchivedQuantity = OpenToMatchQuantity))
					or  (IsCatchWeightItem 		
					and (CatchWeightArchivedQuantity = OpenToMatchQuantity)))
						initialize OpenToMatchQuantity
						initialize CatchWeightOpenToMatchQuantity

												
				if (TaxEntityUsesSabrix and TaxCode entered and EntityTaxCodeRel.LandedCost)
					TaxableUnitCost	= OriginalUnitCost
					LocalLandTaxUnitCost = PurchaseOrderLine.LandedUnitCost - PurchaseOrderLine.EnteredUnitCost				
					LocalLandedUnitCost = (sum PurchaseOrderReceiptLineAOC set.LandedUnitCost)					
				else 
				if (TaxCode entered and EntityTaxCodeRel.LandedCost)
					LocalCalculateTax.Function 		= "C"
					LocalCalculateTax.TaxCode 		= TaxCode
					initialize LocalCalculateTax.TaxAmount
					LocalCalculateTax.TaxableAmount	= OriginalUnitCost * VendorPriceUOMQuantity
					LocalCalculateTax.System		= "PO"
					LocalCalculateTax.TaxDate		= ReceivedDate
					LocalCalculateTax.InvoiceDate	= ReceivedDate
					LocalCalculateTax.PaymentDate	= ReceivedDate
					
					if  (TaxEntityUsesThirdPartyTax)
				   		CalculateTax.RelatedObjectReference			= reference to this instance
			   			CalculateTax.InputVertexRequest				= "P" 
				   		CalculateTax.TransactionSource				= "I"	
				   		CalculateTax.InputReturnVertexTaxIn			= "D" 
				   		CalculateTax.InvoiceCompany					= Company
				   		CalculateTax.ProcessLevel					= PurchaseOrder.ProcessLevel 
						CalculateTax.Vendor							= PurchaseOrder.Vendor 
						CalculateTax.VendorCustomerName				= PurchaseOrder.Vendor.VendorName 	
						CalculateTax.LineNumber						= PurchaseOrderLine		
				   		CalculateTax.CommodityCode					= PurchaseOrderLine.ICNCode				
						CalculateTax.TaxUsageCode					= PurchaseOrderLine.TaxUsageCode					
						CalculateTax.DeliveryTerms          		= PurchaseOrder.ShipTerm
						CalculateTax.PostalAddress					= PurchaseOrder.ProcessLevel.PostalAddress	
					    CalculateTax.VATRegistrationCountry    	 	= TaxEntityRel.VATRegistrationCountry 			
					    CalculateTax.VATRegistrationNumber			= TaxEntityRel.VATRegistrationNumber			
						if (PurchaseOrder.PurchaseFromLocation entered
						and PurchaseOrder.PurchaseFromLocation.CurrentAddressRelExists
						and PurchaseOrder.PurchaseFromLocation.VATRegistrationNumber entered)
							CalculateTax.FromPostalAddress				= PurchaseOrder.PurchaseFromLocation.VendorAddress 
					    	CalculateTax.FromVATRegistrationCountry 	= PurchaseOrder.PurchaseFromLocation.VATRegistrationCountry			
					    	CalculateTax.FromVATRegistrationNumber		= PurchaseOrder.PurchaseFromLocation.VATRegistrationNumber				
						else
							CalculateTax.FromPostalAddress				= Vendor.VendorAddress		
					    	CalculateTax.FromVATRegistrationCountry 	= Vendor.VATRegistrationCountry					
					    	CalculateTax.FromVATRegistrationNumber		= Vendor.VATRegistrationNumber					
					    CalculateTax.DefaultFilingCurrency 			= Company.Currency 
						CalculateTax.CurrencyRate					= PurchaseOrder.EnteredCurrencyConversionRate 		
					    CalculateTax.TransactionCurrency 			= PurchaseOrder.Currency								
						CalculateTax.BaseCurrency 					= Company.Currency					
						CalculateTax.ReceiptSite					= PurchaseOrder.ProcessLevel								
						CalculateTax.UniqueIdOfRelatedObject		= UniqueID									
					
					LocalCalculateTaxExecuted		= LocalCalculateTax.ExecuteCalculateTax
					  
					TaxableUnitCost	= LocalCalculateTax.OutputTotalTaxAmount / VendorPriceUOMQuantity
					
					if (LocalCalculateTax.OutputTotalTaxAmount = LocalCalculateTax.OutputTotalLandedTaxAmount)
						LocalLandTaxUnitCost = TaxableUnitCost
					else
						LocalLandTaxUnitCost = LocalCalculateTax.OutputTotalLandedTaxAmount5DP / VendorPriceUOMQuantity
					
				LocalLandedUnitCost = (sum PurchaseOrderReceiptLineAOC set.LandedUnitCost)					
				if (ItemType.Inventoried
				and ArchivedQuantity > 0)
					LocalTransactionSystemCode = TransactionSystemCode.PurchaseOrder
					LocalArchivedQuantity = DerivedBuyUOMQuantity + WriteOffQuantity + ChargebackQuantity - MatchedQuantity	
					
					invoke Unreleased.Create InventoryTransaction
						assign result to NewInventoryTransaction
						fill in fields from this instance
							except invoked.OriginatingInterfaceRun
						invoked.Company									= Company
						invoked.InventoryLocation						= ShipToLocation
						invoked.InventoryDocumentType					= "AR"
						invoked.OriginatingTransaction					= reference to this instance
					
					LocalInventoryTransaction = NewInventoryTransaction.InventoryTransaction					
					invoke Unreleased.Create InventoryTransactionLine
						assign result to NewInventoryTransactionLine
						invoked.OriginatingTransaction 				= reference to this instance
						invoked.Company								= Company
						invoked.InventoryLocation					= ShipToLocation
						if (PurchaseOrder.ProcessLevel.UnderbillAccount entered)
							invoked.OffsetAccount					= PurchaseOrder.ProcessLevel.UnderbillAccount
						else
						if (PurchaseOrder.ProcessLevel.InventoryReceiptArchivalAccount entered)
							invoked.OffsetAccount					= PurchaseOrder.ProcessLevel.InventoryReceiptArchivalAccount
						else
							if (MatchCompanyRel.UnderbillAccount entered)
								invoked.OffsetAccount				= MatchCompanyRel.UnderbillAccount
							else 
								invoked.OffsetAccount				= MatchCompanyRel.InventoryReceiptArchivalAccount
						invoked.InventoryTransaction				= LocalInventoryTransaction	
						invoked.TransactionSystemCode				= LocalTransactionSystemCode 
						invoked.InventoryTransactionLine.LineNumber	= PurchaseOrderReceiptLine
						invoked.InventoryTransactionLine.Item		= Item
						invoked.Reference							= ReferenceNumber
						invoked.TransactionSequence					= LastPurchaseOrderTransactionDetail
						if (CatchWeightQuantity entered)
							invoked.SecondaryUOM					= ReceivedUOM
							invoked.SecondaryUOMMultiplier			= ReceivedUOMMultiplier
							invoked.SecondaryQuantity				= EnteredReceivedQuantity
							invoked.Quantity						= CatchWeightQuantity 
							invoked.TransactionUOM					= Item.StockUOM
							invoked.TransactionUOMMultiplier		= 1
						else
							invoked.Quantity						= LocalArchivedQuantity
							invoked.TransactionUOM					= ReceivedUOM
							if (ReceivedUOM != PurchaseOrderLine.EnteredBuyUOM)
								invoked.TransactionUOMMultiplier 	= VendorPriceUOMMultiplier
							else
								invoked.TransactionUOMMultiplier 	= ReceivedUOMMultiplier
						invoked.UnitCost							= DerivedLineStockUnitCost
    					if (IsBinTracked)
							invoked.Bin								= Bin
							invoked.MultipleBins					= MultipleBins
						invoked.EAMWorkOrder						= PurchaseOrderReceiptLine.PurchaseOrderLine.EAMWorkOrder
						invoked.EAMWorkOrderActivity				= PurchaseOrderReceiptLine.PurchaseOrderLine.EAMWorkOrderActivity
					
					LocalPostingType					= InventoryTransactionLineDistribution.PostingType.Inventory
					if (PurchaseOrder.ProcessLevel.ReceiptAccrualAccount entered)
						LocalDistributionAccount		= PurchaseOrder.ProcessLevel.ReceiptAccrualAccount
					else
						LocalDistributionAccount		= MatchCompanyRel.ReceiptAccrualAccount
					LocalDistributionAmount				= (DerivedLineStockUnitCost * (ArchivedQuantity * VendorPriceUOMMultiplier))
					LocalDistributionQuantity			= ArchivedQuantity * VendorPriceUOMMultiplier
					include CreateInventoryTransactionLineDistribution
					
					LocalPostingType					= InventoryTransactionLineDistribution.PostingType.Offset
					if (PurchaseOrder.ProcessLevel.UnderbillAccount entered)
						LocalDistributionAccount		= PurchaseOrder.ProcessLevel.UnderbillAccount
					else
					if (PurchaseOrder.ProcessLevel.InventoryReceiptArchivalAccount entered)
						LocalDistributionAccount		= PurchaseOrder.ProcessLevel.InventoryReceiptArchivalAccount
					else
						if (MatchCompanyRel.UnderbillAccount entered)
							LocalDistributionAccount	= MatchCompanyRel.UnderbillAccount
						else 
							LocalDistributionAccount	= MatchCompanyRel.InventoryReceiptArchivalAccount
					LocalDistributionAmount				*= -1
					LocalDistributionQuantity			*= -1
					include CreateInventoryTransactionLineDistribution
					
					invoke FinalRelease Unreleased LocalInventoryTransaction
						invoked.PrmSkipDistributionFromPO = true
						
					invoke Create PurchaseOrderReceiptLineArchiveDistribution
						fill in fields from this instance
						invoked.DistributionQuantity		= LocalInventoryTransactionLine.Quantity * LocalInventoryTransactionLine.TransactionUOMMultiplier
						invoked.InventoryLocation			= ShipToLocation
						if (PurchaseOrder.ProcessLevel.ReceiptAccrualAccount entered)
							invoked.DistributionAccount		= PurchaseOrder.ProcessLevel.ReceiptAccrualAccount
						else
							invoked.DistributionAccount		= MatchCompanyRel.ReceiptAccrualAccount

					invoke Create PurchaseOrderReceiptLineArchiveDistribution
						fill in fields from this instance
						invoked.DistributionQuantity			= LocalInventoryTransactionLine.Quantity * LocalInventoryTransactionLine.TransactionUOMMultiplier * -1
						invoked.InventoryLocation				= ShipToLocation
						if (PurchaseOrder.ProcessLevel.UnderbillAccount entered)
							invoked.DistributionAccount			= PurchaseOrder.ProcessLevel.UnderbillAccount
						else
							if (PurchaseOrder.ProcessLevel.InventoryReceiptArchivalAccount entered)
								invoked.DistributionAccount		= PurchaseOrder.ProcessLevel.InventoryReceiptArchivalAccount
							else
								if (MatchCompanyRel.UnderbillAccount entered)
									invoked.DistributionAccount	= MatchCompanyRel.UnderbillAccount
								else 
									invoked.DistributionAccount	= MatchCompanyRel.InventoryReceiptArchivalAccount
			Exit Rules
				if (MatchedQuantity not = DerivedBuyUOMQuantity 
				and not PurchaseOrderReceipt.Status.ArchivedClosed)
					if (PurchaseOrderReceipt.OpenToMatchQuantityTotal = 0)
						invoke UpdateFromReceiptLine PurchaseOrderReceipt
							invoked.PrmArchiving		= true
							invoked.PrmStatus 			= PurchaseOrderReceipt.Status.ArchivedClosed

		PurgeReceiptLineSet is a Set Action
			restricted
			Parameters
				PrmCompany	is a PurchasingCompany
				PrmReceipt	is a PurchaseOrderReceipt
			Instance Selection
				include deleted records
				where (Company				= PrmCompany
				and    PurchaseOrderReceipt	= PrmReceipt)
			Action Rules
				Set Rules
					Exit Rules
						invoke PurgeReceipt PrmReceipt
				Instance Rules
					invoke Purge

		Purge is a Purge Action
			restricted
			bypass relational integrity rules
			Entrance Rules
				invoke Purge PurgePurchaseOrderReceiptLineDistributionRel
				invoke Purge PurgePurchaseOrderReceiptLineCommentRel
				invoke Purge PurgePOReceiptLineTemplateRel



		CreateLineLevelArrivalRecord is an Instance Action
			restricted
			Action Rules
				if (not InspectionRequired)
					for each PurchaseOrderReceiptTracking set
						invoke CreateArrival each
						
		LineDeliveryUpdate is an Instance Action
			restricted
			Local Fields
				RemainingReceivedQuantity		is like Quantity
				LocalDeliveredQuantity			is like Quantity
			Action Rules
			

				FullyDelivered 				= true
			

				RemainingReceivedQuantity 	= EnteredReceivedQuantity

				if (HasItemMaster 
				and ReceivedUOM not = PurchaseOrderLine.EnteredBuyUOM)
					initialize UOMCalculation
					UOMCalculation.InputQuantity			= RemainingReceivedQuantity
					UOMCalculation.InputUOM					= ReceivedUOM
					UOMCalculation.InputToUOM				= PurchaseOrderLine.EnteredBuyUOM
					UOMCalculation.Method					= UOMCalculation.Method.ConvertToAlternate
					UOMCalculation.InputDecimal				= Item.NumberOfDecimalsQuantity
					UOMCalculation.DoRounding				= true
					RemainingReceivedQuantity 				= UOMCalculation.OutputQuantity
			
				for each RequisitionLineSourcesToDeliverRel
					if (PurchaseOrderLine.EnteredBuyUOM not = each.EnteredUOM)
						initialize UOMCalculation
						UOMCalculation.InputQuantity			= RemainingReceivedQuantity
						UOMCalculation.InputUOM					= PurchaseOrderLine.EnteredBuyUOM
						UOMCalculation.InputToUOM				= each.EnteredUOM
						UOMCalculation.Method					= UOMCalculation.Method.ConvertToAlternate
						UOMCalculation.InputDecimal				= Item.NumberOfDecimalsQuantity
						UOMCalculation.DoRounding				= true
						RemainingReceivedQuantity 				= UOMCalculation.OutputQuantity
					if (IsCatchWeightItem) 
						LocalDeliveredQuantity 				= EnteredReceivedQuantity
					else
					if (RemainingReceivedQuantity > 0)
						if (RemainingReceivedQuantity > each.DerivedQuantityToDeliver)
							LocalDeliveredQuantity 			= each.DerivedQuantityToDeliver
						else
							LocalDeliveredQuantity 			= RemainingReceivedQuantity
							
						RemainingReceivedQuantity 			= RemainingReceivedQuantity - LocalDeliveredQuantity 
					else
						initialize LocalDeliveredQuantity
					

					if (LocalDeliveredQuantity entered)
						invoke SourceDeliveryUpdate each
							invoked.PrmPurchaseOrderReceipt	= PurchaseOrderReceipt
							invoked.PrmDeliveredQuantity	= LocalDeliveredQuantity
							if (IsCatchWeightItem)
								invoked.PrmCatchWeightQuantity	= CatchWeightQuantity

		CreatePutawayDocuments is an Instance Action
			restricted
			Parameters
				PrmPutawayDocumentReport			is a PurchaseOrderResult
				PrmRunBatchID						is like IDMPID
			
			Local Fields
				SavedPutawayDocumentReportHeading	is a PurchaseOrderResultHeading view
				SavePurchaseOrderPutaway			is a PurchaseOrderPutAway view
				LocalPutawayDocumentReportHeading	is a PurchaseOrderResultHeading
				LocalPurchaseOrderPutaway			is like PurchaseOrderPutAway
				RemainingReceivedQuantity			is like Quantity				
			Action Rules
				LocalRunBatchID				= PrmRunBatchID
				RemainingReceivedQuantity	= EnteredReceivedQuantity
				
				include ConvertQuantityToPurchaseOrderUOM
				
				if (Company.UseIDM)
					if (PurchaseOrderPutawayHeaderForLocationRel not exists)
						invoke Create PurchaseOrderPutAway
							assign result to SavePurchaseOrderPutaway
							invoked.Company							= Company
							invoked.InventoryLocation				= ShipToLocation
							invoked.RunBatchID						= PrmRunBatchID
							invoked.CurrentUser						= actor
						
						LocalPurchaseOrderPutaway				= SavePurchaseOrderPutaway.PurchaseOrderPutAway
					else
						LocalPurchaseOrderPutaway				= first PurchaseOrderPutawayHeaderForLocationRel.PurchaseOrderPutAway
					
					invoke Create PurchaseOrderPutAwayLines
						invoked.Company								= Company
						invoked.InventoryLocation					= ShipToLocation
						invoked.PurchaseOrderPutAway				= LocalPurchaseOrderPutaway
						invoked.PurchaseOrderReceipt				= PurchaseOrderReceipt
						invoked.PurchaseOrderReceiptLine			= PurchaseOrderReceiptLine
						invoked.PurchaseOrder						= PurchaseOrder
						
				else
					LocalPutawayDocumentReport	= PrmPutawayDocumentReport
								
					if (PutawayHeadingForLocationRel not exists)
						
						invoke Create PurchaseOrderResultHeading
							assign result to SavedPutawayDocumentReportHeading
							invoked.FinanceEnterpriseGroup			= GeneralLedgerCompanyRel.FinanceEnterpriseGroup
		                    invoked.PurchaseOrderResult				= PrmPutawayDocumentReport
		                    invoked.PurchasingCompany				= Company
		                    invoked.InventoryLocation				= ShipToLocation						
						
		                LocalPutawayDocumentReportHeading 			= SavedPutawayDocumentReportHeading.PurchaseOrderResultHeading
	                else
	                   	LocalPutawayDocumentReportHeading			= PutawayHeadingForLocationRel.PurchaseOrderResultHeading
	    			
	    			invoke Create PurchaseOrderResultDetail
						invoked.FinanceEnterpriseGroup				= GeneralLedgerCompanyRel.FinanceEnterpriseGroup
	                    invoked.PurchaseOrderResult					= PrmPutawayDocumentReport
	                    invoked.PurchaseOrderResultHeading			= LocalPutawayDocumentReportHeading
	                    invoked.PurchasingCompany					= Company
	                    invoked.PurchaseOrderReceipt				= PurchaseOrderReceipt
	                    invoked.PurchaseOrderReceiptLine			= PurchaseOrderReceiptLine
						invoked.ReceivedQuantity					= RemainingReceivedQuantity					

        CreateDeliveryTicketDocuments is an Instance Action
        	restricted
            Parameters
				PrmDeliveryAndBackorderDocumentReport    is a PurchaseOrderResult
				PrmRunBatchID							 is like IDMPID
				
            Local Fields
				SavedDeliveryDocumentReportHeading 		 is a PurchaseOrderResultHeading view
				SavedReceivingDeliveryTickets			 is a ReceivingDeliveryTickets view
                LocalDeliveryDocumentReportHeading		 is like PurchaseOrderResultHeading
                LocalReceivingDeliveryTickets			 is like ReceivingDeliveryTickets
                RemainingReceivedQuantity                is like Quantity
                LocalBackorderedQuantity				 	 is like Quantity
               
            Action Rules
				LocalRunBatchID				= PrmRunBatchID
            	LocalDeliveryDocumentReport	= PrmDeliveryAndBackorderDocumentReport
				RemainingReceivedQuantity	= EnteredReceivedQuantity
				
				include ConvertQuantityToPurchaseOrderUOM 	
				if (LineSourcesForPrintingRel exists)
					
					for each LineSourcesForPrintingRel
						LocalRequestingLocation        	= each.RequestingLocation
                        LocalSourceDocumentNumeric    	= each.PurchaseOrderLineSource.SourceDocumentNumeric
					
						if (Company.UseIDM)
							if (ReceivingDeliveryTicketsForLineSourceRel not exists)
								invoke Create ReceivingDeliveryTickets
									assign result to SavedReceivingDeliveryTickets
									invoked.Company							= Company
									invoked.PurchaseOrderReceipt			= PurchaseOrderReceipt
									invoked.SourceDocumentOrigin			= each.PurchaseOrderLineSource.SourceDocumentOrigin
									invoked.OperatingCompany				= each.PurchaseOrderLineSource.OperatingCompany
									invoked.SourceDocumentNumeric			= LocalSourceDocumentNumeric
									invoked.SourceDocumentAlpha				= each.PurchaseOrderLineSource.SourceDocumentAlpha
									invoked.SourceDocumentLineNumber		= each.PurchaseOrderLineSource.SourceDocumentLineNumber
									invoked.PurchaseOrder					= PurchaseOrder
									invoked.PurchaseOrderLine				= each.PurchaseOrderLine
									invoked.FromLocation					= PurchaseOrder.PurchaseFromLocation
									invoked.RequestingLocation				= LocalRequestingLocation
									invoked.RunBatchID						= PrmRunBatchID
									invoked.CurrentUser						= actor
								
								LocalReceivingDeliveryTickets			= SavedReceivingDeliveryTickets.ReceivingDeliveryTickets
							else
								LocalReceivingDeliveryTickets			= first ReceivingDeliveryTicketsForLineSourceRel.ReceivingDeliveryTickets
								
							include CalculateBackorderedQuantityFromDerived

							invoke Create ReceivingDeliveryTicketLines
								invoked.Company								= Company
								invoked.ReceivingDeliveryTickets			= LocalReceivingDeliveryTickets
								invoked.PurchaseOrderReceipt				= PurchaseOrderReceipt
								invoked.PurchaseOrderReceiptLine			= PurchaseOrderReceiptLine
								invoked.SourceDocumentOrigin				= each.PurchaseOrderLineSource.SourceDocumentOrigin
								invoked.OperatingCompany					= each.PurchaseOrderLineSource.OperatingCompany
								invoked.SourceDocumentNumeric				= LocalSourceDocumentNumeric
								invoked.SourceDocumentAlpha					= each.PurchaseOrderLineSource.SourceDocumentAlpha
								invoked.SourceDocumentLineNumber			= each.PurchaseOrderLineSource.SourceDocumentLineNumber
								invoked.OrderedLessCancelledQty				= each.Quantity
								if ((each.DeliveredQuantity + RemainingReceivedQuantity) <= each.Quantity)
									invoked.ReceivedQty						= RemainingReceivedQuantity
									invoked.BackOrderedQty					= LocalBackorderedQuantity
									initialize RemainingReceivedQuantity
								else
									invoked.ReceivedQty						= each.Quantity - each.DeliveredQuantity
									RemainingReceivedQuantity				= RemainingReceivedQuantity - (each.Quantity - each.DeliveredQuantity)
								
						else

							if (DeliveryReportHeadingForLineSourceRel not exists)

								invoke Create PurchaseOrderResultHeading
									assign result to SavedDeliveryDocumentReportHeading
									invoked.FinanceEnterpriseGroup			= GeneralLedgerCompanyRel.FinanceEnterpriseGroup
				                    invoked.PurchaseOrderResult				= PrmDeliveryAndBackorderDocumentReport
				                    invoked.PurchasingCompany				= Company
				                    invoked.InventoryLocation				= ShipToLocation
				                    invoked.PurchaseOrder					= PurchaseOrder
				                    invoked.PurchaseOrderReceipt			= PurchaseOrderReceipt
				                    invoked.RequestingLocation				= LocalRequestingLocation
	                                invoked.SourceDocumentNumeric    		= LocalSourceDocumentNumeric
	                                invoked.SourceDocumentOrigin    		= each.PurchaseOrderLineSource.SourceDocumentOrigin
	                                invoked.InventoryCompany        		= Company
	                                invoked.InventoryLocation          		= PurchaseOrder.ShipToLocation
		                    
	                        	LocalDeliveryDocumentReportHeading 		= SavedDeliveryDocumentReportHeading.PurchaseOrderResultHeading
	                        else
	                        	LocalDeliveryDocumentReportHeading		= DeliveryReportHeadingForLineSourceRel.PurchaseOrderResultHeading
                        	

							include CalculateBackorderedQuantityFromDerived

	            			invoke Create PurchaseOrderResultDetail
								invoked.FinanceEnterpriseGroup				= GeneralLedgerCompanyRel.FinanceEnterpriseGroup
			                    invoked.PurchaseOrderResult					= PrmDeliveryAndBackorderDocumentReport
			                    invoked.PurchaseOrderResultHeading			= LocalDeliveryDocumentReportHeading
			                    invoked.PurchasingCompany					= Company
			                    invoked.PurchaseOrderReceipt				= PurchaseOrderReceipt
			                    invoked.PurchaseOrderReceiptLine			= PurchaseOrderReceiptLine
								invoked.SourceDocumentLineNumber        	= each.PurchaseOrderLineSource.SourceDocumentLineNumber
	                            invoked.OrderedLessCancelledQuantity    	= each.Quantity
	                            if ((each.DeliveredQuantity + RemainingReceivedQuantity) <= each.Quantity)
	                                invoked.ReceivedQuantity            	= RemainingReceivedQuantity
	                                invoked.BackorderedQuantity         	= LocalBackorderedQuantity
	                                initialize RemainingReceivedQuantity
	                            else
	                                invoked.ReceivedQuantity    			= each.Quantity - each.DeliveredQuantity
	                                RemainingReceivedQuantity				= RemainingReceivedQuantity - (each.Quantity - each.DeliveredQuantity)                        
                                
                        if (RemainingReceivedQuantity = 0)
                        	end for each
				
				else
					if (PurchaseOrderLineSourcesRel not exists)
						
						if (Company.UseIDM)
							
							if (ReceivingDeliveryTicketsForReceiptRel not exists)
								invoke Create ReceivingDeliveryTickets
									assign result to SavedReceivingDeliveryTickets
									invoked.Company							= Company
									invoked.PurchaseOrderReceipt			= PurchaseOrderReceipt
									invoked.PurchaseOrder					= PurchaseOrder
									invoked.FromLocation					= PurchaseOrder.PurchaseFromLocation
									invoked.RunBatchID						= PrmRunBatchID
									invoked.CurrentUser						= actor
								
								LocalReceivingDeliveryTickets	= SavedReceivingDeliveryTickets.ReceivingDeliveryTickets
							else
								LocalReceivingDeliveryTickets	= first ReceivingDeliveryTicketsForReceiptRel.ReceivingDeliveryTickets
							
							invoke Create ReceivingDeliveryTicketLines
								invoked.Company								= Company
								invoked.ReceivingDeliveryTickets			= LocalReceivingDeliveryTickets
								invoked.PurchaseOrderReceipt				= PurchaseOrderReceipt
								invoked.PurchaseOrderReceiptLine			= PurchaseOrderReceiptLine
								invoked.OrderedLessCancelledQty				= PurchaseOrderLine.QuantityToProcess
								invoked.ReceivedQty							= RemainingReceivedQuantity
								invoked.BackOrderedQty						= DerivedQuantityToReceiptUOM
							
						else
						

							if (DeliveryReportHeadingForReceiptRel not exists)
								
								invoke Create PurchaseOrderResultHeading
									assign result to SavedDeliveryDocumentReportHeading
									invoked.FinanceEnterpriseGroup			= GeneralLedgerCompanyRel.FinanceEnterpriseGroup
				                    invoked.PurchaseOrderResult				= PrmDeliveryAndBackorderDocumentReport
				                    invoked.PurchasingCompany				= Company
				                    invoked.InventoryLocation				= ShipToLocation
	                                invoked.InventoryCompany        		= Company
	                                invoked.PurchaseOrderReceipt			= PurchaseOrderReceipt
				                    invoked.PurchaseOrder					= PurchaseOrder	
								
	                        	LocalDeliveryDocumentReportHeading 			= SavedDeliveryDocumentReportHeading.PurchaseOrderResultHeading
	                        else
	                        	LocalDeliveryDocumentReportHeading			= DeliveryReportHeadingForLineSourceRel.PurchaseOrderResultHeading
	            			

	            			
	            			invoke Create PurchaseOrderResultDetail
								invoked.FinanceEnterpriseGroup				= GeneralLedgerCompanyRel.FinanceEnterpriseGroup
			                    invoked.PurchasingCompany					= Company
			                    invoked.PurchaseOrderResult					= PrmDeliveryAndBackorderDocumentReport
			                    invoked.PurchaseOrderResultHeading			= LocalDeliveryDocumentReportHeading
			                    invoked.PurchaseOrderReceipt				= PurchaseOrderReceipt
			                    invoked.PurchaseOrderReceiptLine			= PurchaseOrderReceiptLine
	                            invoked.OrderedLessCancelledQuantity    	= PurchaseOrderLine.QuantityToProcess
	                            invoked.ReceivedQuantity					= RemainingReceivedQuantity
	                            invoked.BackorderedQuantity         		= DerivedQuantityToReceiptUOM
            			
		CreateBackOrderDocuments is an Instance Action
			restricted
            Parameters
            	PrmDeliveryAndBackorderDocumentReport    	is a PurchaseOrderResult
				PrmRunBatchID							 	is like IDMPID
            Local Fields
          		SavedBackorderDocumentReportHeading			is a PurchaseOrderResultHeading view
          		SavedReceivingBackorders					is a ReceivingBackOrders view
          		LocalBackorderDocumentReportHeading			is like PurchaseOrderResultHeading
          		LocalReceivingBackorders					is like ReceivingBackOrders
                RemainingReceivedQuantity               	is like Quantity
                LocalBackorderedQuantity						is like Quantity
            Action Rules
				LocalRunBatchID					= PrmRunBatchID
            	LocalBackorderDocumentReport	= PrmDeliveryAndBackorderDocumentReport
				RemainingReceivedQuantity		= EnteredReceivedQuantity
				
				include ConvertQuantityToPurchaseOrderUOM
				if (PurchaseOrderLine.QuantityToProcess > PurchaseOrderLine.ReceivedQuantity)
					if (LineSourcesForPrintingRel exists)
						
						for each LineSourcesForPrintingRel
							LocalRequestingLocation        	= each.RequestingLocation
	                        LocalSourceDocumentNumeric    	= each.PurchaseOrderLineSource.SourceDocumentNumeric
	                        
                            if (RemainingReceivedQuantity >= (each.Quantity - each.DeliveredQuantity))

                            	RemainingReceivedQuantity -= (each.Quantity - each.DeliveredQuantity)
                            
                            else
                            	
                            	if (Company.UseIDM)
									
									if (ReceivingBackordersForSourceRel not exists)
										invoke Create ReceivingBackOrders
											assign result to SavedReceivingBackorders
											invoked.Company							= Company
											invoked.PurchaseOrder					= PurchaseOrder
											invoked.RequestingLocation				= LocalRequestingLocation
											invoked.SourceDocumentOrigin			= each.PurchaseOrderLineSource.SourceDocumentOrigin
											invoked.OperatingCompany				= each.PurchaseOrderLineSource.OperatingCompany
											invoked.SourceDocumentNumeric			= LocalSourceDocumentNumeric
											invoked.SourceDocumentAlpha				= each.PurchaseOrderLineSource.SourceDocumentAlpha
											invoked.SourceDocumentLineNumber		= each.PurchaseOrderLineSource.SourceDocumentLineNumber
											invoked.PurchaseOrderLine				= PurchaseOrderLine
											invoked.RunBatchID						= PrmRunBatchID
											invoked.CurrentUser						= actor	
									
										LocalReceivingBackorders				= SavedReceivingBackorders.ReceivingBackOrders
									else
										LocalReceivingBackorders				= first ReceivingBackordersForSourceRel.ReceivingBackOrders
										
	                            		initialize RemainingReceivedQuantity
										
									include CalculateBackorderedQuantityFromDerived

									invoke Create ReceivingBackOrderLines
										invoked.Company								= Company
										invoked.ReceivingBackOrders					= LocalReceivingBackorders
										invoked.PurchaseOrder						= PurchaseOrder
										invoked.RequestingLocation					= LocalRequestingLocation
										invoked.PurchaseOrderLine					= PurchaseOrderLine
										invoked.SourceDocumentOrigin				= each.PurchaseOrderLineSource.SourceDocumentOrigin
										invoked.OperatingCompany					= each.PurchaseOrderLineSource.OperatingCompany
										invoked.SourceDocumentNumeric				= LocalSourceDocumentNumeric
										invoked.SourceDocumentAlpha					= each.PurchaseOrderLineSource.SourceDocumentAlpha
										invoked.SourceDocumentLineNumber			= each.PurchaseOrderLineSource.SourceDocumentLineNumber
										invoked.BackOrderedQty						= LocalBackorderedQuantity
									
                            	else 

			                        if (BackOrderHeadingForSourceRel not exists)
										invoke Create PurchaseOrderResultHeading
											assign result to SavedBackorderDocumentReportHeading
											invoked.FinanceEnterpriseGroup			= GeneralLedgerCompanyRel.FinanceEnterpriseGroup
						                    invoked.PurchaseOrderResult				= PrmDeliveryAndBackorderDocumentReport
						                    invoked.PurchasingCompany				= Company
						                    invoked.InventoryLocation				= ShipToLocation
			                                invoked.InventoryCompany        		= Company
			                                invoked.PurchaseOrderReceipt			= PurchaseOrderReceipt
	        			                    invoked.PurchaseOrder					= PurchaseOrder		                        
		                                    invoked.RequestingLocation        		= LocalRequestingLocation
		                                    invoked.SourceDocumentNumeric    		= LocalSourceDocumentNumeric
		                                    invoked.SourceDocumentOrigin    		= each.PurchaseOrderLineSource.SourceDocumentOrigin
		                                    invoked.InventoryLocation          		= PurchaseOrder.ShipToLocation
		                                    invoked.InventoryCompany        		= Company
		                                    invoked.IsBackorder                		= true
			                        
	                            		LocalBackorderDocumentReportHeading 	= SavedBackorderDocumentReportHeading.PurchaseOrderResultHeading
			                        else
			                        	LocalBackorderDocumentReportHeading		= BackOrderHeadingForSourceRel.PurchaseOrderResultHeading
			                            	

									include CalculateBackorderedQuantityFromDerived
	                            	

	    	            			invoke Create PurchaseOrderResultDetail
										invoked.FinanceEnterpriseGroup				= GeneralLedgerCompanyRel.FinanceEnterpriseGroup
					                    invoked.PurchasingCompany					= Company
					                    invoked.PurchaseOrderResult					= PrmDeliveryAndBackorderDocumentReport
					                    invoked.PurchaseOrderResultHeading			= LocalBackorderDocumentReportHeading
					                    invoked.PurchaseOrderReceipt				= PurchaseOrderReceipt
					                    invoked.PurchaseOrderReceiptLine			= PurchaseOrderReceiptLine
	   	 								invoked.SourceDocumentLineNumber        	= each.PurchaseOrderLineSource.SourceDocumentLineNumber
		                                invoked.OrderedLessCancelledQuantity    	= each.Quantity
	                                	invoked.BackorderedQuantity					= LocalBackorderedQuantity
                            	
	            	else
	            		if (PurchaseOrderLineSourcesRel not exists)
	            		
	            		
	            			if (Company.UseIDM)
	            				if (ReceivingBackordersForReceiptRel not exists)
	            					invoke Create ReceivingBackOrders
		            					assign result to SavedReceivingBackorders
		            					invoked.Company								= Company
		            					invoked.PurchaseOrder						= PurchaseOrder
										invoked.RunBatchID							= PrmRunBatchID
										invoked.CurrentUser							= actor
	            					
	            					LocalReceivingBackorders				= SavedReceivingBackorders.ReceivingBackOrders
	            				
	            				else
	            					LocalReceivingBackorders				= first ReceivingBackordersForReceiptRel.ReceivingBackOrders
	            				
	            				invoke Create ReceivingBackOrderLines
	            					invoked.Company									= Company
	            					invoked.ReceivingBackOrders						= LocalReceivingBackorders
	            					invoked.PurchaseOrder							= PurchaseOrder
	            					invoked.PurchaseOrderLine						= PurchaseOrderLine
	            					invoked.BackOrderedQty							= DerivedQuantityToReceiptUOM
	            			else

		            			if (BackorderReportHeadingForReceiptRel not exists)
									invoke Create PurchaseOrderResultHeading
										assign result to SavedBackorderDocumentReportHeading
										invoked.FinanceEnterpriseGroup			= GeneralLedgerCompanyRel.FinanceEnterpriseGroup
					                    invoked.PurchaseOrderResult				= PrmDeliveryAndBackorderDocumentReport
					                    invoked.PurchasingCompany				= Company
		                                invoked.PurchaseOrderReceipt			= PurchaseOrderReceipt
	    			                    invoked.PurchaseOrder					= PurchaseOrder		                        
	                                    invoked.InventoryLocation          		= PurchaseOrder.ShipToLocation
		                                invoked.InventoryCompany        		= Company
	                                    invoked.IsBackorder                		= true

	                        		LocalBackorderDocumentReportHeading 	= SavedBackorderDocumentReportHeading.PurchaseOrderResultHeading
		                        else
		                        	LocalBackorderDocumentReportHeading		= BackOrderHeadingForSourceRel.PurchaseOrderResultHeading
	                            

		            			invoke Create PurchaseOrderResultDetail
									invoked.FinanceEnterpriseGroup				= GeneralLedgerCompanyRel.FinanceEnterpriseGroup
				                    invoked.PurchasingCompany					= Company
				                    invoked.PurchaseOrderResult					= PrmDeliveryAndBackorderDocumentReport
				                    invoked.PurchaseOrderResultHeading			= LocalBackorderDocumentReportHeading
				                    invoked.PurchaseOrderReceipt				= PurchaseOrderReceipt
				                    invoked.PurchaseOrderReceiptLine			= PurchaseOrderReceiptLine
		                            invoked.OrderedLessCancelledQuantity   		= PurchaseOrderLine.QuantityToProcess
		                            invoked.BackorderedQuantity             	= DerivedQuantityToReceiptUOM 
							


		PutOnHold is an Instance Action 
			restricted
			Action Rules
				TemporaryHold = TemporaryHold.SentForApproval

		TaxEngineApprove is an Instance Action 
			restricted
			Action Rules
				TemporaryHold = TemporaryHold.ApprovedByEngine
					
		TaxEngineReject is an Instance Action
			restricted
			Action Rules
				TemporaryHold = TemporaryHold.RejectedByEngine

					

		InspectionReqAlert is an Instance Action
			restricted
			Parameters
			Action Rules
				if (GeneralLedgerCompanyRel.FinanceEnterpriseGroup.BODTrigger and FSMBODConfigurationPARel.Enable)
      				if(FSMBODConfigurationDetailPARel.Enable)	
						invoke TriggerPulseAlert FSMBODConfigurationPARel
							invoked.PrmActorGroup 	= "LEVEL1" 
							invoked.PrmMainXML 		= InspectionReqAlertXML	
							invoked.PrmDescription	= InspectionReqDescription
							invoked.PrmBODID		= DerivedBODID



		ProcessPurchaseOrderReceiptTracking is a Set Action
			restricted
			Parameters
                PrmPurchasingCompany            is a PurchasingCompany
                    default label is "PurchasingCompany"
                PrmPurchaseOrderReceipt 		is a PurchaseOrderReceipt
                    default label is "PurchaseOrderReceipt"
			Sort Order is Set7 
			
			Local Fields
				LocalTrackingNumber                                    is a TrackingNumber
				LocalRemainingReceivedQuantity						   is like Quantity
				LocalDeliveredQuantity								   is like Quantity
				LocalTrackingNumberExist							   is Boolean
            Instance Selection
                where (Company					= PrmPurchasingCompany
                and    PurchaseOrderReceipt		= PrmPurchaseOrderReceipt
				and    not InspectionRequired
				and    not IsUDITracked)
				
			Action Rules
				Instance Rules
					FullyDelivered 	= true

					if 	(IsNonInventory
						or MobileSupplyChainConfigurationRel.DeliveryInventoryItem)

						if  (MobileSupplyChainPurchaseOrderReceiptTrackingRel exists) 
							LocalTrackingNumberExist = true
							
						if (LineSourcesForPrintingRel exists) 

							LocalRemainingReceivedQuantity 	= EnteredReceivedQuantity

							for each LineSourcesForPrintingRel

								initialize LocalMSCMRequestingLocation
								initialize LocalDeliverTo

								if (IsCatchWeightItem)
									LocalDeliveredQuantity 				= EnteredReceivedQuantity

								else
								if (LocalRemainingReceivedQuantity > 0)
									if (LocalRemainingReceivedQuantity > each.DerivedQuantityToDeliver)
										LocalDeliveredQuantity 			= each.DerivedQuantityToDeliver
									else
										LocalDeliveredQuantity 			= LocalRemainingReceivedQuantity
										
									LocalRemainingReceivedQuantity 		= LocalRemainingReceivedQuantity - LocalDeliveredQuantity

								else
									end for each

								if (LocalDeliveredQuantity entered)
									if (each.PurchaseOrderLineSource.SourceDocumentOrigin	= SourceDocumentOrigin.Requisitions)
										invoke SourceDeliveryUpdate each
											invoked.PrmPurchaseOrderReceipt					= PurchaseOrderReceipt
											invoked.PrmDeliveredQuantity					= LocalDeliveredQuantity
											if (IsCatchWeightItem)
												invoked.PrmCatchWeightQuantity				= CatchWeightQuantity
									else
										invoke IncreaseDeliveredQuantity each
											invoked.PrmDeliveredQuantity					= LocalDeliveredQuantity


									if (IsNonInventory and not LocalTrackingNumberExist)
										LocalMSCMRequestingLocation	= each.RequestingLocation
										LocalDeliverTo				= each.DeliverTo

										include CreateMobileSupplyChainPOReceiptTrackingNumberHeader
									

										invoke SystemCreate MobileSupplyChainPurchaseOrderReceiptTracking
											invoked.Company                                                        = Company
											invoked.TrackingNumber                                                 = LocalTrackingNumber
											invoked.Quantity                                                       = LocalDeliveredQuantity
											invoked.PurchaseOrderReceipt                                           = PurchaseOrderReceipt
											invoked.PurchaseOrderReceiptLine                                       = PurchaseOrderReceiptLine
											invoked.Requisition                                                    = each.PurchaseOrderLineSource.SourceDocumentNumeric
											if (LocalMSCMRequestingLocation entered)
												invoked.DeliverToLocation										   = LocalMSCMRequestingLocation
											else	
												invoked.DeliverToLocation										   = ShipToLocation
											invoked.DeliverTo													   = LocalDeliverTo
											invoked.SourceDocumentLineNumber								       = each.PurchaseOrderLineSource.SourceDocumentLineNumber

						if (MobileSupplyChainPurchaseOrderReceiptTrackingRel not exists)

							initialize LocalMSCMRequestingLocation
							initialize LocalDeliverTo

							include CreateMobileSupplyChainPOReceiptTrackingNumberHeader		

							if (IsNonDetailTracked) 
								invoke SystemCreate MobileSupplyChainPurchaseOrderReceiptTracking
									invoked.Company                                                        = Company
									invoked.TrackingNumber                                                 = LocalTrackingNumber
									invoked.Quantity                                                       = EnteredReceivedQuantity
									invoked.PurchaseOrderReceipt                                           = PurchaseOrderReceipt
									invoked.PurchaseOrderReceiptLine                                       = PurchaseOrderReceiptLine
									invoked.DeliverToLocation									   		   = ShipToLocation
							else
							if (IsDetailTracked and not IsUDITracked) 
								for each PurchaseOrderTransactionDetailsRel
									invoke SystemCreate MobileSupplyChainPurchaseOrderReceiptTracking
										invoked.Company                                                        = Company
										invoked.TrackingNumber                                                 = LocalTrackingNumber
										if (IsCatchWeightItem)
											invoked.Quantity                                                   = each.SecondaryQuantity
										else
											invoked.Quantity												   = each.Quantity
										invoked.PurchaseOrderReceipt                                           = PurchaseOrderReceipt
										invoked.PurchaseOrderReceiptLine                                       = PurchaseOrderReceiptLine
										invoked.DeliverToLocation									   		   = ShipToLocation
										invoked.PurchaseOrderTransactionDetail.PurchaseTransactionDocumentType = each.PurchaseOrderTransactionDetail.PurchaseTransactionDocumentType
										invoked.PurchaseOrderTransactionDetail.DocumentNumberNumeric           = each.PurchaseOrderTransactionDetail.DocumentNumberNumeric
										invoked.PurchaseOrderTransactionDetail.LineNumber                      = each.PurchaseOrderTransactionDetail.LineNumber
										invoked.PurchaseOrderTransactionDetail.TransactionSequence             = each.PurchaseOrderTransactionDetail.TransactionSequence














		PutawayItem is an Instance Action
			valid when (IsADistributionManangementItem)
			Parameters
				PrmItem                 is an Item  
				PrmInventoryLocation    is an InventoryLocation 
				PrmLot                  is an ItemLot
				PrmSerial               is an ItemSerialNumber
				PrmSublot               is a Sublot
				PrmBin                  is a Bin
				PrmManufacturingDate    is a ManufacturingDate
				PrmShelfLife            is a ShelfLife
				PrmLotExpirationDate    is Date
				PrmLotOnHold            is Boolean
				PrmSecondaryQuantity    is a Quantity
				PrmQuantity             is a Quantity

			Parameter Rules
				PrmItem
					initial value is Item

				PrmInventoryLocation
					initial value is ShipToLocation

				PrmQuantity
					initial value is (EnteredReceivedQuantity - SumOfQuantity)
					if (IsDMCatchWeightItemAndNotSerialRequiredAtReceipt)
						required
							"Field_Catchweight_QuantityIsRequired"
					if (not IsSerialRequiredAtReceipt)
						required
							"Field_Put_AwayIsRequired"

				PrmShelfLife
					if (PrmLot.LotExpirationDate entered)
						PrmShelfLife = PrmLot.ShelfLife
				
				PrmSecondaryQuantity
					initial value is (EnteredReceivedQuantity - SumOfQuantity)
					if (IsDMCatchWeightItemAndNotSerialRequiredAtReceipt)
						required
							"Field_Put_AwayIsRequired"
				
				PrmLot
					if (IsLotRequiredAtReceipt)
						required
							"Field_LotIsRequired"
				
				PrmSerial
					if (IsSerialRequiredAtReceipt)
						required
							"Field_SerialIsRequired"
				
				PrmBin
					if (IsBinTracked)
						required
							"Field_BinIsRequired"

			Action Rules
				if ((SumOfQuantity + PrmQuantity) > EnteredReceivedQuantity)
					confirmation required
						"Put_Away_QuantityIsGreaterThan_Received_Quantity.Continue?"

				invoke Create PurchaseOrderTransactionDetail
					invoked.Company                                                         = Company
					invoked.PurchaseOrderTransactionDetail.PurchaseTransactionDocumentType  = PurchaseTransactionDocumentType.Receiving 
					invoked.PurchaseOrderTransactionDetail.DocumentNumberNumeric            = PurchaseOrderReceipt
					invoked.PurchaseOrderTransactionDetail.LineNumber                       = PurchaseOrderReceiptLine
					invoked.Lot                                                             = PrmLot
					invoked.Serial                                                          = PrmSerial
					invoked.Sublot                                                          = PrmSublot
					invoked.Bin                                                             = PrmBin
					invoked.ManufacturingDate                                               = PrmManufacturingDate
					invoked.ShelfLife                                                       = PrmShelfLife
					invoked.LotExpirationDate                                               = PrmLotExpirationDate
					invoked.LotOnHold                                                       = PrmLotOnHold
					if (IsDMCatchWeightItemAndNotSerialRequiredAtReceipt)
						invoked.SecondaryQuantity                                               = PrmSecondaryQuantity
					invoked.Quantity                                                        = PrmQuantity
