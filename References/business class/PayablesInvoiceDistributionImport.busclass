PayablesInvoiceDistributionImport is a BusinessClass
    owned by ap
    prefix is CVD
    sql name is PInvoiceDistributionImport
    classic name is APCDISTRIB

    Ontology
        symbolic key is PayablesInvoiceDistributionImport
            classic set name is CVDSET1
            sql name is PInvoiceDistributionImport
            classic name is DIST-SEQ-NBR


    Patterns
    	implements InlineUserFields
			size is 1000
        implements StaticJava
		enable explicit context override        
        disable AuditIndex
		disable Auditing 
       	disable EffectiveDated
       	disable DataTranslations

    Persistent Fields
		RunGroup
		Company 			   	 is a PayablesCompany
		Vendor
		EDINumber
		Invoice
		Suffix
		Sequence
        OldVendor
        DistributionAmount       is an InternationalAmount
            classic name is ORIG-TRAN-AMT
        TaxableAmount            is an InternationalAmount
            classic name is TAXABLE-AMT
        ToBaseAmount             is an InternationalAmount
            classic name is TO-BASE-AMT

        TaxIndicator
        TaxSequenceNumber
            classic name is TAX-SEQ-NBR
        TaxCode
        	classic name is TAX-CODE
        Description
        DistributionReference    is a Reference 
            classic name is DST-REFERENCE
        AssetDescription         is a Description
            classic name is ASSET-DESC
        TagNumber
            classic name is TAG-NBR
        Item
            classic name is ITEM-NBR
        ItemDescription
            classic name is ITEM-DESC
        ItemQuantity
        AssetTemplate
        InServiceDate            is Date
            classic name is INSRV-DATE
        PurchaseDate             is Date
        ModelNumber
        SerialNumber
        HoldAsset                is Boolean
            classic name is HOLD-AM
        Asset

        UnitAmount               is an InternationalAmount
            classic name is UNT-AMOUNT
            default label is "Units"
        ItemTaxTransactionAmount is an InternationalAmount
            classic name is ITEM-TAX-TRAN
        AssetGroup
        Combine
        AssetAccountingUnitGroup
            classic name is AU-GROUP
        AccountingUnit
            classic name is ACCT-UNIT
        TaxPoint                 is AlphaUpper size 1
            States
                Invoice value is "I"
                Payment value is "P"
        AddOnCharge
            classic name is PO-AOC-CODE
		AOCAmount					is an InternationalAmount	
        AssetDivision
            classic name is DIVISION
        AssetLocation
            classic name is LOCATION-NAME
        BarCode
        LocationDetail           is an AssetLocationDetail
            classic name is ITEM-LOC-DTL
        TaxUsageCode
            classic name is TAX-USAGE-CD
        DistributionUserField01  is an ItemUser1
            classic name is DST-USR-FLD-01
        DistributionUserField02  is an ItemUser1
            classic name is DST-USR-FLD-02
        DistributionUserField03  is an ItemUser1
            classic name is DST-USR-FLD-03
        DistributionUserField04  is an ItemUser1
            classic name is DST-USR-FLD-04
        DistributionUserField05  is an ItemUser1
            classic name is DST-USR-FLD-05
        ICNCode
        StockWeight
            classic name is WEIGHT
        SupplementaryQuantity    is a Quantity
            classic name is SUPLMNTARY-QTY
        LineType                 is AlphaUpper size 1
        DistributionAccount      is a FinanceCodeBlock
            classic name for DistributionAccount.ToAccountingEntity is DIST-COMPANY
            classic name for DistributionAccount.AccountingUnit is DIS-ACCT-UNIT
            classic name for DistributionAccount.GeneralLedgerChartAccount is DIS-ACCOUNT
            classic name for DistributionAccount.Project is ACTIVITY
        RecordInError           is Boolean		
        ErrorMessage			is Alpha 150	
		PayablesTaxInformation					
		HSNSACCode
		ShipToLocation			is an InventoryLocation		

	Context Fields
		ContextInvoiceImport is a PayablesInvoiceImport
		
	Field Rules
		RunGroup
			required
			default to PayablesInvoiceImportRel.RunGroup
			initial value is ContextInvoiceImport.RunGroup
			constraint (RunGroup = PayablesInvoiceImportRel.RunGroup)
				"RunGroup_<RunGroup>DoesNotMatchInvoiceRunGroup_<PayablesInvoiceImportRel.RunGroup>"

		Invoice
			required
			initial value is ContextInvoiceImport.Invoice
		
		EDINumber
			initial value is ContextInvoiceImport.EDINumber

		OldVendor
			initial value is ContextInvoiceImport.OldVendor
			
		Suffix
			initial value is ContextInvoiceImport.Suffix
				
		Sequence
			autosequence when blank using ByRunGroup		
				minimize contention and gaps
			required
    Local Fields
    	ImportedDistribution			is a PayablesInvoiceDistribution view
    	LocalDistribution				is like PayablesInvoiceDistribution




		LocalMoveErrorsToNewRunGroup  	is Boolean


		LocalErrorRunGroup				is a RunGroup

		VerifyPayablesMonitor    
		LocalCheckAPMonitor				is Alpha 1
		BypassDefaultTaxIndicator		is Boolean		

        ThisCompany						is like PayablesCompany
		ThisVendor						is like Vendor
		ThisOldVendor					is like OldVendor
		ThisEDINumber					is like EDINumber
		ThisInvoice						is like Invoice
		ThisSuffix						is like Suffix

		NextSentence					is Boolean
		
		LocalInterfaceRun				is like PayablesInvoiceInterfaceResult
		VerifyResultPayablesMonitor		is a VerifyPayablesMonitor
		
	Derived Fields
		DerivedVendor is a DerivedField
			type is like Vendor
			if  (Vendor not entered)
				if  (VendorForLegacyVendorRel exists)
					return first VendorForLegacyVendorRel.Vendor 
				else
				if (InterfaceMappingVendorRel exists)
					return first InterfaceMappingVendorRel.Vendor
			else
				return Vendor

		InterfacePostingMessage is a MessageField 
			restricted
			"JournalCreatedByPayablesInvoiceImport"
	Conditions
	
		IsHSNSACCodeEnabled
			restricted
			when (GeneralLedgerCompanyRel.RequireHSNSACCode)

	Relations
        PayablesInvoiceRel
        	one-to-many relation to PayablesInvoice
        	Field Mapping uses ByCompanyVendorInvoice
        		related.Company		= Company
        		related.Vendor		= Vendor
        		related.Invoice		= Invoice
        		related.Suffix		= Suffix

        PayablesInvoiceImportRel
            one-to-one relation to PayablesInvoiceImport
            Field Mapping uses ByCompanyVendorInvoice
                related.Company			 				= Company
				related.Vendor							= Vendor
				related.OldVendor						= OldVendor
				related.EDINumber						= EDINumber
				related.Invoice							= Invoice
				related.Suffix							= Suffix

		LocalDistributionRel
			one-to-one relation to PayablesInvoiceDistribution
			Field Mapping uses symbolic key
				related.Company							= Company
				related.PayablesInvoice					= PayablesInvoiceImportRel.PayablesInvoice
				related.PayablesInvoiceDistribution		= LocalDistribution

        ThisPayablesInvoiceImportRel
            one-to-one relation to PayablesInvoiceImport
            Field Mapping uses ByCompanyVendorInvoice
                related.Company			 				= ThisCompany
				related.Vendor							= ThisVendor
				related.OldVendor						= ThisOldVendor
				related.EDINumber						= ThisEDINumber
				related.Invoice							= ThisInvoice
				related.Suffix							= ThisSuffix

		VendorForLegacyVendorRel
            one-to-many relation to Vendor
            Field Mapping uses ByLegacyVendor
				related.VendorGroup						= Company.VendorGroup
				related.LegacyVendor					= OldVendor
			
		InterfaceMappingVendorRel
            one-to-many relation to VendorMappingTableInterface
            Field Mapping uses symbolic key
				related.VendorGroup								= Company.VendorGroup
			Instance Selection
				where (related.VendorMappingTableInterface.OldVendor	= OldVendor)

		GeneralLedgerCompanyRel
			one-to-one relation to GeneralLedgerCompany
			Field Mapping uses symbolic key
				related.Company			= Company

       	TaxEntityRel				 
            one-to-one relation to TaxEntity
            Field Mapping uses symbolic key
				related.FinanceEnterpriseGroup			= GeneralLedgerCompanyRel.FinanceEnterpriseGroup
                related.TaxEntity 						= GeneralLedgerCompanyRel.AccountingEntity
                
        EntityTaxCodeRel
            one-to-one relation to EntityTaxCode
            Field Mapping uses symbolic key
            	related.FinanceEnterpriseGroup			= GeneralLedgerCompanyRel.FinanceEnterpriseGroup
                related.TaxEntity 						= GeneralLedgerCompanyRel.AccountingEntity
                related.TaxCode 						= TaxCode

		GeneralLedgerSystemCodeRel
			one-to-one relation to GeneralLedgerSystemCode
			Field Mapping uses symbolic key
				related.FinanceEnterpriseGroup		= Company.FinanceEnterpriseGroup
				related.GeneralLedgerSystemCode		= "AP"

		BudgetEditConfigurationRel
			one-to-one relation to BudgetEditConfiguration
			Field Mapping uses symbolic key
				related.BudgetEditConfiguration = Company.FinanceEnterpriseGroup
	
	Sets
        ByRunGroup
            Sort Order
                RunGroup
                Company
				Vendor
				OldVendor
				EDINumber
				Invoice
				Suffix
				Sequence

        ByCompanyVendorInvoice
            Sort Order
                Company
				Vendor
				OldVendor
				EDINumber
				Invoice
				Suffix
				Sequence


	Rule Blocks
		TaxIndicatorDefaultProcess		
			if  (!BypassDefaultTaxIndicator
			and (TaxCode							entered	
			or   ShipToLocation.TaxCode 			entered		
			or   PayablesInvoiceImportRel.TaxCode	entered
			or   PayablesInvoiceImportRel.Location.PurchaseOrderTaxCode entered	
			or   PayablesInvoiceImportRel.Location.TaxCode entered))			
				if  (TaxIndicator			!entered
				and (TaxableAmount			 entered
				or   DistributionAmount 	 entered))
					if  (PayablesInvoiceImportRel.DistributionCode entered
					and !PayablesInvoiceImportRel.LinkTaxOnDistributions)
						NextSentence = true
					else
						if (Vendor.DefaultTaxIndicator entered)
							TaxIndicator 		= Vendor.DefaultTaxIndicator
						else
							if (Vendor.VendorClass.DefaultTaxIndicator entered)
								TaxIndicator 	= Vendor.VendorClass.DefaultTaxIndicator

	
	Create Rules
		constraint (PayablesInvoiceImportRel exists)
			"InterfaceInvoiceDoesNotExist"

	Actions
		Create is a Create Action
			Action Rules
				include TaxIndicatorDefaultProcess		

		CreateBypassFieldRules is a Create Action		
			restricted
			bypass field rules

		Update is an Update Action
		
		FastUpdate is an Update Action
			restricted
		    bypass field rules
		    
		Delete is a Delete Action
					
		FastDelete is a Delete Action
			restricted
			bypass relational integrity rules
					
 		SetErrorRunGroup is an Instance Action
 			restricted
 			Parameters
 				PrmErrorRunGroup	is like RunGroup
			Action Rules
				RunGroup			= PrmErrorRunGroup

		SetNewRunGroup is a Set Action		
			default label is untranslatable
			restricted
			Parameters
				PrmRunGroup		is like RunGroup
				PrmCompany		is like PayablesCompany
				PrmVendor		is like Vendor
				PrmOldVendor	is like OldVendor
				PrmEDINumber	is like EDINumber
				PrmInvoice		is like Invoice
				PrmSuffix		is like Suffix
				PrmNewRunGroup	is a RunGroup

			Sort Order is ByRunGroup

			Instance Selection
				where (PrmRunGroup	= RunGroup
				and    PrmCompany 	= Company
				and    PrmVendor 	= Vendor
				and    PrmOldVendor	= OldVendor
				and    PrmEDINumber	= EDINumber
				and    PrmInvoice	= Invoice
				and    PrmSuffix	= Suffix)

			Action Rules	
				Instance Rules
					RunGroup	= PrmNewRunGroup


		LoadInterfaceDistributions is a Set Action
			restricted
			run in background
			Parameters
				PrmFinanceEnterpriseGroup   is a FinanceEnterpriseGroup
				PrmRunGroup					is a RunGroup
					default label is "RunGroup"
				PrmCompany					is like PayablesCompany
				PrmAuthorityCode			is like PayablesAuthorityCode
		        PrmStatus                   is Alpha size 1
		            States
		                Unreleased value is 0
		                Open       value is 1
		                History    value is 9
				IncludeInvoicesInError		is Boolean
				PrmMoveErrorsToNewRunGroup  is Boolean
					default label is "MoveErrorsToNewRunGroup"
				PrmErrorRunGroupPrefix		is AlphaUpper 15
					default label is "ErrorRunGroupPrefix"
				PerformBalanceEdits			is Boolean
				PrmInterfaceRun				is a PayablesInvoiceInterfaceResult
				PrmJournalizeGroup			is like JournalizeGroup
				
			Parameter Rules
				PrmFinanceEnterpriseGroup
					default to actor.context.FinanceEnterpriseGroup
				PrmRunGroup
					required
						"RunGroupIsRequired"
				PerformBalanceEdits
					initial value is true
			Local Fields



				ThisPayablesInvoiceImport		is a PayablesInvoiceImport		

		        LocalTransactionTotal 			is an InternationalAmount	
		        LocalFunctionalTotal 			is an InternationalAmount
				LocalAlternateTotal  			is an InternationalAmount
				LocalAlternateTotal2 			is an InternationalAmount
				LocalAlternateTotal3			is an InternationalAmount
				LocalToFunctionalTotal			is an InternationalAmount
				LocalToAlternateTotal			is an InternationalAmount
				LocalToAlternateTotal2			is an InternationalAmount
				LocalToAlternateTotal3			is an InternationalAmount
				LocalProjectTotal				is an InternationalAmount
				LocalReportTotal1    			is an InternationalAmount
				LocalReportTotal2    			is an InternationalAmount
				LocalReportTotal3				is an InternationalAmount
				LocalReportTotal4				is an InternationalAmount
				LocalReportTotal5				is an InternationalAmount

				LocalInterfacedDistributionsAmountTotal		is an InternationalAmount
				LocalInterfacedDistributionsCount			is Numeric 10
				LocalInterfaceDistributionErrorCount		is Numeric 10
				LocalLargestTaxLine				is like PayablesInvoiceDistribution		
				LocalLargestTaxableAmount		is an InternationalAmount				
				LocalTaxableSum					is an InternationalAmount				
				LocalTaxVarianceAmount			is an InternalAmount					
				LocalLineTaxAdjustmentAmt		is an InternationalAmount				
				LocalRemainingAdjustmentAmt		is an InternationalAmount				
				LocalRoundedAdjustmentAmt		is an InternalAmount					
				LocalTaxSum 					is an InternationalAmount				
				LocalTotalCalcedTaxAmount		is an InternationalAmount				
				LastDistrib						is like PayablesInvoiceDistribution		
				LocalPayablesTaxTolerance		is Alpha size 1							
				LocalInTolerance				is Boolean								
				LocalTaxOOBAmount				is an InternationalAmount				
				LocalLastTimeStamp		 		is TimeStamp

			Instance Selection			//moved so a PayablesInvoiceInterfaceResult record could be created with a "No Records To Process" message
				where (PrmRunGroup	= RunGroup
				and    GeneralLedgerCompanyRel.FinanceEnterpriseGroup	= PrmFinanceEnterpriseGroup		
				and    (PrmCompany            			  not entered
				or      PrmCompany	= Company)
				and    (PrmAuthorityCode       			  not entered
				or      PrmAuthorityCode = PayablesInvoiceImportRel.AuthorityCode))

			Sort Order
				RunGroup
				Company
				Vendor
				OldVendor
				EDINumber
				Invoice
				Suffix
				Sequence

			Action Rules
				Set Rules
					Exit Rules








						invoke UpdateDistribCount PrmInterfaceRun //IEFIN-79058 - need to use action with "synchronized on"
							invoked.PrmInterfacedDistributionsAmountTotal	= LocalInterfacedDistributionsAmountTotal
							invoked.PrmInterfacedDistributionsCount		= LocalInterfacedDistributionsCount
							invoked.PrmInterfaceDistributionErrorCount		= LocalInterfaceDistributionErrorCount



				Company Set Rules
					Entrance Rules


						RecordInError							= false	
						initialize ErrorMessage
						LocalMoveErrorsToNewRunGroup  			= PrmMoveErrorsToNewRunGroup

					Exit Rules

						VerifyPayablesMonitor.RunGroup			= PrmRunGroup
						VerifyPayablesMonitor.Company 			= Company
						VerifyPayablesMonitor.RunProgram		= RunProgram.InvoiceInterface
						VerifyPayablesMonitor.ProcessGroup		= blank
						VerifyPayablesMonitor.ProcessLevel		= blank
						VerifyPayablesMonitor.AccountStructure	= blank
						VerifyPayablesMonitor.BatchNumber		= blank
						VerifyPayablesMonitor.AuthorityCode		= PrmAuthorityCode
						LocalCheckAPMonitor						= VerifyPayablesMonitor.EndMonitor
					
						LocalInterfaceRun						= PrmInterfaceRun

						if (!PrmInterfaceRun.Company entered)
							VerifyResultPayablesMonitor.RunGroup			= PrmRunGroup
							VerifyResultPayablesMonitor.Company 			= blank
							VerifyResultPayablesMonitor.RunProgram			= RunProgram.InvoiceInterface
							VerifyResultPayablesMonitor.ProcessGroup		= blank
							VerifyResultPayablesMonitor.ProcessLevel		= blank
							VerifyResultPayablesMonitor.AccountStructure	= blank
							VerifyResultPayablesMonitor.BatchNumber			= blank
							VerifyResultPayablesMonitor.AuthorityCode		= PrmAuthorityCode
							LocalCheckAPMonitor								= VerifyResultPayablesMonitor.CallVerifyInvoiceInterfacePayablesMonitor



						if (PrmInterfaceRun.Company entered
						or  VerifyResultPayablesMonitor.NoErrors)
							invoke UpdateStatus PrmInterfaceRun






						
				Suffix Set Rules
				
					Entrance Rules

			            initialize LocalTransactionTotal
			            initialize LocalFunctionalTotal
						initialize LocalAlternateTotal
						initialize LocalAlternateTotal2
						initialize LocalAlternateTotal3
						initialize LocalToFunctionalTotal
						initialize LocalToAlternateTotal
						initialize LocalToAlternateTotal2
						initialize LocalToAlternateTotal3
						initialize LocalProjectTotal
						initialize LocalReportTotal1
						initialize LocalReportTotal2
						initialize LocalReportTotal3
						initialize LocalReportTotal4
						initialize LocalReportTotal5
						initialize LocalLargestTaxLine			
		 				initialize LocalLargestTaxableAmount	
						initialize LocalTaxableSum				

		                ThisCompany			= Company
						ThisVendor			= Vendor
						ThisOldVendor		= OldVendor
						ThisEDINumber		= EDINumber
						ThisInvoice			= Invoice
						ThisSuffix			= Suffix
						
						ThisPayablesInvoiceImport = ThisPayablesInvoiceImportRel.PayablesInvoiceImport


					Exit Rules







						
						
						if (!PayablesInvoiceImportRel.PostingStatus.History)	

							if (ThisPayablesInvoiceImport.PayablesInvoice.TaxOutOfBalanceAmount != 0)		
								initialize LocalInTolerance
								if (ThisPayablesInvoiceImport.PayablesInvoice.TaxAmount entered)						
									LocalTotalCalcedTaxAmount = ThisPayablesInvoiceImport.PayablesInvoice.TaxAmount		
								else
									LocalTotalCalcedTaxAmount = sum ThisPayablesInvoiceImport.PayablesInvoice.NonVATReversalTaxDistibutionsRel.DistributionAmount.CurrencyAmount

								if (ThisPayablesInvoiceImport.PayablesInvoice.UsePayablesTaxTolerance)
									if (ThisPayablesInvoiceImport.PayablesInvoice.TaxOutOfBalanceAmount > (Company.TaxToleranceUnderAmount * -1)
									and ThisPayablesInvoiceImport.PayablesInvoice.TaxOutOfBalanceAmount < Company.TaxToleranceOverAmount)
										LocalInTolerance = true
								else	
									if (ThisPayablesInvoiceImport.PayablesInvoice.TaxOutOfBalanceAmount < 0)
										LocalTaxOOBAmount = ThisPayablesInvoiceImport.PayablesInvoice.TaxOutOfBalanceAmount * -1
									else
										LocalTaxOOBAmount = ThisPayablesInvoiceImport.PayablesInvoice.TaxOutOfBalanceAmount
									
									if (ThisPayablesInvoiceImport.PayablesInvoice.TaxEntityValue.UseTaxCodeAccounts)
										if (EntityTaxCodeRel.TaxToleranceAmount entered
										and EntityTaxCodeRel.TaxToleranceAmount > LocalTaxOOBAmount)
											LocalInTolerance = true
									else
										if (TaxEntityRel.TaxToleranceAmount entered
										and TaxEntityRel.TaxToleranceAmount > LocalTaxOOBAmount)
											LocalInTolerance = true





								if (LocalInTolerance)
									LocalTaxVarianceAmount 		= ThisPayablesInvoiceImport.PayablesInvoice.TaxOutOfBalanceAmount * -1	
									LocalRemainingAdjustmentAmt	= LocalTaxVarianceAmount												
									initialize LocalTaxSum
									LastDistrib	= ThisPayablesInvoiceImport.PayablesInvoice.last NonVATReversalTaxDistibutionsRel.PayablesInvoiceDistribution
									for each ThisPayablesInvoiceImport.PayablesInvoice.NonVATReversalTaxDistibutionsRel
										LocalLineTaxAdjustmentAmt = ((each.DistributionAmount.CurrencyAmount / LocalTotalCalcedTaxAmount) * LocalTaxVarianceAmount)
										if (each.PayablesInvoiceDistribution != LastDistrib)
											if (LocalLineTaxAdjustmentAmt >= .005
											or  LocalLineTaxAdjustmentAmt < -.005)

												invoke Update each
													LocalRoundedAdjustmentAmt					 = LocalLineTaxAdjustmentAmt	
													invoked.DistributionAmount.CurrencyAmount 	+= LocalRoundedAdjustmentAmt
													invoked.GLTransactionAmount 				+= LocalRoundedAdjustmentAmt
													LocalRemainingAdjustmentAmt 				-= LocalRoundedAdjustmentAmt	
											LocalTaxSum += each.DistributionAmount.CurrencyAmount
										else	
											if (LocalRemainingAdjustmentAmt >= .005
											or  LocalRemainingAdjustmentAmt < -.005)
												invoke Update each
													invoked.DistributionAmount.CurrencyAmount 	= (ThisPayablesInvoiceImport.PayablesInvoice.TaxAmount - LocalTaxSum)
													invoked.GLTransactionAmount 				= (ThisPayablesInvoiceImport.PayablesInvoice.TaxAmount - LocalTaxSum)


						if   (ThisPayablesInvoiceImport.PayablesInvoice entered
						and   (PrmStatus not entered
						or    (PrmStatus.Unreleased and ThisPayablesInvoiceImport.Status.Unreleased)
						or    (PrmStatus.Open and ThisPayablesInvoiceImport.Status.Open)
						or    (PrmStatus.History and ThisPayablesInvoiceImport.Status.History)))

							if (LocalTransactionTotal entered		
							or LocalFunctionalTotal entered
							or LocalAlternateTotal entered
							or LocalAlternateTotal2 entered
							or LocalAlternateTotal3 entered
							or LocalToFunctionalTotal entered
							or LocalToAlternateTotal entered
							or LocalToAlternateTotal2 entered
							or LocalToAlternateTotal3 entered
							or LocalProjectTotal entered
							or LocalReportTotal1 entered
							or LocalReportTotal2 entered
							or LocalReportTotal3 entered
							or LocalReportTotal4 entered
							or LocalReportTotal5 entered)
								invoke FastUpdate ThisPayablesInvoiceImport.PayablesInvoice
									invoked.TotalDistributionAmount.TransactionTotal		+= LocalTransactionTotal
									invoked.TotalDistributionAmount.FunctionalTotal			+= LocalFunctionalTotal
									invoked.TotalDistributionAmount.AlternateTotal			+= LocalAlternateTotal
									invoked.TotalDistributionAmount.AlternateTotal2			+= LocalAlternateTotal2
									invoked.TotalDistributionAmount.AlternateTotal3			+= LocalAlternateTotal3
									invoked.TotalDistributionAmount.ToFunctionalTotal		+= LocalToFunctionalTotal
									invoked.TotalDistributionAmount.ToAlternateTotal		+= LocalToAlternateTotal
									invoked.TotalDistributionAmount.ToAlternateTotal2		+= LocalToAlternateTotal2
									invoked.TotalDistributionAmount.ToAlternateTotal3		+= LocalToAlternateTotal3
									invoked.TotalDistributionAmount.ProjectTotal			+= LocalProjectTotal
									invoked.TotalDistributionAmount.ReportTotal1			+= LocalReportTotal1
									invoked.TotalDistributionAmount.ReportTotal2			+= LocalReportTotal2
									invoked.TotalDistributionAmount.ReportTotal3			+= LocalReportTotal3
									invoked.TotalDistributionAmount.ReportTotal4			+= LocalReportTotal4
									invoked.TotalDistributionAmount.ReportTotal5			+= LocalReportTotal5
	








				


							
							if  (!ThisPayablesInvoiceImport.RecordInError	
							and	 !ThisPayablesInvoiceImport.HasDistributionInError)
								if (ThisPayablesInvoiceImport.HoldCode entered
								and ThisPayablesInvoiceImport.PayablesInvoice.IsManualHoldable)		
									invoke PutInvoiceOnHold ThisPayablesInvoiceImport.PayablesInvoice		
										resume on error


											RecordInError		= true
											ErrorMessage		= error message	
										invoked.HoldCode 	= ThisPayablesInvoiceImport.HoldCode
					
									if (RecordInError)	
										if  (PrmMoveErrorsToNewRunGroup
										and  ThisPayablesInvoiceImport.PayablesInvoice.OriginatingInterfaceRun.ErrorRunGroup not entered)


													
											invoke Update ThisPayablesInvoiceImport.PayablesInvoice.OriginatingInterfaceRun
												invoked.ErrorRunGroup				= LocalErrorRunGroup
										



	

							invoke UpdateErrorRecordsAction ThisPayablesInvoiceImport.PayablesInvoice	
								resume on error
									RecordInError		= true

							if  (!ThisPayablesInvoiceImport.RecordInError	
							and	 !ThisPayablesInvoiceImport.HasDistributionInError)




				
								if (PayablesInvoiceImportRel.Status.Unreleased)
									invoke CheckRoutingRules ThisPayablesInvoiceImport.PayablesInvoice
										resume on error
								else
								if (PayablesInvoiceImportRel.Status.Open)

									invoke RefreshTotalTax ThisPayablesInvoiceImport.PayablesInvoice
										resume on error

											RecordInError		= true	
									



											

									invoke Unreleased.Release ThisPayablesInvoiceImport.PayablesInvoice
										resume on error

											RecordInError		= true	
									
									if (RecordInError)

										invoke Update PrmInterfaceRun
											invoked.MatchOrReleaseError = true								
										if  (PrmJournalizeGroup	entered)
											invoke UpdateJournalizeGroup ThisPayablesInvoiceImport.PayablesInvoice
												invoked.PrmJournalizeGroup	= blank
					

								invoke FastUpdate ThisPayablesInvoiceImport.PayablesInvoice
									invoked.InterfaceInProcess			= false
					
								if (ThisPayablesInvoiceImport.PayablesInvoice.Status.Historical)		
									invoke AdjustHistoricalDistributionsForCurrencyRounding ThisPayablesInvoiceImport.PayablesInvoice		
									invoke CreateAccrualOffset ThisPayablesInvoiceImport.PayablesInvoice
					

								invoke FastDelete ThisPayablesInvoiceImport
	
							else
								if (PrmJournalizeGroup	entered)
									invoke UpdateJournalizeGroup ThisPayablesInvoiceImport.PayablesInvoice
										invoked.PrmJournalizeGroup	= blank
	
							if  (!ThisPayablesInvoiceImport.RecordInError	
							and	 ThisPayablesInvoiceImport.HasDistributionInError)
								if  (LocalMoveErrorsToNewRunGroup
								and  PayablesInvoiceImportRel.PayablesInvoice.OriginatingInterfaceRun.ErrorRunGroup not entered)
									increment Company.VendorGroup.LastErrorRunGroupNumber
									LocalErrorRunGroup				= PrmErrorRunGroupPrefix + "ERRORS_" + Company.VendorGroup.LastErrorRunGroupNumber
	
									invoke Update PayablesInvoiceImportRel.PayablesInvoice.OriginatingInterfaceRun
										invoked.ErrorRunGroup				= LocalErrorRunGroup
	
								invoke SetError PayablesInvoiceImportRel
									invoked.PrmErrorMessage					= "Invoice Has Distributions In Error"
									if  (LocalMoveErrorsToNewRunGroup)
										invoked.PrmErrorRunGroup			= PayablesInvoiceImportRel.PayablesInvoice.OriginatingInterfaceRun.ErrorRunGroup

								invoke SetInvoiceErrorFromDistribution PrmInterfaceRun
								


								if  ((ThisPayablesInvoiceImport.RecordInError	
								or	 ThisPayablesInvoiceImport.HasDistributionInError)
								and  PrmMoveErrorsToNewRunGroup)


									invoke SetErrorRunGroup ThisPayablesInvoiceImport.PayablesInvoiceDistributionImportRel
										invoked.PrmErrorRunGroup = ThisPayablesInvoiceImport.RunGroup

									


						if ((BudgetEditConfigurationRel.BatchBudgetEdit)					
						and (GeneralLedgerSystemCodeRel.EncumbranceOption.Track or GeneralLedgerSystemCodeRel.EncumbranceOption.TrackAndEdit)) 
							if ((LocalLastTimeStamp not entered) or (current timestamp - LocalLastTimeStamp) > 60)
								invoke InitiateBudgetEdit BudgetEditConfigurationRel in background
								LocalLastTimeStamp = current timestamp						
								
													 					
				Instance Rules

					if   ((PayablesInvoiceImportRel.PayablesInvoice entered
					and    !PayablesInvoiceImportRel.RecordInError)
					and   (PrmStatus not entered
					or    (PrmStatus.Unreleased and PayablesInvoiceImportRel.Status.Unreleased)
					or    (PrmStatus.Open and PayablesInvoiceImportRel.Status.Open)
					or    (PrmStatus.History and PayablesInvoiceImportRel.Status.History)))
					
						display "Distrib#<Sequence>"
						if (PayablesInvoiceImportRel.PayablesInvoice entered)
							invoke ResetErrorMessage PayablesInvoiceImportRel

						RecordInError						= false	
						initialize ErrorMessage
						LocalMoveErrorsToNewRunGroup  		= PrmMoveErrorsToNewRunGroup


						if (!PayablesInvoiceImportRel.PostingStatus.History)
							invoke CreateImport PayablesInvoiceDistribution
								assign result to ImportedDistribution
								resume on error


									RecordInError		= true
									ErrorMessage		= error message	

								fill in fields from this instance
									except invoked.DistributionAmount
									except invoked.Status
								invoked.Company				= Company
								invoked.PayablesInvoice		= PayablesInvoiceImportRel.PayablesInvoice
								invoked.Vendor				= DerivedVendor
								invoked.GLFinanceCodeBlock	= DistributionAccount
								invoked.GLTransactionAmount	= DistributionAmount
								invoked.DistributionAmount.CurrencyAmount	= DistributionAmount
								invoked.TransientAsset		= Asset
								invoked.TransientAssetTemplate = AssetTemplate
								invoked.TransientAssetDescription = AssetDescription
								if (AssetTemplate entered)
									invoked.AssetFlag		= "A"
								else
								if (Asset entered)
									invoked.AssetFlag		= "R"
								invoked.TaxRate								= PayablesTaxInformation.TaxRate	
								invoked.TransientTaxingJurisdiction			= PayablesTaxInformation.TaxingJurisdiction	
								invoked.TransientShipToLocation				= ShipToLocation	
								invoked.TransientItemQuantity				= ItemQuantity 
						        invoked.TransientTagNumber					= TagNumber
						        invoked.TransientInServiceDate				= InServiceDate
						        invoked.TransientPurchaseDate				= PurchaseDate
						        invoked.TransientModelNumber				= ModelNumber
						        invoked.TransientSerialNumber				= SerialNumber
						        invoked.TransientHoldAsset					= HoldAsset
						        invoked.TransientAssetGroup					= AssetGroup
						        invoked.TransientCombine					= Combine
						        invoked.TransientAccountingUnitGroup 		= AssetAccountingUnitGroup
								invoked.BypassDefaultTaxIndicator			= true

								invoked.TransientBypassErrorUpdate = true
								if (PayablesInvoiceImportRel.Status.Open
								and PrmJournalizeGroup	entered)
									invoked.GLTJournalizeGroup				= PrmJournalizeGroup
                                invoked.AddOnCharge	                        = AddOnCharge
								invoked.TransientAOCAmount					= AOCAmount
								if (PayablesInvoiceImportRel.OneTimeVendor)
									invoked.LocalBypassRestrictedAccountEdit	= true	



















						else
							invoke Historical.InterfaceCreate PayablesInvoiceDistribution
								assign result to ImportedDistribution
								resume on error


									RecordInError		= true
									ErrorMessage		= error message	
								fill in fields from this instance
									except invoked.DistributionAmount
									except invoked.Status
								invoked.Company				= Company
								invoked.PayablesInvoice		= PayablesInvoiceImportRel.PayablesInvoice
								invoked.Vendor				= DerivedVendor
								invoked.GLFinanceCodeBlock	= DistributionAccount
								invoked.GLTransactionAmount	= DistributionAmount
								invoked.DistributionAmount.CurrencyAmount	= DistributionAmount
								invoked.TransientAsset		= Asset
								invoked.TransientAssetTemplate = AssetTemplate
								invoked.TransientAssetDescription = AssetDescription
								if (AssetTemplate entered)
									invoked.AssetFlag		= "A"
								else
								if (Asset entered)
									invoked.AssetFlag		= "R"

								invoked.TransientShipToLocation				= ShipToLocation	
								invoked.TransientItemQuantity				= ItemQuantity 
						        invoked.TransientTagNumber					= TagNumber
						        invoked.TransientInServiceDate				= InServiceDate
						        invoked.TransientPurchaseDate				= PurchaseDate
						        invoked.TransientModelNumber				= ModelNumber
						        invoked.TransientSerialNumber				= SerialNumber
						        invoked.TransientHoldAsset					= HoldAsset
						        invoked.TransientAssetGroup					= AssetGroup
						        invoked.TransientCombine					= Combine
						        invoked.TransientAccountingUnitGroup 		= AssetAccountingUnitGroup

								invoked.TransientBypassErrorUpdate = true
	

						if (RecordInError)
							if  (LocalMoveErrorsToNewRunGroup
							and  PayablesInvoiceImportRel.PayablesInvoice.OriginatingInterfaceRun.ErrorRunGroup not entered)



								invoke Update PayablesInvoiceImportRel.PayablesInvoice.OriginatingInterfaceRun
									invoked.ErrorRunGroup				= LocalErrorRunGroup





										


							LocalInterfaceDistributionErrorCount += 1
						else
							LocalDistribution								= ImportedDistribution.PayablesInvoiceDistribution
							invoke FastDelete

							LocalInterfacedDistributionsCount		+= 1
							LocalInterfacedDistributionsAmountTotal	+= LocalDistributionRel.DistributionAmount.CurrencyAmount
	

							if   (TaxCode entered
							and   !TaxIndicator.Exclude		
							and   !TaxIndicator.Exempt		
				            and   !TaxIndicator.Taxable
							and  ((TaxEntityRel.ThirdParty.InforTax
							and  ((TaxEntityRel.UseTaxCodeAccounts
							and    EntityTaxCodeRel.AccruedOrInvoiced.Accrued)
							or     (!TaxEntityRel.UseTaxCodeAccounts
							and    TaxEntityRel.AccruedOrInvoiced.Accrued)))
							or   (!TaxEntityRel.ThirdParty.InforTax
							and    PayablesInvoiceImportRel.TaxAmount not entered)))
								NextSentence = true
							else
								LocalTransactionTotal   += LocalDistributionRel.DistributionAmount.CurrencyAmount
								LocalFunctionalTotal 	+= LocalDistributionRel.DistributionAmount.FunctionalAmount.EnteredCurrencyAmount
								LocalAlternateTotal  	+= LocalDistributionRel.DistributionAmount.AlternateAmount.EnteredCurrencyAmount
								LocalAlternateTotal2 	+= LocalDistributionRel.DistributionAmount.AlternateAmount2.EnteredCurrencyAmount
								LocalAlternateTotal3 	+= LocalDistributionRel.DistributionAmount.AlternateAmount3.EnteredCurrencyAmount
								LocalToFunctionalTotal 	+= LocalDistributionRel.DistributionAmount.ToFunctionalAmount.EnteredCurrencyAmount
								LocalToAlternateTotal  	+= LocalDistributionRel.DistributionAmount.ToAlternateAmount.EnteredCurrencyAmount
								LocalToAlternateTotal2 	+= LocalDistributionRel.DistributionAmount.ToAlternateAmount2.EnteredCurrencyAmount
								LocalToAlternateTotal3 	+= LocalDistributionRel.DistributionAmount.ToAlternateAmount3.EnteredCurrencyAmount
								LocalProjectTotal 		+= LocalDistributionRel.DistributionAmount.ProjectAmount.EnteredCurrencyAmount
								LocalReportTotal1    	+= LocalDistributionRel.DistributionAmount.ReportAmount1.EnteredCurrencyAmount
								LocalReportTotal2    	+= LocalDistributionRel.DistributionAmount.ReportAmount2.EnteredCurrencyAmount
								LocalReportTotal3    	+= LocalDistributionRel.DistributionAmount.ReportAmount3.EnteredCurrencyAmount
								LocalReportTotal4    	+= LocalDistributionRel.DistributionAmount.ReportAmount4.EnteredCurrencyAmount
								LocalReportTotal5    	+= LocalDistributionRel.DistributionAmount.ReportAmount5.EnteredCurrencyAmount


					
					
					
		DeleteSet is a Set Action
			restricted
			run in background
			Parameters
				PrmCompany				is like PayablesCompany
				PrmVendor				is like Vendor
				PrmOldVendor			is like OldVendor
				PrmEDINumber			is like EDINumber
				PrmInvoice				is like Invoice
				PrmSuffix				is like Suffix
				
			Instance Selection	
				where (PrmCompany	= Company
				and    PrmVendor	= Vendor
				and    PrmOldVendor = OldVendor
				and    PrmEDINumber = EDINumber
				and    PrmInvoice   = Invoice
				and    PrmSuffix    = Suffix)

			Action Rules
				Instance Rules
				    invoke FastDelete
					
