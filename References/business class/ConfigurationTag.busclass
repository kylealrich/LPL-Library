ConfigurationTag is a BusinessClass
	owned by repository
 	prefix is ctag
 	default label is "Tag"
 	disable data area copy
		preserve target data

    Ontology
        symbolic key is ConfigurationTag

	Patterns
		disable AsOfDateProcessing
        disable EffectiveDated
        disable Auditing
        implements CreateStamp
        implements UpdateStamp
        implements DynamicCreation

	Persistent Fields
		Description is Text
		Owner is an Actor
		Active is Boolean
		Color is a RepositoryColorStyle

	Derived Fields
		ItemCount is a DerivedField
			type is Numeric size 4
			return instance count of ConfigurationTagItem set

	Conditions
		OwnerIsActor
			when (actor = Owner)

		NotUsed
		    when (!ConfigurationTagItem set exists)

	Dynamic Creation Rules
		Active = true 

	Field Rules
		Owner
			if (Owner entered) 
				cannot be changed
					"Use_'Change_Owner'_actionToChangeOwner."

			default to actor

	Create Rules
		constraint (not OtherTagCaseInSensitiveRel exists)
			"TagAlreadyExistsFor_'<ConfigurationTag>'_withDifferentCase.See_'<first OtherTagCaseInSensitiveRel.ConfigurationTag>'."

	Actions
		Create is a Create Action
		DynamicCreate is an Update Action
			default label is "BaseUpdate"
		
		Update is an Update Action
			Action Rules
				if (not Active and old Active and ConfigurationTagItem set exists)
					confirmation required
						"ItemsAreTaggedWithThisTag,AreYouSureYouWantToDeactivate?"

		Delete is a Delete Action
			Action Rules
				if (ConfigurationTagItem set exists)
					confirmation required
						"ConfigurationsAreTaggedWithThisValue,DoYouWantToDeleteAnyway?"

					invoke Delete ConfigurationTagItem set

		Activate is an Instance Action
			valid when (not Active)
			Action Rules
				Active = true

		Deactivate is an Instance Action
			valid when (Active)
			Entrance Rules
				if (ConfigurationTagItem set exists)
					confirmation required
						"ItemsAreTaggedWithThisTag,AreYouSureYouWantToDeactivate?"

			Action Rules
				Active = false

		ChangeOwner is an Instance Action
			Parameters
				NewOwner is an Actor

			Parameter Rules
				NewOwner
					required

					constraint (NewOwner != Owner)
						"TagIsAlreadyOwnedBy<Owner>"

			Action Rules
				Owner = NewOwner

		PurgeUnusedTags is a Set Action
			Parameters
				InactiveOnly 		is Boolean
				IncludeUsedInactive is Boolean
					default label is "IncludeInactiveWithTaggedItems"

			Parameter Rules
				InactiveOnly
					initial value is true

			Instance Selection
				where (not InactiveOnly or not Active)

			Sort Order is primary

			Action Rules
				Instance Rules
					if ((not InactiveOnly and Active and not ConfigurationTagItem set exists)
					or  (not Active and (IncludeUsedInactive or not ConfigurationTagItem set exists)))
						if (not Active)
							invoke Delete ConfigurationTagItem set

						invoke Delete

	Relations
		OtherTagCaseInSensitiveRel
			default label is "LikeTags"
			one-to-many relation to ConfigurationTag 
			Field Mapping uses symbolic key
			Instance Selection
				where (related.ConfigurationTag != ConfigurationTag
				and    related.ConfigurationTag like ConfigurationTag)


		ConfigEntityHelperRel
			one-to-many relation to ConfigEntity
			Field Mapping uses symbolic key
