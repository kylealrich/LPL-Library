InventoryTransactionLineDetail is a BusinessClass
    owned by ic
    prefix is ICD
    classic name is ICTRANSDTL

    Ontology
        symbolic key is InventoryTransactionLineDetail
            classic set name is ICDSET0
            classic name is TRANS-SEQ
            classic name for InventoryLocation is LOCATION
            classic name for TransactionSystemCode is SYSTEM-CD

            classic name for InventoryTransactionLine.WarehouseShipment is SHIPMENT-NBR
            classic name for InventoryTransactionLine.LineNumber is LINE-NBR
            classic name for InventoryTransactionLine.ComponentSequence is COMPONENT-SEQ

    Patterns
        implements StaticJava
        disable AuditIndex
		implements Archivable

    Persistent Fields

	    UnitOfMeasure
            classic name is UOM
        LotSerial          is an ItemSerialNumber  
        Bin
        TransactionDate    is TimeStamp
            classic name is TRANS-DATE
        Item
        UOMMultiplier
            classic name is UOM-MULT
			protected
        Quantity
        OpenQuantity       is a Quantity
            classic name is OPEN-QTY
			protected
        OriginalQuantity   is a Quantity
            classic name is ORIGINAL-QTY
			protected
        SecondaryQuantity  is a Quantity
            classic name is SECONDARY-QTY
        LotOnHold          is Boolean
            classic name is HOLD-FLAG
		ShelfLife
		ManufacturingDate
        LotExpirationDate  is Date
            classic name is EXPIRE-DATE
        UpdateDate         is TimeStamp
        Status             is Numeric size 1
			protected
            States
                Unreleased 		value is 0
                Released   		value is 1
                NonGlobalLedger value is 3
        TransactionCounter
            classic name is TRAN-COUNTER
        TransactionBarcode is AlphaUpper size 25
            classic name is TRANS-BARCODE
        Lot                is an ItemLot
        Sublot
        Serial             is an ItemSerialNumber
        	delete ignored
		ExpirationDateSource
	Transient Fields
	
        IntransitAndReceivingDocumentType			is AlphaUpper size 2
		IntransitAndReceivingDocumentNumber			is like InventoryTransaction
		IntransitAndReceivingWarehouseShipment  	is like WarehouseShipment 
		IntransitAndReceivingLineNumber 			is like LineNumber 
		IntransitAndReceivingComponentSequence 		is like InventorySequence 
		ReceiveAll									is Boolean
		DetailCreatedAutomatically					is Boolean
		TransientDeleteFromUDIDetail				is Boolean
		DerivedDetailQuantityValue					is a Quantity
			derive value from DerivedDetailQuantityBasedOnStatus
		DerivedDetailSecondaryQuantityValue			is a Quantity
			derive value from DerivedDetailSecondaryQuantityBasedOnStatus
	Local Fields
	
		UOMCalculation
		LocalDetailQuantityConversionForDisplay		is Boolean
		LocalCatchWeightItem				 		is Boolean
		TempCounter									is Numeric 2
		LocalUOM									is a UnitOfMeasure
		LocalDetailFromUOM							is like UnitOfMeasure
		LocalDetailToUOM							is like UnitOfMeasure
		LocalStateUOM								is a UnitOfMeasure
		LocalBin									is like Bin	
        LocalLot									is like ItemLot
        LocalSublot									is like Sublot
        LocalStockOnHandAvailableQuantity   		is like Quantity
        LocalQuantity								is like Quantity
        LocalQuantityInStockUOM						is like Quantity
        LocalSecondaryQuantity						is like Quantity
        LocalChangedQuantity						is like Quantity
        LocalChangedSecondaryQuantity				is like Quantity
        LocalStockOnHandHoldQuantity				is like Quantity
		LocalInputQuantity							is like Quantity
		LocalOutputQuantity							is like Quantity
		LocalTotalReturnedQuantity					is like Quantity
		LocalBeforeQuantity							is like Quantity

        LocalStockOnHandConvertedAllocatedQuantity  is like Quantity
        NewInventoryTransactionLineDetail           is an InventoryTransactionLineDetail view
		LocalRecallGroup							is AlphaUpper size 4
		LocalRecallNotice							is a RecallNotice
		LocalRecallProduct                          is a RecallProduct
		LocalSkipTransactionCreate					is Boolean
		LocalTransactionUOM							is a UnitOfMeasure 


		LocalToBin           						 is like Bin
		LocalToLot      						     is like ItemLot
		LocalToSublot        						 is like Sublot


	Rule Blocks

		ValueOfUOM
			if (IsTrackedInAndAlternateStockUOM
			and not HasItemLocationStockUOM)				
				LocalUOM = UnitOfMeasure	
			else
				LocalUOM = InventoryTransactionLine.StockUOM


		ConversionOfInputQuantityIntoAlternate
			initialize UOMCalculation
			UOMCalculation.InputUOM										= Item.StockUOM
			UOMCalculation.InputToUOM									= UnitOfMeasure
			UOMCalculation.InputToUOMConversion 						= UOMMultiplier
			UOMCalculation.InputQuantity								= LocalInputQuantity
			UOMCalculation.Method										= UOMCalculation.Method.ConvertToAlternate
			LocalOutputQuantity											= UOMCalculation.OutputQuantity	

		ConversionOfQuantityToSecondaryUOM
			initialize UOMCalculation
			UOMCalculation.InputUOM										= InventoryTransactionLine.TransactionUOM
			UOMCalculation.InputToUOM									= InventoryTransactionLine.SecondaryUOM
			UOMCalculation.InputQuantity								= LocalInputQuantity
			UOMCalculation.Method										= UOMCalculation.Method.ConvertToAlternate
			LocalOutputQuantity											= UOMCalculation.OutputQuantity
					
		ConvertQuantityToStockOrAlternate
			if (HasItemLocationStockUOM)
				initialize LocalStateUOM
				if (UnitOfMeasure not = InventoryTransactionLine.StockUOM)
					initialize UOMCalculation
					UOMCalculation.InputUOM								= UnitOfMeasure
					UOMCalculation.InputQuantity						= Quantity
					UOMCalculation.Method								= UOMCalculation.Method.ConvertToStock
					LocalQuantityInStockUOM								= UOMCalculation.OutputQuantity	
				else
					LocalQuantityInStockUOM								= Quantity
			
				if (InventoryTransactionLine.IsIssuesOrTransfer
				or  InventoryTransaction.IsVendorReturn)						
					LocalQuantity			        					= Quantity * -1
				else 
					LocalQuantity										= Quantity
				if (UnitOfMeasure not = DerivedLocationStockUOM)
					initialize UOMCalculation
					UOMCalculation.InputUOM								= UnitOfMeasure
					UOMCalculation.InputToUOM							= DerivedLocationStockUOM
					UOMCalculation.InputQuantity						= LocalQuantity
					UOMCalculation.Method								= UOMCalculation.Method.ConvertToAlternate
					LocalQuantity										= UOMCalculation.OutputQuantity	
			else
			if (InventoryTransactionLine.HasUnequalTransactionAndStockUOM
			or (LocalTransactionUOM entered and LocalTransactionUOM != InventoryTransactionLine.StockUOM))
				initialize UOMCalculation
				UOMCalculation.InputUOM									= UnitOfMeasure
				UOMCalculation.InputUOMConversion						= UOMMultiplier
				UOMCalculation.InputQuantity							= Quantity
				UOMCalculation.Method									= UOMCalculation.Method.ConvertToStock
				LocalQuantityInStockUOM									= UOMCalculation.OutputQuantity	
	
				if (IsTrackedInAndAlternateStockUOM)
					if (InventoryTransactionLine.IsIssuesOrTransfer
					or  InventoryTransaction.IsVendorReturn)						
						LocalQuantity			        				= Quantity * -1
					else 
						LocalQuantity									= Quantity
				else   	
					if (InventoryTransactionLine.IsIssuesOrTransfer
					or  InventoryTransaction.IsVendorReturn)						
						LocalQuantity									= LocalQuantityInStockUOM * -1
					else
						LocalQuantity									= LocalQuantityInStockUOM				                       
			else
				LocalQuantityInStockUOM									= Quantity
				
				if (Item.IsCatchWeightItem)
					LocalSecondaryQuantity	 							= SecondaryQuantity
					if (InventoryTransactionLine.IsIssuesOrTransfer
					or  InventoryTransaction.IsVendorReturn)
		   				LocalSecondaryQuantity							= LocalSecondaryQuantity * -1
	
				if (InventoryTransactionLine.IsIssuesOrTransfer
				or  InventoryTransaction.IsVendorReturn)
					LocalQuantity										= Quantity * -1
				else
					LocalQuantity										= Quantity	
   











		ItemForSufficientStockOnHandQuantityValidation

			if (InventoryTransactionLine.ItemLocation.BinTracked)			
				constraint (HasSufficientStockOnHandAvailableQuantity)
					"<DerivedMessageForBinTrackedStockOnHandQuantity>"
			else
				if (InventoryTransactionLine.ItemLocation.IsNotSerialTracked)
					if (!InventoryTransactionLine.IsLotTrackedAtIssueForIssuesOrTransfer)
						constraint (HasSufficientStockOnHandAvailableQuantity)
							"<DerivedMessageForNonBinTrackedStockOnHandQuantity>"

					
		CreateIntransitAndReceivingTransferDetail
			if (InventoryTransactionLine.IsToLocationUDIDetailTracked
			and InventoryUDIDetailRel exists)				
				include CreateIntransitAndReceivingTransferUDIDetail
			else
				if (ToItemLocationRel.IsLotTracked)
					LocalToLot        			 	= Lot
					LocalToSublot      				= Sublot	
				if (IntransitAndReceivingTransferDetailRel exists)
					invoke Unreleased.BypassRulesUpdate IntransitAndReceivingTransferDetailRel
						if (InventoryTransaction.IntransitTransfer)
							invoked.OriginalQuantity						+= Quantity
							invoked.OpenQuantity							+= Quantity
						else
							invoked.Quantity    								+= Quantity	
						if (Item.IsCatchWeightItem)
							invoked.SecondaryQuantity							+= SecondaryQuantity
				else
					invoke Unreleased.QuickCreate InventoryTransactionLineDetail
						assign result to NewInventoryTransactionLineDetail
						fill in fields from this instance
						invoked.Company										= InventoryTransaction.FromToCompanyLocation.FromToCompany
						invoked.InventoryLocation							= InventoryTransaction.FromToCompanyLocation.FromToLocation
						invoked.InventoryTransaction						= IntransitAndReceivingDocumentNumber
						invoked.TransactionSystemCode						= "IC"			
						invoked.InventoryTransactionLine.WarehouseShipment  = IntransitAndReceivingWarehouseShipment
						invoked.InventoryTransactionLine.LineNumber         = IntransitAndReceivingLineNumber
						invoked.InventoryTransactionLine.ComponentSequence  = IntransitAndReceivingComponentSequence 
						invoked.TransactionDate								= InventoryTransaction.NewInventoryTransaction.TransactionDate
						if (not ToItemLocationRel.IsLotTracked)
							initialize invoked.Lot
							initialize invoked.Sublot
						if (InventoryTransaction.IntransitTransfer)
							invoked.OriginalQuantity						= Quantity
							invoked.OpenQuantity							= Quantity	
							initialize invoked.Quantity
							initialize invoked.DerivedDetailQuantityValue
							initialize invoked.Bin	
						else
							invoked.Bin										= InventoryTransactionLine.FromToCompanyLocationBin.FromToBin
							initialize invoked.OpenQuantity
							initialize invoked.OriginalQuantity
						if (not ToItemLocationRel.InventoryLocation.UseAsWarehouseLocation)
							initialize invoked.ManufacturingDate
							initialize invoked.ShelfLife

		CreateIntransitAndReceivingTransferUDIDetail
			invoke CreateUDIDetailForTransfer InventoryUDIDetail
				fill in fields from this instance
				invoked.Company										= InventoryTransaction.FromToCompanyLocation.FromToCompany
				invoked.InventoryLocation							= InventoryTransaction.FromToCompanyLocation.FromToLocation
				invoked.InventoryUDIDetail.InventoryTransactionType	= IntransitAndReceivingDocumentType
				invoked.InventoryUDIDetail.TransactionSystemCode	= "IC"
				invoked.InventoryUDIDetail.DocumentNumberNumeric	= IntransitAndReceivingDocumentNumber
				invoked.InventoryUDIDetail.WarehouseShipment		= IntransitAndReceivingWarehouseShipment
				invoked.InventoryUDIDetail.LineNumber				= IntransitAndReceivingLineNumber
				invoked.InventoryUDIDetail.TransactionSequence		= InventoryTransactionLineDetail
				invoked.Item										= InventoryUDIDetailRel.Item
				invoked.GTIN										= InventoryUDIDetailRel.GTIN
				invoked.Manufacturer								= InventoryUDIDetailRel.Manufacturer
				invoked.ManufacturerNumber							= InventoryUDIDetailRel.ManufacturerNumber
				invoked.ManufacturingDate							= InventoryUDIDetailRel.ManufacturingDate
				invoked.ExpirationDate								= InventoryUDIDetailRel.ExpirationDate
				invoked.TransactionDate								= InventoryTransaction.NewInventoryTransaction.TransactionDate
				invoked.Lot											= InventoryUDIDetailRel.Lot
				invoked.SerialNumber								= InventoryUDIDetailRel.SerialNumber
				invoked.Quantity									= InventoryUDIDetailRel.Quantity
				invoked.UOM											= InventoryUDIDetailRel.UOM
				invoked.StockUOM									= InventoryUDIDetailRel.StockUOM
				invoked.UOMMultiplier								= InventoryUDIDetailRel.UOMMultiplier
				if (InventoryTransaction.IntransitTransfer)

					initialize invoked.Bin	
				else
					invoked.Bin										= InventoryTransactionLine.FromToCompanyLocationBin.FromToBin
		
		CreateReceivingTransferUDIDetail
			invoke CreateUDIDetailForTransfer InventoryUDIDetail
				fill in fields from this instance
				invoked.Company										= InventoryTransaction.Company
				invoked.InventoryLocation							= InventoryTransaction.InventoryLocation
				invoked.InventoryUDIDetail.InventoryTransactionType	= IntransitAndReceivingDocumentType
				invoked.InventoryUDIDetail.TransactionSystemCode	= "IC"
				invoked.InventoryUDIDetail.DocumentNumberNumeric	= IntransitAndReceivingDocumentNumber
				invoked.InventoryUDIDetail.WarehouseShipment		= IntransitAndReceivingWarehouseShipment
				invoked.InventoryUDIDetail.LineNumber				= IntransitAndReceivingLineNumber
				invoked.InventoryUDIDetail.TransactionSequence		= InventoryTransactionLineDetail
				invoked.Item										= InventoryUDIDetailRel.Item
				invoked.GTIN										= InventoryUDIDetailRel.GTIN
				invoked.Manufacturer								= InventoryUDIDetailRel.Manufacturer
				invoked.ManufacturerNumber							= InventoryUDIDetailRel.ManufacturerNumber
				invoked.ManufacturingDate							= InventoryUDIDetailRel.ManufacturingDate
				invoked.ExpirationDate								= InventoryUDIDetailRel.ExpirationDate
				invoked.TransactionDate								= InventoryTransaction.NewInventoryTransaction.TransactionDate
				invoked.Lot											= InventoryUDIDetailRel.Lot
				invoked.SerialNumber								= InventoryUDIDetailRel.SerialNumber
				invoked.Quantity									= InventoryUDIDetailRel.Quantity
				invoked.UOM											= InventoryUDIDetailRel.UOM
				invoked.StockUOM									= InventoryUDIDetailRel.StockUOM
				invoked.UOMMultiplier								= InventoryUDIDetailRel.UOMMultiplier
				if (InventoryTransaction.IntransitTransfer)
					initialize invoked.Bin	
				else
					invoked.Bin										= InventoryTransactionLine.FromToCompanyLocationBin.FromToBin

		CreateReceivingTransfer 
			if (OpenQuantity > 0
			and Quantity entered)
				if (InventoryTransactionLine.IsToLocationUDIDetailTracked
				and InventoryUDIDetailRel exists)
					include CreateReceivingTransferUDIDetail
				else
					if (ToItemLocationRel.IsLotTracked)
						LocalToLot        			 	= Lot
						LocalToSublot      				= Sublot	
					if (IntransitAndReceivingTransferDetailRel exists)
						invoke Unreleased.QuickUpdate IntransitAndReceivingTransferDetailRel
							invoked.Quantity    += Quantity	
					else
						invoke Unreleased.QuickCreate InventoryTransactionLineDetail
							assign result to NewInventoryTransactionLineDetail
							fill in fields from this instance
							invoked.InventoryTransaction								= IntransitAndReceivingDocumentNumber
							invoked.TransactionSystemCode								= "IC"
							invoked.InventoryTransactionLine.WarehouseShipment  		= IntransitAndReceivingWarehouseShipment
							invoked.InventoryTransactionLine.LineNumber         		= IntransitAndReceivingLineNumber
							invoked.InventoryTransactionLine.ComponentSequence  		= IntransitAndReceivingComponentSequence
							invoked.TransactionDate										= InventoryTransaction.NewInventoryTransaction.TransactionDate
							if (not ToItemLocationRel.IsLotTracked)
								initialize invoked.Lot
								initialize invoked.Sublot
							initialize invoked.OpenQuantity
							initialize invoked.OriginalQuantity
				






































		ConvertQuantityToStock
			if (InventoryTransactionLine.HasUnequalTransactionAndStockUOM)
				initialize UOMCalculation
				UOMCalculation.InputUOM									= UnitOfMeasure
				UOMCalculation.InputToUOM								= InventoryTransactionLine.StockUOM
				UOMCalculation.InputQuantity							= Quantity
				UOMCalculation.Method									= UOMCalculation.Method.ConvertToStock
				LocalQuantityInStockUOM									= UOMCalculation.OutputQuantity		

				if (IsTrackedInAndAlternateStockUOM)
					if (InventoryTransactionLine.IsIssuesOrTransfer
					or  InventoryTransaction.IsVendorReturn)				
						LocalQuantity			        				= Quantity * -1
					else 
						LocalQuantity									= Quantity
				else   	
					if (InventoryTransactionLine.IsIssuesOrTransfer	
					or  InventoryTransaction.IsVendorReturn)					
						LocalQuantity									= LocalQuantityInStockUOM * -1
					else
						LocalQuantity									= LocalQuantityInStockUOM				                       
			else
				LocalQuantityInStockUOM									= Quantity
				
				if (Item.IsCatchWeightItem)
					LocalSecondaryQuantity	 							= SecondaryQuantity
					if (InventoryTransactionLine.IsIssuesOrTransfer
					or  InventoryTransaction.IsVendorReturn)
		   				LocalSecondaryQuantity							= LocalSecondaryQuantity * -1
	
				if (InventoryTransactionLine.IsIssuesOrTransfer
				or  InventoryTransaction.IsVendorReturn)
					LocalQuantity										= Quantity * -1
				else
					LocalQuantity										= Quantity	
			
		CreateItemSerialNumber
			invoke Create ItemSerialNumber
				if (HasSerialForRequisitionTransfer)
					invoked.Company									= InventoryTransaction.FromToCompanyLocation.FromToCompany
					invoked.InventoryLocation						= InventoryTransaction.FromToCompanyLocation.FromToLocation
					invoked.Bin										= InventoryTransactionLine.FromToCompanyLocationBin.FromToBin
				else
					invoked.Company         	 					= InventoryTransaction.Company
					invoked.InventoryLocation						= InventoryTransaction.InventoryLocation
					invoked.Bin										= Bin
				invoked.Item             							= Item
				invoked.ItemSerialNumber	 						= Serial
				invoked.LastReceiptDate								= InventoryTransaction.TransactionDate
				if (InventoryTransaction.IsPurchaseOrderReceipt and PrmInspection)
					invoked.Status									= ItemSerialNumber.Status.Hold
				else 
				if (InventoryTransactionLine.IsIncreaseStock)
					invoked.Status									= 0
				else
				if (InventoryTransactionLine.IsDecreaseStock)
					if (InventoryTransaction.IsInventoryBinTransfer
					or  HasSerialForRequisitionTransfer)
						if (InventoryTransaction.IntransitTransfer)
							invoked.Status							= 2
						else
							invoked.Status							= 0
					else
						invoked.Status								= 9
						invoked.LastIssueDate						= InventoryTransaction.TransactionDate				

		ReleaseLineDetailValidation
			if   (Company.DoNotAllowExpiredLotOnTransaction
			and  (Lot.ExpiredItems or IsLotExpired or IsLotNearExpiry or Lot.ItemsAboutToExpire)
			and ((InventoryTransaction.IsInventoryIssues and (Quantity > 0 or SecondaryQuantity > 0))
			or    InventoryTransaction.IsInventoryTransfer
			or    InventoryTransaction.IsDirectTransfer
			or    InventoryTransaction.IsInventoryBinTransfer
			or	  InventoryTransaction.IsInventoryReceipt
			or 	  InventoryTransaction.IsInventoryIntransitReceiving))
				constraint (not IsLotExpiredOrExpiringSoon)
					"Lot<Lot>InLine<InventoryTransactionLine.LineNumber>IsExpiredOrWillBeExpiringSoon._CompanyDoesNotAllowExpiredAndExpiringLotToBeReleased"

			if (ShelfLife entered
			or ManufacturingDate entered)
				constraint (InventoryLocation.UseAsWarehouseLocation)
					"CannotEnter_ShelfLifeOrManufacturingDateInLine<InventoryTransactionLine>._Location<InventoryLocation>IsNotA_Warehouse_Location"

			if (InventoryTransaction.IsInventoryTransfer
			or  InventoryTransaction.IsInventoryIntransitReceiving
			or  InventoryTransaction.IsDirectTransfer)
				IntransitAndReceivingDocumentNumber      = PrmIntransitAndReceivingDocumentNumber
				IntransitAndReceivingDocumentType        = PrmIntransitAndReceivingDocumentType
				IntransitAndReceivingWarehouseShipment   = PrmIntransitAndReceivingWarehouseShipment 
				IntransitAndReceivingLineNumber          = PrmIntransitAndReceivingLineNumber
				IntransitAndReceivingComponentSequence   = PrmIntransitAndReceivingComponentSequence
				ReceiveAll								 = PrmReceiveAll
				
			if (InventoryTransaction.IsInventoryIntransitReceiving)
				if (ReceiveAll)
					Quantity   = OpenQuantity

			include ValueOfUOM													

			if (Lot entered
			or  Sublot entered)
				if (InventoryTransactionLine.ItemLocation.LotTracked.LotRequiredAtIssue)
					initialize LocalLot		
					initialize LocalSublot	
				else
					LocalLot		= Lot
					LocalSublot		= Sublot
			else
				initialize LocalLot		
				initialize LocalSublot	

			if (InventoryTransaction.IsInventoryBinTransfer)
				LocalBin = InventoryTransactionLine.Bin												
			else
				LocalBin = Bin	
			if (InventoryTransactionLine.IsDecreaseStock)
				if (InventoryTransactionLine.ItemLocation.BinTracked
				and not Company.AllowNegativeStockOnHand)
					constraint (StockOnHandDetailRel exist)
						"TransactionLine<InventoryTransactionLine.LineNumber>Item<Item>;StockOnHandDoesNotExistInBin<StockOnHandDetailRel.StockOnHandDetail.Bin>UOM<StockOnHandDetailRel.StockOnHandDetail.UnitOfMeasure>"
				else
				if (InventoryTransactionLine.ItemLocation.LotTracked.LotRequiredAtReceipt
				and InventoryTransactionLine.InventoryLocationLotTrackingMustMatch)
					constraint (StockOnHandDetailRel exist)
						"TransactionLine<InventoryTransactionLine.LineNumber>Item<Item>;StockOnHandDoesNotExistInLot<Lot>Sublot<Sublot>UOM<UnitOfMeasure>"










			
			if ((InventoryTransaction.IsInventoryIssues
			and  InventoryTransactionLine.ItemLocation.IsSerialTracked)
			or  (InventoryTransactionLine.ItemLocation.SerialTracked.SerialRequiredAtReceipt
			and  !InventoryTransaction.IsInventoryIssues))
				if (InventoryTransactionLine.IsDecreaseStock)
					if (InventoryTransactionLine.ItemLocation.SerialTracked.SerialRequiredAtReceipt)
						constraint (Serial exist)
							"SerialNumber<Serial>DoesNotExist"										//"@e.ICED.29"
						constraint (InventoryTransactionLineDetail.InventoryLocation = Serial.InventoryLocation)
							"SerialNumber<Serial>DoesNotExistInLocation<InventoryTransactionLineDetail.InventoryLocation>"
					if (not InventoryTransactionLine.TransactionSystemCode.Requisition
					and not InventoryTransactionLine.TransactionSystemCode.OrderEntry
					and not InventoryTransactionLine.TransactionSystemCode.WorkOrder)
						constraint (!Serial.Status.Allocated)
							"SerialNumber<Serial>IsAllocated"        								//"@e.ICED.30"
						constraint (!Serial.Status.Intransit)
							"SerialNumber<Serial>IsIntransit"        								//"@e.ICED.31"
						constraint (!Serial.Status.Hold)
							"SerialNumber<Serial>IsHold"       		 								//"@e.ICED.32"
						constraint (!Serial.Status.Issued or InventoryTransaction.IsVendorReturnOrAdjustment)
							"SerialNumber<Serial>IsIssued"       	 								//"@e.ICED.33"												
				else
				if (InventoryTransactionLine.IsIncreaseStock							
				and Serial exist)
					if (!InventoryTransactionLine.IsTransfers
					and not InventoryTransactionLine.TransactionSystemCode.WorkOrder)
						constraint (!Serial.Status.OnHand)
							"SerialNumber<Serial>AlreadyExists"        								//"@e.ICED.35"
						constraint (!Serial.Status.Allocated)
							"SerialNumber<Serial>IsAllocated"        								//"@e.ICED.30"
						constraint (!Serial.Status.Hold)
							"SerialNumber<Serial>IsHold" 		    								//"@e.ICED.32"
		

			include ConvertQuantityToStockOrAlternate
			
			if  (InventoryTransactionLine.IsDecreaseStock
			and  !Company.AllowNegativeStockOnHand)

				initialize LocalStockOnHandAvailableQuantity								
				initialize LocalCatchWeightItem

				if (HasItemLocationStockUOM
				and Item.StockUOM not = DerivedLocationStockUOM)
					initialize UOMCalculation
					UOMCalculation.InputQuantity 		= StockOnHandDetailRel.AvailableQuantity
					UOMCalculation.InputUOM    	 		= Item.StockUOM
					UOMCalculation.InputToUOM  	 		= DerivedLocationStockUOM
					UOMCalculation.Method      	 		= UOMCalculation.Method.ConvertToAlternate
					LocalStockOnHandAvailableQuantity   = UOMCalculation.OutputQuantity
				else
					LocalStockOnHandAvailableQuantity 	= StockOnHandDetailRel.AvailableQuantity
				
				if (InventoryTransaction.IsVendorReturn 
				and InventoryTransactionLine.VendorReturnLineRel.IsCreatedFromRejectedInspection)
					LocalStockOnHandAvailableQuantity += first VendorReturnLineDetailRel.DerivedRejectQuantity

				include ItemForSufficientStockOnHandQuantityValidation

				initialize LocalCatchWeightItem
				if (Item.IsCatchWeightItem)								
					LocalCatchWeightItem = true

					LocalStockOnHandAvailableQuantity 	= StockOnHandDetailRel.SecondaryAvailableQuantity
					
					if (InventoryTransaction.IsVendorReturn 
					and InventoryTransactionLine.VendorReturnLineRel.IsCreatedFromRejectedInspection)
						LocalStockOnHandAvailableQuantity += first VendorReturnLineDetailRel.DerivedSecondaryRejectQuantity
						
					LocalQuantity						= LocalSecondaryQuantity 	
					include ItemForSufficientStockOnHandQuantityValidation 


	Derived Fields
		
		StorageCodeMismatchMessage										is a MessageField
			"StorageCodeMismatch"	
		LotExpiredMessage												is a MessageField
			"LotHasExpired"	
		
		NumberOfRecords						is a DerivedField
			type is Numeric 3
			restricted
			return instance count of AnotherInventoryTransactionLineDetailForLotSerialAndBinForTransferRel 
		
		NumberOfLotCharacters is a DerivedField
			type is Numeric size 3
			restricted
			return Lot size 	
			
		NumberOfSerialCharacters is a DerivedField
			type is Numeric size 3
			restricted
			return Serial size

		MessageForBinTrackedMultipleBin		is a MessageField
			restricted
			"Serial<Serial>DoesNotExistInBin<Bin>,ChangeTheDetailBinTo<Serial.Bin>"
		
		MessageForBinTrackedSingleBin									is a MessageField
			restricted
			"Serial<Serial>DoesNotExistInBin<Bin>,ChangeTheLineBinFrom<InventoryTransactionLine.Bin>To<Serial.Bin>"			
			
		ItemSerialBinTrackedMessage										is a DerivedField
   			type is Alpha size up to 200
   			restricted

   			if (InventoryTransactionLine.MultipleBins)		
				return MessageForBinTrackedMultipleBin
			else 
				return MessageForBinTrackedSingleBin
				

		BinTrackedStockOnHandSecondaryQuantityMessage					is a MessageField
			restricted
			"TransactionLine<InventoryTransactionLine.LineNumber>;HasInsufficientStockOnHandSecondaryQuantityInBin<Bin>"
		NonBinTrackedStockOnHandSecondaryQuantityMessage				is a MessageField
			restricted
			"TransactionLine<InventoryTransactionLine.LineNumber>;HasInsufficientStockOnHandSecondaryQuantity"	
		BinTrackedStockOnHandQuantityMessage							is a MessageField
			restricted
			"TransactionLine<InventoryTransactionLine.LineNumber>;HasInsufficientStockOnHandQuantityInBin<Bin>"
		NonBinTrackedStockOnHandQuantityMessage							is a MessageField
			restricted
			"TransactionLine<InventoryTransactionLine.LineNumber>;HasInsufficientStockOnHandQuantity"			
	
		DerivedMessageForBinTrackedStockOnHandQuantity					is a DerivedField
   			type is Alpha size up to 200
   			restricted
			if (LocalCatchWeightItem)
				return BinTrackedStockOnHandSecondaryQuantityMessage
			else
				return BinTrackedStockOnHandQuantityMessage

		DerivedMessageForNonBinTrackedStockOnHandQuantity				is a DerivedField
   			type is Alpha size up to 200
   			restricted
			if (LocalCatchWeightItem)
				return NonBinTrackedStockOnHandSecondaryQuantityMessage
			else
				return NonBinTrackedStockOnHandQuantityMessage



		DerivedDetailQuantityBasedOnStatus								is a DerivedField  
			type is like Quantity
				precision is Item.NumberOfDecimalsQuantity
			restricted
			if (not Status.Released)
				return Quantity
			else
				if (Status.Released)
					if (InventoryTransactionLine.HasUnequalTransactionAndStockUOM)				
						LocalInputQuantity								= Quantity
						include ConversionOfInputQuantityIntoAlternate
						if (InventoryTransaction.IsInventoryIssues
						or  InventoryTransaction.IsInventoryTransfer
						or InventoryTransaction.IsDirectTransfer)

							return LocalOutputQuantity * -1
						else
							return LocalOutputQuantity
					else
					if (InventoryTransaction.IsInventoryIssues
					or  InventoryTransaction.IsInventoryTransfer
					or InventoryTransaction.IsDirectTransfer)

						return Quantity * -1
					else
						return Quantity			
					
		DerivedDetailSecondaryQuantityBasedOnStatus						is a DerivedField  
			type is like Quantity
				precision is Item.NumberOfDecimalsQuantity
			restricted
			if (Status.Unreleased)
				return SecondaryQuantity
			else
				if (Status.Released)
					if (InventoryTransaction.IsInventoryIssues
					or  InventoryTransaction.IsInventoryTransfer
					or InventoryTransaction.IsDirectTransfer)

						return SecondaryQuantity * -1
					else
						return SecondaryQuantity							

		DerivedBeforeStockQuantity										is a DerivedField  
			type is like Quantity			
				precision is Item.NumberOfDecimalsQuantity
			if (!LocalDetailQuantityConversionForDisplay)
				include ConvertQuantityToStockOrAlternate
				include ValueOfUOM
				LocalDetailQuantityConversionForDisplay = true

			if (Status.Unreleased)
				if (HasItemLocationStockUOM)
					if (InventoryTransactionLine.ItemLocation.LotTracked.LotRequiredAtIssue)
						return StockOnHandDetailForUOMRel.StockOnHandQuantityInLocationStockUOM - LocalQuantity
					else
						return StockOnHandDetailForUOMRel.StockOnHandQuantityInLocationStockUOM
				else
					if (InventoryTransactionLine.ItemLocation.LotTracked.LotRequiredAtIssue)
						return StockOnHandDetailForUOMRel.StockOnHandQuantity - LocalQuantity
					else
						return StockOnHandDetailForUOMRel.StockOnHandQuantity
			else
				if (HasItemLocationStockUOM)
					if (Item.StockUOM not = DerivedLocationStockUOM)
						initialize UOMCalculation
						UOMCalculation.InputUOM			= Item.StockUOM
						UOMCalculation.InputToUOM		= DerivedLocationStockUOM
						UOMCalculation.InputQuantity	= Quantity
						UOMCalculation.Method			= UOMCalculation.Method.ConvertToAlternate
						LocalBeforeQuantity				= UOMCalculation.OutputQuantity	
						return StockOnHandDetailForUOMRel.StockOnHandQuantityInLocationStockUOM - LocalBeforeQuantity
					else
						return StockOnHandDetailForUOMRel.StockOnHandQuantity - Quantity

				else
				if (InventoryTransactionLine.HasUnequalTransactionAndStockUOM     
				and InventoryTransactionLine.IsUOMTrackedIn)
					LocalInputQuantity								= LocalQuantity
					include ConversionOfInputQuantityIntoAlternate
					return StockOnHandDetailForUOMRel.StockOnHandQuantity - LocalOutputQuantity
				else
					if (InventoryTransactionLine.ItemLocation.LotTracked.LotRequiredAtIssue)
						return StockOnHandDetailForUOMRel.StockOnHandQuantity - Quantity
					else
						return StockOnHandDetailForUOMRel.StockOnHandQuantity - Quantity
									

		DerivedAfterStockQuantity										is a DerivedField  
			type is like Quantity	
				precision is Item.NumberOfDecimalsQuantity
			if (!LocalDetailQuantityConversionForDisplay)
				include ValueOfUOM
				include ConvertQuantityToStockOrAlternate
				LocalDetailQuantityConversionForDisplay = true

			if (Status.Unreleased)
				if (InventoryTransactionLine.ItemLocation.LotTracked.LotRequiredAtIssue)
					return 0
				else
					if (HasItemLocationStockUOM)
						return StockOnHandDetailForUOMRel.StockOnHandQuantityInLocationStockUOM + LocalQuantity
					else
						return StockOnHandDetailForUOMRel.StockOnHandQuantity + LocalQuantity
			else 
				if (InventoryTransactionLine.ItemLocation.LotTracked.LotRequiredAtIssue)
					return 0
				else
					if (HasItemLocationStockUOM)
						return StockOnHandDetailForUOMRel.StockOnHandQuantityInLocationStockUOM 
					else
						return StockOnHandDetailForUOMRel.StockOnHandQuantity 


		DerivedBeforeSecondaryQuantity   								is a DerivedField        
			type is like Quantity
				precision is Item.NumberOfDecimalsQuantity
			if (Status.Unreleased)
				include ValueOfUOM
				return StockOnHandDetailForUOMRel.SecondaryQuantity
			else
				return StockOnHandDetailForUOMRel.SecondaryQuantity - SecondaryQuantity


		DerivedAfterSecondaryQuantity									is a DerivedField   
			type is like Quantity
				precision is Item.NumberOfDecimalsQuantity
			if (Status.Unreleased)
				include ValueOfUOM
				if (InventoryTransaction.IsInventoryIssues
				or InventoryTransaction.IsInventoryTransfer)
					return StockOnHandDetailForUOMRel.SecondaryQuantity - SecondaryQuantity			
				else
					return StockOnHandDetailForUOMRel.SecondaryQuantity + SecondaryQuantity				
			else
				return StockOnHandDetailForUOMRel.SecondaryQuantity
				
		IssueQuantity is a DerivedField
			type is like Quantity
			return (Quantity * -1)

		TransactionLineDetailTitleNoRecord is a LabelField
			"TransactionLineDetail"

		TransactionLineDetailTitle is a LabelField
			"TransactionLineDetail<InventoryTransactionLineDetail>"

		DerivedLotExpirationDate is a DerivedField
			type is Date
			restricted
			if (not NegativeAdjustmentsOrTransfers)
				return Lot.LotExpirationDate
			else
				return blank

		DerivedTransactionLineDetailTitle is a DerivedField
			type is Alpha 35
			if (not InventoryTransactionLineDetail exists)
				return TransactionLineDetailTitleNoRecord
			else
				return TransactionLineDetailTitle
		
		DerivedReturnedQuantity is a DerivedField
			type is like Quantity
			restricted
			return sum AnotherInventoryTransactionLineDetailForLotAndSerialForReturnRel.Quantity

		DerivedOriginatingIssueDocument is a DerivedField
			type is like InventoryTransaction
			restricted
			if (InventoryTransaction.OriginatingIssueDocument entered)
				return InventoryTransaction.OriginatingIssueDocument
			else
				return InventoryTransaction

		DerivedUOMDisplay											is a DerivedField  
			type is like UnitOfMeasure
			if (HasItemLocationStockUOM)
				return DerivedLocationStockUOM
			else
				return InventoryTransactionLine.DerivedUOM			

		DerivedLocationStockUOM										is a DerivedField 
			type is like UnitOfMeasure
			return InventoryTransactionLine.DerivedLocationStockUOM

		DerivedLocationStockUOMMultiplier							is a DerivedField  
			type is like UOMMultiplier
			return InventoryTransactionLine.DerivedLocationStockUOMMultiplier


		DerivedPrintLineDetailQuantity is a DerivedField
			type is like Quantity
			restricted
			if(InventoryTransaction.IsInventoryIssues or InventoryTransaction.IsInventoryTransfer)
				return Quantity * -1
			else
				return Quantity

		DerivedWarehouseZone is a DerivedField
			type is like WarehouseZone
			restricted
			if (ItemLocationRel.IsAWarehouseLocationItem)
				return BinWarehouseStorageLocationRel.WarehouseZone

		DerivedWarehouseZoneComponent is a DerivedField
			type is like WarehouseZoneComponent
			restricted
			if (ItemLocationRel.IsAWarehouseLocationItem)
				return BinWarehouseStorageLocationRel.WarehouseZoneComponent	

		DerivedWarehouseAisle is a DerivedField
			type is like WarehouseAisle
			restricted
			if (ItemLocationRel.IsAWarehouseLocationItem)
				return BinWarehouseStorageLocationRel.WarehouseZoneComponent.WarehouseAisle

		DerivedWarehouseRow is a DerivedField
			type is Numeric size 2 
			restricted
			if (ItemLocationRel.IsAWarehouseLocationItem)
				return BinWarehouseStorageLocationRel.Row

		DerivedStorageType is a DerivedField
			type is like StorageLocationType
			restricted
			if (ItemLocationRel.IsAWarehouseLocationItem)
				return  BinWarehouseStorageLocationRel.StorageLocationType		

				
		DerivedRemainingShelfLife is a ComputeField
			type is Numeric 4
			default label is "Remaining_Shelf_Life"
			(LotExpirationDate - current corporate date)

		DerivedWarehouseLotExpirationDate is a ComputeField
			type is Date
			restricted
			(ManufacturingDate + ShelfLife)

		DerivedShelfLife is a DerivedField
			type is like ShelfLife
			restricted
			if (not NegativeAdjustmentsOrTransfers
			and Lot.ShelfLife entered)
				return Lot.ShelfLife
			else
				return blank

		DerivedManufacturingDate is a DerivedField
			type is like ManufacturingDate
			restricted
			if (not NegativeAdjustmentsOrTransfers
			and Lot.ManufacturingDate entered)
				return Lot.ManufacturingDate
			else
				return blank
				
		DerivedExpirationWarning is a DerivedField
			type is Numeric 4
			restricted
			return ValidItemStorageLocationForItemRel.ExpirationWarning

    Conditions

        HasBin
        	restricted
            when (Bin entered)

        IsReceivingAdjustment
        	restricted
            when (InventoryTransaction.InventoryDocumentType.PurchaseOrderReceiptAdjustment)

        IsInspectionRejection
        	restricted
            when (InventoryTransaction.InventoryDocumentType.RejectedInspectionItem)

        IsPOReceiving
        	restricted
            when (InventoryTransaction.InventoryDocumentType.PurchaseOrderReceipt)

		ItemLotOrSerialOrBinTracked
			restricted
			when (InventoryTransactionLine.IsItemLocationBinTracked
			or    ItemLocationRel.IsLotTrackedOnIssueOrReceipts
			or    ItemLocationRel.IsSerialTrackedOnIssueOrReceipts
			or    InventoryTransactionLine.DerivedMultipleUOM > 1)
		


		ItemSerialNumberExistsForIssueAdjustOrTransfer
			restricted
			when ((Serial exists)
			and   (InventoryTransaction.IsInventoryReceipt
			or     InventoryTransaction.IsInventoryReturns
			or     InventoryTransaction.IsInventoryTransfer
			or     InventoryTransaction.IsDirectTransfer
			or     InventoryTransaction.IsInventoryIssues
			or     InventoryTransaction.IsInventoryAdjustments
			or     InventoryTransaction.IsPurchaseOrderReceiptInspection
			or     InventoryTransaction.IsPurchaseOrderReceiptAdjustment
			or     InventoryTransaction.IsShipment
			or     InventoryTransaction.IsVendorReturnOrAdjustment)
			and   (InventoryLocation =  Serial.InventoryLocation))
		
		NegativeAdjustmentsOrTransfers
			restricted	
			when ((InventoryTransaction.IsInventoryAdjustments
			and   (Quantity < 0
			or	   InventoryTransactionLine.Quantity < 0))
			or     InventoryTransaction.IsInventoryTransfer
			or     InventoryTransaction.IsDirectTransfer)
			
		ReceiptAndPositiveAdjustment
			restricted
			when (((InventoryTransaction.IsInventoryReceipt)
			or   (InventoryTransaction.IsInventoryAdjustments
			and   Quantity > 0 )
			or    InventoryTransaction.IsInventoryReturns)
			and  (InventoryTransactionLine.ItemLocation.LotTracked.LotRequiredAtReceipt))
			
		DisallowUpdateLotExpirationDate
			restricted
			when (Lot exists
			and ((InventoryTransaction.IsInventoryIssues
			or 	  InventoryTransaction.IsInventoryBinTransfer)
			and   InventoryTransactionLine.ItemLocation.LotTracked.LotRequiredAtReceipt))

		IsLotExpired
			restricted
			when (InventoryTransactionLine.IsItemLocationLotTracked
			and  ((LotExpirationDate entered
			and   LotExpirationDate < current corporate date)
			or   (Lot.LotExpirationDate entered
			and   Lot.LotExpirationDate < current corporate date)))
				
		IsStorageCodeMismatch
			restricted
			when (Bin entered
			and   !InventoryTransactionLine.MultipleBins
			and   Bin.StorageCode != InventoryTransactionLine.ItemLocation.StorageCode)	 			 	 		 	
		
		ExpirationDateCheck
			restricted
			when (Lot.LotExpirationDate = LotExpirationDate)
		
		IsIntransitReceivingOrTransfer
			restricted
			when (InventoryTransaction.IsInventoryTransfer
			or    InventoryTransaction.IsInventoryIntransitReceiving)
		
		IsTransferWithToBinEntered
			restricted
			when (InventoryTransactionLine.IsItemLocationBinTracked
			and  (InventoryTransaction.IsInventoryTransfer
			or    InventoryTransaction.IsInventoryBinTransfer)
			and	  InventoryTransactionLine.FromToCompanyLocationBin entered)
			
		IsIssueAdjustAndReceipt
			restricted
			when ((InventoryTransaction.IsInventoryIssues
			or	   InventoryTransaction.IsInventoryReturns
			or	   InventoryTransaction.IsInventoryReceipt
			or     InventoryTransaction.IsInventoryAdjustments
			or     InventoryTransaction.IsInventoryIntransitReceiving
			or     InventoryTransaction.IsInventoryReceivingTransfer)
			and    InventoryTransactionLine.Bin entered)
			
		IsMultipleBinEntered	
			restricted										
			when (InventoryTransactionLine.IsItemLocationBinTracked		
			and	  InventoryTransactionLine.MultipleBins)						

		IsIssueSerialAndLotTracked
			restricted
			when (InventoryTransactionLine.ItemLocation.IsSerialTracked
			or   (InventoryTransactionLine.ItemLocation.LotTracked.LotRequiredAtIssue
			and   InventoryTransaction.IsInventoryIssues))

			
		HasSufficientStockOnHandAvailableQuantity
			restricted
			when (LocalStockOnHandAvailableQuantity > 0
			and   LocalQuantity 	  <= LocalStockOnHandAvailableQuantity
			and  (LocalQuantity * -1) <= LocalStockOnHandAvailableQuantity)
	 			
	 	CanUpdateDetailAndNotInProcess
	 		restricted
	 		when (CanUpdateDetail
	 		and   !InventoryTransaction.InterfaceInProcess)
	 	
	 	CanUpdateDetail
	 		restricted
	 		when ((InventoryTransaction.IsUnreleased	
			and  !InventoryTransactionLine.IsBinTrackedItemWithSingleBin)
			or   (InventoryTransaction.IsUnreleased
			and  (InventoryTransaction.IsInventoryIntransitReceiving
			or    InventoryTransaction.IsInventoryReceivingTransfer)))

		
		CanCreateDeleteDetail
			restricted
			when (CanUpdateDetailAndNotInProcess
			and  ((InventoryTransaction.IsInventoryIntransitReceiving
			and  !InventoryTransactionLine.IsBinTrackedOnlyNotLotSerailTracked)
			or   !InventoryTransaction.IsInventoryIntransitReceiving))
		
		IsNotUDIOrInventoryControl
			restricted
			when (not InventoryTransactionLine.IsUDIDetailTransaction
			or    not InventoryTransactionLine.TransactionSystemCode.InventoryControl)

		CanCreateInventoryTransactionLineDetail 
			restricted
			when (IsNotUDIOrInventoryControl)

		CanUpdateInventoryTransactionLineDetail 
			restricted
			when (not InventoryTransactionLine.ItemLocation.IsUDITracked)

		CanDeleteInventoryTransactionLineDetail 
			restricted
			when (not InventoryTransactionLine.ItemLocation.IsUDITracked)



		IsLotRequired
			restricted
			when (((InventoryTransaction.IsInventoryReceipt
			or      InventoryTransaction.IsInventoryTransfer
			or      InventoryTransaction.IsDirectTransfer
			or      InventoryTransaction.IsInventoryReceivingTransfer
			or      InventoryTransaction.IsInventoryIntransitReceiving
			or      InventoryTransaction.IsInventoryBinTransfer
			or      InventoryTransaction.IsInventoryAdjustments
			or      InventoryTransaction.IsPurchaseOrderReceipt
			or      InventoryTransaction.IsPurchaseOrderReceiptAdjustment
			or		InventoryTransaction.IsPurchaseOrderReceiptInspection
			or      InventoryTransaction.IsVendorReturnOrAdjustment
			or		InventoryTransaction.IsInventoryReturns
			or		InventoryTransaction.IsRequisitionReturn
			or		InventoryTransaction.IsInventoryIssues)
			and     InventoryTransactionLine.ItemLocation.LotTracked.LotRequiredAtReceipt)
			or     (InventoryTransaction.IsInventoryIssues 
			and 	InventoryTransactionLine.DerivedQuantity > 0
			and     InventoryTransactionLine.ItemLocation.LotTracked.LotRequiredAtIssue))
		


		IsSerialRequired
			restricted
			when (((InventoryTransaction.IsInventoryReceipt
			or      InventoryTransaction.IsInventoryTransfer
			or      InventoryTransaction.IsDirectTransfer
			or      InventoryTransaction.IsInventoryIntransitReceiving
			or 		InventoryTransaction.IsInventoryReceivingTransfer
			or      InventoryTransaction.IsInventoryBinTransfer
			or      InventoryTransaction.IsInventoryAdjustments
			or      InventoryTransaction.IsPurchaseOrderReceipt
			or      InventoryTransaction.IsPurchaseOrderReceiptAdjustment
			or		InventoryTransaction.IsPurchaseOrderReceiptInspection
			or      InventoryTransaction.IsVendorReturnOrAdjustment
			or		InventoryTransaction.IsRequisitionReturn)
			and     InventoryTransactionLine.ItemLocation.SerialTracked.SerialRequiredAtReceipt)
			or    ((InventoryTransaction.IsInventoryIssues
			or		InventoryTransaction.IsInventoryReturns)
			and     InventoryTransactionLine.ItemLocation.IsSerialTracked))
		
		HasSerialForRequisitionTransfer
			restricted
			when (InventoryTransactionLine.TransactionSystemCode.Requisition
			and   InventoryTransaction.IsDirectOrInventoryTransfer
			and   InventoryTransactionLine.ItemLocation.SerialTracked.SerialRequiredAtIssue
			and   Serial entered)
		
		HasLotForRequisitionTransfer
			restricted
			when (InventoryTransactionLine.TransactionSystemCode.Requisition
			and   InventoryTransaction.IsDirectOrInventoryTransfer
			and   InventoryTransactionLine.ItemLocation.LotTracked.LotRequiredAtIssue
			and   Lot entered)
		
		IsCreateSerial
			restricted
			when (IsSerialRequired
			or    HasSerialForRequisitionTransfer)	
		
		IsCreateLot
			restricted
			when (IsLotRequired
			or    HasLotForRequisitionTransfer)
			   		
		SerialItemExistsAtThisLocation
			restricted
			when (Serial exists
			and   InventoryLocation = Serial.InventoryLocation)
	
		HasDifferentLineAndDetailQuantity
			restricted
			when ((InventoryTransactionLine.Quantity > 0
			and   Quantity < 0)
			or   (InventoryTransactionLine.Quantity < 0
			and   Quantity > 0))
			
		HasDifferentLineAndDetailSecondaryQuantity
			restricted
			when ((InventoryTransactionLine.SecondaryQuantity > 0
			and   SecondaryQuantity < 0)
			or   (InventoryTransactionLine.SecondaryQuantity < 0
			and   SecondaryQuantity > 0))			
			
		HasUnequalUOM
			restricted
			when (InventoryTransactionLine.ToUOM entered
			and (UnitOfMeasure != InventoryTransactionLine.ToUOM))				

		IsQuantityVisibleInDetail
			restricted
			when (((InventoryTransaction.IsInventoryReceipt
			or    InventoryTransaction.IsInventoryReturns
			or    InventoryTransaction.IsInventoryTransfer
			or    InventoryTransaction.IsInventoryBinTransfer
			or    InventoryTransaction.IsInventoryAdjustments
			or	  InventoryTransaction.IsIntransitReceiving)
			and  ((InventoryTransactionLine.ItemLocation.SerialTracked.SerialRequiredAtIssue
			and   InventoryTransactionLine.ItemLocation.BinTracked)
			or    InventoryTransactionLine.ItemLocation.IsLotTracked
			or    InventoryTransactionLine.IsBinTrackedOnlyNotLotTrackedOrSerialTracked))
			or   (!InventoryTransactionLine.ItemLocation.IsSerialTracked
			and   InventoryTransaction.IsInventoryIssues))

		IsTrackedInAndAlternateStockUOM
			restricted
			when (ItemUOMRel.TrackedIn
			and   UnitOfMeasure != Item.StockUOM)  

		IsCatchWeightAndNotSerialTracked
			restricted
			when (InventoryTransactionLine.Item.IsCatchWeightItem
            and   not InventoryTransactionLine.IsItemLocationSerialTracked)

		TransactionsWithLotExpirationDate
			restricted
			when ((InventoryTransaction.IsInventoryIssues 
			and   InventoryTransactionLine.ItemLocation.LotTracked.LotRequiredAtReceipt)
			or	  InventoryTransaction.IsInventoryReturns
			or    InventoryTransaction.IsShipment
			or	  InventoryTransaction.IsVendorReturn
			or    NegativeAdjustmentsOrTransfers)

		IsSerialRequiredNotOverrideLocation
			when (not InventoryTransactionLine.DerivedOverrideLocation and IsSerialRequired)
		
		IsSerialRequiredOverrideLocation
			when (InventoryTransactionLine.DerivedOverrideLocation and IsSerialRequired)

		LotTrackedNotOverrideLocation
			when (not InventoryTransactionLine.DerivedOverrideLocation and InventoryTransactionLine.IsItemLocationLotTracked)

		LotTrackedOverrideLocation
			when (InventoryTransactionLine.DerivedOverrideLocation and InventoryTransactionLine.IsItemLocationLotTracked)

		HasDifferentLotExpirationDate
			restricted
			when (LineDetailForDifferentLotExpirationDateRel exists)

		HasExpiredLotForWarning
			restricted
			when (Company.DoNotAllowExpiredLotOnTransaction
			and InventoryTransactionLine.Status.Unreleased
			and (Lot.ExpiredItems 
			or  IsLotExpired 
			or  IsLotNearExpiry 
			or  Lot.ItemsAboutToExpire 
			or  IsItemLotNearExpiry))

		HasNearExpiryOrExpiredLotForWarning
			restricted
			when (not Company.DoNotAllowExpiredLotOnTransaction
			and (DerivedExpirationWarning entered
			or  Company.DaysPriorToExpiringLots entered)
			and InventoryTransactionLine.Status.Unreleased
			and (Lot.ExpiredItems 
			or  Lot.ItemsAboutToExpire 
			or  IsLotNearExpiry 
			or  IsLotExpired 
			or  IsItemLotNearExpiry))

		IsLotNearExpiry
			restricted
			when (LotExpirationDate entered
			and  ((DerivedExpirationWarning entered
			and  DerivedRemainingShelfLife <= DerivedExpirationWarning)
			or   (Company.DaysPriorToExpiringLots entered
			and  DerivedRemainingShelfLife <= Company.DaysPriorToExpiringLots))
			and  DerivedRemainingShelfLife != 0)

		IsItemLotNearExpiry
			restricted
			when (Lot.LotExpirationDate entered
			and  DerivedExpirationWarning entered
			and  Lot.DerivedDaysBeforeExpiration <= DerivedExpirationWarning
			and  Lot.DerivedDaysBeforeExpiration > 0)
		
		IsLotExpiredOrExpiringSoon
			restricted
			when (Lot.ExpiredItems
			or    IsLotExpired
			or    IsLotNearExpiry
			or    Lot.ItemsAboutToExpire)

		ExceedsOpenQuantity
			restricted
			when (Quantity > OpenQuantity)

		HasItemLocationStockUOM
			when (InventoryTransactionLine.HasItemLocationStockUOM)

		HasItemStorageLocation
			restricted
			when (ValidItemStorageLocationForItemRel exists)

		DefaultManufacturingDateOrShelfLife
			restricted
			when (Lot exists
			and   InventoryTransactionLine.ItemLocation.LotTracked.LotRequiredAtReceipt
			and ((ReceiptAndPositiveAdjustment
			and   Lot.LotExpirationDate entered)
			or    InventoryTransaction.IsInventoryIssues
			or    InventoryTransaction.IsInventoryBinTransfer))

		RequireManufacturingDateOrShelfLife
			restricted
			when (not Lot exists
			or   (not Lot.LotExpirationDate entered
			and   ReceiptAndPositiveAdjustment))
		
		DisplayWarehouseStorageInformation
			restricted
			when (InventoryTransactionLine.ItemLocation.IsAWarehouseLocationItem  
			and  (InventoryTransactionLine.Bin.WarehouseStorageLocation entered 
			or 	  InventoryTransactionLine.FromToCompanyLocationBin.FromToBin.WarehouseStorageLocation entered
			or 	  Bin.WarehouseStorageLocation entered))

    Relations

		AnotherInventoryTransactionLineDetailForLotSerialAndBinRel 
			one-to-many relation to InventoryTransactionLineDetail
			Field Mapping uses Set2
				related.Company											= Company
                related.InventoryLocation								= InventoryLocation
                related.TransactionSystemCode							= TransactionSystemCode
				related.InventoryTransaction							= InventoryTransaction
	            related.InventoryTransactionLine.WarehouseShipment 		= InventoryTransactionLine.WarehouseShipment
	            related.Item											= InventoryTransactionLine.Item
	            related.Lot												= Lot
	            related.Serial											= Serial
	            related.Bin 											= Bin
	            related.InventoryTransactionLine.LineNumber				= InventoryTransactionLine.LineNumber
	            related.InventoryTransactionLine.ComponentSequence		= InventoryTransactionLine.ComponentSequence
	        Instance Selection
	        	where (related.InventoryTransactionLineDetail 	   		!= InventoryTransactionLineDetail
	        	and	   related.UnitOfMeasure							 = UnitOfMeasure
	        	and    related.Sublot									 = Sublot)
	        	
		StockOnHandDetailForUOMRel						
			one-to-one relation to StockOnHandDetail
			Field Mapping uses symbolic key
				related.Company											= Company
				related.InventoryLocation 								= InventoryLocation
				related.Item											= Item
				related.StockOnHandDetail.UnitOfMeasure 				= LocalUOM				
				related.StockOnHandDetail.Lot 							= Lot			
				related.StockOnHandDetail.Sublot 						= Sublot
				related.StockOnHandDetail.Bin 							= Bin
		
		StockOnHandDetailForLotRel						
			one-to-many relation to StockOnHandDetail
			Field Mapping uses symbolic key
				related.Company											= Company
				related.InventoryLocation 								= InventoryLocation
				related.Item											= Item
			Instance Selection
				where (related.StockOnHandDetail.UnitOfMeasure 			= LocalUOM				
				and	   related.StockOnHandDetail.Lot 					= Lot)	

		StockOnHandDetailRel						
			one-to-one relation to StockOnHandDetail
			Field Mapping uses symbolic key
				related.Company											= Company
				related.InventoryLocation 								= InventoryLocation
				related.Item											= Item
				related.StockOnHandDetail.UnitOfMeasure 				= LocalUOM	
				related.StockOnHandDetail.Lot 							= LocalLot			
				related.StockOnHandDetail.Sublot 						= LocalSublot
				related.StockOnHandDetail.Bin 							= LocalBin		

		FromStockOnHandDetailRel
			one-to-one relation to StockOnHandDetail
			Field Mapping uses symbolic key
				related.Company												= Company
				related.InventoryLocation 									= InventoryLocation
				related.Item												= Item
				related.StockOnHandDetail.UnitOfMeasure	 					= LocalDetailFromUOM
				related.StockOnHandDetail.Lot 								= Lot			
				related.StockOnHandDetail.Sublot 							= Sublot
				related.StockOnHandDetail.Bin 								= InventoryTransactionLine.Bin

		ToStockOnHandDetailRel
			one-to-one relation to StockOnHandDetail
			Field Mapping uses symbolic key
				related.Company												= Company
				related.InventoryLocation 									= InventoryLocation
				related.Item												= Item
				related.StockOnHandDetail.UnitOfMeasure	 					= LocalDetailToUOM
				related.StockOnHandDetail.Lot 								= Lot			
				related.StockOnHandDetail.Sublot 							= Sublot
				related.StockOnHandDetail.Bin 								= InventoryTransactionLine.FromToCompanyLocationBin.FromToBin	

		ItemUOMRel
            one-to-one relation to ItemUOM
            Field Mapping uses symbolic key
            	related.ItemGroup		  								= Company.ItemGroup
                related.Item              								= Item
                related.UnitOfMeasure     								= UnitOfMeasure			
                              				
		ItemSerialNumberForBinRel
            one-to-one relation to ItemSerialNumber
            Field Mapping uses Set3
                related.Company         			 					= Company
                related.InventoryLocation 	 		 					= InventoryLocation
                related.Item            				 				= InventoryTransactionLine.Item
                related.Bin            			 	 					= Bin
                related.ItemSerialNumber 			 					= Serial

		FromItemSerialNumberRel
			one-to-one relation to ItemSerialNumber
			Field Mapping uses Set3
				related.Company											= Company
                related.InventoryLocation								= InventoryLocation
                related.Item											= Item
                related.Bin												= InventoryTransactionLine.Bin
                related.ItemSerialNumber								= Serial
                       									
		ItemLocationRel
			one-to-one relation to ItemLocation
			Field Mapping uses symbolic key
				related.Company											= Company
				related.InventoryLocation								= InventoryLocation
				related.Item											= Item			

        InventoryUDIDetailRel  
            one-to-one relation to InventoryUDIDetail
            Field Mapping uses symbolic key
                related.Company 										= Company
                related.InventoryLocation								= InventoryLocation
                related.InventoryUDIDetail.InventoryTransactionType		= InventoryTransaction.InventoryDocumentType
                related.InventoryUDIDetail.TransactionSystemCode		= TransactionSystemCode
                related.InventoryUDIDetail.DocumentNumberNumeric		= InventoryTransaction
                related.InventoryUDIDetail.WarehouseShipment			= InventoryTransactionLine.WarehouseShipment
                related.InventoryUDIDetail.LineNumber					= InventoryTransactionLine.LineNumber 
                related.InventoryUDIDetail.TransactionSequence			= InventoryTransactionLineDetail

        InventoryUDIDetailTransferRel  
            one-to-many relation to InventoryUDIDetail
            Field Mapping uses symbolic key
                related.Company 												= Company
                related.InventoryLocation										= InventoryLocation
            Instance Selection
                where (related.InventoryUDIDetail.InventoryTransactionType		= InventoryTransaction.InventoryDocumentType
                and   related.InventoryUDIDetail.TransactionSystemCode			= TransactionSystemCode
                and   related.InventoryUDIDetail.DocumentNumberNumeric			= InventoryTransaction
                and   related.InventoryUDIDetail.WarehouseShipment				= InventoryTransactionLine.WarehouseShipment
                and   related.InventoryUDIDetail.LineNumber						= InventoryTransactionLine.LineNumber) 

		InventoryTransactionForTransferRel
			one-to-one relation to InventoryTransaction
				Field Mapping uses Set3
					related.Company										= InventoryTransaction.FromToCompanyLocation.FromToCompany
					related.InventoryLocation							= InventoryTransaction.FromToCompanyLocation.FromToLocation
					related.FromToCompanyLocation.FromToCompany			= Company
	                related.FromToCompanyLocation.FromToLocation		= InventoryLocation
	                related.InventoryTransaction						= InventoryTransaction
					
		AnotherInventoryTransactionLineDetailForLotSerialAndBinForTransferRel 
			one-to-many relation to InventoryTransactionLineDetail
			Field Mapping uses Set6
				related.Company											= InventoryTransactionForTransferRel.Company
                related.InventoryLocation								= InventoryTransactionForTransferRel.InventoryLocation
                related.TransactionSystemCode							= "IC"
                related.InventoryTransaction							= InventoryTransaction
	            related.InventoryTransactionLine				 		= InventoryTransactionLine
	            related.Item											= Item
	        Instance Selection
	        	where (related.Status.Released)
	        	
		AnotherInventoryTransactionLineDetailForLotRel 
			one-to-many relation to InventoryTransactionLineDetail
			Field Mapping uses Set2
				related.Company											= Company
                related.InventoryLocation								= InventoryLocation
                related.TransactionSystemCode							= TransactionSystemCode
                related.InventoryTransaction							= InventoryTransaction
	            related.InventoryTransactionLine.WarehouseShipment 		= InventoryTransactionLine.WarehouseShipment
	            related.Item											= InventoryTransactionLine.Item
	            related.Lot												= Lot
	        Instance Selection
	        	where (related.InventoryTransactionLineDetail 	   		!= InventoryTransactionLineDetail
			    and    related.InventoryTransactionLine.ComponentSequence	= InventoryTransactionLine.ComponentSequence
			    and    related.InventoryTransactionLine.LineNumber		= InventoryTransactionLine.LineNumber)

		LineDetailForDifferentLotExpirationDateRel 
			one-to-many relation to InventoryTransactionLineDetail
			Field Mapping uses Set2
				related.Company												= Company
                related.InventoryLocation									= InventoryLocation
                related.TransactionSystemCode								= TransactionSystemCode
                related.InventoryTransaction								= InventoryTransaction
	            related.InventoryTransactionLine.WarehouseShipment 			= InventoryTransactionLine.WarehouseShipment
	            related.Item												= InventoryTransactionLine.Item
	            related.Lot													= Lot
	        Instance Selection
	        	where (related.InventoryTransactionLineDetail 	   			not = InventoryTransactionLineDetail
			    and    related.InventoryTransactionLine.ComponentSequence	= InventoryTransactionLine.ComponentSequence
			    and    related.InventoryTransactionLine.LineNumber			= InventoryTransactionLine.LineNumber
				and	   related.LotExpirationDate							not = LotExpirationDate)	   
	        	
	    RecallProductLotRel
			one-to-many relation to RecallProductLot
   			Field Mapping uses symbolic key
   				related.RecallGroup			= LocalRecallGroup
   				related.RecallNotice		= LocalRecallNotice
   				related.RecallProduct		= LocalRecallProduct
   				related.RecallProductLot	= Lot
   			Instance Selection
   				where (related.ThruLot		= blank)
				
		RecallProductLotRangeRel
			one-to-many relation to RecallProductLot
   			Field Mapping uses symbolic key
   				related.RecallGroup			= LocalRecallGroup
   				related.RecallNotice		= LocalRecallNotice
   				related.RecallProduct		= LocalRecallProduct
   			Instance Selection
   				where (related.ThruLot			!= blank
   				and    related.NumberOfCharacters = NumberOfLotCharacters
   				and    related.RecallProductLot <= Lot
   				and    related.ThruLot          >= Lot)
			
		RecallProductSerialRel
			one-to-one relation to RecallProductSerial
   			Field Mapping uses symbolic key
   				related.RecallGroup			= LocalRecallGroup
   				related.RecallNotice		= LocalRecallNotice
   				related.RecallProduct		= LocalRecallProduct
   				related.RecallProductSerial	= Serial
   				
		RecallProductSerialRangeRel
			one-to-many relation to RecallProductSerial
   			Field Mapping uses symbolic key
   				related.RecallGroup			= LocalRecallGroup
   				related.RecallNotice		= LocalRecallNotice
   				related.RecallProduct		= LocalRecallProduct
   			Instance Selection
   				where (related.ThruSerial			!= blank
   				and    related.NumberOfCharacters = NumberOfSerialCharacters
   				and    related.RecallProductSerial <= Serial
   				and    related.ThruSerial          >= Serial)	        	

    	VendorReturnLineDetailRel						
    		one-to-many relation to VendorReturnLineDetail
    		Field Mapping uses ByLine
    			related.Company													= Company
      		Instance Selection
    			where (related.VendorReturnLineDetail.VendorReturn				= InventoryTransactionLine.OriginatingTransactionDocument
    			and    related.VendorReturnLineDetail.VendorReturnLine			= InventoryTransactionLine.OriginatingTransactionLine
      			and	   related.Lot												= Lot
      			and	   related.Sublot 											= Sublot
      			and	   related.Serial											= Serial
      			and	   related.Bin												= Bin
				and	   related.UnitOfMeasure	 								= UnitOfMeasure)

		ItemLotsRel
    		one-to-many relation to ItemLot
    		Field Mapping uses symbolic key
    			related.Company							= Company
    			related.InventoryLocation				= InventoryTransaction.OriginatingIssueLocation
    			related.Item							= Item

		OriginatingIssueTransactionDetailRel
			one-to-many relation to InventoryTransactionLineDetail
			Field Mapping uses Set6
				related.Company												= Company
				related.InventoryLocation									= InventoryTransaction.OriginatingIssueLocation
			Instance Selection
				where (related.InventoryTransaction							= InventoryTransaction.OriginatingIssueDocument
				and    related.InventoryTransactionLine.LineNumber          = InventoryTransactionLine.LineNumber
				and    related.Item											= Item
				and	   related.Serial										= Serial
				and    related.Lot											= Lot
				and    related.Sublot										= Sublot
				and	   related.Status.Released)

		AnotherInventoryTransactionLineDetailForLotAndSerialForReturnRel
			one-to-many relation to InventoryTransactionLineDetail
			Field Mapping uses Set1
				related.Company											        = InventoryTransaction.Company
			Instance Selection
				where (related.InventoryTransaction.InventoryDocumentType.InventoryReturns
				and	   related.InventoryTransaction.OriginatingIssueDocument 	= DerivedOriginatingIssueDocument
				and    related.InventoryTransactionLine.LineNumber				= InventoryTransactionLine.LineNumber
				and    related.Item											    = Item
				and	   related.Lot												= Lot
				and    related.Sublot                                           = Sublot
				and    related.Serial                                           = Serial
				and    related.Status.Released)

		ToItemLocationRel
			one-to-one relation to ItemLocation
			Field Mapping uses symbolic key
				related.Company										= InventoryTransaction.FromToCompanyLocation.FromToCompany
				related.InventoryLocation							= InventoryTransaction.FromToCompanyLocation.FromToLocation
				related.Item										= Item

        IntransitAndReceivingTransferDetailRel
            one-to-many relation to InventoryTransactionLineDetail
            Field Mapping uses Set2        
                related.Company                                         = InventoryTransaction.FromToCompanyLocation.FromToCompany
                related.InventoryLocation                               = InventoryTransaction.FromToCompanyLocation.FromToLocation
                related.TransactionSystemCode                           = TransactionSystemCode.InventoryControl //"IC"
                related.InventoryTransaction                            = IntransitAndReceivingDocumentNumber
            Instance Selection
                where (related.Item                                     = InventoryTransactionLine.Item
                and    related.Lot                                      = LocalToLot
                and    related.Serial                                   = Serial
                and    related.InventoryTransactionLine.LineNumber      = IntransitAndReceivingLineNumber
                and    related.Sublot                                   = LocalToSublot)

		ValidItemStorageLocationForItemRel
			one-to-one relation to ItemStorageLocation
			Field Mapping uses symbolic key
				related.Company							= Company
				related.InventoryLocation				= InventoryLocation
				related.Item							= Item
				related.WarehouseStorageLocation		= Bin.WarehouseStorageLocation

		BinWarehouseStorageLocationRel
			one-to-one relation to WarehouseStorageLocation
			Field Mapping uses symbolic key
				related.Company							= Company
				related.InventoryLocation				= InventoryLocation
				related.WarehouseStorageLocation		= Bin.WarehouseStorageLocation

    Sets

        Set1
            not indexed
            Sort Order
                Company
                InventoryLocation
                TransactionSystemCode
                InventoryTransaction
                InventoryTransactionLine
                InventoryTransactionLineDetail

        Set2
            indexed
            Sort Order	
            	Company	
            	InventoryLocation
            	TransactionSystemCode	
				InventoryTransaction
            	InventoryTransactionLine.WarehouseShipment
            	Item	
            	Lot	
            	Serial	
            	Bin		
            	InventoryTransactionLine.LineNumber		
            	InventoryTransactionLine.ComponentSequence	
            	InventoryTransactionLineDetail

        Set3
            indexed
            Sort Order	
            	Company	
            	InventoryLocation
            	TransactionSystemCode	
            	InventoryTransaction
            	InventoryTransactionLine.WarehouseShipment
            	Item		
            	InventoryTransactionLine.LineNumber		
            	InventoryTransactionLine.ComponentSequence	
            	Bin            	
            	Lot
            	Serial             	
            	InventoryTransactionLineDetail

                
		Set6
            indexed
            Sort Order	
            	Company	
            	InventoryLocation
            	TransactionSystemCode	
            	InventoryTransaction
            	InventoryTransactionLine
	           	Item
	           	InventoryTransactionLineDetail	
            	

    Field Rules

		UnitOfMeasure
			default to InventoryTransactionLine.TransactionUOM
		
		Item
			initial value is InventoryTransactionLine.Item
			force default to InventoryTransactionLine.Item
			if (TransactionSystemCode.InventoryControl)
				constraint (ItemLotOrSerialOrBinTracked)
					"Item<Item>IsNotDetailTrackedForLocation<InventoryLocation>"				
		
		UOMMultiplier
			default to InventoryTransactionLine.TransactionUOMMultiplier
			
		UpdateDate
			initial value is current timestamp
			default to current timestamp
		
		TransactionDate
			initial value is InventoryTransaction.TransactionDate
			default to InventoryTransaction.TransactionDate

		Lot	
			if (IsLotRequired)
				required
			else 
				if (!InventoryTransactionLine.ItemLocation.IsLotTracked
				and InventoryTransactionLine.InventoryLocationLotTrackingMustMatch)
					cannot be entered
						"CannotEnterLot,NotLotTrackedItem"	
			
			constraint (!AnotherInventoryTransactionLineDetailForLotSerialAndBinRel exists)
	        	"<Lot>LotTransactionDetailAlreadyExist"	                    	
			if (InventoryTransaction.IsInventoryReturns)
				constraint (OriginatingIssueTransactionDetailRel exists)
					"Lot<Lot>IsNotAssociatedWithTheOriginalIssueTransaction"
				
				LocalTotalReturnedQuantity = DerivedReturnedQuantity + Quantity
				constraint (LocalTotalReturnedQuantity <= OriginatingIssueTransactionDetailRel.DerivedDetailQuantityValue)
					"QuantityToReturnIsMoreThanTheAvailableQuantityForReturnForLot<Lot>Sublot<Sublot>"

			if (NegativeAdjustmentsOrTransfers
			or  InventoryTransaction.IsInventoryIssues)	
				include ValueOfUOM													
				if (Lot exists)	
					constraint (not Lot.LotOnHold)
						"Lot<Lot>IsOnHoldCannotIssue"	                            
					if (InventoryTransactionLine.ItemLocation.LotTracked.LotRequiredAtReceipt)
						constraint (StockOnHandDetailForUOMRel exists
						or InventoryTransactionLine.IsIncreaseStock)
							"StockOnHandDoesNotExistForUOM<UnitOfMeasure>,Lot<Lot>,Sublot<Sublot>,Bin<Bin>"			
													
		Serial
			if (IsSerialRequired)
				required		
			else
				if (!InventoryTransactionLine.ItemLocation.IsSerialTracked)
					cannot be entered
						"CannotEnterSerial,NotSerialTrackedItem"
			if (InventoryTransaction.IsInventoryReturns)
				constraint (OriginatingIssueTransactionDetailRel exists)
					"Serial<Serial>IsNotAssociatedWithTheOriginalIssueTransaction"
			if (InventoryTransactionLine.ItemLocation.IsSerialTracked
			and not InventoryTransactionLine.TransactionSystemCode.WorkOrder)
				constraint (!AnotherInventoryTransactionLineDetailForLotSerialAndBinRel exists)
					"<Serial>SerialTransactionDetailAlreadyExist"                          		

				if (InventoryTransaction.IsInventoryBinTransfer
				and InventoryTransactionLine.IsItemLocationBinTracked)
					constraint (!ItemSerialNumberForBinRel exists)
						"Serial<Serial>AlreadyExistForBinTransfer"         
				else
				if (InventoryTransactionLine.IsIncreaseStock) 
					if (InventoryTransaction.IsInventoryIssues or InventoryTransaction.IsInventoryReturns)
						constraint (Serial.Status.Issued)
							"Serial<Serial>HasNotBeenPreviouslyIssued"     						
					else
					if (ItemSerialNumberExistsForIssueAdjustOrTransfer)						   	
						constraint (Serial.Status.Issued)
							"Serial<Serial>AlreadyExist"									   
				else
				if (InventoryTransactionLine.IsDecreaseStock)
					if (InventoryTransactionLine.ItemLocation.SerialTracked.SerialRequiredAtIssue) 

						constraint (Serial not exists)
							"Serial<Serial>AlreadyIssued"                                  		
					else
					if (InventoryTransactionLine.ItemLocation.SerialTracked.SerialRequiredAtReceipt)
						constraint (ItemSerialNumberExistsForIssueAdjustOrTransfer)
							"Serial<Serial>DoesNotExist"                                       
						if (not InventoryTransactionLine.TransactionSystemCode.Requisition
						and not InventoryTransactionLine.TransactionSystemCode.OrderEntry
						and not InventoryTransaction.IsVendorReturnOrAdjustment)							
							constraint (Serial.Status.OnHand) 
								"Serial<Serial>NotAvailableForItem<Item>;SerialIs:<Serial.Status>"

		Bin
			initial value is InventoryTransactionLine.TransactionDetailBin

			if (InventoryTransaction.IsInventoryBinTransfer)					
				if (InventoryTransactionLine.IsItemLocationLotTracked)
					default to InventoryTransactionLine.Bin
				else
					if (InventoryTransactionLine.IsItemLocationSerialTracked)
						default to InventoryTransactionLine.FromToCompanyLocationBin.FromToBin
			else
				if (InventoryTransactionLine.IsItemLocationBinTracked)								
					if (!InventoryTransactionLine.MultipleBins)
						default to InventoryTransactionLine.TransactionDetailBin
						
						if (!InventoryTransaction.IsInventoryBinTransfer)
							constraint (Bin = InventoryTransactionLine.TransactionDetailBin)
								"DetailBinMustMatchLineBin<InventoryTransactionLine.Bin>"					
					
					if (InventoryTransactionLine.IsDecreaseStock
					and InventoryTransactionLine.ItemLocation.SerialTracked.SerialRequiredAtReceipt
					and Serial.Bin entered)
						if (InventoryTransactionLine.MultipleBins)  
							default to Serial.Bin
						if (!InventoryTransaction.IsInventoryBinTransfer)
							constraint (Bin = Serial.Bin)
								"<ItemSerialBinTrackedMessage>"												






	
					if (!InventoryTransaction.IsInventoryIntransitReceiving)	
						required
		
					if (Bin.BinType entered)
						initialize TempCounter
						
						while (TempCounter < 10)
							TempCounter += 1
							if (Bin.BinType = Company.BinTypeArray.BinTypeGroup[TempCounter].BinType)
								if (InventoryTransaction.InventoryDocumentType.InventoryReceipt
								or	InventoryTransaction.InventoryDocumentType.PurchaseOrderReceipt)
									constraint (Company.BinTypeArray.BinTypeGroup[TempCounter].AllowsReceipt)
										"<Bin>ForCompany<Company>BinDoesNotAllowReceipts"
								if (InventoryTransaction.InventoryDocumentType.InventoryIssue)
									constraint (Company.BinTypeArray.BinTypeGroup[TempCounter].AllowsIssue)
										"<Bin>ForCompany<Company>BinDoesNotAllowIssues"			
								TempCounter = 10	
				else 				
					cannot be entered	
						"CannotEnterBinItem<Item>IsNotBinTracked"
			
			if (ItemLocationRel.IsAWarehouseLocationItem
			and Bin.WarehouseStorageLocation entered)
				constraint (HasItemStorageLocation)
					"Bin<Bin>IsNotValidFor_Item<Item>"
											
		Quantity		

			Quantity = DerivedDetailQuantityValue

			if (IsSerialRequired)
				if (!InventoryTransaction.IsInventoryIntransitReceiving)
					if (InventoryTransactionLine.Quantity > 0)
						force default to 1
					else 
						force default to -1
				else
				if (InventoryTransactionLine.Quantity = InventoryTransactionLine.OpenQuantity)
					force default to 1

			if (InventoryTransaction.IsIntransitReceiving
			and InventoryTransactionLine.IsItemLocationSerialTracked)
				constraint (not ExceedsOpenQuantity)
					"InvalidQuantity._Enter_1Or_0ForSerialTrackedItems."
				
			if (InventoryTransaction.IsPhysicalInventoryAdjustment)
				if (!Item.IsCatchWeightItem)
					required
			else
				if (not InventoryTransaction.IsInventoryIntransitReceiving
				and not InventoryTransaction.IsPurchaseOrderReceiptAdjustment)
					required
								
			if (InventoryTransaction.IsInventoryReceipt								
			or  InventoryTransaction.IsInventoryIntransitReceiving
			or  InventoryTransaction.IsInventoryReceivingTransfer
			or  InventoryTransaction.IsInventoryTransfer
			or	InventoryTransaction.IsInventoryReturns)
				constraint (Quantity > 0)
					"QuantityShouldBePositive"		
					
		SecondaryQuantity	
			SecondaryQuantity = DerivedDetailSecondaryQuantityValue
			if (Item.IsCatchWeightItem)
				if (not InventoryTransaction.IsPhysicalInventoryAdjustment
				and not InventoryTransaction.IsPurchaseOrderReceiptAdjustment)
					required
						"MustEnterSecondaryQuantityForCatchWeightItem"		
			else				
				cannot be entered
					"CannotEnterSecondaryQuantityForNonCatchWeightItem"	

		ShelfLife
			if (not ItemLocationRel.IsBinTrackedAndLotTrackedWarehouseItem)
				cannot be entered
					"Shelf_LifeMustBeBlankWhenItemIsNot_Bin_TrackedAnd_Lot_Tracked"
			
			if (InventoryTransactionLine.ItemLocation.IsLotTracked) 
				constraint (not NegativeAdjustmentsOrTransfers)
					"ShelfLifeCannotBeEnteredForNegativeAdjustmentsOrTransfers"

			if (DefaultManufacturingDateOrShelfLife
			and not NegativeAdjustmentsOrTransfers)			
				force default to Lot.ShelfLife

			if (ItemLocationRel.IsBinTrackedAndLotTrackedWarehouseItem
			and ManufacturingDate entered
			and RequireManufacturingDateOrShelfLife
			and not NegativeAdjustmentsOrTransfers)			
				required

		ManufacturingDate
			if (not ItemLocationRel.IsBinTrackedAndLotTrackedWarehouseItem)
				cannot be entered
					"Manufacturing_DateMustBeBlankWhenItemIsNot_Bin_TrackedAnd_Lot_Tracked"

			if (InventoryTransactionLine.ItemLocation.IsLotTracked) 
				constraint (not NegativeAdjustmentsOrTransfers)
					"ManufacturingDateCannotBeEnteredForNegativeAdjustmentsOrTransfers"
			
			if (DefaultManufacturingDateOrShelfLife
            and not NegativeAdjustmentsOrTransfers)			
				force default to Lot.ManufacturingDate

			if (ItemLocationRel.IsBinTrackedAndLotTrackedWarehouseItem
			and ShelfLife entered
			and RequireManufacturingDateOrShelfLife)
				required
		
		LotExpirationDate
			if (not NegativeAdjustmentsOrTransfers)
				default to Lot.LotExpirationDate					
			if (InventoryTransactionLine.ItemLocation.IsLotTracked) 
				constraint (!NegativeAdjustmentsOrTransfers)
					"LotExpirationDateCannotBeEnteredForNegativeAdjustmentsOrTransfers"	    						


			if (not Company.DoNotAllowExpiredLotOnTransaction
			and (Lot.ExpiredItems 
			or  Lot.ItemsAboutToExpire
			or  IsLotExpired 
			or  IsLotNearExpiry))
				confirmation required
					"Lot<Lot>IsExpiredOrWillBeExpiringSoon._Continue?"

			if (ReceiptAndPositiveAdjustment
            and Lot exists)
            	include ValueOfUOM
	
				if (StockOnHandDetailForLotRel.StockOnHandQuantity entered)
					if (Lot.LotExpirationDate entered)
						constraint (ExpirationDateCheck)	
							"Lot<Lot>ExpiresOn<Lot.LotExpirationDate>CannotChangeExpirationDate"                	

			if (LotExpirationDate entered
			and ItemLocationRel.IsAWarehouseLocationItem)
				ExpirationDateSource = ExpirationDateSource.Entered

			if (ShelfLife entered
			and not NegativeAdjustmentsOrTransfers)
				force default to DerivedWarehouseLotExpirationDate
				ExpirationDateSource = ExpirationDateSource.CalculatedFromShelfLife

		LotOnHold
			if (InventoryTransactionLine.ItemLocation.IsLotTracked		
			and NegativeAdjustmentsOrTransfers)
				cannot be entered
					"LotCannotBeOnHoldForAdjustmentAndTransfer"
					
		OriginalQuantity
			if (InventoryTransaction.IsInventoryIntransitReceiving)
				default to InventoryTransactionLine.OriginalQuantity
		
		OpenQuantity
			if (InventoryTransaction.IsInventoryIntransitReceiving)
				default to InventoryTransactionLine.OpenQuantity
							
	StateCycles
	
		InventoryTransactionProcessing is a StateCycle
			state field is Status	
					
			Unreleased is a State

				QuickCreate is a Create Action
					restricted

				QuickUpdate is an Update Action
					restricted
				
				BypassRulesUpdate is an Update Action
					restricted
					bypass field rules

				QuickDelete is a Delete Action
					restricted
			
				Create is an Action		
					valid when (CanCreateDeleteDetail)							
					Action Rules						

						constraint (!InventoryTransactionLine.IsBinTrackedItemWithSingleBin)
							"CannotCreate;DetailsExist"
						constraint (IsNotUDIOrInventoryControl)
							"CannotCreate;ItemIsUDITracked;UseUDIDetails"
				
				SystemCreate is a Create Action
					restricted
					valid when (CanCreateDeleteDetail)
					Action Rules
						constraint (!InventoryTransactionLine.IsBinTrackedItemWithSingleBin)
							"CannotCreate;DetailsExist"

				Update is an Update Action
					valid when (CanUpdateDetailAndNotInProcess)					
					Action Rules
						constraint (CanUpdateDetail)
							"UpdateActionIsNotValidForOnlyBinTrackedItemWithSingleBin"	

						constraint (!InventoryTransactionLine.IsBinTrackedItemWithSingleBin)
							"CannotChange;DetailsExist"
						constraint (IsNotUDIOrInventoryControl)
							"CannotUpdate;ItemIsUDITracked;UseUDIDetails"
							
				SystemUpdate is an Update Action
					restricted
					valid when (CanUpdateDetailAndNotInProcess)
					Action Rules
						constraint (CanUpdateDetail)
							"UpdateActionIsNotValidForOnlyBinTrackedItemWithSingleBin"	
						constraint (!InventoryTransactionLine.IsBinTrackedItemWithSingleBin)
							"CannotChange;DetailsExist"						
					
				UpdateFromTransactionLine is an Instance Action
					restricted
					Parameters
						PrmBin 					is a Bin
						PrmQuantity 			is like Quantity
						PrmSecondaryQuantity 	is like Quantity
						PrmUnitOfMeasure 		is a UnitOfMeasure						
					
					Action Rules
						if (PrmBin entered)
							Bin 				= PrmBin
						
						if (PrmQuantity entered)
							if (InventoryTransaction.InventoryDocumentType.RejectedInspectionItem)
								Quantity 		   += PrmQuantity
							else
								Quantity 			= PrmQuantity
						
						if (PrmSecondaryQuantity entered)
							SecondaryQuantity 	= PrmSecondaryQuantity
						
						if (PrmUnitOfMeasure entered)
							UnitOfMeasure		= PrmUnitOfMeasure
				
				Delete is a Delete Action
					valid when (CanCreateDeleteDetail)
					Entrance Rules
						constraint (CanCreateDeleteDetail)
							"DeleteActionIsNotValidForOnlyBinTrackedItemWithSingleBin"		
						constraint (!InventoryTransactionLine.IsBinTrackedItemWithSingleBin)
							"CannotDelete;DetailsExist"				
					Action Rules						
						constraint (IsNotUDIOrInventoryControl)
							"CannotDelete;ItemIsUDITracked;UseUDIDetails"
							
				SystemDelete is a Delete Action
					restricted
					valid when (CanCreateDeleteDetail)
					Entrance Rules
						constraint (CanCreateDeleteDetail)
							"DeleteActionIsNotValidForOnlyBinTrackedItemWithSingleBin"				
				
				ReceivingUpdate is an Instance Action
					restricted
					Action Rules
						
						if (OpenQuantity entered)
							Quantity   = OpenQuantity
						
						if (InventoryTransactionLine.Bin entered)
							Bin = InventoryTransactionLine.TransactionDetailBin	

				ReleaseLineDetailEdits is an Instance Action	
					restricted 
					Parameters
						PrmIntransitAndReceivingDocumentType		is like InventoryDocumentType 
						PrmIntransitAndReceivingDocumentNumber		is like InventoryTransaction
						PrmIntransitAndReceivingWarehouseShipment   is like WarehouseShipment 
						PrmIntransitAndReceivingLineNumber 			is like LineNumber 
						PrmIntransitAndReceivingComponentSequence 	is like InventorySequence 
						PrmReceiveAll								is Boolean
						PrmInspection								is Boolean	

					Action Rules
						include ReleaseLineDetailValidation
						

				Release is an Instance Action
					restricted
					Parameters
						PrmIntransitAndReceivingDocumentType		is like InventoryDocumentType 
						PrmIntransitAndReceivingDocumentNumber		is like InventoryTransaction
						PrmIntransitAndReceivingWarehouseShipment   is like WarehouseShipment 
						PrmIntransitAndReceivingLineNumber 			is like LineNumber 
						PrmIntransitAndReceivingComponentSequence 	is like InventorySequence 
						PrmReceiveAll								is Boolean
						PrmInspection								is Boolean	
						PrmSkipTransactionCreate					is Boolean
						PrmTransactionUOM							is a UnitOfMeasure
						
					Action Rules
						LocalSkipTransactionCreate	= PrmSkipTransactionCreate
						LocalTransactionUOM			= PrmTransactionUOM
						include ReleaseLineDetailValidation
						if (InventoryTransactionLine.IsItemLocationLotTracked)					
							if (Lot not exists)
								if (IsCreateLot)
									invoke Create ItemLot
										invoked.Company           	 = InventoryTransaction.Company
		           						invoked.InventoryLocation 	 = InventoryTransaction.InventoryLocation
		            					invoked.Item                 = Item
		            					invoked.ItemLot           	 = Lot
		            					invoked.LotOnHold			 = LotOnHold
										if (ItemLocationRel.IsAWarehouseLocationItem)
											if (ShelfLife entered)
												invoked.ManufacturingDate 		= ManufacturingDate
												invoked.ShelfLife		  		= ShelfLife
												invoked.ExpirationDateSource	= ExpirationDateSource
											else
											if (LotExpirationDate entered)
												invoked.LotExpirationDate 		= LotExpirationDate
												invoked.ExpirationDateSource	= ExpirationDateSource
										else
											invoked.LotExpirationDate	        = LotExpirationDate
	            			else
								if (TransactionsWithLotExpirationDate)
									LotExpirationDate = Lot.LotExpirationDate
									ManufacturingDate = Lot.ManufacturingDate
									ShelfLife		  = Lot.ShelfLife
								invoke UpdateFromTransaction Lot
									if (ItemLocationRel.IsAWarehouseLocationItem)
										invoked.PrmManufacturingDate 		= ManufacturingDate
										invoked.PrmShelfLife		  		= ShelfLife
										invoked.PrmExpirationDateSource		= ExpirationDateSource
									invoked.PrmLotExpirationDate			= LotExpirationDate
	            					

						if ((InventoryTransaction.IsInventoryTransfer
						or  InventoryTransaction.IsDirectTransfer)
						and not LocalSkipTransactionCreate)
							if (InventoryTransactionLine.IsToLocationDetailTracked)				
								include CreateIntransitAndReceivingTransferDetail
						




						if  (not InventoryTransaction.IsInventoryIntransitReceiving
						and (InventoryTransactionLine.IsItemLocationBinTracked				
						or  (InventoryTransactionLine.DerivedMultipleUOM > 1
						and  not HasItemLocationStockUOM
						and  not InventoryTransactionLine.ItemLocation.LotTracked.LotRequiredAtIssue
						and  not InventoryTransactionLine.IsItemLocationSerialTracked)
						or  (InventoryTransactionLine.IsStockOnHandUpdateOrCreate
						and  InventoryTransactionLine.ItemLocation.LotTracked.LotRequiredAtReceipt)))
							
							if (InventoryTransactionLine.IsUOMTrackedIn
							and not HasItemLocationStockUOM)
								LocalChangedQuantity				= Quantity
							else
								LocalChangedQuantity				= LocalQuantityInStockUOM
							if (Item.IsCatchWeightItem)
								LocalChangedSecondaryQuantity		= SecondaryQuantity
	
							if (InventoryTransaction.IsInventoryIssues
							or  InventoryTransaction.IsDirectOrInventoryTransfer
							or  InventoryTransaction.IsInventoryBinTransfer
							or  InventoryTransaction.IsVendorReturn 					
							or  InventoryTransactionLine.IsOrderEntryShipment)					
								LocalChangedQuantity 			   = LocalChangedQuantity * -1
								if (Item.IsCatchWeightItem)
									LocalChangedSecondaryQuantity  = LocalChangedSecondaryQuantity * -1
							
							if (StockOnHandDetailRel not exists)
								invoke Create StockOnHandDetail					
									invoked.Company            								= InventoryTransaction.Company
									invoked.InventoryLocation  								= InventoryTransaction.InventoryLocation
									invoked.Item               								= Item
									invoked.StockOnHandDetail.UnitOfMeasure					= LocalUOM
									invoked.StockOnHandDetail.Lot							= LocalLot
									invoked.StockOnHandDetail.Sublot						= LocalSublot
									invoked.StockOnHandDetail.Bin							= LocalBin		
									invoked.StockOnHandQuantity								= LocalChangedQuantity
									invoked.SecondaryQuantity								= LocalChangedSecondaryQuantity
									if (PrmInspection)
										invoked.InspectionHoldQuantity						= LocalChangedQuantity					
										invoked.InspectionHoldSecondaryQuantity				= LocalChangedSecondaryQuantity
							else
								if (InventoryTransactionLine.IsIncreaseStock
								or  InventoryTransactionLine.IsDecreaseStock)
									invoke UpdateFromTransaction StockOnHandDetailRel
										invoked.PrmStockOnHandQuantity						= LocalChangedQuantity	
										invoked.PrmSecondaryQuantity						= LocalChangedSecondaryQuantity
										if (PrmInspection
										or (InventoryTransaction.IsVendorReturn
										and InventoryTransactionLine.VendorReturnLineRel.IsCreatedFromInspectionWithRejectedQuantity))
											invoked.PrmInspectionHoldQuantity				= LocalChangedQuantity
											invoked.PrmInspectionHoldSecondaryQuantity		= LocalChangedSecondaryQuantity
								else
								if (InventoryTransaction.IsAcceptedInspection)
									invoke UpdateFromTransaction StockOnHandDetailRel
										invoked.PrmInspectionHoldQuantity					= LocalChangedQuantity * -1
										invoked.PrmInspectionHoldSecondaryQuantity			= LocalChangedSecondaryQuantity * -1
								else		
								if (InventoryTransaction.IsRejectedInspection
								and InventoryTransactionLine.OriginatingTransaction(POReceiptAdjustmentAndInspectionLine).WriteOff.WriteOff)
									invoke UpdateFromTransaction StockOnHandDetailRel
										invoked.PrmStockOnHandQuantity						= LocalChangedQuantity * -1
										invoked.PrmSecondaryQuantity						= LocalChangedSecondaryQuantity * -1
										invoked.PrmInspectionHoldQuantity					= LocalChangedQuantity * -1
										invoked.PrmInspectionHoldSecondaryQuantity			= LocalChangedSecondaryQuantity * -1
						


						

						if (InventoryTransactionLine.IsItemLocationSerialTracked)	
							if (Serial not exists)  
								if (IsCreateSerial) 
									include CreateItemSerialNumber
							else
								if (InventoryTransaction.IsPurchaseOrderReceiptInspection)
									if (InventoryTransactionLine.POReceiptAdjustmentAndInspectionLineRel.WriteOff.WriteOff
									and InventoryTransactionLine.IsInspectionRejection)
										invoke UpdateStatusBinLocation Serial
											invoked.PrmStatus							= ItemSerialNumber.Status.Issued
									else
										invoke UpdateStatusBinLocation Serial
											invoked.PrmStatus							= ItemSerialNumber.Status.OnHand
								else
									if (InventoryTransaction.IsVendorReturn
									or  InventoryTransactionLine.IsNegativePurchaseOrderReceiptAdjustment)
										invoke Delete Serial
									else
										invoke UpdateStatusBinLocation Serial								
											if (InventoryTransactionLine.IsIncreaseStock)
												if (!InventoryTransaction.IsInventoryIntransitReceiving)
													invoked.PrmStatus							= ItemSerialNumber.Status.OnHand
												if (InventoryTransaction.IsInventoryReceivingTransfer
												or  InventoryTransaction.IsInventoryReturns)
													invoked.PrmInventoryLocation				= InventoryTransaction.InventoryLocation
													invoked.PrmBin                              = Bin
											else								
											if (InventoryTransactionLine.IsDecreaseStock)
												if (InventoryTransaction.IntransitTransfer)
													invoked.PrmStatus     						= ItemSerialNumber.Status.Intransit
												else
												if (InventoryTransaction.IsInventoryBinTransfer)
													invoked.PrmInventoryLocation				= InventoryTransaction.InventoryLocation										
													invoked.PrmBin                              = Bin
													invoked.PrmStatus							= ItemSerialNumber.Status.OnHand
												else
													invoked.PrmStatus							= ItemSerialNumber.Status.Issued
						
						if (InventoryTransaction.IsInventoryIssues		
						or  InventoryTransaction.IsInventoryTransfer
						or  InventoryTransaction.IsDirectTransfer
						or  InventoryTransaction.IsVendorReturn)						

							Quantity							= LocalQuantityInStockUOM * -1						
							if (Item.IsCatchWeightItem)
								SecondaryQuantity 				= SecondaryQuantity * -1		
						else
							if (!InventoryTransaction.IsInventoryIntransitReceiving)
								Quantity						= LocalQuantityInStockUOM							
						
						if (InventoryTransaction.IsInventoryIntransitReceiving)
							if (Quantity <= OpenQuantity
							and Quantity entered)
								if (InventoryTransactionLine.IsItemLocationSerialTracked)
									initialize OpenQuantity
								else	  
                                if (!InventoryTransactionLine.IsBinTrackedOnlyAndMultipleBinsEntered)
                                    OpenQuantity                  = OpenQuantity - Quantity
                                else
                                    OpenQuantity                  = OpenQuantity - InventoryTransactionLine.Quantity

  								initialize Quantity
								initialize Bin
							else
							if (Quantity = OpenQuantity)
								OpenQuantity              		= OpenQuantity	- Quantity
								initialize Quantity
								
							else
								constraint (not ExceedsOpenQuantity)
									"TransactionLine<InventoryTransactionLine.LineNumber>HasQuantityOutOfBalance"
							if (Item.IsCatchWeightItem)
								initialize SecondaryQuantity
						else	
							make transition to Released
						
				ReleaseIntransitLineDetail is an Instance Action
					restricted
					Action Rules
						Quantity    = OriginalQuantity
						make transition to Released
				
				Transfer is an Instance Action
					restricted
					valid when (InventoryTransaction.IsInventoryBinTransfer)
					Local Fields
						LocalFromUOM							is a UnitOfMeasure		
						LocalFromQuantity 						is a Quantity
							precision is Item.NumberOfDecimalsQuantity
						LocalTransferQuantityInToUOM			is a Quantity
							precision is Item.NumberOfDecimalsQuantity
					Action Rules
						if (HasItemLocationStockUOM
						and UnitOfMeasure not = Item.StockUOM)
							initialize UOMCalculation
							UOMCalculation.InputUOM			= UnitOfMeasure
							UOMCalculation.InputQuantity	= Quantity
							UOMCalculation.Method			= UOMCalculation.Method.ConvertToStock
							LocalQuantity					= UOMCalculation.OutputQuantity	
						else
							LocalQuantity					= Quantity

						if (HasItemLocationStockUOM)				
							LocalDetailFromUOM = Item.StockUOM
						else
							LocalDetailFromUOM = UnitOfMeasure	

						if (InventoryTransactionLine.ItemLocation.SerialTracked.SerialRequiredAtReceipt)
							constraint (FromItemSerialNumberRel exists
							and			not FromItemSerialNumberRel.Status.Issued
							and         not FromItemSerialNumberRel.Status.Intransit)
								"SerialDoesNotExist"
								
							constraint (not FromItemSerialNumberRel.Status.Allocated)
								"SerialHasBeenAllocated"
								
							invoke Update FromItemSerialNumberRel
								invoked.Bin		= Bin
					
						else
							constraint (FromStockOnHandDetailRel exists 
							and         LocalQuantity <= FromStockOnHandDetailRel.AvailableQuantity)
								"InsufficientStockOnHandForLine<InventoryTransactionLine.LineNumber>Detail<InventoryTransactionLineDetail>"
						
						invoke UpdateFromTransaction FromStockOnHandDetailRel
							invoked.PrmStockOnHandQuantity						= LocalQuantity * -1	
							invoked.PrmSecondaryQuantity						= SecondaryQuantity * -1						
					
					
						if (UnitOfMeasure = InventoryTransactionLine.ToUOM
						or  HasItemLocationStockUOM)
							LocalTransferQuantityInToUOM	= LocalQuantity	
						else
							LocalFromUOM 					= UnitOfMeasure
							LocalFromQuantity				= LocalQuantity
							
							if (LocalFromUOM != Item.StockUOM
							and InventoryTransactionLine.ToUOM != Item.StockUOM)
								initialize UOMCalculation
								UOMCalculation.InputUOM						= LocalFromUOM
								UOMCalculation.InputQuantity            	= LocalFromQuantity
								UOMCalculation.Method                  		= UOMCalculation.Method.ConvertToStock
								LocalFromQuantity	            			= UOMCalculation.OutputQuantity
			                	LocalFromUOM								= Item.StockUOM
						
							initialize UOMCalculation
							UOMCalculation.InputUOM                 		= LocalFromUOM
			                UOMCalculation.InputQuantity            		= LocalFromQuantity
			                UOMCalculation.InputToUOM						= InventoryTransactionLine.ToUOM
			                UOMCalculation.Method                  			= UOMCalculation.Method.ConvertToAlternate
			                UOMCalculation.ValidateDecimal					= true
			                LocalTransferQuantityInToUOM					= UOMCalculation.OutputQuantity		

						if (HasItemLocationStockUOM)				
							LocalDetailToUOM = Item.StockUOM
						else
							LocalDetailToUOM = InventoryTransactionLine.ToUOM

						if (ToStockOnHandDetailRel not exists)
							invoke Create StockOnHandDetail					
								invoked.Company            					= Company
								invoked.InventoryLocation  					= InventoryLocation
								invoked.Item               					= Item
								invoked.StockOnHandDetail.UnitOfMeasure		= LocalDetailToUOM
								invoked.StockOnHandDetail.Lot				= Lot
								invoked.StockOnHandDetail.Sublot			= Sublot
								invoked.StockOnHandDetail.Bin				= InventoryTransactionLine.FromToCompanyLocationBin.FromToBin									
								invoked.StockOnHandQuantity					= LocalTransferQuantityInToUOM
								invoked.SecondaryQuantity					= SecondaryQuantity
						else
							invoke UpdateFromTransaction ToStockOnHandDetailRel
								invoked.PrmStockOnHandQuantity				= LocalTransferQuantityInToUOM
								invoked.PrmSecondaryQuantity				= SecondaryQuantity
						
						make transition to NonGlobalLedger
					
			Released is a State
			
			NonGlobalLedger is a State
				
				QuickCreate is a Create Action
					restricted
					
				Update is an Update Action
					restricted
					
						
	Actions
		
		Purge is a Purge Action
			bypass relational integrity rules
			restricted
		
		RecallIntransitTransferDetailQuery is a Set Action
			restricted
			Parameters
				PrmRecallGroup		is a RecallGroup
				PrmRecallNotice		is a RecallNotice
				PrmRecallProduct	is a RecallProduct
				PrmItem				is an Item
				PrmQueryDateRange	is a DateRange
				PrmQueryPriority	is Numeric size 2
					States
		   				High			value is 1
		   				Medium			value is 2
		   				Low				value is 3
				PrmQueryDueDate		is TimeStamp
				PrmCreateTasks      is Boolean
				
			Sort Order
				Item
				InventoryTransaction.InventoryDocumentType
				TransactionSystemCode
				Company
           		InventoryLocation
			
			Instance Selection
				where (Item = PrmItem
    			and	   InventoryTransaction.InventoryDocumentType = "IR"
    			and	   TransactionSystemCode = "IC"
    			and	   Company.ItemGroup = PrmRecallGroup
	    		and    PrmQueryDateRange entered
				and    InventoryTransactionLine.TransactionDate within PrmQueryDateRange)
				
			Action Rules
				Instance Rules
					LocalRecallGroup = PrmRecallGroup
					LocalRecallNotice = PrmRecallNotice
					LocalRecallProduct = PrmRecallProduct

					if  ((PrmRecallProduct.HasEnteredSerialNumbers
					and  (RecallProductSerialRel exists
					or    RecallProductSerialRangeRel exists))
					or   (PrmRecallProduct.HasEnteredLotNumbers
					and   (RecallProductLotRel exists
					or     RecallProductLotRangeRel exists))
					or   (!PrmRecallProduct.HasEnteredSerialNumbers
					and    Item.SerialTracked != "N")
					or   (!PrmRecallProduct.HasEnteredLotNumbers
					and    Item.LotTracked != "N"))
						invoke Create RecallProductTransaction
							invoked.RecallGroup										= PrmRecallGroup
							invoked.RecallNotice									= PrmRecallNotice
							invoked.RecallProduct									= PrmRecallProduct
							invoked.ActivityType									= 16 
							invoked.InventoryLocationGroup.InventoryCompany			= Company
							invoked.InventoryLocationGroup.InventoryLocation		= InventoryLocation
							invoked.InventoryTransactionLineDetailGroup.DtlCompany	= Company
							invoked.InventoryTransactionLineDetailGroup.DtlLocation	= InventoryLocation 
				        	invoked.InventoryTransactionLineDetailGroup.TransactionSystemCode			= TransactionSystemCode
				        	invoked.InventoryTransactionLineDetailGroup.InventoryTransaction			= InventoryTransaction
							invoked.InventoryTransactionLineDetailGroup.InventoryTransactionLine		= InventoryTransactionLine
							invoked.InventoryTransactionLineDetailGroup.InventoryTransactionLineDetail	= InventoryTransactionLineDetail
							invoked.LocalPriority									= PrmQueryPriority
							invoked.LocalDueDate									= PrmQueryDueDate
							invoked.TransactionDate									= InventoryTransactionLine.TransactionDate
							invoked.LocalCreateTasks                                = PrmCreateTasks
							
		RecallIssueDetailQuery is a Set Action
			restricted
			Parameters
				PrmRecallGroup		is a RecallGroup
				PrmRecallNotice		is a RecallNotice
				PrmRecallProduct	is a RecallProduct
				PrmItem				is an Item
				PrmQueryDateRange	is a DateRange
				PrmQueryPriority	is Numeric size 2
					States
		   				High			value is 1
		   				Medium			value is 2
		   				Low				value is 3
				PrmQueryDueDate		is TimeStamp
				PrmCreateTasks      is Boolean
					
			Sort Order
				Item
				InventoryTransaction.InventoryDocumentType
				TransactionSystemCode
				Company
           		InventoryLocation
           		
			Instance Selection
				where (Item = PrmItem
    			and	   InventoryTransaction.InventoryDocumentType = "IS"
    			and	   Company.ItemGroup = PrmRecallGroup
	    		and    PrmQueryDateRange entered
	    		and	   InventoryTransactionLine.TransactionDate within PrmQueryDateRange)
				
			Action Rules
				Instance Rules
					LocalRecallGroup = PrmRecallGroup
					LocalRecallNotice = PrmRecallNotice
					LocalRecallProduct = PrmRecallProduct

					if  ((PrmRecallProduct.HasEnteredSerialNumbers
					and  (RecallProductSerialRel exists
					or    RecallProductSerialRangeRel exists))
					or   (PrmRecallProduct.HasEnteredLotNumbers
					and   (RecallProductLotRel exists
					or     RecallProductLotRangeRel exists))
					or   (!PrmRecallProduct.HasEnteredSerialNumbers
					and    Item.SerialTracked != "N")
					or   (!PrmRecallProduct.HasEnteredLotNumbers
					and    Item.LotTracked != "N"))
						invoke Create RecallProductTransaction
							invoked.RecallGroup										= PrmRecallGroup
							invoked.RecallNotice									= PrmRecallNotice
							invoked.RecallProduct									= PrmRecallProduct
							invoked.ActivityType									= 15 
							invoked.RequestingLocationGroup.RequestingCompany		= InventoryTransaction.FromToCompanyLocation.FromToCompany
							invoked.RequestingLocationGroup.RequestingLocation		= InventoryTransaction.FromToCompanyLocation.RequestingLocation
							invoked.InventoryLocationGroup.InventoryCompany			= Company
							invoked.InventoryLocationGroup.InventoryLocation		= InventoryLocation
							invoked.InventoryTransactionLineDetailGroup.DtlCompany	= Company
							invoked.InventoryTransactionLineDetailGroup.DtlLocation	= InventoryLocation 
				        	invoked.InventoryTransactionLineDetailGroup.TransactionSystemCode			= TransactionSystemCode
				        	invoked.InventoryTransactionLineDetailGroup.InventoryTransaction			= InventoryTransaction
							invoked.InventoryTransactionLineDetailGroup.InventoryTransactionLine		= InventoryTransactionLine
							invoked.InventoryTransactionLineDetailGroup.InventoryTransactionLineDetail	= InventoryTransactionLineDetail
							invoked.LocalPriority									= PrmQueryPriority
							invoked.LocalDueDate									= PrmQueryDueDate
							invoked.TransactionDate									= InventoryTransactionLine.TransactionDate
							invoked.LocalCreateTasks                                = PrmCreateTasks

		InventoryTransactionLineDetailPurge is a Set Action
			restricted
			Parameters
				PrmCompany									is an InventoryCompany
					default label is "Company"
				PrmInventoryTransaction						is like InventoryTransaction
					default label is "InventoryTransaction"
				PrmInventoryLocation						is like InventoryLocation
					default label is "InventoryLocation"
				PrmInventoryTransactionLine					is like InventoryTransactionLine
					default label is "InventoryTransactionLine"
				PrmTransactionSystemCode					is like TransactionSystemCode
					default label is "TransactionSystemCode"
				PrmLineNumber								is like LineNumber
					default label is "LineNumber"
				
			Instance Selection
				include deleted records
				where(Company												= PrmCompany
				and   InventoryTransaction									= PrmInventoryTransaction
				and	  InventoryLocation										= PrmInventoryLocation
				and   InventoryTransactionLine								= PrmInventoryTransactionLine
				and	  TransactionSystemCode									= PrmTransactionSystemCode
				and	  InventoryTransactionLine.LineNumber					= PrmLineNumber)
			Action Rules
				Instance Rules
					invoke Purge						
			
