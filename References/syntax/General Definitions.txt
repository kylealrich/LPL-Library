General Definitions  
10 | Configuration Console Reference Guide  General Definitions  
// Scope is defined by indent level. An indent level is 4 spaces or 1 tab 
// Comments are denoted by a double forward slash  // @SuppressWarnings in a comment will suppress all warnings that the L PL line generates  
// @External with a comment will suppress dead code detection/reporting 
Base Definitions  
LPLConstructName  ::= <uppercase  character>[<alphanumeric characters >…] // up to 255 characters  
 
ActionName  ::= <LPLConstructName > 
ActionTag ::= <LPLConstructName > 
BusinessClass  ::= <LPLConstructName > 
BusinessTask  ::= <LPLConstructName > 
CardViewName  ::= <LPLConstructName > 
ConditionName  ::= <LPLConstructName > 
ChartName  ::= <LPLConstructName > 
ColumnarRelationName  ::= <LPLConstructName > 
ContextMessage ::= <LPLConstructName > 
CriteriaName  ::= <LPLConstructName > 
CubeLinkName  ::= <LPLConstructName > 
CubeRelationName ::= <LPLConstructName > 
DetailSectionName  ::= <LPLConstructName > 
DrillName  ::= <LPLConstructName > 
DrillListName  ::= <LPLConstructName > 
FieldGroupName  ::= <LPLConstructName > 
FieldName  ::= <LPLConstructName > 
FormInvokeName  ::= <LPLConstructName > 
FormName  ::= <LPLConstructNam e> 
FullStateName  ::= <StateName >[.<StateName >…] 
GroupName  ::= <LPLConstructName > 
HierarchyName  ::= <LPLConstructName > 
ImageMapName ::= <LPLConstructName > 
ListName  ::= <LPLConstructName > 
MajorSystemProcess  ::= <LPLConstructName > 
MatrixForm  ::= <LPLConstructName > 
MenuItemName  ::= <LPLConstructName > 
MenuName  ::= <LPLConstru ctName> 
M3Interface ::= <LPLConstructName > 
NavigationName  ::= <LPLConstructName > 
PageName  ::= <LPLConstructName > 
PanelName  ::= <LPLConstructName > 
PaneName  ::= <LPLConstructName > 
ParameterName  ::= <LPLConstructName > 
PeriodViewName ::= <LPLConstructName > 
PFlowServiceName ::= <LPLConstructN ame> 
ProgramName  ::= <LPLConstructName > 
RelationName  ::= <LPLConstructName > 
ReportName ::= <LPLConstructName > 
RuleBlockName  ::= <LPLConstructName > 

=== PAGE 11 ===
General Definitions   
Configuration Console Reference Guide  | 11 RuleBlocks  ::= <LPLConstructName > 
SectionName  ::= <LPLConstructName > 
SecurityClaim  ::= <LPLConstruc tName> 
SecurityClassName  ::= <LPLConstructName > 
SetName ::= <LPLConstructName > 
StateName  ::= (<LPLConstructName > | <#>) 
StateCycleName  ::= <LPLConstructName > 
StateFieldName  ::= <LPLConstructName > 
StaticJavaW S ::= <LPLConstructName > 
StaticJavaPD  ::= <LPLConstructName > 
Subject ::= <LPLConstructName > 
TableName  ::= <LPLConstructName > 
TextVariable ::= <LPLConstructName > 
WidgetListName  ::= <LPLConstructName > 
WebAppName  ::= <LPLConstructName > 
WebserviceInt erface : := <LPLConstructName > 
 
Parens ::=  ( ‘(’ 
 | ‘)’ 
 ) 
 ModuleName  ::= <alphanumeric characters > 
ModuleDescription  ::= <Literal
> 
 ClassicPrefix  ::= prefix is <string of 2 to 5 alphanumer ic characters > 
ClassicName  ::= classic name is <Liter al
>  // literal must be all uppercase, no spaces  
ClassicNameForField  ::= classic name for < FullFieldName> is <L iteral> 
 
RpgName ::= rpg name is <Literal > 
 
SqlPrefix ::= sql prefix is <string of 2 to 5 alphanumeric characters > // no spac es 
SqlName ::= sql name is <Literal >  // no leading or trailing spaces allo wed 
SqlNameForField  ::= sql name for < FullFieldName> is <Literal > 
Data and Field Types  
DimensionField ::= <dimension  RelatedField > // this includes isAggre gatable attributes  
FieldSize  ::= <numeric characters > 
KeyField  ::= <keyfield FullFieldName > 
Literal ::= <any character except whitespace or angle brackets > 
NbrDecimals  ::= <numeric characters > 
Number ::= [-]<numeric characters >[.<numeric characters >] 
# ::= <numeric characters > 
Percent ::= <Number>% 
ReportText  ::= (<alphanumeric characters > | ‘:’)  
Text ::= ‘“’<alphanumeric characters >‘”’ 
ViewField  ::= <view FullFieldNam e> 
 DataDefinition ::= ( is a[n] < FieldName
> 
 | is like < FieldName > 
 // must be a simple field; this syntax determines only type and size  
 | is a[n] <BusinessClass> group [in subject < Subject>] 
 // Subjects defined in Product Line Definition  
 | is a[n] <BusinessClass > compute [in subject <Subject >] 
  [measures only ] 

=== PAGE 12 ===
General Definitions  
12 | Configuration Console Reference Guide   | is <TypeDataDefinition > 
 ) // needs to have a standard set of ‘system’ fields: product line, module, and so on  
 
PrimitiveType  ::= ( Alpha 
 | AlphaRight 
 | AlphaUpper 
 | Anniversary     // cannot translate  
 | Binary Document 
 | BinaryObject 
 | Boolean     // cannot translate  
 | BusinessObjectReference [to <BusinessClass >] // cannot translate  
 | CSVText     // cannot translate  
 | Date     // cannot translate  
 | [Unsigned]  Decimal   // cannot translate  
 | Docume ntTitle    // Alpha field with special characteristic: wh en 
  // in the co ntext of a BinaryDocument, it is populated when the BinaryDocument is populated. When user selects a file on 
  // disk into a BinaryDocument field, we search fo r the closest Document Title and MimeType and fill them out.  
 | EmailAddressFiel d [with multiple addresses] 
  // Deprecated: “with multiple addresses” due to size limitation – use MultiEmailAddressField  
 | MultiEmailAddressField 
 | GroupField    // cannot translate  
 | Integer     // cannot tr anslate 
 | Iteration of < BusinessClass >   // cannot translate  
 | JSONObje ct    // cannot translate  
 | MimeType    // cannot translate  
 | Numeric     // cannot translate  
 | Password    // cannot translate  
 | [Unsigned]  Percent   // cannot translate  
 | Period    // cannot translate  
 | RichText 
 | Signed    // valid only in a Repor t Definition  
 | Text 
 | TextDocument    // cannot translate  
 | Time     // cannot translate  
 | TimeStamp     // cannot translate  
 | UniqueID    // cannot translate  
 | URI 
 | URL 
 | XMLDocu ment    // cannot trans late 
 | Year     // cannot translate  
 ) 
 
TypeDataDefinition  ::= 
[us-ascii]<PrimitiveTyp e> [[size (fixed | up to)] <FieldSize>[.< NbrDecimals>]] 
 // ‘up to’ m eans this is a variable size field (for example , varchar) 
 // ‘up to’ on LOB types will restrict the size of the LOB; it is useful in some DBs to reduce the bas e record size  
 // ‘fixed’ is the de fault, however a warning is generated on any non up to type that is 30 spaces or more 
 // unless fixed is de signated. 
 // valid on Alpha and AlphaUpper only 
 // FieldSize is the overall size of the field. A Decimal field of size 12.2 means 12 total digits 
 // of which 2 are the number of digits afte r the decimal  
Fields and Values  
BODId ::= bod id   // references  the BODId GroupField if this Business Class implements BODId  
 

=== PAGE 13 ===
General Definitions   
Configuration Console Reference Guide  | 13 BusinessObjectReference ::= <FieldName > // Field that is  of type BusinessObjectReference  
 
CurrentAsyncId  ::= current async action request id     // valid only when in a background action  
 
CurrentActionBackgroundGroupId ::= current action ba ckground group id // valid only whe n in a background action  
 DefaultLabel ::= default label is (<LiteralMessage
> | untranslatable)  
 // 'untransla table' marks the base translation text as untranslatable 
 // This overrides  the default base label translation te xt. The default base label is the LPLConstructName with spaces inserted 
 //      before each uppe rcase character.  
 DocumentLocation ::= document location.(Local | AWS S3 | External)  
  
// State values for ‘document locat ion’ TypeOperator  
 FieldOrArrayName ::=  ( <FieldName
> 
 | <ArrayComp onent> 
 ) 
 FullFieldName ::=  ( <FieldOrArrayName >[.<FieldOrArrayName
>…] 
 | <CreateStamp > 
 | <CreateDate > 
 | <UpdateStamp > 
 | <RelevanceScore > 
 | <ActionAttribute > 
 | <BODId> 
 | <CurrentAsyncId > 
 | <CurrentActionBackgroundGroupId > 
 | has future changes // Boolean field; returns true if future -dated records e xist 
 | user fields[< Parens><Business Class><Parens>] 
 // references t he set of user fields that have been de fined in this context or the explicitly given BusinessCla ss context 
 ) 
 JavaFormat ::= ‘“’(<Literal> | ‘<’< RelatedValue
>‘>’)…‘” ’ 
 // Must resolve to a JavaFormat as defined here: 
 //   http://docs.oracle.com/javase/7/docs/api/java/util/Formatter.html  
 //  can also see https://en.wikipedia.org/wiki/Regular_expression   
 RelevanceScore::= relevance score 
// this returns the relevance score from a text search – it is valid only on a List Definition  
 States ::=  
States 
<StateName > value is < Literal> [with <Icon
>] 
[<DefaultLabel >] 
 Value ::= ( <Text
> 
 | <Number> 
 | <#> [(year[s] | month[s] | day[s])]  
 | <Percent> 
 | <Constant > 
 | <ActionTagValue > 
 | <StateFieldName > 
 ) 
Operators  
AsOfDate ::= ( as of (< RelatedValue > | all dates) 

=== PAGE 14 ===
General Definitions  
14 | Configuration Console Reference Guide   | after <RelatedValue > 
 | before <RelatedValue > 
 | between <RelatedValue > and <RelatedValue > 
 )  // RelatedValue must be a Date or TimeStamp  
 
AsOfOperator  ::= <Parens><AsOfDate ><Parens> 
 
Constant ::=  ( true 
 | false 
 | blank  
 | high value 
 ) 
 CreateOrUpdateMode ::= mode  
// valid only in the title of a Form; re sults in ‘Create ’ or ‘Update’ 
 
FieldOperator  ::= ( not  // valid only with a Condi tion 
 | !   // “ 
 | no   // “ 
 | old 
 | any   // valid only with multi-valued (array, otm) RelatedField  or RelatedCondition  
 | all   // “ 
 | first  // “ 
 | last   // “ 
 | sum   // “ 
 | avg   // “ 
 | min   // “ 
 | max   // “ 
 | floor 
 | ceiling  
 | pending  
 | instance count of // “ 
 | sizeofarray  
 | (first | last) iteration of  // valid with a OTM  RelatedLink only  
 | next   // valid on Iteration fields only  
 | previous  // “ 
 | reference to  // valid only with a OTO RelatedLink only – returns the BusinessObjec tReference 
   //     of the RelatedLink  
 | target of   // valid only with an “is related va lue…” designated field  
 ) 
 
LinkOperator ::= ( first 
 | last 
 ) 
 
PeriodOperator  ::= 
 ( [(prior | next) year [<# >]] [(prior | next)] (period[s] | week[s ] | month[s]  
   | quarter[s] | [all] year[s]) [< #> [thru <# >]] 
 | [(prior | next) year [ <#>]] [(prior | next)] (period | week | month 
   | quarter | year ) [<#>] (beginning | ending) [ytd] bala nce 
 ) 
 PeriodLabel  ::= period label 
// valid only in the c ontext of a period in a Cube View 
 TotalOperator  ::= ( running total 
 | percent of total) 
 TypeOperator ::= ( decimals 
// vali d with a Decimal type field only  
 | type  // field type – returns string  of <Primitiv eType; for example, Alpha, Decimal, Numeric…  

=== PAGE 15 ===
General Definitions   
Configuration Console Reference Guide  | 15  | size  // size of  the ‘string’ value of a field  
 | uppercase 
 | lowercase  
 | year  // valid with Date and  TimeStamp fields  only 
 | month  // “ – 1-based month number (1-12)  
 | month [short] name // “ 
 | day  // “ – 1-based day number (1-31)  
 | day [short] name // “ 
 | week day // “ – 1-based week day numbe r (1-7) 
 | corporate week day  // week day based on corporate TimeZone  
 | week day  using <RelatedValue > // week day based on RelatedValue TimeZone (must be a TimeZone)  
 | year day // “ – 1-based year day number (1-366)  
 | week  // “ – 1-based week day number (1-52)  
 | week year // “ – year corresponding to week operator (12/31/15) = week 1, week year 16  
 | days in month // “ – number of days in the date’s month (28-31)  
 | days in year // “ – number of days in the date’s year (either  365 or 366) 
 | as years // valid with Numeric type field only – treats v alue as number of years  
 | as months  // valid with Numeric type field only – treats value as number of months  
 | as days // valid with  Numeric type f ield only – treats value as number of days  
 | hours  // valid with Time type fields only – Decimal total nu mber of hours since day beginning  
 | minutes // “ – Decimal  total number of minutes since beginning of day  
 | seconds // “ – Decimal total number of seconds since beginning of day  
 | date  // valid with TimeStamp type fields  only (returns Date in GMT time zone)  
 | corporate date // valid with TimeStamp type fields  only (returns Date in corporate time zone)  
 | system date // valid with TimeStamp type fields only (return s Date in system’ s default time zone)  
 | date using <RelatedValue >// valid with TimeStamp type fields only, RelatedValue must be a TimeZone  
 | time  // valid with TimeStamp type fields only  
 | anniversary  // valid with Date and TimeStamp ty pe fields only 
 | period // valid with Date and TimeStamp type fields only  
 | levels // valid with array fields  only. Defines number of entries up to and including last entered value  
 | level <# > // valid with key field that is a hierarchy; s pecifies which  level in t he hierarchy to address  
 | entries // valid with array fields only. Defines number of entered fields in the array  
 | compact format // valid only with a field that implements CompactFormat  
 | version // valid only with a key field that implements Versioning; will address the version field  
 | label  // returns the translated label for the field  
 | [full] name  // returns the LP L name or full name of the field  
 | text  // valid only with a field that has Text Va riable; retrieves the text with the va riables replaced  
 | [exact] translation // returns the data translatio n for the current local – “exact” will prevent standard defaulting  
 | mime type  // valid with BinaryDocument and BinaryObject only  
 | in base64  // valid with BinaryDocument and BinaryObj ect only 
 | translations // returns the set of data translation for a field; valid on right side of assignment operator only  
 | document location  // returns <document location.(Local, S3, External) >; can be modified  
 | (local | external) document  // return s the local or external document; external includes AWSS3 location  
 | select <SelectStatement > 
 | select line <SelectLineStatement > 
 | document  [for <RelatedLink >] 
  // valid only with a field that is a ‘document template’. This will retrieve the fully replaced  
  // document if n o related link is specified then it is presumed to be based on ‘this instance’  
  // if RelatedLink is a n action request id, document will be replaced based on the action request  
 | compute value [for < RelatedLink >] 
  // valid with a field that is a BusinessClassCompute only  
 | as of <RelatedValue > // related va lue must be a Date or TimeStamp  
 | (date | audit entry) (first | last | next) changed [(from | to)  
   <RelatedValue >] 
 | days was <RelatedValue > [while  <Condition >] [between <RelatedValue > and 
   <RelatedValue >] 
 | weighte d average [between < RelatedValue > and <RelatedValue >] 
 | <PeriodOperato r> 
 | cube dimension value [using year of < RelatedValue >] 

=== PAGE 16 ===
General Definit ions 
16 | Configuration Console Reference Guide    // a dimension value in a cube is typically different than the B usines sClass value 
  // a Period dimension that is not satisfied with a date must have a  year specified  
 | input value // always returns the input value on a transient field with a derived value  
 | plain text // strips all formatting (except new line) from  RichT ext fields 
 | split [on <Literal >] // splits string into an array of strings using ‘Literal’ as separator (comma is default)  
 | using <JavaFormat > [using <RelatedValue >] 
   // RelatedValue valid only with  TimeStamp and must be a TimeZone  
 | (short | medium | long) timestamp [with  day [short] name]  
   [(show | hide) time  zone][(show | hide) seconds]  
   [using <RelatedValue >] 
  // valid with TimeStamp – returns a String 
   // RelatedValue valid only with  TimeStamp and must be a TimeZone  
  // http://docs.oracle.com/javase/7/docs/api/java/text/DateFormat.ht ml 
  // https://docs.oracle.com/javase/tutorial/i18n/format/dateFormat.html  
 | (short | medium | lon g) date [with day [short] name] 
   [using <RelatedValue >] 
  // valid with TimeStamp and Date – returns a  String  
   // RelatedValue valid only with  TimeStamp and must be a TimeZone  
 | (short | medium | long) anniversary [with day [short] name ] 
   [using <RelatedValue >] 
  // valid with TimeStamp, Date, and Anniversary – retur ns a String 
   // RelatedValue valid only with  TimeStamp and must be a TimeZone  
 | (short | medium | long) period 
   [using <RelatedValue >] 
  // valid with  TimeStamp, Date, and Period – returns a String  
   // RelatedValue valid only with  TimeStamp and must be a TimeZone  
 ) 
Dates and Ti me Stamps 
CreateDate  ::= create date // retu rns the most recent create date from the cur rent ‘as of’ date  
 
CreateEffectiveDat e ::= create effective date 
  // retu rns the most rece nt create effective date from the current ‘as of’ date  
 
CreateStamp ::= create stam p[.actor]  // referen ces the Creat eStamp in the business class  
  // by itself it is  the actu al TimeStamp when the instance was created  
  // the actor keyword  references the a ctor who created this instance  
 CurrentDateTime ::=  ( current [(corporate | user)] time 
 | [system] current [(corporate | u ser)] date  
 | [system] current [(corporate  | user)] year 
 | [system] current [corporate] period  
 | [system] current timestamp 
 | [system] current [(corporate | user)] anniversary 
 ) 
 DurationVars  ::= ( duration begin date 
 | duration end date  
 ) 
 
TimeZoneVar ::= ( user time zone 
 | corporate time zone  
 ) 
 
UpdateSta mp ::= update stamp [.actor]  
// references the UpdateStamp in the business class  
  // by itself it is the actual Time Stamp when the instance was last updated  

=== PAGE 17 ===
General Definitions   
Configuration Console Reference Guide  | 17   // the actor keyword references the actor who last updated this instance  
Refe rences  
BaseURL ::= base url< Parens>webapp is <WebAppName ><Parens> // references the current base url context  
 
BusinessClass Total ::= total< Parens><BusinessClass>.< RelatedValue >[,<DimensionField > = 
<RelatedValue >]…<Parens> 
 // first Related Value must  be a defined TotalName on the specified B usinessCl ass 
 // DimensionField is a dimensio n in the BusinessClass 
 
ConfigCategory  ::= <Literal> 
 
ConfigVar  ::= [stack]config [<Parens><ConfigCategory ><Parens>].<Literal> 
 // Allows reference to a configuration variable. Configuration variables are define d in the BusinessClass 
 // ConfigurationParam eter - if it is not found it is blank 
 // ‘stackconfig ’ checks  the parameter at the dataarea, then the tenant, then the stack 
 DataLink ::= [<LinkOperator
>] 
 ( <KeyField > [set] 
 | <hierarchy  KeyField > ( parent 
   | [and] children 
   | [and] siblings 
   | [and] descendants 
   | [and] ancestors 
   | ascendant 
   ) 
 | <RelationName > 
 | <CubeRelationName > 
 | <ColumnarRelationName > 
 | <BusinessClass >[<Parens>(<KeyField > | <BusinessObjectReference>) <Parens>] [set] 
 | <BusinessObjectReference >[<Parens><BusinessClass ><Parens>] 
 | <BusinessClassTotal > 
 | <Agent> 
 | <SessionKey > 
 | actor.conte xt.<KeyField > 
 | audit log records [descending]  // retrieves the set of past and future ( effective -dated) r ecords 
 | [(draft | in process | completed | rejected)] [<BusinessClass >.Create] action requests 
 | this instance  
 | related     // valid within a Relation Definition  
 | from    // valid within a where co ndition on an OTM DataLink  
 | each[<Parens><LPLConstructName ><Parens>] // valid within a  for each loop  
 | invoked     // valid within an invocation  
 | result    // valid within an invocation  
 | child    // valid within Parent Attach Rules  
 | cube[<Parens><BusinessClass>< Parens>] // used to address the AnalyticCube business cla ss 
 | cube drill set   // use d to address the drill set from an AnalyticCube  
 | <TimeZoneVar > 
 ) 
 [<AsOfOperator >] 
 [<Parens >locale of <RelatedValue ><Parens>] // RelatedValue mus t be an IsoLocale  
 [<Parens >where <Condition>< Parens>] 
 [<Parens >level <#>< Parens>]  // only valid on a hierarchy KeyField   
 // <Relate dLink> option is to indicate that you can string related links, that it is recursive;  
 //       for example, KeyField.RelationName.KeyF ield.RelationName.Fi eld 
 // The BusinessCla ss in a ‘BusinessClass set’ must either have a ‘part of’ ontology to  
 //      the prec eding item or it must have a fie ld that is one of the symboli c keys of the pre ceding item  

=== PAGE 18 ===
General Definitions  
18 | Configuration Console Reference Guide   // If there is more than one field that matches the preceding items symbolic ke ys then  
 //      (<Key Field>) must be present to disambiguate which one is des ired 
 // A BusinessObjectReference must have a BusinessClass designat ion if it has not been defined 
 //      as a particular kind of BusinessClass  
 // If this business class is a n Agent then another agent that has been linked to this agent can be 
 //      addressed with the ‘agent(<BusinessClass>)’ designation. To access an y agents that the current  
 //      actor has been linked with simply add the ‘actor’ k eyword in front of the agent keyword. 
 // ‘cube’ must be the first item in any RelatedLink. It re fers to this  business class’ AnalyticCube unless this is  
 //      overrid den with a specif ic BusinessClass in side the parens. 
 
Distinct ::= distinct (< FullFieldName > | <FieldGroupName >) 
  // Curren tly used in ‘for each’ rule only. Returns a set of instances wh ere the Field (or Fields)  
  // are  distinct–that is, no duplicat es of Field  (or Fiel ds) will be returned. The instances  
  // retu rned will have only the distinct f ields filled out a s well as an y fixed fields, such as higher  
  // level keys that are fixed  in the related definition.  
 DocTemplate ::= (template.< Literal> | template name .<RelatedField
>) 
 // Allows reference to  an XML, JSO N, Word rtf, or PDF template sto red in the UserTemplate busines s class  
 InlineEquation ::= [<Parens>]<RelatedValue> <MathOperator > <RelatedValue>[<Parens
>] 
 // A basic InlineEquation (A + B) can also be considered a RelatedValue, becaus e InlineE quation is an option of 
 // RelatedField, which is an option of RelatedValue. This means it can be used as a RelatedValue in the more complex 
 // InlineEquation ((A + B) + C), where (A + B) is the first <Re latedValue> in the InlineEquation, the second + is 
 // the <MathOperator>, and C is the second <RelatedValue>. 
 
LogicalID  ::= logical id // logical id is set in LogicalIdMapping  
 
ParentContext ::= parentcontext. ( isbusclass 
  | name 
  | locale 
  | stereot ype 
  | istransaction  
  | module 
  | dataarea 
  | <SymbolicKeyVar> 
  | isbustask > 
  ) 
 // ‘pa rentcontext’ refer s to the par ent context of the current context  
 // symbolickey retrieves the context infor mation of the Symbolic Key that this business obj ect is ‘cen tered’ on 
 // If the business object is not defined directly via a Symbolic Key but is d efined as being ‘part of’ some other 
 // business class then it gets the context informatio n of the Symbolic  Key of that busine ss class.  
 Phrase ::= phrase[< Parens>locale of < RelatedValue ><Parens>].<Literal
> 
 // Allows reference  to a translatable phrase. Phrases are defined in the UserPhrase business cla ss. 
 RelatedCondition  ::= [<FieldOperator >]( [<RelatedLink>.]<ConditionName
> 
  | <RelatedField >.<StateName > 
  ) 
 RelatedField ::= [<FieldOperator
>] + 
 ( 
 [<RelatedLink>.] <FullFieldName > 
  // <FullFieldName> is optional with the FieldOperator s instanc e count of and (first | last) iteration of  
 | <RelatedLink > (first | last) date within <RelatedLink > 
  // Second RelatedLink must point to a BusClass group. The result of this statement is a  date (never a 
  // condition) so ‘first’ or ‘last’ is required. For example, ‘ Employee date within Enrollmen tGroup’ 
  // implies a condition  whereas ‘first date within’ cl early implies that the result is a  date. 
 | instance count [where <Condition >] 
  // valid in List Definition Summary Total Fields an d ColumnarView lis ts only  
 | <InlineEquation > 
 ) [<TypeOperator >] [<TotalOperator >] 
 

=== PAGE 19 ===
General Definitions   
Configuration Console Reference Guide  | 19 RelatedLink ::=  <DataLink>[.< DataLink >…] 
 
RelatedValue ::= ( <RelatedField >[.<StateName >] // StateName is one of the States defined on the RelatedField  
 | <Value> 
 | <ParentContex t> 
 | <Actor> 
 | <CurrentD ateTime> 
 | <DurationVars > 
 | <CreateStamp > 
 | <UpdateStamp > 
 | <ConfigVar > 
 | <DocTemplate > 
 | <Phrase> 
 | <URLVar> 
 | <SessionKey > 
 | <SessionClai m> 
 | <LinkBack > 
 | <BaseURL> 
 | error message [(key | field name | stack trace)] // valid with InvokeRule ‘re sume on error’  only 
 | page numbe r   // valid in Pa ge Header or Page Footer only  
 | <NavigationName > as pdf [in ( portrait | landscape)] [font offset is < Number>] 
 // default is portraitC 
 | <PeriodLabel > 
 | <CreateOrUpdateMode > 
 | <TenantID > 
 | <LogicalID > 
 | <DocumentLocation > 
 | <TotalVar> 
 | <TimeZoneVar > 
 ) 
 
SessionClaim ::= session.claim.< Literal> 
 // Allows reference to a sessi on claim. Session claims are typic ally Sec urity Claims se t on the session context. 
 SessionKey ::= s ession.key.< FieldName
> 
 // Allows reference to a session key . Session key s are  high level Ke yField values typically tied to the 
 // invocation of a WebApp by s pecifyi ng them on the url (e.g. ‘session.key.SupplierGroup=8181’) 
 SelectStatement  ::= <Message
> 
 // if the field is an XMLDocument, the Se lectStatement is interpre ted as XPath 
 // if the field is a  JSON Object, the Select Statement is interpreted as JSON 
 // if the  field is any other type, the Select Statement is treated as a Regular Expression 
 SelectLineStatement  ::= that (starts with | contains | ends with) < Message
> 
 TenantID ::= tenant id 
 TotalVar ::=  ( total text 
// references “sub -total text is” and “grand total text is” from ListDefinition – used on print total form  
 | total key[.representative text]) 
  // can be used in “sub- total text is” and  “grand total text is” <Message> in ListDefin ition 
 URLVar ::= url. <Literal
> // Allows reference to a url variable. These  variables are available w hen the flag ‘byw’ is set to true on th e url 
 // (…&byw=true& - automatically done on a l inkback) or whe n they are individually specified in the We bApp 
 // definition a s a URL Paramet er 
 

=== PAGE 20 ===
General Definitions  
20 | Configuration Console Reference Guide  
 
Actions and Actors  
ActionAttribute  ::= ( <Actor> // action attributes either re ference the currently executed action or an audite d action 
 | action // an audited action can be addressed u sing ‘for each audit log records’  
  // within this for each, the ‘each’ keyword can be used in conjunction wi th these attributes.  

=== PAGE 21 ===
General Definitions   
Configuration Console Reference Guide  | 21   //          for example,  ‘each.action’ will return the name of the past (or future) action  
  // ‘each.effective date’ will re turn the effective date of that past action  
 | action comment  
 | action type[.(Create | Update | Delet e | Unknown)]  
   // value i s true if the action type is one of the listed types  
 | action tag  // designer defined ‘tag’  
 | applied stamp  // logical time stam p of when record actually changed  / action was ‘applied’  
 | audit entry id  // if active entry – t he id  of the entry 
 | audit period[.(Past | Current | Future)] 
 | correction  // true  if activ e entry is a co rrection 
 | correction comment  // if correction – the comment  
 | effective date 
 | effective time zone // time zone for effective date – default is  serv er time zone 
 | effective through // if new entry correction – the effective thr ough date 
 | effective stamp  
 | entry stamp  // logical timestamp of change ‘request’  
 | initiating act ion 
 | invoking action   // action immediately p receeding this one in the invoke chain  
 | reason  code 
 | subject  
 | system stamp   // physical timestamp of actio n 
 | action request id  
 | changed field names // comma separated li st of changed field names  
 | changed fields  // list of changed fields – valid only in ‘for each’ rule  
 | purge date  // date  all data was purged before  
 | audit transaction id // id that t ies all audit log entries done in a transaction  
 | session   // currently not in use  
 | server identity   // set of IP addresses for the server th at ran the action  
 | remote identity   // IP address for the remot e client that ran the action  
 ) 
 
ActionTag Value ::= action tag.<ActionTag > 
 // allo ws reference to  a specific act ion tag value, which are defined in the Product Line Definition file  
 
Actor ::= [(authenticated  | agent)] actor [ (<ActorAttribute >  
   | context.<FieldNam e> 
   | context.< SecurityClaim > 
   )] 
 // ‘actor’ by itself is the c urren t actor which is repre sented by the Act or KeyField in the environment product line 
 // ‘authenticated actor’ is useful in an Actor Proxy situation 
 // ‘agent actor’ is the actor that this Agent Stereotype is linked to  
 // ‘context.<FieldName>’ is any KeyFi eld within this produc t line – actors c an have any keyfield  
 // within the syste m defined  as a context field with a specific value (e.g. Company = 1 for actor ApClerk1) 
 // if this is  used when doing a ‘for each audit log records’ then it refers to th e act or of the part icular a udit log action 
 ActorAttribute ::=  ( <actor FieldName
> // Field on Actor.busclass in environm ent product line 
 | initiator   // retur ns true if the actor is the intiator of a Re questAction 
 | approv er  // returns true  if the actor is an approver of a RequestAction  
 | final approver  // returns true if the actor is a ‘final approver’ of a RequestAct ion 
 ) 
 Agent ::= [[authenticated] actor.]agent[ <Parens><BusinessClas s><Parens
>] 
 // If this busin ess class is an Agent, another agent that has been linked to this age nt can be addressed with the  
 // ‘agent(<BusinessClass>)’ designation. To access agents that the curre nt ac tor has been linked with, add the 
 // ‘actor’ keyword in front of the ‘agent’ keyword. 
 LinkBack ::= linkback< Parens
>  // The  linkback state ment is a singl e line statement. These options have been  
 webapp is <WebAppName > // placed on separate lines in the BNF for readability.  
 navigation is < NavigationName > 
 [allow anonymous access] 

=== PAGE 22 ===
General Definitions  
22 | Configuration Console Reference Guide   [show form  only] // Suppresses display of the header and navigation bar  
 [text is <Message >] 
 [session key <KeyField > is <RelatedValue >…] 
 <Parens> // This will result in a full http url link that will bring up the designated navigation. If a ‘text is’  
  // message is def ined, then the linkback will be an HTML link, otherwise it will be a simple url.  
Messages  
IsoLocale  ::= <Literal> // must be a valid IsoLocale  
 
LiteralMessage  ::= ‘“’( <Literal> | ‘<’<RelatedValue >‘>’)…‘”’ 
 // ‘Comp anyIsR equired’ will display the m essage ‘Company is required’ 
 // ‘Company<Company>IsRequired’ will display the mess age ‘Company 123 is required’ 
 MessageID  ::= ‘“’( <Literal> | ‘<’<RelatedValue
>‘>’)…‘”’ 
 // ‘CompanyIsRequired’ will display the m essage ‘Company is required’ 
 // ‘Company<Company>IsRequir ed’ wil l display the m essage ‘Company 123 is required’ 
 
Message ::= ( [(untranslatable : | configuration:)]<LiteralMess age>] 
 | <MessageID> 
 ) 
 [<MessageTranslation >…] // valid only when ‘configuration:’ used  
   // ‘untranslatable’ is valid in all LPL  
   // ‘configu ration’ valid in a configuration only 
 MessageTranslation ::= translation for < IsoLocale > is <LiteralMessage
> 
Arrays  
ArrayComponent ::=  ( <array RelatedFiel d> // This can also be a simpl e Alph a field which then implicitly addresses each character 
 | <array RelationName > 
 | <ArrayRangeAddress > 
 | <special in dex SingleValueArrayAdd ress> 
 ) // A Field or a Rela tion can be an array. A Relation becomes an Array Relation when one of the Values  
 // being mapped to the index value is an array (this is done using the each operato r). A Fi eld becomes an 
 // array when it is an ArrayFi eld or when it is a derived field  that contains an ArrayField without a single 
 // subscript de noting a speci fic occ urrence. The RelatedField expression (A + each B) where B is an 
 // ArrayField of siz e 10 returns an array of size 10 where A is added to each  occurrence of B. More complex 
 // array expressi ons are defined below. An ArrayRangeAddress is a subset of an array that can res ult in a  
 // single occurrenc e or even no occurrence. A special ind ex SingleValueArrayAddress is an array 
 // with a specific  special index variable associated w ith it. By defa ult all ArrayComponents are associated with 
 // the special index  variab le i exc ept when two arrays are used in an expression where it is ambiguous  as to  
 // how to associate their respective occurrences. Fo r example, (Array1 * Array2), i s the result a single  
 // dimension array or a two dimension array.  
 
ArrayRangeAddress ::= < ArrayComponent>‘[‘[< I>=]<from IndexVariable>:< to IndexVariable >’]’ 
 // This expression defines a subset range of the A rrayComponent denoted by two index variables : the 
 // from IndexVariable and the t o IndexVariable. The to IndexVariable is inclusive. The si ze of this array 
 // is (to Index Variable – from In dexVariable) + 1. 
 I ::= ( i | j | k ) 
// These are intern al array indexing variables, which are for special use only within array expressions.  
 // Their purpose is to allow the explicit mapping of multiple arra y occurrences in a single expression. 
 // The  i variable is implicitly used and is access ible in any ar ray exp ression ; for ex ample, for each 
 // <ArrayComponent> is equivalent to for each <Arr ayComponent>[i=1:arraysize]; so the 
 // special index variable i can be used to explicitly address an occurrence within the for loop. This can be 
 // use ful for comparing the current occurrence with the next occurrence: if (A[i] == A[i+1]).  

=== PAGE 23 ===
General Definitions   
Configuration Console Reference Guide  | 23  // Any Arra y index ed with a special index is still considered an ArrayComp onent as it implicitly means  
 // all occurrences in the absence of any array occurrence conte xt. 
 
IndexVari able ::= ( <RelatedValue > 
 | <I> 
 | <SizeOfArray > 
 ) // Arrays are indexed beginning with 1. The first occur rence of an array is denoted with an index of 1.  
 // An in dex var iable c an be a RelatedValue that is not an array or the special index variables i,  j, and k. 
 SingleValueArra yAddress ::= < ArrayComponent>‘[‘< IndexVariable
>’]’ 
 // A specific val ue in an array is addressed by using hard brackets [  ] to denote the 
 // index of the  specific occur rence. The special index variables only have m eaning when used within 
 // an array context that is an ArrayExpression or a for each <ArrayComponent> scoped statement.  
 SizeOfArr ay ::= sizeofarray <ArrayComp onent
> 
 // sizeofarray returns the size of the first array c omponent in the ArrayComponent (an ArrayComponent 
 // can be made up of several ArrayComponents ). 