Page Definition 
// Page definition files must have an extension of .page and are found in com/lawson/forms/<ModuleName> . Page names exist in the same name space as 
// BusinessClass names and BusinessTask names. 
 
// Pages and CompositeForms have a lot of similarity but also some significant differences . 
// The similarity is that they are both made up of panels. 
// The diffe rence is in the ir ontology and their (current) capability. 
 
// A CompositeForm is defined within the scope of a BusinessClass, BusinessTask, or Field, like a regular Form. Because of this it presupposes that all references 
// are references with in the context of that Business Class. A Page is defined as an individual entity at the same scoping level as a BusinessClass, Task, or Field. 
// It is also made up of panels but each panel must designate its own particular context. Pages can also have multi-pane panels whereas CompositeForms cannot. 
// This restrict ion is not ontologically required; it is just a simplification for now. 
 
Page Structure ::= 
 
<PageName> is a SplashPage 
	[title is <Message>] // defaults to Pa geName 
	[allow anonymous access] 
	[show panel control on left] 
	
	[Context Form] 
		Layout 
			<FormLayout>… // valid fields are the set of all Context fields defined on al l Panels an d panes 
	
	<PanelName> is a Panel… // multiple panels would f low on the page inline rather than have tabs 
		[title is <Message>] 
		[mouse over text is <Message>] 
		<MenuPanel> 
		[show in column(1|2|3|4|5|6|7|8|9|10|11|12)] 
 
<PageName> is a Page 
	[title is <Message>]  // defaul ts to PageName 
	[allow anonymous access] 
	[show panel controlon left] 
	[is report [for <WebAppName>[,<WebAppName>]…] 
		[category is <Message>] 
	[orientation is (portrait | landscape)] 
	[font offset is <Number>] 
	
	[cart form is <BusinessClass>.<FormName>] // FormName must be a Composit eForm that implements CartView 
	
	[background is (<ImageName> | theme color)] 
		[span header] 
		[foreground is (dark | light)] // default is dark 
	
	[Context Form] 
		[background is (<ImageName> | theme color)] 
			[span header] 
			[foreground is (dark | light)] // default is dark 
		Layout 
			<FormLayout>… // valid fields are the set of all C ontext fields defined on all Pane ls and panes 
	
	<PanelName> is a Panel … 
		[title is <Message>] 
		[mouse over text is <Message>] 
		<PanelDefinition> 
	
	<PanelName> is a DashBoardPanel … 
		[title is <Message>] 
		[mouse over text is <Message>] 
		[show (3 | 4) columns] // default is 3 columns 
		[use 12 column grid] 
		[background is (<ImageName> | theme color)] 
		[print as dashboard] 
			[compress columns] 
		<PaneName> is a Panel
			[title is <Message>] // defaults to P aneName 
			[(double widt h | triple width | quad width)] 
			[span (1|2|3|4|5|6|7|8|9|10|11|12) columns] 
			[double height] 
			[show in column (1|2|3|4|5|6|7|8|9|10|11|12)] 
			<PanelDefinition> 
 
	<PanelName> is a MultiPanePanel … 
		[title is <Message>] 
		[mouse over text is <Message>] 
		[vertical split is <Number>/<Number>] // default is 50/50 
		pane <PaneNumber>… 
			<PanelDefinitio n> 
 
	<PanelName> is a MultiListPanel … 
		[title is <Message>] 
		[mouse over text is <Message>] 
		[(valid | visible) when <SimpleCondition>] 
		<ListPanel>… 
 
	<PanelName> is a ColumnarPanel … 
		[title is <Message>] 
		[mouse over text is <Message>] 
		[left column] 
			<PanelDefinition>… // can have mul tiple panels if each one i s a Fi xedSizeList 
		main column 
			<PanelDefinition>… 
		[right column] 
			<PanelDefinition>… 
	
PaneNumber ::= (1 | 2 | 3 | 4) // 1 is upper left, 2 is lower left, 3 is upper right, 4 is lower right 
 
// The current metaphor for Mult iPanePanel panes is that ther e are four possi ble panes: pane 1 is th e upper l eft, pane 2 is the lower left, 
// pane 3 i s the uppe r right a nd pane 4 is the lower right. 
// Pane interaction is accomplished through infer encing how th e actions relate to each other through the lpl business cl ass action sp ecification. 

WorkViewPaneNumber ::= (1 | 2 | 3) 
// Work ViewPanes are columnar. There can be only up to 3 WorkViewPanes. 


Panels 
PanelDefinition ::= 
	[(valid | visible) when <SimpleCondition>] 
		// SimpleCondition must start wi th Sessio nKey or actor.contex t.KeyF ield 
		// This is not valid when the Pan el is used in a Multi-Pane Panel 
	(<MenuPanel> 
	| <ListPanel> 
	| <SearchPanel> 
	| <URLPanel> 
	)
	

List 
ListPanel ::= 
	business class is	(<BusinessClass>[(<AsOfOperator> | .<RelatedLink>)] 
						| pane<PaneNumber>.<RelatedLink> 
						| <Agent>.<RelatedLink> 
						) 
		[visible when <SimpleCondition>] // valid on a MultiListP anel only 
		[panel text is <Message>] // valid on a Mult iListPanel only 
		[show <#> lines]  // valid on a Mul tiListPanel only 
		[list is (<ListName> | inline)] // defaults to primary l ist on re sultant busines s class 
			[title is <Message>] // default s to the title of <Li stName> 
			[display (list | <ChartName>)] // over rides t he list default 
			[Row Dimensions] // valid on a CubeView only, over rides the CubeV iew Row Dimen sion 
				<DimensionField>… 
			[overview navigation is <NavigationName>] // valid on a DashBoardPanel only 
				[label is <Message>] 
			[<ListDefinition>] // valid on inline List only 
		[helper list is <RelatedLink>.(<ListName> | primary)…] 
			// valid on a r elative pane only - <Re latedLink> is relative to pane<PaneNumber> 
			[valid when <SimpleCondition>] 
			[title is <Message>] 
			[<Action>] 
				[invoked.<FullFieldName> = <RelatedValue>] 
		[Context] 
			<FieldName>… // Must be an ontological context field of the business class or, if the list is a CubeView , it can 
			// also be a dimension. Valu es for this c an com e from a contex t session key, an 
			// ‘actor.agent(BusClass).FieldName’ lookup, or from the current context before a 
			// Navigation brings up this page 
		[Actions] 
			(<CalledOutAction> 
			| form is <RelatedLink>.<FormName> // <RelatedLink> can only be one of the context fields 
				[<Label>] 
			)…
	

Menu 
MenuPanel ::= 
	Layout 
		[footer is <CardViewName>] // must be first element under Layout 
		<MenuLayout>… 
 
MenuLayout ::= 
	(<FormText> 
	| <MenuItem> 
		[title is <Message>] 
		[menu it em name is <MenuItemName>] 
		[description is <Message>] 
		[(icon is <Icon> | image is <ImageName>)] 
		[allow anonymous access] 
	| <LayoutDirective> 
	[<MenuLayout>…] 
	) 


Search 
SearchPanel :: = 
	search form is <BusinessClass>.<FormName> 
		[list is (<ListName> | inline)] // default s to primary list on resulta nt busine ss class 
			[<ListDefinition>] // valid on inline List only 
		[Context] 
			<FieldName>… 
		[Actions] 
			([action is] [<StateName>.]<ActionName>… 
				[<Label>] 
			| form is <RelatedLink>.<FormName>… // <RelatedLink> can only be one of the context fields 
				[<Label>] 
			) 
			// A context field will implicitly be used as a ‘fixed’ context to any Create action that is executed – if Context of ‘Actor’ is specified 
			// and a Create action is executed then the Actor field in the business class will be populated with the Actor context


URL 
URLPanel ::= 
	url is [(<BusinessC lass> | pane <PaneNumber>).]<HttpURL>


Work View 
WorkViewPanel ::= 
	(business class is	(<BusinessClass>[.<RelatedLink>] 
						| pane<PaneNumber>.<RelatedLink> 
						| <Agent>.<RelatedLink> 
						) 
		[title is <Message>] // defaults to the title of <ListName> 
		[show <#> lines]  // defaults to 15 lines 
		[list is (<ListName> | inline)] // defaults to primary list on resultant business class 
			[<ListDefinition>] // valid on inline List only 
		[sort order is (<SetName> | primary)] 
		[Context] 
			<FieldName>… 
		[Instance Selection] // This is additive to the list definition’s (<ListNam e>) Instance Selection 
			where <Condition> 
	| detail fields view of pane<PaneNumber> 
	| link display view of pane<PaneNumber> 
	) 